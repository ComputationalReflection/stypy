
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: GUI neutral widgets
3: ===================
4: 
5: Widgets that are designed to work for any of the GUI backends.
6: All of these widgets require you to predefine a :class:`matplotlib.axes.Axes`
7: instance and pass that as the first arg.  matplotlib doesn't try to
8: be too smart with respect to layout -- you will have to figure out how
9: wide and tall you want your Axes to be to accommodate your widget.
10: '''
11: 
12: from __future__ import (absolute_import, division, print_function,
13:                         unicode_literals)
14: 
15: import copy
16: import six
17: from six.moves import zip
18: 
19: import numpy as np
20: from matplotlib import rcParams
21: 
22: from .mlab import dist
23: from .patches import Circle, Rectangle, Ellipse
24: from .lines import Line2D
25: from .transforms import blended_transform_factory
26: 
27: 
28: class LockDraw(object):
29:     '''
30:     Some widgets, like the cursor, draw onto the canvas, and this is not
31:     desirable under all circumstances, like when the toolbar is in
32:     zoom-to-rect mode and drawing a rectangle.  The module level "lock"
33:     allows someone to grab the lock and prevent other widgets from
34:     drawing.  Use ``matplotlib.widgets.lock(someobj)`` to prevent
35:     other widgets from drawing while you're interacting with the canvas.
36:     '''
37: 
38:     def __init__(self):
39:         self._owner = None
40: 
41:     def __call__(self, o):
42:         '''reserve the lock for *o*'''
43:         if not self.available(o):
44:             raise ValueError('already locked')
45:         self._owner = o
46: 
47:     def release(self, o):
48:         '''release the lock'''
49:         if not self.available(o):
50:             raise ValueError('you do not own this lock')
51:         self._owner = None
52: 
53:     def available(self, o):
54:         '''drawing is available to *o*'''
55:         return not self.locked() or self.isowner(o)
56: 
57:     def isowner(self, o):
58:         '''Return True if *o* owns this lock'''
59:         return self._owner is o
60: 
61:     def locked(self):
62:         '''Return True if the lock is currently held by an owner'''
63:         return self._owner is not None
64: 
65: 
66: class Widget(object):
67:     '''
68:     Abstract base class for GUI neutral widgets
69:     '''
70:     drawon = True
71:     eventson = True
72:     _active = True
73: 
74:     def set_active(self, active):
75:         '''Set whether the widget is active.
76:         '''
77:         self._active = active
78: 
79:     def get_active(self):
80:         '''Get whether the widget is active.
81:         '''
82:         return self._active
83: 
84:     # set_active is overridden by SelectorWidgets.
85:     active = property(get_active, lambda self, active: self.set_active(active),
86:                       doc="Is the widget active?")
87: 
88:     def ignore(self, event):
89:         '''Return True if event should be ignored.
90: 
91:         This method (or a version of it) should be called at the beginning
92:         of any event callback.
93:         '''
94:         return not self.active
95: 
96: 
97: class AxesWidget(Widget):
98:     '''Widget that is connected to a single
99:     :class:`~matplotlib.axes.Axes`.
100: 
101:     To guarantee that the widget remains responsive and not garbage-collected,
102:     a reference to the object should be maintained by the user.
103: 
104:     This is necessary because the callback registry
105:     maintains only weak-refs to the functions, which are member
106:     functions of the widget.  If there are no references to the widget
107:     object it may be garbage collected which will disconnect the
108:     callbacks.
109: 
110:     Attributes:
111: 
112:     *ax* : :class:`~matplotlib.axes.Axes`
113:         The parent axes for the widget
114:     *canvas* : :class:`~matplotlib.backend_bases.FigureCanvasBase` subclass
115:         The parent figure canvas for the widget.
116:     *active* : bool
117:         If False, the widget does not respond to events.
118:     '''
119:     def __init__(self, ax):
120:         self.ax = ax
121:         self.canvas = ax.figure.canvas
122:         self.cids = []
123: 
124:     def connect_event(self, event, callback):
125:         '''Connect callback with an event.
126: 
127:         This should be used in lieu of `figure.canvas.mpl_connect` since this
128:         function stores callback ids for later clean up.
129:         '''
130:         cid = self.canvas.mpl_connect(event, callback)
131:         self.cids.append(cid)
132: 
133:     def disconnect_events(self):
134:         '''Disconnect all events created by this widget.'''
135:         for c in self.cids:
136:             self.canvas.mpl_disconnect(c)
137: 
138: 
139: class Button(AxesWidget):
140:     '''
141:     A GUI neutral button.
142: 
143:     For the button to remain responsive you must keep a reference to it.
144: 
145:     The following attributes are accessible
146: 
147:       *ax*
148:         The :class:`matplotlib.axes.Axes` the button renders into.
149: 
150:       *label*
151:         A :class:`matplotlib.text.Text` instance.
152: 
153:       *color*
154:         The color of the button when not hovering.
155: 
156:       *hovercolor*
157:         The color of the button when hovering.
158: 
159:     Call :meth:`on_clicked` to connect to the button
160:     '''
161: 
162:     def __init__(self, ax, label, image=None,
163:                  color='0.85', hovercolor='0.95'):
164:         '''
165:         Parameters
166:         ----------
167:         ax : matplotlib.axes.Axes
168:             The :class:`matplotlib.axes.Axes` instance the button
169:             will be placed into.
170: 
171:         label : str
172:             The button text. Accepts string.
173: 
174:         image : array, mpl image, Pillow Image
175:             The image to place in the button, if not *None*.
176:             Can be any legal arg to imshow (numpy array,
177:             matplotlib Image instance, or Pillow Image).
178: 
179:         color : color
180:             The color of the button when not activated
181: 
182:         hovercolor : color
183:             The color of the button when the mouse is over it
184:         '''
185:         AxesWidget.__init__(self, ax)
186: 
187:         if image is not None:
188:             ax.imshow(image)
189:         self.label = ax.text(0.5, 0.5, label,
190:                              verticalalignment='center',
191:                              horizontalalignment='center',
192:                              transform=ax.transAxes)
193: 
194:         self.cnt = 0
195:         self.observers = {}
196: 
197:         self.connect_event('button_press_event', self._click)
198:         self.connect_event('button_release_event', self._release)
199:         self.connect_event('motion_notify_event', self._motion)
200:         ax.set_navigate(False)
201:         ax.set_facecolor(color)
202:         ax.set_xticks([])
203:         ax.set_yticks([])
204:         self.color = color
205:         self.hovercolor = hovercolor
206: 
207:         self._lastcolor = color
208: 
209:     def _click(self, event):
210:         if self.ignore(event):
211:             return
212:         if event.inaxes != self.ax:
213:             return
214:         if not self.eventson:
215:             return
216:         if event.canvas.mouse_grabber != self.ax:
217:             event.canvas.grab_mouse(self.ax)
218: 
219:     def _release(self, event):
220:         if self.ignore(event):
221:             return
222:         if event.canvas.mouse_grabber != self.ax:
223:             return
224:         event.canvas.release_mouse(self.ax)
225:         if not self.eventson:
226:             return
227:         if event.inaxes != self.ax:
228:             return
229:         for cid, func in six.iteritems(self.observers):
230:             func(event)
231: 
232:     def _motion(self, event):
233:         if self.ignore(event):
234:             return
235:         if event.inaxes == self.ax:
236:             c = self.hovercolor
237:         else:
238:             c = self.color
239:         if c != self._lastcolor:
240:             self.ax.set_facecolor(c)
241:             self._lastcolor = c
242:             if self.drawon:
243:                 self.ax.figure.canvas.draw()
244: 
245:     def on_clicked(self, func):
246:         '''
247:         When the button is clicked, call this *func* with event.
248: 
249:         A connection id is returned. It can be used to disconnect
250:         the button from its callback.
251:         '''
252:         cid = self.cnt
253:         self.observers[cid] = func
254:         self.cnt += 1
255:         return cid
256: 
257:     def disconnect(self, cid):
258:         '''remove the observer with connection id *cid*'''
259:         try:
260:             del self.observers[cid]
261:         except KeyError:
262:             pass
263: 
264: 
265: class Slider(AxesWidget):
266:     '''
267:     A slider representing a floating point range.
268: 
269:     Create a slider from `valmin` to `valmax` in axes `ax`. For the slider to
270:     remain responsive you must maintain a reference to it.
271: 
272:     Call :meth:`on_changed` to connect to the slider event
273:     '''
274:     def __init__(self, ax, label, valmin, valmax, valinit=0.5, valfmt='%1.2f',
275:                  closedmin=True, closedmax=True, slidermin=None,
276:                  slidermax=None, dragging=True, **kwargs):
277:         '''
278:         Parameters
279:         ----------
280:         ax : Axes
281:             The Axes to put the slider in.
282: 
283:         label : str
284:             Slider label.
285: 
286:         valmin : float
287:             The minimum value of the slider.
288: 
289:         valmax : float
290:             The maximum value of the slider.
291: 
292:         valinit : float, optional, default: 0.5
293:             The slider initial position.
294: 
295:         valfmt : str, optional, default: "%1.2f"
296:             Used to format the slider value, fprint format string.
297: 
298:         closedmin : bool, optional, default: True
299:             Indicate whether the slider interval is closed on the bottom.
300: 
301:         closedmax : bool, optional, default: True
302:             Indicate whether the slider interval is closed on the top.
303: 
304:         slidermin : Slider, optional, default: None
305:             Do not allow the current slider to have a value less than
306:             the value of the Slider `slidermin`.
307: 
308:         slidermax : Slider, optional, default: None
309:             Do not allow the current slider to have a value greater than
310:             the value of the Slider `slidermax`.
311: 
312:         dragging : bool, optional, default: True
313:             If True the slider can be dragged by the mouse.
314: 
315:         Notes
316:         -----
317:         Additional kwargs are passed on to ``self.poly`` which is the
318:         :class:`~matplotlib.patches.Rectangle` that draws the slider
319:         knob.  See the :class:`~matplotlib.patches.Rectangle` documentation for
320:         valid property names (e.g., `facecolor`, `edgecolor`, `alpha`).
321:         '''
322:         AxesWidget.__init__(self, ax)
323: 
324:         if slidermin is not None and not hasattr(slidermin, 'val'):
325:             raise ValueError("Argument slidermin ({}) has no 'val'"
326:                              .format(type(slidermin)))
327:         if slidermax is not None and not hasattr(slidermax, 'val'):
328:             raise ValueError("Argument slidermax ({}) has no 'val'"
329:                              .format(type(slidermax)))
330:         self.closedmin = closedmin
331:         self.closedmax = closedmax
332:         self.slidermin = slidermin
333:         self.slidermax = slidermax
334:         self.drag_active = False
335:         self.valmin = valmin
336:         self.valmax = valmax
337:         valinit = self._value_in_bounds(valinit)
338:         if valinit is None:
339:             valinit = valmin
340:         self.val = valinit
341:         self.valinit = valinit
342:         self.poly = ax.axvspan(valmin, valinit, 0, 1, **kwargs)
343:         self.vline = ax.axvline(valinit, 0, 1, color='r', lw=1)
344: 
345:         self.valfmt = valfmt
346:         ax.set_yticks([])
347:         ax.set_xlim((valmin, valmax))
348:         ax.set_xticks([])
349:         ax.set_navigate(False)
350: 
351:         self.connect_event('button_press_event', self._update)
352:         self.connect_event('button_release_event', self._update)
353:         if dragging:
354:             self.connect_event('motion_notify_event', self._update)
355:         self.label = ax.text(-0.02, 0.5, label, transform=ax.transAxes,
356:                              verticalalignment='center',
357:                              horizontalalignment='right')
358: 
359:         self.valtext = ax.text(1.02, 0.5, valfmt % valinit,
360:                                transform=ax.transAxes,
361:                                verticalalignment='center',
362:                                horizontalalignment='left')
363: 
364:         self.cnt = 0
365:         self.observers = {}
366: 
367:         self.set_val(valinit)
368: 
369:     def _value_in_bounds(self, val):
370:         ''' Makes sure self.val is with given bounds.'''
371:         if val <= self.valmin:
372:             if not self.closedmin:
373:                 return
374:             val = self.valmin
375:         elif val >= self.valmax:
376:             if not self.closedmax:
377:                 return
378:             val = self.valmax
379: 
380:         if self.slidermin is not None and val <= self.slidermin.val:
381:             if not self.closedmin:
382:                 return
383:             val = self.slidermin.val
384: 
385:         if self.slidermax is not None and val >= self.slidermax.val:
386:             if not self.closedmax:
387:                 return
388:             val = self.slidermax.val
389:         return val
390: 
391:     def _update(self, event):
392:         '''update the slider position'''
393:         if self.ignore(event):
394:             return
395: 
396:         if event.button != 1:
397:             return
398: 
399:         if event.name == 'button_press_event' and event.inaxes == self.ax:
400:             self.drag_active = True
401:             event.canvas.grab_mouse(self.ax)
402: 
403:         if not self.drag_active:
404:             return
405: 
406:         elif ((event.name == 'button_release_event') or
407:               (event.name == 'button_press_event' and
408:                event.inaxes != self.ax)):
409:             self.drag_active = False
410:             event.canvas.release_mouse(self.ax)
411:             return
412:         val = self._value_in_bounds(event.xdata)
413:         if val is not None:
414:             self.set_val(val)
415: 
416:     def set_val(self, val):
417:         xy = self.poly.xy
418:         xy[2] = val, 1
419:         xy[3] = val, 0
420:         self.poly.xy = xy
421:         self.valtext.set_text(self.valfmt % val)
422:         if self.drawon:
423:             self.ax.figure.canvas.draw_idle()
424:         self.val = val
425:         if not self.eventson:
426:             return
427:         for cid, func in six.iteritems(self.observers):
428:             func(val)
429: 
430:     def on_changed(self, func):
431:         '''
432:         When the slider value is changed, call *func* with the new
433:         slider position
434: 
435:         A connection id is returned which can be used to disconnect
436:         '''
437:         cid = self.cnt
438:         self.observers[cid] = func
439:         self.cnt += 1
440:         return cid
441: 
442:     def disconnect(self, cid):
443:         '''remove the observer with connection id *cid*'''
444:         try:
445:             del self.observers[cid]
446:         except KeyError:
447:             pass
448: 
449:     def reset(self):
450:         '''reset the slider to the initial value if needed'''
451:         if (self.val != self.valinit):
452:             self.set_val(self.valinit)
453: 
454: 
455: class CheckButtons(AxesWidget):
456:     '''
457:     A GUI neutral set of check buttons.
458: 
459:     For the check buttons to remain responsive you must keep a
460:     reference to this object.
461: 
462:     The following attributes are exposed
463: 
464:      *ax*
465:         The :class:`matplotlib.axes.Axes` instance the buttons are
466:         located in
467: 
468:      *labels*
469:         List of :class:`matplotlib.text.Text` instances
470: 
471:      *lines*
472:         List of (line1, line2) tuples for the x's in the check boxes.
473:         These lines exist for each box, but have ``set_visible(False)``
474:         when its box is not checked.
475: 
476:      *rectangles*
477:         List of :class:`matplotlib.patches.Rectangle` instances
478: 
479:     Connect to the CheckButtons with the :meth:`on_clicked` method
480:     '''
481:     def __init__(self, ax, labels, actives):
482:         '''
483:         Add check buttons to :class:`matplotlib.axes.Axes` instance *ax*
484: 
485:         *labels*
486:             A len(buttons) list of labels as strings
487: 
488:         *actives*
489:             A len(buttons) list of booleans indicating whether
490:              the button is active
491:         '''
492:         AxesWidget.__init__(self, ax)
493: 
494:         ax.set_xticks([])
495:         ax.set_yticks([])
496:         ax.set_navigate(False)
497: 
498:         if len(labels) > 1:
499:             dy = 1. / (len(labels) + 1)
500:             ys = np.linspace(1 - dy, dy, len(labels))
501:         else:
502:             dy = 0.25
503:             ys = [0.5]
504: 
505:         cnt = 0
506:         axcolor = ax.get_facecolor()
507: 
508:         self.labels = []
509:         self.lines = []
510:         self.rectangles = []
511: 
512:         lineparams = {'color': 'k', 'linewidth': 1.25,
513:                       'transform': ax.transAxes, 'solid_capstyle': 'butt'}
514:         for y, label in zip(ys, labels):
515:             t = ax.text(0.25, y, label, transform=ax.transAxes,
516:                         horizontalalignment='left',
517:                         verticalalignment='center')
518: 
519:             w, h = dy / 2., dy / 2.
520:             x, y = 0.05, y - h / 2.
521: 
522:             p = Rectangle(xy=(x, y), width=w, height=h, edgecolor='black',
523:                           facecolor=axcolor, transform=ax.transAxes)
524: 
525:             l1 = Line2D([x, x + w], [y + h, y], **lineparams)
526:             l2 = Line2D([x, x + w], [y, y + h], **lineparams)
527: 
528:             l1.set_visible(actives[cnt])
529:             l2.set_visible(actives[cnt])
530:             self.labels.append(t)
531:             self.rectangles.append(p)
532:             self.lines.append((l1, l2))
533:             ax.add_patch(p)
534:             ax.add_line(l1)
535:             ax.add_line(l2)
536:             cnt += 1
537: 
538:         self.connect_event('button_press_event', self._clicked)
539: 
540:         self.cnt = 0
541:         self.observers = {}
542: 
543:     def _clicked(self, event):
544:         if self.ignore(event):
545:             return
546:         if event.button != 1:
547:             return
548:         if event.inaxes != self.ax:
549:             return
550: 
551:         for i, (p, t) in enumerate(zip(self.rectangles, self.labels)):
552:             if (t.get_window_extent().contains(event.x, event.y) or
553:                     p.get_window_extent().contains(event.x, event.y)):
554:                 self.set_active(i)
555:                 break
556:         else:
557:             return
558: 
559:     def set_active(self, index):
560:         '''
561:         Directly (de)activate a check button by index.
562: 
563:         *index* is an index into the original label list
564:             that this object was constructed with.
565:             Raises ValueError if *index* is invalid.
566: 
567:         Callbacks will be triggered if :attr:`eventson` is True.
568: 
569:         '''
570:         if 0 > index >= len(self.labels):
571:             raise ValueError("Invalid CheckButton index: %d" % index)
572: 
573:         l1, l2 = self.lines[index]
574:         l1.set_visible(not l1.get_visible())
575:         l2.set_visible(not l2.get_visible())
576: 
577:         if self.drawon:
578:             self.ax.figure.canvas.draw()
579: 
580:         if not self.eventson:
581:             return
582:         for cid, func in six.iteritems(self.observers):
583:             func(self.labels[index].get_text())
584: 
585:     def get_status(self):
586:         '''
587:         returns a tuple of the status (True/False) of all of the check buttons
588:         '''
589:         return [l1.get_visible() for (l1, l2) in self.lines]
590: 
591:     def on_clicked(self, func):
592:         '''
593:         When the button is clicked, call *func* with button label
594: 
595:         A connection id is returned which can be used to disconnect
596:         '''
597:         cid = self.cnt
598:         self.observers[cid] = func
599:         self.cnt += 1
600:         return cid
601: 
602:     def disconnect(self, cid):
603:         '''remove the observer with connection id *cid*'''
604:         try:
605:             del self.observers[cid]
606:         except KeyError:
607:             pass
608: 
609: 
610: class TextBox(AxesWidget):
611:     '''
612:     A GUI neutral text input box.
613: 
614:     For the text box to remain responsive you must keep a reference to it.
615: 
616:     The following attributes are accessible:
617: 
618:       *ax*
619:         The :class:`matplotlib.axes.Axes` the button renders into.
620: 
621:       *label*
622:         A :class:`matplotlib.text.Text` instance.
623: 
624:       *color*
625:         The color of the text box when not hovering.
626: 
627:       *hovercolor*
628:         The color of the text box when hovering.
629: 
630:     Call :meth:`on_text_change` to be updated whenever the text changes.
631: 
632:     Call :meth:`on_submit` to be updated whenever the user hits enter or
633:     leaves the text entry field.
634:     '''
635: 
636:     def __init__(self, ax, label, initial='',
637:                  color='.95', hovercolor='1', label_pad=.01):
638:         '''
639:         Parameters
640:         ----------
641:         ax : matplotlib.axes.Axes
642:             The :class:`matplotlib.axes.Axes` instance the button
643:             will be placed into.
644: 
645:         label : str
646:             Label for this text box. Accepts string.
647: 
648:         initial : str
649:             Initial value in the text box
650: 
651:         color : color
652:             The color of the box
653: 
654:         hovercolor : color
655:             The color of the box when the mouse is over it
656: 
657:         label_pad : float
658:             the distance between the label and the right side of the textbox
659:         '''
660:         AxesWidget.__init__(self, ax)
661: 
662:         self.DIST_FROM_LEFT = .05
663: 
664:         self.params_to_disable = [key for key in rcParams if u'keymap' in key]
665: 
666:         self.text = initial
667:         self.label = ax.text(-label_pad, 0.5, label,
668:                              verticalalignment='center',
669:                              horizontalalignment='right',
670:                              transform=ax.transAxes)
671:         self.text_disp = self._make_text_disp(self.text)
672: 
673:         self.cnt = 0
674:         self.change_observers = {}
675:         self.submit_observers = {}
676: 
677:         # If these lines are removed, the cursor won't appear the first
678:         # time the box is clicked:
679:         self.ax.set_xlim(0, 1)
680:         self.ax.set_ylim(0, 1)
681: 
682:         self.cursor_index = 0
683: 
684:         # Because this is initialized, _render_cursor
685:         # can assume that cursor exists.
686:         self.cursor = self.ax.vlines(0, 0, 0)
687:         self.cursor.set_visible(False)
688: 
689:         self.connect_event('button_press_event', self._click)
690:         self.connect_event('button_release_event', self._release)
691:         self.connect_event('motion_notify_event', self._motion)
692:         self.connect_event('key_press_event', self._keypress)
693:         self.connect_event('resize_event', self._resize)
694:         ax.set_navigate(False)
695:         ax.set_facecolor(color)
696:         ax.set_xticks([])
697:         ax.set_yticks([])
698:         self.color = color
699:         self.hovercolor = hovercolor
700: 
701:         self._lastcolor = color
702: 
703:         self.capturekeystrokes = False
704: 
705:     def _make_text_disp(self, string):
706:         return self.ax.text(self.DIST_FROM_LEFT, 0.5, string,
707:                             verticalalignment='center',
708:                             horizontalalignment='left',
709:                             transform=self.ax.transAxes)
710: 
711:     def _rendercursor(self):
712:         # this is a hack to figure out where the cursor should go.
713:         # we draw the text up to where the cursor should go, measure
714:         # and save its dimensions, draw the real text, then put the cursor
715:         # at the saved dimensions
716: 
717:         widthtext = self.text[:self.cursor_index]
718:         no_text = False
719:         if(widthtext == "" or widthtext == " " or widthtext == "  "):
720:             no_text = widthtext == ""
721:             widthtext = ","
722: 
723:         wt_disp = self._make_text_disp(widthtext)
724: 
725:         self.ax.figure.canvas.draw()
726:         bb = wt_disp.get_window_extent()
727:         inv = self.ax.transData.inverted()
728:         bb = inv.transform(bb)
729:         wt_disp.set_visible(False)
730:         if no_text:
731:             bb[1, 0] = bb[0, 0]
732:         # hack done
733:         self.cursor.set_visible(False)
734: 
735:         self.cursor = self.ax.vlines(bb[1, 0], bb[0, 1], bb[1, 1])
736:         self.ax.figure.canvas.draw()
737: 
738:     def _notify_submit_observers(self):
739:         for cid, func in six.iteritems(self.submit_observers):
740:                 func(self.text)
741: 
742:     def _release(self, event):
743:         if self.ignore(event):
744:             return
745:         if event.canvas.mouse_grabber != self.ax:
746:             return
747:         event.canvas.release_mouse(self.ax)
748: 
749:     def _keypress(self, event):
750:         if self.ignore(event):
751:             return
752:         if self.capturekeystrokes:
753:             key = event.key
754: 
755:             if(len(key) == 1):
756:                 self.text = (self.text[:self.cursor_index] + key +
757:                              self.text[self.cursor_index:])
758:                 self.cursor_index += 1
759:             elif key == "right":
760:                 if self.cursor_index != len(self.text):
761:                     self.cursor_index += 1
762:             elif key == "left":
763:                 if self.cursor_index != 0:
764:                     self.cursor_index -= 1
765:             elif key == "home":
766:                 self.cursor_index = 0
767:             elif key == "end":
768:                 self.cursor_index = len(self.text)
769:             elif(key == "backspace"):
770:                 if self.cursor_index != 0:
771:                     self.text = (self.text[:self.cursor_index - 1] +
772:                                  self.text[self.cursor_index:])
773:                     self.cursor_index -= 1
774:             elif(key == "delete"):
775:                 if self.cursor_index != len(self.text):
776:                     self.text = (self.text[:self.cursor_index] +
777:                                  self.text[self.cursor_index + 1:])
778: 
779:             self.text_disp.remove()
780:             self.text_disp = self._make_text_disp(self.text)
781:             self._rendercursor()
782:             self._notify_change_observers()
783:             if key == "enter":
784:                 self._notify_submit_observers()
785: 
786:     def set_val(self, val):
787:         newval = str(val)
788:         if self.text == newval:
789:             return
790:         self.text = newval
791:         self.text_disp.remove()
792:         self.text_disp = self._make_text_disp(self.text)
793:         self._rendercursor()
794:         self._notify_change_observers()
795:         self._notify_submit_observers()
796: 
797:     def _notify_change_observers(self):
798:         for cid, func in six.iteritems(self.change_observers):
799:             func(self.text)
800: 
801:     def begin_typing(self, x):
802:         self.capturekeystrokes = True
803:         # disable command keys so that the user can type without
804:         # command keys causing figure to be saved, etc
805:         self.reset_params = {}
806:         for key in self.params_to_disable:
807:             self.reset_params[key] = rcParams[key]
808:             rcParams[key] = []
809: 
810:     def stop_typing(self):
811:         notifysubmit = False
812:         # because _notify_submit_users might throw an error in the
813:         # user's code, we only want to call it once we've already done
814:         # our cleanup.
815:         if self.capturekeystrokes:
816:             # since the user is no longer typing,
817:             # reactivate the standard command keys
818:             for key in self.params_to_disable:
819:                 rcParams[key] = self.reset_params[key]
820:             notifysubmit = True
821:         self.capturekeystrokes = False
822:         self.cursor.set_visible(False)
823:         self.ax.figure.canvas.draw()
824:         if notifysubmit:
825:             self._notify_submit_observers()
826: 
827:     def position_cursor(self, x):
828:         # now, we have to figure out where the cursor goes.
829:         # approximate it based on assuming all characters the same length
830:         if len(self.text) == 0:
831:             self.cursor_index = 0
832:         else:
833:             bb = self.text_disp.get_window_extent()
834: 
835:             trans = self.ax.transData
836:             inv = self.ax.transData.inverted()
837:             bb = trans.transform(inv.transform(bb))
838: 
839:             text_start = bb[0, 0]
840:             text_end = bb[1, 0]
841: 
842:             ratio = (x - text_start) / (text_end - text_start)
843: 
844:             if ratio < 0:
845:                 ratio = 0
846:             if ratio > 1:
847:                 ratio = 1
848: 
849:             self.cursor_index = int(len(self.text) * ratio)
850: 
851:         self._rendercursor()
852: 
853:     def _click(self, event):
854:         if self.ignore(event):
855:             return
856:         if event.inaxes != self.ax:
857:             self.stop_typing()
858:             return
859:         if not self.eventson:
860:             return
861:         if event.canvas.mouse_grabber != self.ax:
862:             event.canvas.grab_mouse(self.ax)
863:         if not(self.capturekeystrokes):
864:             self.begin_typing(event.x)
865:         self.position_cursor(event.x)
866: 
867:     def _resize(self, event):
868:         self.stop_typing()
869: 
870:     def _motion(self, event):
871:         if self.ignore(event):
872:             return
873:         if event.inaxes == self.ax:
874:             c = self.hovercolor
875:         else:
876:             c = self.color
877:         if c != self._lastcolor:
878:             self.ax.set_facecolor(c)
879:             self._lastcolor = c
880:             if self.drawon:
881:                 self.ax.figure.canvas.draw()
882: 
883:     def on_text_change(self, func):
884:         '''
885:         When the text changes, call this *func* with event.
886: 
887:         A connection id is returned which can be used to disconnect.
888:         '''
889:         cid = self.cnt
890:         self.change_observers[cid] = func
891:         self.cnt += 1
892:         return cid
893: 
894:     def on_submit(self, func):
895:         '''
896:         When the user hits enter or leaves the submision box, call this
897:         *func* with event.
898: 
899:         A connection id is returned which can be used to disconnect.
900:         '''
901:         cid = self.cnt
902:         self.submit_observers[cid] = func
903:         self.cnt += 1
904:         return cid
905: 
906:     def disconnect(self, cid):
907:         '''remove the observer with connection id *cid*'''
908:         try:
909:             del self.observers[cid]
910:         except KeyError:
911:             pass
912: 
913: 
914: class RadioButtons(AxesWidget):
915:     '''
916:     A GUI neutral radio button.
917: 
918:     For the buttons to remain responsive
919:     you must keep a reference to this object.
920: 
921:     The following attributes are exposed:
922: 
923:      *ax*
924:         The :class:`matplotlib.axes.Axes` instance the buttons are in
925: 
926:      *activecolor*
927:         The color of the button when clicked
928: 
929:      *labels*
930:         A list of :class:`matplotlib.text.Text` instances
931: 
932:      *circles*
933:         A list of :class:`matplotlib.patches.Circle` instances
934: 
935:      *value_selected*
936:         A string listing the current value selected
937: 
938:     Connect to the RadioButtons with the :meth:`on_clicked` method
939:     '''
940:     def __init__(self, ax, labels, active=0, activecolor='blue'):
941:         '''
942:         Add radio buttons to :class:`matplotlib.axes.Axes` instance *ax*
943: 
944:         *labels*
945:             A len(buttons) list of labels as strings
946: 
947:         *active*
948:             The index into labels for the button that is active
949: 
950:         *activecolor*
951:             The color of the button when clicked
952:         '''
953:         AxesWidget.__init__(self, ax)
954:         self.activecolor = activecolor
955:         self.value_selected = None
956: 
957:         ax.set_xticks([])
958:         ax.set_yticks([])
959:         ax.set_navigate(False)
960:         dy = 1. / (len(labels) + 1)
961:         ys = np.linspace(1 - dy, dy, len(labels))
962:         cnt = 0
963:         axcolor = ax.get_facecolor()
964: 
965:         self.labels = []
966:         self.circles = []
967:         for y, label in zip(ys, labels):
968:             t = ax.text(0.25, y, label, transform=ax.transAxes,
969:                         horizontalalignment='left',
970:                         verticalalignment='center')
971: 
972:             if cnt == active:
973:                 self.value_selected = label
974:                 facecolor = activecolor
975:             else:
976:                 facecolor = axcolor
977: 
978:             p = Circle(xy=(0.15, y), radius=0.05, edgecolor='black',
979:                        facecolor=facecolor, transform=ax.transAxes)
980: 
981:             self.labels.append(t)
982:             self.circles.append(p)
983:             ax.add_patch(p)
984:             cnt += 1
985: 
986:         self.connect_event('button_press_event', self._clicked)
987: 
988:         self.cnt = 0
989:         self.observers = {}
990: 
991:     def _clicked(self, event):
992:         if self.ignore(event):
993:             return
994:         if event.button != 1:
995:             return
996:         if event.inaxes != self.ax:
997:             return
998:         xy = self.ax.transAxes.inverted().transform_point((event.x, event.y))
999:         pclicked = np.array([xy[0], xy[1]])
1000: 
1001:         def inside(p):
1002:             pcirc = np.array([p.center[0], p.center[1]])
1003:             return dist(pclicked, pcirc) < p.radius
1004: 
1005:         for i, (p, t) in enumerate(zip(self.circles, self.labels)):
1006:             if t.get_window_extent().contains(event.x, event.y) or inside(p):
1007:                 self.set_active(i)
1008:                 break
1009:         else:
1010:             return
1011: 
1012:     def set_active(self, index):
1013:         '''
1014:         Trigger which radio button to make active.
1015: 
1016:         *index* is an index into the original label list
1017:             that this object was constructed with.
1018:             Raise ValueError if the index is invalid.
1019: 
1020:         Callbacks will be triggered if :attr:`eventson` is True.
1021: 
1022:         '''
1023:         if 0 > index >= len(self.labels):
1024:             raise ValueError("Invalid RadioButton index: %d" % index)
1025: 
1026:         self.value_selected = self.labels[index].get_text()
1027: 
1028:         for i, p in enumerate(self.circles):
1029:             if i == index:
1030:                 color = self.activecolor
1031:             else:
1032:                 color = self.ax.get_facecolor()
1033:             p.set_facecolor(color)
1034: 
1035:         if self.drawon:
1036:             self.ax.figure.canvas.draw()
1037: 
1038:         if not self.eventson:
1039:             return
1040:         for cid, func in six.iteritems(self.observers):
1041:             func(self.labels[index].get_text())
1042: 
1043:     def on_clicked(self, func):
1044:         '''
1045:         When the button is clicked, call *func* with button label
1046: 
1047:         A connection id is returned which can be used to disconnect
1048:         '''
1049:         cid = self.cnt
1050:         self.observers[cid] = func
1051:         self.cnt += 1
1052:         return cid
1053: 
1054:     def disconnect(self, cid):
1055:         '''remove the observer with connection id *cid*'''
1056:         try:
1057:             del self.observers[cid]
1058:         except KeyError:
1059:             pass
1060: 
1061: 
1062: class SubplotTool(Widget):
1063:     '''
1064:     A tool to adjust the subplot params of a :class:`matplotlib.figure.Figure`.
1065:     '''
1066:     def __init__(self, targetfig, toolfig):
1067:         '''
1068:         *targetfig*
1069:             The figure instance to adjust.
1070: 
1071:         *toolfig*
1072:             The figure instance to embed the subplot tool into. If
1073:             *None*, a default figure will be created. If you are using
1074:             this from the GUI
1075:         '''
1076:         # FIXME: The docstring seems to just abruptly end without...
1077: 
1078:         self.targetfig = targetfig
1079:         toolfig.subplots_adjust(left=0.2, right=0.9)
1080: 
1081:         class toolbarfmt:
1082:             def __init__(self, slider):
1083:                 self.slider = slider
1084: 
1085:             def __call__(self, x, y):
1086:                 fmt = '%s=%s' % (self.slider.label.get_text(),
1087:                                  self.slider.valfmt)
1088:                 return fmt % x
1089: 
1090:         self.axleft = toolfig.add_subplot(711)
1091:         self.axleft.set_title('Click on slider to adjust subplot param')
1092:         self.axleft.set_navigate(False)
1093: 
1094:         self.sliderleft = Slider(self.axleft, 'left',
1095:                                  0, 1, targetfig.subplotpars.left,
1096:                                  closedmax=False)
1097:         self.sliderleft.on_changed(self.funcleft)
1098: 
1099:         self.axbottom = toolfig.add_subplot(712)
1100:         self.axbottom.set_navigate(False)
1101:         self.sliderbottom = Slider(self.axbottom,
1102:                                    'bottom', 0, 1,
1103:                                    targetfig.subplotpars.bottom,
1104:                                    closedmax=False)
1105:         self.sliderbottom.on_changed(self.funcbottom)
1106: 
1107:         self.axright = toolfig.add_subplot(713)
1108:         self.axright.set_navigate(False)
1109:         self.sliderright = Slider(self.axright, 'right', 0, 1,
1110:                                   targetfig.subplotpars.right,
1111:                                   closedmin=False)
1112:         self.sliderright.on_changed(self.funcright)
1113: 
1114:         self.axtop = toolfig.add_subplot(714)
1115:         self.axtop.set_navigate(False)
1116:         self.slidertop = Slider(self.axtop, 'top', 0, 1,
1117:                                 targetfig.subplotpars.top,
1118:                                 closedmin=False)
1119:         self.slidertop.on_changed(self.functop)
1120: 
1121:         self.axwspace = toolfig.add_subplot(715)
1122:         self.axwspace.set_navigate(False)
1123:         self.sliderwspace = Slider(self.axwspace, 'wspace',
1124:                                    0, 1, targetfig.subplotpars.wspace,
1125:                                    closedmax=False)
1126:         self.sliderwspace.on_changed(self.funcwspace)
1127: 
1128:         self.axhspace = toolfig.add_subplot(716)
1129:         self.axhspace.set_navigate(False)
1130:         self.sliderhspace = Slider(self.axhspace, 'hspace',
1131:                                    0, 1, targetfig.subplotpars.hspace,
1132:                                    closedmax=False)
1133:         self.sliderhspace.on_changed(self.funchspace)
1134: 
1135:         # constraints
1136:         self.sliderleft.slidermax = self.sliderright
1137:         self.sliderright.slidermin = self.sliderleft
1138:         self.sliderbottom.slidermax = self.slidertop
1139:         self.slidertop.slidermin = self.sliderbottom
1140: 
1141:         bax = toolfig.add_axes([0.8, 0.05, 0.15, 0.075])
1142:         self.buttonreset = Button(bax, 'Reset')
1143: 
1144:         sliders = (self.sliderleft, self.sliderbottom, self.sliderright,
1145:                    self.slidertop, self.sliderwspace, self.sliderhspace,)
1146: 
1147:         def func(event):
1148:             thisdrawon = self.drawon
1149: 
1150:             self.drawon = False
1151: 
1152:             # store the drawon state of each slider
1153:             bs = []
1154:             for slider in sliders:
1155:                 bs.append(slider.drawon)
1156:                 slider.drawon = False
1157: 
1158:             # reset the slider to the initial position
1159:             for slider in sliders:
1160:                 slider.reset()
1161: 
1162:             # reset drawon
1163:             for slider, b in zip(sliders, bs):
1164:                 slider.drawon = b
1165: 
1166:             # draw the canvas
1167:             self.drawon = thisdrawon
1168:             if self.drawon:
1169:                 toolfig.canvas.draw()
1170:                 self.targetfig.canvas.draw()
1171: 
1172:         # during reset there can be a temporary invalid state
1173:         # depending on the order of the reset so we turn off
1174:         # validation for the resetting
1175:         validate = toolfig.subplotpars.validate
1176:         toolfig.subplotpars.validate = False
1177:         self.buttonreset.on_clicked(func)
1178:         toolfig.subplotpars.validate = validate
1179: 
1180:     def funcleft(self, val):
1181:         self.targetfig.subplots_adjust(left=val)
1182:         if self.drawon:
1183:             self.targetfig.canvas.draw()
1184: 
1185:     def funcright(self, val):
1186:         self.targetfig.subplots_adjust(right=val)
1187:         if self.drawon:
1188:             self.targetfig.canvas.draw()
1189: 
1190:     def funcbottom(self, val):
1191:         self.targetfig.subplots_adjust(bottom=val)
1192:         if self.drawon:
1193:             self.targetfig.canvas.draw()
1194: 
1195:     def functop(self, val):
1196:         self.targetfig.subplots_adjust(top=val)
1197:         if self.drawon:
1198:             self.targetfig.canvas.draw()
1199: 
1200:     def funcwspace(self, val):
1201:         self.targetfig.subplots_adjust(wspace=val)
1202:         if self.drawon:
1203:             self.targetfig.canvas.draw()
1204: 
1205:     def funchspace(self, val):
1206:         self.targetfig.subplots_adjust(hspace=val)
1207:         if self.drawon:
1208:             self.targetfig.canvas.draw()
1209: 
1210: 
1211: class Cursor(AxesWidget):
1212:     '''
1213:     A horizontal and vertical line that spans the axes and moves with
1214:     the pointer.  You can turn off the hline or vline respectively with
1215:     the following attributes:
1216: 
1217:       *horizOn*
1218:         Controls the visibility of the horizontal line
1219: 
1220:       *vertOn*
1221:         Controls the visibility of the horizontal line
1222: 
1223:     and the visibility of the cursor itself with the *visible* attribute.
1224: 
1225:     For the cursor to remain responsive you must keep a reference to
1226:     it.
1227:     '''
1228:     def __init__(self, ax, horizOn=True, vertOn=True, useblit=False,
1229:                  **lineprops):
1230:         '''
1231:         Add a cursor to *ax*.  If ``useblit=True``, use the backend-
1232:         dependent blitting features for faster updates (GTKAgg
1233:         only for now).  *lineprops* is a dictionary of line properties.
1234:         '''
1235:         # TODO: Is the GTKAgg limitation still true?
1236:         AxesWidget.__init__(self, ax)
1237: 
1238:         self.connect_event('motion_notify_event', self.onmove)
1239:         self.connect_event('draw_event', self.clear)
1240: 
1241:         self.visible = True
1242:         self.horizOn = horizOn
1243:         self.vertOn = vertOn
1244:         self.useblit = useblit and self.canvas.supports_blit
1245: 
1246:         if self.useblit:
1247:             lineprops['animated'] = True
1248:         self.lineh = ax.axhline(ax.get_ybound()[0], visible=False, **lineprops)
1249:         self.linev = ax.axvline(ax.get_xbound()[0], visible=False, **lineprops)
1250: 
1251:         self.background = None
1252:         self.needclear = False
1253: 
1254:     def clear(self, event):
1255:         '''clear the cursor'''
1256:         if self.ignore(event):
1257:             return
1258:         if self.useblit:
1259:             self.background = self.canvas.copy_from_bbox(self.ax.bbox)
1260:         self.linev.set_visible(False)
1261:         self.lineh.set_visible(False)
1262: 
1263:     def onmove(self, event):
1264:         '''on mouse motion draw the cursor if visible'''
1265:         if self.ignore(event):
1266:             return
1267:         if not self.canvas.widgetlock.available(self):
1268:             return
1269:         if event.inaxes != self.ax:
1270:             self.linev.set_visible(False)
1271:             self.lineh.set_visible(False)
1272: 
1273:             if self.needclear:
1274:                 self.canvas.draw()
1275:                 self.needclear = False
1276:             return
1277:         self.needclear = True
1278:         if not self.visible:
1279:             return
1280:         self.linev.set_xdata((event.xdata, event.xdata))
1281: 
1282:         self.lineh.set_ydata((event.ydata, event.ydata))
1283:         self.linev.set_visible(self.visible and self.vertOn)
1284:         self.lineh.set_visible(self.visible and self.horizOn)
1285: 
1286:         self._update()
1287: 
1288:     def _update(self):
1289: 
1290:         if self.useblit:
1291:             if self.background is not None:
1292:                 self.canvas.restore_region(self.background)
1293:             self.ax.draw_artist(self.linev)
1294:             self.ax.draw_artist(self.lineh)
1295:             self.canvas.blit(self.ax.bbox)
1296:         else:
1297: 
1298:             self.canvas.draw_idle()
1299: 
1300:         return False
1301: 
1302: 
1303: class MultiCursor(Widget):
1304:     '''
1305:     Provide a vertical (default) and/or horizontal line cursor shared between
1306:     multiple axes.
1307: 
1308:     For the cursor to remain responsive you must keep a reference to
1309:     it.
1310: 
1311:     Example usage::
1312: 
1313:         from matplotlib.widgets import MultiCursor
1314:         from pylab import figure, show, np
1315: 
1316:         t = np.arange(0.0, 2.0, 0.01)
1317:         s1 = np.sin(2*np.pi*t)
1318:         s2 = np.sin(4*np.pi*t)
1319:         fig = figure()
1320:         ax1 = fig.add_subplot(211)
1321:         ax1.plot(t, s1)
1322: 
1323: 
1324:         ax2 = fig.add_subplot(212, sharex=ax1)
1325:         ax2.plot(t, s2)
1326: 
1327:         multi = MultiCursor(fig.canvas, (ax1, ax2), color='r', lw=1,
1328:                             horizOn=False, vertOn=True)
1329:         show()
1330: 
1331:     '''
1332:     def __init__(self, canvas, axes, useblit=True, horizOn=False, vertOn=True,
1333:                  **lineprops):
1334: 
1335:         self.canvas = canvas
1336:         self.axes = axes
1337:         self.horizOn = horizOn
1338:         self.vertOn = vertOn
1339: 
1340:         xmin, xmax = axes[-1].get_xlim()
1341:         ymin, ymax = axes[-1].get_ylim()
1342:         xmid = 0.5 * (xmin + xmax)
1343:         ymid = 0.5 * (ymin + ymax)
1344: 
1345:         self.visible = True
1346:         self.useblit = useblit and self.canvas.supports_blit
1347:         self.background = None
1348:         self.needclear = False
1349: 
1350:         if self.useblit:
1351:             lineprops['animated'] = True
1352: 
1353:         if vertOn:
1354:             self.vlines = [ax.axvline(xmid, visible=False, **lineprops)
1355:                            for ax in axes]
1356:         else:
1357:             self.vlines = []
1358: 
1359:         if horizOn:
1360:             self.hlines = [ax.axhline(ymid, visible=False, **lineprops)
1361:                            for ax in axes]
1362:         else:
1363:             self.hlines = []
1364: 
1365:         self.connect()
1366: 
1367:     def connect(self):
1368:         '''connect events'''
1369:         self._cidmotion = self.canvas.mpl_connect('motion_notify_event',
1370:                                                   self.onmove)
1371:         self._ciddraw = self.canvas.mpl_connect('draw_event', self.clear)
1372: 
1373:     def disconnect(self):
1374:         '''disconnect events'''
1375:         self.canvas.mpl_disconnect(self._cidmotion)
1376:         self.canvas.mpl_disconnect(self._ciddraw)
1377: 
1378:     def clear(self, event):
1379:         '''clear the cursor'''
1380:         if self.ignore(event):
1381:             return
1382:         if self.useblit:
1383:             self.background = (
1384:                 self.canvas.copy_from_bbox(self.canvas.figure.bbox))
1385:         for line in self.vlines + self.hlines:
1386:             line.set_visible(False)
1387: 
1388:     def onmove(self, event):
1389:         if self.ignore(event):
1390:             return
1391:         if event.inaxes is None:
1392:             return
1393:         if not self.canvas.widgetlock.available(self):
1394:             return
1395:         self.needclear = True
1396:         if not self.visible:
1397:             return
1398:         if self.vertOn:
1399:             for line in self.vlines:
1400:                 line.set_xdata((event.xdata, event.xdata))
1401:                 line.set_visible(self.visible)
1402:         if self.horizOn:
1403:             for line in self.hlines:
1404:                 line.set_ydata((event.ydata, event.ydata))
1405:                 line.set_visible(self.visible)
1406:         self._update()
1407: 
1408:     def _update(self):
1409:         if self.useblit:
1410:             if self.background is not None:
1411:                 self.canvas.restore_region(self.background)
1412:             if self.vertOn:
1413:                 for ax, line in zip(self.axes, self.vlines):
1414:                     ax.draw_artist(line)
1415:             if self.horizOn:
1416:                 for ax, line in zip(self.axes, self.hlines):
1417:                     ax.draw_artist(line)
1418:             self.canvas.blit(self.canvas.figure.bbox)
1419:         else:
1420:             self.canvas.draw_idle()
1421: 
1422: 
1423: class _SelectorWidget(AxesWidget):
1424: 
1425:     def __init__(self, ax, onselect, useblit=False, button=None,
1426:                  state_modifier_keys=None):
1427:         AxesWidget.__init__(self, ax)
1428: 
1429:         self.visible = True
1430:         self.onselect = onselect
1431:         self.useblit = useblit and self.canvas.supports_blit
1432:         self.connect_default_events()
1433: 
1434:         self.state_modifier_keys = dict(move=' ', clear='escape',
1435:                                         square='shift', center='control')
1436:         self.state_modifier_keys.update(state_modifier_keys or {})
1437: 
1438:         self.background = None
1439:         self.artists = []
1440: 
1441:         if isinstance(button, int):
1442:             self.validButtons = [button]
1443:         else:
1444:             self.validButtons = button
1445: 
1446:         # will save the data (position at mouseclick)
1447:         self.eventpress = None
1448:         # will save the data (pos. at mouserelease)
1449:         self.eventrelease = None
1450:         self._prev_event = None
1451:         self.state = set()
1452: 
1453:     def set_active(self, active):
1454:         AxesWidget.set_active(self, active)
1455:         if active:
1456:             self.update_background(None)
1457: 
1458:     def update_background(self, event):
1459:         '''force an update of the background'''
1460:         # If you add a call to `ignore` here, you'll want to check edge case:
1461:         # `release` can call a draw event even when `ignore` is True.
1462:         if self.useblit:
1463:             self.background = self.canvas.copy_from_bbox(self.ax.bbox)
1464: 
1465:     def connect_default_events(self):
1466:         '''Connect the major canvas events to methods.'''
1467:         self.connect_event('motion_notify_event', self.onmove)
1468:         self.connect_event('button_press_event', self.press)
1469:         self.connect_event('button_release_event', self.release)
1470:         self.connect_event('draw_event', self.update_background)
1471:         self.connect_event('key_press_event', self.on_key_press)
1472:         self.connect_event('key_release_event', self.on_key_release)
1473:         self.connect_event('scroll_event', self.on_scroll)
1474: 
1475:     def ignore(self, event):
1476:         '''return *True* if *event* should be ignored'''
1477:         if not self.active or not self.ax.get_visible():
1478:             return True
1479: 
1480:         # If canvas was locked
1481:         if not self.canvas.widgetlock.available(self):
1482:             return True
1483: 
1484:         if not hasattr(event, 'button'):
1485:             event.button = None
1486: 
1487:         # Only do rectangle selection if event was triggered
1488:         # with a desired button
1489:         if self.validButtons is not None:
1490:             if event.button not in self.validButtons:
1491:                 return True
1492: 
1493:         # If no button was pressed yet ignore the event if it was out
1494:         # of the axes
1495:         if self.eventpress is None:
1496:             return event.inaxes != self.ax
1497: 
1498:         # If a button was pressed, check if the release-button is the
1499:         # same.
1500:         if event.button == self.eventpress.button:
1501:             return False
1502: 
1503:         # If a button was pressed, check if the release-button is the
1504:         # same.
1505:         return (event.inaxes != self.ax or
1506:                 event.button != self.eventpress.button)
1507: 
1508:     def update(self):
1509:         '''draw using newfangled blit or oldfangled draw depending on
1510:         useblit
1511: 
1512:         '''
1513:         if not self.ax.get_visible():
1514:             return False
1515: 
1516:         if self.useblit:
1517:             if self.background is not None:
1518:                 self.canvas.restore_region(self.background)
1519:             for artist in self.artists:
1520:                 self.ax.draw_artist(artist)
1521: 
1522:             self.canvas.blit(self.ax.bbox)
1523: 
1524:         else:
1525:             self.canvas.draw_idle()
1526:         return False
1527: 
1528:     def _get_data(self, event):
1529:         '''Get the xdata and ydata for event, with limits'''
1530:         if event.xdata is None:
1531:             return None, None
1532:         x0, x1 = self.ax.get_xbound()
1533:         y0, y1 = self.ax.get_ybound()
1534:         xdata = max(x0, event.xdata)
1535:         xdata = min(x1, xdata)
1536:         ydata = max(y0, event.ydata)
1537:         ydata = min(y1, ydata)
1538:         return xdata, ydata
1539: 
1540:     def _clean_event(self, event):
1541:         '''Clean up an event
1542: 
1543:         Use prev event if there is no xdata
1544:         Limit the xdata and ydata to the axes limits
1545:         Set the prev event
1546:         '''
1547:         if event.xdata is None:
1548:             event = self._prev_event
1549:         else:
1550:             event = copy.copy(event)
1551:         event.xdata, event.ydata = self._get_data(event)
1552: 
1553:         self._prev_event = event
1554:         return event
1555: 
1556:     def press(self, event):
1557:         '''Button press handler and validator'''
1558:         if not self.ignore(event):
1559:             event = self._clean_event(event)
1560:             self.eventpress = event
1561:             self._prev_event = event
1562:             key = event.key or ''
1563:             key = key.replace('ctrl', 'control')
1564:             # move state is locked in on a button press
1565:             if key == self.state_modifier_keys['move']:
1566:                 self.state.add('move')
1567:             self._press(event)
1568:             return True
1569:         return False
1570: 
1571:     def _press(self, event):
1572:         '''Button press handler'''
1573:         pass
1574: 
1575:     def release(self, event):
1576:         '''Button release event handler and validator'''
1577:         if not self.ignore(event) and self.eventpress:
1578:             event = self._clean_event(event)
1579:             self.eventrelease = event
1580:             self._release(event)
1581:             self.eventpress = None
1582:             self.eventrelease = None
1583:             self.state.discard('move')
1584:             return True
1585:         return False
1586: 
1587:     def _release(self, event):
1588:         '''Button release event handler'''
1589:         pass
1590: 
1591:     def onmove(self, event):
1592:         '''Cursor move event handler and validator'''
1593:         if not self.ignore(event) and self.eventpress:
1594:             event = self._clean_event(event)
1595:             self._onmove(event)
1596:             return True
1597:         return False
1598: 
1599:     def _onmove(self, event):
1600:         '''Cursor move event handler'''
1601:         pass
1602: 
1603:     def on_scroll(self, event):
1604:         '''Mouse scroll event handler and validator'''
1605:         if not self.ignore(event):
1606:             self._on_scroll(event)
1607: 
1608:     def _on_scroll(self, event):
1609:         '''Mouse scroll event handler'''
1610:         pass
1611: 
1612:     def on_key_press(self, event):
1613:         '''Key press event handler and validator for all selection widgets'''
1614:         if self.active:
1615:             key = event.key or ''
1616:             key = key.replace('ctrl', 'control')
1617:             if key == self.state_modifier_keys['clear']:
1618:                 for artist in self.artists:
1619:                     artist.set_visible(False)
1620:                 self.update()
1621:                 return
1622:             for (state, modifier) in self.state_modifier_keys.items():
1623:                 if modifier in key:
1624:                     self.state.add(state)
1625:             self._on_key_press(event)
1626: 
1627:     def _on_key_press(self, event):
1628:         '''Key press event handler - use for widget-specific key press actions.
1629:         '''
1630:         pass
1631: 
1632:     def on_key_release(self, event):
1633:         '''Key release event handler and validator'''
1634:         if self.active:
1635:             key = event.key or ''
1636:             for (state, modifier) in self.state_modifier_keys.items():
1637:                 if modifier in key:
1638:                     self.state.discard(state)
1639:             self._on_key_release(event)
1640: 
1641:     def _on_key_release(self, event):
1642:         '''Key release event handler'''
1643:         pass
1644: 
1645:     def set_visible(self, visible):
1646:         ''' Set the visibility of our artists '''
1647:         self.visible = visible
1648:         for artist in self.artists:
1649:             artist.set_visible(visible)
1650: 
1651: 
1652: class SpanSelector(_SelectorWidget):
1653:     '''
1654:     Visually select a min/max range on a single axis and call a function with
1655:     those values.
1656: 
1657:     To guarantee that the selector remains responsive, keep a reference to
1658:     it.
1659: 
1660:     In order to turn off the SpanSelector, set `span_selector.active=False`. To
1661:     turn it back on, set `span_selector.active=True`.
1662: 
1663:     Parameters
1664:     ----------
1665:     ax :  :class:`matplotlib.axes.Axes` object
1666: 
1667:     onselect : func(min, max), min/max are floats
1668: 
1669:     direction : "horizontal" or "vertical"
1670:       The axis along which to draw the span selector
1671: 
1672:     minspan : float, default is None
1673:      If selection is less than *minspan*, do not call *onselect*
1674: 
1675:     useblit : bool, default is False
1676:       If True, use the backend-dependent blitting features for faster
1677:       canvas updates. Only available for GTKAgg right now.
1678: 
1679:     rectprops : dict, default is None
1680:       Dictionary of :class:`matplotlib.patches.Patch` properties
1681: 
1682:     onmove_callback : func(min, max), min/max are floats, default is None
1683:       Called on mouse move while the span is being selected
1684: 
1685:     span_stays : bool, default is False
1686:       If True, the span stays visible after the mouse is released
1687: 
1688:     button : int or list of ints
1689:       Determines which mouse buttons activate the span selector
1690:         1 = left mouse button\n
1691:         2 = center mouse button (scroll wheel)\n
1692:         3 = right mouse button\n
1693: 
1694:     Examples
1695:     --------
1696:     >>> import matplotlib.pyplot as plt
1697:     >>> import matplotlib.widgets as mwidgets
1698:     >>> fig, ax = plt.subplots()
1699:     >>> ax.plot([1, 2, 3], [10, 50, 100])
1700:     >>> def onselect(vmin, vmax):
1701:             print(vmin, vmax)
1702:     >>> rectprops = dict(facecolor='blue', alpha=0.5)
1703:     >>> span = mwidgets.SpanSelector(ax, onselect, 'horizontal',
1704:                                      rectprops=rectprops)
1705:     >>> fig.show()
1706: 
1707:     See also: :ref:`sphx_glr_gallery_widgets_span_selector.py`
1708: 
1709:     '''
1710: 
1711:     def __init__(self, ax, onselect, direction, minspan=None, useblit=False,
1712:                  rectprops=None, onmove_callback=None, span_stays=False,
1713:                  button=None):
1714: 
1715:         _SelectorWidget.__init__(self, ax, onselect, useblit=useblit,
1716:                                  button=button)
1717: 
1718:         if rectprops is None:
1719:             rectprops = dict(facecolor='red', alpha=0.5)
1720: 
1721:         rectprops['animated'] = self.useblit
1722: 
1723:         if direction not in ['horizontal', 'vertical']:
1724:             msg = "direction must be in [ 'horizontal' | 'vertical' ]"
1725:             raise ValueError(msg)
1726:         self.direction = direction
1727: 
1728:         self.rect = None
1729:         self.pressv = None
1730: 
1731:         self.rectprops = rectprops
1732:         self.onmove_callback = onmove_callback
1733:         self.minspan = minspan
1734:         self.span_stays = span_stays
1735: 
1736:         # Needed when dragging out of axes
1737:         self.prev = (0, 0)
1738: 
1739:         # Reset canvas so that `new_axes` connects events.
1740:         self.canvas = None
1741:         self.new_axes(ax)
1742: 
1743:     def new_axes(self, ax):
1744:         '''Set SpanSelector to operate on a new Axes'''
1745:         self.ax = ax
1746:         if self.canvas is not ax.figure.canvas:
1747:             if self.canvas is not None:
1748:                 self.disconnect_events()
1749: 
1750:             self.canvas = ax.figure.canvas
1751:             self.connect_default_events()
1752: 
1753:         if self.direction == 'horizontal':
1754:             trans = blended_transform_factory(self.ax.transData,
1755:                                               self.ax.transAxes)
1756:             w, h = 0, 1
1757:         else:
1758:             trans = blended_transform_factory(self.ax.transAxes,
1759:                                               self.ax.transData)
1760:             w, h = 1, 0
1761:         self.rect = Rectangle((0, 0), w, h,
1762:                               transform=trans,
1763:                               visible=False,
1764:                               **self.rectprops)
1765:         if self.span_stays:
1766:             self.stay_rect = Rectangle((0, 0), w, h,
1767:                                        transform=trans,
1768:                                        visible=False,
1769:                                        **self.rectprops)
1770:             self.stay_rect.set_animated(False)
1771:             self.ax.add_patch(self.stay_rect)
1772: 
1773:         self.ax.add_patch(self.rect)
1774:         self.artists = [self.rect]
1775: 
1776:     def ignore(self, event):
1777:         '''return *True* if *event* should be ignored'''
1778:         return _SelectorWidget.ignore(self, event) or not self.visible
1779: 
1780:     def _press(self, event):
1781:         '''on button press event'''
1782:         self.rect.set_visible(self.visible)
1783:         if self.span_stays:
1784:             self.stay_rect.set_visible(False)
1785:             # really force a draw so that the stay rect is not in
1786:             # the blit background
1787:             if self.useblit:
1788:                 self.canvas.draw()
1789:         xdata, ydata = self._get_data(event)
1790:         if self.direction == 'horizontal':
1791:             self.pressv = xdata
1792:         else:
1793:             self.pressv = ydata
1794:         return False
1795: 
1796:     def _release(self, event):
1797:         '''on button release event'''
1798:         if self.pressv is None:
1799:             return
1800:         self.buttonDown = False
1801: 
1802:         self.rect.set_visible(False)
1803: 
1804:         if self.span_stays:
1805:             self.stay_rect.set_x(self.rect.get_x())
1806:             self.stay_rect.set_y(self.rect.get_y())
1807:             self.stay_rect.set_width(self.rect.get_width())
1808:             self.stay_rect.set_height(self.rect.get_height())
1809:             self.stay_rect.set_visible(True)
1810: 
1811:         self.canvas.draw_idle()
1812:         vmin = self.pressv
1813:         xdata, ydata = self._get_data(event)
1814:         if self.direction == 'horizontal':
1815:             vmax = xdata or self.prev[0]
1816:         else:
1817:             vmax = ydata or self.prev[1]
1818: 
1819:         if vmin > vmax:
1820:             vmin, vmax = vmax, vmin
1821:         span = vmax - vmin
1822:         if self.minspan is not None and span < self.minspan:
1823:             return
1824:         self.onselect(vmin, vmax)
1825:         self.pressv = None
1826:         return False
1827: 
1828:     def _onmove(self, event):
1829:         '''on motion notify event'''
1830:         if self.pressv is None:
1831:             return
1832:         x, y = self._get_data(event)
1833:         if x is None:
1834:             return
1835: 
1836:         self.prev = x, y
1837:         if self.direction == 'horizontal':
1838:             v = x
1839:         else:
1840:             v = y
1841: 
1842:         minv, maxv = v, self.pressv
1843:         if minv > maxv:
1844:             minv, maxv = maxv, minv
1845:         if self.direction == 'horizontal':
1846:             self.rect.set_x(minv)
1847:             self.rect.set_width(maxv - minv)
1848:         else:
1849:             self.rect.set_y(minv)
1850:             self.rect.set_height(maxv - minv)
1851: 
1852:         if self.onmove_callback is not None:
1853:             vmin = self.pressv
1854:             xdata, ydata = self._get_data(event)
1855:             if self.direction == 'horizontal':
1856:                 vmax = xdata or self.prev[0]
1857:             else:
1858:                 vmax = ydata or self.prev[1]
1859: 
1860:             if vmin > vmax:
1861:                 vmin, vmax = vmax, vmin
1862:             self.onmove_callback(vmin, vmax)
1863: 
1864:         self.update()
1865:         return False
1866: 
1867: 
1868: class ToolHandles(object):
1869:     '''Control handles for canvas tools.
1870: 
1871:     Parameters
1872:     ----------
1873:     ax : :class:`matplotlib.axes.Axes`
1874:         Matplotlib axes where tool handles are displayed.
1875:     x, y : 1D arrays
1876:         Coordinates of control handles.
1877:     marker : str
1878:         Shape of marker used to display handle. See `matplotlib.pyplot.plot`.
1879:     marker_props : dict
1880:         Additional marker properties. See :class:`matplotlib.lines.Line2D`.
1881:     '''
1882: 
1883:     def __init__(self, ax, x, y, marker='o', marker_props=None, useblit=True):
1884:         self.ax = ax
1885: 
1886:         props = dict(marker=marker, markersize=7, mfc='w', ls='none',
1887:                      alpha=0.5, visible=False, label='_nolegend_')
1888:         props.update(marker_props if marker_props is not None else {})
1889:         self._markers = Line2D(x, y, animated=useblit, **props)
1890:         self.ax.add_line(self._markers)
1891:         self.artist = self._markers
1892: 
1893:     @property
1894:     def x(self):
1895:         return self._markers.get_xdata()
1896: 
1897:     @property
1898:     def y(self):
1899:         return self._markers.get_ydata()
1900: 
1901:     def set_data(self, pts, y=None):
1902:         '''Set x and y positions of handles'''
1903:         if y is not None:
1904:             x = pts
1905:             pts = np.array([x, y])
1906:         self._markers.set_data(pts)
1907: 
1908:     def set_visible(self, val):
1909:         self._markers.set_visible(val)
1910: 
1911:     def set_animated(self, val):
1912:         self._markers.set_animated(val)
1913: 
1914:     def closest(self, x, y):
1915:         '''Return index and pixel distance to closest index.'''
1916:         pts = np.transpose((self.x, self.y))
1917:         # Transform data coordinates to pixel coordinates.
1918:         pts = self.ax.transData.transform(pts)
1919:         diff = pts - ((x, y))
1920:         if diff.ndim == 2:
1921:             dist = np.sqrt(np.sum(diff ** 2, axis=1))
1922:             return np.argmin(dist), np.min(dist)
1923:         else:
1924:             return 0, np.sqrt(np.sum(diff ** 2))
1925: 
1926: 
1927: class RectangleSelector(_SelectorWidget):
1928:     '''
1929:     Select a rectangular region of an axes.
1930: 
1931:     For the cursor to remain responsive you must keep a reference to
1932:     it.
1933: 
1934:     Example usage::
1935: 
1936:         from matplotlib.widgets import  RectangleSelector
1937:         from pylab import *
1938: 
1939:         def onselect(eclick, erelease):
1940:           'eclick and erelease are matplotlib events at press and release'
1941:           print(' startposition : (%f, %f)' % (eclick.xdata, eclick.ydata))
1942:           print(' endposition   : (%f, %f)' % (erelease.xdata, erelease.ydata))
1943:           print(' used button   : ', eclick.button)
1944: 
1945:         def toggle_selector(event):
1946:             print(' Key pressed.')
1947:             if event.key in ['Q', 'q'] and toggle_selector.RS.active:
1948:                 print(' RectangleSelector deactivated.')
1949:                 toggle_selector.RS.set_active(False)
1950:             if event.key in ['A', 'a'] and not toggle_selector.RS.active:
1951:                 print(' RectangleSelector activated.')
1952:                 toggle_selector.RS.set_active(True)
1953: 
1954:         x = arange(100)/(99.0)
1955:         y = sin(x)
1956:         fig = figure
1957:         ax = subplot(111)
1958:         ax.plot(x,y)
1959: 
1960:         toggle_selector.RS = RectangleSelector(ax, onselect, drawtype='line')
1961:         connect('key_press_event', toggle_selector)
1962:         show()
1963:     '''
1964: 
1965:     _shape_klass = Rectangle
1966: 
1967:     def __init__(self, ax, onselect, drawtype='box',
1968:                  minspanx=None, minspany=None, useblit=False,
1969:                  lineprops=None, rectprops=None, spancoords='data',
1970:                  button=None, maxdist=10, marker_props=None,
1971:                  interactive=False, state_modifier_keys=None):
1972: 
1973:         '''
1974:         Create a selector in *ax*.  When a selection is made, clear
1975:         the span and call onselect with::
1976: 
1977:           onselect(pos_1, pos_2)
1978: 
1979:         and clear the drawn box/line. The ``pos_1`` and ``pos_2`` are
1980:         arrays of length 2 containing the x- and y-coordinate.
1981: 
1982:         If *minspanx* is not *None* then events smaller than *minspanx*
1983:         in x direction are ignored (it's the same for y).
1984: 
1985:         The rectangle is drawn with *rectprops*; default::
1986: 
1987:           rectprops = dict(facecolor='red', edgecolor = 'black',
1988:                            alpha=0.2, fill=True)
1989: 
1990:         The line is drawn with *lineprops*; default::
1991: 
1992:           lineprops = dict(color='black', linestyle='-',
1993:                            linewidth = 2, alpha=0.5)
1994: 
1995:         Use *drawtype* if you want the mouse to draw a line,
1996:         a box or nothing between click and actual position by setting
1997: 
1998:         ``drawtype = 'line'``, ``drawtype='box'`` or ``drawtype = 'none'``.
1999: 
2000:         *spancoords* is one of 'data' or 'pixels'.  If 'data', *minspanx*
2001:         and *minspanx* will be interpreted in the same coordinates as
2002:         the x and y axis. If 'pixels', they are in pixels.
2003: 
2004:         *button* is a list of integers indicating which mouse buttons should
2005:         be used for rectangle selection.  You can also specify a single
2006:         integer if only a single button is desired.  Default is *None*,
2007:         which does not limit which button can be used.
2008: 
2009:         Note, typically:
2010:          1 = left mouse button
2011:          2 = center mouse button (scroll wheel)
2012:          3 = right mouse button
2013: 
2014:         *interactive* will draw a set of handles and allow you interact
2015:         with the widget after it is drawn.
2016: 
2017:         *state_modifier_keys* are keyboard modifiers that affect the behavior
2018:         of the widget.
2019: 
2020:         The defaults are:
2021:         dict(move=' ', clear='escape', square='shift', center='ctrl')
2022: 
2023:         Keyboard modifiers, which:
2024:         'move': Move the existing shape.
2025:         'clear': Clear the current shape.
2026:         'square': Makes the shape square.
2027:         'center': Make the initial point the center of the shape.
2028:         'square' and 'center' can be combined.
2029:         '''
2030:         _SelectorWidget.__init__(self, ax, onselect, useblit=useblit,
2031:                                  button=button,
2032:                                  state_modifier_keys=state_modifier_keys)
2033: 
2034:         self.to_draw = None
2035:         self.visible = True
2036:         self.interactive = interactive
2037: 
2038:         if drawtype == 'none':
2039:             drawtype = 'line'                        # draw a line but make it
2040:             self.visible = False                     # invisible
2041: 
2042:         if drawtype == 'box':
2043:             if rectprops is None:
2044:                 rectprops = dict(facecolor='red', edgecolor='black',
2045:                                  alpha=0.2, fill=True)
2046:             rectprops['animated'] = self.useblit
2047:             self.rectprops = rectprops
2048:             self.to_draw = self._shape_klass((0, 0), 0, 1, visible=False,
2049:                                              **self.rectprops)
2050:             self.ax.add_patch(self.to_draw)
2051:         if drawtype == 'line':
2052:             if lineprops is None:
2053:                 lineprops = dict(color='black', linestyle='-',
2054:                                  linewidth=2, alpha=0.5)
2055:             lineprops['animated'] = self.useblit
2056:             self.lineprops = lineprops
2057:             self.to_draw = Line2D([0, 0], [0, 0], visible=False,
2058:                                   **self.lineprops)
2059:             self.ax.add_line(self.to_draw)
2060: 
2061:         self.minspanx = minspanx
2062:         self.minspany = minspany
2063: 
2064:         if spancoords not in ('data', 'pixels'):
2065:             msg = "'spancoords' must be one of [ 'data' | 'pixels' ]"
2066:             raise ValueError(msg)
2067: 
2068:         self.spancoords = spancoords
2069:         self.drawtype = drawtype
2070: 
2071:         self.maxdist = maxdist
2072: 
2073:         if rectprops is None:
2074:             props = dict(mec='r')
2075:         else:
2076:             props = dict(mec=rectprops.get('edgecolor', 'r'))
2077:         self._corner_order = ['NW', 'NE', 'SE', 'SW']
2078:         xc, yc = self.corners
2079:         self._corner_handles = ToolHandles(self.ax, xc, yc, marker_props=props,
2080:                                            useblit=self.useblit)
2081: 
2082:         self._edge_order = ['W', 'N', 'E', 'S']
2083:         xe, ye = self.edge_centers
2084:         self._edge_handles = ToolHandles(self.ax, xe, ye, marker='s',
2085:                                          marker_props=props,
2086:                                          useblit=self.useblit)
2087: 
2088:         xc, yc = self.center
2089:         self._center_handle = ToolHandles(self.ax, [xc], [yc], marker='s',
2090:                                           marker_props=props,
2091:                                           useblit=self.useblit)
2092: 
2093:         self.active_handle = None
2094: 
2095:         self.artists = [self.to_draw, self._center_handle.artist,
2096:                         self._corner_handles.artist,
2097:                         self._edge_handles.artist]
2098: 
2099:         if not self.interactive:
2100:             self.artists = [self.to_draw]
2101: 
2102:         self._extents_on_press = None
2103: 
2104:     def _press(self, event):
2105:         '''on button press event'''
2106:         # make the drawed box/line visible get the click-coordinates,
2107:         # button, ...
2108:         if self.interactive and self.to_draw.get_visible():
2109:             self._set_active_handle(event)
2110:         else:
2111:             self.active_handle = None
2112: 
2113:         if self.active_handle is None or not self.interactive:
2114:             # Clear previous rectangle before drawing new rectangle.
2115:             self.update()
2116: 
2117:         self.set_visible(self.visible)
2118: 
2119:     def _release(self, event):
2120:         '''on button release event'''
2121:         if not self.interactive:
2122:             self.to_draw.set_visible(False)
2123: 
2124:         # update the eventpress and eventrelease with the resulting extents
2125:         x1, x2, y1, y2 = self.extents
2126:         self.eventpress.xdata = x1
2127:         self.eventpress.ydata = y1
2128:         xy1 = self.ax.transData.transform_point([x1, y1])
2129:         self.eventpress.x, self.eventpress.y = xy1
2130: 
2131:         self.eventrelease.xdata = x2
2132:         self.eventrelease.ydata = y2
2133:         xy2 = self.ax.transData.transform_point([x2, y2])
2134:         self.eventrelease.x, self.eventrelease.y = xy2
2135: 
2136:         if self.spancoords == 'data':
2137:             xmin, ymin = self.eventpress.xdata, self.eventpress.ydata
2138:             xmax, ymax = self.eventrelease.xdata, self.eventrelease.ydata
2139:             # calculate dimensions of box or line get values in the right
2140:             # order
2141:         elif self.spancoords == 'pixels':
2142:             xmin, ymin = self.eventpress.x, self.eventpress.y
2143:             xmax, ymax = self.eventrelease.x, self.eventrelease.y
2144:         else:
2145:             raise ValueError('spancoords must be "data" or "pixels"')
2146: 
2147:         if xmin > xmax:
2148:             xmin, xmax = xmax, xmin
2149:         if ymin > ymax:
2150:             ymin, ymax = ymax, ymin
2151: 
2152:         spanx = xmax - xmin
2153:         spany = ymax - ymin
2154:         xproblems = self.minspanx is not None and spanx < self.minspanx
2155:         yproblems = self.minspany is not None and spany < self.minspany
2156: 
2157:         # check if drawn distance (if it exists) is not too small in
2158:         # either x or y-direction
2159:         if self.drawtype != 'none' and (xproblems or yproblems):
2160:             for artist in self.artists:
2161:                 artist.set_visible(False)
2162:             self.update()
2163:             return
2164: 
2165:         # call desired function
2166:         self.onselect(self.eventpress, self.eventrelease)
2167:         self.update()
2168: 
2169:         return False
2170: 
2171:     def _onmove(self, event):
2172:         '''on motion notify event if box/line is wanted'''
2173:         # resize an existing shape
2174:         if self.active_handle and not self.active_handle == 'C':
2175:             x1, x2, y1, y2 = self._extents_on_press
2176:             if self.active_handle in ['E', 'W'] + self._corner_order:
2177:                 x2 = event.xdata
2178:             if self.active_handle in ['N', 'S'] + self._corner_order:
2179:                 y2 = event.ydata
2180: 
2181:         # move existing shape
2182:         elif (('move' in self.state or self.active_handle == 'C')
2183:               and self._extents_on_press is not None):
2184:             x1, x2, y1, y2 = self._extents_on_press
2185:             dx = event.xdata - self.eventpress.xdata
2186:             dy = event.ydata - self.eventpress.ydata
2187:             x1 += dx
2188:             x2 += dx
2189:             y1 += dy
2190:             y2 += dy
2191: 
2192:         # new shape
2193:         else:
2194:             center = [self.eventpress.xdata, self.eventpress.ydata]
2195:             center_pix = [self.eventpress.x, self.eventpress.y]
2196:             dx = (event.xdata - center[0]) / 2.
2197:             dy = (event.ydata - center[1]) / 2.
2198: 
2199:             # square shape
2200:             if 'square' in self.state:
2201:                 dx_pix = abs(event.x - center_pix[0])
2202:                 dy_pix = abs(event.y - center_pix[1])
2203:                 if not dx_pix:
2204:                     return
2205:                 maxd = max(abs(dx_pix), abs(dy_pix))
2206:                 if abs(dx_pix) < maxd:
2207:                     dx *= maxd / (abs(dx_pix) + 1e-6)
2208:                 if abs(dy_pix) < maxd:
2209:                     dy *= maxd / (abs(dy_pix) + 1e-6)
2210: 
2211:             # from center
2212:             if 'center' in self.state:
2213:                 dx *= 2
2214:                 dy *= 2
2215: 
2216:             # from corner
2217:             else:
2218:                 center[0] += dx
2219:                 center[1] += dy
2220: 
2221:             x1, x2, y1, y2 = (center[0] - dx, center[0] + dx,
2222:                               center[1] - dy, center[1] + dy)
2223: 
2224:         self.extents = x1, x2, y1, y2
2225: 
2226:     @property
2227:     def _rect_bbox(self):
2228:         if self.drawtype == 'box':
2229:             x0 = self.to_draw.get_x()
2230:             y0 = self.to_draw.get_y()
2231:             width = self.to_draw.get_width()
2232:             height = self.to_draw.get_height()
2233:             return x0, y0, width, height
2234:         else:
2235:             x, y = self.to_draw.get_data()
2236:             x0, x1 = min(x), max(x)
2237:             y0, y1 = min(y), max(y)
2238:             return x0, y0, x1 - x0, y1 - y0
2239: 
2240:     @property
2241:     def corners(self):
2242:         '''Corners of rectangle from lower left, moving clockwise.'''
2243:         x0, y0, width, height = self._rect_bbox
2244:         xc = x0, x0 + width, x0 + width, x0
2245:         yc = y0, y0, y0 + height, y0 + height
2246:         return xc, yc
2247: 
2248:     @property
2249:     def edge_centers(self):
2250:         '''Midpoint of rectangle edges from left, moving clockwise.'''
2251:         x0, y0, width, height = self._rect_bbox
2252:         w = width / 2.
2253:         h = height / 2.
2254:         xe = x0, x0 + w, x0 + width, x0 + w
2255:         ye = y0 + h, y0, y0 + h, y0 + height
2256:         return xe, ye
2257: 
2258:     @property
2259:     def center(self):
2260:         '''Center of rectangle'''
2261:         x0, y0, width, height = self._rect_bbox
2262:         return x0 + width / 2., y0 + height / 2.
2263: 
2264:     @property
2265:     def extents(self):
2266:         '''Return (xmin, xmax, ymin, ymax).'''
2267:         x0, y0, width, height = self._rect_bbox
2268:         xmin, xmax = sorted([x0, x0 + width])
2269:         ymin, ymax = sorted([y0, y0 + height])
2270:         return xmin, xmax, ymin, ymax
2271: 
2272:     @extents.setter
2273:     def extents(self, extents):
2274:         # Update displayed shape
2275:         self.draw_shape(extents)
2276:         # Update displayed handles
2277:         self._corner_handles.set_data(*self.corners)
2278:         self._edge_handles.set_data(*self.edge_centers)
2279:         self._center_handle.set_data(*self.center)
2280:         self.set_visible(self.visible)
2281:         self.update()
2282: 
2283:     def draw_shape(self, extents):
2284:         x0, x1, y0, y1 = extents
2285:         xmin, xmax = sorted([x0, x1])
2286:         ymin, ymax = sorted([y0, y1])
2287:         xlim = sorted(self.ax.get_xlim())
2288:         ylim = sorted(self.ax.get_ylim())
2289: 
2290:         xmin = max(xlim[0], xmin)
2291:         ymin = max(ylim[0], ymin)
2292:         xmax = min(xmax, xlim[1])
2293:         ymax = min(ymax, ylim[1])
2294: 
2295:         if self.drawtype == 'box':
2296:             self.to_draw.set_x(xmin)
2297:             self.to_draw.set_y(ymin)
2298:             self.to_draw.set_width(xmax - xmin)
2299:             self.to_draw.set_height(ymax - ymin)
2300: 
2301:         elif self.drawtype == 'line':
2302:             self.to_draw.set_data([xmin, xmax], [ymin, ymax])
2303: 
2304:     def _set_active_handle(self, event):
2305:         '''Set active handle based on the location of the mouse event'''
2306:         # Note: event.xdata/ydata in data coordinates, event.x/y in pixels
2307:         c_idx, c_dist = self._corner_handles.closest(event.x, event.y)
2308:         e_idx, e_dist = self._edge_handles.closest(event.x, event.y)
2309:         m_idx, m_dist = self._center_handle.closest(event.x, event.y)
2310: 
2311:         if 'move' in self.state:
2312:             self.active_handle = 'C'
2313:             self._extents_on_press = self.extents
2314: 
2315:         # Set active handle as closest handle, if mouse click is close enough.
2316:         elif m_dist < self.maxdist * 2:
2317:             self.active_handle = 'C'
2318:         elif c_dist > self.maxdist and e_dist > self.maxdist:
2319:             self.active_handle = None
2320:             return
2321:         elif c_dist < e_dist:
2322:             self.active_handle = self._corner_order[c_idx]
2323:         else:
2324:             self.active_handle = self._edge_order[e_idx]
2325: 
2326:         # Save coordinates of rectangle at the start of handle movement.
2327:         x1, x2, y1, y2 = self.extents
2328:         # Switch variables so that only x2 and/or y2 are updated on move.
2329:         if self.active_handle in ['W', 'SW', 'NW']:
2330:             x1, x2 = x2, event.xdata
2331:         if self.active_handle in ['N', 'NW', 'NE']:
2332:             y1, y2 = y2, event.ydata
2333:         self._extents_on_press = x1, x2, y1, y2
2334: 
2335:     @property
2336:     def geometry(self):
2337:         '''
2338:         Returns numpy.ndarray of shape (2,5) containing
2339:         x (``RectangleSelector.geometry[1,:]``) and
2340:         y (``RectangleSelector.geometry[0,:]``)
2341:         coordinates of the four corners of the rectangle starting
2342:         and ending in the top left corner.
2343:         '''
2344:         if hasattr(self.to_draw, 'get_verts'):
2345:             xfm = self.ax.transData.inverted()
2346:             y, x = xfm.transform(self.to_draw.get_verts()).T
2347:             return np.array([x, y])
2348:         else:
2349:             return np.array(self.to_draw.get_data())
2350: 
2351: 
2352: class EllipseSelector(RectangleSelector):
2353:     '''
2354:     Select an elliptical region of an axes.
2355: 
2356:     For the cursor to remain responsive you must keep a reference to
2357:     it.
2358: 
2359:     Example usage::
2360: 
2361:         from matplotlib.widgets import  EllipseSelector
2362:         from pylab import *
2363: 
2364:         def onselect(eclick, erelease):
2365:           'eclick and erelease are matplotlib events at press and release'
2366:           print(' startposition : (%f, %f)' % (eclick.xdata, eclick.ydata))
2367:           print(' endposition   : (%f, %f)' % (erelease.xdata, erelease.ydata))
2368:           print(' used button   : ', eclick.button)
2369: 
2370:         def toggle_selector(event):
2371:             print(' Key pressed.')
2372:             if event.key in ['Q', 'q'] and toggle_selector.ES.active:
2373:                 print(' EllipseSelector deactivated.')
2374:                 toggle_selector.RS.set_active(False)
2375:             if event.key in ['A', 'a'] and not toggle_selector.ES.active:
2376:                 print(' EllipseSelector activated.')
2377:                 toggle_selector.ES.set_active(True)
2378: 
2379:         x = arange(100)/(99.0)
2380:         y = sin(x)
2381:         fig = figure
2382:         ax = subplot(111)
2383:         ax.plot(x,y)
2384: 
2385:         toggle_selector.ES = EllipseSelector(ax, onselect, drawtype='line')
2386:         connect('key_press_event', toggle_selector)
2387:         show()
2388:     '''
2389:     _shape_klass = Ellipse
2390: 
2391:     def draw_shape(self, extents):
2392:         x1, x2, y1, y2 = extents
2393:         xmin, xmax = sorted([x1, x2])
2394:         ymin, ymax = sorted([y1, y2])
2395:         center = [x1 + (x2 - x1) / 2., y1 + (y2 - y1) / 2.]
2396:         a = (xmax - xmin) / 2.
2397:         b = (ymax - ymin) / 2.
2398: 
2399:         if self.drawtype == 'box':
2400:             self.to_draw.center = center
2401:             self.to_draw.width = 2 * a
2402:             self.to_draw.height = 2 * b
2403:         else:
2404:             rad = np.arange(31) * 12 * np.pi / 180
2405:             x = a * np.cos(rad) + center[0]
2406:             y = b * np.sin(rad) + center[1]
2407:             self.to_draw.set_data(x, y)
2408: 
2409:     @property
2410:     def _rect_bbox(self):
2411:         if self.drawtype == 'box':
2412:             x, y = self.to_draw.center
2413:             width = self.to_draw.width
2414:             height = self.to_draw.height
2415:             return x - width / 2., y - height / 2., width, height
2416:         else:
2417:             x, y = self.to_draw.get_data()
2418:             x0, x1 = min(x), max(x)
2419:             y0, y1 = min(y), max(y)
2420:             return x0, y0, x1 - x0, y1 - y0
2421: 
2422: 
2423: class LassoSelector(_SelectorWidget):
2424:     '''Selection curve of an arbitrary shape.
2425: 
2426:     For the selector to remain responsive you must keep a reference to
2427:     it.
2428: 
2429:     The selected path can be used in conjunction with
2430:     :func:`~matplotlib.path.Path.contains_point` to select
2431:     data points from an image.
2432: 
2433:     In contrast to :class:`Lasso`, `LassoSelector` is written with an interface
2434:     similar to :class:`RectangleSelector` and :class:`SpanSelector` and will
2435:     continue to interact with the axes until disconnected.
2436: 
2437:     Parameters:
2438: 
2439:     *ax* : :class:`~matplotlib.axes.Axes`
2440:         The parent axes for the widget.
2441:     *onselect* : function
2442:         Whenever the lasso is released, the `onselect` function is called and
2443:         passed the vertices of the selected path.
2444: 
2445:     Example usage::
2446: 
2447:         ax = subplot(111)
2448:         ax.plot(x,y)
2449: 
2450:         def onselect(verts):
2451:             print(verts)
2452:         lasso = LassoSelector(ax, onselect)
2453: 
2454:      *button* is a list of integers indicating which mouse buttons should
2455:         be used for rectangle selection.  You can also specify a single
2456:         integer if only a single button is desired.  Default is *None*,
2457:         which does not limit which button can be used.
2458: 
2459:         Note, typically:
2460:          1 = left mouse button
2461:          2 = center mouse button (scroll wheel)
2462:          3 = right mouse button
2463: 
2464:     '''
2465: 
2466:     def __init__(self, ax, onselect=None, useblit=True, lineprops=None,
2467:                  button=None):
2468:         _SelectorWidget.__init__(self, ax, onselect, useblit=useblit,
2469:                                  button=button)
2470: 
2471:         self.verts = None
2472: 
2473:         if lineprops is None:
2474:             lineprops = dict()
2475:         if useblit:
2476:             lineprops['animated'] = True
2477:         self.line = Line2D([], [], **lineprops)
2478:         self.line.set_visible(False)
2479:         self.ax.add_line(self.line)
2480:         self.artists = [self.line]
2481: 
2482:     def onpress(self, event):
2483:         self.press(event)
2484: 
2485:     def _press(self, event):
2486:         self.verts = [self._get_data(event)]
2487:         self.line.set_visible(True)
2488: 
2489:     def onrelease(self, event):
2490:         self.release(event)
2491: 
2492:     def _release(self, event):
2493:         if self.verts is not None:
2494:             self.verts.append(self._get_data(event))
2495:             self.onselect(self.verts)
2496:         self.line.set_data([[], []])
2497:         self.line.set_visible(False)
2498:         self.verts = None
2499: 
2500:     def _onmove(self, event):
2501:         if self.verts is None:
2502:             return
2503:         self.verts.append(self._get_data(event))
2504: 
2505:         self.line.set_data(list(zip(*self.verts)))
2506: 
2507:         self.update()
2508: 
2509: 
2510: class PolygonSelector(_SelectorWidget):
2511:     '''Select a polygon region of an axes.
2512: 
2513:     Place vertices with each mouse click, and make the selection by completing
2514:     the polygon (clicking on the first vertex). Hold the *ctrl* key and click
2515:     and drag a vertex to reposition it (the *ctrl* key is not necessary if the
2516:     polygon has already been completed). Hold the *shift* key and click and
2517:     drag anywhere in the axes to move all vertices. Press the *esc* key to
2518:     start a new polygon.
2519: 
2520:     For the selector to remain responsive you must keep a reference to
2521:     it.
2522: 
2523:     Parameters
2524:     ----------
2525:     ax : :class:`~matplotlib.axes.Axes`
2526:         The parent axes for the widget.
2527:     onselect : function
2528:         When a polygon is completed or modified after completion,
2529:         the `onselect` function is called and passed a list of the vertices as
2530:         ``(xdata, ydata)`` tuples.
2531:     useblit : bool, optional
2532:     lineprops : dict, optional
2533:         The line for the sides of the polygon is drawn with the properties
2534:         given by `lineprops`. The default is ``dict(color='k', linestyle='-',
2535:         linewidth=2, alpha=0.5)``.
2536:     markerprops : dict, optional
2537:         The markers for the vertices of the polygon are drawn with the
2538:         properties given by `markerprops`. The default is ``dict(marker='o',
2539:         markersize=7, mec='k', mfc='k', alpha=0.5)``.
2540:     vertex_select_radius : float, optional
2541:         A vertex is selected (to complete the polygon or to move a vertex)
2542:         if the mouse click is within `vertex_select_radius` pixels of the
2543:         vertex. The default radius is 15 pixels.
2544: 
2545:     See Also
2546:     --------
2547:     :ref:`sphx_glr_gallery_widgets_polygon_selector_demo.py`
2548:     '''
2549: 
2550:     def __init__(self, ax, onselect, useblit=False,
2551:                  lineprops=None, markerprops=None, vertex_select_radius=15):
2552:         # The state modifiers 'move', 'square', and 'center' are expected by
2553:         # _SelectorWidget but are not supported by PolygonSelector
2554:         # Note: could not use the existing 'move' state modifier in-place of
2555:         # 'move_all' because _SelectorWidget automatically discards 'move'
2556:         # from the state on button release.
2557:         state_modifier_keys = dict(clear='escape', move_vertex='control',
2558:                                    move_all='shift', move='not-applicable',
2559:                                    square='not-applicable',
2560:                                    center='not-applicable')
2561:         _SelectorWidget.__init__(self, ax, onselect, useblit=useblit,
2562:                                  state_modifier_keys=state_modifier_keys)
2563: 
2564:         self._xs, self._ys = [0], [0]
2565:         self._polygon_completed = False
2566: 
2567:         if lineprops is None:
2568:             lineprops = dict(color='k', linestyle='-', linewidth=2, alpha=0.5)
2569:         lineprops['animated'] = self.useblit
2570:         self.line = Line2D(self._xs, self._ys, **lineprops)
2571:         self.ax.add_line(self.line)
2572: 
2573:         if markerprops is None:
2574:             markerprops = dict(mec='k', mfc=lineprops.get('color', 'k'))
2575:         self._polygon_handles = ToolHandles(self.ax, self._xs, self._ys,
2576:                                             useblit=self.useblit,
2577:                                             marker_props=markerprops)
2578: 
2579:         self._active_handle_idx = -1
2580:         self.vertex_select_radius = vertex_select_radius
2581: 
2582:         self.artists = [self.line, self._polygon_handles.artist]
2583:         self.set_visible(True)
2584: 
2585:     def _press(self, event):
2586:         '''Button press event handler'''
2587:         # Check for selection of a tool handle.
2588:         if ((self._polygon_completed or 'move_vertex' in self.state)
2589:                 and len(self._xs) > 0):
2590:             h_idx, h_dist = self._polygon_handles.closest(event.x, event.y)
2591:             if h_dist < self.vertex_select_radius:
2592:                 self._active_handle_idx = h_idx
2593:         # Save the vertex positions at the time of the press event (needed to
2594:         # support the 'move_all' state modifier).
2595:         self._xs_at_press, self._ys_at_press = self._xs[:], self._ys[:]
2596: 
2597:     def _release(self, event):
2598:         '''Button release event handler'''
2599:         # Release active tool handle.
2600:         if self._active_handle_idx >= 0:
2601:             self._active_handle_idx = -1
2602: 
2603:         # Complete the polygon.
2604:         elif (len(self._xs) > 3
2605:               and self._xs[-1] == self._xs[0]
2606:               and self._ys[-1] == self._ys[0]):
2607:             self._polygon_completed = True
2608: 
2609:         # Place new vertex.
2610:         elif (not self._polygon_completed
2611:               and 'move_all' not in self.state
2612:               and 'move_vertex' not in self.state):
2613:             self._xs.insert(-1, event.xdata)
2614:             self._ys.insert(-1, event.ydata)
2615: 
2616:         if self._polygon_completed:
2617:             self.onselect(self.verts)
2618: 
2619:     def onmove(self, event):
2620:         '''Cursor move event handler and validator'''
2621:         # Method overrides _SelectorWidget.onmove because the polygon selector
2622:         # needs to process the move callback even if there is no button press.
2623:         # _SelectorWidget.onmove include logic to ignore move event if
2624:         # eventpress is None.
2625:         if not self.ignore(event):
2626:             event = self._clean_event(event)
2627:             self._onmove(event)
2628:             return True
2629:         return False
2630: 
2631:     def _onmove(self, event):
2632:         '''Cursor move event handler'''
2633:         # Move the active vertex (ToolHandle).
2634:         if self._active_handle_idx >= 0:
2635:             idx = self._active_handle_idx
2636:             self._xs[idx], self._ys[idx] = event.xdata, event.ydata
2637:             # Also update the end of the polygon line if the first vertex is
2638:             # the active handle and the polygon is completed.
2639:             if idx == 0 and self._polygon_completed:
2640:                 self._xs[-1], self._ys[-1] = event.xdata, event.ydata
2641: 
2642:         # Move all vertices.
2643:         elif 'move_all' in self.state and self.eventpress:
2644:             dx = event.xdata - self.eventpress.xdata
2645:             dy = event.ydata - self.eventpress.ydata
2646:             for k in range(len(self._xs)):
2647:                 self._xs[k] = self._xs_at_press[k] + dx
2648:                 self._ys[k] = self._ys_at_press[k] + dy
2649: 
2650:         # Do nothing if completed or waiting for a move.
2651:         elif (self._polygon_completed
2652:               or 'move_vertex' in self.state or 'move_all' in self.state):
2653:             return
2654: 
2655:         # Position pending vertex.
2656:         else:
2657:             # Calculate distance to the start vertex.
2658:             x0, y0 = self.line.get_transform().transform((self._xs[0],
2659:                                                           self._ys[0]))
2660:             v0_dist = np.sqrt((x0 - event.x) ** 2 + (y0 - event.y) ** 2)
2661:             # Lock on to the start vertex if near it and ready to complete.
2662:             if len(self._xs) > 3 and v0_dist < self.vertex_select_radius:
2663:                 self._xs[-1], self._ys[-1] = self._xs[0], self._ys[0]
2664:             else:
2665:                 self._xs[-1], self._ys[-1] = event.xdata, event.ydata
2666: 
2667:         self._draw_polygon()
2668: 
2669:     def _on_key_press(self, event):
2670:         '''Key press event handler'''
2671:         # Remove the pending vertex if entering the 'move_vertex' or
2672:         # 'move_all' mode
2673:         if (not self._polygon_completed
2674:                 and ('move_vertex' in self.state or 'move_all' in self.state)):
2675:             self._xs, self._ys = self._xs[:-1], self._ys[:-1]
2676:             self._draw_polygon()
2677: 
2678:     def _on_key_release(self, event):
2679:         '''Key release event handler'''
2680:         # Add back the pending vertex if leaving the 'move_vertex' or
2681:         # 'move_all' mode (by checking the released key)
2682:         if (not self._polygon_completed
2683:                 and
2684:                 (event.key == self.state_modifier_keys.get('move_vertex')
2685:                  or event.key == self.state_modifier_keys.get('move_all'))):
2686:             self._xs.append(event.xdata)
2687:             self._ys.append(event.ydata)
2688:             self._draw_polygon()
2689:         # Reset the polygon if the released key is the 'clear' key.
2690:         elif event.key == self.state_modifier_keys.get('clear'):
2691:             event = self._clean_event(event)
2692:             self._xs, self._ys = [event.xdata], [event.ydata]
2693:             self._polygon_completed = False
2694:             self.set_visible(True)
2695: 
2696:     def _draw_polygon(self):
2697:         '''Redraw the polygon based on the new vertex positions.'''
2698:         self.line.set_data(self._xs, self._ys)
2699:         # Only show one tool handle at the start and end vertex of the polygon
2700:         # if the polygon is completed or the user is locked on to the start
2701:         # vertex.
2702:         if (self._polygon_completed
2703:                 or (len(self._xs) > 3
2704:                     and self._xs[-1] == self._xs[0]
2705:                     and self._ys[-1] == self._ys[0])):
2706:             self._polygon_handles.set_data(self._xs[:-1], self._ys[:-1])
2707:         else:
2708:             self._polygon_handles.set_data(self._xs, self._ys)
2709:         self.update()
2710: 
2711:     @property
2712:     def verts(self):
2713:         '''Get the polygon vertices.
2714: 
2715:         Returns
2716:         -------
2717:         list
2718:             A list of the vertices of the polygon as ``(xdata, ydata)`` tuples.
2719:         '''
2720:         return list(zip(self._xs[:-1], self._ys[:-1]))
2721: 
2722: 
2723: class Lasso(AxesWidget):
2724:     '''Selection curve of an arbitrary shape.
2725: 
2726:     The selected path can be used in conjunction with
2727:     :func:`~matplotlib.path.Path.contains_point` to select data points
2728:     from an image.
2729: 
2730:     Unlike :class:`LassoSelector`, this must be initialized with a starting
2731:     point `xy`, and the `Lasso` events are destroyed upon release.
2732: 
2733:     Parameters:
2734: 
2735:     *ax* : :class:`~matplotlib.axes.Axes`
2736:         The parent axes for the widget.
2737:     *xy* : array
2738:         Coordinates of the start of the lasso.
2739:     *callback* : function
2740:         Whenever the lasso is released, the `callback` function is called and
2741:         passed the vertices of the selected path.
2742: 
2743:     '''
2744: 
2745:     def __init__(self, ax, xy, callback=None, useblit=True):
2746:         AxesWidget.__init__(self, ax)
2747: 
2748:         self.useblit = useblit and self.canvas.supports_blit
2749:         if self.useblit:
2750:             self.background = self.canvas.copy_from_bbox(self.ax.bbox)
2751: 
2752:         x, y = xy
2753:         self.verts = [(x, y)]
2754:         self.line = Line2D([x], [y], linestyle='-', color='black', lw=2)
2755:         self.ax.add_line(self.line)
2756:         self.callback = callback
2757:         self.connect_event('button_release_event', self.onrelease)
2758:         self.connect_event('motion_notify_event', self.onmove)
2759: 
2760:     def onrelease(self, event):
2761:         if self.ignore(event):
2762:             return
2763:         if self.verts is not None:
2764:             self.verts.append((event.xdata, event.ydata))
2765:             if len(self.verts) > 2:
2766:                 self.callback(self.verts)
2767:             self.ax.lines.remove(self.line)
2768:         self.verts = None
2769:         self.disconnect_events()
2770: 
2771:     def onmove(self, event):
2772:         if self.ignore(event):
2773:             return
2774:         if self.verts is None:
2775:             return
2776:         if event.inaxes != self.ax:
2777:             return
2778:         if event.button != 1:
2779:             return
2780:         self.verts.append((event.xdata, event.ydata))
2781: 
2782:         self.line.set_data(list(zip(*self.verts)))
2783: 
2784:         if self.useblit:
2785:             self.canvas.restore_region(self.background)
2786:             self.ax.draw_artist(self.line)
2787:             self.canvas.blit(self.ax.bbox)
2788:         else:
2789:             self.canvas.draw_idle()
2790: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_162453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 10, (-1)), 'unicode', u"\nGUI neutral widgets\n===================\n\nWidgets that are designed to work for any of the GUI backends.\nAll of these widgets require you to predefine a :class:`matplotlib.axes.Axes`\ninstance and pass that as the first arg.  matplotlib doesn't try to\nbe too smart with respect to layout -- you will have to figure out how\nwide and tall you want your Axes to be to accommodate your widget.\n")
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'import copy' statement (line 15)
import copy

import_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'copy', copy, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 0))

# 'import six' statement (line 16)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_162454 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'six')

if (type(import_162454) is not StypyTypeError):

    if (import_162454 != 'pyd_module'):
        __import__(import_162454)
        sys_modules_162455 = sys.modules[import_162454]
        import_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'six', sys_modules_162455.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 16)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 0), 'six', import_162454)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 0))

# 'from six.moves import zip' statement (line 17)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_162456 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'six.moves')

if (type(import_162456) is not StypyTypeError):

    if (import_162456 != 'pyd_module'):
        __import__(import_162456)
        sys_modules_162457 = sys.modules[import_162456]
        import_from_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'six.moves', sys_modules_162457.module_type_store, module_type_store, ['zip'])
        nest_module(stypy.reporting.localization.Localization(__file__, 17, 0), __file__, sys_modules_162457, sys_modules_162457.module_type_store, module_type_store)
    else:
        from six.moves import zip

        import_from_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'six.moves', None, module_type_store, ['zip'], [zip])

else:
    # Assigning a type to the variable 'six.moves' (line 17)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 17, 0), 'six.moves', import_162456)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'import numpy' statement (line 19)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_162458 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'numpy')

if (type(import_162458) is not StypyTypeError):

    if (import_162458 != 'pyd_module'):
        __import__(import_162458)
        sys_modules_162459 = sys.modules[import_162458]
        import_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'np', sys_modules_162459.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 0), 'numpy', import_162458)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'from matplotlib import rcParams' statement (line 20)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_162460 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib')

if (type(import_162460) is not StypyTypeError):

    if (import_162460 != 'pyd_module'):
        __import__(import_162460)
        sys_modules_162461 = sys.modules[import_162460]
        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib', sys_modules_162461.module_type_store, module_type_store, ['rcParams'])
        nest_module(stypy.reporting.localization.Localization(__file__, 20, 0), __file__, sys_modules_162461, sys_modules_162461.module_type_store, module_type_store)
    else:
        from matplotlib import rcParams

        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib', None, module_type_store, ['rcParams'], [rcParams])

else:
    # Assigning a type to the variable 'matplotlib' (line 20)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib', import_162460)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 22, 0))

# 'from matplotlib.mlab import dist' statement (line 22)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_162462 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'matplotlib.mlab')

if (type(import_162462) is not StypyTypeError):

    if (import_162462 != 'pyd_module'):
        __import__(import_162462)
        sys_modules_162463 = sys.modules[import_162462]
        import_from_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'matplotlib.mlab', sys_modules_162463.module_type_store, module_type_store, ['dist'])
        nest_module(stypy.reporting.localization.Localization(__file__, 22, 0), __file__, sys_modules_162463, sys_modules_162463.module_type_store, module_type_store)
    else:
        from matplotlib.mlab import dist

        import_from_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'matplotlib.mlab', None, module_type_store, ['dist'], [dist])

else:
    # Assigning a type to the variable 'matplotlib.mlab' (line 22)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 22, 0), 'matplotlib.mlab', import_162462)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'from matplotlib.patches import Circle, Rectangle, Ellipse' statement (line 23)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_162464 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.patches')

if (type(import_162464) is not StypyTypeError):

    if (import_162464 != 'pyd_module'):
        __import__(import_162464)
        sys_modules_162465 = sys.modules[import_162464]
        import_from_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.patches', sys_modules_162465.module_type_store, module_type_store, ['Circle', 'Rectangle', 'Ellipse'])
        nest_module(stypy.reporting.localization.Localization(__file__, 23, 0), __file__, sys_modules_162465, sys_modules_162465.module_type_store, module_type_store)
    else:
        from matplotlib.patches import Circle, Rectangle, Ellipse

        import_from_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.patches', None, module_type_store, ['Circle', 'Rectangle', 'Ellipse'], [Circle, Rectangle, Ellipse])

else:
    # Assigning a type to the variable 'matplotlib.patches' (line 23)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.patches', import_162464)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'from matplotlib.lines import Line2D' statement (line 24)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_162466 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.lines')

if (type(import_162466) is not StypyTypeError):

    if (import_162466 != 'pyd_module'):
        __import__(import_162466)
        sys_modules_162467 = sys.modules[import_162466]
        import_from_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.lines', sys_modules_162467.module_type_store, module_type_store, ['Line2D'])
        nest_module(stypy.reporting.localization.Localization(__file__, 24, 0), __file__, sys_modules_162467, sys_modules_162467.module_type_store, module_type_store)
    else:
        from matplotlib.lines import Line2D

        import_from_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.lines', None, module_type_store, ['Line2D'], [Line2D])

else:
    # Assigning a type to the variable 'matplotlib.lines' (line 24)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.lines', import_162466)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'from matplotlib.transforms import blended_transform_factory' statement (line 25)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_162468 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.transforms')

if (type(import_162468) is not StypyTypeError):

    if (import_162468 != 'pyd_module'):
        __import__(import_162468)
        sys_modules_162469 = sys.modules[import_162468]
        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.transforms', sys_modules_162469.module_type_store, module_type_store, ['blended_transform_factory'])
        nest_module(stypy.reporting.localization.Localization(__file__, 25, 0), __file__, sys_modules_162469, sys_modules_162469.module_type_store, module_type_store)
    else:
        from matplotlib.transforms import blended_transform_factory

        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.transforms', None, module_type_store, ['blended_transform_factory'], [blended_transform_factory])

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 25)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.transforms', import_162468)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

# Declaration of the 'LockDraw' class

class LockDraw(object, ):
    unicode_162470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, (-1)), 'unicode', u'\n    Some widgets, like the cursor, draw onto the canvas, and this is not\n    desirable under all circumstances, like when the toolbar is in\n    zoom-to-rect mode and drawing a rectangle.  The module level "lock"\n    allows someone to grab the lock and prevent other widgets from\n    drawing.  Use ``matplotlib.widgets.lock(someobj)`` to prevent\n    other widgets from drawing while you\'re interacting with the canvas.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 38, 4, False)
        # Assigning a type to the variable 'self' (line 39)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LockDraw.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 39):
        
        # Assigning a Name to a Attribute (line 39):
        # Getting the type of 'None' (line 39)
        None_162471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 22), 'None')
        # Getting the type of 'self' (line 39)
        self_162472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 8), 'self')
        # Setting the type of the member '_owner' of a type (line 39)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 39, 8), self_162472, '_owner', None_162471)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 41, 4, False)
        # Assigning a type to the variable 'self' (line 42)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 42, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LockDraw.__call__.__dict__.__setitem__('stypy_localization', localization)
        LockDraw.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LockDraw.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        LockDraw.__call__.__dict__.__setitem__('stypy_function_name', 'LockDraw.__call__')
        LockDraw.__call__.__dict__.__setitem__('stypy_param_names_list', ['o'])
        LockDraw.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        LockDraw.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LockDraw.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        LockDraw.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        LockDraw.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LockDraw.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LockDraw.__call__', ['o'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['o'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        unicode_162473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 8), 'unicode', u'reserve the lock for *o*')
        
        
        
        # Call to available(...): (line 43)
        # Processing the call arguments (line 43)
        # Getting the type of 'o' (line 43)
        o_162476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 30), 'o', False)
        # Processing the call keyword arguments (line 43)
        kwargs_162477 = {}
        # Getting the type of 'self' (line 43)
        self_162474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 15), 'self', False)
        # Obtaining the member 'available' of a type (line 43)
        available_162475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 43, 15), self_162474, 'available')
        # Calling available(args, kwargs) (line 43)
        available_call_result_162478 = invoke(stypy.reporting.localization.Localization(__file__, 43, 15), available_162475, *[o_162476], **kwargs_162477)
        
        # Applying the 'not' unary operator (line 43)
        result_not__162479 = python_operator(stypy.reporting.localization.Localization(__file__, 43, 11), 'not', available_call_result_162478)
        
        # Testing the type of an if condition (line 43)
        if_condition_162480 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 43, 8), result_not__162479)
        # Assigning a type to the variable 'if_condition_162480' (line 43)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 8), 'if_condition_162480', if_condition_162480)
        # SSA begins for if statement (line 43)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 44)
        # Processing the call arguments (line 44)
        unicode_162482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 29), 'unicode', u'already locked')
        # Processing the call keyword arguments (line 44)
        kwargs_162483 = {}
        # Getting the type of 'ValueError' (line 44)
        ValueError_162481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 44, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 44)
        ValueError_call_result_162484 = invoke(stypy.reporting.localization.Localization(__file__, 44, 18), ValueError_162481, *[unicode_162482], **kwargs_162483)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 44, 12), ValueError_call_result_162484, 'raise parameter', BaseException)
        # SSA join for if statement (line 43)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 45):
        
        # Assigning a Name to a Attribute (line 45):
        # Getting the type of 'o' (line 45)
        o_162485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 45, 22), 'o')
        # Getting the type of 'self' (line 45)
        self_162486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 45, 8), 'self')
        # Setting the type of the member '_owner' of a type (line 45)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 45, 8), self_162486, '_owner', o_162485)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 41)
        stypy_return_type_162487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 41, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_162487)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_162487


    @norecursion
    def release(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'release'
        module_type_store = module_type_store.open_function_context('release', 47, 4, False)
        # Assigning a type to the variable 'self' (line 48)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 48, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LockDraw.release.__dict__.__setitem__('stypy_localization', localization)
        LockDraw.release.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LockDraw.release.__dict__.__setitem__('stypy_type_store', module_type_store)
        LockDraw.release.__dict__.__setitem__('stypy_function_name', 'LockDraw.release')
        LockDraw.release.__dict__.__setitem__('stypy_param_names_list', ['o'])
        LockDraw.release.__dict__.__setitem__('stypy_varargs_param_name', None)
        LockDraw.release.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LockDraw.release.__dict__.__setitem__('stypy_call_defaults', defaults)
        LockDraw.release.__dict__.__setitem__('stypy_call_varargs', varargs)
        LockDraw.release.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LockDraw.release.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LockDraw.release', ['o'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'release', localization, ['o'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'release(...)' code ##################

        unicode_162488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 8), 'unicode', u'release the lock')
        
        
        
        # Call to available(...): (line 49)
        # Processing the call arguments (line 49)
        # Getting the type of 'o' (line 49)
        o_162491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 30), 'o', False)
        # Processing the call keyword arguments (line 49)
        kwargs_162492 = {}
        # Getting the type of 'self' (line 49)
        self_162489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 15), 'self', False)
        # Obtaining the member 'available' of a type (line 49)
        available_162490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 49, 15), self_162489, 'available')
        # Calling available(args, kwargs) (line 49)
        available_call_result_162493 = invoke(stypy.reporting.localization.Localization(__file__, 49, 15), available_162490, *[o_162491], **kwargs_162492)
        
        # Applying the 'not' unary operator (line 49)
        result_not__162494 = python_operator(stypy.reporting.localization.Localization(__file__, 49, 11), 'not', available_call_result_162493)
        
        # Testing the type of an if condition (line 49)
        if_condition_162495 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 49, 8), result_not__162494)
        # Assigning a type to the variable 'if_condition_162495' (line 49)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 8), 'if_condition_162495', if_condition_162495)
        # SSA begins for if statement (line 49)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 50)
        # Processing the call arguments (line 50)
        unicode_162497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 50, 29), 'unicode', u'you do not own this lock')
        # Processing the call keyword arguments (line 50)
        kwargs_162498 = {}
        # Getting the type of 'ValueError' (line 50)
        ValueError_162496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 50, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 50)
        ValueError_call_result_162499 = invoke(stypy.reporting.localization.Localization(__file__, 50, 18), ValueError_162496, *[unicode_162497], **kwargs_162498)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 50, 12), ValueError_call_result_162499, 'raise parameter', BaseException)
        # SSA join for if statement (line 49)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 51):
        
        # Assigning a Name to a Attribute (line 51):
        # Getting the type of 'None' (line 51)
        None_162500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 22), 'None')
        # Getting the type of 'self' (line 51)
        self_162501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 8), 'self')
        # Setting the type of the member '_owner' of a type (line 51)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 8), self_162501, '_owner', None_162500)
        
        # ################# End of 'release(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'release' in the type store
        # Getting the type of 'stypy_return_type' (line 47)
        stypy_return_type_162502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_162502)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'release'
        return stypy_return_type_162502


    @norecursion
    def available(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'available'
        module_type_store = module_type_store.open_function_context('available', 53, 4, False)
        # Assigning a type to the variable 'self' (line 54)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 54, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LockDraw.available.__dict__.__setitem__('stypy_localization', localization)
        LockDraw.available.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LockDraw.available.__dict__.__setitem__('stypy_type_store', module_type_store)
        LockDraw.available.__dict__.__setitem__('stypy_function_name', 'LockDraw.available')
        LockDraw.available.__dict__.__setitem__('stypy_param_names_list', ['o'])
        LockDraw.available.__dict__.__setitem__('stypy_varargs_param_name', None)
        LockDraw.available.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LockDraw.available.__dict__.__setitem__('stypy_call_defaults', defaults)
        LockDraw.available.__dict__.__setitem__('stypy_call_varargs', varargs)
        LockDraw.available.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LockDraw.available.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LockDraw.available', ['o'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'available', localization, ['o'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'available(...)' code ##################

        unicode_162503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 54, 8), 'unicode', u'drawing is available to *o*')
        
        # Evaluating a boolean operation
        
        
        # Call to locked(...): (line 55)
        # Processing the call keyword arguments (line 55)
        kwargs_162506 = {}
        # Getting the type of 'self' (line 55)
        self_162504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 19), 'self', False)
        # Obtaining the member 'locked' of a type (line 55)
        locked_162505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 55, 19), self_162504, 'locked')
        # Calling locked(args, kwargs) (line 55)
        locked_call_result_162507 = invoke(stypy.reporting.localization.Localization(__file__, 55, 19), locked_162505, *[], **kwargs_162506)
        
        # Applying the 'not' unary operator (line 55)
        result_not__162508 = python_operator(stypy.reporting.localization.Localization(__file__, 55, 15), 'not', locked_call_result_162507)
        
        
        # Call to isowner(...): (line 55)
        # Processing the call arguments (line 55)
        # Getting the type of 'o' (line 55)
        o_162511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 49), 'o', False)
        # Processing the call keyword arguments (line 55)
        kwargs_162512 = {}
        # Getting the type of 'self' (line 55)
        self_162509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 36), 'self', False)
        # Obtaining the member 'isowner' of a type (line 55)
        isowner_162510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 55, 36), self_162509, 'isowner')
        # Calling isowner(args, kwargs) (line 55)
        isowner_call_result_162513 = invoke(stypy.reporting.localization.Localization(__file__, 55, 36), isowner_162510, *[o_162511], **kwargs_162512)
        
        # Applying the binary operator 'or' (line 55)
        result_or_keyword_162514 = python_operator(stypy.reporting.localization.Localization(__file__, 55, 15), 'or', result_not__162508, isowner_call_result_162513)
        
        # Assigning a type to the variable 'stypy_return_type' (line 55)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 55, 8), 'stypy_return_type', result_or_keyword_162514)
        
        # ################# End of 'available(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'available' in the type store
        # Getting the type of 'stypy_return_type' (line 53)
        stypy_return_type_162515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_162515)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'available'
        return stypy_return_type_162515


    @norecursion
    def isowner(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'isowner'
        module_type_store = module_type_store.open_function_context('isowner', 57, 4, False)
        # Assigning a type to the variable 'self' (line 58)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 58, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LockDraw.isowner.__dict__.__setitem__('stypy_localization', localization)
        LockDraw.isowner.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LockDraw.isowner.__dict__.__setitem__('stypy_type_store', module_type_store)
        LockDraw.isowner.__dict__.__setitem__('stypy_function_name', 'LockDraw.isowner')
        LockDraw.isowner.__dict__.__setitem__('stypy_param_names_list', ['o'])
        LockDraw.isowner.__dict__.__setitem__('stypy_varargs_param_name', None)
        LockDraw.isowner.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LockDraw.isowner.__dict__.__setitem__('stypy_call_defaults', defaults)
        LockDraw.isowner.__dict__.__setitem__('stypy_call_varargs', varargs)
        LockDraw.isowner.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LockDraw.isowner.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LockDraw.isowner', ['o'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'isowner', localization, ['o'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'isowner(...)' code ##################

        unicode_162516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 8), 'unicode', u'Return True if *o* owns this lock')
        
        # Getting the type of 'self' (line 59)
        self_162517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 15), 'self')
        # Obtaining the member '_owner' of a type (line 59)
        _owner_162518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 59, 15), self_162517, '_owner')
        # Getting the type of 'o' (line 59)
        o_162519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 30), 'o')
        # Applying the binary operator 'is' (line 59)
        result_is__162520 = python_operator(stypy.reporting.localization.Localization(__file__, 59, 15), 'is', _owner_162518, o_162519)
        
        # Assigning a type to the variable 'stypy_return_type' (line 59)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 59, 8), 'stypy_return_type', result_is__162520)
        
        # ################# End of 'isowner(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'isowner' in the type store
        # Getting the type of 'stypy_return_type' (line 57)
        stypy_return_type_162521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_162521)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'isowner'
        return stypy_return_type_162521


    @norecursion
    def locked(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'locked'
        module_type_store = module_type_store.open_function_context('locked', 61, 4, False)
        # Assigning a type to the variable 'self' (line 62)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 62, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LockDraw.locked.__dict__.__setitem__('stypy_localization', localization)
        LockDraw.locked.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LockDraw.locked.__dict__.__setitem__('stypy_type_store', module_type_store)
        LockDraw.locked.__dict__.__setitem__('stypy_function_name', 'LockDraw.locked')
        LockDraw.locked.__dict__.__setitem__('stypy_param_names_list', [])
        LockDraw.locked.__dict__.__setitem__('stypy_varargs_param_name', None)
        LockDraw.locked.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LockDraw.locked.__dict__.__setitem__('stypy_call_defaults', defaults)
        LockDraw.locked.__dict__.__setitem__('stypy_call_varargs', varargs)
        LockDraw.locked.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LockDraw.locked.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LockDraw.locked', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'locked', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'locked(...)' code ##################

        unicode_162522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 8), 'unicode', u'Return True if the lock is currently held by an owner')
        
        # Getting the type of 'self' (line 63)
        self_162523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 63, 15), 'self')
        # Obtaining the member '_owner' of a type (line 63)
        _owner_162524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 63, 15), self_162523, '_owner')
        # Getting the type of 'None' (line 63)
        None_162525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 63, 34), 'None')
        # Applying the binary operator 'isnot' (line 63)
        result_is_not_162526 = python_operator(stypy.reporting.localization.Localization(__file__, 63, 15), 'isnot', _owner_162524, None_162525)
        
        # Assigning a type to the variable 'stypy_return_type' (line 63)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 63, 8), 'stypy_return_type', result_is_not_162526)
        
        # ################# End of 'locked(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'locked' in the type store
        # Getting the type of 'stypy_return_type' (line 61)
        stypy_return_type_162527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 61, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_162527)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'locked'
        return stypy_return_type_162527


# Assigning a type to the variable 'LockDraw' (line 28)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'LockDraw', LockDraw)
# Declaration of the 'Widget' class

class Widget(object, ):
    unicode_162528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, (-1)), 'unicode', u'\n    Abstract base class for GUI neutral widgets\n    ')
    
    # Assigning a Name to a Name (line 70):
    
    # Assigning a Name to a Name (line 71):
    
    # Assigning a Name to a Name (line 72):

    @norecursion
    def set_active(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_active'
        module_type_store = module_type_store.open_function_context('set_active', 74, 4, False)
        # Assigning a type to the variable 'self' (line 75)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Widget.set_active.__dict__.__setitem__('stypy_localization', localization)
        Widget.set_active.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Widget.set_active.__dict__.__setitem__('stypy_type_store', module_type_store)
        Widget.set_active.__dict__.__setitem__('stypy_function_name', 'Widget.set_active')
        Widget.set_active.__dict__.__setitem__('stypy_param_names_list', ['active'])
        Widget.set_active.__dict__.__setitem__('stypy_varargs_param_name', None)
        Widget.set_active.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Widget.set_active.__dict__.__setitem__('stypy_call_defaults', defaults)
        Widget.set_active.__dict__.__setitem__('stypy_call_varargs', varargs)
        Widget.set_active.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Widget.set_active.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Widget.set_active', ['active'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_active', localization, ['active'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_active(...)' code ##################

        unicode_162529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, (-1)), 'unicode', u'Set whether the widget is active.\n        ')
        
        # Assigning a Name to a Attribute (line 77):
        
        # Assigning a Name to a Attribute (line 77):
        # Getting the type of 'active' (line 77)
        active_162530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 23), 'active')
        # Getting the type of 'self' (line 77)
        self_162531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 8), 'self')
        # Setting the type of the member '_active' of a type (line 77)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 77, 8), self_162531, '_active', active_162530)
        
        # ################# End of 'set_active(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_active' in the type store
        # Getting the type of 'stypy_return_type' (line 74)
        stypy_return_type_162532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_162532)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_active'
        return stypy_return_type_162532


    @norecursion
    def get_active(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_active'
        module_type_store = module_type_store.open_function_context('get_active', 79, 4, False)
        # Assigning a type to the variable 'self' (line 80)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 80, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Widget.get_active.__dict__.__setitem__('stypy_localization', localization)
        Widget.get_active.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Widget.get_active.__dict__.__setitem__('stypy_type_store', module_type_store)
        Widget.get_active.__dict__.__setitem__('stypy_function_name', 'Widget.get_active')
        Widget.get_active.__dict__.__setitem__('stypy_param_names_list', [])
        Widget.get_active.__dict__.__setitem__('stypy_varargs_param_name', None)
        Widget.get_active.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Widget.get_active.__dict__.__setitem__('stypy_call_defaults', defaults)
        Widget.get_active.__dict__.__setitem__('stypy_call_varargs', varargs)
        Widget.get_active.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Widget.get_active.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Widget.get_active', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_active', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_active(...)' code ##################

        unicode_162533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, (-1)), 'unicode', u'Get whether the widget is active.\n        ')
        # Getting the type of 'self' (line 82)
        self_162534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 15), 'self')
        # Obtaining the member '_active' of a type (line 82)
        _active_162535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 82, 15), self_162534, '_active')
        # Assigning a type to the variable 'stypy_return_type' (line 82)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 82, 8), 'stypy_return_type', _active_162535)
        
        # ################# End of 'get_active(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_active' in the type store
        # Getting the type of 'stypy_return_type' (line 79)
        stypy_return_type_162536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_162536)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_active'
        return stypy_return_type_162536

    
    # Assigning a Call to a Name (line 85):

    @norecursion
    def ignore(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'ignore'
        module_type_store = module_type_store.open_function_context('ignore', 88, 4, False)
        # Assigning a type to the variable 'self' (line 89)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 89, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Widget.ignore.__dict__.__setitem__('stypy_localization', localization)
        Widget.ignore.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Widget.ignore.__dict__.__setitem__('stypy_type_store', module_type_store)
        Widget.ignore.__dict__.__setitem__('stypy_function_name', 'Widget.ignore')
        Widget.ignore.__dict__.__setitem__('stypy_param_names_list', ['event'])
        Widget.ignore.__dict__.__setitem__('stypy_varargs_param_name', None)
        Widget.ignore.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Widget.ignore.__dict__.__setitem__('stypy_call_defaults', defaults)
        Widget.ignore.__dict__.__setitem__('stypy_call_varargs', varargs)
        Widget.ignore.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Widget.ignore.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Widget.ignore', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ignore', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ignore(...)' code ##################

        unicode_162537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, (-1)), 'unicode', u'Return True if event should be ignored.\n\n        This method (or a version of it) should be called at the beginning\n        of any event callback.\n        ')
        
        # Getting the type of 'self' (line 94)
        self_162538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 19), 'self')
        # Obtaining the member 'active' of a type (line 94)
        active_162539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 94, 19), self_162538, 'active')
        # Applying the 'not' unary operator (line 94)
        result_not__162540 = python_operator(stypy.reporting.localization.Localization(__file__, 94, 15), 'not', active_162539)
        
        # Assigning a type to the variable 'stypy_return_type' (line 94)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 94, 8), 'stypy_return_type', result_not__162540)
        
        # ################# End of 'ignore(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ignore' in the type store
        # Getting the type of 'stypy_return_type' (line 88)
        stypy_return_type_162541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_162541)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ignore'
        return stypy_return_type_162541


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 66, 0, False)
        # Assigning a type to the variable 'self' (line 67)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 67, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Widget.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'Widget' (line 66)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 66, 0), 'Widget', Widget)

# Assigning a Name to a Name (line 70):
# Getting the type of 'True' (line 70)
True_162542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 13), 'True')
# Getting the type of 'Widget'
Widget_162543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Widget')
# Setting the type of the member 'drawon' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Widget_162543, 'drawon', True_162542)

# Assigning a Name to a Name (line 71):
# Getting the type of 'True' (line 71)
True_162544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 15), 'True')
# Getting the type of 'Widget'
Widget_162545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Widget')
# Setting the type of the member 'eventson' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Widget_162545, 'eventson', True_162544)

# Assigning a Name to a Name (line 72):
# Getting the type of 'True' (line 72)
True_162546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 14), 'True')
# Getting the type of 'Widget'
Widget_162547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Widget')
# Setting the type of the member '_active' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Widget_162547, '_active', True_162546)

# Assigning a Call to a Name (line 85):

# Call to property(...): (line 85)
# Processing the call arguments (line 85)
# Getting the type of 'Widget'
Widget_162549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Widget', False)
# Obtaining the member 'get_active' of a type
get_active_162550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Widget_162549, 'get_active')

@norecursion
def _stypy_temp_lambda_26(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_26'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_26', 85, 34, True)
    # Passed parameters checking function
    _stypy_temp_lambda_26.stypy_localization = localization
    _stypy_temp_lambda_26.stypy_type_of_self = None
    _stypy_temp_lambda_26.stypy_type_store = module_type_store
    _stypy_temp_lambda_26.stypy_function_name = '_stypy_temp_lambda_26'
    _stypy_temp_lambda_26.stypy_param_names_list = ['self']
    _stypy_temp_lambda_26.stypy_varargs_param_name = None
    _stypy_temp_lambda_26.stypy_kwargs_param_name = None
    _stypy_temp_lambda_26.stypy_call_defaults = defaults
    _stypy_temp_lambda_26.stypy_call_varargs = varargs
    _stypy_temp_lambda_26.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_26', ['self'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_26', ['self'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    # Call to set_active(...): (line 85)
    # Processing the call arguments (line 85)
    # Getting the type of 'Widget'
    Widget_162553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Widget', False)
    # Obtaining the member 'active' of a type
    active_162554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Widget_162553, 'active')
    # Processing the call keyword arguments (line 85)
    kwargs_162555 = {}
    # Getting the type of 'self' (line 85)
    self_162551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 55), 'self', False)
    # Obtaining the member 'set_active' of a type (line 85)
    set_active_162552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 85, 55), self_162551, 'set_active')
    # Calling set_active(args, kwargs) (line 85)
    set_active_call_result_162556 = invoke(stypy.reporting.localization.Localization(__file__, 85, 55), set_active_162552, *[active_162554], **kwargs_162555)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 85)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 34), 'stypy_return_type', set_active_call_result_162556)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_26' in the type store
    # Getting the type of 'stypy_return_type' (line 85)
    stypy_return_type_162557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 34), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_162557)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_26'
    return stypy_return_type_162557

# Assigning a type to the variable '_stypy_temp_lambda_26' (line 85)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 34), '_stypy_temp_lambda_26', _stypy_temp_lambda_26)
# Getting the type of '_stypy_temp_lambda_26' (line 85)
_stypy_temp_lambda_26_162558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 34), '_stypy_temp_lambda_26')
# Processing the call keyword arguments (line 85)
unicode_162559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 26), 'unicode', u'Is the widget active?')
keyword_162560 = unicode_162559
kwargs_162561 = {'doc': keyword_162560}
# Getting the type of 'property' (line 85)
property_162548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 13), 'property', False)
# Calling property(args, kwargs) (line 85)
property_call_result_162562 = invoke(stypy.reporting.localization.Localization(__file__, 85, 13), property_162548, *[get_active_162550, _stypy_temp_lambda_26_162558], **kwargs_162561)

# Getting the type of 'Widget'
Widget_162563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Widget')
# Setting the type of the member 'active' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Widget_162563, 'active', property_call_result_162562)
# Declaration of the 'AxesWidget' class
# Getting the type of 'Widget' (line 97)
Widget_162564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 17), 'Widget')

class AxesWidget(Widget_162564, ):
    unicode_162565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 118, (-1)), 'unicode', u'Widget that is connected to a single\n    :class:`~matplotlib.axes.Axes`.\n\n    To guarantee that the widget remains responsive and not garbage-collected,\n    a reference to the object should be maintained by the user.\n\n    This is necessary because the callback registry\n    maintains only weak-refs to the functions, which are member\n    functions of the widget.  If there are no references to the widget\n    object it may be garbage collected which will disconnect the\n    callbacks.\n\n    Attributes:\n\n    *ax* : :class:`~matplotlib.axes.Axes`\n        The parent axes for the widget\n    *canvas* : :class:`~matplotlib.backend_bases.FigureCanvasBase` subclass\n        The parent figure canvas for the widget.\n    *active* : bool\n        If False, the widget does not respond to events.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 119, 4, False)
        # Assigning a type to the variable 'self' (line 120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 120, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesWidget.__init__', ['ax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 120):
        
        # Assigning a Name to a Attribute (line 120):
        # Getting the type of 'ax' (line 120)
        ax_162566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 18), 'ax')
        # Getting the type of 'self' (line 120)
        self_162567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 8), 'self')
        # Setting the type of the member 'ax' of a type (line 120)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 120, 8), self_162567, 'ax', ax_162566)
        
        # Assigning a Attribute to a Attribute (line 121):
        
        # Assigning a Attribute to a Attribute (line 121):
        # Getting the type of 'ax' (line 121)
        ax_162568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 22), 'ax')
        # Obtaining the member 'figure' of a type (line 121)
        figure_162569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 121, 22), ax_162568, 'figure')
        # Obtaining the member 'canvas' of a type (line 121)
        canvas_162570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 121, 22), figure_162569, 'canvas')
        # Getting the type of 'self' (line 121)
        self_162571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 8), 'self')
        # Setting the type of the member 'canvas' of a type (line 121)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 121, 8), self_162571, 'canvas', canvas_162570)
        
        # Assigning a List to a Attribute (line 122):
        
        # Assigning a List to a Attribute (line 122):
        
        # Obtaining an instance of the builtin type 'list' (line 122)
        list_162572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 122, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 122)
        
        # Getting the type of 'self' (line 122)
        self_162573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 8), 'self')
        # Setting the type of the member 'cids' of a type (line 122)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 122, 8), self_162573, 'cids', list_162572)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def connect_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'connect_event'
        module_type_store = module_type_store.open_function_context('connect_event', 124, 4, False)
        # Assigning a type to the variable 'self' (line 125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 125, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxesWidget.connect_event.__dict__.__setitem__('stypy_localization', localization)
        AxesWidget.connect_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxesWidget.connect_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxesWidget.connect_event.__dict__.__setitem__('stypy_function_name', 'AxesWidget.connect_event')
        AxesWidget.connect_event.__dict__.__setitem__('stypy_param_names_list', ['event', 'callback'])
        AxesWidget.connect_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxesWidget.connect_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxesWidget.connect_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxesWidget.connect_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxesWidget.connect_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxesWidget.connect_event.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesWidget.connect_event', ['event', 'callback'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'connect_event', localization, ['event', 'callback'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'connect_event(...)' code ##################

        unicode_162574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, (-1)), 'unicode', u'Connect callback with an event.\n\n        This should be used in lieu of `figure.canvas.mpl_connect` since this\n        function stores callback ids for later clean up.\n        ')
        
        # Assigning a Call to a Name (line 130):
        
        # Assigning a Call to a Name (line 130):
        
        # Call to mpl_connect(...): (line 130)
        # Processing the call arguments (line 130)
        # Getting the type of 'event' (line 130)
        event_162578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 38), 'event', False)
        # Getting the type of 'callback' (line 130)
        callback_162579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 45), 'callback', False)
        # Processing the call keyword arguments (line 130)
        kwargs_162580 = {}
        # Getting the type of 'self' (line 130)
        self_162575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 14), 'self', False)
        # Obtaining the member 'canvas' of a type (line 130)
        canvas_162576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 130, 14), self_162575, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 130)
        mpl_connect_162577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 130, 14), canvas_162576, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 130)
        mpl_connect_call_result_162581 = invoke(stypy.reporting.localization.Localization(__file__, 130, 14), mpl_connect_162577, *[event_162578, callback_162579], **kwargs_162580)
        
        # Assigning a type to the variable 'cid' (line 130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 8), 'cid', mpl_connect_call_result_162581)
        
        # Call to append(...): (line 131)
        # Processing the call arguments (line 131)
        # Getting the type of 'cid' (line 131)
        cid_162585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 25), 'cid', False)
        # Processing the call keyword arguments (line 131)
        kwargs_162586 = {}
        # Getting the type of 'self' (line 131)
        self_162582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 8), 'self', False)
        # Obtaining the member 'cids' of a type (line 131)
        cids_162583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 131, 8), self_162582, 'cids')
        # Obtaining the member 'append' of a type (line 131)
        append_162584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 131, 8), cids_162583, 'append')
        # Calling append(args, kwargs) (line 131)
        append_call_result_162587 = invoke(stypy.reporting.localization.Localization(__file__, 131, 8), append_162584, *[cid_162585], **kwargs_162586)
        
        
        # ################# End of 'connect_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'connect_event' in the type store
        # Getting the type of 'stypy_return_type' (line 124)
        stypy_return_type_162588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_162588)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'connect_event'
        return stypy_return_type_162588


    @norecursion
    def disconnect_events(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'disconnect_events'
        module_type_store = module_type_store.open_function_context('disconnect_events', 133, 4, False)
        # Assigning a type to the variable 'self' (line 134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxesWidget.disconnect_events.__dict__.__setitem__('stypy_localization', localization)
        AxesWidget.disconnect_events.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxesWidget.disconnect_events.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxesWidget.disconnect_events.__dict__.__setitem__('stypy_function_name', 'AxesWidget.disconnect_events')
        AxesWidget.disconnect_events.__dict__.__setitem__('stypy_param_names_list', [])
        AxesWidget.disconnect_events.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxesWidget.disconnect_events.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxesWidget.disconnect_events.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxesWidget.disconnect_events.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxesWidget.disconnect_events.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxesWidget.disconnect_events.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesWidget.disconnect_events', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'disconnect_events', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'disconnect_events(...)' code ##################

        unicode_162589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 134, 8), 'unicode', u'Disconnect all events created by this widget.')
        
        # Getting the type of 'self' (line 135)
        self_162590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 17), 'self')
        # Obtaining the member 'cids' of a type (line 135)
        cids_162591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 135, 17), self_162590, 'cids')
        # Testing the type of a for loop iterable (line 135)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 135, 8), cids_162591)
        # Getting the type of the for loop variable (line 135)
        for_loop_var_162592 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 135, 8), cids_162591)
        # Assigning a type to the variable 'c' (line 135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 135, 8), 'c', for_loop_var_162592)
        # SSA begins for a for statement (line 135)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to mpl_disconnect(...): (line 136)
        # Processing the call arguments (line 136)
        # Getting the type of 'c' (line 136)
        c_162596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 39), 'c', False)
        # Processing the call keyword arguments (line 136)
        kwargs_162597 = {}
        # Getting the type of 'self' (line 136)
        self_162593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 136)
        canvas_162594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 136, 12), self_162593, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 136)
        mpl_disconnect_162595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 136, 12), canvas_162594, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 136)
        mpl_disconnect_call_result_162598 = invoke(stypy.reporting.localization.Localization(__file__, 136, 12), mpl_disconnect_162595, *[c_162596], **kwargs_162597)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'disconnect_events(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'disconnect_events' in the type store
        # Getting the type of 'stypy_return_type' (line 133)
        stypy_return_type_162599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_162599)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'disconnect_events'
        return stypy_return_type_162599


# Assigning a type to the variable 'AxesWidget' (line 97)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 97, 0), 'AxesWidget', AxesWidget)
# Declaration of the 'Button' class
# Getting the type of 'AxesWidget' (line 139)
AxesWidget_162600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 13), 'AxesWidget')

class Button(AxesWidget_162600, ):
    unicode_162601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, (-1)), 'unicode', u'\n    A GUI neutral button.\n\n    For the button to remain responsive you must keep a reference to it.\n\n    The following attributes are accessible\n\n      *ax*\n        The :class:`matplotlib.axes.Axes` the button renders into.\n\n      *label*\n        A :class:`matplotlib.text.Text` instance.\n\n      *color*\n        The color of the button when not hovering.\n\n      *hovercolor*\n        The color of the button when hovering.\n\n    Call :meth:`on_clicked` to connect to the button\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 162)
        None_162602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 40), 'None')
        unicode_162603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 23), 'unicode', u'0.85')
        unicode_162604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 42), 'unicode', u'0.95')
        defaults = [None_162602, unicode_162603, unicode_162604]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 162, 4, False)
        # Assigning a type to the variable 'self' (line 163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 163, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Button.__init__', ['ax', 'label', 'image', 'color', 'hovercolor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'label', 'image', 'color', 'hovercolor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_162605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, (-1)), 'unicode', u'\n        Parameters\n        ----------\n        ax : matplotlib.axes.Axes\n            The :class:`matplotlib.axes.Axes` instance the button\n            will be placed into.\n\n        label : str\n            The button text. Accepts string.\n\n        image : array, mpl image, Pillow Image\n            The image to place in the button, if not *None*.\n            Can be any legal arg to imshow (numpy array,\n            matplotlib Image instance, or Pillow Image).\n\n        color : color\n            The color of the button when not activated\n\n        hovercolor : color\n            The color of the button when the mouse is over it\n        ')
        
        # Call to __init__(...): (line 185)
        # Processing the call arguments (line 185)
        # Getting the type of 'self' (line 185)
        self_162608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 28), 'self', False)
        # Getting the type of 'ax' (line 185)
        ax_162609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 34), 'ax', False)
        # Processing the call keyword arguments (line 185)
        kwargs_162610 = {}
        # Getting the type of 'AxesWidget' (line 185)
        AxesWidget_162606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 8), 'AxesWidget', False)
        # Obtaining the member '__init__' of a type (line 185)
        init___162607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 8), AxesWidget_162606, '__init__')
        # Calling __init__(args, kwargs) (line 185)
        init___call_result_162611 = invoke(stypy.reporting.localization.Localization(__file__, 185, 8), init___162607, *[self_162608, ax_162609], **kwargs_162610)
        
        
        # Type idiom detected: calculating its left and rigth part (line 187)
        # Getting the type of 'image' (line 187)
        image_162612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 8), 'image')
        # Getting the type of 'None' (line 187)
        None_162613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 24), 'None')
        
        (may_be_162614, more_types_in_union_162615) = may_not_be_none(image_162612, None_162613)

        if may_be_162614:

            if more_types_in_union_162615:
                # Runtime conditional SSA (line 187)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to imshow(...): (line 188)
            # Processing the call arguments (line 188)
            # Getting the type of 'image' (line 188)
            image_162618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 22), 'image', False)
            # Processing the call keyword arguments (line 188)
            kwargs_162619 = {}
            # Getting the type of 'ax' (line 188)
            ax_162616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 12), 'ax', False)
            # Obtaining the member 'imshow' of a type (line 188)
            imshow_162617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 12), ax_162616, 'imshow')
            # Calling imshow(args, kwargs) (line 188)
            imshow_call_result_162620 = invoke(stypy.reporting.localization.Localization(__file__, 188, 12), imshow_162617, *[image_162618], **kwargs_162619)
            

            if more_types_in_union_162615:
                # SSA join for if statement (line 187)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 189):
        
        # Assigning a Call to a Attribute (line 189):
        
        # Call to text(...): (line 189)
        # Processing the call arguments (line 189)
        float_162623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 29), 'float')
        float_162624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 34), 'float')
        # Getting the type of 'label' (line 189)
        label_162625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 39), 'label', False)
        # Processing the call keyword arguments (line 189)
        unicode_162626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 47), 'unicode', u'center')
        keyword_162627 = unicode_162626
        unicode_162628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 49), 'unicode', u'center')
        keyword_162629 = unicode_162628
        # Getting the type of 'ax' (line 192)
        ax_162630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 39), 'ax', False)
        # Obtaining the member 'transAxes' of a type (line 192)
        transAxes_162631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 39), ax_162630, 'transAxes')
        keyword_162632 = transAxes_162631
        kwargs_162633 = {'horizontalalignment': keyword_162629, 'verticalalignment': keyword_162627, 'transform': keyword_162632}
        # Getting the type of 'ax' (line 189)
        ax_162621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 21), 'ax', False)
        # Obtaining the member 'text' of a type (line 189)
        text_162622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 189, 21), ax_162621, 'text')
        # Calling text(args, kwargs) (line 189)
        text_call_result_162634 = invoke(stypy.reporting.localization.Localization(__file__, 189, 21), text_162622, *[float_162623, float_162624, label_162625], **kwargs_162633)
        
        # Getting the type of 'self' (line 189)
        self_162635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 8), 'self')
        # Setting the type of the member 'label' of a type (line 189)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 189, 8), self_162635, 'label', text_call_result_162634)
        
        # Assigning a Num to a Attribute (line 194):
        
        # Assigning a Num to a Attribute (line 194):
        int_162636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 19), 'int')
        # Getting the type of 'self' (line 194)
        self_162637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 8), 'self')
        # Setting the type of the member 'cnt' of a type (line 194)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 8), self_162637, 'cnt', int_162636)
        
        # Assigning a Dict to a Attribute (line 195):
        
        # Assigning a Dict to a Attribute (line 195):
        
        # Obtaining an instance of the builtin type 'dict' (line 195)
        dict_162638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 25), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 195)
        
        # Getting the type of 'self' (line 195)
        self_162639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 8), 'self')
        # Setting the type of the member 'observers' of a type (line 195)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 8), self_162639, 'observers', dict_162638)
        
        # Call to connect_event(...): (line 197)
        # Processing the call arguments (line 197)
        unicode_162642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 197, 27), 'unicode', u'button_press_event')
        # Getting the type of 'self' (line 197)
        self_162643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 49), 'self', False)
        # Obtaining the member '_click' of a type (line 197)
        _click_162644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 197, 49), self_162643, '_click')
        # Processing the call keyword arguments (line 197)
        kwargs_162645 = {}
        # Getting the type of 'self' (line 197)
        self_162640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 197)
        connect_event_162641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 197, 8), self_162640, 'connect_event')
        # Calling connect_event(args, kwargs) (line 197)
        connect_event_call_result_162646 = invoke(stypy.reporting.localization.Localization(__file__, 197, 8), connect_event_162641, *[unicode_162642, _click_162644], **kwargs_162645)
        
        
        # Call to connect_event(...): (line 198)
        # Processing the call arguments (line 198)
        unicode_162649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, 27), 'unicode', u'button_release_event')
        # Getting the type of 'self' (line 198)
        self_162650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 51), 'self', False)
        # Obtaining the member '_release' of a type (line 198)
        _release_162651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 51), self_162650, '_release')
        # Processing the call keyword arguments (line 198)
        kwargs_162652 = {}
        # Getting the type of 'self' (line 198)
        self_162647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 198)
        connect_event_162648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 8), self_162647, 'connect_event')
        # Calling connect_event(args, kwargs) (line 198)
        connect_event_call_result_162653 = invoke(stypy.reporting.localization.Localization(__file__, 198, 8), connect_event_162648, *[unicode_162649, _release_162651], **kwargs_162652)
        
        
        # Call to connect_event(...): (line 199)
        # Processing the call arguments (line 199)
        unicode_162656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 199, 27), 'unicode', u'motion_notify_event')
        # Getting the type of 'self' (line 199)
        self_162657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 50), 'self', False)
        # Obtaining the member '_motion' of a type (line 199)
        _motion_162658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 199, 50), self_162657, '_motion')
        # Processing the call keyword arguments (line 199)
        kwargs_162659 = {}
        # Getting the type of 'self' (line 199)
        self_162654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 199)
        connect_event_162655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 199, 8), self_162654, 'connect_event')
        # Calling connect_event(args, kwargs) (line 199)
        connect_event_call_result_162660 = invoke(stypy.reporting.localization.Localization(__file__, 199, 8), connect_event_162655, *[unicode_162656, _motion_162658], **kwargs_162659)
        
        
        # Call to set_navigate(...): (line 200)
        # Processing the call arguments (line 200)
        # Getting the type of 'False' (line 200)
        False_162663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 24), 'False', False)
        # Processing the call keyword arguments (line 200)
        kwargs_162664 = {}
        # Getting the type of 'ax' (line 200)
        ax_162661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 8), 'ax', False)
        # Obtaining the member 'set_navigate' of a type (line 200)
        set_navigate_162662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 8), ax_162661, 'set_navigate')
        # Calling set_navigate(args, kwargs) (line 200)
        set_navigate_call_result_162665 = invoke(stypy.reporting.localization.Localization(__file__, 200, 8), set_navigate_162662, *[False_162663], **kwargs_162664)
        
        
        # Call to set_facecolor(...): (line 201)
        # Processing the call arguments (line 201)
        # Getting the type of 'color' (line 201)
        color_162668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 25), 'color', False)
        # Processing the call keyword arguments (line 201)
        kwargs_162669 = {}
        # Getting the type of 'ax' (line 201)
        ax_162666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 8), 'ax', False)
        # Obtaining the member 'set_facecolor' of a type (line 201)
        set_facecolor_162667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 8), ax_162666, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 201)
        set_facecolor_call_result_162670 = invoke(stypy.reporting.localization.Localization(__file__, 201, 8), set_facecolor_162667, *[color_162668], **kwargs_162669)
        
        
        # Call to set_xticks(...): (line 202)
        # Processing the call arguments (line 202)
        
        # Obtaining an instance of the builtin type 'list' (line 202)
        list_162673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 202, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 202)
        
        # Processing the call keyword arguments (line 202)
        kwargs_162674 = {}
        # Getting the type of 'ax' (line 202)
        ax_162671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 8), 'ax', False)
        # Obtaining the member 'set_xticks' of a type (line 202)
        set_xticks_162672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 8), ax_162671, 'set_xticks')
        # Calling set_xticks(args, kwargs) (line 202)
        set_xticks_call_result_162675 = invoke(stypy.reporting.localization.Localization(__file__, 202, 8), set_xticks_162672, *[list_162673], **kwargs_162674)
        
        
        # Call to set_yticks(...): (line 203)
        # Processing the call arguments (line 203)
        
        # Obtaining an instance of the builtin type 'list' (line 203)
        list_162678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 203)
        
        # Processing the call keyword arguments (line 203)
        kwargs_162679 = {}
        # Getting the type of 'ax' (line 203)
        ax_162676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 8), 'ax', False)
        # Obtaining the member 'set_yticks' of a type (line 203)
        set_yticks_162677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 203, 8), ax_162676, 'set_yticks')
        # Calling set_yticks(args, kwargs) (line 203)
        set_yticks_call_result_162680 = invoke(stypy.reporting.localization.Localization(__file__, 203, 8), set_yticks_162677, *[list_162678], **kwargs_162679)
        
        
        # Assigning a Name to a Attribute (line 204):
        
        # Assigning a Name to a Attribute (line 204):
        # Getting the type of 'color' (line 204)
        color_162681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 21), 'color')
        # Getting the type of 'self' (line 204)
        self_162682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 8), 'self')
        # Setting the type of the member 'color' of a type (line 204)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 8), self_162682, 'color', color_162681)
        
        # Assigning a Name to a Attribute (line 205):
        
        # Assigning a Name to a Attribute (line 205):
        # Getting the type of 'hovercolor' (line 205)
        hovercolor_162683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 26), 'hovercolor')
        # Getting the type of 'self' (line 205)
        self_162684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 8), 'self')
        # Setting the type of the member 'hovercolor' of a type (line 205)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 205, 8), self_162684, 'hovercolor', hovercolor_162683)
        
        # Assigning a Name to a Attribute (line 207):
        
        # Assigning a Name to a Attribute (line 207):
        # Getting the type of 'color' (line 207)
        color_162685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 26), 'color')
        # Getting the type of 'self' (line 207)
        self_162686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 8), 'self')
        # Setting the type of the member '_lastcolor' of a type (line 207)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 8), self_162686, '_lastcolor', color_162685)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _click(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_click'
        module_type_store = module_type_store.open_function_context('_click', 209, 4, False)
        # Assigning a type to the variable 'self' (line 210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Button._click.__dict__.__setitem__('stypy_localization', localization)
        Button._click.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Button._click.__dict__.__setitem__('stypy_type_store', module_type_store)
        Button._click.__dict__.__setitem__('stypy_function_name', 'Button._click')
        Button._click.__dict__.__setitem__('stypy_param_names_list', ['event'])
        Button._click.__dict__.__setitem__('stypy_varargs_param_name', None)
        Button._click.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Button._click.__dict__.__setitem__('stypy_call_defaults', defaults)
        Button._click.__dict__.__setitem__('stypy_call_varargs', varargs)
        Button._click.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Button._click.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Button._click', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_click', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_click(...)' code ##################

        
        
        # Call to ignore(...): (line 210)
        # Processing the call arguments (line 210)
        # Getting the type of 'event' (line 210)
        event_162689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 23), 'event', False)
        # Processing the call keyword arguments (line 210)
        kwargs_162690 = {}
        # Getting the type of 'self' (line 210)
        self_162687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 11), 'self', False)
        # Obtaining the member 'ignore' of a type (line 210)
        ignore_162688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 11), self_162687, 'ignore')
        # Calling ignore(args, kwargs) (line 210)
        ignore_call_result_162691 = invoke(stypy.reporting.localization.Localization(__file__, 210, 11), ignore_162688, *[event_162689], **kwargs_162690)
        
        # Testing the type of an if condition (line 210)
        if_condition_162692 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 210, 8), ignore_call_result_162691)
        # Assigning a type to the variable 'if_condition_162692' (line 210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 8), 'if_condition_162692', if_condition_162692)
        # SSA begins for if statement (line 210)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 210)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'event' (line 212)
        event_162693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 11), 'event')
        # Obtaining the member 'inaxes' of a type (line 212)
        inaxes_162694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 212, 11), event_162693, 'inaxes')
        # Getting the type of 'self' (line 212)
        self_162695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 27), 'self')
        # Obtaining the member 'ax' of a type (line 212)
        ax_162696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 212, 27), self_162695, 'ax')
        # Applying the binary operator '!=' (line 212)
        result_ne_162697 = python_operator(stypy.reporting.localization.Localization(__file__, 212, 11), '!=', inaxes_162694, ax_162696)
        
        # Testing the type of an if condition (line 212)
        if_condition_162698 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 212, 8), result_ne_162697)
        # Assigning a type to the variable 'if_condition_162698' (line 212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 212, 8), 'if_condition_162698', if_condition_162698)
        # SSA begins for if statement (line 212)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 212)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 214)
        self_162699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 15), 'self')
        # Obtaining the member 'eventson' of a type (line 214)
        eventson_162700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 15), self_162699, 'eventson')
        # Applying the 'not' unary operator (line 214)
        result_not__162701 = python_operator(stypy.reporting.localization.Localization(__file__, 214, 11), 'not', eventson_162700)
        
        # Testing the type of an if condition (line 214)
        if_condition_162702 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 214, 8), result_not__162701)
        # Assigning a type to the variable 'if_condition_162702' (line 214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 8), 'if_condition_162702', if_condition_162702)
        # SSA begins for if statement (line 214)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 214)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'event' (line 216)
        event_162703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 11), 'event')
        # Obtaining the member 'canvas' of a type (line 216)
        canvas_162704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 11), event_162703, 'canvas')
        # Obtaining the member 'mouse_grabber' of a type (line 216)
        mouse_grabber_162705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 11), canvas_162704, 'mouse_grabber')
        # Getting the type of 'self' (line 216)
        self_162706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 41), 'self')
        # Obtaining the member 'ax' of a type (line 216)
        ax_162707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 41), self_162706, 'ax')
        # Applying the binary operator '!=' (line 216)
        result_ne_162708 = python_operator(stypy.reporting.localization.Localization(__file__, 216, 11), '!=', mouse_grabber_162705, ax_162707)
        
        # Testing the type of an if condition (line 216)
        if_condition_162709 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 216, 8), result_ne_162708)
        # Assigning a type to the variable 'if_condition_162709' (line 216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 8), 'if_condition_162709', if_condition_162709)
        # SSA begins for if statement (line 216)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to grab_mouse(...): (line 217)
        # Processing the call arguments (line 217)
        # Getting the type of 'self' (line 217)
        self_162713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 36), 'self', False)
        # Obtaining the member 'ax' of a type (line 217)
        ax_162714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 36), self_162713, 'ax')
        # Processing the call keyword arguments (line 217)
        kwargs_162715 = {}
        # Getting the type of 'event' (line 217)
        event_162710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 12), 'event', False)
        # Obtaining the member 'canvas' of a type (line 217)
        canvas_162711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 12), event_162710, 'canvas')
        # Obtaining the member 'grab_mouse' of a type (line 217)
        grab_mouse_162712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 12), canvas_162711, 'grab_mouse')
        # Calling grab_mouse(args, kwargs) (line 217)
        grab_mouse_call_result_162716 = invoke(stypy.reporting.localization.Localization(__file__, 217, 12), grab_mouse_162712, *[ax_162714], **kwargs_162715)
        
        # SSA join for if statement (line 216)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_click(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_click' in the type store
        # Getting the type of 'stypy_return_type' (line 209)
        stypy_return_type_162717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_162717)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_click'
        return stypy_return_type_162717


    @norecursion
    def _release(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_release'
        module_type_store = module_type_store.open_function_context('_release', 219, 4, False)
        # Assigning a type to the variable 'self' (line 220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Button._release.__dict__.__setitem__('stypy_localization', localization)
        Button._release.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Button._release.__dict__.__setitem__('stypy_type_store', module_type_store)
        Button._release.__dict__.__setitem__('stypy_function_name', 'Button._release')
        Button._release.__dict__.__setitem__('stypy_param_names_list', ['event'])
        Button._release.__dict__.__setitem__('stypy_varargs_param_name', None)
        Button._release.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Button._release.__dict__.__setitem__('stypy_call_defaults', defaults)
        Button._release.__dict__.__setitem__('stypy_call_varargs', varargs)
        Button._release.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Button._release.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Button._release', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_release', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_release(...)' code ##################

        
        
        # Call to ignore(...): (line 220)
        # Processing the call arguments (line 220)
        # Getting the type of 'event' (line 220)
        event_162720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 23), 'event', False)
        # Processing the call keyword arguments (line 220)
        kwargs_162721 = {}
        # Getting the type of 'self' (line 220)
        self_162718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 11), 'self', False)
        # Obtaining the member 'ignore' of a type (line 220)
        ignore_162719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 11), self_162718, 'ignore')
        # Calling ignore(args, kwargs) (line 220)
        ignore_call_result_162722 = invoke(stypy.reporting.localization.Localization(__file__, 220, 11), ignore_162719, *[event_162720], **kwargs_162721)
        
        # Testing the type of an if condition (line 220)
        if_condition_162723 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 220, 8), ignore_call_result_162722)
        # Assigning a type to the variable 'if_condition_162723' (line 220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 8), 'if_condition_162723', if_condition_162723)
        # SSA begins for if statement (line 220)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 220)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'event' (line 222)
        event_162724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 11), 'event')
        # Obtaining the member 'canvas' of a type (line 222)
        canvas_162725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 11), event_162724, 'canvas')
        # Obtaining the member 'mouse_grabber' of a type (line 222)
        mouse_grabber_162726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 11), canvas_162725, 'mouse_grabber')
        # Getting the type of 'self' (line 222)
        self_162727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 41), 'self')
        # Obtaining the member 'ax' of a type (line 222)
        ax_162728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 41), self_162727, 'ax')
        # Applying the binary operator '!=' (line 222)
        result_ne_162729 = python_operator(stypy.reporting.localization.Localization(__file__, 222, 11), '!=', mouse_grabber_162726, ax_162728)
        
        # Testing the type of an if condition (line 222)
        if_condition_162730 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 222, 8), result_ne_162729)
        # Assigning a type to the variable 'if_condition_162730' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 8), 'if_condition_162730', if_condition_162730)
        # SSA begins for if statement (line 222)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 223, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 222)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to release_mouse(...): (line 224)
        # Processing the call arguments (line 224)
        # Getting the type of 'self' (line 224)
        self_162734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 35), 'self', False)
        # Obtaining the member 'ax' of a type (line 224)
        ax_162735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 35), self_162734, 'ax')
        # Processing the call keyword arguments (line 224)
        kwargs_162736 = {}
        # Getting the type of 'event' (line 224)
        event_162731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 8), 'event', False)
        # Obtaining the member 'canvas' of a type (line 224)
        canvas_162732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 8), event_162731, 'canvas')
        # Obtaining the member 'release_mouse' of a type (line 224)
        release_mouse_162733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 8), canvas_162732, 'release_mouse')
        # Calling release_mouse(args, kwargs) (line 224)
        release_mouse_call_result_162737 = invoke(stypy.reporting.localization.Localization(__file__, 224, 8), release_mouse_162733, *[ax_162735], **kwargs_162736)
        
        
        
        # Getting the type of 'self' (line 225)
        self_162738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 15), 'self')
        # Obtaining the member 'eventson' of a type (line 225)
        eventson_162739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 15), self_162738, 'eventson')
        # Applying the 'not' unary operator (line 225)
        result_not__162740 = python_operator(stypy.reporting.localization.Localization(__file__, 225, 11), 'not', eventson_162739)
        
        # Testing the type of an if condition (line 225)
        if_condition_162741 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 225, 8), result_not__162740)
        # Assigning a type to the variable 'if_condition_162741' (line 225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 8), 'if_condition_162741', if_condition_162741)
        # SSA begins for if statement (line 225)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 225)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'event' (line 227)
        event_162742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 11), 'event')
        # Obtaining the member 'inaxes' of a type (line 227)
        inaxes_162743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 11), event_162742, 'inaxes')
        # Getting the type of 'self' (line 227)
        self_162744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 27), 'self')
        # Obtaining the member 'ax' of a type (line 227)
        ax_162745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 27), self_162744, 'ax')
        # Applying the binary operator '!=' (line 227)
        result_ne_162746 = python_operator(stypy.reporting.localization.Localization(__file__, 227, 11), '!=', inaxes_162743, ax_162745)
        
        # Testing the type of an if condition (line 227)
        if_condition_162747 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 227, 8), result_ne_162746)
        # Assigning a type to the variable 'if_condition_162747' (line 227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 227, 8), 'if_condition_162747', if_condition_162747)
        # SSA begins for if statement (line 227)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 227)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to iteritems(...): (line 229)
        # Processing the call arguments (line 229)
        # Getting the type of 'self' (line 229)
        self_162750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 39), 'self', False)
        # Obtaining the member 'observers' of a type (line 229)
        observers_162751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 39), self_162750, 'observers')
        # Processing the call keyword arguments (line 229)
        kwargs_162752 = {}
        # Getting the type of 'six' (line 229)
        six_162748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 25), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 229)
        iteritems_162749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 25), six_162748, 'iteritems')
        # Calling iteritems(args, kwargs) (line 229)
        iteritems_call_result_162753 = invoke(stypy.reporting.localization.Localization(__file__, 229, 25), iteritems_162749, *[observers_162751], **kwargs_162752)
        
        # Testing the type of a for loop iterable (line 229)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 229, 8), iteritems_call_result_162753)
        # Getting the type of the for loop variable (line 229)
        for_loop_var_162754 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 229, 8), iteritems_call_result_162753)
        # Assigning a type to the variable 'cid' (line 229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 229, 8), 'cid', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 229, 8), for_loop_var_162754))
        # Assigning a type to the variable 'func' (line 229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 229, 8), 'func', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 229, 8), for_loop_var_162754))
        # SSA begins for a for statement (line 229)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to func(...): (line 230)
        # Processing the call arguments (line 230)
        # Getting the type of 'event' (line 230)
        event_162756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 17), 'event', False)
        # Processing the call keyword arguments (line 230)
        kwargs_162757 = {}
        # Getting the type of 'func' (line 230)
        func_162755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 12), 'func', False)
        # Calling func(args, kwargs) (line 230)
        func_call_result_162758 = invoke(stypy.reporting.localization.Localization(__file__, 230, 12), func_162755, *[event_162756], **kwargs_162757)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_release(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_release' in the type store
        # Getting the type of 'stypy_return_type' (line 219)
        stypy_return_type_162759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_162759)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_release'
        return stypy_return_type_162759


    @norecursion
    def _motion(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_motion'
        module_type_store = module_type_store.open_function_context('_motion', 232, 4, False)
        # Assigning a type to the variable 'self' (line 233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 233, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Button._motion.__dict__.__setitem__('stypy_localization', localization)
        Button._motion.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Button._motion.__dict__.__setitem__('stypy_type_store', module_type_store)
        Button._motion.__dict__.__setitem__('stypy_function_name', 'Button._motion')
        Button._motion.__dict__.__setitem__('stypy_param_names_list', ['event'])
        Button._motion.__dict__.__setitem__('stypy_varargs_param_name', None)
        Button._motion.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Button._motion.__dict__.__setitem__('stypy_call_defaults', defaults)
        Button._motion.__dict__.__setitem__('stypy_call_varargs', varargs)
        Button._motion.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Button._motion.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Button._motion', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_motion', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_motion(...)' code ##################

        
        
        # Call to ignore(...): (line 233)
        # Processing the call arguments (line 233)
        # Getting the type of 'event' (line 233)
        event_162762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 23), 'event', False)
        # Processing the call keyword arguments (line 233)
        kwargs_162763 = {}
        # Getting the type of 'self' (line 233)
        self_162760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 11), 'self', False)
        # Obtaining the member 'ignore' of a type (line 233)
        ignore_162761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 233, 11), self_162760, 'ignore')
        # Calling ignore(args, kwargs) (line 233)
        ignore_call_result_162764 = invoke(stypy.reporting.localization.Localization(__file__, 233, 11), ignore_162761, *[event_162762], **kwargs_162763)
        
        # Testing the type of an if condition (line 233)
        if_condition_162765 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 233, 8), ignore_call_result_162764)
        # Assigning a type to the variable 'if_condition_162765' (line 233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 233, 8), 'if_condition_162765', if_condition_162765)
        # SSA begins for if statement (line 233)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 233)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'event' (line 235)
        event_162766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 11), 'event')
        # Obtaining the member 'inaxes' of a type (line 235)
        inaxes_162767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 235, 11), event_162766, 'inaxes')
        # Getting the type of 'self' (line 235)
        self_162768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 27), 'self')
        # Obtaining the member 'ax' of a type (line 235)
        ax_162769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 235, 27), self_162768, 'ax')
        # Applying the binary operator '==' (line 235)
        result_eq_162770 = python_operator(stypy.reporting.localization.Localization(__file__, 235, 11), '==', inaxes_162767, ax_162769)
        
        # Testing the type of an if condition (line 235)
        if_condition_162771 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 235, 8), result_eq_162770)
        # Assigning a type to the variable 'if_condition_162771' (line 235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 235, 8), 'if_condition_162771', if_condition_162771)
        # SSA begins for if statement (line 235)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 236):
        
        # Assigning a Attribute to a Name (line 236):
        # Getting the type of 'self' (line 236)
        self_162772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 16), 'self')
        # Obtaining the member 'hovercolor' of a type (line 236)
        hovercolor_162773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 16), self_162772, 'hovercolor')
        # Assigning a type to the variable 'c' (line 236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 236, 12), 'c', hovercolor_162773)
        # SSA branch for the else part of an if statement (line 235)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 238):
        
        # Assigning a Attribute to a Name (line 238):
        # Getting the type of 'self' (line 238)
        self_162774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 16), 'self')
        # Obtaining the member 'color' of a type (line 238)
        color_162775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 238, 16), self_162774, 'color')
        # Assigning a type to the variable 'c' (line 238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 12), 'c', color_162775)
        # SSA join for if statement (line 235)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'c' (line 239)
        c_162776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 11), 'c')
        # Getting the type of 'self' (line 239)
        self_162777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 16), 'self')
        # Obtaining the member '_lastcolor' of a type (line 239)
        _lastcolor_162778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 239, 16), self_162777, '_lastcolor')
        # Applying the binary operator '!=' (line 239)
        result_ne_162779 = python_operator(stypy.reporting.localization.Localization(__file__, 239, 11), '!=', c_162776, _lastcolor_162778)
        
        # Testing the type of an if condition (line 239)
        if_condition_162780 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 239, 8), result_ne_162779)
        # Assigning a type to the variable 'if_condition_162780' (line 239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 239, 8), 'if_condition_162780', if_condition_162780)
        # SSA begins for if statement (line 239)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_facecolor(...): (line 240)
        # Processing the call arguments (line 240)
        # Getting the type of 'c' (line 240)
        c_162784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 34), 'c', False)
        # Processing the call keyword arguments (line 240)
        kwargs_162785 = {}
        # Getting the type of 'self' (line 240)
        self_162781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 240)
        ax_162782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 240, 12), self_162781, 'ax')
        # Obtaining the member 'set_facecolor' of a type (line 240)
        set_facecolor_162783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 240, 12), ax_162782, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 240)
        set_facecolor_call_result_162786 = invoke(stypy.reporting.localization.Localization(__file__, 240, 12), set_facecolor_162783, *[c_162784], **kwargs_162785)
        
        
        # Assigning a Name to a Attribute (line 241):
        
        # Assigning a Name to a Attribute (line 241):
        # Getting the type of 'c' (line 241)
        c_162787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 30), 'c')
        # Getting the type of 'self' (line 241)
        self_162788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 12), 'self')
        # Setting the type of the member '_lastcolor' of a type (line 241)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 12), self_162788, '_lastcolor', c_162787)
        
        # Getting the type of 'self' (line 242)
        self_162789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 15), 'self')
        # Obtaining the member 'drawon' of a type (line 242)
        drawon_162790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 242, 15), self_162789, 'drawon')
        # Testing the type of an if condition (line 242)
        if_condition_162791 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 242, 12), drawon_162790)
        # Assigning a type to the variable 'if_condition_162791' (line 242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 12), 'if_condition_162791', if_condition_162791)
        # SSA begins for if statement (line 242)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 243)
        # Processing the call keyword arguments (line 243)
        kwargs_162797 = {}
        # Getting the type of 'self' (line 243)
        self_162792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 16), 'self', False)
        # Obtaining the member 'ax' of a type (line 243)
        ax_162793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 16), self_162792, 'ax')
        # Obtaining the member 'figure' of a type (line 243)
        figure_162794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 16), ax_162793, 'figure')
        # Obtaining the member 'canvas' of a type (line 243)
        canvas_162795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 16), figure_162794, 'canvas')
        # Obtaining the member 'draw' of a type (line 243)
        draw_162796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 16), canvas_162795, 'draw')
        # Calling draw(args, kwargs) (line 243)
        draw_call_result_162798 = invoke(stypy.reporting.localization.Localization(__file__, 243, 16), draw_162796, *[], **kwargs_162797)
        
        # SSA join for if statement (line 242)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 239)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_motion(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_motion' in the type store
        # Getting the type of 'stypy_return_type' (line 232)
        stypy_return_type_162799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_162799)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_motion'
        return stypy_return_type_162799


    @norecursion
    def on_clicked(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'on_clicked'
        module_type_store = module_type_store.open_function_context('on_clicked', 245, 4, False)
        # Assigning a type to the variable 'self' (line 246)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 246, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Button.on_clicked.__dict__.__setitem__('stypy_localization', localization)
        Button.on_clicked.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Button.on_clicked.__dict__.__setitem__('stypy_type_store', module_type_store)
        Button.on_clicked.__dict__.__setitem__('stypy_function_name', 'Button.on_clicked')
        Button.on_clicked.__dict__.__setitem__('stypy_param_names_list', ['func'])
        Button.on_clicked.__dict__.__setitem__('stypy_varargs_param_name', None)
        Button.on_clicked.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Button.on_clicked.__dict__.__setitem__('stypy_call_defaults', defaults)
        Button.on_clicked.__dict__.__setitem__('stypy_call_varargs', varargs)
        Button.on_clicked.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Button.on_clicked.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Button.on_clicked', ['func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'on_clicked', localization, ['func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'on_clicked(...)' code ##################

        unicode_162800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, (-1)), 'unicode', u'\n        When the button is clicked, call this *func* with event.\n\n        A connection id is returned. It can be used to disconnect\n        the button from its callback.\n        ')
        
        # Assigning a Attribute to a Name (line 252):
        
        # Assigning a Attribute to a Name (line 252):
        # Getting the type of 'self' (line 252)
        self_162801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 14), 'self')
        # Obtaining the member 'cnt' of a type (line 252)
        cnt_162802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 14), self_162801, 'cnt')
        # Assigning a type to the variable 'cid' (line 252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 8), 'cid', cnt_162802)
        
        # Assigning a Name to a Subscript (line 253):
        
        # Assigning a Name to a Subscript (line 253):
        # Getting the type of 'func' (line 253)
        func_162803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 30), 'func')
        # Getting the type of 'self' (line 253)
        self_162804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 8), 'self')
        # Obtaining the member 'observers' of a type (line 253)
        observers_162805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 253, 8), self_162804, 'observers')
        # Getting the type of 'cid' (line 253)
        cid_162806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 23), 'cid')
        # Storing an element on a container (line 253)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 253, 8), observers_162805, (cid_162806, func_162803))
        
        # Getting the type of 'self' (line 254)
        self_162807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 8), 'self')
        # Obtaining the member 'cnt' of a type (line 254)
        cnt_162808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 8), self_162807, 'cnt')
        int_162809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 20), 'int')
        # Applying the binary operator '+=' (line 254)
        result_iadd_162810 = python_operator(stypy.reporting.localization.Localization(__file__, 254, 8), '+=', cnt_162808, int_162809)
        # Getting the type of 'self' (line 254)
        self_162811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 8), 'self')
        # Setting the type of the member 'cnt' of a type (line 254)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 8), self_162811, 'cnt', result_iadd_162810)
        
        # Getting the type of 'cid' (line 255)
        cid_162812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 15), 'cid')
        # Assigning a type to the variable 'stypy_return_type' (line 255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 8), 'stypy_return_type', cid_162812)
        
        # ################# End of 'on_clicked(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'on_clicked' in the type store
        # Getting the type of 'stypy_return_type' (line 245)
        stypy_return_type_162813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_162813)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'on_clicked'
        return stypy_return_type_162813


    @norecursion
    def disconnect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'disconnect'
        module_type_store = module_type_store.open_function_context('disconnect', 257, 4, False)
        # Assigning a type to the variable 'self' (line 258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Button.disconnect.__dict__.__setitem__('stypy_localization', localization)
        Button.disconnect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Button.disconnect.__dict__.__setitem__('stypy_type_store', module_type_store)
        Button.disconnect.__dict__.__setitem__('stypy_function_name', 'Button.disconnect')
        Button.disconnect.__dict__.__setitem__('stypy_param_names_list', ['cid'])
        Button.disconnect.__dict__.__setitem__('stypy_varargs_param_name', None)
        Button.disconnect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Button.disconnect.__dict__.__setitem__('stypy_call_defaults', defaults)
        Button.disconnect.__dict__.__setitem__('stypy_call_varargs', varargs)
        Button.disconnect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Button.disconnect.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Button.disconnect', ['cid'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'disconnect', localization, ['cid'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'disconnect(...)' code ##################

        unicode_162814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 8), 'unicode', u'remove the observer with connection id *cid*')
        
        
        # SSA begins for try-except statement (line 259)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        # Deleting a member
        # Getting the type of 'self' (line 260)
        self_162815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 16), 'self')
        # Obtaining the member 'observers' of a type (line 260)
        observers_162816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 260, 16), self_162815, 'observers')
        
        # Obtaining the type of the subscript
        # Getting the type of 'cid' (line 260)
        cid_162817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 31), 'cid')
        # Getting the type of 'self' (line 260)
        self_162818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 16), 'self')
        # Obtaining the member 'observers' of a type (line 260)
        observers_162819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 260, 16), self_162818, 'observers')
        # Obtaining the member '__getitem__' of a type (line 260)
        getitem___162820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 260, 16), observers_162819, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 260)
        subscript_call_result_162821 = invoke(stypy.reporting.localization.Localization(__file__, 260, 16), getitem___162820, cid_162817)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 260, 12), observers_162816, subscript_call_result_162821)
        # SSA branch for the except part of a try statement (line 259)
        # SSA branch for the except 'KeyError' branch of a try statement (line 259)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 259)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'disconnect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'disconnect' in the type store
        # Getting the type of 'stypy_return_type' (line 257)
        stypy_return_type_162822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_162822)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'disconnect'
        return stypy_return_type_162822


# Assigning a type to the variable 'Button' (line 139)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 0), 'Button', Button)
# Declaration of the 'Slider' class
# Getting the type of 'AxesWidget' (line 265)
AxesWidget_162823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 13), 'AxesWidget')

class Slider(AxesWidget_162823, ):
    unicode_162824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, (-1)), 'unicode', u'\n    A slider representing a floating point range.\n\n    Create a slider from `valmin` to `valmax` in axes `ax`. For the slider to\n    remain responsive you must maintain a reference to it.\n\n    Call :meth:`on_changed` to connect to the slider event\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_162825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, 58), 'float')
        unicode_162826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, 70), 'unicode', u'%1.2f')
        # Getting the type of 'True' (line 275)
        True_162827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 27), 'True')
        # Getting the type of 'True' (line 275)
        True_162828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 43), 'True')
        # Getting the type of 'None' (line 275)
        None_162829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 59), 'None')
        # Getting the type of 'None' (line 276)
        None_162830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 27), 'None')
        # Getting the type of 'True' (line 276)
        True_162831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 42), 'True')
        defaults = [float_162825, unicode_162826, True_162827, True_162828, None_162829, None_162830, True_162831]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 274, 4, False)
        # Assigning a type to the variable 'self' (line 275)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Slider.__init__', ['ax', 'label', 'valmin', 'valmax', 'valinit', 'valfmt', 'closedmin', 'closedmax', 'slidermin', 'slidermax', 'dragging'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'label', 'valmin', 'valmax', 'valinit', 'valfmt', 'closedmin', 'closedmax', 'slidermin', 'slidermax', 'dragging'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_162832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 321, (-1)), 'unicode', u'\n        Parameters\n        ----------\n        ax : Axes\n            The Axes to put the slider in.\n\n        label : str\n            Slider label.\n\n        valmin : float\n            The minimum value of the slider.\n\n        valmax : float\n            The maximum value of the slider.\n\n        valinit : float, optional, default: 0.5\n            The slider initial position.\n\n        valfmt : str, optional, default: "%1.2f"\n            Used to format the slider value, fprint format string.\n\n        closedmin : bool, optional, default: True\n            Indicate whether the slider interval is closed on the bottom.\n\n        closedmax : bool, optional, default: True\n            Indicate whether the slider interval is closed on the top.\n\n        slidermin : Slider, optional, default: None\n            Do not allow the current slider to have a value less than\n            the value of the Slider `slidermin`.\n\n        slidermax : Slider, optional, default: None\n            Do not allow the current slider to have a value greater than\n            the value of the Slider `slidermax`.\n\n        dragging : bool, optional, default: True\n            If True the slider can be dragged by the mouse.\n\n        Notes\n        -----\n        Additional kwargs are passed on to ``self.poly`` which is the\n        :class:`~matplotlib.patches.Rectangle` that draws the slider\n        knob.  See the :class:`~matplotlib.patches.Rectangle` documentation for\n        valid property names (e.g., `facecolor`, `edgecolor`, `alpha`).\n        ')
        
        # Call to __init__(...): (line 322)
        # Processing the call arguments (line 322)
        # Getting the type of 'self' (line 322)
        self_162835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 28), 'self', False)
        # Getting the type of 'ax' (line 322)
        ax_162836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 34), 'ax', False)
        # Processing the call keyword arguments (line 322)
        kwargs_162837 = {}
        # Getting the type of 'AxesWidget' (line 322)
        AxesWidget_162833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 'AxesWidget', False)
        # Obtaining the member '__init__' of a type (line 322)
        init___162834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 8), AxesWidget_162833, '__init__')
        # Calling __init__(args, kwargs) (line 322)
        init___call_result_162838 = invoke(stypy.reporting.localization.Localization(__file__, 322, 8), init___162834, *[self_162835, ax_162836], **kwargs_162837)
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'slidermin' (line 324)
        slidermin_162839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 11), 'slidermin')
        # Getting the type of 'None' (line 324)
        None_162840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 28), 'None')
        # Applying the binary operator 'isnot' (line 324)
        result_is_not_162841 = python_operator(stypy.reporting.localization.Localization(__file__, 324, 11), 'isnot', slidermin_162839, None_162840)
        
        
        
        # Call to hasattr(...): (line 324)
        # Processing the call arguments (line 324)
        # Getting the type of 'slidermin' (line 324)
        slidermin_162843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 49), 'slidermin', False)
        unicode_162844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 324, 60), 'unicode', u'val')
        # Processing the call keyword arguments (line 324)
        kwargs_162845 = {}
        # Getting the type of 'hasattr' (line 324)
        hasattr_162842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 41), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 324)
        hasattr_call_result_162846 = invoke(stypy.reporting.localization.Localization(__file__, 324, 41), hasattr_162842, *[slidermin_162843, unicode_162844], **kwargs_162845)
        
        # Applying the 'not' unary operator (line 324)
        result_not__162847 = python_operator(stypy.reporting.localization.Localization(__file__, 324, 37), 'not', hasattr_call_result_162846)
        
        # Applying the binary operator 'and' (line 324)
        result_and_keyword_162848 = python_operator(stypy.reporting.localization.Localization(__file__, 324, 11), 'and', result_is_not_162841, result_not__162847)
        
        # Testing the type of an if condition (line 324)
        if_condition_162849 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 324, 8), result_and_keyword_162848)
        # Assigning a type to the variable 'if_condition_162849' (line 324)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 324, 8), 'if_condition_162849', if_condition_162849)
        # SSA begins for if statement (line 324)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 325)
        # Processing the call arguments (line 325)
        
        # Call to format(...): (line 325)
        # Processing the call arguments (line 325)
        
        # Call to type(...): (line 326)
        # Processing the call arguments (line 326)
        # Getting the type of 'slidermin' (line 326)
        slidermin_162854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 42), 'slidermin', False)
        # Processing the call keyword arguments (line 326)
        kwargs_162855 = {}
        # Getting the type of 'type' (line 326)
        type_162853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 37), 'type', False)
        # Calling type(args, kwargs) (line 326)
        type_call_result_162856 = invoke(stypy.reporting.localization.Localization(__file__, 326, 37), type_162853, *[slidermin_162854], **kwargs_162855)
        
        # Processing the call keyword arguments (line 325)
        kwargs_162857 = {}
        unicode_162851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 325, 29), 'unicode', u"Argument slidermin ({}) has no 'val'")
        # Obtaining the member 'format' of a type (line 325)
        format_162852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 29), unicode_162851, 'format')
        # Calling format(args, kwargs) (line 325)
        format_call_result_162858 = invoke(stypy.reporting.localization.Localization(__file__, 325, 29), format_162852, *[type_call_result_162856], **kwargs_162857)
        
        # Processing the call keyword arguments (line 325)
        kwargs_162859 = {}
        # Getting the type of 'ValueError' (line 325)
        ValueError_162850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 325)
        ValueError_call_result_162860 = invoke(stypy.reporting.localization.Localization(__file__, 325, 18), ValueError_162850, *[format_call_result_162858], **kwargs_162859)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 325, 12), ValueError_call_result_162860, 'raise parameter', BaseException)
        # SSA join for if statement (line 324)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'slidermax' (line 327)
        slidermax_162861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 11), 'slidermax')
        # Getting the type of 'None' (line 327)
        None_162862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 28), 'None')
        # Applying the binary operator 'isnot' (line 327)
        result_is_not_162863 = python_operator(stypy.reporting.localization.Localization(__file__, 327, 11), 'isnot', slidermax_162861, None_162862)
        
        
        
        # Call to hasattr(...): (line 327)
        # Processing the call arguments (line 327)
        # Getting the type of 'slidermax' (line 327)
        slidermax_162865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 49), 'slidermax', False)
        unicode_162866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 60), 'unicode', u'val')
        # Processing the call keyword arguments (line 327)
        kwargs_162867 = {}
        # Getting the type of 'hasattr' (line 327)
        hasattr_162864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 41), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 327)
        hasattr_call_result_162868 = invoke(stypy.reporting.localization.Localization(__file__, 327, 41), hasattr_162864, *[slidermax_162865, unicode_162866], **kwargs_162867)
        
        # Applying the 'not' unary operator (line 327)
        result_not__162869 = python_operator(stypy.reporting.localization.Localization(__file__, 327, 37), 'not', hasattr_call_result_162868)
        
        # Applying the binary operator 'and' (line 327)
        result_and_keyword_162870 = python_operator(stypy.reporting.localization.Localization(__file__, 327, 11), 'and', result_is_not_162863, result_not__162869)
        
        # Testing the type of an if condition (line 327)
        if_condition_162871 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 327, 8), result_and_keyword_162870)
        # Assigning a type to the variable 'if_condition_162871' (line 327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'if_condition_162871', if_condition_162871)
        # SSA begins for if statement (line 327)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 328)
        # Processing the call arguments (line 328)
        
        # Call to format(...): (line 328)
        # Processing the call arguments (line 328)
        
        # Call to type(...): (line 329)
        # Processing the call arguments (line 329)
        # Getting the type of 'slidermax' (line 329)
        slidermax_162876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 42), 'slidermax', False)
        # Processing the call keyword arguments (line 329)
        kwargs_162877 = {}
        # Getting the type of 'type' (line 329)
        type_162875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 37), 'type', False)
        # Calling type(args, kwargs) (line 329)
        type_call_result_162878 = invoke(stypy.reporting.localization.Localization(__file__, 329, 37), type_162875, *[slidermax_162876], **kwargs_162877)
        
        # Processing the call keyword arguments (line 328)
        kwargs_162879 = {}
        unicode_162873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 328, 29), 'unicode', u"Argument slidermax ({}) has no 'val'")
        # Obtaining the member 'format' of a type (line 328)
        format_162874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 328, 29), unicode_162873, 'format')
        # Calling format(args, kwargs) (line 328)
        format_call_result_162880 = invoke(stypy.reporting.localization.Localization(__file__, 328, 29), format_162874, *[type_call_result_162878], **kwargs_162879)
        
        # Processing the call keyword arguments (line 328)
        kwargs_162881 = {}
        # Getting the type of 'ValueError' (line 328)
        ValueError_162872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 328)
        ValueError_call_result_162882 = invoke(stypy.reporting.localization.Localization(__file__, 328, 18), ValueError_162872, *[format_call_result_162880], **kwargs_162881)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 328, 12), ValueError_call_result_162882, 'raise parameter', BaseException)
        # SSA join for if statement (line 327)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 330):
        
        # Assigning a Name to a Attribute (line 330):
        # Getting the type of 'closedmin' (line 330)
        closedmin_162883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 25), 'closedmin')
        # Getting the type of 'self' (line 330)
        self_162884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 8), 'self')
        # Setting the type of the member 'closedmin' of a type (line 330)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 330, 8), self_162884, 'closedmin', closedmin_162883)
        
        # Assigning a Name to a Attribute (line 331):
        
        # Assigning a Name to a Attribute (line 331):
        # Getting the type of 'closedmax' (line 331)
        closedmax_162885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 25), 'closedmax')
        # Getting the type of 'self' (line 331)
        self_162886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 8), 'self')
        # Setting the type of the member 'closedmax' of a type (line 331)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 8), self_162886, 'closedmax', closedmax_162885)
        
        # Assigning a Name to a Attribute (line 332):
        
        # Assigning a Name to a Attribute (line 332):
        # Getting the type of 'slidermin' (line 332)
        slidermin_162887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 25), 'slidermin')
        # Getting the type of 'self' (line 332)
        self_162888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 8), 'self')
        # Setting the type of the member 'slidermin' of a type (line 332)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 8), self_162888, 'slidermin', slidermin_162887)
        
        # Assigning a Name to a Attribute (line 333):
        
        # Assigning a Name to a Attribute (line 333):
        # Getting the type of 'slidermax' (line 333)
        slidermax_162889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 25), 'slidermax')
        # Getting the type of 'self' (line 333)
        self_162890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 8), 'self')
        # Setting the type of the member 'slidermax' of a type (line 333)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 333, 8), self_162890, 'slidermax', slidermax_162889)
        
        # Assigning a Name to a Attribute (line 334):
        
        # Assigning a Name to a Attribute (line 334):
        # Getting the type of 'False' (line 334)
        False_162891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 27), 'False')
        # Getting the type of 'self' (line 334)
        self_162892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 8), 'self')
        # Setting the type of the member 'drag_active' of a type (line 334)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 334, 8), self_162892, 'drag_active', False_162891)
        
        # Assigning a Name to a Attribute (line 335):
        
        # Assigning a Name to a Attribute (line 335):
        # Getting the type of 'valmin' (line 335)
        valmin_162893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 22), 'valmin')
        # Getting the type of 'self' (line 335)
        self_162894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 8), 'self')
        # Setting the type of the member 'valmin' of a type (line 335)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 335, 8), self_162894, 'valmin', valmin_162893)
        
        # Assigning a Name to a Attribute (line 336):
        
        # Assigning a Name to a Attribute (line 336):
        # Getting the type of 'valmax' (line 336)
        valmax_162895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 22), 'valmax')
        # Getting the type of 'self' (line 336)
        self_162896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 8), 'self')
        # Setting the type of the member 'valmax' of a type (line 336)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 336, 8), self_162896, 'valmax', valmax_162895)
        
        # Assigning a Call to a Name (line 337):
        
        # Assigning a Call to a Name (line 337):
        
        # Call to _value_in_bounds(...): (line 337)
        # Processing the call arguments (line 337)
        # Getting the type of 'valinit' (line 337)
        valinit_162899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 40), 'valinit', False)
        # Processing the call keyword arguments (line 337)
        kwargs_162900 = {}
        # Getting the type of 'self' (line 337)
        self_162897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 18), 'self', False)
        # Obtaining the member '_value_in_bounds' of a type (line 337)
        _value_in_bounds_162898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 337, 18), self_162897, '_value_in_bounds')
        # Calling _value_in_bounds(args, kwargs) (line 337)
        _value_in_bounds_call_result_162901 = invoke(stypy.reporting.localization.Localization(__file__, 337, 18), _value_in_bounds_162898, *[valinit_162899], **kwargs_162900)
        
        # Assigning a type to the variable 'valinit' (line 337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 337, 8), 'valinit', _value_in_bounds_call_result_162901)
        
        # Type idiom detected: calculating its left and rigth part (line 338)
        # Getting the type of 'valinit' (line 338)
        valinit_162902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 11), 'valinit')
        # Getting the type of 'None' (line 338)
        None_162903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 22), 'None')
        
        (may_be_162904, more_types_in_union_162905) = may_be_none(valinit_162902, None_162903)

        if may_be_162904:

            if more_types_in_union_162905:
                # Runtime conditional SSA (line 338)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 339):
            
            # Assigning a Name to a Name (line 339):
            # Getting the type of 'valmin' (line 339)
            valmin_162906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 22), 'valmin')
            # Assigning a type to the variable 'valinit' (line 339)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 339, 12), 'valinit', valmin_162906)

            if more_types_in_union_162905:
                # SSA join for if statement (line 338)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 340):
        
        # Assigning a Name to a Attribute (line 340):
        # Getting the type of 'valinit' (line 340)
        valinit_162907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 19), 'valinit')
        # Getting the type of 'self' (line 340)
        self_162908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 8), 'self')
        # Setting the type of the member 'val' of a type (line 340)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 8), self_162908, 'val', valinit_162907)
        
        # Assigning a Name to a Attribute (line 341):
        
        # Assigning a Name to a Attribute (line 341):
        # Getting the type of 'valinit' (line 341)
        valinit_162909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 23), 'valinit')
        # Getting the type of 'self' (line 341)
        self_162910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 8), 'self')
        # Setting the type of the member 'valinit' of a type (line 341)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 341, 8), self_162910, 'valinit', valinit_162909)
        
        # Assigning a Call to a Attribute (line 342):
        
        # Assigning a Call to a Attribute (line 342):
        
        # Call to axvspan(...): (line 342)
        # Processing the call arguments (line 342)
        # Getting the type of 'valmin' (line 342)
        valmin_162913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 31), 'valmin', False)
        # Getting the type of 'valinit' (line 342)
        valinit_162914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 39), 'valinit', False)
        int_162915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 48), 'int')
        int_162916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 51), 'int')
        # Processing the call keyword arguments (line 342)
        # Getting the type of 'kwargs' (line 342)
        kwargs_162917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 56), 'kwargs', False)
        kwargs_162918 = {'kwargs_162917': kwargs_162917}
        # Getting the type of 'ax' (line 342)
        ax_162911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 20), 'ax', False)
        # Obtaining the member 'axvspan' of a type (line 342)
        axvspan_162912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 342, 20), ax_162911, 'axvspan')
        # Calling axvspan(args, kwargs) (line 342)
        axvspan_call_result_162919 = invoke(stypy.reporting.localization.Localization(__file__, 342, 20), axvspan_162912, *[valmin_162913, valinit_162914, int_162915, int_162916], **kwargs_162918)
        
        # Getting the type of 'self' (line 342)
        self_162920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 8), 'self')
        # Setting the type of the member 'poly' of a type (line 342)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 342, 8), self_162920, 'poly', axvspan_call_result_162919)
        
        # Assigning a Call to a Attribute (line 343):
        
        # Assigning a Call to a Attribute (line 343):
        
        # Call to axvline(...): (line 343)
        # Processing the call arguments (line 343)
        # Getting the type of 'valinit' (line 343)
        valinit_162923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 32), 'valinit', False)
        int_162924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 41), 'int')
        int_162925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 44), 'int')
        # Processing the call keyword arguments (line 343)
        unicode_162926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 53), 'unicode', u'r')
        keyword_162927 = unicode_162926
        int_162928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 61), 'int')
        keyword_162929 = int_162928
        kwargs_162930 = {'color': keyword_162927, 'lw': keyword_162929}
        # Getting the type of 'ax' (line 343)
        ax_162921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 21), 'ax', False)
        # Obtaining the member 'axvline' of a type (line 343)
        axvline_162922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 21), ax_162921, 'axvline')
        # Calling axvline(args, kwargs) (line 343)
        axvline_call_result_162931 = invoke(stypy.reporting.localization.Localization(__file__, 343, 21), axvline_162922, *[valinit_162923, int_162924, int_162925], **kwargs_162930)
        
        # Getting the type of 'self' (line 343)
        self_162932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 8), 'self')
        # Setting the type of the member 'vline' of a type (line 343)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 8), self_162932, 'vline', axvline_call_result_162931)
        
        # Assigning a Name to a Attribute (line 345):
        
        # Assigning a Name to a Attribute (line 345):
        # Getting the type of 'valfmt' (line 345)
        valfmt_162933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 22), 'valfmt')
        # Getting the type of 'self' (line 345)
        self_162934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 8), 'self')
        # Setting the type of the member 'valfmt' of a type (line 345)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 8), self_162934, 'valfmt', valfmt_162933)
        
        # Call to set_yticks(...): (line 346)
        # Processing the call arguments (line 346)
        
        # Obtaining an instance of the builtin type 'list' (line 346)
        list_162937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 346, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 346)
        
        # Processing the call keyword arguments (line 346)
        kwargs_162938 = {}
        # Getting the type of 'ax' (line 346)
        ax_162935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 8), 'ax', False)
        # Obtaining the member 'set_yticks' of a type (line 346)
        set_yticks_162936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 8), ax_162935, 'set_yticks')
        # Calling set_yticks(args, kwargs) (line 346)
        set_yticks_call_result_162939 = invoke(stypy.reporting.localization.Localization(__file__, 346, 8), set_yticks_162936, *[list_162937], **kwargs_162938)
        
        
        # Call to set_xlim(...): (line 347)
        # Processing the call arguments (line 347)
        
        # Obtaining an instance of the builtin type 'tuple' (line 347)
        tuple_162942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 347, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 347)
        # Adding element type (line 347)
        # Getting the type of 'valmin' (line 347)
        valmin_162943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 21), 'valmin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 347, 21), tuple_162942, valmin_162943)
        # Adding element type (line 347)
        # Getting the type of 'valmax' (line 347)
        valmax_162944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 29), 'valmax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 347, 21), tuple_162942, valmax_162944)
        
        # Processing the call keyword arguments (line 347)
        kwargs_162945 = {}
        # Getting the type of 'ax' (line 347)
        ax_162940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 8), 'ax', False)
        # Obtaining the member 'set_xlim' of a type (line 347)
        set_xlim_162941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 347, 8), ax_162940, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 347)
        set_xlim_call_result_162946 = invoke(stypy.reporting.localization.Localization(__file__, 347, 8), set_xlim_162941, *[tuple_162942], **kwargs_162945)
        
        
        # Call to set_xticks(...): (line 348)
        # Processing the call arguments (line 348)
        
        # Obtaining an instance of the builtin type 'list' (line 348)
        list_162949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 348, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 348)
        
        # Processing the call keyword arguments (line 348)
        kwargs_162950 = {}
        # Getting the type of 'ax' (line 348)
        ax_162947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 8), 'ax', False)
        # Obtaining the member 'set_xticks' of a type (line 348)
        set_xticks_162948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 348, 8), ax_162947, 'set_xticks')
        # Calling set_xticks(args, kwargs) (line 348)
        set_xticks_call_result_162951 = invoke(stypy.reporting.localization.Localization(__file__, 348, 8), set_xticks_162948, *[list_162949], **kwargs_162950)
        
        
        # Call to set_navigate(...): (line 349)
        # Processing the call arguments (line 349)
        # Getting the type of 'False' (line 349)
        False_162954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 24), 'False', False)
        # Processing the call keyword arguments (line 349)
        kwargs_162955 = {}
        # Getting the type of 'ax' (line 349)
        ax_162952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 8), 'ax', False)
        # Obtaining the member 'set_navigate' of a type (line 349)
        set_navigate_162953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 8), ax_162952, 'set_navigate')
        # Calling set_navigate(args, kwargs) (line 349)
        set_navigate_call_result_162956 = invoke(stypy.reporting.localization.Localization(__file__, 349, 8), set_navigate_162953, *[False_162954], **kwargs_162955)
        
        
        # Call to connect_event(...): (line 351)
        # Processing the call arguments (line 351)
        unicode_162959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 351, 27), 'unicode', u'button_press_event')
        # Getting the type of 'self' (line 351)
        self_162960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 49), 'self', False)
        # Obtaining the member '_update' of a type (line 351)
        _update_162961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 351, 49), self_162960, '_update')
        # Processing the call keyword arguments (line 351)
        kwargs_162962 = {}
        # Getting the type of 'self' (line 351)
        self_162957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 351)
        connect_event_162958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 351, 8), self_162957, 'connect_event')
        # Calling connect_event(args, kwargs) (line 351)
        connect_event_call_result_162963 = invoke(stypy.reporting.localization.Localization(__file__, 351, 8), connect_event_162958, *[unicode_162959, _update_162961], **kwargs_162962)
        
        
        # Call to connect_event(...): (line 352)
        # Processing the call arguments (line 352)
        unicode_162966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 27), 'unicode', u'button_release_event')
        # Getting the type of 'self' (line 352)
        self_162967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 51), 'self', False)
        # Obtaining the member '_update' of a type (line 352)
        _update_162968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 51), self_162967, '_update')
        # Processing the call keyword arguments (line 352)
        kwargs_162969 = {}
        # Getting the type of 'self' (line 352)
        self_162964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 352)
        connect_event_162965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 8), self_162964, 'connect_event')
        # Calling connect_event(args, kwargs) (line 352)
        connect_event_call_result_162970 = invoke(stypy.reporting.localization.Localization(__file__, 352, 8), connect_event_162965, *[unicode_162966, _update_162968], **kwargs_162969)
        
        
        # Getting the type of 'dragging' (line 353)
        dragging_162971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 11), 'dragging')
        # Testing the type of an if condition (line 353)
        if_condition_162972 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 353, 8), dragging_162971)
        # Assigning a type to the variable 'if_condition_162972' (line 353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 353, 8), 'if_condition_162972', if_condition_162972)
        # SSA begins for if statement (line 353)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to connect_event(...): (line 354)
        # Processing the call arguments (line 354)
        unicode_162975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 354, 31), 'unicode', u'motion_notify_event')
        # Getting the type of 'self' (line 354)
        self_162976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 54), 'self', False)
        # Obtaining the member '_update' of a type (line 354)
        _update_162977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 354, 54), self_162976, '_update')
        # Processing the call keyword arguments (line 354)
        kwargs_162978 = {}
        # Getting the type of 'self' (line 354)
        self_162973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 12), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 354)
        connect_event_162974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 354, 12), self_162973, 'connect_event')
        # Calling connect_event(args, kwargs) (line 354)
        connect_event_call_result_162979 = invoke(stypy.reporting.localization.Localization(__file__, 354, 12), connect_event_162974, *[unicode_162975, _update_162977], **kwargs_162978)
        
        # SSA join for if statement (line 353)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 355):
        
        # Assigning a Call to a Attribute (line 355):
        
        # Call to text(...): (line 355)
        # Processing the call arguments (line 355)
        float_162982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 29), 'float')
        float_162983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 36), 'float')
        # Getting the type of 'label' (line 355)
        label_162984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 41), 'label', False)
        # Processing the call keyword arguments (line 355)
        # Getting the type of 'ax' (line 355)
        ax_162985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 58), 'ax', False)
        # Obtaining the member 'transAxes' of a type (line 355)
        transAxes_162986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 58), ax_162985, 'transAxes')
        keyword_162987 = transAxes_162986
        unicode_162988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 47), 'unicode', u'center')
        keyword_162989 = unicode_162988
        unicode_162990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 357, 49), 'unicode', u'right')
        keyword_162991 = unicode_162990
        kwargs_162992 = {'horizontalalignment': keyword_162991, 'verticalalignment': keyword_162989, 'transform': keyword_162987}
        # Getting the type of 'ax' (line 355)
        ax_162980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 21), 'ax', False)
        # Obtaining the member 'text' of a type (line 355)
        text_162981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 21), ax_162980, 'text')
        # Calling text(args, kwargs) (line 355)
        text_call_result_162993 = invoke(stypy.reporting.localization.Localization(__file__, 355, 21), text_162981, *[float_162982, float_162983, label_162984], **kwargs_162992)
        
        # Getting the type of 'self' (line 355)
        self_162994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 8), 'self')
        # Setting the type of the member 'label' of a type (line 355)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 8), self_162994, 'label', text_call_result_162993)
        
        # Assigning a Call to a Attribute (line 359):
        
        # Assigning a Call to a Attribute (line 359):
        
        # Call to text(...): (line 359)
        # Processing the call arguments (line 359)
        float_162997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 31), 'float')
        float_162998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 37), 'float')
        # Getting the type of 'valfmt' (line 359)
        valfmt_162999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 42), 'valfmt', False)
        # Getting the type of 'valinit' (line 359)
        valinit_163000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 51), 'valinit', False)
        # Applying the binary operator '%' (line 359)
        result_mod_163001 = python_operator(stypy.reporting.localization.Localization(__file__, 359, 42), '%', valfmt_162999, valinit_163000)
        
        # Processing the call keyword arguments (line 359)
        # Getting the type of 'ax' (line 360)
        ax_163002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 41), 'ax', False)
        # Obtaining the member 'transAxes' of a type (line 360)
        transAxes_163003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 360, 41), ax_163002, 'transAxes')
        keyword_163004 = transAxes_163003
        unicode_163005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 49), 'unicode', u'center')
        keyword_163006 = unicode_163005
        unicode_163007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, 51), 'unicode', u'left')
        keyword_163008 = unicode_163007
        kwargs_163009 = {'horizontalalignment': keyword_163008, 'verticalalignment': keyword_163006, 'transform': keyword_163004}
        # Getting the type of 'ax' (line 359)
        ax_162995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 23), 'ax', False)
        # Obtaining the member 'text' of a type (line 359)
        text_162996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 23), ax_162995, 'text')
        # Calling text(args, kwargs) (line 359)
        text_call_result_163010 = invoke(stypy.reporting.localization.Localization(__file__, 359, 23), text_162996, *[float_162997, float_162998, result_mod_163001], **kwargs_163009)
        
        # Getting the type of 'self' (line 359)
        self_163011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 8), 'self')
        # Setting the type of the member 'valtext' of a type (line 359)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 8), self_163011, 'valtext', text_call_result_163010)
        
        # Assigning a Num to a Attribute (line 364):
        
        # Assigning a Num to a Attribute (line 364):
        int_163012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 364, 19), 'int')
        # Getting the type of 'self' (line 364)
        self_163013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 8), 'self')
        # Setting the type of the member 'cnt' of a type (line 364)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 8), self_163013, 'cnt', int_163012)
        
        # Assigning a Dict to a Attribute (line 365):
        
        # Assigning a Dict to a Attribute (line 365):
        
        # Obtaining an instance of the builtin type 'dict' (line 365)
        dict_163014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, 25), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 365)
        
        # Getting the type of 'self' (line 365)
        self_163015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 8), 'self')
        # Setting the type of the member 'observers' of a type (line 365)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 8), self_163015, 'observers', dict_163014)
        
        # Call to set_val(...): (line 367)
        # Processing the call arguments (line 367)
        # Getting the type of 'valinit' (line 367)
        valinit_163018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 21), 'valinit', False)
        # Processing the call keyword arguments (line 367)
        kwargs_163019 = {}
        # Getting the type of 'self' (line 367)
        self_163016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 8), 'self', False)
        # Obtaining the member 'set_val' of a type (line 367)
        set_val_163017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 8), self_163016, 'set_val')
        # Calling set_val(args, kwargs) (line 367)
        set_val_call_result_163020 = invoke(stypy.reporting.localization.Localization(__file__, 367, 8), set_val_163017, *[valinit_163018], **kwargs_163019)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _value_in_bounds(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_value_in_bounds'
        module_type_store = module_type_store.open_function_context('_value_in_bounds', 369, 4, False)
        # Assigning a type to the variable 'self' (line 370)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Slider._value_in_bounds.__dict__.__setitem__('stypy_localization', localization)
        Slider._value_in_bounds.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Slider._value_in_bounds.__dict__.__setitem__('stypy_type_store', module_type_store)
        Slider._value_in_bounds.__dict__.__setitem__('stypy_function_name', 'Slider._value_in_bounds')
        Slider._value_in_bounds.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Slider._value_in_bounds.__dict__.__setitem__('stypy_varargs_param_name', None)
        Slider._value_in_bounds.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Slider._value_in_bounds.__dict__.__setitem__('stypy_call_defaults', defaults)
        Slider._value_in_bounds.__dict__.__setitem__('stypy_call_varargs', varargs)
        Slider._value_in_bounds.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Slider._value_in_bounds.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Slider._value_in_bounds', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_value_in_bounds', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_value_in_bounds(...)' code ##################

        unicode_163021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 8), 'unicode', u' Makes sure self.val is with given bounds.')
        
        
        # Getting the type of 'val' (line 371)
        val_163022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 11), 'val')
        # Getting the type of 'self' (line 371)
        self_163023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 18), 'self')
        # Obtaining the member 'valmin' of a type (line 371)
        valmin_163024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 371, 18), self_163023, 'valmin')
        # Applying the binary operator '<=' (line 371)
        result_le_163025 = python_operator(stypy.reporting.localization.Localization(__file__, 371, 11), '<=', val_163022, valmin_163024)
        
        # Testing the type of an if condition (line 371)
        if_condition_163026 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 371, 8), result_le_163025)
        # Assigning a type to the variable 'if_condition_163026' (line 371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 8), 'if_condition_163026', if_condition_163026)
        # SSA begins for if statement (line 371)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 372)
        self_163027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 19), 'self')
        # Obtaining the member 'closedmin' of a type (line 372)
        closedmin_163028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 372, 19), self_163027, 'closedmin')
        # Applying the 'not' unary operator (line 372)
        result_not__163029 = python_operator(stypy.reporting.localization.Localization(__file__, 372, 15), 'not', closedmin_163028)
        
        # Testing the type of an if condition (line 372)
        if_condition_163030 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 372, 12), result_not__163029)
        # Assigning a type to the variable 'if_condition_163030' (line 372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 12), 'if_condition_163030', if_condition_163030)
        # SSA begins for if statement (line 372)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 16), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 372)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 374):
        
        # Assigning a Attribute to a Name (line 374):
        # Getting the type of 'self' (line 374)
        self_163031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 18), 'self')
        # Obtaining the member 'valmin' of a type (line 374)
        valmin_163032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 374, 18), self_163031, 'valmin')
        # Assigning a type to the variable 'val' (line 374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 374, 12), 'val', valmin_163032)
        # SSA branch for the else part of an if statement (line 371)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'val' (line 375)
        val_163033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 13), 'val')
        # Getting the type of 'self' (line 375)
        self_163034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 20), 'self')
        # Obtaining the member 'valmax' of a type (line 375)
        valmax_163035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 20), self_163034, 'valmax')
        # Applying the binary operator '>=' (line 375)
        result_ge_163036 = python_operator(stypy.reporting.localization.Localization(__file__, 375, 13), '>=', val_163033, valmax_163035)
        
        # Testing the type of an if condition (line 375)
        if_condition_163037 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 375, 13), result_ge_163036)
        # Assigning a type to the variable 'if_condition_163037' (line 375)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 13), 'if_condition_163037', if_condition_163037)
        # SSA begins for if statement (line 375)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 376)
        self_163038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 19), 'self')
        # Obtaining the member 'closedmax' of a type (line 376)
        closedmax_163039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 19), self_163038, 'closedmax')
        # Applying the 'not' unary operator (line 376)
        result_not__163040 = python_operator(stypy.reporting.localization.Localization(__file__, 376, 15), 'not', closedmax_163039)
        
        # Testing the type of an if condition (line 376)
        if_condition_163041 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 376, 12), result_not__163040)
        # Assigning a type to the variable 'if_condition_163041' (line 376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 12), 'if_condition_163041', if_condition_163041)
        # SSA begins for if statement (line 376)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 16), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 376)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 378):
        
        # Assigning a Attribute to a Name (line 378):
        # Getting the type of 'self' (line 378)
        self_163042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 18), 'self')
        # Obtaining the member 'valmax' of a type (line 378)
        valmax_163043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 378, 18), self_163042, 'valmax')
        # Assigning a type to the variable 'val' (line 378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 378, 12), 'val', valmax_163043)
        # SSA join for if statement (line 375)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 371)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 380)
        self_163044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 11), 'self')
        # Obtaining the member 'slidermin' of a type (line 380)
        slidermin_163045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 380, 11), self_163044, 'slidermin')
        # Getting the type of 'None' (line 380)
        None_163046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 33), 'None')
        # Applying the binary operator 'isnot' (line 380)
        result_is_not_163047 = python_operator(stypy.reporting.localization.Localization(__file__, 380, 11), 'isnot', slidermin_163045, None_163046)
        
        
        # Getting the type of 'val' (line 380)
        val_163048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 42), 'val')
        # Getting the type of 'self' (line 380)
        self_163049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 49), 'self')
        # Obtaining the member 'slidermin' of a type (line 380)
        slidermin_163050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 380, 49), self_163049, 'slidermin')
        # Obtaining the member 'val' of a type (line 380)
        val_163051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 380, 49), slidermin_163050, 'val')
        # Applying the binary operator '<=' (line 380)
        result_le_163052 = python_operator(stypy.reporting.localization.Localization(__file__, 380, 42), '<=', val_163048, val_163051)
        
        # Applying the binary operator 'and' (line 380)
        result_and_keyword_163053 = python_operator(stypy.reporting.localization.Localization(__file__, 380, 11), 'and', result_is_not_163047, result_le_163052)
        
        # Testing the type of an if condition (line 380)
        if_condition_163054 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 380, 8), result_and_keyword_163053)
        # Assigning a type to the variable 'if_condition_163054' (line 380)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 8), 'if_condition_163054', if_condition_163054)
        # SSA begins for if statement (line 380)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 381)
        self_163055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 19), 'self')
        # Obtaining the member 'closedmin' of a type (line 381)
        closedmin_163056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 381, 19), self_163055, 'closedmin')
        # Applying the 'not' unary operator (line 381)
        result_not__163057 = python_operator(stypy.reporting.localization.Localization(__file__, 381, 15), 'not', closedmin_163056)
        
        # Testing the type of an if condition (line 381)
        if_condition_163058 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 381, 12), result_not__163057)
        # Assigning a type to the variable 'if_condition_163058' (line 381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 12), 'if_condition_163058', if_condition_163058)
        # SSA begins for if statement (line 381)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 16), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 381)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 383):
        
        # Assigning a Attribute to a Name (line 383):
        # Getting the type of 'self' (line 383)
        self_163059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 18), 'self')
        # Obtaining the member 'slidermin' of a type (line 383)
        slidermin_163060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 18), self_163059, 'slidermin')
        # Obtaining the member 'val' of a type (line 383)
        val_163061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 18), slidermin_163060, 'val')
        # Assigning a type to the variable 'val' (line 383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 12), 'val', val_163061)
        # SSA join for if statement (line 380)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 385)
        self_163062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 11), 'self')
        # Obtaining the member 'slidermax' of a type (line 385)
        slidermax_163063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 11), self_163062, 'slidermax')
        # Getting the type of 'None' (line 385)
        None_163064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 33), 'None')
        # Applying the binary operator 'isnot' (line 385)
        result_is_not_163065 = python_operator(stypy.reporting.localization.Localization(__file__, 385, 11), 'isnot', slidermax_163063, None_163064)
        
        
        # Getting the type of 'val' (line 385)
        val_163066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 42), 'val')
        # Getting the type of 'self' (line 385)
        self_163067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 49), 'self')
        # Obtaining the member 'slidermax' of a type (line 385)
        slidermax_163068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 49), self_163067, 'slidermax')
        # Obtaining the member 'val' of a type (line 385)
        val_163069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 49), slidermax_163068, 'val')
        # Applying the binary operator '>=' (line 385)
        result_ge_163070 = python_operator(stypy.reporting.localization.Localization(__file__, 385, 42), '>=', val_163066, val_163069)
        
        # Applying the binary operator 'and' (line 385)
        result_and_keyword_163071 = python_operator(stypy.reporting.localization.Localization(__file__, 385, 11), 'and', result_is_not_163065, result_ge_163070)
        
        # Testing the type of an if condition (line 385)
        if_condition_163072 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 385, 8), result_and_keyword_163071)
        # Assigning a type to the variable 'if_condition_163072' (line 385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 385, 8), 'if_condition_163072', if_condition_163072)
        # SSA begins for if statement (line 385)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 386)
        self_163073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 19), 'self')
        # Obtaining the member 'closedmax' of a type (line 386)
        closedmax_163074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 19), self_163073, 'closedmax')
        # Applying the 'not' unary operator (line 386)
        result_not__163075 = python_operator(stypy.reporting.localization.Localization(__file__, 386, 15), 'not', closedmax_163074)
        
        # Testing the type of an if condition (line 386)
        if_condition_163076 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 386, 12), result_not__163075)
        # Assigning a type to the variable 'if_condition_163076' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'if_condition_163076', if_condition_163076)
        # SSA begins for if statement (line 386)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 16), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 386)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 388):
        
        # Assigning a Attribute to a Name (line 388):
        # Getting the type of 'self' (line 388)
        self_163077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 18), 'self')
        # Obtaining the member 'slidermax' of a type (line 388)
        slidermax_163078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 18), self_163077, 'slidermax')
        # Obtaining the member 'val' of a type (line 388)
        val_163079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 18), slidermax_163078, 'val')
        # Assigning a type to the variable 'val' (line 388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 12), 'val', val_163079)
        # SSA join for if statement (line 385)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'val' (line 389)
        val_163080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 15), 'val')
        # Assigning a type to the variable 'stypy_return_type' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'stypy_return_type', val_163080)
        
        # ################# End of '_value_in_bounds(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_value_in_bounds' in the type store
        # Getting the type of 'stypy_return_type' (line 369)
        stypy_return_type_163081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_163081)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_value_in_bounds'
        return stypy_return_type_163081


    @norecursion
    def _update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update'
        module_type_store = module_type_store.open_function_context('_update', 391, 4, False)
        # Assigning a type to the variable 'self' (line 392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Slider._update.__dict__.__setitem__('stypy_localization', localization)
        Slider._update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Slider._update.__dict__.__setitem__('stypy_type_store', module_type_store)
        Slider._update.__dict__.__setitem__('stypy_function_name', 'Slider._update')
        Slider._update.__dict__.__setitem__('stypy_param_names_list', ['event'])
        Slider._update.__dict__.__setitem__('stypy_varargs_param_name', None)
        Slider._update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Slider._update.__dict__.__setitem__('stypy_call_defaults', defaults)
        Slider._update.__dict__.__setitem__('stypy_call_varargs', varargs)
        Slider._update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Slider._update.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Slider._update', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update(...)' code ##################

        unicode_163082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 8), 'unicode', u'update the slider position')
        
        
        # Call to ignore(...): (line 393)
        # Processing the call arguments (line 393)
        # Getting the type of 'event' (line 393)
        event_163085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 23), 'event', False)
        # Processing the call keyword arguments (line 393)
        kwargs_163086 = {}
        # Getting the type of 'self' (line 393)
        self_163083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 11), 'self', False)
        # Obtaining the member 'ignore' of a type (line 393)
        ignore_163084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 11), self_163083, 'ignore')
        # Calling ignore(args, kwargs) (line 393)
        ignore_call_result_163087 = invoke(stypy.reporting.localization.Localization(__file__, 393, 11), ignore_163084, *[event_163085], **kwargs_163086)
        
        # Testing the type of an if condition (line 393)
        if_condition_163088 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 393, 8), ignore_call_result_163087)
        # Assigning a type to the variable 'if_condition_163088' (line 393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 8), 'if_condition_163088', if_condition_163088)
        # SSA begins for if statement (line 393)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 393)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'event' (line 396)
        event_163089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 11), 'event')
        # Obtaining the member 'button' of a type (line 396)
        button_163090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 11), event_163089, 'button')
        int_163091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 27), 'int')
        # Applying the binary operator '!=' (line 396)
        result_ne_163092 = python_operator(stypy.reporting.localization.Localization(__file__, 396, 11), '!=', button_163090, int_163091)
        
        # Testing the type of an if condition (line 396)
        if_condition_163093 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 396, 8), result_ne_163092)
        # Assigning a type to the variable 'if_condition_163093' (line 396)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 396, 8), 'if_condition_163093', if_condition_163093)
        # SSA begins for if statement (line 396)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 396)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'event' (line 399)
        event_163094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 11), 'event')
        # Obtaining the member 'name' of a type (line 399)
        name_163095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 399, 11), event_163094, 'name')
        unicode_163096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 25), 'unicode', u'button_press_event')
        # Applying the binary operator '==' (line 399)
        result_eq_163097 = python_operator(stypy.reporting.localization.Localization(__file__, 399, 11), '==', name_163095, unicode_163096)
        
        
        # Getting the type of 'event' (line 399)
        event_163098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 50), 'event')
        # Obtaining the member 'inaxes' of a type (line 399)
        inaxes_163099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 399, 50), event_163098, 'inaxes')
        # Getting the type of 'self' (line 399)
        self_163100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 66), 'self')
        # Obtaining the member 'ax' of a type (line 399)
        ax_163101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 399, 66), self_163100, 'ax')
        # Applying the binary operator '==' (line 399)
        result_eq_163102 = python_operator(stypy.reporting.localization.Localization(__file__, 399, 50), '==', inaxes_163099, ax_163101)
        
        # Applying the binary operator 'and' (line 399)
        result_and_keyword_163103 = python_operator(stypy.reporting.localization.Localization(__file__, 399, 11), 'and', result_eq_163097, result_eq_163102)
        
        # Testing the type of an if condition (line 399)
        if_condition_163104 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 399, 8), result_and_keyword_163103)
        # Assigning a type to the variable 'if_condition_163104' (line 399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 399, 8), 'if_condition_163104', if_condition_163104)
        # SSA begins for if statement (line 399)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 400):
        
        # Assigning a Name to a Attribute (line 400):
        # Getting the type of 'True' (line 400)
        True_163105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 31), 'True')
        # Getting the type of 'self' (line 400)
        self_163106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 12), 'self')
        # Setting the type of the member 'drag_active' of a type (line 400)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 400, 12), self_163106, 'drag_active', True_163105)
        
        # Call to grab_mouse(...): (line 401)
        # Processing the call arguments (line 401)
        # Getting the type of 'self' (line 401)
        self_163110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 36), 'self', False)
        # Obtaining the member 'ax' of a type (line 401)
        ax_163111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 401, 36), self_163110, 'ax')
        # Processing the call keyword arguments (line 401)
        kwargs_163112 = {}
        # Getting the type of 'event' (line 401)
        event_163107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 12), 'event', False)
        # Obtaining the member 'canvas' of a type (line 401)
        canvas_163108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 401, 12), event_163107, 'canvas')
        # Obtaining the member 'grab_mouse' of a type (line 401)
        grab_mouse_163109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 401, 12), canvas_163108, 'grab_mouse')
        # Calling grab_mouse(args, kwargs) (line 401)
        grab_mouse_call_result_163113 = invoke(stypy.reporting.localization.Localization(__file__, 401, 12), grab_mouse_163109, *[ax_163111], **kwargs_163112)
        
        # SSA join for if statement (line 399)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 403)
        self_163114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 15), 'self')
        # Obtaining the member 'drag_active' of a type (line 403)
        drag_active_163115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 15), self_163114, 'drag_active')
        # Applying the 'not' unary operator (line 403)
        result_not__163116 = python_operator(stypy.reporting.localization.Localization(__file__, 403, 11), 'not', drag_active_163115)
        
        # Testing the type of an if condition (line 403)
        if_condition_163117 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 403, 8), result_not__163116)
        # Assigning a type to the variable 'if_condition_163117' (line 403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'if_condition_163117', if_condition_163117)
        # SSA begins for if statement (line 403)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 12), 'stypy_return_type', types.NoneType)
        # SSA branch for the else part of an if statement (line 403)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'event' (line 406)
        event_163118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 15), 'event')
        # Obtaining the member 'name' of a type (line 406)
        name_163119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 406, 15), event_163118, 'name')
        unicode_163120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 406, 29), 'unicode', u'button_release_event')
        # Applying the binary operator '==' (line 406)
        result_eq_163121 = python_operator(stypy.reporting.localization.Localization(__file__, 406, 15), '==', name_163119, unicode_163120)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'event' (line 407)
        event_163122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 15), 'event')
        # Obtaining the member 'name' of a type (line 407)
        name_163123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 407, 15), event_163122, 'name')
        unicode_163124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 407, 29), 'unicode', u'button_press_event')
        # Applying the binary operator '==' (line 407)
        result_eq_163125 = python_operator(stypy.reporting.localization.Localization(__file__, 407, 15), '==', name_163123, unicode_163124)
        
        
        # Getting the type of 'event' (line 408)
        event_163126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 15), 'event')
        # Obtaining the member 'inaxes' of a type (line 408)
        inaxes_163127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 15), event_163126, 'inaxes')
        # Getting the type of 'self' (line 408)
        self_163128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 31), 'self')
        # Obtaining the member 'ax' of a type (line 408)
        ax_163129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 31), self_163128, 'ax')
        # Applying the binary operator '!=' (line 408)
        result_ne_163130 = python_operator(stypy.reporting.localization.Localization(__file__, 408, 15), '!=', inaxes_163127, ax_163129)
        
        # Applying the binary operator 'and' (line 407)
        result_and_keyword_163131 = python_operator(stypy.reporting.localization.Localization(__file__, 407, 15), 'and', result_eq_163125, result_ne_163130)
        
        # Applying the binary operator 'or' (line 406)
        result_or_keyword_163132 = python_operator(stypy.reporting.localization.Localization(__file__, 406, 14), 'or', result_eq_163121, result_and_keyword_163131)
        
        # Testing the type of an if condition (line 406)
        if_condition_163133 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 406, 13), result_or_keyword_163132)
        # Assigning a type to the variable 'if_condition_163133' (line 406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 406, 13), 'if_condition_163133', if_condition_163133)
        # SSA begins for if statement (line 406)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 409):
        
        # Assigning a Name to a Attribute (line 409):
        # Getting the type of 'False' (line 409)
        False_163134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 31), 'False')
        # Getting the type of 'self' (line 409)
        self_163135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 12), 'self')
        # Setting the type of the member 'drag_active' of a type (line 409)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 409, 12), self_163135, 'drag_active', False_163134)
        
        # Call to release_mouse(...): (line 410)
        # Processing the call arguments (line 410)
        # Getting the type of 'self' (line 410)
        self_163139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 39), 'self', False)
        # Obtaining the member 'ax' of a type (line 410)
        ax_163140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 39), self_163139, 'ax')
        # Processing the call keyword arguments (line 410)
        kwargs_163141 = {}
        # Getting the type of 'event' (line 410)
        event_163136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 12), 'event', False)
        # Obtaining the member 'canvas' of a type (line 410)
        canvas_163137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 12), event_163136, 'canvas')
        # Obtaining the member 'release_mouse' of a type (line 410)
        release_mouse_163138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 12), canvas_163137, 'release_mouse')
        # Calling release_mouse(args, kwargs) (line 410)
        release_mouse_call_result_163142 = invoke(stypy.reporting.localization.Localization(__file__, 410, 12), release_mouse_163138, *[ax_163140], **kwargs_163141)
        
        # Assigning a type to the variable 'stypy_return_type' (line 411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 406)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 403)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 412):
        
        # Assigning a Call to a Name (line 412):
        
        # Call to _value_in_bounds(...): (line 412)
        # Processing the call arguments (line 412)
        # Getting the type of 'event' (line 412)
        event_163145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 36), 'event', False)
        # Obtaining the member 'xdata' of a type (line 412)
        xdata_163146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 36), event_163145, 'xdata')
        # Processing the call keyword arguments (line 412)
        kwargs_163147 = {}
        # Getting the type of 'self' (line 412)
        self_163143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 14), 'self', False)
        # Obtaining the member '_value_in_bounds' of a type (line 412)
        _value_in_bounds_163144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 14), self_163143, '_value_in_bounds')
        # Calling _value_in_bounds(args, kwargs) (line 412)
        _value_in_bounds_call_result_163148 = invoke(stypy.reporting.localization.Localization(__file__, 412, 14), _value_in_bounds_163144, *[xdata_163146], **kwargs_163147)
        
        # Assigning a type to the variable 'val' (line 412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 8), 'val', _value_in_bounds_call_result_163148)
        
        # Type idiom detected: calculating its left and rigth part (line 413)
        # Getting the type of 'val' (line 413)
        val_163149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'val')
        # Getting the type of 'None' (line 413)
        None_163150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 22), 'None')
        
        (may_be_163151, more_types_in_union_163152) = may_not_be_none(val_163149, None_163150)

        if may_be_163151:

            if more_types_in_union_163152:
                # Runtime conditional SSA (line 413)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_val(...): (line 414)
            # Processing the call arguments (line 414)
            # Getting the type of 'val' (line 414)
            val_163155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 25), 'val', False)
            # Processing the call keyword arguments (line 414)
            kwargs_163156 = {}
            # Getting the type of 'self' (line 414)
            self_163153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 12), 'self', False)
            # Obtaining the member 'set_val' of a type (line 414)
            set_val_163154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 12), self_163153, 'set_val')
            # Calling set_val(args, kwargs) (line 414)
            set_val_call_result_163157 = invoke(stypy.reporting.localization.Localization(__file__, 414, 12), set_val_163154, *[val_163155], **kwargs_163156)
            

            if more_types_in_union_163152:
                # SSA join for if statement (line 413)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '_update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update' in the type store
        # Getting the type of 'stypy_return_type' (line 391)
        stypy_return_type_163158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_163158)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update'
        return stypy_return_type_163158


    @norecursion
    def set_val(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_val'
        module_type_store = module_type_store.open_function_context('set_val', 416, 4, False)
        # Assigning a type to the variable 'self' (line 417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 417, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Slider.set_val.__dict__.__setitem__('stypy_localization', localization)
        Slider.set_val.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Slider.set_val.__dict__.__setitem__('stypy_type_store', module_type_store)
        Slider.set_val.__dict__.__setitem__('stypy_function_name', 'Slider.set_val')
        Slider.set_val.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Slider.set_val.__dict__.__setitem__('stypy_varargs_param_name', None)
        Slider.set_val.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Slider.set_val.__dict__.__setitem__('stypy_call_defaults', defaults)
        Slider.set_val.__dict__.__setitem__('stypy_call_varargs', varargs)
        Slider.set_val.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Slider.set_val.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Slider.set_val', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_val', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_val(...)' code ##################

        
        # Assigning a Attribute to a Name (line 417):
        
        # Assigning a Attribute to a Name (line 417):
        # Getting the type of 'self' (line 417)
        self_163159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 13), 'self')
        # Obtaining the member 'poly' of a type (line 417)
        poly_163160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 417, 13), self_163159, 'poly')
        # Obtaining the member 'xy' of a type (line 417)
        xy_163161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 417, 13), poly_163160, 'xy')
        # Assigning a type to the variable 'xy' (line 417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 417, 8), 'xy', xy_163161)
        
        # Assigning a Tuple to a Subscript (line 418):
        
        # Assigning a Tuple to a Subscript (line 418):
        
        # Obtaining an instance of the builtin type 'tuple' (line 418)
        tuple_163162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 418)
        # Adding element type (line 418)
        # Getting the type of 'val' (line 418)
        val_163163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 16), 'val')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 418, 16), tuple_163162, val_163163)
        # Adding element type (line 418)
        int_163164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 418, 16), tuple_163162, int_163164)
        
        # Getting the type of 'xy' (line 418)
        xy_163165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 8), 'xy')
        int_163166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 11), 'int')
        # Storing an element on a container (line 418)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 418, 8), xy_163165, (int_163166, tuple_163162))
        
        # Assigning a Tuple to a Subscript (line 419):
        
        # Assigning a Tuple to a Subscript (line 419):
        
        # Obtaining an instance of the builtin type 'tuple' (line 419)
        tuple_163167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 419)
        # Adding element type (line 419)
        # Getting the type of 'val' (line 419)
        val_163168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 16), 'val')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 419, 16), tuple_163167, val_163168)
        # Adding element type (line 419)
        int_163169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 419, 16), tuple_163167, int_163169)
        
        # Getting the type of 'xy' (line 419)
        xy_163170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 8), 'xy')
        int_163171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 11), 'int')
        # Storing an element on a container (line 419)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 419, 8), xy_163170, (int_163171, tuple_163167))
        
        # Assigning a Name to a Attribute (line 420):
        
        # Assigning a Name to a Attribute (line 420):
        # Getting the type of 'xy' (line 420)
        xy_163172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 23), 'xy')
        # Getting the type of 'self' (line 420)
        self_163173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 8), 'self')
        # Obtaining the member 'poly' of a type (line 420)
        poly_163174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 8), self_163173, 'poly')
        # Setting the type of the member 'xy' of a type (line 420)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 8), poly_163174, 'xy', xy_163172)
        
        # Call to set_text(...): (line 421)
        # Processing the call arguments (line 421)
        # Getting the type of 'self' (line 421)
        self_163178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 30), 'self', False)
        # Obtaining the member 'valfmt' of a type (line 421)
        valfmt_163179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 421, 30), self_163178, 'valfmt')
        # Getting the type of 'val' (line 421)
        val_163180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 44), 'val', False)
        # Applying the binary operator '%' (line 421)
        result_mod_163181 = python_operator(stypy.reporting.localization.Localization(__file__, 421, 30), '%', valfmt_163179, val_163180)
        
        # Processing the call keyword arguments (line 421)
        kwargs_163182 = {}
        # Getting the type of 'self' (line 421)
        self_163175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 8), 'self', False)
        # Obtaining the member 'valtext' of a type (line 421)
        valtext_163176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 421, 8), self_163175, 'valtext')
        # Obtaining the member 'set_text' of a type (line 421)
        set_text_163177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 421, 8), valtext_163176, 'set_text')
        # Calling set_text(args, kwargs) (line 421)
        set_text_call_result_163183 = invoke(stypy.reporting.localization.Localization(__file__, 421, 8), set_text_163177, *[result_mod_163181], **kwargs_163182)
        
        
        # Getting the type of 'self' (line 422)
        self_163184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 11), 'self')
        # Obtaining the member 'drawon' of a type (line 422)
        drawon_163185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 11), self_163184, 'drawon')
        # Testing the type of an if condition (line 422)
        if_condition_163186 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 422, 8), drawon_163185)
        # Assigning a type to the variable 'if_condition_163186' (line 422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 422, 8), 'if_condition_163186', if_condition_163186)
        # SSA begins for if statement (line 422)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw_idle(...): (line 423)
        # Processing the call keyword arguments (line 423)
        kwargs_163192 = {}
        # Getting the type of 'self' (line 423)
        self_163187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 423)
        ax_163188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 12), self_163187, 'ax')
        # Obtaining the member 'figure' of a type (line 423)
        figure_163189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 12), ax_163188, 'figure')
        # Obtaining the member 'canvas' of a type (line 423)
        canvas_163190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 12), figure_163189, 'canvas')
        # Obtaining the member 'draw_idle' of a type (line 423)
        draw_idle_163191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 12), canvas_163190, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 423)
        draw_idle_call_result_163193 = invoke(stypy.reporting.localization.Localization(__file__, 423, 12), draw_idle_163191, *[], **kwargs_163192)
        
        # SSA join for if statement (line 422)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 424):
        
        # Assigning a Name to a Attribute (line 424):
        # Getting the type of 'val' (line 424)
        val_163194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 19), 'val')
        # Getting the type of 'self' (line 424)
        self_163195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 8), 'self')
        # Setting the type of the member 'val' of a type (line 424)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 424, 8), self_163195, 'val', val_163194)
        
        
        # Getting the type of 'self' (line 425)
        self_163196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 15), 'self')
        # Obtaining the member 'eventson' of a type (line 425)
        eventson_163197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 15), self_163196, 'eventson')
        # Applying the 'not' unary operator (line 425)
        result_not__163198 = python_operator(stypy.reporting.localization.Localization(__file__, 425, 11), 'not', eventson_163197)
        
        # Testing the type of an if condition (line 425)
        if_condition_163199 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 425, 8), result_not__163198)
        # Assigning a type to the variable 'if_condition_163199' (line 425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 425, 8), 'if_condition_163199', if_condition_163199)
        # SSA begins for if statement (line 425)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 425)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to iteritems(...): (line 427)
        # Processing the call arguments (line 427)
        # Getting the type of 'self' (line 427)
        self_163202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 39), 'self', False)
        # Obtaining the member 'observers' of a type (line 427)
        observers_163203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 39), self_163202, 'observers')
        # Processing the call keyword arguments (line 427)
        kwargs_163204 = {}
        # Getting the type of 'six' (line 427)
        six_163200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 25), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 427)
        iteritems_163201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 25), six_163200, 'iteritems')
        # Calling iteritems(args, kwargs) (line 427)
        iteritems_call_result_163205 = invoke(stypy.reporting.localization.Localization(__file__, 427, 25), iteritems_163201, *[observers_163203], **kwargs_163204)
        
        # Testing the type of a for loop iterable (line 427)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 427, 8), iteritems_call_result_163205)
        # Getting the type of the for loop variable (line 427)
        for_loop_var_163206 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 427, 8), iteritems_call_result_163205)
        # Assigning a type to the variable 'cid' (line 427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 8), 'cid', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 427, 8), for_loop_var_163206))
        # Assigning a type to the variable 'func' (line 427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 8), 'func', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 427, 8), for_loop_var_163206))
        # SSA begins for a for statement (line 427)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to func(...): (line 428)
        # Processing the call arguments (line 428)
        # Getting the type of 'val' (line 428)
        val_163208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 17), 'val', False)
        # Processing the call keyword arguments (line 428)
        kwargs_163209 = {}
        # Getting the type of 'func' (line 428)
        func_163207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 12), 'func', False)
        # Calling func(args, kwargs) (line 428)
        func_call_result_163210 = invoke(stypy.reporting.localization.Localization(__file__, 428, 12), func_163207, *[val_163208], **kwargs_163209)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_val(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_val' in the type store
        # Getting the type of 'stypy_return_type' (line 416)
        stypy_return_type_163211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_163211)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_val'
        return stypy_return_type_163211


    @norecursion
    def on_changed(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'on_changed'
        module_type_store = module_type_store.open_function_context('on_changed', 430, 4, False)
        # Assigning a type to the variable 'self' (line 431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 431, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Slider.on_changed.__dict__.__setitem__('stypy_localization', localization)
        Slider.on_changed.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Slider.on_changed.__dict__.__setitem__('stypy_type_store', module_type_store)
        Slider.on_changed.__dict__.__setitem__('stypy_function_name', 'Slider.on_changed')
        Slider.on_changed.__dict__.__setitem__('stypy_param_names_list', ['func'])
        Slider.on_changed.__dict__.__setitem__('stypy_varargs_param_name', None)
        Slider.on_changed.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Slider.on_changed.__dict__.__setitem__('stypy_call_defaults', defaults)
        Slider.on_changed.__dict__.__setitem__('stypy_call_varargs', varargs)
        Slider.on_changed.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Slider.on_changed.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Slider.on_changed', ['func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'on_changed', localization, ['func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'on_changed(...)' code ##################

        unicode_163212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, (-1)), 'unicode', u'\n        When the slider value is changed, call *func* with the new\n        slider position\n\n        A connection id is returned which can be used to disconnect\n        ')
        
        # Assigning a Attribute to a Name (line 437):
        
        # Assigning a Attribute to a Name (line 437):
        # Getting the type of 'self' (line 437)
        self_163213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 14), 'self')
        # Obtaining the member 'cnt' of a type (line 437)
        cnt_163214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 437, 14), self_163213, 'cnt')
        # Assigning a type to the variable 'cid' (line 437)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 437, 8), 'cid', cnt_163214)
        
        # Assigning a Name to a Subscript (line 438):
        
        # Assigning a Name to a Subscript (line 438):
        # Getting the type of 'func' (line 438)
        func_163215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 30), 'func')
        # Getting the type of 'self' (line 438)
        self_163216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 8), 'self')
        # Obtaining the member 'observers' of a type (line 438)
        observers_163217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 438, 8), self_163216, 'observers')
        # Getting the type of 'cid' (line 438)
        cid_163218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 23), 'cid')
        # Storing an element on a container (line 438)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 438, 8), observers_163217, (cid_163218, func_163215))
        
        # Getting the type of 'self' (line 439)
        self_163219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 8), 'self')
        # Obtaining the member 'cnt' of a type (line 439)
        cnt_163220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 439, 8), self_163219, 'cnt')
        int_163221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 439, 20), 'int')
        # Applying the binary operator '+=' (line 439)
        result_iadd_163222 = python_operator(stypy.reporting.localization.Localization(__file__, 439, 8), '+=', cnt_163220, int_163221)
        # Getting the type of 'self' (line 439)
        self_163223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 8), 'self')
        # Setting the type of the member 'cnt' of a type (line 439)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 439, 8), self_163223, 'cnt', result_iadd_163222)
        
        # Getting the type of 'cid' (line 440)
        cid_163224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 15), 'cid')
        # Assigning a type to the variable 'stypy_return_type' (line 440)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 440, 8), 'stypy_return_type', cid_163224)
        
        # ################# End of 'on_changed(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'on_changed' in the type store
        # Getting the type of 'stypy_return_type' (line 430)
        stypy_return_type_163225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_163225)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'on_changed'
        return stypy_return_type_163225


    @norecursion
    def disconnect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'disconnect'
        module_type_store = module_type_store.open_function_context('disconnect', 442, 4, False)
        # Assigning a type to the variable 'self' (line 443)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 443, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Slider.disconnect.__dict__.__setitem__('stypy_localization', localization)
        Slider.disconnect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Slider.disconnect.__dict__.__setitem__('stypy_type_store', module_type_store)
        Slider.disconnect.__dict__.__setitem__('stypy_function_name', 'Slider.disconnect')
        Slider.disconnect.__dict__.__setitem__('stypy_param_names_list', ['cid'])
        Slider.disconnect.__dict__.__setitem__('stypy_varargs_param_name', None)
        Slider.disconnect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Slider.disconnect.__dict__.__setitem__('stypy_call_defaults', defaults)
        Slider.disconnect.__dict__.__setitem__('stypy_call_varargs', varargs)
        Slider.disconnect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Slider.disconnect.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Slider.disconnect', ['cid'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'disconnect', localization, ['cid'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'disconnect(...)' code ##################

        unicode_163226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 443, 8), 'unicode', u'remove the observer with connection id *cid*')
        
        
        # SSA begins for try-except statement (line 444)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        # Deleting a member
        # Getting the type of 'self' (line 445)
        self_163227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 16), 'self')
        # Obtaining the member 'observers' of a type (line 445)
        observers_163228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 16), self_163227, 'observers')
        
        # Obtaining the type of the subscript
        # Getting the type of 'cid' (line 445)
        cid_163229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 31), 'cid')
        # Getting the type of 'self' (line 445)
        self_163230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 16), 'self')
        # Obtaining the member 'observers' of a type (line 445)
        observers_163231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 16), self_163230, 'observers')
        # Obtaining the member '__getitem__' of a type (line 445)
        getitem___163232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 16), observers_163231, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 445)
        subscript_call_result_163233 = invoke(stypy.reporting.localization.Localization(__file__, 445, 16), getitem___163232, cid_163229)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 445, 12), observers_163228, subscript_call_result_163233)
        # SSA branch for the except part of a try statement (line 444)
        # SSA branch for the except 'KeyError' branch of a try statement (line 444)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 444)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'disconnect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'disconnect' in the type store
        # Getting the type of 'stypy_return_type' (line 442)
        stypy_return_type_163234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_163234)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'disconnect'
        return stypy_return_type_163234


    @norecursion
    def reset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'reset'
        module_type_store = module_type_store.open_function_context('reset', 449, 4, False)
        # Assigning a type to the variable 'self' (line 450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Slider.reset.__dict__.__setitem__('stypy_localization', localization)
        Slider.reset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Slider.reset.__dict__.__setitem__('stypy_type_store', module_type_store)
        Slider.reset.__dict__.__setitem__('stypy_function_name', 'Slider.reset')
        Slider.reset.__dict__.__setitem__('stypy_param_names_list', [])
        Slider.reset.__dict__.__setitem__('stypy_varargs_param_name', None)
        Slider.reset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Slider.reset.__dict__.__setitem__('stypy_call_defaults', defaults)
        Slider.reset.__dict__.__setitem__('stypy_call_varargs', varargs)
        Slider.reset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Slider.reset.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Slider.reset', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'reset', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'reset(...)' code ##################

        unicode_163235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 450, 8), 'unicode', u'reset the slider to the initial value if needed')
        
        
        # Getting the type of 'self' (line 451)
        self_163236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 12), 'self')
        # Obtaining the member 'val' of a type (line 451)
        val_163237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 451, 12), self_163236, 'val')
        # Getting the type of 'self' (line 451)
        self_163238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 24), 'self')
        # Obtaining the member 'valinit' of a type (line 451)
        valinit_163239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 451, 24), self_163238, 'valinit')
        # Applying the binary operator '!=' (line 451)
        result_ne_163240 = python_operator(stypy.reporting.localization.Localization(__file__, 451, 12), '!=', val_163237, valinit_163239)
        
        # Testing the type of an if condition (line 451)
        if_condition_163241 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 451, 8), result_ne_163240)
        # Assigning a type to the variable 'if_condition_163241' (line 451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 451, 8), 'if_condition_163241', if_condition_163241)
        # SSA begins for if statement (line 451)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_val(...): (line 452)
        # Processing the call arguments (line 452)
        # Getting the type of 'self' (line 452)
        self_163244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 25), 'self', False)
        # Obtaining the member 'valinit' of a type (line 452)
        valinit_163245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 452, 25), self_163244, 'valinit')
        # Processing the call keyword arguments (line 452)
        kwargs_163246 = {}
        # Getting the type of 'self' (line 452)
        self_163242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 12), 'self', False)
        # Obtaining the member 'set_val' of a type (line 452)
        set_val_163243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 452, 12), self_163242, 'set_val')
        # Calling set_val(args, kwargs) (line 452)
        set_val_call_result_163247 = invoke(stypy.reporting.localization.Localization(__file__, 452, 12), set_val_163243, *[valinit_163245], **kwargs_163246)
        
        # SSA join for if statement (line 451)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'reset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'reset' in the type store
        # Getting the type of 'stypy_return_type' (line 449)
        stypy_return_type_163248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_163248)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'reset'
        return stypy_return_type_163248


# Assigning a type to the variable 'Slider' (line 265)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 265, 0), 'Slider', Slider)
# Declaration of the 'CheckButtons' class
# Getting the type of 'AxesWidget' (line 455)
AxesWidget_163249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 19), 'AxesWidget')

class CheckButtons(AxesWidget_163249, ):
    unicode_163250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, (-1)), 'unicode', u"\n    A GUI neutral set of check buttons.\n\n    For the check buttons to remain responsive you must keep a\n    reference to this object.\n\n    The following attributes are exposed\n\n     *ax*\n        The :class:`matplotlib.axes.Axes` instance the buttons are\n        located in\n\n     *labels*\n        List of :class:`matplotlib.text.Text` instances\n\n     *lines*\n        List of (line1, line2) tuples for the x's in the check boxes.\n        These lines exist for each box, but have ``set_visible(False)``\n        when its box is not checked.\n\n     *rectangles*\n        List of :class:`matplotlib.patches.Rectangle` instances\n\n    Connect to the CheckButtons with the :meth:`on_clicked` method\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 481, 4, False)
        # Assigning a type to the variable 'self' (line 482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CheckButtons.__init__', ['ax', 'labels', 'actives'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'labels', 'actives'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_163251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 491, (-1)), 'unicode', u'\n        Add check buttons to :class:`matplotlib.axes.Axes` instance *ax*\n\n        *labels*\n            A len(buttons) list of labels as strings\n\n        *actives*\n            A len(buttons) list of booleans indicating whether\n             the button is active\n        ')
        
        # Call to __init__(...): (line 492)
        # Processing the call arguments (line 492)
        # Getting the type of 'self' (line 492)
        self_163254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 28), 'self', False)
        # Getting the type of 'ax' (line 492)
        ax_163255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 34), 'ax', False)
        # Processing the call keyword arguments (line 492)
        kwargs_163256 = {}
        # Getting the type of 'AxesWidget' (line 492)
        AxesWidget_163252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 8), 'AxesWidget', False)
        # Obtaining the member '__init__' of a type (line 492)
        init___163253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 8), AxesWidget_163252, '__init__')
        # Calling __init__(args, kwargs) (line 492)
        init___call_result_163257 = invoke(stypy.reporting.localization.Localization(__file__, 492, 8), init___163253, *[self_163254, ax_163255], **kwargs_163256)
        
        
        # Call to set_xticks(...): (line 494)
        # Processing the call arguments (line 494)
        
        # Obtaining an instance of the builtin type 'list' (line 494)
        list_163260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 494, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 494)
        
        # Processing the call keyword arguments (line 494)
        kwargs_163261 = {}
        # Getting the type of 'ax' (line 494)
        ax_163258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 8), 'ax', False)
        # Obtaining the member 'set_xticks' of a type (line 494)
        set_xticks_163259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 8), ax_163258, 'set_xticks')
        # Calling set_xticks(args, kwargs) (line 494)
        set_xticks_call_result_163262 = invoke(stypy.reporting.localization.Localization(__file__, 494, 8), set_xticks_163259, *[list_163260], **kwargs_163261)
        
        
        # Call to set_yticks(...): (line 495)
        # Processing the call arguments (line 495)
        
        # Obtaining an instance of the builtin type 'list' (line 495)
        list_163265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 495)
        
        # Processing the call keyword arguments (line 495)
        kwargs_163266 = {}
        # Getting the type of 'ax' (line 495)
        ax_163263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 8), 'ax', False)
        # Obtaining the member 'set_yticks' of a type (line 495)
        set_yticks_163264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 8), ax_163263, 'set_yticks')
        # Calling set_yticks(args, kwargs) (line 495)
        set_yticks_call_result_163267 = invoke(stypy.reporting.localization.Localization(__file__, 495, 8), set_yticks_163264, *[list_163265], **kwargs_163266)
        
        
        # Call to set_navigate(...): (line 496)
        # Processing the call arguments (line 496)
        # Getting the type of 'False' (line 496)
        False_163270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 24), 'False', False)
        # Processing the call keyword arguments (line 496)
        kwargs_163271 = {}
        # Getting the type of 'ax' (line 496)
        ax_163268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 8), 'ax', False)
        # Obtaining the member 'set_navigate' of a type (line 496)
        set_navigate_163269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 8), ax_163268, 'set_navigate')
        # Calling set_navigate(args, kwargs) (line 496)
        set_navigate_call_result_163272 = invoke(stypy.reporting.localization.Localization(__file__, 496, 8), set_navigate_163269, *[False_163270], **kwargs_163271)
        
        
        
        
        # Call to len(...): (line 498)
        # Processing the call arguments (line 498)
        # Getting the type of 'labels' (line 498)
        labels_163274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 15), 'labels', False)
        # Processing the call keyword arguments (line 498)
        kwargs_163275 = {}
        # Getting the type of 'len' (line 498)
        len_163273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 11), 'len', False)
        # Calling len(args, kwargs) (line 498)
        len_call_result_163276 = invoke(stypy.reporting.localization.Localization(__file__, 498, 11), len_163273, *[labels_163274], **kwargs_163275)
        
        int_163277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 498, 25), 'int')
        # Applying the binary operator '>' (line 498)
        result_gt_163278 = python_operator(stypy.reporting.localization.Localization(__file__, 498, 11), '>', len_call_result_163276, int_163277)
        
        # Testing the type of an if condition (line 498)
        if_condition_163279 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 498, 8), result_gt_163278)
        # Assigning a type to the variable 'if_condition_163279' (line 498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 8), 'if_condition_163279', if_condition_163279)
        # SSA begins for if statement (line 498)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 499):
        
        # Assigning a BinOp to a Name (line 499):
        float_163280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 499, 17), 'float')
        
        # Call to len(...): (line 499)
        # Processing the call arguments (line 499)
        # Getting the type of 'labels' (line 499)
        labels_163282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 27), 'labels', False)
        # Processing the call keyword arguments (line 499)
        kwargs_163283 = {}
        # Getting the type of 'len' (line 499)
        len_163281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 23), 'len', False)
        # Calling len(args, kwargs) (line 499)
        len_call_result_163284 = invoke(stypy.reporting.localization.Localization(__file__, 499, 23), len_163281, *[labels_163282], **kwargs_163283)
        
        int_163285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 499, 37), 'int')
        # Applying the binary operator '+' (line 499)
        result_add_163286 = python_operator(stypy.reporting.localization.Localization(__file__, 499, 23), '+', len_call_result_163284, int_163285)
        
        # Applying the binary operator 'div' (line 499)
        result_div_163287 = python_operator(stypy.reporting.localization.Localization(__file__, 499, 17), 'div', float_163280, result_add_163286)
        
        # Assigning a type to the variable 'dy' (line 499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 12), 'dy', result_div_163287)
        
        # Assigning a Call to a Name (line 500):
        
        # Assigning a Call to a Name (line 500):
        
        # Call to linspace(...): (line 500)
        # Processing the call arguments (line 500)
        int_163290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 500, 29), 'int')
        # Getting the type of 'dy' (line 500)
        dy_163291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 33), 'dy', False)
        # Applying the binary operator '-' (line 500)
        result_sub_163292 = python_operator(stypy.reporting.localization.Localization(__file__, 500, 29), '-', int_163290, dy_163291)
        
        # Getting the type of 'dy' (line 500)
        dy_163293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 37), 'dy', False)
        
        # Call to len(...): (line 500)
        # Processing the call arguments (line 500)
        # Getting the type of 'labels' (line 500)
        labels_163295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 45), 'labels', False)
        # Processing the call keyword arguments (line 500)
        kwargs_163296 = {}
        # Getting the type of 'len' (line 500)
        len_163294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 41), 'len', False)
        # Calling len(args, kwargs) (line 500)
        len_call_result_163297 = invoke(stypy.reporting.localization.Localization(__file__, 500, 41), len_163294, *[labels_163295], **kwargs_163296)
        
        # Processing the call keyword arguments (line 500)
        kwargs_163298 = {}
        # Getting the type of 'np' (line 500)
        np_163288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 17), 'np', False)
        # Obtaining the member 'linspace' of a type (line 500)
        linspace_163289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 500, 17), np_163288, 'linspace')
        # Calling linspace(args, kwargs) (line 500)
        linspace_call_result_163299 = invoke(stypy.reporting.localization.Localization(__file__, 500, 17), linspace_163289, *[result_sub_163292, dy_163293, len_call_result_163297], **kwargs_163298)
        
        # Assigning a type to the variable 'ys' (line 500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 12), 'ys', linspace_call_result_163299)
        # SSA branch for the else part of an if statement (line 498)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 502):
        
        # Assigning a Num to a Name (line 502):
        float_163300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 17), 'float')
        # Assigning a type to the variable 'dy' (line 502)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 502, 12), 'dy', float_163300)
        
        # Assigning a List to a Name (line 503):
        
        # Assigning a List to a Name (line 503):
        
        # Obtaining an instance of the builtin type 'list' (line 503)
        list_163301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 503)
        # Adding element type (line 503)
        float_163302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, 18), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 503, 17), list_163301, float_163302)
        
        # Assigning a type to the variable 'ys' (line 503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 12), 'ys', list_163301)
        # SSA join for if statement (line 498)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Name (line 505):
        
        # Assigning a Num to a Name (line 505):
        int_163303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 14), 'int')
        # Assigning a type to the variable 'cnt' (line 505)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 505, 8), 'cnt', int_163303)
        
        # Assigning a Call to a Name (line 506):
        
        # Assigning a Call to a Name (line 506):
        
        # Call to get_facecolor(...): (line 506)
        # Processing the call keyword arguments (line 506)
        kwargs_163306 = {}
        # Getting the type of 'ax' (line 506)
        ax_163304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 18), 'ax', False)
        # Obtaining the member 'get_facecolor' of a type (line 506)
        get_facecolor_163305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 506, 18), ax_163304, 'get_facecolor')
        # Calling get_facecolor(args, kwargs) (line 506)
        get_facecolor_call_result_163307 = invoke(stypy.reporting.localization.Localization(__file__, 506, 18), get_facecolor_163305, *[], **kwargs_163306)
        
        # Assigning a type to the variable 'axcolor' (line 506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 506, 8), 'axcolor', get_facecolor_call_result_163307)
        
        # Assigning a List to a Attribute (line 508):
        
        # Assigning a List to a Attribute (line 508):
        
        # Obtaining an instance of the builtin type 'list' (line 508)
        list_163308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 508, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 508)
        
        # Getting the type of 'self' (line 508)
        self_163309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'self')
        # Setting the type of the member 'labels' of a type (line 508)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 8), self_163309, 'labels', list_163308)
        
        # Assigning a List to a Attribute (line 509):
        
        # Assigning a List to a Attribute (line 509):
        
        # Obtaining an instance of the builtin type 'list' (line 509)
        list_163310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 509)
        
        # Getting the type of 'self' (line 509)
        self_163311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 8), 'self')
        # Setting the type of the member 'lines' of a type (line 509)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 509, 8), self_163311, 'lines', list_163310)
        
        # Assigning a List to a Attribute (line 510):
        
        # Assigning a List to a Attribute (line 510):
        
        # Obtaining an instance of the builtin type 'list' (line 510)
        list_163312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 510)
        
        # Getting the type of 'self' (line 510)
        self_163313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'self')
        # Setting the type of the member 'rectangles' of a type (line 510)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 8), self_163313, 'rectangles', list_163312)
        
        # Assigning a Dict to a Name (line 512):
        
        # Assigning a Dict to a Name (line 512):
        
        # Obtaining an instance of the builtin type 'dict' (line 512)
        dict_163314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 21), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 512)
        # Adding element type (key, value) (line 512)
        unicode_163315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 22), 'unicode', u'color')
        unicode_163316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 31), 'unicode', u'k')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 512, 21), dict_163314, (unicode_163315, unicode_163316))
        # Adding element type (key, value) (line 512)
        unicode_163317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 36), 'unicode', u'linewidth')
        float_163318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 49), 'float')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 512, 21), dict_163314, (unicode_163317, float_163318))
        # Adding element type (key, value) (line 512)
        unicode_163319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 513, 22), 'unicode', u'transform')
        # Getting the type of 'ax' (line 513)
        ax_163320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 35), 'ax')
        # Obtaining the member 'transAxes' of a type (line 513)
        transAxes_163321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 35), ax_163320, 'transAxes')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 512, 21), dict_163314, (unicode_163319, transAxes_163321))
        # Adding element type (key, value) (line 512)
        unicode_163322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 513, 49), 'unicode', u'solid_capstyle')
        unicode_163323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 513, 67), 'unicode', u'butt')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 512, 21), dict_163314, (unicode_163322, unicode_163323))
        
        # Assigning a type to the variable 'lineparams' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 8), 'lineparams', dict_163314)
        
        
        # Call to zip(...): (line 514)
        # Processing the call arguments (line 514)
        # Getting the type of 'ys' (line 514)
        ys_163325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 28), 'ys', False)
        # Getting the type of 'labels' (line 514)
        labels_163326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 32), 'labels', False)
        # Processing the call keyword arguments (line 514)
        kwargs_163327 = {}
        # Getting the type of 'zip' (line 514)
        zip_163324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 24), 'zip', False)
        # Calling zip(args, kwargs) (line 514)
        zip_call_result_163328 = invoke(stypy.reporting.localization.Localization(__file__, 514, 24), zip_163324, *[ys_163325, labels_163326], **kwargs_163327)
        
        # Testing the type of a for loop iterable (line 514)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 514, 8), zip_call_result_163328)
        # Getting the type of the for loop variable (line 514)
        for_loop_var_163329 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 514, 8), zip_call_result_163328)
        # Assigning a type to the variable 'y' (line 514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 8), 'y', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 514, 8), for_loop_var_163329))
        # Assigning a type to the variable 'label' (line 514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 8), 'label', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 514, 8), for_loop_var_163329))
        # SSA begins for a for statement (line 514)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 515):
        
        # Assigning a Call to a Name (line 515):
        
        # Call to text(...): (line 515)
        # Processing the call arguments (line 515)
        float_163332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 515, 24), 'float')
        # Getting the type of 'y' (line 515)
        y_163333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 30), 'y', False)
        # Getting the type of 'label' (line 515)
        label_163334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 33), 'label', False)
        # Processing the call keyword arguments (line 515)
        # Getting the type of 'ax' (line 515)
        ax_163335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 50), 'ax', False)
        # Obtaining the member 'transAxes' of a type (line 515)
        transAxes_163336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 50), ax_163335, 'transAxes')
        keyword_163337 = transAxes_163336
        unicode_163338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 516, 44), 'unicode', u'left')
        keyword_163339 = unicode_163338
        unicode_163340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, 42), 'unicode', u'center')
        keyword_163341 = unicode_163340
        kwargs_163342 = {'verticalalignment': keyword_163341, 'horizontalalignment': keyword_163339, 'transform': keyword_163337}
        # Getting the type of 'ax' (line 515)
        ax_163330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 16), 'ax', False)
        # Obtaining the member 'text' of a type (line 515)
        text_163331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 16), ax_163330, 'text')
        # Calling text(args, kwargs) (line 515)
        text_call_result_163343 = invoke(stypy.reporting.localization.Localization(__file__, 515, 16), text_163331, *[float_163332, y_163333, label_163334], **kwargs_163342)
        
        # Assigning a type to the variable 't' (line 515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 12), 't', text_call_result_163343)
        
        # Assigning a Tuple to a Tuple (line 519):
        
        # Assigning a BinOp to a Name (line 519):
        # Getting the type of 'dy' (line 519)
        dy_163344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 19), 'dy')
        float_163345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 24), 'float')
        # Applying the binary operator 'div' (line 519)
        result_div_163346 = python_operator(stypy.reporting.localization.Localization(__file__, 519, 19), 'div', dy_163344, float_163345)
        
        # Assigning a type to the variable 'tuple_assignment_162269' (line 519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'tuple_assignment_162269', result_div_163346)
        
        # Assigning a BinOp to a Name (line 519):
        # Getting the type of 'dy' (line 519)
        dy_163347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 28), 'dy')
        float_163348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 33), 'float')
        # Applying the binary operator 'div' (line 519)
        result_div_163349 = python_operator(stypy.reporting.localization.Localization(__file__, 519, 28), 'div', dy_163347, float_163348)
        
        # Assigning a type to the variable 'tuple_assignment_162270' (line 519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'tuple_assignment_162270', result_div_163349)
        
        # Assigning a Name to a Name (line 519):
        # Getting the type of 'tuple_assignment_162269' (line 519)
        tuple_assignment_162269_163350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'tuple_assignment_162269')
        # Assigning a type to the variable 'w' (line 519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'w', tuple_assignment_162269_163350)
        
        # Assigning a Name to a Name (line 519):
        # Getting the type of 'tuple_assignment_162270' (line 519)
        tuple_assignment_162270_163351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'tuple_assignment_162270')
        # Assigning a type to the variable 'h' (line 519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 15), 'h', tuple_assignment_162270_163351)
        
        # Assigning a Tuple to a Tuple (line 520):
        
        # Assigning a Num to a Name (line 520):
        float_163352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 19), 'float')
        # Assigning a type to the variable 'tuple_assignment_162271' (line 520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 12), 'tuple_assignment_162271', float_163352)
        
        # Assigning a BinOp to a Name (line 520):
        # Getting the type of 'y' (line 520)
        y_163353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 25), 'y')
        # Getting the type of 'h' (line 520)
        h_163354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 29), 'h')
        float_163355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 33), 'float')
        # Applying the binary operator 'div' (line 520)
        result_div_163356 = python_operator(stypy.reporting.localization.Localization(__file__, 520, 29), 'div', h_163354, float_163355)
        
        # Applying the binary operator '-' (line 520)
        result_sub_163357 = python_operator(stypy.reporting.localization.Localization(__file__, 520, 25), '-', y_163353, result_div_163356)
        
        # Assigning a type to the variable 'tuple_assignment_162272' (line 520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 12), 'tuple_assignment_162272', result_sub_163357)
        
        # Assigning a Name to a Name (line 520):
        # Getting the type of 'tuple_assignment_162271' (line 520)
        tuple_assignment_162271_163358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 12), 'tuple_assignment_162271')
        # Assigning a type to the variable 'x' (line 520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 12), 'x', tuple_assignment_162271_163358)
        
        # Assigning a Name to a Name (line 520):
        # Getting the type of 'tuple_assignment_162272' (line 520)
        tuple_assignment_162272_163359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 12), 'tuple_assignment_162272')
        # Assigning a type to the variable 'y' (line 520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 15), 'y', tuple_assignment_162272_163359)
        
        # Assigning a Call to a Name (line 522):
        
        # Assigning a Call to a Name (line 522):
        
        # Call to Rectangle(...): (line 522)
        # Processing the call keyword arguments (line 522)
        
        # Obtaining an instance of the builtin type 'tuple' (line 522)
        tuple_163361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 522, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 522)
        # Adding element type (line 522)
        # Getting the type of 'x' (line 522)
        x_163362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 30), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 522, 30), tuple_163361, x_163362)
        # Adding element type (line 522)
        # Getting the type of 'y' (line 522)
        y_163363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 33), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 522, 30), tuple_163361, y_163363)
        
        keyword_163364 = tuple_163361
        # Getting the type of 'w' (line 522)
        w_163365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 43), 'w', False)
        keyword_163366 = w_163365
        # Getting the type of 'h' (line 522)
        h_163367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 53), 'h', False)
        keyword_163368 = h_163367
        unicode_163369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 522, 66), 'unicode', u'black')
        keyword_163370 = unicode_163369
        # Getting the type of 'axcolor' (line 523)
        axcolor_163371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 36), 'axcolor', False)
        keyword_163372 = axcolor_163371
        # Getting the type of 'ax' (line 523)
        ax_163373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 55), 'ax', False)
        # Obtaining the member 'transAxes' of a type (line 523)
        transAxes_163374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 55), ax_163373, 'transAxes')
        keyword_163375 = transAxes_163374
        kwargs_163376 = {'edgecolor': keyword_163370, 'facecolor': keyword_163372, 'transform': keyword_163375, 'height': keyword_163368, 'width': keyword_163366, 'xy': keyword_163364}
        # Getting the type of 'Rectangle' (line 522)
        Rectangle_163360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 16), 'Rectangle', False)
        # Calling Rectangle(args, kwargs) (line 522)
        Rectangle_call_result_163377 = invoke(stypy.reporting.localization.Localization(__file__, 522, 16), Rectangle_163360, *[], **kwargs_163376)
        
        # Assigning a type to the variable 'p' (line 522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 12), 'p', Rectangle_call_result_163377)
        
        # Assigning a Call to a Name (line 525):
        
        # Assigning a Call to a Name (line 525):
        
        # Call to Line2D(...): (line 525)
        # Processing the call arguments (line 525)
        
        # Obtaining an instance of the builtin type 'list' (line 525)
        list_163379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 525, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 525)
        # Adding element type (line 525)
        # Getting the type of 'x' (line 525)
        x_163380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 25), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 525, 24), list_163379, x_163380)
        # Adding element type (line 525)
        # Getting the type of 'x' (line 525)
        x_163381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 28), 'x', False)
        # Getting the type of 'w' (line 525)
        w_163382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 32), 'w', False)
        # Applying the binary operator '+' (line 525)
        result_add_163383 = python_operator(stypy.reporting.localization.Localization(__file__, 525, 28), '+', x_163381, w_163382)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 525, 24), list_163379, result_add_163383)
        
        
        # Obtaining an instance of the builtin type 'list' (line 525)
        list_163384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 525, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 525)
        # Adding element type (line 525)
        # Getting the type of 'y' (line 525)
        y_163385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 37), 'y', False)
        # Getting the type of 'h' (line 525)
        h_163386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 41), 'h', False)
        # Applying the binary operator '+' (line 525)
        result_add_163387 = python_operator(stypy.reporting.localization.Localization(__file__, 525, 37), '+', y_163385, h_163386)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 525, 36), list_163384, result_add_163387)
        # Adding element type (line 525)
        # Getting the type of 'y' (line 525)
        y_163388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 44), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 525, 36), list_163384, y_163388)
        
        # Processing the call keyword arguments (line 525)
        # Getting the type of 'lineparams' (line 525)
        lineparams_163389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 50), 'lineparams', False)
        kwargs_163390 = {'lineparams_163389': lineparams_163389}
        # Getting the type of 'Line2D' (line 525)
        Line2D_163378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 17), 'Line2D', False)
        # Calling Line2D(args, kwargs) (line 525)
        Line2D_call_result_163391 = invoke(stypy.reporting.localization.Localization(__file__, 525, 17), Line2D_163378, *[list_163379, list_163384], **kwargs_163390)
        
        # Assigning a type to the variable 'l1' (line 525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 525, 12), 'l1', Line2D_call_result_163391)
        
        # Assigning a Call to a Name (line 526):
        
        # Assigning a Call to a Name (line 526):
        
        # Call to Line2D(...): (line 526)
        # Processing the call arguments (line 526)
        
        # Obtaining an instance of the builtin type 'list' (line 526)
        list_163393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 526)
        # Adding element type (line 526)
        # Getting the type of 'x' (line 526)
        x_163394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 25), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 526, 24), list_163393, x_163394)
        # Adding element type (line 526)
        # Getting the type of 'x' (line 526)
        x_163395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 28), 'x', False)
        # Getting the type of 'w' (line 526)
        w_163396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 32), 'w', False)
        # Applying the binary operator '+' (line 526)
        result_add_163397 = python_operator(stypy.reporting.localization.Localization(__file__, 526, 28), '+', x_163395, w_163396)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 526, 24), list_163393, result_add_163397)
        
        
        # Obtaining an instance of the builtin type 'list' (line 526)
        list_163398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 526)
        # Adding element type (line 526)
        # Getting the type of 'y' (line 526)
        y_163399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 37), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 526, 36), list_163398, y_163399)
        # Adding element type (line 526)
        # Getting the type of 'y' (line 526)
        y_163400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 40), 'y', False)
        # Getting the type of 'h' (line 526)
        h_163401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 44), 'h', False)
        # Applying the binary operator '+' (line 526)
        result_add_163402 = python_operator(stypy.reporting.localization.Localization(__file__, 526, 40), '+', y_163400, h_163401)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 526, 36), list_163398, result_add_163402)
        
        # Processing the call keyword arguments (line 526)
        # Getting the type of 'lineparams' (line 526)
        lineparams_163403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 50), 'lineparams', False)
        kwargs_163404 = {'lineparams_163403': lineparams_163403}
        # Getting the type of 'Line2D' (line 526)
        Line2D_163392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 17), 'Line2D', False)
        # Calling Line2D(args, kwargs) (line 526)
        Line2D_call_result_163405 = invoke(stypy.reporting.localization.Localization(__file__, 526, 17), Line2D_163392, *[list_163393, list_163398], **kwargs_163404)
        
        # Assigning a type to the variable 'l2' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 12), 'l2', Line2D_call_result_163405)
        
        # Call to set_visible(...): (line 528)
        # Processing the call arguments (line 528)
        
        # Obtaining the type of the subscript
        # Getting the type of 'cnt' (line 528)
        cnt_163408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 35), 'cnt', False)
        # Getting the type of 'actives' (line 528)
        actives_163409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 27), 'actives', False)
        # Obtaining the member '__getitem__' of a type (line 528)
        getitem___163410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 27), actives_163409, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 528)
        subscript_call_result_163411 = invoke(stypy.reporting.localization.Localization(__file__, 528, 27), getitem___163410, cnt_163408)
        
        # Processing the call keyword arguments (line 528)
        kwargs_163412 = {}
        # Getting the type of 'l1' (line 528)
        l1_163406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 12), 'l1', False)
        # Obtaining the member 'set_visible' of a type (line 528)
        set_visible_163407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 12), l1_163406, 'set_visible')
        # Calling set_visible(args, kwargs) (line 528)
        set_visible_call_result_163413 = invoke(stypy.reporting.localization.Localization(__file__, 528, 12), set_visible_163407, *[subscript_call_result_163411], **kwargs_163412)
        
        
        # Call to set_visible(...): (line 529)
        # Processing the call arguments (line 529)
        
        # Obtaining the type of the subscript
        # Getting the type of 'cnt' (line 529)
        cnt_163416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 35), 'cnt', False)
        # Getting the type of 'actives' (line 529)
        actives_163417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 27), 'actives', False)
        # Obtaining the member '__getitem__' of a type (line 529)
        getitem___163418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 27), actives_163417, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 529)
        subscript_call_result_163419 = invoke(stypy.reporting.localization.Localization(__file__, 529, 27), getitem___163418, cnt_163416)
        
        # Processing the call keyword arguments (line 529)
        kwargs_163420 = {}
        # Getting the type of 'l2' (line 529)
        l2_163414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 12), 'l2', False)
        # Obtaining the member 'set_visible' of a type (line 529)
        set_visible_163415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 12), l2_163414, 'set_visible')
        # Calling set_visible(args, kwargs) (line 529)
        set_visible_call_result_163421 = invoke(stypy.reporting.localization.Localization(__file__, 529, 12), set_visible_163415, *[subscript_call_result_163419], **kwargs_163420)
        
        
        # Call to append(...): (line 530)
        # Processing the call arguments (line 530)
        # Getting the type of 't' (line 530)
        t_163425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 31), 't', False)
        # Processing the call keyword arguments (line 530)
        kwargs_163426 = {}
        # Getting the type of 'self' (line 530)
        self_163422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 12), 'self', False)
        # Obtaining the member 'labels' of a type (line 530)
        labels_163423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 12), self_163422, 'labels')
        # Obtaining the member 'append' of a type (line 530)
        append_163424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 12), labels_163423, 'append')
        # Calling append(args, kwargs) (line 530)
        append_call_result_163427 = invoke(stypy.reporting.localization.Localization(__file__, 530, 12), append_163424, *[t_163425], **kwargs_163426)
        
        
        # Call to append(...): (line 531)
        # Processing the call arguments (line 531)
        # Getting the type of 'p' (line 531)
        p_163431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 35), 'p', False)
        # Processing the call keyword arguments (line 531)
        kwargs_163432 = {}
        # Getting the type of 'self' (line 531)
        self_163428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 12), 'self', False)
        # Obtaining the member 'rectangles' of a type (line 531)
        rectangles_163429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 12), self_163428, 'rectangles')
        # Obtaining the member 'append' of a type (line 531)
        append_163430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 12), rectangles_163429, 'append')
        # Calling append(args, kwargs) (line 531)
        append_call_result_163433 = invoke(stypy.reporting.localization.Localization(__file__, 531, 12), append_163430, *[p_163431], **kwargs_163432)
        
        
        # Call to append(...): (line 532)
        # Processing the call arguments (line 532)
        
        # Obtaining an instance of the builtin type 'tuple' (line 532)
        tuple_163437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 532, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 532)
        # Adding element type (line 532)
        # Getting the type of 'l1' (line 532)
        l1_163438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 31), 'l1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 532, 31), tuple_163437, l1_163438)
        # Adding element type (line 532)
        # Getting the type of 'l2' (line 532)
        l2_163439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 35), 'l2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 532, 31), tuple_163437, l2_163439)
        
        # Processing the call keyword arguments (line 532)
        kwargs_163440 = {}
        # Getting the type of 'self' (line 532)
        self_163434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 12), 'self', False)
        # Obtaining the member 'lines' of a type (line 532)
        lines_163435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 12), self_163434, 'lines')
        # Obtaining the member 'append' of a type (line 532)
        append_163436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 12), lines_163435, 'append')
        # Calling append(args, kwargs) (line 532)
        append_call_result_163441 = invoke(stypy.reporting.localization.Localization(__file__, 532, 12), append_163436, *[tuple_163437], **kwargs_163440)
        
        
        # Call to add_patch(...): (line 533)
        # Processing the call arguments (line 533)
        # Getting the type of 'p' (line 533)
        p_163444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 25), 'p', False)
        # Processing the call keyword arguments (line 533)
        kwargs_163445 = {}
        # Getting the type of 'ax' (line 533)
        ax_163442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 12), 'ax', False)
        # Obtaining the member 'add_patch' of a type (line 533)
        add_patch_163443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 12), ax_163442, 'add_patch')
        # Calling add_patch(args, kwargs) (line 533)
        add_patch_call_result_163446 = invoke(stypy.reporting.localization.Localization(__file__, 533, 12), add_patch_163443, *[p_163444], **kwargs_163445)
        
        
        # Call to add_line(...): (line 534)
        # Processing the call arguments (line 534)
        # Getting the type of 'l1' (line 534)
        l1_163449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 24), 'l1', False)
        # Processing the call keyword arguments (line 534)
        kwargs_163450 = {}
        # Getting the type of 'ax' (line 534)
        ax_163447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 12), 'ax', False)
        # Obtaining the member 'add_line' of a type (line 534)
        add_line_163448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 12), ax_163447, 'add_line')
        # Calling add_line(args, kwargs) (line 534)
        add_line_call_result_163451 = invoke(stypy.reporting.localization.Localization(__file__, 534, 12), add_line_163448, *[l1_163449], **kwargs_163450)
        
        
        # Call to add_line(...): (line 535)
        # Processing the call arguments (line 535)
        # Getting the type of 'l2' (line 535)
        l2_163454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 24), 'l2', False)
        # Processing the call keyword arguments (line 535)
        kwargs_163455 = {}
        # Getting the type of 'ax' (line 535)
        ax_163452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 12), 'ax', False)
        # Obtaining the member 'add_line' of a type (line 535)
        add_line_163453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 12), ax_163452, 'add_line')
        # Calling add_line(args, kwargs) (line 535)
        add_line_call_result_163456 = invoke(stypy.reporting.localization.Localization(__file__, 535, 12), add_line_163453, *[l2_163454], **kwargs_163455)
        
        
        # Getting the type of 'cnt' (line 536)
        cnt_163457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 12), 'cnt')
        int_163458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 536, 19), 'int')
        # Applying the binary operator '+=' (line 536)
        result_iadd_163459 = python_operator(stypy.reporting.localization.Localization(__file__, 536, 12), '+=', cnt_163457, int_163458)
        # Assigning a type to the variable 'cnt' (line 536)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 536, 12), 'cnt', result_iadd_163459)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to connect_event(...): (line 538)
        # Processing the call arguments (line 538)
        unicode_163462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 27), 'unicode', u'button_press_event')
        # Getting the type of 'self' (line 538)
        self_163463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 49), 'self', False)
        # Obtaining the member '_clicked' of a type (line 538)
        _clicked_163464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 49), self_163463, '_clicked')
        # Processing the call keyword arguments (line 538)
        kwargs_163465 = {}
        # Getting the type of 'self' (line 538)
        self_163460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 538)
        connect_event_163461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 8), self_163460, 'connect_event')
        # Calling connect_event(args, kwargs) (line 538)
        connect_event_call_result_163466 = invoke(stypy.reporting.localization.Localization(__file__, 538, 8), connect_event_163461, *[unicode_163462, _clicked_163464], **kwargs_163465)
        
        
        # Assigning a Num to a Attribute (line 540):
        
        # Assigning a Num to a Attribute (line 540):
        int_163467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, 19), 'int')
        # Getting the type of 'self' (line 540)
        self_163468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 8), 'self')
        # Setting the type of the member 'cnt' of a type (line 540)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 8), self_163468, 'cnt', int_163467)
        
        # Assigning a Dict to a Attribute (line 541):
        
        # Assigning a Dict to a Attribute (line 541):
        
        # Obtaining an instance of the builtin type 'dict' (line 541)
        dict_163469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 25), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 541)
        
        # Getting the type of 'self' (line 541)
        self_163470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'self')
        # Setting the type of the member 'observers' of a type (line 541)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 8), self_163470, 'observers', dict_163469)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _clicked(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_clicked'
        module_type_store = module_type_store.open_function_context('_clicked', 543, 4, False)
        # Assigning a type to the variable 'self' (line 544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CheckButtons._clicked.__dict__.__setitem__('stypy_localization', localization)
        CheckButtons._clicked.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CheckButtons._clicked.__dict__.__setitem__('stypy_type_store', module_type_store)
        CheckButtons._clicked.__dict__.__setitem__('stypy_function_name', 'CheckButtons._clicked')
        CheckButtons._clicked.__dict__.__setitem__('stypy_param_names_list', ['event'])
        CheckButtons._clicked.__dict__.__setitem__('stypy_varargs_param_name', None)
        CheckButtons._clicked.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CheckButtons._clicked.__dict__.__setitem__('stypy_call_defaults', defaults)
        CheckButtons._clicked.__dict__.__setitem__('stypy_call_varargs', varargs)
        CheckButtons._clicked.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CheckButtons._clicked.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CheckButtons._clicked', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_clicked', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_clicked(...)' code ##################

        
        
        # Call to ignore(...): (line 544)
        # Processing the call arguments (line 544)
        # Getting the type of 'event' (line 544)
        event_163473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 23), 'event', False)
        # Processing the call keyword arguments (line 544)
        kwargs_163474 = {}
        # Getting the type of 'self' (line 544)
        self_163471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 11), 'self', False)
        # Obtaining the member 'ignore' of a type (line 544)
        ignore_163472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 11), self_163471, 'ignore')
        # Calling ignore(args, kwargs) (line 544)
        ignore_call_result_163475 = invoke(stypy.reporting.localization.Localization(__file__, 544, 11), ignore_163472, *[event_163473], **kwargs_163474)
        
        # Testing the type of an if condition (line 544)
        if_condition_163476 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 544, 8), ignore_call_result_163475)
        # Assigning a type to the variable 'if_condition_163476' (line 544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 8), 'if_condition_163476', if_condition_163476)
        # SSA begins for if statement (line 544)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 545, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 544)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'event' (line 546)
        event_163477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 11), 'event')
        # Obtaining the member 'button' of a type (line 546)
        button_163478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 11), event_163477, 'button')
        int_163479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, 27), 'int')
        # Applying the binary operator '!=' (line 546)
        result_ne_163480 = python_operator(stypy.reporting.localization.Localization(__file__, 546, 11), '!=', button_163478, int_163479)
        
        # Testing the type of an if condition (line 546)
        if_condition_163481 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 546, 8), result_ne_163480)
        # Assigning a type to the variable 'if_condition_163481' (line 546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 8), 'if_condition_163481', if_condition_163481)
        # SSA begins for if statement (line 546)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 546)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'event' (line 548)
        event_163482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 11), 'event')
        # Obtaining the member 'inaxes' of a type (line 548)
        inaxes_163483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 11), event_163482, 'inaxes')
        # Getting the type of 'self' (line 548)
        self_163484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 27), 'self')
        # Obtaining the member 'ax' of a type (line 548)
        ax_163485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 27), self_163484, 'ax')
        # Applying the binary operator '!=' (line 548)
        result_ne_163486 = python_operator(stypy.reporting.localization.Localization(__file__, 548, 11), '!=', inaxes_163483, ax_163485)
        
        # Testing the type of an if condition (line 548)
        if_condition_163487 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 548, 8), result_ne_163486)
        # Assigning a type to the variable 'if_condition_163487' (line 548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 8), 'if_condition_163487', if_condition_163487)
        # SSA begins for if statement (line 548)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 548)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to enumerate(...): (line 551)
        # Processing the call arguments (line 551)
        
        # Call to zip(...): (line 551)
        # Processing the call arguments (line 551)
        # Getting the type of 'self' (line 551)
        self_163490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 39), 'self', False)
        # Obtaining the member 'rectangles' of a type (line 551)
        rectangles_163491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 39), self_163490, 'rectangles')
        # Getting the type of 'self' (line 551)
        self_163492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 56), 'self', False)
        # Obtaining the member 'labels' of a type (line 551)
        labels_163493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 56), self_163492, 'labels')
        # Processing the call keyword arguments (line 551)
        kwargs_163494 = {}
        # Getting the type of 'zip' (line 551)
        zip_163489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 35), 'zip', False)
        # Calling zip(args, kwargs) (line 551)
        zip_call_result_163495 = invoke(stypy.reporting.localization.Localization(__file__, 551, 35), zip_163489, *[rectangles_163491, labels_163493], **kwargs_163494)
        
        # Processing the call keyword arguments (line 551)
        kwargs_163496 = {}
        # Getting the type of 'enumerate' (line 551)
        enumerate_163488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 25), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 551)
        enumerate_call_result_163497 = invoke(stypy.reporting.localization.Localization(__file__, 551, 25), enumerate_163488, *[zip_call_result_163495], **kwargs_163496)
        
        # Testing the type of a for loop iterable (line 551)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 551, 8), enumerate_call_result_163497)
        # Getting the type of the for loop variable (line 551)
        for_loop_var_163498 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 551, 8), enumerate_call_result_163497)
        # Assigning a type to the variable 'i' (line 551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 551, 8), for_loop_var_163498))
        # Assigning a type to the variable 'p' (line 551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 8), 'p', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 551, 8), for_loop_var_163498))
        # Assigning a type to the variable 't' (line 551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 8), 't', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 551, 8), for_loop_var_163498))
        # SSA begins for a for statement (line 551)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Evaluating a boolean operation
        
        # Call to contains(...): (line 552)
        # Processing the call arguments (line 552)
        # Getting the type of 'event' (line 552)
        event_163504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 47), 'event', False)
        # Obtaining the member 'x' of a type (line 552)
        x_163505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 47), event_163504, 'x')
        # Getting the type of 'event' (line 552)
        event_163506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 56), 'event', False)
        # Obtaining the member 'y' of a type (line 552)
        y_163507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 56), event_163506, 'y')
        # Processing the call keyword arguments (line 552)
        kwargs_163508 = {}
        
        # Call to get_window_extent(...): (line 552)
        # Processing the call keyword arguments (line 552)
        kwargs_163501 = {}
        # Getting the type of 't' (line 552)
        t_163499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 16), 't', False)
        # Obtaining the member 'get_window_extent' of a type (line 552)
        get_window_extent_163500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 16), t_163499, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 552)
        get_window_extent_call_result_163502 = invoke(stypy.reporting.localization.Localization(__file__, 552, 16), get_window_extent_163500, *[], **kwargs_163501)
        
        # Obtaining the member 'contains' of a type (line 552)
        contains_163503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 16), get_window_extent_call_result_163502, 'contains')
        # Calling contains(args, kwargs) (line 552)
        contains_call_result_163509 = invoke(stypy.reporting.localization.Localization(__file__, 552, 16), contains_163503, *[x_163505, y_163507], **kwargs_163508)
        
        
        # Call to contains(...): (line 553)
        # Processing the call arguments (line 553)
        # Getting the type of 'event' (line 553)
        event_163515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 51), 'event', False)
        # Obtaining the member 'x' of a type (line 553)
        x_163516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 51), event_163515, 'x')
        # Getting the type of 'event' (line 553)
        event_163517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 60), 'event', False)
        # Obtaining the member 'y' of a type (line 553)
        y_163518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 60), event_163517, 'y')
        # Processing the call keyword arguments (line 553)
        kwargs_163519 = {}
        
        # Call to get_window_extent(...): (line 553)
        # Processing the call keyword arguments (line 553)
        kwargs_163512 = {}
        # Getting the type of 'p' (line 553)
        p_163510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 20), 'p', False)
        # Obtaining the member 'get_window_extent' of a type (line 553)
        get_window_extent_163511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 20), p_163510, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 553)
        get_window_extent_call_result_163513 = invoke(stypy.reporting.localization.Localization(__file__, 553, 20), get_window_extent_163511, *[], **kwargs_163512)
        
        # Obtaining the member 'contains' of a type (line 553)
        contains_163514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 20), get_window_extent_call_result_163513, 'contains')
        # Calling contains(args, kwargs) (line 553)
        contains_call_result_163520 = invoke(stypy.reporting.localization.Localization(__file__, 553, 20), contains_163514, *[x_163516, y_163518], **kwargs_163519)
        
        # Applying the binary operator 'or' (line 552)
        result_or_keyword_163521 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 16), 'or', contains_call_result_163509, contains_call_result_163520)
        
        # Testing the type of an if condition (line 552)
        if_condition_163522 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 552, 12), result_or_keyword_163521)
        # Assigning a type to the variable 'if_condition_163522' (line 552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 12), 'if_condition_163522', if_condition_163522)
        # SSA begins for if statement (line 552)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_active(...): (line 554)
        # Processing the call arguments (line 554)
        # Getting the type of 'i' (line 554)
        i_163525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 32), 'i', False)
        # Processing the call keyword arguments (line 554)
        kwargs_163526 = {}
        # Getting the type of 'self' (line 554)
        self_163523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 16), 'self', False)
        # Obtaining the member 'set_active' of a type (line 554)
        set_active_163524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 16), self_163523, 'set_active')
        # Calling set_active(args, kwargs) (line 554)
        set_active_call_result_163527 = invoke(stypy.reporting.localization.Localization(__file__, 554, 16), set_active_163524, *[i_163525], **kwargs_163526)
        
        # SSA join for if statement (line 552)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of a for statement (line 551)
        module_type_store.open_ssa_branch('for loop else')
        # Assigning a type to the variable 'stypy_return_type' (line 557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 12), 'stypy_return_type', types.NoneType)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_clicked(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_clicked' in the type store
        # Getting the type of 'stypy_return_type' (line 543)
        stypy_return_type_163528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_163528)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_clicked'
        return stypy_return_type_163528


    @norecursion
    def set_active(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_active'
        module_type_store = module_type_store.open_function_context('set_active', 559, 4, False)
        # Assigning a type to the variable 'self' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CheckButtons.set_active.__dict__.__setitem__('stypy_localization', localization)
        CheckButtons.set_active.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CheckButtons.set_active.__dict__.__setitem__('stypy_type_store', module_type_store)
        CheckButtons.set_active.__dict__.__setitem__('stypy_function_name', 'CheckButtons.set_active')
        CheckButtons.set_active.__dict__.__setitem__('stypy_param_names_list', ['index'])
        CheckButtons.set_active.__dict__.__setitem__('stypy_varargs_param_name', None)
        CheckButtons.set_active.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CheckButtons.set_active.__dict__.__setitem__('stypy_call_defaults', defaults)
        CheckButtons.set_active.__dict__.__setitem__('stypy_call_varargs', varargs)
        CheckButtons.set_active.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CheckButtons.set_active.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CheckButtons.set_active', ['index'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_active', localization, ['index'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_active(...)' code ##################

        unicode_163529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 569, (-1)), 'unicode', u'\n        Directly (de)activate a check button by index.\n\n        *index* is an index into the original label list\n            that this object was constructed with.\n            Raises ValueError if *index* is invalid.\n\n        Callbacks will be triggered if :attr:`eventson` is True.\n\n        ')
        
        
        int_163530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 570, 11), 'int')
        # Getting the type of 'index' (line 570)
        index_163531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 15), 'index')
        # Applying the binary operator '>' (line 570)
        result_gt_163532 = python_operator(stypy.reporting.localization.Localization(__file__, 570, 11), '>', int_163530, index_163531)
        
        # Call to len(...): (line 570)
        # Processing the call arguments (line 570)
        # Getting the type of 'self' (line 570)
        self_163534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 28), 'self', False)
        # Obtaining the member 'labels' of a type (line 570)
        labels_163535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 28), self_163534, 'labels')
        # Processing the call keyword arguments (line 570)
        kwargs_163536 = {}
        # Getting the type of 'len' (line 570)
        len_163533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 24), 'len', False)
        # Calling len(args, kwargs) (line 570)
        len_call_result_163537 = invoke(stypy.reporting.localization.Localization(__file__, 570, 24), len_163533, *[labels_163535], **kwargs_163536)
        
        # Applying the binary operator '>=' (line 570)
        result_ge_163538 = python_operator(stypy.reporting.localization.Localization(__file__, 570, 11), '>=', index_163531, len_call_result_163537)
        # Applying the binary operator '&' (line 570)
        result_and__163539 = python_operator(stypy.reporting.localization.Localization(__file__, 570, 11), '&', result_gt_163532, result_ge_163538)
        
        # Testing the type of an if condition (line 570)
        if_condition_163540 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 570, 8), result_and__163539)
        # Assigning a type to the variable 'if_condition_163540' (line 570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 570, 8), 'if_condition_163540', if_condition_163540)
        # SSA begins for if statement (line 570)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 571)
        # Processing the call arguments (line 571)
        unicode_163542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 571, 29), 'unicode', u'Invalid CheckButton index: %d')
        # Getting the type of 'index' (line 571)
        index_163543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 63), 'index', False)
        # Applying the binary operator '%' (line 571)
        result_mod_163544 = python_operator(stypy.reporting.localization.Localization(__file__, 571, 29), '%', unicode_163542, index_163543)
        
        # Processing the call keyword arguments (line 571)
        kwargs_163545 = {}
        # Getting the type of 'ValueError' (line 571)
        ValueError_163541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 571)
        ValueError_call_result_163546 = invoke(stypy.reporting.localization.Localization(__file__, 571, 18), ValueError_163541, *[result_mod_163544], **kwargs_163545)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 571, 12), ValueError_call_result_163546, 'raise parameter', BaseException)
        # SSA join for if statement (line 570)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Tuple (line 573):
        
        # Assigning a Subscript to a Name (line 573):
        
        # Obtaining the type of the subscript
        int_163547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 573, 8), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'index' (line 573)
        index_163548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 28), 'index')
        # Getting the type of 'self' (line 573)
        self_163549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 17), 'self')
        # Obtaining the member 'lines' of a type (line 573)
        lines_163550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 17), self_163549, 'lines')
        # Obtaining the member '__getitem__' of a type (line 573)
        getitem___163551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 17), lines_163550, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 573)
        subscript_call_result_163552 = invoke(stypy.reporting.localization.Localization(__file__, 573, 17), getitem___163551, index_163548)
        
        # Obtaining the member '__getitem__' of a type (line 573)
        getitem___163553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 8), subscript_call_result_163552, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 573)
        subscript_call_result_163554 = invoke(stypy.reporting.localization.Localization(__file__, 573, 8), getitem___163553, int_163547)
        
        # Assigning a type to the variable 'tuple_var_assignment_162273' (line 573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 573, 8), 'tuple_var_assignment_162273', subscript_call_result_163554)
        
        # Assigning a Subscript to a Name (line 573):
        
        # Obtaining the type of the subscript
        int_163555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 573, 8), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'index' (line 573)
        index_163556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 28), 'index')
        # Getting the type of 'self' (line 573)
        self_163557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 17), 'self')
        # Obtaining the member 'lines' of a type (line 573)
        lines_163558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 17), self_163557, 'lines')
        # Obtaining the member '__getitem__' of a type (line 573)
        getitem___163559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 17), lines_163558, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 573)
        subscript_call_result_163560 = invoke(stypy.reporting.localization.Localization(__file__, 573, 17), getitem___163559, index_163556)
        
        # Obtaining the member '__getitem__' of a type (line 573)
        getitem___163561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 8), subscript_call_result_163560, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 573)
        subscript_call_result_163562 = invoke(stypy.reporting.localization.Localization(__file__, 573, 8), getitem___163561, int_163555)
        
        # Assigning a type to the variable 'tuple_var_assignment_162274' (line 573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 573, 8), 'tuple_var_assignment_162274', subscript_call_result_163562)
        
        # Assigning a Name to a Name (line 573):
        # Getting the type of 'tuple_var_assignment_162273' (line 573)
        tuple_var_assignment_162273_163563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 8), 'tuple_var_assignment_162273')
        # Assigning a type to the variable 'l1' (line 573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 573, 8), 'l1', tuple_var_assignment_162273_163563)
        
        # Assigning a Name to a Name (line 573):
        # Getting the type of 'tuple_var_assignment_162274' (line 573)
        tuple_var_assignment_162274_163564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 8), 'tuple_var_assignment_162274')
        # Assigning a type to the variable 'l2' (line 573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 573, 12), 'l2', tuple_var_assignment_162274_163564)
        
        # Call to set_visible(...): (line 574)
        # Processing the call arguments (line 574)
        
        
        # Call to get_visible(...): (line 574)
        # Processing the call keyword arguments (line 574)
        kwargs_163569 = {}
        # Getting the type of 'l1' (line 574)
        l1_163567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 27), 'l1', False)
        # Obtaining the member 'get_visible' of a type (line 574)
        get_visible_163568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 27), l1_163567, 'get_visible')
        # Calling get_visible(args, kwargs) (line 574)
        get_visible_call_result_163570 = invoke(stypy.reporting.localization.Localization(__file__, 574, 27), get_visible_163568, *[], **kwargs_163569)
        
        # Applying the 'not' unary operator (line 574)
        result_not__163571 = python_operator(stypy.reporting.localization.Localization(__file__, 574, 23), 'not', get_visible_call_result_163570)
        
        # Processing the call keyword arguments (line 574)
        kwargs_163572 = {}
        # Getting the type of 'l1' (line 574)
        l1_163565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 8), 'l1', False)
        # Obtaining the member 'set_visible' of a type (line 574)
        set_visible_163566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 8), l1_163565, 'set_visible')
        # Calling set_visible(args, kwargs) (line 574)
        set_visible_call_result_163573 = invoke(stypy.reporting.localization.Localization(__file__, 574, 8), set_visible_163566, *[result_not__163571], **kwargs_163572)
        
        
        # Call to set_visible(...): (line 575)
        # Processing the call arguments (line 575)
        
        
        # Call to get_visible(...): (line 575)
        # Processing the call keyword arguments (line 575)
        kwargs_163578 = {}
        # Getting the type of 'l2' (line 575)
        l2_163576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 27), 'l2', False)
        # Obtaining the member 'get_visible' of a type (line 575)
        get_visible_163577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 27), l2_163576, 'get_visible')
        # Calling get_visible(args, kwargs) (line 575)
        get_visible_call_result_163579 = invoke(stypy.reporting.localization.Localization(__file__, 575, 27), get_visible_163577, *[], **kwargs_163578)
        
        # Applying the 'not' unary operator (line 575)
        result_not__163580 = python_operator(stypy.reporting.localization.Localization(__file__, 575, 23), 'not', get_visible_call_result_163579)
        
        # Processing the call keyword arguments (line 575)
        kwargs_163581 = {}
        # Getting the type of 'l2' (line 575)
        l2_163574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 8), 'l2', False)
        # Obtaining the member 'set_visible' of a type (line 575)
        set_visible_163575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 8), l2_163574, 'set_visible')
        # Calling set_visible(args, kwargs) (line 575)
        set_visible_call_result_163582 = invoke(stypy.reporting.localization.Localization(__file__, 575, 8), set_visible_163575, *[result_not__163580], **kwargs_163581)
        
        
        # Getting the type of 'self' (line 577)
        self_163583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 11), 'self')
        # Obtaining the member 'drawon' of a type (line 577)
        drawon_163584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 11), self_163583, 'drawon')
        # Testing the type of an if condition (line 577)
        if_condition_163585 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 577, 8), drawon_163584)
        # Assigning a type to the variable 'if_condition_163585' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 8), 'if_condition_163585', if_condition_163585)
        # SSA begins for if statement (line 577)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 578)
        # Processing the call keyword arguments (line 578)
        kwargs_163591 = {}
        # Getting the type of 'self' (line 578)
        self_163586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 578)
        ax_163587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 12), self_163586, 'ax')
        # Obtaining the member 'figure' of a type (line 578)
        figure_163588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 12), ax_163587, 'figure')
        # Obtaining the member 'canvas' of a type (line 578)
        canvas_163589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 12), figure_163588, 'canvas')
        # Obtaining the member 'draw' of a type (line 578)
        draw_163590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 12), canvas_163589, 'draw')
        # Calling draw(args, kwargs) (line 578)
        draw_call_result_163592 = invoke(stypy.reporting.localization.Localization(__file__, 578, 12), draw_163590, *[], **kwargs_163591)
        
        # SSA join for if statement (line 577)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 580)
        self_163593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 15), 'self')
        # Obtaining the member 'eventson' of a type (line 580)
        eventson_163594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 580, 15), self_163593, 'eventson')
        # Applying the 'not' unary operator (line 580)
        result_not__163595 = python_operator(stypy.reporting.localization.Localization(__file__, 580, 11), 'not', eventson_163594)
        
        # Testing the type of an if condition (line 580)
        if_condition_163596 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 580, 8), result_not__163595)
        # Assigning a type to the variable 'if_condition_163596' (line 580)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 580, 8), 'if_condition_163596', if_condition_163596)
        # SSA begins for if statement (line 580)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 580)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to iteritems(...): (line 582)
        # Processing the call arguments (line 582)
        # Getting the type of 'self' (line 582)
        self_163599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 39), 'self', False)
        # Obtaining the member 'observers' of a type (line 582)
        observers_163600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 39), self_163599, 'observers')
        # Processing the call keyword arguments (line 582)
        kwargs_163601 = {}
        # Getting the type of 'six' (line 582)
        six_163597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 25), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 582)
        iteritems_163598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 25), six_163597, 'iteritems')
        # Calling iteritems(args, kwargs) (line 582)
        iteritems_call_result_163602 = invoke(stypy.reporting.localization.Localization(__file__, 582, 25), iteritems_163598, *[observers_163600], **kwargs_163601)
        
        # Testing the type of a for loop iterable (line 582)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 582, 8), iteritems_call_result_163602)
        # Getting the type of the for loop variable (line 582)
        for_loop_var_163603 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 582, 8), iteritems_call_result_163602)
        # Assigning a type to the variable 'cid' (line 582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 8), 'cid', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 582, 8), for_loop_var_163603))
        # Assigning a type to the variable 'func' (line 582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 8), 'func', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 582, 8), for_loop_var_163603))
        # SSA begins for a for statement (line 582)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to func(...): (line 583)
        # Processing the call arguments (line 583)
        
        # Call to get_text(...): (line 583)
        # Processing the call keyword arguments (line 583)
        kwargs_163611 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'index' (line 583)
        index_163605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 29), 'index', False)
        # Getting the type of 'self' (line 583)
        self_163606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 17), 'self', False)
        # Obtaining the member 'labels' of a type (line 583)
        labels_163607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 583, 17), self_163606, 'labels')
        # Obtaining the member '__getitem__' of a type (line 583)
        getitem___163608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 583, 17), labels_163607, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 583)
        subscript_call_result_163609 = invoke(stypy.reporting.localization.Localization(__file__, 583, 17), getitem___163608, index_163605)
        
        # Obtaining the member 'get_text' of a type (line 583)
        get_text_163610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 583, 17), subscript_call_result_163609, 'get_text')
        # Calling get_text(args, kwargs) (line 583)
        get_text_call_result_163612 = invoke(stypy.reporting.localization.Localization(__file__, 583, 17), get_text_163610, *[], **kwargs_163611)
        
        # Processing the call keyword arguments (line 583)
        kwargs_163613 = {}
        # Getting the type of 'func' (line 583)
        func_163604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 12), 'func', False)
        # Calling func(args, kwargs) (line 583)
        func_call_result_163614 = invoke(stypy.reporting.localization.Localization(__file__, 583, 12), func_163604, *[get_text_call_result_163612], **kwargs_163613)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_active(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_active' in the type store
        # Getting the type of 'stypy_return_type' (line 559)
        stypy_return_type_163615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_163615)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_active'
        return stypy_return_type_163615


    @norecursion
    def get_status(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_status'
        module_type_store = module_type_store.open_function_context('get_status', 585, 4, False)
        # Assigning a type to the variable 'self' (line 586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 586, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CheckButtons.get_status.__dict__.__setitem__('stypy_localization', localization)
        CheckButtons.get_status.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CheckButtons.get_status.__dict__.__setitem__('stypy_type_store', module_type_store)
        CheckButtons.get_status.__dict__.__setitem__('stypy_function_name', 'CheckButtons.get_status')
        CheckButtons.get_status.__dict__.__setitem__('stypy_param_names_list', [])
        CheckButtons.get_status.__dict__.__setitem__('stypy_varargs_param_name', None)
        CheckButtons.get_status.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CheckButtons.get_status.__dict__.__setitem__('stypy_call_defaults', defaults)
        CheckButtons.get_status.__dict__.__setitem__('stypy_call_varargs', varargs)
        CheckButtons.get_status.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CheckButtons.get_status.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CheckButtons.get_status', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_status', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_status(...)' code ##################

        unicode_163616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 588, (-1)), 'unicode', u'\n        returns a tuple of the status (True/False) of all of the check buttons\n        ')
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'self' (line 589)
        self_163621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 49), 'self')
        # Obtaining the member 'lines' of a type (line 589)
        lines_163622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 49), self_163621, 'lines')
        comprehension_163623 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 589, 16), lines_163622)
        # Assigning a type to the variable 'l1' (line 589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 589, 16), 'l1', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 589, 16), comprehension_163623))
        # Assigning a type to the variable 'l2' (line 589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 589, 16), 'l2', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 589, 16), comprehension_163623))
        
        # Call to get_visible(...): (line 589)
        # Processing the call keyword arguments (line 589)
        kwargs_163619 = {}
        # Getting the type of 'l1' (line 589)
        l1_163617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 16), 'l1', False)
        # Obtaining the member 'get_visible' of a type (line 589)
        get_visible_163618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 16), l1_163617, 'get_visible')
        # Calling get_visible(args, kwargs) (line 589)
        get_visible_call_result_163620 = invoke(stypy.reporting.localization.Localization(__file__, 589, 16), get_visible_163618, *[], **kwargs_163619)
        
        list_163624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 589, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 589, 16), list_163624, get_visible_call_result_163620)
        # Assigning a type to the variable 'stypy_return_type' (line 589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 589, 8), 'stypy_return_type', list_163624)
        
        # ################# End of 'get_status(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_status' in the type store
        # Getting the type of 'stypy_return_type' (line 585)
        stypy_return_type_163625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_163625)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_status'
        return stypy_return_type_163625


    @norecursion
    def on_clicked(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'on_clicked'
        module_type_store = module_type_store.open_function_context('on_clicked', 591, 4, False)
        # Assigning a type to the variable 'self' (line 592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CheckButtons.on_clicked.__dict__.__setitem__('stypy_localization', localization)
        CheckButtons.on_clicked.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CheckButtons.on_clicked.__dict__.__setitem__('stypy_type_store', module_type_store)
        CheckButtons.on_clicked.__dict__.__setitem__('stypy_function_name', 'CheckButtons.on_clicked')
        CheckButtons.on_clicked.__dict__.__setitem__('stypy_param_names_list', ['func'])
        CheckButtons.on_clicked.__dict__.__setitem__('stypy_varargs_param_name', None)
        CheckButtons.on_clicked.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CheckButtons.on_clicked.__dict__.__setitem__('stypy_call_defaults', defaults)
        CheckButtons.on_clicked.__dict__.__setitem__('stypy_call_varargs', varargs)
        CheckButtons.on_clicked.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CheckButtons.on_clicked.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CheckButtons.on_clicked', ['func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'on_clicked', localization, ['func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'on_clicked(...)' code ##################

        unicode_163626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 596, (-1)), 'unicode', u'\n        When the button is clicked, call *func* with button label\n\n        A connection id is returned which can be used to disconnect\n        ')
        
        # Assigning a Attribute to a Name (line 597):
        
        # Assigning a Attribute to a Name (line 597):
        # Getting the type of 'self' (line 597)
        self_163627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 14), 'self')
        # Obtaining the member 'cnt' of a type (line 597)
        cnt_163628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 14), self_163627, 'cnt')
        # Assigning a type to the variable 'cid' (line 597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 8), 'cid', cnt_163628)
        
        # Assigning a Name to a Subscript (line 598):
        
        # Assigning a Name to a Subscript (line 598):
        # Getting the type of 'func' (line 598)
        func_163629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 30), 'func')
        # Getting the type of 'self' (line 598)
        self_163630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'self')
        # Obtaining the member 'observers' of a type (line 598)
        observers_163631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 8), self_163630, 'observers')
        # Getting the type of 'cid' (line 598)
        cid_163632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 23), 'cid')
        # Storing an element on a container (line 598)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 598, 8), observers_163631, (cid_163632, func_163629))
        
        # Getting the type of 'self' (line 599)
        self_163633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 8), 'self')
        # Obtaining the member 'cnt' of a type (line 599)
        cnt_163634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 8), self_163633, 'cnt')
        int_163635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 599, 20), 'int')
        # Applying the binary operator '+=' (line 599)
        result_iadd_163636 = python_operator(stypy.reporting.localization.Localization(__file__, 599, 8), '+=', cnt_163634, int_163635)
        # Getting the type of 'self' (line 599)
        self_163637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 8), 'self')
        # Setting the type of the member 'cnt' of a type (line 599)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 8), self_163637, 'cnt', result_iadd_163636)
        
        # Getting the type of 'cid' (line 600)
        cid_163638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 15), 'cid')
        # Assigning a type to the variable 'stypy_return_type' (line 600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 8), 'stypy_return_type', cid_163638)
        
        # ################# End of 'on_clicked(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'on_clicked' in the type store
        # Getting the type of 'stypy_return_type' (line 591)
        stypy_return_type_163639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_163639)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'on_clicked'
        return stypy_return_type_163639


    @norecursion
    def disconnect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'disconnect'
        module_type_store = module_type_store.open_function_context('disconnect', 602, 4, False)
        # Assigning a type to the variable 'self' (line 603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CheckButtons.disconnect.__dict__.__setitem__('stypy_localization', localization)
        CheckButtons.disconnect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CheckButtons.disconnect.__dict__.__setitem__('stypy_type_store', module_type_store)
        CheckButtons.disconnect.__dict__.__setitem__('stypy_function_name', 'CheckButtons.disconnect')
        CheckButtons.disconnect.__dict__.__setitem__('stypy_param_names_list', ['cid'])
        CheckButtons.disconnect.__dict__.__setitem__('stypy_varargs_param_name', None)
        CheckButtons.disconnect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CheckButtons.disconnect.__dict__.__setitem__('stypy_call_defaults', defaults)
        CheckButtons.disconnect.__dict__.__setitem__('stypy_call_varargs', varargs)
        CheckButtons.disconnect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CheckButtons.disconnect.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CheckButtons.disconnect', ['cid'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'disconnect', localization, ['cid'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'disconnect(...)' code ##################

        unicode_163640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 8), 'unicode', u'remove the observer with connection id *cid*')
        
        
        # SSA begins for try-except statement (line 604)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        # Deleting a member
        # Getting the type of 'self' (line 605)
        self_163641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 16), 'self')
        # Obtaining the member 'observers' of a type (line 605)
        observers_163642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 16), self_163641, 'observers')
        
        # Obtaining the type of the subscript
        # Getting the type of 'cid' (line 605)
        cid_163643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 31), 'cid')
        # Getting the type of 'self' (line 605)
        self_163644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 16), 'self')
        # Obtaining the member 'observers' of a type (line 605)
        observers_163645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 16), self_163644, 'observers')
        # Obtaining the member '__getitem__' of a type (line 605)
        getitem___163646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 16), observers_163645, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 605)
        subscript_call_result_163647 = invoke(stypy.reporting.localization.Localization(__file__, 605, 16), getitem___163646, cid_163643)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 12), observers_163642, subscript_call_result_163647)
        # SSA branch for the except part of a try statement (line 604)
        # SSA branch for the except 'KeyError' branch of a try statement (line 604)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 604)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'disconnect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'disconnect' in the type store
        # Getting the type of 'stypy_return_type' (line 602)
        stypy_return_type_163648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_163648)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'disconnect'
        return stypy_return_type_163648


# Assigning a type to the variable 'CheckButtons' (line 455)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 0), 'CheckButtons', CheckButtons)
# Declaration of the 'TextBox' class
# Getting the type of 'AxesWidget' (line 610)
AxesWidget_163649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 14), 'AxesWidget')

class TextBox(AxesWidget_163649, ):
    unicode_163650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, (-1)), 'unicode', u'\n    A GUI neutral text input box.\n\n    For the text box to remain responsive you must keep a reference to it.\n\n    The following attributes are accessible:\n\n      *ax*\n        The :class:`matplotlib.axes.Axes` the button renders into.\n\n      *label*\n        A :class:`matplotlib.text.Text` instance.\n\n      *color*\n        The color of the text box when not hovering.\n\n      *hovercolor*\n        The color of the text box when hovering.\n\n    Call :meth:`on_text_change` to be updated whenever the text changes.\n\n    Call :meth:`on_submit` to be updated whenever the user hits enter or\n    leaves the text entry field.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_163651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 42), 'unicode', u'')
        unicode_163652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 23), 'unicode', u'.95')
        unicode_163653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 41), 'unicode', u'1')
        float_163654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 56), 'float')
        defaults = [unicode_163651, unicode_163652, unicode_163653, float_163654]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 636, 4, False)
        # Assigning a type to the variable 'self' (line 637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 637, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextBox.__init__', ['ax', 'label', 'initial', 'color', 'hovercolor', 'label_pad'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'label', 'initial', 'color', 'hovercolor', 'label_pad'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_163655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 659, (-1)), 'unicode', u'\n        Parameters\n        ----------\n        ax : matplotlib.axes.Axes\n            The :class:`matplotlib.axes.Axes` instance the button\n            will be placed into.\n\n        label : str\n            Label for this text box. Accepts string.\n\n        initial : str\n            Initial value in the text box\n\n        color : color\n            The color of the box\n\n        hovercolor : color\n            The color of the box when the mouse is over it\n\n        label_pad : float\n            the distance between the label and the right side of the textbox\n        ')
        
        # Call to __init__(...): (line 660)
        # Processing the call arguments (line 660)
        # Getting the type of 'self' (line 660)
        self_163658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 28), 'self', False)
        # Getting the type of 'ax' (line 660)
        ax_163659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 34), 'ax', False)
        # Processing the call keyword arguments (line 660)
        kwargs_163660 = {}
        # Getting the type of 'AxesWidget' (line 660)
        AxesWidget_163656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 8), 'AxesWidget', False)
        # Obtaining the member '__init__' of a type (line 660)
        init___163657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 660, 8), AxesWidget_163656, '__init__')
        # Calling __init__(args, kwargs) (line 660)
        init___call_result_163661 = invoke(stypy.reporting.localization.Localization(__file__, 660, 8), init___163657, *[self_163658, ax_163659], **kwargs_163660)
        
        
        # Assigning a Num to a Attribute (line 662):
        
        # Assigning a Num to a Attribute (line 662):
        float_163662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 662, 30), 'float')
        # Getting the type of 'self' (line 662)
        self_163663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 8), 'self')
        # Setting the type of the member 'DIST_FROM_LEFT' of a type (line 662)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 8), self_163663, 'DIST_FROM_LEFT', float_163662)
        
        # Assigning a ListComp to a Attribute (line 664):
        
        # Assigning a ListComp to a Attribute (line 664):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'rcParams' (line 664)
        rcParams_163668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 49), 'rcParams')
        comprehension_163669 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 664, 34), rcParams_163668)
        # Assigning a type to the variable 'key' (line 664)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 664, 34), 'key', comprehension_163669)
        
        unicode_163665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 664, 61), 'unicode', u'keymap')
        # Getting the type of 'key' (line 664)
        key_163666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 74), 'key')
        # Applying the binary operator 'in' (line 664)
        result_contains_163667 = python_operator(stypy.reporting.localization.Localization(__file__, 664, 61), 'in', unicode_163665, key_163666)
        
        # Getting the type of 'key' (line 664)
        key_163664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 34), 'key')
        list_163670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 664, 34), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 664, 34), list_163670, key_163664)
        # Getting the type of 'self' (line 664)
        self_163671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 8), 'self')
        # Setting the type of the member 'params_to_disable' of a type (line 664)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 8), self_163671, 'params_to_disable', list_163670)
        
        # Assigning a Name to a Attribute (line 666):
        
        # Assigning a Name to a Attribute (line 666):
        # Getting the type of 'initial' (line 666)
        initial_163672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 20), 'initial')
        # Getting the type of 'self' (line 666)
        self_163673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 8), 'self')
        # Setting the type of the member 'text' of a type (line 666)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 8), self_163673, 'text', initial_163672)
        
        # Assigning a Call to a Attribute (line 667):
        
        # Assigning a Call to a Attribute (line 667):
        
        # Call to text(...): (line 667)
        # Processing the call arguments (line 667)
        
        # Getting the type of 'label_pad' (line 667)
        label_pad_163676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 30), 'label_pad', False)
        # Applying the 'usub' unary operator (line 667)
        result___neg___163677 = python_operator(stypy.reporting.localization.Localization(__file__, 667, 29), 'usub', label_pad_163676)
        
        float_163678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 667, 41), 'float')
        # Getting the type of 'label' (line 667)
        label_163679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 46), 'label', False)
        # Processing the call keyword arguments (line 667)
        unicode_163680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 668, 47), 'unicode', u'center')
        keyword_163681 = unicode_163680
        unicode_163682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 669, 49), 'unicode', u'right')
        keyword_163683 = unicode_163682
        # Getting the type of 'ax' (line 670)
        ax_163684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 39), 'ax', False)
        # Obtaining the member 'transAxes' of a type (line 670)
        transAxes_163685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 39), ax_163684, 'transAxes')
        keyword_163686 = transAxes_163685
        kwargs_163687 = {'horizontalalignment': keyword_163683, 'verticalalignment': keyword_163681, 'transform': keyword_163686}
        # Getting the type of 'ax' (line 667)
        ax_163674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 21), 'ax', False)
        # Obtaining the member 'text' of a type (line 667)
        text_163675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 21), ax_163674, 'text')
        # Calling text(args, kwargs) (line 667)
        text_call_result_163688 = invoke(stypy.reporting.localization.Localization(__file__, 667, 21), text_163675, *[result___neg___163677, float_163678, label_163679], **kwargs_163687)
        
        # Getting the type of 'self' (line 667)
        self_163689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 8), 'self')
        # Setting the type of the member 'label' of a type (line 667)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 8), self_163689, 'label', text_call_result_163688)
        
        # Assigning a Call to a Attribute (line 671):
        
        # Assigning a Call to a Attribute (line 671):
        
        # Call to _make_text_disp(...): (line 671)
        # Processing the call arguments (line 671)
        # Getting the type of 'self' (line 671)
        self_163692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 46), 'self', False)
        # Obtaining the member 'text' of a type (line 671)
        text_163693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 46), self_163692, 'text')
        # Processing the call keyword arguments (line 671)
        kwargs_163694 = {}
        # Getting the type of 'self' (line 671)
        self_163690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 25), 'self', False)
        # Obtaining the member '_make_text_disp' of a type (line 671)
        _make_text_disp_163691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 25), self_163690, '_make_text_disp')
        # Calling _make_text_disp(args, kwargs) (line 671)
        _make_text_disp_call_result_163695 = invoke(stypy.reporting.localization.Localization(__file__, 671, 25), _make_text_disp_163691, *[text_163693], **kwargs_163694)
        
        # Getting the type of 'self' (line 671)
        self_163696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 8), 'self')
        # Setting the type of the member 'text_disp' of a type (line 671)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 8), self_163696, 'text_disp', _make_text_disp_call_result_163695)
        
        # Assigning a Num to a Attribute (line 673):
        
        # Assigning a Num to a Attribute (line 673):
        int_163697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 673, 19), 'int')
        # Getting the type of 'self' (line 673)
        self_163698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 8), 'self')
        # Setting the type of the member 'cnt' of a type (line 673)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 8), self_163698, 'cnt', int_163697)
        
        # Assigning a Dict to a Attribute (line 674):
        
        # Assigning a Dict to a Attribute (line 674):
        
        # Obtaining an instance of the builtin type 'dict' (line 674)
        dict_163699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 674, 32), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 674)
        
        # Getting the type of 'self' (line 674)
        self_163700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 8), 'self')
        # Setting the type of the member 'change_observers' of a type (line 674)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 8), self_163700, 'change_observers', dict_163699)
        
        # Assigning a Dict to a Attribute (line 675):
        
        # Assigning a Dict to a Attribute (line 675):
        
        # Obtaining an instance of the builtin type 'dict' (line 675)
        dict_163701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 675, 32), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 675)
        
        # Getting the type of 'self' (line 675)
        self_163702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 8), 'self')
        # Setting the type of the member 'submit_observers' of a type (line 675)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 8), self_163702, 'submit_observers', dict_163701)
        
        # Call to set_xlim(...): (line 679)
        # Processing the call arguments (line 679)
        int_163706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 679, 25), 'int')
        int_163707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 679, 28), 'int')
        # Processing the call keyword arguments (line 679)
        kwargs_163708 = {}
        # Getting the type of 'self' (line 679)
        self_163703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'self', False)
        # Obtaining the member 'ax' of a type (line 679)
        ax_163704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 8), self_163703, 'ax')
        # Obtaining the member 'set_xlim' of a type (line 679)
        set_xlim_163705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 8), ax_163704, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 679)
        set_xlim_call_result_163709 = invoke(stypy.reporting.localization.Localization(__file__, 679, 8), set_xlim_163705, *[int_163706, int_163707], **kwargs_163708)
        
        
        # Call to set_ylim(...): (line 680)
        # Processing the call arguments (line 680)
        int_163713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 680, 25), 'int')
        int_163714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 680, 28), 'int')
        # Processing the call keyword arguments (line 680)
        kwargs_163715 = {}
        # Getting the type of 'self' (line 680)
        self_163710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 8), 'self', False)
        # Obtaining the member 'ax' of a type (line 680)
        ax_163711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 8), self_163710, 'ax')
        # Obtaining the member 'set_ylim' of a type (line 680)
        set_ylim_163712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 8), ax_163711, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 680)
        set_ylim_call_result_163716 = invoke(stypy.reporting.localization.Localization(__file__, 680, 8), set_ylim_163712, *[int_163713, int_163714], **kwargs_163715)
        
        
        # Assigning a Num to a Attribute (line 682):
        
        # Assigning a Num to a Attribute (line 682):
        int_163717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 28), 'int')
        # Getting the type of 'self' (line 682)
        self_163718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 8), 'self')
        # Setting the type of the member 'cursor_index' of a type (line 682)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 682, 8), self_163718, 'cursor_index', int_163717)
        
        # Assigning a Call to a Attribute (line 686):
        
        # Assigning a Call to a Attribute (line 686):
        
        # Call to vlines(...): (line 686)
        # Processing the call arguments (line 686)
        int_163722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 686, 37), 'int')
        int_163723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 686, 40), 'int')
        int_163724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 686, 43), 'int')
        # Processing the call keyword arguments (line 686)
        kwargs_163725 = {}
        # Getting the type of 'self' (line 686)
        self_163719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 22), 'self', False)
        # Obtaining the member 'ax' of a type (line 686)
        ax_163720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 686, 22), self_163719, 'ax')
        # Obtaining the member 'vlines' of a type (line 686)
        vlines_163721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 686, 22), ax_163720, 'vlines')
        # Calling vlines(args, kwargs) (line 686)
        vlines_call_result_163726 = invoke(stypy.reporting.localization.Localization(__file__, 686, 22), vlines_163721, *[int_163722, int_163723, int_163724], **kwargs_163725)
        
        # Getting the type of 'self' (line 686)
        self_163727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 8), 'self')
        # Setting the type of the member 'cursor' of a type (line 686)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 686, 8), self_163727, 'cursor', vlines_call_result_163726)
        
        # Call to set_visible(...): (line 687)
        # Processing the call arguments (line 687)
        # Getting the type of 'False' (line 687)
        False_163731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 32), 'False', False)
        # Processing the call keyword arguments (line 687)
        kwargs_163732 = {}
        # Getting the type of 'self' (line 687)
        self_163728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 8), 'self', False)
        # Obtaining the member 'cursor' of a type (line 687)
        cursor_163729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 8), self_163728, 'cursor')
        # Obtaining the member 'set_visible' of a type (line 687)
        set_visible_163730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 8), cursor_163729, 'set_visible')
        # Calling set_visible(args, kwargs) (line 687)
        set_visible_call_result_163733 = invoke(stypy.reporting.localization.Localization(__file__, 687, 8), set_visible_163730, *[False_163731], **kwargs_163732)
        
        
        # Call to connect_event(...): (line 689)
        # Processing the call arguments (line 689)
        unicode_163736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 689, 27), 'unicode', u'button_press_event')
        # Getting the type of 'self' (line 689)
        self_163737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 49), 'self', False)
        # Obtaining the member '_click' of a type (line 689)
        _click_163738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 49), self_163737, '_click')
        # Processing the call keyword arguments (line 689)
        kwargs_163739 = {}
        # Getting the type of 'self' (line 689)
        self_163734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 689)
        connect_event_163735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 8), self_163734, 'connect_event')
        # Calling connect_event(args, kwargs) (line 689)
        connect_event_call_result_163740 = invoke(stypy.reporting.localization.Localization(__file__, 689, 8), connect_event_163735, *[unicode_163736, _click_163738], **kwargs_163739)
        
        
        # Call to connect_event(...): (line 690)
        # Processing the call arguments (line 690)
        unicode_163743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 690, 27), 'unicode', u'button_release_event')
        # Getting the type of 'self' (line 690)
        self_163744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 51), 'self', False)
        # Obtaining the member '_release' of a type (line 690)
        _release_163745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 690, 51), self_163744, '_release')
        # Processing the call keyword arguments (line 690)
        kwargs_163746 = {}
        # Getting the type of 'self' (line 690)
        self_163741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 690)
        connect_event_163742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 690, 8), self_163741, 'connect_event')
        # Calling connect_event(args, kwargs) (line 690)
        connect_event_call_result_163747 = invoke(stypy.reporting.localization.Localization(__file__, 690, 8), connect_event_163742, *[unicode_163743, _release_163745], **kwargs_163746)
        
        
        # Call to connect_event(...): (line 691)
        # Processing the call arguments (line 691)
        unicode_163750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 691, 27), 'unicode', u'motion_notify_event')
        # Getting the type of 'self' (line 691)
        self_163751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 50), 'self', False)
        # Obtaining the member '_motion' of a type (line 691)
        _motion_163752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 691, 50), self_163751, '_motion')
        # Processing the call keyword arguments (line 691)
        kwargs_163753 = {}
        # Getting the type of 'self' (line 691)
        self_163748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 691)
        connect_event_163749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 691, 8), self_163748, 'connect_event')
        # Calling connect_event(args, kwargs) (line 691)
        connect_event_call_result_163754 = invoke(stypy.reporting.localization.Localization(__file__, 691, 8), connect_event_163749, *[unicode_163750, _motion_163752], **kwargs_163753)
        
        
        # Call to connect_event(...): (line 692)
        # Processing the call arguments (line 692)
        unicode_163757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 692, 27), 'unicode', u'key_press_event')
        # Getting the type of 'self' (line 692)
        self_163758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 46), 'self', False)
        # Obtaining the member '_keypress' of a type (line 692)
        _keypress_163759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 46), self_163758, '_keypress')
        # Processing the call keyword arguments (line 692)
        kwargs_163760 = {}
        # Getting the type of 'self' (line 692)
        self_163755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 692)
        connect_event_163756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 8), self_163755, 'connect_event')
        # Calling connect_event(args, kwargs) (line 692)
        connect_event_call_result_163761 = invoke(stypy.reporting.localization.Localization(__file__, 692, 8), connect_event_163756, *[unicode_163757, _keypress_163759], **kwargs_163760)
        
        
        # Call to connect_event(...): (line 693)
        # Processing the call arguments (line 693)
        unicode_163764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 27), 'unicode', u'resize_event')
        # Getting the type of 'self' (line 693)
        self_163765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 43), 'self', False)
        # Obtaining the member '_resize' of a type (line 693)
        _resize_163766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 693, 43), self_163765, '_resize')
        # Processing the call keyword arguments (line 693)
        kwargs_163767 = {}
        # Getting the type of 'self' (line 693)
        self_163762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 693)
        connect_event_163763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 693, 8), self_163762, 'connect_event')
        # Calling connect_event(args, kwargs) (line 693)
        connect_event_call_result_163768 = invoke(stypy.reporting.localization.Localization(__file__, 693, 8), connect_event_163763, *[unicode_163764, _resize_163766], **kwargs_163767)
        
        
        # Call to set_navigate(...): (line 694)
        # Processing the call arguments (line 694)
        # Getting the type of 'False' (line 694)
        False_163771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 24), 'False', False)
        # Processing the call keyword arguments (line 694)
        kwargs_163772 = {}
        # Getting the type of 'ax' (line 694)
        ax_163769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 8), 'ax', False)
        # Obtaining the member 'set_navigate' of a type (line 694)
        set_navigate_163770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 694, 8), ax_163769, 'set_navigate')
        # Calling set_navigate(args, kwargs) (line 694)
        set_navigate_call_result_163773 = invoke(stypy.reporting.localization.Localization(__file__, 694, 8), set_navigate_163770, *[False_163771], **kwargs_163772)
        
        
        # Call to set_facecolor(...): (line 695)
        # Processing the call arguments (line 695)
        # Getting the type of 'color' (line 695)
        color_163776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 25), 'color', False)
        # Processing the call keyword arguments (line 695)
        kwargs_163777 = {}
        # Getting the type of 'ax' (line 695)
        ax_163774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 8), 'ax', False)
        # Obtaining the member 'set_facecolor' of a type (line 695)
        set_facecolor_163775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 695, 8), ax_163774, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 695)
        set_facecolor_call_result_163778 = invoke(stypy.reporting.localization.Localization(__file__, 695, 8), set_facecolor_163775, *[color_163776], **kwargs_163777)
        
        
        # Call to set_xticks(...): (line 696)
        # Processing the call arguments (line 696)
        
        # Obtaining an instance of the builtin type 'list' (line 696)
        list_163781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 696, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 696)
        
        # Processing the call keyword arguments (line 696)
        kwargs_163782 = {}
        # Getting the type of 'ax' (line 696)
        ax_163779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 8), 'ax', False)
        # Obtaining the member 'set_xticks' of a type (line 696)
        set_xticks_163780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 696, 8), ax_163779, 'set_xticks')
        # Calling set_xticks(args, kwargs) (line 696)
        set_xticks_call_result_163783 = invoke(stypy.reporting.localization.Localization(__file__, 696, 8), set_xticks_163780, *[list_163781], **kwargs_163782)
        
        
        # Call to set_yticks(...): (line 697)
        # Processing the call arguments (line 697)
        
        # Obtaining an instance of the builtin type 'list' (line 697)
        list_163786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 697)
        
        # Processing the call keyword arguments (line 697)
        kwargs_163787 = {}
        # Getting the type of 'ax' (line 697)
        ax_163784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 8), 'ax', False)
        # Obtaining the member 'set_yticks' of a type (line 697)
        set_yticks_163785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 697, 8), ax_163784, 'set_yticks')
        # Calling set_yticks(args, kwargs) (line 697)
        set_yticks_call_result_163788 = invoke(stypy.reporting.localization.Localization(__file__, 697, 8), set_yticks_163785, *[list_163786], **kwargs_163787)
        
        
        # Assigning a Name to a Attribute (line 698):
        
        # Assigning a Name to a Attribute (line 698):
        # Getting the type of 'color' (line 698)
        color_163789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 21), 'color')
        # Getting the type of 'self' (line 698)
        self_163790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 8), 'self')
        # Setting the type of the member 'color' of a type (line 698)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 8), self_163790, 'color', color_163789)
        
        # Assigning a Name to a Attribute (line 699):
        
        # Assigning a Name to a Attribute (line 699):
        # Getting the type of 'hovercolor' (line 699)
        hovercolor_163791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 26), 'hovercolor')
        # Getting the type of 'self' (line 699)
        self_163792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 8), 'self')
        # Setting the type of the member 'hovercolor' of a type (line 699)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 8), self_163792, 'hovercolor', hovercolor_163791)
        
        # Assigning a Name to a Attribute (line 701):
        
        # Assigning a Name to a Attribute (line 701):
        # Getting the type of 'color' (line 701)
        color_163793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 26), 'color')
        # Getting the type of 'self' (line 701)
        self_163794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 8), 'self')
        # Setting the type of the member '_lastcolor' of a type (line 701)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 701, 8), self_163794, '_lastcolor', color_163793)
        
        # Assigning a Name to a Attribute (line 703):
        
        # Assigning a Name to a Attribute (line 703):
        # Getting the type of 'False' (line 703)
        False_163795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 33), 'False')
        # Getting the type of 'self' (line 703)
        self_163796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'self')
        # Setting the type of the member 'capturekeystrokes' of a type (line 703)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 8), self_163796, 'capturekeystrokes', False_163795)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _make_text_disp(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_make_text_disp'
        module_type_store = module_type_store.open_function_context('_make_text_disp', 705, 4, False)
        # Assigning a type to the variable 'self' (line 706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextBox._make_text_disp.__dict__.__setitem__('stypy_localization', localization)
        TextBox._make_text_disp.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextBox._make_text_disp.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextBox._make_text_disp.__dict__.__setitem__('stypy_function_name', 'TextBox._make_text_disp')
        TextBox._make_text_disp.__dict__.__setitem__('stypy_param_names_list', ['string'])
        TextBox._make_text_disp.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextBox._make_text_disp.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextBox._make_text_disp.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextBox._make_text_disp.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextBox._make_text_disp.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextBox._make_text_disp.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextBox._make_text_disp', ['string'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_make_text_disp', localization, ['string'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_make_text_disp(...)' code ##################

        
        # Call to text(...): (line 706)
        # Processing the call arguments (line 706)
        # Getting the type of 'self' (line 706)
        self_163800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 28), 'self', False)
        # Obtaining the member 'DIST_FROM_LEFT' of a type (line 706)
        DIST_FROM_LEFT_163801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 28), self_163800, 'DIST_FROM_LEFT')
        float_163802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 706, 49), 'float')
        # Getting the type of 'string' (line 706)
        string_163803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 54), 'string', False)
        # Processing the call keyword arguments (line 706)
        unicode_163804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 707, 46), 'unicode', u'center')
        keyword_163805 = unicode_163804
        unicode_163806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 48), 'unicode', u'left')
        keyword_163807 = unicode_163806
        # Getting the type of 'self' (line 709)
        self_163808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 38), 'self', False)
        # Obtaining the member 'ax' of a type (line 709)
        ax_163809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 38), self_163808, 'ax')
        # Obtaining the member 'transAxes' of a type (line 709)
        transAxes_163810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 38), ax_163809, 'transAxes')
        keyword_163811 = transAxes_163810
        kwargs_163812 = {'horizontalalignment': keyword_163807, 'verticalalignment': keyword_163805, 'transform': keyword_163811}
        # Getting the type of 'self' (line 706)
        self_163797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 15), 'self', False)
        # Obtaining the member 'ax' of a type (line 706)
        ax_163798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 15), self_163797, 'ax')
        # Obtaining the member 'text' of a type (line 706)
        text_163799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 15), ax_163798, 'text')
        # Calling text(args, kwargs) (line 706)
        text_call_result_163813 = invoke(stypy.reporting.localization.Localization(__file__, 706, 15), text_163799, *[DIST_FROM_LEFT_163801, float_163802, string_163803], **kwargs_163812)
        
        # Assigning a type to the variable 'stypy_return_type' (line 706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 8), 'stypy_return_type', text_call_result_163813)
        
        # ################# End of '_make_text_disp(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_make_text_disp' in the type store
        # Getting the type of 'stypy_return_type' (line 705)
        stypy_return_type_163814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_163814)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_make_text_disp'
        return stypy_return_type_163814


    @norecursion
    def _rendercursor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_rendercursor'
        module_type_store = module_type_store.open_function_context('_rendercursor', 711, 4, False)
        # Assigning a type to the variable 'self' (line 712)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 712, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextBox._rendercursor.__dict__.__setitem__('stypy_localization', localization)
        TextBox._rendercursor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextBox._rendercursor.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextBox._rendercursor.__dict__.__setitem__('stypy_function_name', 'TextBox._rendercursor')
        TextBox._rendercursor.__dict__.__setitem__('stypy_param_names_list', [])
        TextBox._rendercursor.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextBox._rendercursor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextBox._rendercursor.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextBox._rendercursor.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextBox._rendercursor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextBox._rendercursor.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextBox._rendercursor', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_rendercursor', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_rendercursor(...)' code ##################

        
        # Assigning a Subscript to a Name (line 717):
        
        # Assigning a Subscript to a Name (line 717):
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 717)
        self_163815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 31), 'self')
        # Obtaining the member 'cursor_index' of a type (line 717)
        cursor_index_163816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 31), self_163815, 'cursor_index')
        slice_163817 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 717, 20), None, cursor_index_163816, None)
        # Getting the type of 'self' (line 717)
        self_163818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 20), 'self')
        # Obtaining the member 'text' of a type (line 717)
        text_163819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 20), self_163818, 'text')
        # Obtaining the member '__getitem__' of a type (line 717)
        getitem___163820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 20), text_163819, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 717)
        subscript_call_result_163821 = invoke(stypy.reporting.localization.Localization(__file__, 717, 20), getitem___163820, slice_163817)
        
        # Assigning a type to the variable 'widthtext' (line 717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 717, 8), 'widthtext', subscript_call_result_163821)
        
        # Assigning a Name to a Name (line 718):
        
        # Assigning a Name to a Name (line 718):
        # Getting the type of 'False' (line 718)
        False_163822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 18), 'False')
        # Assigning a type to the variable 'no_text' (line 718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'no_text', False_163822)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'widthtext' (line 719)
        widthtext_163823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 11), 'widthtext')
        unicode_163824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 24), 'unicode', u'')
        # Applying the binary operator '==' (line 719)
        result_eq_163825 = python_operator(stypy.reporting.localization.Localization(__file__, 719, 11), '==', widthtext_163823, unicode_163824)
        
        
        # Getting the type of 'widthtext' (line 719)
        widthtext_163826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 30), 'widthtext')
        unicode_163827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 43), 'unicode', u' ')
        # Applying the binary operator '==' (line 719)
        result_eq_163828 = python_operator(stypy.reporting.localization.Localization(__file__, 719, 30), '==', widthtext_163826, unicode_163827)
        
        # Applying the binary operator 'or' (line 719)
        result_or_keyword_163829 = python_operator(stypy.reporting.localization.Localization(__file__, 719, 11), 'or', result_eq_163825, result_eq_163828)
        
        # Getting the type of 'widthtext' (line 719)
        widthtext_163830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 50), 'widthtext')
        unicode_163831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 63), 'unicode', u'  ')
        # Applying the binary operator '==' (line 719)
        result_eq_163832 = python_operator(stypy.reporting.localization.Localization(__file__, 719, 50), '==', widthtext_163830, unicode_163831)
        
        # Applying the binary operator 'or' (line 719)
        result_or_keyword_163833 = python_operator(stypy.reporting.localization.Localization(__file__, 719, 11), 'or', result_or_keyword_163829, result_eq_163832)
        
        # Testing the type of an if condition (line 719)
        if_condition_163834 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 719, 8), result_or_keyword_163833)
        # Assigning a type to the variable 'if_condition_163834' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'if_condition_163834', if_condition_163834)
        # SSA begins for if statement (line 719)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Compare to a Name (line 720):
        
        # Assigning a Compare to a Name (line 720):
        
        # Getting the type of 'widthtext' (line 720)
        widthtext_163835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 22), 'widthtext')
        unicode_163836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, 35), 'unicode', u'')
        # Applying the binary operator '==' (line 720)
        result_eq_163837 = python_operator(stypy.reporting.localization.Localization(__file__, 720, 22), '==', widthtext_163835, unicode_163836)
        
        # Assigning a type to the variable 'no_text' (line 720)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 720, 12), 'no_text', result_eq_163837)
        
        # Assigning a Str to a Name (line 721):
        
        # Assigning a Str to a Name (line 721):
        unicode_163838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 24), 'unicode', u',')
        # Assigning a type to the variable 'widthtext' (line 721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 721, 12), 'widthtext', unicode_163838)
        # SSA join for if statement (line 719)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 723):
        
        # Assigning a Call to a Name (line 723):
        
        # Call to _make_text_disp(...): (line 723)
        # Processing the call arguments (line 723)
        # Getting the type of 'widthtext' (line 723)
        widthtext_163841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 39), 'widthtext', False)
        # Processing the call keyword arguments (line 723)
        kwargs_163842 = {}
        # Getting the type of 'self' (line 723)
        self_163839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 18), 'self', False)
        # Obtaining the member '_make_text_disp' of a type (line 723)
        _make_text_disp_163840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 18), self_163839, '_make_text_disp')
        # Calling _make_text_disp(args, kwargs) (line 723)
        _make_text_disp_call_result_163843 = invoke(stypy.reporting.localization.Localization(__file__, 723, 18), _make_text_disp_163840, *[widthtext_163841], **kwargs_163842)
        
        # Assigning a type to the variable 'wt_disp' (line 723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 723, 8), 'wt_disp', _make_text_disp_call_result_163843)
        
        # Call to draw(...): (line 725)
        # Processing the call keyword arguments (line 725)
        kwargs_163849 = {}
        # Getting the type of 'self' (line 725)
        self_163844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 8), 'self', False)
        # Obtaining the member 'ax' of a type (line 725)
        ax_163845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 8), self_163844, 'ax')
        # Obtaining the member 'figure' of a type (line 725)
        figure_163846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 8), ax_163845, 'figure')
        # Obtaining the member 'canvas' of a type (line 725)
        canvas_163847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 8), figure_163846, 'canvas')
        # Obtaining the member 'draw' of a type (line 725)
        draw_163848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 8), canvas_163847, 'draw')
        # Calling draw(args, kwargs) (line 725)
        draw_call_result_163850 = invoke(stypy.reporting.localization.Localization(__file__, 725, 8), draw_163848, *[], **kwargs_163849)
        
        
        # Assigning a Call to a Name (line 726):
        
        # Assigning a Call to a Name (line 726):
        
        # Call to get_window_extent(...): (line 726)
        # Processing the call keyword arguments (line 726)
        kwargs_163853 = {}
        # Getting the type of 'wt_disp' (line 726)
        wt_disp_163851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 13), 'wt_disp', False)
        # Obtaining the member 'get_window_extent' of a type (line 726)
        get_window_extent_163852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 726, 13), wt_disp_163851, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 726)
        get_window_extent_call_result_163854 = invoke(stypy.reporting.localization.Localization(__file__, 726, 13), get_window_extent_163852, *[], **kwargs_163853)
        
        # Assigning a type to the variable 'bb' (line 726)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 726, 8), 'bb', get_window_extent_call_result_163854)
        
        # Assigning a Call to a Name (line 727):
        
        # Assigning a Call to a Name (line 727):
        
        # Call to inverted(...): (line 727)
        # Processing the call keyword arguments (line 727)
        kwargs_163859 = {}
        # Getting the type of 'self' (line 727)
        self_163855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 14), 'self', False)
        # Obtaining the member 'ax' of a type (line 727)
        ax_163856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 14), self_163855, 'ax')
        # Obtaining the member 'transData' of a type (line 727)
        transData_163857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 14), ax_163856, 'transData')
        # Obtaining the member 'inverted' of a type (line 727)
        inverted_163858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 14), transData_163857, 'inverted')
        # Calling inverted(args, kwargs) (line 727)
        inverted_call_result_163860 = invoke(stypy.reporting.localization.Localization(__file__, 727, 14), inverted_163858, *[], **kwargs_163859)
        
        # Assigning a type to the variable 'inv' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'inv', inverted_call_result_163860)
        
        # Assigning a Call to a Name (line 728):
        
        # Assigning a Call to a Name (line 728):
        
        # Call to transform(...): (line 728)
        # Processing the call arguments (line 728)
        # Getting the type of 'bb' (line 728)
        bb_163863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 27), 'bb', False)
        # Processing the call keyword arguments (line 728)
        kwargs_163864 = {}
        # Getting the type of 'inv' (line 728)
        inv_163861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 13), 'inv', False)
        # Obtaining the member 'transform' of a type (line 728)
        transform_163862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 13), inv_163861, 'transform')
        # Calling transform(args, kwargs) (line 728)
        transform_call_result_163865 = invoke(stypy.reporting.localization.Localization(__file__, 728, 13), transform_163862, *[bb_163863], **kwargs_163864)
        
        # Assigning a type to the variable 'bb' (line 728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 8), 'bb', transform_call_result_163865)
        
        # Call to set_visible(...): (line 729)
        # Processing the call arguments (line 729)
        # Getting the type of 'False' (line 729)
        False_163868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 28), 'False', False)
        # Processing the call keyword arguments (line 729)
        kwargs_163869 = {}
        # Getting the type of 'wt_disp' (line 729)
        wt_disp_163866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 8), 'wt_disp', False)
        # Obtaining the member 'set_visible' of a type (line 729)
        set_visible_163867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 8), wt_disp_163866, 'set_visible')
        # Calling set_visible(args, kwargs) (line 729)
        set_visible_call_result_163870 = invoke(stypy.reporting.localization.Localization(__file__, 729, 8), set_visible_163867, *[False_163868], **kwargs_163869)
        
        
        # Getting the type of 'no_text' (line 730)
        no_text_163871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 11), 'no_text')
        # Testing the type of an if condition (line 730)
        if_condition_163872 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 730, 8), no_text_163871)
        # Assigning a type to the variable 'if_condition_163872' (line 730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 8), 'if_condition_163872', if_condition_163872)
        # SSA begins for if statement (line 730)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Subscript (line 731):
        
        # Assigning a Subscript to a Subscript (line 731):
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 731)
        tuple_163873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 731)
        # Adding element type (line 731)
        int_163874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 731, 26), tuple_163873, int_163874)
        # Adding element type (line 731)
        int_163875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 731, 26), tuple_163873, int_163875)
        
        # Getting the type of 'bb' (line 731)
        bb_163876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 23), 'bb')
        # Obtaining the member '__getitem__' of a type (line 731)
        getitem___163877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 731, 23), bb_163876, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 731)
        subscript_call_result_163878 = invoke(stypy.reporting.localization.Localization(__file__, 731, 23), getitem___163877, tuple_163873)
        
        # Getting the type of 'bb' (line 731)
        bb_163879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 12), 'bb')
        
        # Obtaining an instance of the builtin type 'tuple' (line 731)
        tuple_163880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 731)
        # Adding element type (line 731)
        int_163881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 15), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 731, 15), tuple_163880, int_163881)
        # Adding element type (line 731)
        int_163882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 731, 15), tuple_163880, int_163882)
        
        # Storing an element on a container (line 731)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 731, 12), bb_163879, (tuple_163880, subscript_call_result_163878))
        # SSA join for if statement (line 730)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_visible(...): (line 733)
        # Processing the call arguments (line 733)
        # Getting the type of 'False' (line 733)
        False_163886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 32), 'False', False)
        # Processing the call keyword arguments (line 733)
        kwargs_163887 = {}
        # Getting the type of 'self' (line 733)
        self_163883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 8), 'self', False)
        # Obtaining the member 'cursor' of a type (line 733)
        cursor_163884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 8), self_163883, 'cursor')
        # Obtaining the member 'set_visible' of a type (line 733)
        set_visible_163885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 8), cursor_163884, 'set_visible')
        # Calling set_visible(args, kwargs) (line 733)
        set_visible_call_result_163888 = invoke(stypy.reporting.localization.Localization(__file__, 733, 8), set_visible_163885, *[False_163886], **kwargs_163887)
        
        
        # Assigning a Call to a Attribute (line 735):
        
        # Assigning a Call to a Attribute (line 735):
        
        # Call to vlines(...): (line 735)
        # Processing the call arguments (line 735)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 735)
        tuple_163892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 40), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 735)
        # Adding element type (line 735)
        int_163893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 40), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 735, 40), tuple_163892, int_163893)
        # Adding element type (line 735)
        int_163894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 43), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 735, 40), tuple_163892, int_163894)
        
        # Getting the type of 'bb' (line 735)
        bb_163895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 37), 'bb', False)
        # Obtaining the member '__getitem__' of a type (line 735)
        getitem___163896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 37), bb_163895, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 735)
        subscript_call_result_163897 = invoke(stypy.reporting.localization.Localization(__file__, 735, 37), getitem___163896, tuple_163892)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 735)
        tuple_163898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 50), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 735)
        # Adding element type (line 735)
        int_163899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 50), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 735, 50), tuple_163898, int_163899)
        # Adding element type (line 735)
        int_163900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 53), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 735, 50), tuple_163898, int_163900)
        
        # Getting the type of 'bb' (line 735)
        bb_163901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 47), 'bb', False)
        # Obtaining the member '__getitem__' of a type (line 735)
        getitem___163902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 47), bb_163901, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 735)
        subscript_call_result_163903 = invoke(stypy.reporting.localization.Localization(__file__, 735, 47), getitem___163902, tuple_163898)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 735)
        tuple_163904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 60), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 735)
        # Adding element type (line 735)
        int_163905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 60), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 735, 60), tuple_163904, int_163905)
        # Adding element type (line 735)
        int_163906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 63), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 735, 60), tuple_163904, int_163906)
        
        # Getting the type of 'bb' (line 735)
        bb_163907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 57), 'bb', False)
        # Obtaining the member '__getitem__' of a type (line 735)
        getitem___163908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 57), bb_163907, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 735)
        subscript_call_result_163909 = invoke(stypy.reporting.localization.Localization(__file__, 735, 57), getitem___163908, tuple_163904)
        
        # Processing the call keyword arguments (line 735)
        kwargs_163910 = {}
        # Getting the type of 'self' (line 735)
        self_163889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 22), 'self', False)
        # Obtaining the member 'ax' of a type (line 735)
        ax_163890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 22), self_163889, 'ax')
        # Obtaining the member 'vlines' of a type (line 735)
        vlines_163891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 22), ax_163890, 'vlines')
        # Calling vlines(args, kwargs) (line 735)
        vlines_call_result_163911 = invoke(stypy.reporting.localization.Localization(__file__, 735, 22), vlines_163891, *[subscript_call_result_163897, subscript_call_result_163903, subscript_call_result_163909], **kwargs_163910)
        
        # Getting the type of 'self' (line 735)
        self_163912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 8), 'self')
        # Setting the type of the member 'cursor' of a type (line 735)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 8), self_163912, 'cursor', vlines_call_result_163911)
        
        # Call to draw(...): (line 736)
        # Processing the call keyword arguments (line 736)
        kwargs_163918 = {}
        # Getting the type of 'self' (line 736)
        self_163913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 8), 'self', False)
        # Obtaining the member 'ax' of a type (line 736)
        ax_163914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 8), self_163913, 'ax')
        # Obtaining the member 'figure' of a type (line 736)
        figure_163915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 8), ax_163914, 'figure')
        # Obtaining the member 'canvas' of a type (line 736)
        canvas_163916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 8), figure_163915, 'canvas')
        # Obtaining the member 'draw' of a type (line 736)
        draw_163917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 8), canvas_163916, 'draw')
        # Calling draw(args, kwargs) (line 736)
        draw_call_result_163919 = invoke(stypy.reporting.localization.Localization(__file__, 736, 8), draw_163917, *[], **kwargs_163918)
        
        
        # ################# End of '_rendercursor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_rendercursor' in the type store
        # Getting the type of 'stypy_return_type' (line 711)
        stypy_return_type_163920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_163920)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_rendercursor'
        return stypy_return_type_163920


    @norecursion
    def _notify_submit_observers(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_notify_submit_observers'
        module_type_store = module_type_store.open_function_context('_notify_submit_observers', 738, 4, False)
        # Assigning a type to the variable 'self' (line 739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 739, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextBox._notify_submit_observers.__dict__.__setitem__('stypy_localization', localization)
        TextBox._notify_submit_observers.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextBox._notify_submit_observers.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextBox._notify_submit_observers.__dict__.__setitem__('stypy_function_name', 'TextBox._notify_submit_observers')
        TextBox._notify_submit_observers.__dict__.__setitem__('stypy_param_names_list', [])
        TextBox._notify_submit_observers.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextBox._notify_submit_observers.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextBox._notify_submit_observers.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextBox._notify_submit_observers.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextBox._notify_submit_observers.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextBox._notify_submit_observers.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextBox._notify_submit_observers', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_notify_submit_observers', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_notify_submit_observers(...)' code ##################

        
        
        # Call to iteritems(...): (line 739)
        # Processing the call arguments (line 739)
        # Getting the type of 'self' (line 739)
        self_163923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 39), 'self', False)
        # Obtaining the member 'submit_observers' of a type (line 739)
        submit_observers_163924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 39), self_163923, 'submit_observers')
        # Processing the call keyword arguments (line 739)
        kwargs_163925 = {}
        # Getting the type of 'six' (line 739)
        six_163921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 25), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 739)
        iteritems_163922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 25), six_163921, 'iteritems')
        # Calling iteritems(args, kwargs) (line 739)
        iteritems_call_result_163926 = invoke(stypy.reporting.localization.Localization(__file__, 739, 25), iteritems_163922, *[submit_observers_163924], **kwargs_163925)
        
        # Testing the type of a for loop iterable (line 739)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 739, 8), iteritems_call_result_163926)
        # Getting the type of the for loop variable (line 739)
        for_loop_var_163927 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 739, 8), iteritems_call_result_163926)
        # Assigning a type to the variable 'cid' (line 739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 739, 8), 'cid', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 739, 8), for_loop_var_163927))
        # Assigning a type to the variable 'func' (line 739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 739, 8), 'func', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 739, 8), for_loop_var_163927))
        # SSA begins for a for statement (line 739)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to func(...): (line 740)
        # Processing the call arguments (line 740)
        # Getting the type of 'self' (line 740)
        self_163929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 21), 'self', False)
        # Obtaining the member 'text' of a type (line 740)
        text_163930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 21), self_163929, 'text')
        # Processing the call keyword arguments (line 740)
        kwargs_163931 = {}
        # Getting the type of 'func' (line 740)
        func_163928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 16), 'func', False)
        # Calling func(args, kwargs) (line 740)
        func_call_result_163932 = invoke(stypy.reporting.localization.Localization(__file__, 740, 16), func_163928, *[text_163930], **kwargs_163931)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_notify_submit_observers(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_notify_submit_observers' in the type store
        # Getting the type of 'stypy_return_type' (line 738)
        stypy_return_type_163933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_163933)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_notify_submit_observers'
        return stypy_return_type_163933


    @norecursion
    def _release(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_release'
        module_type_store = module_type_store.open_function_context('_release', 742, 4, False)
        # Assigning a type to the variable 'self' (line 743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextBox._release.__dict__.__setitem__('stypy_localization', localization)
        TextBox._release.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextBox._release.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextBox._release.__dict__.__setitem__('stypy_function_name', 'TextBox._release')
        TextBox._release.__dict__.__setitem__('stypy_param_names_list', ['event'])
        TextBox._release.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextBox._release.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextBox._release.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextBox._release.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextBox._release.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextBox._release.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextBox._release', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_release', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_release(...)' code ##################

        
        
        # Call to ignore(...): (line 743)
        # Processing the call arguments (line 743)
        # Getting the type of 'event' (line 743)
        event_163936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 23), 'event', False)
        # Processing the call keyword arguments (line 743)
        kwargs_163937 = {}
        # Getting the type of 'self' (line 743)
        self_163934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 11), 'self', False)
        # Obtaining the member 'ignore' of a type (line 743)
        ignore_163935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 11), self_163934, 'ignore')
        # Calling ignore(args, kwargs) (line 743)
        ignore_call_result_163938 = invoke(stypy.reporting.localization.Localization(__file__, 743, 11), ignore_163935, *[event_163936], **kwargs_163937)
        
        # Testing the type of an if condition (line 743)
        if_condition_163939 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 743, 8), ignore_call_result_163938)
        # Assigning a type to the variable 'if_condition_163939' (line 743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 8), 'if_condition_163939', if_condition_163939)
        # SSA begins for if statement (line 743)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 744, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 743)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'event' (line 745)
        event_163940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 11), 'event')
        # Obtaining the member 'canvas' of a type (line 745)
        canvas_163941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 745, 11), event_163940, 'canvas')
        # Obtaining the member 'mouse_grabber' of a type (line 745)
        mouse_grabber_163942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 745, 11), canvas_163941, 'mouse_grabber')
        # Getting the type of 'self' (line 745)
        self_163943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 41), 'self')
        # Obtaining the member 'ax' of a type (line 745)
        ax_163944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 745, 41), self_163943, 'ax')
        # Applying the binary operator '!=' (line 745)
        result_ne_163945 = python_operator(stypy.reporting.localization.Localization(__file__, 745, 11), '!=', mouse_grabber_163942, ax_163944)
        
        # Testing the type of an if condition (line 745)
        if_condition_163946 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 745, 8), result_ne_163945)
        # Assigning a type to the variable 'if_condition_163946' (line 745)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 745, 8), 'if_condition_163946', if_condition_163946)
        # SSA begins for if statement (line 745)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 746)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 746, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 745)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to release_mouse(...): (line 747)
        # Processing the call arguments (line 747)
        # Getting the type of 'self' (line 747)
        self_163950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 35), 'self', False)
        # Obtaining the member 'ax' of a type (line 747)
        ax_163951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 35), self_163950, 'ax')
        # Processing the call keyword arguments (line 747)
        kwargs_163952 = {}
        # Getting the type of 'event' (line 747)
        event_163947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 8), 'event', False)
        # Obtaining the member 'canvas' of a type (line 747)
        canvas_163948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 8), event_163947, 'canvas')
        # Obtaining the member 'release_mouse' of a type (line 747)
        release_mouse_163949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 8), canvas_163948, 'release_mouse')
        # Calling release_mouse(args, kwargs) (line 747)
        release_mouse_call_result_163953 = invoke(stypy.reporting.localization.Localization(__file__, 747, 8), release_mouse_163949, *[ax_163951], **kwargs_163952)
        
        
        # ################# End of '_release(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_release' in the type store
        # Getting the type of 'stypy_return_type' (line 742)
        stypy_return_type_163954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_163954)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_release'
        return stypy_return_type_163954


    @norecursion
    def _keypress(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_keypress'
        module_type_store = module_type_store.open_function_context('_keypress', 749, 4, False)
        # Assigning a type to the variable 'self' (line 750)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextBox._keypress.__dict__.__setitem__('stypy_localization', localization)
        TextBox._keypress.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextBox._keypress.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextBox._keypress.__dict__.__setitem__('stypy_function_name', 'TextBox._keypress')
        TextBox._keypress.__dict__.__setitem__('stypy_param_names_list', ['event'])
        TextBox._keypress.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextBox._keypress.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextBox._keypress.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextBox._keypress.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextBox._keypress.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextBox._keypress.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextBox._keypress', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_keypress', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_keypress(...)' code ##################

        
        
        # Call to ignore(...): (line 750)
        # Processing the call arguments (line 750)
        # Getting the type of 'event' (line 750)
        event_163957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 23), 'event', False)
        # Processing the call keyword arguments (line 750)
        kwargs_163958 = {}
        # Getting the type of 'self' (line 750)
        self_163955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 11), 'self', False)
        # Obtaining the member 'ignore' of a type (line 750)
        ignore_163956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 11), self_163955, 'ignore')
        # Calling ignore(args, kwargs) (line 750)
        ignore_call_result_163959 = invoke(stypy.reporting.localization.Localization(__file__, 750, 11), ignore_163956, *[event_163957], **kwargs_163958)
        
        # Testing the type of an if condition (line 750)
        if_condition_163960 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 750, 8), ignore_call_result_163959)
        # Assigning a type to the variable 'if_condition_163960' (line 750)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 8), 'if_condition_163960', if_condition_163960)
        # SSA begins for if statement (line 750)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 750)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 752)
        self_163961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 11), 'self')
        # Obtaining the member 'capturekeystrokes' of a type (line 752)
        capturekeystrokes_163962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 752, 11), self_163961, 'capturekeystrokes')
        # Testing the type of an if condition (line 752)
        if_condition_163963 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 752, 8), capturekeystrokes_163962)
        # Assigning a type to the variable 'if_condition_163963' (line 752)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 752, 8), 'if_condition_163963', if_condition_163963)
        # SSA begins for if statement (line 752)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 753):
        
        # Assigning a Attribute to a Name (line 753):
        # Getting the type of 'event' (line 753)
        event_163964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 18), 'event')
        # Obtaining the member 'key' of a type (line 753)
        key_163965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 18), event_163964, 'key')
        # Assigning a type to the variable 'key' (line 753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 12), 'key', key_163965)
        
        
        
        # Call to len(...): (line 755)
        # Processing the call arguments (line 755)
        # Getting the type of 'key' (line 755)
        key_163967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 19), 'key', False)
        # Processing the call keyword arguments (line 755)
        kwargs_163968 = {}
        # Getting the type of 'len' (line 755)
        len_163966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 15), 'len', False)
        # Calling len(args, kwargs) (line 755)
        len_call_result_163969 = invoke(stypy.reporting.localization.Localization(__file__, 755, 15), len_163966, *[key_163967], **kwargs_163968)
        
        int_163970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 755, 27), 'int')
        # Applying the binary operator '==' (line 755)
        result_eq_163971 = python_operator(stypy.reporting.localization.Localization(__file__, 755, 15), '==', len_call_result_163969, int_163970)
        
        # Testing the type of an if condition (line 755)
        if_condition_163972 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 755, 12), result_eq_163971)
        # Assigning a type to the variable 'if_condition_163972' (line 755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 12), 'if_condition_163972', if_condition_163972)
        # SSA begins for if statement (line 755)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Attribute (line 756):
        
        # Assigning a BinOp to a Attribute (line 756):
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 756)
        self_163973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 40), 'self')
        # Obtaining the member 'cursor_index' of a type (line 756)
        cursor_index_163974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 40), self_163973, 'cursor_index')
        slice_163975 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 756, 29), None, cursor_index_163974, None)
        # Getting the type of 'self' (line 756)
        self_163976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 29), 'self')
        # Obtaining the member 'text' of a type (line 756)
        text_163977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 29), self_163976, 'text')
        # Obtaining the member '__getitem__' of a type (line 756)
        getitem___163978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 29), text_163977, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 756)
        subscript_call_result_163979 = invoke(stypy.reporting.localization.Localization(__file__, 756, 29), getitem___163978, slice_163975)
        
        # Getting the type of 'key' (line 756)
        key_163980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 61), 'key')
        # Applying the binary operator '+' (line 756)
        result_add_163981 = python_operator(stypy.reporting.localization.Localization(__file__, 756, 29), '+', subscript_call_result_163979, key_163980)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 757)
        self_163982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 39), 'self')
        # Obtaining the member 'cursor_index' of a type (line 757)
        cursor_index_163983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 39), self_163982, 'cursor_index')
        slice_163984 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 757, 29), cursor_index_163983, None, None)
        # Getting the type of 'self' (line 757)
        self_163985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 29), 'self')
        # Obtaining the member 'text' of a type (line 757)
        text_163986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 29), self_163985, 'text')
        # Obtaining the member '__getitem__' of a type (line 757)
        getitem___163987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 29), text_163986, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 757)
        subscript_call_result_163988 = invoke(stypy.reporting.localization.Localization(__file__, 757, 29), getitem___163987, slice_163984)
        
        # Applying the binary operator '+' (line 756)
        result_add_163989 = python_operator(stypy.reporting.localization.Localization(__file__, 756, 65), '+', result_add_163981, subscript_call_result_163988)
        
        # Getting the type of 'self' (line 756)
        self_163990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 16), 'self')
        # Setting the type of the member 'text' of a type (line 756)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 16), self_163990, 'text', result_add_163989)
        
        # Getting the type of 'self' (line 758)
        self_163991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 16), 'self')
        # Obtaining the member 'cursor_index' of a type (line 758)
        cursor_index_163992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 16), self_163991, 'cursor_index')
        int_163993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 37), 'int')
        # Applying the binary operator '+=' (line 758)
        result_iadd_163994 = python_operator(stypy.reporting.localization.Localization(__file__, 758, 16), '+=', cursor_index_163992, int_163993)
        # Getting the type of 'self' (line 758)
        self_163995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 16), 'self')
        # Setting the type of the member 'cursor_index' of a type (line 758)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 16), self_163995, 'cursor_index', result_iadd_163994)
        
        # SSA branch for the else part of an if statement (line 755)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'key' (line 759)
        key_163996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 17), 'key')
        unicode_163997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 24), 'unicode', u'right')
        # Applying the binary operator '==' (line 759)
        result_eq_163998 = python_operator(stypy.reporting.localization.Localization(__file__, 759, 17), '==', key_163996, unicode_163997)
        
        # Testing the type of an if condition (line 759)
        if_condition_163999 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 759, 17), result_eq_163998)
        # Assigning a type to the variable 'if_condition_163999' (line 759)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 759, 17), 'if_condition_163999', if_condition_163999)
        # SSA begins for if statement (line 759)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 760)
        self_164000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 19), 'self')
        # Obtaining the member 'cursor_index' of a type (line 760)
        cursor_index_164001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 760, 19), self_164000, 'cursor_index')
        
        # Call to len(...): (line 760)
        # Processing the call arguments (line 760)
        # Getting the type of 'self' (line 760)
        self_164003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 44), 'self', False)
        # Obtaining the member 'text' of a type (line 760)
        text_164004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 760, 44), self_164003, 'text')
        # Processing the call keyword arguments (line 760)
        kwargs_164005 = {}
        # Getting the type of 'len' (line 760)
        len_164002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 40), 'len', False)
        # Calling len(args, kwargs) (line 760)
        len_call_result_164006 = invoke(stypy.reporting.localization.Localization(__file__, 760, 40), len_164002, *[text_164004], **kwargs_164005)
        
        # Applying the binary operator '!=' (line 760)
        result_ne_164007 = python_operator(stypy.reporting.localization.Localization(__file__, 760, 19), '!=', cursor_index_164001, len_call_result_164006)
        
        # Testing the type of an if condition (line 760)
        if_condition_164008 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 760, 16), result_ne_164007)
        # Assigning a type to the variable 'if_condition_164008' (line 760)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 760, 16), 'if_condition_164008', if_condition_164008)
        # SSA begins for if statement (line 760)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 761)
        self_164009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 20), 'self')
        # Obtaining the member 'cursor_index' of a type (line 761)
        cursor_index_164010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 20), self_164009, 'cursor_index')
        int_164011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 761, 41), 'int')
        # Applying the binary operator '+=' (line 761)
        result_iadd_164012 = python_operator(stypy.reporting.localization.Localization(__file__, 761, 20), '+=', cursor_index_164010, int_164011)
        # Getting the type of 'self' (line 761)
        self_164013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 20), 'self')
        # Setting the type of the member 'cursor_index' of a type (line 761)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 20), self_164013, 'cursor_index', result_iadd_164012)
        
        # SSA join for if statement (line 760)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 759)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'key' (line 762)
        key_164014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 17), 'key')
        unicode_164015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 762, 24), 'unicode', u'left')
        # Applying the binary operator '==' (line 762)
        result_eq_164016 = python_operator(stypy.reporting.localization.Localization(__file__, 762, 17), '==', key_164014, unicode_164015)
        
        # Testing the type of an if condition (line 762)
        if_condition_164017 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 762, 17), result_eq_164016)
        # Assigning a type to the variable 'if_condition_164017' (line 762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 762, 17), 'if_condition_164017', if_condition_164017)
        # SSA begins for if statement (line 762)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 763)
        self_164018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 19), 'self')
        # Obtaining the member 'cursor_index' of a type (line 763)
        cursor_index_164019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 19), self_164018, 'cursor_index')
        int_164020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 40), 'int')
        # Applying the binary operator '!=' (line 763)
        result_ne_164021 = python_operator(stypy.reporting.localization.Localization(__file__, 763, 19), '!=', cursor_index_164019, int_164020)
        
        # Testing the type of an if condition (line 763)
        if_condition_164022 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 763, 16), result_ne_164021)
        # Assigning a type to the variable 'if_condition_164022' (line 763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 763, 16), 'if_condition_164022', if_condition_164022)
        # SSA begins for if statement (line 763)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 764)
        self_164023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 20), 'self')
        # Obtaining the member 'cursor_index' of a type (line 764)
        cursor_index_164024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 764, 20), self_164023, 'cursor_index')
        int_164025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 764, 41), 'int')
        # Applying the binary operator '-=' (line 764)
        result_isub_164026 = python_operator(stypy.reporting.localization.Localization(__file__, 764, 20), '-=', cursor_index_164024, int_164025)
        # Getting the type of 'self' (line 764)
        self_164027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 20), 'self')
        # Setting the type of the member 'cursor_index' of a type (line 764)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 764, 20), self_164027, 'cursor_index', result_isub_164026)
        
        # SSA join for if statement (line 763)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 762)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'key' (line 765)
        key_164028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 17), 'key')
        unicode_164029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 24), 'unicode', u'home')
        # Applying the binary operator '==' (line 765)
        result_eq_164030 = python_operator(stypy.reporting.localization.Localization(__file__, 765, 17), '==', key_164028, unicode_164029)
        
        # Testing the type of an if condition (line 765)
        if_condition_164031 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 765, 17), result_eq_164030)
        # Assigning a type to the variable 'if_condition_164031' (line 765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 17), 'if_condition_164031', if_condition_164031)
        # SSA begins for if statement (line 765)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 766):
        
        # Assigning a Num to a Attribute (line 766):
        int_164032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 36), 'int')
        # Getting the type of 'self' (line 766)
        self_164033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 16), 'self')
        # Setting the type of the member 'cursor_index' of a type (line 766)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 16), self_164033, 'cursor_index', int_164032)
        # SSA branch for the else part of an if statement (line 765)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'key' (line 767)
        key_164034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 17), 'key')
        unicode_164035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 767, 24), 'unicode', u'end')
        # Applying the binary operator '==' (line 767)
        result_eq_164036 = python_operator(stypy.reporting.localization.Localization(__file__, 767, 17), '==', key_164034, unicode_164035)
        
        # Testing the type of an if condition (line 767)
        if_condition_164037 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 767, 17), result_eq_164036)
        # Assigning a type to the variable 'if_condition_164037' (line 767)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 767, 17), 'if_condition_164037', if_condition_164037)
        # SSA begins for if statement (line 767)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 768):
        
        # Assigning a Call to a Attribute (line 768):
        
        # Call to len(...): (line 768)
        # Processing the call arguments (line 768)
        # Getting the type of 'self' (line 768)
        self_164039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 40), 'self', False)
        # Obtaining the member 'text' of a type (line 768)
        text_164040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 40), self_164039, 'text')
        # Processing the call keyword arguments (line 768)
        kwargs_164041 = {}
        # Getting the type of 'len' (line 768)
        len_164038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 36), 'len', False)
        # Calling len(args, kwargs) (line 768)
        len_call_result_164042 = invoke(stypy.reporting.localization.Localization(__file__, 768, 36), len_164038, *[text_164040], **kwargs_164041)
        
        # Getting the type of 'self' (line 768)
        self_164043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 16), 'self')
        # Setting the type of the member 'cursor_index' of a type (line 768)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 16), self_164043, 'cursor_index', len_call_result_164042)
        # SSA branch for the else part of an if statement (line 767)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'key' (line 769)
        key_164044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 17), 'key')
        unicode_164045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 24), 'unicode', u'backspace')
        # Applying the binary operator '==' (line 769)
        result_eq_164046 = python_operator(stypy.reporting.localization.Localization(__file__, 769, 17), '==', key_164044, unicode_164045)
        
        # Testing the type of an if condition (line 769)
        if_condition_164047 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 769, 16), result_eq_164046)
        # Assigning a type to the variable 'if_condition_164047' (line 769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 16), 'if_condition_164047', if_condition_164047)
        # SSA begins for if statement (line 769)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 770)
        self_164048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 19), 'self')
        # Obtaining the member 'cursor_index' of a type (line 770)
        cursor_index_164049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 770, 19), self_164048, 'cursor_index')
        int_164050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 770, 40), 'int')
        # Applying the binary operator '!=' (line 770)
        result_ne_164051 = python_operator(stypy.reporting.localization.Localization(__file__, 770, 19), '!=', cursor_index_164049, int_164050)
        
        # Testing the type of an if condition (line 770)
        if_condition_164052 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 770, 16), result_ne_164051)
        # Assigning a type to the variable 'if_condition_164052' (line 770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 16), 'if_condition_164052', if_condition_164052)
        # SSA begins for if statement (line 770)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Attribute (line 771):
        
        # Assigning a BinOp to a Attribute (line 771):
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 771)
        self_164053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 44), 'self')
        # Obtaining the member 'cursor_index' of a type (line 771)
        cursor_index_164054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 44), self_164053, 'cursor_index')
        int_164055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 771, 64), 'int')
        # Applying the binary operator '-' (line 771)
        result_sub_164056 = python_operator(stypy.reporting.localization.Localization(__file__, 771, 44), '-', cursor_index_164054, int_164055)
        
        slice_164057 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 771, 33), None, result_sub_164056, None)
        # Getting the type of 'self' (line 771)
        self_164058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 33), 'self')
        # Obtaining the member 'text' of a type (line 771)
        text_164059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 33), self_164058, 'text')
        # Obtaining the member '__getitem__' of a type (line 771)
        getitem___164060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 33), text_164059, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 771)
        subscript_call_result_164061 = invoke(stypy.reporting.localization.Localization(__file__, 771, 33), getitem___164060, slice_164057)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 772)
        self_164062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 43), 'self')
        # Obtaining the member 'cursor_index' of a type (line 772)
        cursor_index_164063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 772, 43), self_164062, 'cursor_index')
        slice_164064 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 772, 33), cursor_index_164063, None, None)
        # Getting the type of 'self' (line 772)
        self_164065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 33), 'self')
        # Obtaining the member 'text' of a type (line 772)
        text_164066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 772, 33), self_164065, 'text')
        # Obtaining the member '__getitem__' of a type (line 772)
        getitem___164067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 772, 33), text_164066, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 772)
        subscript_call_result_164068 = invoke(stypy.reporting.localization.Localization(__file__, 772, 33), getitem___164067, slice_164064)
        
        # Applying the binary operator '+' (line 771)
        result_add_164069 = python_operator(stypy.reporting.localization.Localization(__file__, 771, 33), '+', subscript_call_result_164061, subscript_call_result_164068)
        
        # Getting the type of 'self' (line 771)
        self_164070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 20), 'self')
        # Setting the type of the member 'text' of a type (line 771)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 20), self_164070, 'text', result_add_164069)
        
        # Getting the type of 'self' (line 773)
        self_164071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 20), 'self')
        # Obtaining the member 'cursor_index' of a type (line 773)
        cursor_index_164072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 20), self_164071, 'cursor_index')
        int_164073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 773, 41), 'int')
        # Applying the binary operator '-=' (line 773)
        result_isub_164074 = python_operator(stypy.reporting.localization.Localization(__file__, 773, 20), '-=', cursor_index_164072, int_164073)
        # Getting the type of 'self' (line 773)
        self_164075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 20), 'self')
        # Setting the type of the member 'cursor_index' of a type (line 773)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 20), self_164075, 'cursor_index', result_isub_164074)
        
        # SSA join for if statement (line 770)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 769)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'key' (line 774)
        key_164076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 17), 'key')
        unicode_164077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 24), 'unicode', u'delete')
        # Applying the binary operator '==' (line 774)
        result_eq_164078 = python_operator(stypy.reporting.localization.Localization(__file__, 774, 17), '==', key_164076, unicode_164077)
        
        # Testing the type of an if condition (line 774)
        if_condition_164079 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 774, 16), result_eq_164078)
        # Assigning a type to the variable 'if_condition_164079' (line 774)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 774, 16), 'if_condition_164079', if_condition_164079)
        # SSA begins for if statement (line 774)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 775)
        self_164080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 19), 'self')
        # Obtaining the member 'cursor_index' of a type (line 775)
        cursor_index_164081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 19), self_164080, 'cursor_index')
        
        # Call to len(...): (line 775)
        # Processing the call arguments (line 775)
        # Getting the type of 'self' (line 775)
        self_164083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 44), 'self', False)
        # Obtaining the member 'text' of a type (line 775)
        text_164084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 44), self_164083, 'text')
        # Processing the call keyword arguments (line 775)
        kwargs_164085 = {}
        # Getting the type of 'len' (line 775)
        len_164082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 40), 'len', False)
        # Calling len(args, kwargs) (line 775)
        len_call_result_164086 = invoke(stypy.reporting.localization.Localization(__file__, 775, 40), len_164082, *[text_164084], **kwargs_164085)
        
        # Applying the binary operator '!=' (line 775)
        result_ne_164087 = python_operator(stypy.reporting.localization.Localization(__file__, 775, 19), '!=', cursor_index_164081, len_call_result_164086)
        
        # Testing the type of an if condition (line 775)
        if_condition_164088 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 775, 16), result_ne_164087)
        # Assigning a type to the variable 'if_condition_164088' (line 775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 775, 16), 'if_condition_164088', if_condition_164088)
        # SSA begins for if statement (line 775)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Attribute (line 776):
        
        # Assigning a BinOp to a Attribute (line 776):
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 776)
        self_164089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 44), 'self')
        # Obtaining the member 'cursor_index' of a type (line 776)
        cursor_index_164090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 44), self_164089, 'cursor_index')
        slice_164091 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 776, 33), None, cursor_index_164090, None)
        # Getting the type of 'self' (line 776)
        self_164092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 33), 'self')
        # Obtaining the member 'text' of a type (line 776)
        text_164093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 33), self_164092, 'text')
        # Obtaining the member '__getitem__' of a type (line 776)
        getitem___164094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 33), text_164093, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 776)
        subscript_call_result_164095 = invoke(stypy.reporting.localization.Localization(__file__, 776, 33), getitem___164094, slice_164091)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 777)
        self_164096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 43), 'self')
        # Obtaining the member 'cursor_index' of a type (line 777)
        cursor_index_164097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 43), self_164096, 'cursor_index')
        int_164098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 777, 63), 'int')
        # Applying the binary operator '+' (line 777)
        result_add_164099 = python_operator(stypy.reporting.localization.Localization(__file__, 777, 43), '+', cursor_index_164097, int_164098)
        
        slice_164100 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 777, 33), result_add_164099, None, None)
        # Getting the type of 'self' (line 777)
        self_164101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 33), 'self')
        # Obtaining the member 'text' of a type (line 777)
        text_164102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 33), self_164101, 'text')
        # Obtaining the member '__getitem__' of a type (line 777)
        getitem___164103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 33), text_164102, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 777)
        subscript_call_result_164104 = invoke(stypy.reporting.localization.Localization(__file__, 777, 33), getitem___164103, slice_164100)
        
        # Applying the binary operator '+' (line 776)
        result_add_164105 = python_operator(stypy.reporting.localization.Localization(__file__, 776, 33), '+', subscript_call_result_164095, subscript_call_result_164104)
        
        # Getting the type of 'self' (line 776)
        self_164106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 20), 'self')
        # Setting the type of the member 'text' of a type (line 776)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 20), self_164106, 'text', result_add_164105)
        # SSA join for if statement (line 775)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 774)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 769)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 767)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 765)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 762)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 759)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 755)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to remove(...): (line 779)
        # Processing the call keyword arguments (line 779)
        kwargs_164110 = {}
        # Getting the type of 'self' (line 779)
        self_164107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 12), 'self', False)
        # Obtaining the member 'text_disp' of a type (line 779)
        text_disp_164108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 12), self_164107, 'text_disp')
        # Obtaining the member 'remove' of a type (line 779)
        remove_164109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 12), text_disp_164108, 'remove')
        # Calling remove(args, kwargs) (line 779)
        remove_call_result_164111 = invoke(stypy.reporting.localization.Localization(__file__, 779, 12), remove_164109, *[], **kwargs_164110)
        
        
        # Assigning a Call to a Attribute (line 780):
        
        # Assigning a Call to a Attribute (line 780):
        
        # Call to _make_text_disp(...): (line 780)
        # Processing the call arguments (line 780)
        # Getting the type of 'self' (line 780)
        self_164114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 50), 'self', False)
        # Obtaining the member 'text' of a type (line 780)
        text_164115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 780, 50), self_164114, 'text')
        # Processing the call keyword arguments (line 780)
        kwargs_164116 = {}
        # Getting the type of 'self' (line 780)
        self_164112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 29), 'self', False)
        # Obtaining the member '_make_text_disp' of a type (line 780)
        _make_text_disp_164113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 780, 29), self_164112, '_make_text_disp')
        # Calling _make_text_disp(args, kwargs) (line 780)
        _make_text_disp_call_result_164117 = invoke(stypy.reporting.localization.Localization(__file__, 780, 29), _make_text_disp_164113, *[text_164115], **kwargs_164116)
        
        # Getting the type of 'self' (line 780)
        self_164118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 12), 'self')
        # Setting the type of the member 'text_disp' of a type (line 780)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 780, 12), self_164118, 'text_disp', _make_text_disp_call_result_164117)
        
        # Call to _rendercursor(...): (line 781)
        # Processing the call keyword arguments (line 781)
        kwargs_164121 = {}
        # Getting the type of 'self' (line 781)
        self_164119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 12), 'self', False)
        # Obtaining the member '_rendercursor' of a type (line 781)
        _rendercursor_164120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 781, 12), self_164119, '_rendercursor')
        # Calling _rendercursor(args, kwargs) (line 781)
        _rendercursor_call_result_164122 = invoke(stypy.reporting.localization.Localization(__file__, 781, 12), _rendercursor_164120, *[], **kwargs_164121)
        
        
        # Call to _notify_change_observers(...): (line 782)
        # Processing the call keyword arguments (line 782)
        kwargs_164125 = {}
        # Getting the type of 'self' (line 782)
        self_164123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 12), 'self', False)
        # Obtaining the member '_notify_change_observers' of a type (line 782)
        _notify_change_observers_164124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 12), self_164123, '_notify_change_observers')
        # Calling _notify_change_observers(args, kwargs) (line 782)
        _notify_change_observers_call_result_164126 = invoke(stypy.reporting.localization.Localization(__file__, 782, 12), _notify_change_observers_164124, *[], **kwargs_164125)
        
        
        
        # Getting the type of 'key' (line 783)
        key_164127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 15), 'key')
        unicode_164128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 783, 22), 'unicode', u'enter')
        # Applying the binary operator '==' (line 783)
        result_eq_164129 = python_operator(stypy.reporting.localization.Localization(__file__, 783, 15), '==', key_164127, unicode_164128)
        
        # Testing the type of an if condition (line 783)
        if_condition_164130 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 783, 12), result_eq_164129)
        # Assigning a type to the variable 'if_condition_164130' (line 783)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 783, 12), 'if_condition_164130', if_condition_164130)
        # SSA begins for if statement (line 783)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _notify_submit_observers(...): (line 784)
        # Processing the call keyword arguments (line 784)
        kwargs_164133 = {}
        # Getting the type of 'self' (line 784)
        self_164131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 16), 'self', False)
        # Obtaining the member '_notify_submit_observers' of a type (line 784)
        _notify_submit_observers_164132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 784, 16), self_164131, '_notify_submit_observers')
        # Calling _notify_submit_observers(args, kwargs) (line 784)
        _notify_submit_observers_call_result_164134 = invoke(stypy.reporting.localization.Localization(__file__, 784, 16), _notify_submit_observers_164132, *[], **kwargs_164133)
        
        # SSA join for if statement (line 783)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 752)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_keypress(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_keypress' in the type store
        # Getting the type of 'stypy_return_type' (line 749)
        stypy_return_type_164135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_164135)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_keypress'
        return stypy_return_type_164135


    @norecursion
    def set_val(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_val'
        module_type_store = module_type_store.open_function_context('set_val', 786, 4, False)
        # Assigning a type to the variable 'self' (line 787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextBox.set_val.__dict__.__setitem__('stypy_localization', localization)
        TextBox.set_val.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextBox.set_val.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextBox.set_val.__dict__.__setitem__('stypy_function_name', 'TextBox.set_val')
        TextBox.set_val.__dict__.__setitem__('stypy_param_names_list', ['val'])
        TextBox.set_val.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextBox.set_val.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextBox.set_val.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextBox.set_val.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextBox.set_val.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextBox.set_val.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextBox.set_val', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_val', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_val(...)' code ##################

        
        # Assigning a Call to a Name (line 787):
        
        # Assigning a Call to a Name (line 787):
        
        # Call to str(...): (line 787)
        # Processing the call arguments (line 787)
        # Getting the type of 'val' (line 787)
        val_164137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 21), 'val', False)
        # Processing the call keyword arguments (line 787)
        kwargs_164138 = {}
        # Getting the type of 'str' (line 787)
        str_164136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 17), 'str', False)
        # Calling str(args, kwargs) (line 787)
        str_call_result_164139 = invoke(stypy.reporting.localization.Localization(__file__, 787, 17), str_164136, *[val_164137], **kwargs_164138)
        
        # Assigning a type to the variable 'newval' (line 787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 8), 'newval', str_call_result_164139)
        
        
        # Getting the type of 'self' (line 788)
        self_164140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 11), 'self')
        # Obtaining the member 'text' of a type (line 788)
        text_164141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 11), self_164140, 'text')
        # Getting the type of 'newval' (line 788)
        newval_164142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 24), 'newval')
        # Applying the binary operator '==' (line 788)
        result_eq_164143 = python_operator(stypy.reporting.localization.Localization(__file__, 788, 11), '==', text_164141, newval_164142)
        
        # Testing the type of an if condition (line 788)
        if_condition_164144 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 788, 8), result_eq_164143)
        # Assigning a type to the variable 'if_condition_164144' (line 788)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 788, 8), 'if_condition_164144', if_condition_164144)
        # SSA begins for if statement (line 788)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 789, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 788)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 790):
        
        # Assigning a Name to a Attribute (line 790):
        # Getting the type of 'newval' (line 790)
        newval_164145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 20), 'newval')
        # Getting the type of 'self' (line 790)
        self_164146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 8), 'self')
        # Setting the type of the member 'text' of a type (line 790)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 790, 8), self_164146, 'text', newval_164145)
        
        # Call to remove(...): (line 791)
        # Processing the call keyword arguments (line 791)
        kwargs_164150 = {}
        # Getting the type of 'self' (line 791)
        self_164147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 8), 'self', False)
        # Obtaining the member 'text_disp' of a type (line 791)
        text_disp_164148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 8), self_164147, 'text_disp')
        # Obtaining the member 'remove' of a type (line 791)
        remove_164149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 8), text_disp_164148, 'remove')
        # Calling remove(args, kwargs) (line 791)
        remove_call_result_164151 = invoke(stypy.reporting.localization.Localization(__file__, 791, 8), remove_164149, *[], **kwargs_164150)
        
        
        # Assigning a Call to a Attribute (line 792):
        
        # Assigning a Call to a Attribute (line 792):
        
        # Call to _make_text_disp(...): (line 792)
        # Processing the call arguments (line 792)
        # Getting the type of 'self' (line 792)
        self_164154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 46), 'self', False)
        # Obtaining the member 'text' of a type (line 792)
        text_164155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 46), self_164154, 'text')
        # Processing the call keyword arguments (line 792)
        kwargs_164156 = {}
        # Getting the type of 'self' (line 792)
        self_164152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 25), 'self', False)
        # Obtaining the member '_make_text_disp' of a type (line 792)
        _make_text_disp_164153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 25), self_164152, '_make_text_disp')
        # Calling _make_text_disp(args, kwargs) (line 792)
        _make_text_disp_call_result_164157 = invoke(stypy.reporting.localization.Localization(__file__, 792, 25), _make_text_disp_164153, *[text_164155], **kwargs_164156)
        
        # Getting the type of 'self' (line 792)
        self_164158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 8), 'self')
        # Setting the type of the member 'text_disp' of a type (line 792)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 8), self_164158, 'text_disp', _make_text_disp_call_result_164157)
        
        # Call to _rendercursor(...): (line 793)
        # Processing the call keyword arguments (line 793)
        kwargs_164161 = {}
        # Getting the type of 'self' (line 793)
        self_164159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 8), 'self', False)
        # Obtaining the member '_rendercursor' of a type (line 793)
        _rendercursor_164160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 8), self_164159, '_rendercursor')
        # Calling _rendercursor(args, kwargs) (line 793)
        _rendercursor_call_result_164162 = invoke(stypy.reporting.localization.Localization(__file__, 793, 8), _rendercursor_164160, *[], **kwargs_164161)
        
        
        # Call to _notify_change_observers(...): (line 794)
        # Processing the call keyword arguments (line 794)
        kwargs_164165 = {}
        # Getting the type of 'self' (line 794)
        self_164163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 8), 'self', False)
        # Obtaining the member '_notify_change_observers' of a type (line 794)
        _notify_change_observers_164164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 8), self_164163, '_notify_change_observers')
        # Calling _notify_change_observers(args, kwargs) (line 794)
        _notify_change_observers_call_result_164166 = invoke(stypy.reporting.localization.Localization(__file__, 794, 8), _notify_change_observers_164164, *[], **kwargs_164165)
        
        
        # Call to _notify_submit_observers(...): (line 795)
        # Processing the call keyword arguments (line 795)
        kwargs_164169 = {}
        # Getting the type of 'self' (line 795)
        self_164167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 8), 'self', False)
        # Obtaining the member '_notify_submit_observers' of a type (line 795)
        _notify_submit_observers_164168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 8), self_164167, '_notify_submit_observers')
        # Calling _notify_submit_observers(args, kwargs) (line 795)
        _notify_submit_observers_call_result_164170 = invoke(stypy.reporting.localization.Localization(__file__, 795, 8), _notify_submit_observers_164168, *[], **kwargs_164169)
        
        
        # ################# End of 'set_val(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_val' in the type store
        # Getting the type of 'stypy_return_type' (line 786)
        stypy_return_type_164171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_164171)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_val'
        return stypy_return_type_164171


    @norecursion
    def _notify_change_observers(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_notify_change_observers'
        module_type_store = module_type_store.open_function_context('_notify_change_observers', 797, 4, False)
        # Assigning a type to the variable 'self' (line 798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextBox._notify_change_observers.__dict__.__setitem__('stypy_localization', localization)
        TextBox._notify_change_observers.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextBox._notify_change_observers.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextBox._notify_change_observers.__dict__.__setitem__('stypy_function_name', 'TextBox._notify_change_observers')
        TextBox._notify_change_observers.__dict__.__setitem__('stypy_param_names_list', [])
        TextBox._notify_change_observers.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextBox._notify_change_observers.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextBox._notify_change_observers.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextBox._notify_change_observers.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextBox._notify_change_observers.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextBox._notify_change_observers.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextBox._notify_change_observers', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_notify_change_observers', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_notify_change_observers(...)' code ##################

        
        
        # Call to iteritems(...): (line 798)
        # Processing the call arguments (line 798)
        # Getting the type of 'self' (line 798)
        self_164174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 39), 'self', False)
        # Obtaining the member 'change_observers' of a type (line 798)
        change_observers_164175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 39), self_164174, 'change_observers')
        # Processing the call keyword arguments (line 798)
        kwargs_164176 = {}
        # Getting the type of 'six' (line 798)
        six_164172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 25), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 798)
        iteritems_164173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 25), six_164172, 'iteritems')
        # Calling iteritems(args, kwargs) (line 798)
        iteritems_call_result_164177 = invoke(stypy.reporting.localization.Localization(__file__, 798, 25), iteritems_164173, *[change_observers_164175], **kwargs_164176)
        
        # Testing the type of a for loop iterable (line 798)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 798, 8), iteritems_call_result_164177)
        # Getting the type of the for loop variable (line 798)
        for_loop_var_164178 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 798, 8), iteritems_call_result_164177)
        # Assigning a type to the variable 'cid' (line 798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 8), 'cid', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 798, 8), for_loop_var_164178))
        # Assigning a type to the variable 'func' (line 798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 8), 'func', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 798, 8), for_loop_var_164178))
        # SSA begins for a for statement (line 798)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to func(...): (line 799)
        # Processing the call arguments (line 799)
        # Getting the type of 'self' (line 799)
        self_164180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 17), 'self', False)
        # Obtaining the member 'text' of a type (line 799)
        text_164181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 17), self_164180, 'text')
        # Processing the call keyword arguments (line 799)
        kwargs_164182 = {}
        # Getting the type of 'func' (line 799)
        func_164179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 12), 'func', False)
        # Calling func(args, kwargs) (line 799)
        func_call_result_164183 = invoke(stypy.reporting.localization.Localization(__file__, 799, 12), func_164179, *[text_164181], **kwargs_164182)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_notify_change_observers(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_notify_change_observers' in the type store
        # Getting the type of 'stypy_return_type' (line 797)
        stypy_return_type_164184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_164184)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_notify_change_observers'
        return stypy_return_type_164184


    @norecursion
    def begin_typing(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'begin_typing'
        module_type_store = module_type_store.open_function_context('begin_typing', 801, 4, False)
        # Assigning a type to the variable 'self' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextBox.begin_typing.__dict__.__setitem__('stypy_localization', localization)
        TextBox.begin_typing.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextBox.begin_typing.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextBox.begin_typing.__dict__.__setitem__('stypy_function_name', 'TextBox.begin_typing')
        TextBox.begin_typing.__dict__.__setitem__('stypy_param_names_list', ['x'])
        TextBox.begin_typing.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextBox.begin_typing.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextBox.begin_typing.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextBox.begin_typing.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextBox.begin_typing.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextBox.begin_typing.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextBox.begin_typing', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'begin_typing', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'begin_typing(...)' code ##################

        
        # Assigning a Name to a Attribute (line 802):
        
        # Assigning a Name to a Attribute (line 802):
        # Getting the type of 'True' (line 802)
        True_164185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 33), 'True')
        # Getting the type of 'self' (line 802)
        self_164186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), 'self')
        # Setting the type of the member 'capturekeystrokes' of a type (line 802)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 8), self_164186, 'capturekeystrokes', True_164185)
        
        # Assigning a Dict to a Attribute (line 805):
        
        # Assigning a Dict to a Attribute (line 805):
        
        # Obtaining an instance of the builtin type 'dict' (line 805)
        dict_164187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 805, 28), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 805)
        
        # Getting the type of 'self' (line 805)
        self_164188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 8), 'self')
        # Setting the type of the member 'reset_params' of a type (line 805)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 8), self_164188, 'reset_params', dict_164187)
        
        # Getting the type of 'self' (line 806)
        self_164189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 19), 'self')
        # Obtaining the member 'params_to_disable' of a type (line 806)
        params_to_disable_164190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 19), self_164189, 'params_to_disable')
        # Testing the type of a for loop iterable (line 806)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 806, 8), params_to_disable_164190)
        # Getting the type of the for loop variable (line 806)
        for_loop_var_164191 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 806, 8), params_to_disable_164190)
        # Assigning a type to the variable 'key' (line 806)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 8), 'key', for_loop_var_164191)
        # SSA begins for a for statement (line 806)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Subscript (line 807):
        
        # Assigning a Subscript to a Subscript (line 807):
        
        # Obtaining the type of the subscript
        # Getting the type of 'key' (line 807)
        key_164192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 46), 'key')
        # Getting the type of 'rcParams' (line 807)
        rcParams_164193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 37), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 807)
        getitem___164194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 37), rcParams_164193, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 807)
        subscript_call_result_164195 = invoke(stypy.reporting.localization.Localization(__file__, 807, 37), getitem___164194, key_164192)
        
        # Getting the type of 'self' (line 807)
        self_164196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 12), 'self')
        # Obtaining the member 'reset_params' of a type (line 807)
        reset_params_164197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 12), self_164196, 'reset_params')
        # Getting the type of 'key' (line 807)
        key_164198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 30), 'key')
        # Storing an element on a container (line 807)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 807, 12), reset_params_164197, (key_164198, subscript_call_result_164195))
        
        # Assigning a List to a Subscript (line 808):
        
        # Assigning a List to a Subscript (line 808):
        
        # Obtaining an instance of the builtin type 'list' (line 808)
        list_164199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 808)
        
        # Getting the type of 'rcParams' (line 808)
        rcParams_164200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 12), 'rcParams')
        # Getting the type of 'key' (line 808)
        key_164201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 21), 'key')
        # Storing an element on a container (line 808)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 808, 12), rcParams_164200, (key_164201, list_164199))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'begin_typing(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'begin_typing' in the type store
        # Getting the type of 'stypy_return_type' (line 801)
        stypy_return_type_164202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_164202)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'begin_typing'
        return stypy_return_type_164202


    @norecursion
    def stop_typing(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'stop_typing'
        module_type_store = module_type_store.open_function_context('stop_typing', 810, 4, False)
        # Assigning a type to the variable 'self' (line 811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextBox.stop_typing.__dict__.__setitem__('stypy_localization', localization)
        TextBox.stop_typing.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextBox.stop_typing.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextBox.stop_typing.__dict__.__setitem__('stypy_function_name', 'TextBox.stop_typing')
        TextBox.stop_typing.__dict__.__setitem__('stypy_param_names_list', [])
        TextBox.stop_typing.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextBox.stop_typing.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextBox.stop_typing.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextBox.stop_typing.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextBox.stop_typing.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextBox.stop_typing.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextBox.stop_typing', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'stop_typing', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'stop_typing(...)' code ##################

        
        # Assigning a Name to a Name (line 811):
        
        # Assigning a Name to a Name (line 811):
        # Getting the type of 'False' (line 811)
        False_164203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 23), 'False')
        # Assigning a type to the variable 'notifysubmit' (line 811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 8), 'notifysubmit', False_164203)
        
        # Getting the type of 'self' (line 815)
        self_164204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 11), 'self')
        # Obtaining the member 'capturekeystrokes' of a type (line 815)
        capturekeystrokes_164205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 11), self_164204, 'capturekeystrokes')
        # Testing the type of an if condition (line 815)
        if_condition_164206 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 815, 8), capturekeystrokes_164205)
        # Assigning a type to the variable 'if_condition_164206' (line 815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 8), 'if_condition_164206', if_condition_164206)
        # SSA begins for if statement (line 815)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 818)
        self_164207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 23), 'self')
        # Obtaining the member 'params_to_disable' of a type (line 818)
        params_to_disable_164208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 23), self_164207, 'params_to_disable')
        # Testing the type of a for loop iterable (line 818)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 818, 12), params_to_disable_164208)
        # Getting the type of the for loop variable (line 818)
        for_loop_var_164209 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 818, 12), params_to_disable_164208)
        # Assigning a type to the variable 'key' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 12), 'key', for_loop_var_164209)
        # SSA begins for a for statement (line 818)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Subscript (line 819):
        
        # Assigning a Subscript to a Subscript (line 819):
        
        # Obtaining the type of the subscript
        # Getting the type of 'key' (line 819)
        key_164210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 50), 'key')
        # Getting the type of 'self' (line 819)
        self_164211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 32), 'self')
        # Obtaining the member 'reset_params' of a type (line 819)
        reset_params_164212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 32), self_164211, 'reset_params')
        # Obtaining the member '__getitem__' of a type (line 819)
        getitem___164213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 32), reset_params_164212, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 819)
        subscript_call_result_164214 = invoke(stypy.reporting.localization.Localization(__file__, 819, 32), getitem___164213, key_164210)
        
        # Getting the type of 'rcParams' (line 819)
        rcParams_164215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 16), 'rcParams')
        # Getting the type of 'key' (line 819)
        key_164216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 25), 'key')
        # Storing an element on a container (line 819)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 819, 16), rcParams_164215, (key_164216, subscript_call_result_164214))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 820):
        
        # Assigning a Name to a Name (line 820):
        # Getting the type of 'True' (line 820)
        True_164217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 27), 'True')
        # Assigning a type to the variable 'notifysubmit' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 12), 'notifysubmit', True_164217)
        # SSA join for if statement (line 815)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 821):
        
        # Assigning a Name to a Attribute (line 821):
        # Getting the type of 'False' (line 821)
        False_164218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 33), 'False')
        # Getting the type of 'self' (line 821)
        self_164219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 8), 'self')
        # Setting the type of the member 'capturekeystrokes' of a type (line 821)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 821, 8), self_164219, 'capturekeystrokes', False_164218)
        
        # Call to set_visible(...): (line 822)
        # Processing the call arguments (line 822)
        # Getting the type of 'False' (line 822)
        False_164223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 32), 'False', False)
        # Processing the call keyword arguments (line 822)
        kwargs_164224 = {}
        # Getting the type of 'self' (line 822)
        self_164220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'self', False)
        # Obtaining the member 'cursor' of a type (line 822)
        cursor_164221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 8), self_164220, 'cursor')
        # Obtaining the member 'set_visible' of a type (line 822)
        set_visible_164222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 8), cursor_164221, 'set_visible')
        # Calling set_visible(args, kwargs) (line 822)
        set_visible_call_result_164225 = invoke(stypy.reporting.localization.Localization(__file__, 822, 8), set_visible_164222, *[False_164223], **kwargs_164224)
        
        
        # Call to draw(...): (line 823)
        # Processing the call keyword arguments (line 823)
        kwargs_164231 = {}
        # Getting the type of 'self' (line 823)
        self_164226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 8), 'self', False)
        # Obtaining the member 'ax' of a type (line 823)
        ax_164227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 8), self_164226, 'ax')
        # Obtaining the member 'figure' of a type (line 823)
        figure_164228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 8), ax_164227, 'figure')
        # Obtaining the member 'canvas' of a type (line 823)
        canvas_164229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 8), figure_164228, 'canvas')
        # Obtaining the member 'draw' of a type (line 823)
        draw_164230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 8), canvas_164229, 'draw')
        # Calling draw(args, kwargs) (line 823)
        draw_call_result_164232 = invoke(stypy.reporting.localization.Localization(__file__, 823, 8), draw_164230, *[], **kwargs_164231)
        
        
        # Getting the type of 'notifysubmit' (line 824)
        notifysubmit_164233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 11), 'notifysubmit')
        # Testing the type of an if condition (line 824)
        if_condition_164234 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 824, 8), notifysubmit_164233)
        # Assigning a type to the variable 'if_condition_164234' (line 824)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 824, 8), 'if_condition_164234', if_condition_164234)
        # SSA begins for if statement (line 824)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _notify_submit_observers(...): (line 825)
        # Processing the call keyword arguments (line 825)
        kwargs_164237 = {}
        # Getting the type of 'self' (line 825)
        self_164235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 12), 'self', False)
        # Obtaining the member '_notify_submit_observers' of a type (line 825)
        _notify_submit_observers_164236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 12), self_164235, '_notify_submit_observers')
        # Calling _notify_submit_observers(args, kwargs) (line 825)
        _notify_submit_observers_call_result_164238 = invoke(stypy.reporting.localization.Localization(__file__, 825, 12), _notify_submit_observers_164236, *[], **kwargs_164237)
        
        # SSA join for if statement (line 824)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'stop_typing(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'stop_typing' in the type store
        # Getting the type of 'stypy_return_type' (line 810)
        stypy_return_type_164239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_164239)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'stop_typing'
        return stypy_return_type_164239


    @norecursion
    def position_cursor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'position_cursor'
        module_type_store = module_type_store.open_function_context('position_cursor', 827, 4, False)
        # Assigning a type to the variable 'self' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextBox.position_cursor.__dict__.__setitem__('stypy_localization', localization)
        TextBox.position_cursor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextBox.position_cursor.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextBox.position_cursor.__dict__.__setitem__('stypy_function_name', 'TextBox.position_cursor')
        TextBox.position_cursor.__dict__.__setitem__('stypy_param_names_list', ['x'])
        TextBox.position_cursor.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextBox.position_cursor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextBox.position_cursor.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextBox.position_cursor.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextBox.position_cursor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextBox.position_cursor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextBox.position_cursor', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'position_cursor', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'position_cursor(...)' code ##################

        
        
        
        # Call to len(...): (line 830)
        # Processing the call arguments (line 830)
        # Getting the type of 'self' (line 830)
        self_164241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 15), 'self', False)
        # Obtaining the member 'text' of a type (line 830)
        text_164242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 15), self_164241, 'text')
        # Processing the call keyword arguments (line 830)
        kwargs_164243 = {}
        # Getting the type of 'len' (line 830)
        len_164240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 11), 'len', False)
        # Calling len(args, kwargs) (line 830)
        len_call_result_164244 = invoke(stypy.reporting.localization.Localization(__file__, 830, 11), len_164240, *[text_164242], **kwargs_164243)
        
        int_164245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 29), 'int')
        # Applying the binary operator '==' (line 830)
        result_eq_164246 = python_operator(stypy.reporting.localization.Localization(__file__, 830, 11), '==', len_call_result_164244, int_164245)
        
        # Testing the type of an if condition (line 830)
        if_condition_164247 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 830, 8), result_eq_164246)
        # Assigning a type to the variable 'if_condition_164247' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 8), 'if_condition_164247', if_condition_164247)
        # SSA begins for if statement (line 830)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 831):
        
        # Assigning a Num to a Attribute (line 831):
        int_164248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 32), 'int')
        # Getting the type of 'self' (line 831)
        self_164249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 12), 'self')
        # Setting the type of the member 'cursor_index' of a type (line 831)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 831, 12), self_164249, 'cursor_index', int_164248)
        # SSA branch for the else part of an if statement (line 830)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 833):
        
        # Assigning a Call to a Name (line 833):
        
        # Call to get_window_extent(...): (line 833)
        # Processing the call keyword arguments (line 833)
        kwargs_164253 = {}
        # Getting the type of 'self' (line 833)
        self_164250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 17), 'self', False)
        # Obtaining the member 'text_disp' of a type (line 833)
        text_disp_164251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 17), self_164250, 'text_disp')
        # Obtaining the member 'get_window_extent' of a type (line 833)
        get_window_extent_164252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 17), text_disp_164251, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 833)
        get_window_extent_call_result_164254 = invoke(stypy.reporting.localization.Localization(__file__, 833, 17), get_window_extent_164252, *[], **kwargs_164253)
        
        # Assigning a type to the variable 'bb' (line 833)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 833, 12), 'bb', get_window_extent_call_result_164254)
        
        # Assigning a Attribute to a Name (line 835):
        
        # Assigning a Attribute to a Name (line 835):
        # Getting the type of 'self' (line 835)
        self_164255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 20), 'self')
        # Obtaining the member 'ax' of a type (line 835)
        ax_164256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 20), self_164255, 'ax')
        # Obtaining the member 'transData' of a type (line 835)
        transData_164257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 20), ax_164256, 'transData')
        # Assigning a type to the variable 'trans' (line 835)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 835, 12), 'trans', transData_164257)
        
        # Assigning a Call to a Name (line 836):
        
        # Assigning a Call to a Name (line 836):
        
        # Call to inverted(...): (line 836)
        # Processing the call keyword arguments (line 836)
        kwargs_164262 = {}
        # Getting the type of 'self' (line 836)
        self_164258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 18), 'self', False)
        # Obtaining the member 'ax' of a type (line 836)
        ax_164259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 18), self_164258, 'ax')
        # Obtaining the member 'transData' of a type (line 836)
        transData_164260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 18), ax_164259, 'transData')
        # Obtaining the member 'inverted' of a type (line 836)
        inverted_164261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 18), transData_164260, 'inverted')
        # Calling inverted(args, kwargs) (line 836)
        inverted_call_result_164263 = invoke(stypy.reporting.localization.Localization(__file__, 836, 18), inverted_164261, *[], **kwargs_164262)
        
        # Assigning a type to the variable 'inv' (line 836)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 836, 12), 'inv', inverted_call_result_164263)
        
        # Assigning a Call to a Name (line 837):
        
        # Assigning a Call to a Name (line 837):
        
        # Call to transform(...): (line 837)
        # Processing the call arguments (line 837)
        
        # Call to transform(...): (line 837)
        # Processing the call arguments (line 837)
        # Getting the type of 'bb' (line 837)
        bb_164268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 47), 'bb', False)
        # Processing the call keyword arguments (line 837)
        kwargs_164269 = {}
        # Getting the type of 'inv' (line 837)
        inv_164266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 33), 'inv', False)
        # Obtaining the member 'transform' of a type (line 837)
        transform_164267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 33), inv_164266, 'transform')
        # Calling transform(args, kwargs) (line 837)
        transform_call_result_164270 = invoke(stypy.reporting.localization.Localization(__file__, 837, 33), transform_164267, *[bb_164268], **kwargs_164269)
        
        # Processing the call keyword arguments (line 837)
        kwargs_164271 = {}
        # Getting the type of 'trans' (line 837)
        trans_164264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 17), 'trans', False)
        # Obtaining the member 'transform' of a type (line 837)
        transform_164265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 17), trans_164264, 'transform')
        # Calling transform(args, kwargs) (line 837)
        transform_call_result_164272 = invoke(stypy.reporting.localization.Localization(__file__, 837, 17), transform_164265, *[transform_call_result_164270], **kwargs_164271)
        
        # Assigning a type to the variable 'bb' (line 837)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 837, 12), 'bb', transform_call_result_164272)
        
        # Assigning a Subscript to a Name (line 839):
        
        # Assigning a Subscript to a Name (line 839):
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 839)
        tuple_164273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 839, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 839)
        # Adding element type (line 839)
        int_164274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 839, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 839, 28), tuple_164273, int_164274)
        # Adding element type (line 839)
        int_164275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 839, 31), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 839, 28), tuple_164273, int_164275)
        
        # Getting the type of 'bb' (line 839)
        bb_164276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 25), 'bb')
        # Obtaining the member '__getitem__' of a type (line 839)
        getitem___164277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 25), bb_164276, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 839)
        subscript_call_result_164278 = invoke(stypy.reporting.localization.Localization(__file__, 839, 25), getitem___164277, tuple_164273)
        
        # Assigning a type to the variable 'text_start' (line 839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 12), 'text_start', subscript_call_result_164278)
        
        # Assigning a Subscript to a Name (line 840):
        
        # Assigning a Subscript to a Name (line 840):
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 840)
        tuple_164279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 840)
        # Adding element type (line 840)
        int_164280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 840, 26), tuple_164279, int_164280)
        # Adding element type (line 840)
        int_164281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 840, 26), tuple_164279, int_164281)
        
        # Getting the type of 'bb' (line 840)
        bb_164282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 23), 'bb')
        # Obtaining the member '__getitem__' of a type (line 840)
        getitem___164283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 840, 23), bb_164282, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 840)
        subscript_call_result_164284 = invoke(stypy.reporting.localization.Localization(__file__, 840, 23), getitem___164283, tuple_164279)
        
        # Assigning a type to the variable 'text_end' (line 840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 840, 12), 'text_end', subscript_call_result_164284)
        
        # Assigning a BinOp to a Name (line 842):
        
        # Assigning a BinOp to a Name (line 842):
        # Getting the type of 'x' (line 842)
        x_164285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 21), 'x')
        # Getting the type of 'text_start' (line 842)
        text_start_164286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 25), 'text_start')
        # Applying the binary operator '-' (line 842)
        result_sub_164287 = python_operator(stypy.reporting.localization.Localization(__file__, 842, 21), '-', x_164285, text_start_164286)
        
        # Getting the type of 'text_end' (line 842)
        text_end_164288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 40), 'text_end')
        # Getting the type of 'text_start' (line 842)
        text_start_164289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 51), 'text_start')
        # Applying the binary operator '-' (line 842)
        result_sub_164290 = python_operator(stypy.reporting.localization.Localization(__file__, 842, 40), '-', text_end_164288, text_start_164289)
        
        # Applying the binary operator 'div' (line 842)
        result_div_164291 = python_operator(stypy.reporting.localization.Localization(__file__, 842, 20), 'div', result_sub_164287, result_sub_164290)
        
        # Assigning a type to the variable 'ratio' (line 842)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 842, 12), 'ratio', result_div_164291)
        
        
        # Getting the type of 'ratio' (line 844)
        ratio_164292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 15), 'ratio')
        int_164293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 844, 23), 'int')
        # Applying the binary operator '<' (line 844)
        result_lt_164294 = python_operator(stypy.reporting.localization.Localization(__file__, 844, 15), '<', ratio_164292, int_164293)
        
        # Testing the type of an if condition (line 844)
        if_condition_164295 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 844, 12), result_lt_164294)
        # Assigning a type to the variable 'if_condition_164295' (line 844)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 844, 12), 'if_condition_164295', if_condition_164295)
        # SSA begins for if statement (line 844)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 845):
        
        # Assigning a Num to a Name (line 845):
        int_164296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 845, 24), 'int')
        # Assigning a type to the variable 'ratio' (line 845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 845, 16), 'ratio', int_164296)
        # SSA join for if statement (line 844)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'ratio' (line 846)
        ratio_164297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 15), 'ratio')
        int_164298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 846, 23), 'int')
        # Applying the binary operator '>' (line 846)
        result_gt_164299 = python_operator(stypy.reporting.localization.Localization(__file__, 846, 15), '>', ratio_164297, int_164298)
        
        # Testing the type of an if condition (line 846)
        if_condition_164300 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 846, 12), result_gt_164299)
        # Assigning a type to the variable 'if_condition_164300' (line 846)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 846, 12), 'if_condition_164300', if_condition_164300)
        # SSA begins for if statement (line 846)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 847):
        
        # Assigning a Num to a Name (line 847):
        int_164301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 847, 24), 'int')
        # Assigning a type to the variable 'ratio' (line 847)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 847, 16), 'ratio', int_164301)
        # SSA join for if statement (line 846)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 849):
        
        # Assigning a Call to a Attribute (line 849):
        
        # Call to int(...): (line 849)
        # Processing the call arguments (line 849)
        
        # Call to len(...): (line 849)
        # Processing the call arguments (line 849)
        # Getting the type of 'self' (line 849)
        self_164304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 40), 'self', False)
        # Obtaining the member 'text' of a type (line 849)
        text_164305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 849, 40), self_164304, 'text')
        # Processing the call keyword arguments (line 849)
        kwargs_164306 = {}
        # Getting the type of 'len' (line 849)
        len_164303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 36), 'len', False)
        # Calling len(args, kwargs) (line 849)
        len_call_result_164307 = invoke(stypy.reporting.localization.Localization(__file__, 849, 36), len_164303, *[text_164305], **kwargs_164306)
        
        # Getting the type of 'ratio' (line 849)
        ratio_164308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 53), 'ratio', False)
        # Applying the binary operator '*' (line 849)
        result_mul_164309 = python_operator(stypy.reporting.localization.Localization(__file__, 849, 36), '*', len_call_result_164307, ratio_164308)
        
        # Processing the call keyword arguments (line 849)
        kwargs_164310 = {}
        # Getting the type of 'int' (line 849)
        int_164302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 32), 'int', False)
        # Calling int(args, kwargs) (line 849)
        int_call_result_164311 = invoke(stypy.reporting.localization.Localization(__file__, 849, 32), int_164302, *[result_mul_164309], **kwargs_164310)
        
        # Getting the type of 'self' (line 849)
        self_164312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 12), 'self')
        # Setting the type of the member 'cursor_index' of a type (line 849)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 849, 12), self_164312, 'cursor_index', int_call_result_164311)
        # SSA join for if statement (line 830)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _rendercursor(...): (line 851)
        # Processing the call keyword arguments (line 851)
        kwargs_164315 = {}
        # Getting the type of 'self' (line 851)
        self_164313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 8), 'self', False)
        # Obtaining the member '_rendercursor' of a type (line 851)
        _rendercursor_164314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 8), self_164313, '_rendercursor')
        # Calling _rendercursor(args, kwargs) (line 851)
        _rendercursor_call_result_164316 = invoke(stypy.reporting.localization.Localization(__file__, 851, 8), _rendercursor_164314, *[], **kwargs_164315)
        
        
        # ################# End of 'position_cursor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'position_cursor' in the type store
        # Getting the type of 'stypy_return_type' (line 827)
        stypy_return_type_164317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_164317)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'position_cursor'
        return stypy_return_type_164317


    @norecursion
    def _click(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_click'
        module_type_store = module_type_store.open_function_context('_click', 853, 4, False)
        # Assigning a type to the variable 'self' (line 854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextBox._click.__dict__.__setitem__('stypy_localization', localization)
        TextBox._click.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextBox._click.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextBox._click.__dict__.__setitem__('stypy_function_name', 'TextBox._click')
        TextBox._click.__dict__.__setitem__('stypy_param_names_list', ['event'])
        TextBox._click.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextBox._click.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextBox._click.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextBox._click.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextBox._click.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextBox._click.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextBox._click', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_click', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_click(...)' code ##################

        
        
        # Call to ignore(...): (line 854)
        # Processing the call arguments (line 854)
        # Getting the type of 'event' (line 854)
        event_164320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 23), 'event', False)
        # Processing the call keyword arguments (line 854)
        kwargs_164321 = {}
        # Getting the type of 'self' (line 854)
        self_164318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 11), 'self', False)
        # Obtaining the member 'ignore' of a type (line 854)
        ignore_164319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 854, 11), self_164318, 'ignore')
        # Calling ignore(args, kwargs) (line 854)
        ignore_call_result_164322 = invoke(stypy.reporting.localization.Localization(__file__, 854, 11), ignore_164319, *[event_164320], **kwargs_164321)
        
        # Testing the type of an if condition (line 854)
        if_condition_164323 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 854, 8), ignore_call_result_164322)
        # Assigning a type to the variable 'if_condition_164323' (line 854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 8), 'if_condition_164323', if_condition_164323)
        # SSA begins for if statement (line 854)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 855, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 854)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'event' (line 856)
        event_164324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 11), 'event')
        # Obtaining the member 'inaxes' of a type (line 856)
        inaxes_164325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 856, 11), event_164324, 'inaxes')
        # Getting the type of 'self' (line 856)
        self_164326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 27), 'self')
        # Obtaining the member 'ax' of a type (line 856)
        ax_164327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 856, 27), self_164326, 'ax')
        # Applying the binary operator '!=' (line 856)
        result_ne_164328 = python_operator(stypy.reporting.localization.Localization(__file__, 856, 11), '!=', inaxes_164325, ax_164327)
        
        # Testing the type of an if condition (line 856)
        if_condition_164329 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 856, 8), result_ne_164328)
        # Assigning a type to the variable 'if_condition_164329' (line 856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 856, 8), 'if_condition_164329', if_condition_164329)
        # SSA begins for if statement (line 856)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to stop_typing(...): (line 857)
        # Processing the call keyword arguments (line 857)
        kwargs_164332 = {}
        # Getting the type of 'self' (line 857)
        self_164330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 12), 'self', False)
        # Obtaining the member 'stop_typing' of a type (line 857)
        stop_typing_164331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 857, 12), self_164330, 'stop_typing')
        # Calling stop_typing(args, kwargs) (line 857)
        stop_typing_call_result_164333 = invoke(stypy.reporting.localization.Localization(__file__, 857, 12), stop_typing_164331, *[], **kwargs_164332)
        
        # Assigning a type to the variable 'stypy_return_type' (line 858)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 858, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 856)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 859)
        self_164334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 15), 'self')
        # Obtaining the member 'eventson' of a type (line 859)
        eventson_164335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 859, 15), self_164334, 'eventson')
        # Applying the 'not' unary operator (line 859)
        result_not__164336 = python_operator(stypy.reporting.localization.Localization(__file__, 859, 11), 'not', eventson_164335)
        
        # Testing the type of an if condition (line 859)
        if_condition_164337 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 859, 8), result_not__164336)
        # Assigning a type to the variable 'if_condition_164337' (line 859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 859, 8), 'if_condition_164337', if_condition_164337)
        # SSA begins for if statement (line 859)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 860, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 859)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'event' (line 861)
        event_164338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 11), 'event')
        # Obtaining the member 'canvas' of a type (line 861)
        canvas_164339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 11), event_164338, 'canvas')
        # Obtaining the member 'mouse_grabber' of a type (line 861)
        mouse_grabber_164340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 11), canvas_164339, 'mouse_grabber')
        # Getting the type of 'self' (line 861)
        self_164341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 41), 'self')
        # Obtaining the member 'ax' of a type (line 861)
        ax_164342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 41), self_164341, 'ax')
        # Applying the binary operator '!=' (line 861)
        result_ne_164343 = python_operator(stypy.reporting.localization.Localization(__file__, 861, 11), '!=', mouse_grabber_164340, ax_164342)
        
        # Testing the type of an if condition (line 861)
        if_condition_164344 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 861, 8), result_ne_164343)
        # Assigning a type to the variable 'if_condition_164344' (line 861)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 861, 8), 'if_condition_164344', if_condition_164344)
        # SSA begins for if statement (line 861)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to grab_mouse(...): (line 862)
        # Processing the call arguments (line 862)
        # Getting the type of 'self' (line 862)
        self_164348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 36), 'self', False)
        # Obtaining the member 'ax' of a type (line 862)
        ax_164349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 862, 36), self_164348, 'ax')
        # Processing the call keyword arguments (line 862)
        kwargs_164350 = {}
        # Getting the type of 'event' (line 862)
        event_164345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 12), 'event', False)
        # Obtaining the member 'canvas' of a type (line 862)
        canvas_164346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 862, 12), event_164345, 'canvas')
        # Obtaining the member 'grab_mouse' of a type (line 862)
        grab_mouse_164347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 862, 12), canvas_164346, 'grab_mouse')
        # Calling grab_mouse(args, kwargs) (line 862)
        grab_mouse_call_result_164351 = invoke(stypy.reporting.localization.Localization(__file__, 862, 12), grab_mouse_164347, *[ax_164349], **kwargs_164350)
        
        # SSA join for if statement (line 861)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 863)
        self_164352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 15), 'self')
        # Obtaining the member 'capturekeystrokes' of a type (line 863)
        capturekeystrokes_164353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 15), self_164352, 'capturekeystrokes')
        # Applying the 'not' unary operator (line 863)
        result_not__164354 = python_operator(stypy.reporting.localization.Localization(__file__, 863, 11), 'not', capturekeystrokes_164353)
        
        # Testing the type of an if condition (line 863)
        if_condition_164355 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 863, 8), result_not__164354)
        # Assigning a type to the variable 'if_condition_164355' (line 863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 863, 8), 'if_condition_164355', if_condition_164355)
        # SSA begins for if statement (line 863)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to begin_typing(...): (line 864)
        # Processing the call arguments (line 864)
        # Getting the type of 'event' (line 864)
        event_164358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 30), 'event', False)
        # Obtaining the member 'x' of a type (line 864)
        x_164359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 864, 30), event_164358, 'x')
        # Processing the call keyword arguments (line 864)
        kwargs_164360 = {}
        # Getting the type of 'self' (line 864)
        self_164356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 12), 'self', False)
        # Obtaining the member 'begin_typing' of a type (line 864)
        begin_typing_164357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 864, 12), self_164356, 'begin_typing')
        # Calling begin_typing(args, kwargs) (line 864)
        begin_typing_call_result_164361 = invoke(stypy.reporting.localization.Localization(__file__, 864, 12), begin_typing_164357, *[x_164359], **kwargs_164360)
        
        # SSA join for if statement (line 863)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to position_cursor(...): (line 865)
        # Processing the call arguments (line 865)
        # Getting the type of 'event' (line 865)
        event_164364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 29), 'event', False)
        # Obtaining the member 'x' of a type (line 865)
        x_164365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 865, 29), event_164364, 'x')
        # Processing the call keyword arguments (line 865)
        kwargs_164366 = {}
        # Getting the type of 'self' (line 865)
        self_164362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 8), 'self', False)
        # Obtaining the member 'position_cursor' of a type (line 865)
        position_cursor_164363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 865, 8), self_164362, 'position_cursor')
        # Calling position_cursor(args, kwargs) (line 865)
        position_cursor_call_result_164367 = invoke(stypy.reporting.localization.Localization(__file__, 865, 8), position_cursor_164363, *[x_164365], **kwargs_164366)
        
        
        # ################# End of '_click(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_click' in the type store
        # Getting the type of 'stypy_return_type' (line 853)
        stypy_return_type_164368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_164368)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_click'
        return stypy_return_type_164368


    @norecursion
    def _resize(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_resize'
        module_type_store = module_type_store.open_function_context('_resize', 867, 4, False)
        # Assigning a type to the variable 'self' (line 868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 868, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextBox._resize.__dict__.__setitem__('stypy_localization', localization)
        TextBox._resize.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextBox._resize.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextBox._resize.__dict__.__setitem__('stypy_function_name', 'TextBox._resize')
        TextBox._resize.__dict__.__setitem__('stypy_param_names_list', ['event'])
        TextBox._resize.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextBox._resize.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextBox._resize.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextBox._resize.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextBox._resize.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextBox._resize.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextBox._resize', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_resize', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_resize(...)' code ##################

        
        # Call to stop_typing(...): (line 868)
        # Processing the call keyword arguments (line 868)
        kwargs_164371 = {}
        # Getting the type of 'self' (line 868)
        self_164369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 8), 'self', False)
        # Obtaining the member 'stop_typing' of a type (line 868)
        stop_typing_164370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 8), self_164369, 'stop_typing')
        # Calling stop_typing(args, kwargs) (line 868)
        stop_typing_call_result_164372 = invoke(stypy.reporting.localization.Localization(__file__, 868, 8), stop_typing_164370, *[], **kwargs_164371)
        
        
        # ################# End of '_resize(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_resize' in the type store
        # Getting the type of 'stypy_return_type' (line 867)
        stypy_return_type_164373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_164373)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_resize'
        return stypy_return_type_164373


    @norecursion
    def _motion(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_motion'
        module_type_store = module_type_store.open_function_context('_motion', 870, 4, False)
        # Assigning a type to the variable 'self' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextBox._motion.__dict__.__setitem__('stypy_localization', localization)
        TextBox._motion.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextBox._motion.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextBox._motion.__dict__.__setitem__('stypy_function_name', 'TextBox._motion')
        TextBox._motion.__dict__.__setitem__('stypy_param_names_list', ['event'])
        TextBox._motion.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextBox._motion.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextBox._motion.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextBox._motion.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextBox._motion.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextBox._motion.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextBox._motion', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_motion', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_motion(...)' code ##################

        
        
        # Call to ignore(...): (line 871)
        # Processing the call arguments (line 871)
        # Getting the type of 'event' (line 871)
        event_164376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 23), 'event', False)
        # Processing the call keyword arguments (line 871)
        kwargs_164377 = {}
        # Getting the type of 'self' (line 871)
        self_164374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 11), 'self', False)
        # Obtaining the member 'ignore' of a type (line 871)
        ignore_164375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 11), self_164374, 'ignore')
        # Calling ignore(args, kwargs) (line 871)
        ignore_call_result_164378 = invoke(stypy.reporting.localization.Localization(__file__, 871, 11), ignore_164375, *[event_164376], **kwargs_164377)
        
        # Testing the type of an if condition (line 871)
        if_condition_164379 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 871, 8), ignore_call_result_164378)
        # Assigning a type to the variable 'if_condition_164379' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 8), 'if_condition_164379', if_condition_164379)
        # SSA begins for if statement (line 871)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 872)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 872, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 871)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'event' (line 873)
        event_164380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 11), 'event')
        # Obtaining the member 'inaxes' of a type (line 873)
        inaxes_164381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 11), event_164380, 'inaxes')
        # Getting the type of 'self' (line 873)
        self_164382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 27), 'self')
        # Obtaining the member 'ax' of a type (line 873)
        ax_164383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 27), self_164382, 'ax')
        # Applying the binary operator '==' (line 873)
        result_eq_164384 = python_operator(stypy.reporting.localization.Localization(__file__, 873, 11), '==', inaxes_164381, ax_164383)
        
        # Testing the type of an if condition (line 873)
        if_condition_164385 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 873, 8), result_eq_164384)
        # Assigning a type to the variable 'if_condition_164385' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'if_condition_164385', if_condition_164385)
        # SSA begins for if statement (line 873)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 874):
        
        # Assigning a Attribute to a Name (line 874):
        # Getting the type of 'self' (line 874)
        self_164386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 16), 'self')
        # Obtaining the member 'hovercolor' of a type (line 874)
        hovercolor_164387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 874, 16), self_164386, 'hovercolor')
        # Assigning a type to the variable 'c' (line 874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 12), 'c', hovercolor_164387)
        # SSA branch for the else part of an if statement (line 873)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 876):
        
        # Assigning a Attribute to a Name (line 876):
        # Getting the type of 'self' (line 876)
        self_164388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 16), 'self')
        # Obtaining the member 'color' of a type (line 876)
        color_164389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 16), self_164388, 'color')
        # Assigning a type to the variable 'c' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 12), 'c', color_164389)
        # SSA join for if statement (line 873)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'c' (line 877)
        c_164390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 11), 'c')
        # Getting the type of 'self' (line 877)
        self_164391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 16), 'self')
        # Obtaining the member '_lastcolor' of a type (line 877)
        _lastcolor_164392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 16), self_164391, '_lastcolor')
        # Applying the binary operator '!=' (line 877)
        result_ne_164393 = python_operator(stypy.reporting.localization.Localization(__file__, 877, 11), '!=', c_164390, _lastcolor_164392)
        
        # Testing the type of an if condition (line 877)
        if_condition_164394 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 877, 8), result_ne_164393)
        # Assigning a type to the variable 'if_condition_164394' (line 877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 877, 8), 'if_condition_164394', if_condition_164394)
        # SSA begins for if statement (line 877)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_facecolor(...): (line 878)
        # Processing the call arguments (line 878)
        # Getting the type of 'c' (line 878)
        c_164398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 34), 'c', False)
        # Processing the call keyword arguments (line 878)
        kwargs_164399 = {}
        # Getting the type of 'self' (line 878)
        self_164395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 878)
        ax_164396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 878, 12), self_164395, 'ax')
        # Obtaining the member 'set_facecolor' of a type (line 878)
        set_facecolor_164397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 878, 12), ax_164396, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 878)
        set_facecolor_call_result_164400 = invoke(stypy.reporting.localization.Localization(__file__, 878, 12), set_facecolor_164397, *[c_164398], **kwargs_164399)
        
        
        # Assigning a Name to a Attribute (line 879):
        
        # Assigning a Name to a Attribute (line 879):
        # Getting the type of 'c' (line 879)
        c_164401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 30), 'c')
        # Getting the type of 'self' (line 879)
        self_164402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 12), 'self')
        # Setting the type of the member '_lastcolor' of a type (line 879)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 12), self_164402, '_lastcolor', c_164401)
        
        # Getting the type of 'self' (line 880)
        self_164403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 15), 'self')
        # Obtaining the member 'drawon' of a type (line 880)
        drawon_164404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 880, 15), self_164403, 'drawon')
        # Testing the type of an if condition (line 880)
        if_condition_164405 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 880, 12), drawon_164404)
        # Assigning a type to the variable 'if_condition_164405' (line 880)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 880, 12), 'if_condition_164405', if_condition_164405)
        # SSA begins for if statement (line 880)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 881)
        # Processing the call keyword arguments (line 881)
        kwargs_164411 = {}
        # Getting the type of 'self' (line 881)
        self_164406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 16), 'self', False)
        # Obtaining the member 'ax' of a type (line 881)
        ax_164407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 16), self_164406, 'ax')
        # Obtaining the member 'figure' of a type (line 881)
        figure_164408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 16), ax_164407, 'figure')
        # Obtaining the member 'canvas' of a type (line 881)
        canvas_164409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 16), figure_164408, 'canvas')
        # Obtaining the member 'draw' of a type (line 881)
        draw_164410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 16), canvas_164409, 'draw')
        # Calling draw(args, kwargs) (line 881)
        draw_call_result_164412 = invoke(stypy.reporting.localization.Localization(__file__, 881, 16), draw_164410, *[], **kwargs_164411)
        
        # SSA join for if statement (line 880)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 877)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_motion(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_motion' in the type store
        # Getting the type of 'stypy_return_type' (line 870)
        stypy_return_type_164413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_164413)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_motion'
        return stypy_return_type_164413


    @norecursion
    def on_text_change(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'on_text_change'
        module_type_store = module_type_store.open_function_context('on_text_change', 883, 4, False)
        # Assigning a type to the variable 'self' (line 884)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 884, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextBox.on_text_change.__dict__.__setitem__('stypy_localization', localization)
        TextBox.on_text_change.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextBox.on_text_change.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextBox.on_text_change.__dict__.__setitem__('stypy_function_name', 'TextBox.on_text_change')
        TextBox.on_text_change.__dict__.__setitem__('stypy_param_names_list', ['func'])
        TextBox.on_text_change.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextBox.on_text_change.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextBox.on_text_change.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextBox.on_text_change.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextBox.on_text_change.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextBox.on_text_change.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextBox.on_text_change', ['func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'on_text_change', localization, ['func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'on_text_change(...)' code ##################

        unicode_164414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 888, (-1)), 'unicode', u'\n        When the text changes, call this *func* with event.\n\n        A connection id is returned which can be used to disconnect.\n        ')
        
        # Assigning a Attribute to a Name (line 889):
        
        # Assigning a Attribute to a Name (line 889):
        # Getting the type of 'self' (line 889)
        self_164415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 14), 'self')
        # Obtaining the member 'cnt' of a type (line 889)
        cnt_164416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 889, 14), self_164415, 'cnt')
        # Assigning a type to the variable 'cid' (line 889)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 889, 8), 'cid', cnt_164416)
        
        # Assigning a Name to a Subscript (line 890):
        
        # Assigning a Name to a Subscript (line 890):
        # Getting the type of 'func' (line 890)
        func_164417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 37), 'func')
        # Getting the type of 'self' (line 890)
        self_164418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 8), 'self')
        # Obtaining the member 'change_observers' of a type (line 890)
        change_observers_164419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 890, 8), self_164418, 'change_observers')
        # Getting the type of 'cid' (line 890)
        cid_164420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 30), 'cid')
        # Storing an element on a container (line 890)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 890, 8), change_observers_164419, (cid_164420, func_164417))
        
        # Getting the type of 'self' (line 891)
        self_164421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 8), 'self')
        # Obtaining the member 'cnt' of a type (line 891)
        cnt_164422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 8), self_164421, 'cnt')
        int_164423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 891, 20), 'int')
        # Applying the binary operator '+=' (line 891)
        result_iadd_164424 = python_operator(stypy.reporting.localization.Localization(__file__, 891, 8), '+=', cnt_164422, int_164423)
        # Getting the type of 'self' (line 891)
        self_164425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 8), 'self')
        # Setting the type of the member 'cnt' of a type (line 891)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 8), self_164425, 'cnt', result_iadd_164424)
        
        # Getting the type of 'cid' (line 892)
        cid_164426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 15), 'cid')
        # Assigning a type to the variable 'stypy_return_type' (line 892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 8), 'stypy_return_type', cid_164426)
        
        # ################# End of 'on_text_change(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'on_text_change' in the type store
        # Getting the type of 'stypy_return_type' (line 883)
        stypy_return_type_164427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_164427)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'on_text_change'
        return stypy_return_type_164427


    @norecursion
    def on_submit(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'on_submit'
        module_type_store = module_type_store.open_function_context('on_submit', 894, 4, False)
        # Assigning a type to the variable 'self' (line 895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextBox.on_submit.__dict__.__setitem__('stypy_localization', localization)
        TextBox.on_submit.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextBox.on_submit.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextBox.on_submit.__dict__.__setitem__('stypy_function_name', 'TextBox.on_submit')
        TextBox.on_submit.__dict__.__setitem__('stypy_param_names_list', ['func'])
        TextBox.on_submit.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextBox.on_submit.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextBox.on_submit.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextBox.on_submit.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextBox.on_submit.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextBox.on_submit.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextBox.on_submit', ['func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'on_submit', localization, ['func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'on_submit(...)' code ##################

        unicode_164428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 900, (-1)), 'unicode', u'\n        When the user hits enter or leaves the submision box, call this\n        *func* with event.\n\n        A connection id is returned which can be used to disconnect.\n        ')
        
        # Assigning a Attribute to a Name (line 901):
        
        # Assigning a Attribute to a Name (line 901):
        # Getting the type of 'self' (line 901)
        self_164429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 14), 'self')
        # Obtaining the member 'cnt' of a type (line 901)
        cnt_164430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 901, 14), self_164429, 'cnt')
        # Assigning a type to the variable 'cid' (line 901)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 901, 8), 'cid', cnt_164430)
        
        # Assigning a Name to a Subscript (line 902):
        
        # Assigning a Name to a Subscript (line 902):
        # Getting the type of 'func' (line 902)
        func_164431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 37), 'func')
        # Getting the type of 'self' (line 902)
        self_164432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 8), 'self')
        # Obtaining the member 'submit_observers' of a type (line 902)
        submit_observers_164433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 902, 8), self_164432, 'submit_observers')
        # Getting the type of 'cid' (line 902)
        cid_164434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 30), 'cid')
        # Storing an element on a container (line 902)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 902, 8), submit_observers_164433, (cid_164434, func_164431))
        
        # Getting the type of 'self' (line 903)
        self_164435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 8), 'self')
        # Obtaining the member 'cnt' of a type (line 903)
        cnt_164436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 8), self_164435, 'cnt')
        int_164437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 903, 20), 'int')
        # Applying the binary operator '+=' (line 903)
        result_iadd_164438 = python_operator(stypy.reporting.localization.Localization(__file__, 903, 8), '+=', cnt_164436, int_164437)
        # Getting the type of 'self' (line 903)
        self_164439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 8), 'self')
        # Setting the type of the member 'cnt' of a type (line 903)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 8), self_164439, 'cnt', result_iadd_164438)
        
        # Getting the type of 'cid' (line 904)
        cid_164440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 15), 'cid')
        # Assigning a type to the variable 'stypy_return_type' (line 904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 8), 'stypy_return_type', cid_164440)
        
        # ################# End of 'on_submit(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'on_submit' in the type store
        # Getting the type of 'stypy_return_type' (line 894)
        stypy_return_type_164441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_164441)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'on_submit'
        return stypy_return_type_164441


    @norecursion
    def disconnect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'disconnect'
        module_type_store = module_type_store.open_function_context('disconnect', 906, 4, False)
        # Assigning a type to the variable 'self' (line 907)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 907, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TextBox.disconnect.__dict__.__setitem__('stypy_localization', localization)
        TextBox.disconnect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TextBox.disconnect.__dict__.__setitem__('stypy_type_store', module_type_store)
        TextBox.disconnect.__dict__.__setitem__('stypy_function_name', 'TextBox.disconnect')
        TextBox.disconnect.__dict__.__setitem__('stypy_param_names_list', ['cid'])
        TextBox.disconnect.__dict__.__setitem__('stypy_varargs_param_name', None)
        TextBox.disconnect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TextBox.disconnect.__dict__.__setitem__('stypy_call_defaults', defaults)
        TextBox.disconnect.__dict__.__setitem__('stypy_call_varargs', varargs)
        TextBox.disconnect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TextBox.disconnect.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TextBox.disconnect', ['cid'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'disconnect', localization, ['cid'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'disconnect(...)' code ##################

        unicode_164442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 8), 'unicode', u'remove the observer with connection id *cid*')
        
        
        # SSA begins for try-except statement (line 908)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        # Deleting a member
        # Getting the type of 'self' (line 909)
        self_164443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 16), 'self')
        # Obtaining the member 'observers' of a type (line 909)
        observers_164444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 909, 16), self_164443, 'observers')
        
        # Obtaining the type of the subscript
        # Getting the type of 'cid' (line 909)
        cid_164445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 31), 'cid')
        # Getting the type of 'self' (line 909)
        self_164446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 16), 'self')
        # Obtaining the member 'observers' of a type (line 909)
        observers_164447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 909, 16), self_164446, 'observers')
        # Obtaining the member '__getitem__' of a type (line 909)
        getitem___164448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 909, 16), observers_164447, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 909)
        subscript_call_result_164449 = invoke(stypy.reporting.localization.Localization(__file__, 909, 16), getitem___164448, cid_164445)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 909, 12), observers_164444, subscript_call_result_164449)
        # SSA branch for the except part of a try statement (line 908)
        # SSA branch for the except 'KeyError' branch of a try statement (line 908)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 908)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'disconnect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'disconnect' in the type store
        # Getting the type of 'stypy_return_type' (line 906)
        stypy_return_type_164450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_164450)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'disconnect'
        return stypy_return_type_164450


# Assigning a type to the variable 'TextBox' (line 610)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 0), 'TextBox', TextBox)
# Declaration of the 'RadioButtons' class
# Getting the type of 'AxesWidget' (line 914)
AxesWidget_164451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 19), 'AxesWidget')

class RadioButtons(AxesWidget_164451, ):
    unicode_164452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 939, (-1)), 'unicode', u'\n    A GUI neutral radio button.\n\n    For the buttons to remain responsive\n    you must keep a reference to this object.\n\n    The following attributes are exposed:\n\n     *ax*\n        The :class:`matplotlib.axes.Axes` instance the buttons are in\n\n     *activecolor*\n        The color of the button when clicked\n\n     *labels*\n        A list of :class:`matplotlib.text.Text` instances\n\n     *circles*\n        A list of :class:`matplotlib.patches.Circle` instances\n\n     *value_selected*\n        A string listing the current value selected\n\n    Connect to the RadioButtons with the :meth:`on_clicked` method\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_164453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 42), 'int')
        unicode_164454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 57), 'unicode', u'blue')
        defaults = [int_164453, unicode_164454]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 940, 4, False)
        # Assigning a type to the variable 'self' (line 941)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 941, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadioButtons.__init__', ['ax', 'labels', 'active', 'activecolor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'labels', 'active', 'activecolor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_164455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, (-1)), 'unicode', u'\n        Add radio buttons to :class:`matplotlib.axes.Axes` instance *ax*\n\n        *labels*\n            A len(buttons) list of labels as strings\n\n        *active*\n            The index into labels for the button that is active\n\n        *activecolor*\n            The color of the button when clicked\n        ')
        
        # Call to __init__(...): (line 953)
        # Processing the call arguments (line 953)
        # Getting the type of 'self' (line 953)
        self_164458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 28), 'self', False)
        # Getting the type of 'ax' (line 953)
        ax_164459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 34), 'ax', False)
        # Processing the call keyword arguments (line 953)
        kwargs_164460 = {}
        # Getting the type of 'AxesWidget' (line 953)
        AxesWidget_164456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 8), 'AxesWidget', False)
        # Obtaining the member '__init__' of a type (line 953)
        init___164457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 8), AxesWidget_164456, '__init__')
        # Calling __init__(args, kwargs) (line 953)
        init___call_result_164461 = invoke(stypy.reporting.localization.Localization(__file__, 953, 8), init___164457, *[self_164458, ax_164459], **kwargs_164460)
        
        
        # Assigning a Name to a Attribute (line 954):
        
        # Assigning a Name to a Attribute (line 954):
        # Getting the type of 'activecolor' (line 954)
        activecolor_164462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 27), 'activecolor')
        # Getting the type of 'self' (line 954)
        self_164463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 8), 'self')
        # Setting the type of the member 'activecolor' of a type (line 954)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 8), self_164463, 'activecolor', activecolor_164462)
        
        # Assigning a Name to a Attribute (line 955):
        
        # Assigning a Name to a Attribute (line 955):
        # Getting the type of 'None' (line 955)
        None_164464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 30), 'None')
        # Getting the type of 'self' (line 955)
        self_164465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 8), 'self')
        # Setting the type of the member 'value_selected' of a type (line 955)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 8), self_164465, 'value_selected', None_164464)
        
        # Call to set_xticks(...): (line 957)
        # Processing the call arguments (line 957)
        
        # Obtaining an instance of the builtin type 'list' (line 957)
        list_164468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 957)
        
        # Processing the call keyword arguments (line 957)
        kwargs_164469 = {}
        # Getting the type of 'ax' (line 957)
        ax_164466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 8), 'ax', False)
        # Obtaining the member 'set_xticks' of a type (line 957)
        set_xticks_164467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 8), ax_164466, 'set_xticks')
        # Calling set_xticks(args, kwargs) (line 957)
        set_xticks_call_result_164470 = invoke(stypy.reporting.localization.Localization(__file__, 957, 8), set_xticks_164467, *[list_164468], **kwargs_164469)
        
        
        # Call to set_yticks(...): (line 958)
        # Processing the call arguments (line 958)
        
        # Obtaining an instance of the builtin type 'list' (line 958)
        list_164473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 958)
        
        # Processing the call keyword arguments (line 958)
        kwargs_164474 = {}
        # Getting the type of 'ax' (line 958)
        ax_164471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 8), 'ax', False)
        # Obtaining the member 'set_yticks' of a type (line 958)
        set_yticks_164472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 8), ax_164471, 'set_yticks')
        # Calling set_yticks(args, kwargs) (line 958)
        set_yticks_call_result_164475 = invoke(stypy.reporting.localization.Localization(__file__, 958, 8), set_yticks_164472, *[list_164473], **kwargs_164474)
        
        
        # Call to set_navigate(...): (line 959)
        # Processing the call arguments (line 959)
        # Getting the type of 'False' (line 959)
        False_164478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 24), 'False', False)
        # Processing the call keyword arguments (line 959)
        kwargs_164479 = {}
        # Getting the type of 'ax' (line 959)
        ax_164476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 8), 'ax', False)
        # Obtaining the member 'set_navigate' of a type (line 959)
        set_navigate_164477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 8), ax_164476, 'set_navigate')
        # Calling set_navigate(args, kwargs) (line 959)
        set_navigate_call_result_164480 = invoke(stypy.reporting.localization.Localization(__file__, 959, 8), set_navigate_164477, *[False_164478], **kwargs_164479)
        
        
        # Assigning a BinOp to a Name (line 960):
        
        # Assigning a BinOp to a Name (line 960):
        float_164481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 13), 'float')
        
        # Call to len(...): (line 960)
        # Processing the call arguments (line 960)
        # Getting the type of 'labels' (line 960)
        labels_164483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 23), 'labels', False)
        # Processing the call keyword arguments (line 960)
        kwargs_164484 = {}
        # Getting the type of 'len' (line 960)
        len_164482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 19), 'len', False)
        # Calling len(args, kwargs) (line 960)
        len_call_result_164485 = invoke(stypy.reporting.localization.Localization(__file__, 960, 19), len_164482, *[labels_164483], **kwargs_164484)
        
        int_164486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 33), 'int')
        # Applying the binary operator '+' (line 960)
        result_add_164487 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 19), '+', len_call_result_164485, int_164486)
        
        # Applying the binary operator 'div' (line 960)
        result_div_164488 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 13), 'div', float_164481, result_add_164487)
        
        # Assigning a type to the variable 'dy' (line 960)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 960, 8), 'dy', result_div_164488)
        
        # Assigning a Call to a Name (line 961):
        
        # Assigning a Call to a Name (line 961):
        
        # Call to linspace(...): (line 961)
        # Processing the call arguments (line 961)
        int_164491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 961, 25), 'int')
        # Getting the type of 'dy' (line 961)
        dy_164492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 29), 'dy', False)
        # Applying the binary operator '-' (line 961)
        result_sub_164493 = python_operator(stypy.reporting.localization.Localization(__file__, 961, 25), '-', int_164491, dy_164492)
        
        # Getting the type of 'dy' (line 961)
        dy_164494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 33), 'dy', False)
        
        # Call to len(...): (line 961)
        # Processing the call arguments (line 961)
        # Getting the type of 'labels' (line 961)
        labels_164496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 41), 'labels', False)
        # Processing the call keyword arguments (line 961)
        kwargs_164497 = {}
        # Getting the type of 'len' (line 961)
        len_164495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 37), 'len', False)
        # Calling len(args, kwargs) (line 961)
        len_call_result_164498 = invoke(stypy.reporting.localization.Localization(__file__, 961, 37), len_164495, *[labels_164496], **kwargs_164497)
        
        # Processing the call keyword arguments (line 961)
        kwargs_164499 = {}
        # Getting the type of 'np' (line 961)
        np_164489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 13), 'np', False)
        # Obtaining the member 'linspace' of a type (line 961)
        linspace_164490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 961, 13), np_164489, 'linspace')
        # Calling linspace(args, kwargs) (line 961)
        linspace_call_result_164500 = invoke(stypy.reporting.localization.Localization(__file__, 961, 13), linspace_164490, *[result_sub_164493, dy_164494, len_call_result_164498], **kwargs_164499)
        
        # Assigning a type to the variable 'ys' (line 961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 961, 8), 'ys', linspace_call_result_164500)
        
        # Assigning a Num to a Name (line 962):
        
        # Assigning a Num to a Name (line 962):
        int_164501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 14), 'int')
        # Assigning a type to the variable 'cnt' (line 962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 8), 'cnt', int_164501)
        
        # Assigning a Call to a Name (line 963):
        
        # Assigning a Call to a Name (line 963):
        
        # Call to get_facecolor(...): (line 963)
        # Processing the call keyword arguments (line 963)
        kwargs_164504 = {}
        # Getting the type of 'ax' (line 963)
        ax_164502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 18), 'ax', False)
        # Obtaining the member 'get_facecolor' of a type (line 963)
        get_facecolor_164503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 18), ax_164502, 'get_facecolor')
        # Calling get_facecolor(args, kwargs) (line 963)
        get_facecolor_call_result_164505 = invoke(stypy.reporting.localization.Localization(__file__, 963, 18), get_facecolor_164503, *[], **kwargs_164504)
        
        # Assigning a type to the variable 'axcolor' (line 963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 8), 'axcolor', get_facecolor_call_result_164505)
        
        # Assigning a List to a Attribute (line 965):
        
        # Assigning a List to a Attribute (line 965):
        
        # Obtaining an instance of the builtin type 'list' (line 965)
        list_164506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 965, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 965)
        
        # Getting the type of 'self' (line 965)
        self_164507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 8), 'self')
        # Setting the type of the member 'labels' of a type (line 965)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 8), self_164507, 'labels', list_164506)
        
        # Assigning a List to a Attribute (line 966):
        
        # Assigning a List to a Attribute (line 966):
        
        # Obtaining an instance of the builtin type 'list' (line 966)
        list_164508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 966, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 966)
        
        # Getting the type of 'self' (line 966)
        self_164509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 8), 'self')
        # Setting the type of the member 'circles' of a type (line 966)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 966, 8), self_164509, 'circles', list_164508)
        
        
        # Call to zip(...): (line 967)
        # Processing the call arguments (line 967)
        # Getting the type of 'ys' (line 967)
        ys_164511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 28), 'ys', False)
        # Getting the type of 'labels' (line 967)
        labels_164512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 32), 'labels', False)
        # Processing the call keyword arguments (line 967)
        kwargs_164513 = {}
        # Getting the type of 'zip' (line 967)
        zip_164510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 24), 'zip', False)
        # Calling zip(args, kwargs) (line 967)
        zip_call_result_164514 = invoke(stypy.reporting.localization.Localization(__file__, 967, 24), zip_164510, *[ys_164511, labels_164512], **kwargs_164513)
        
        # Testing the type of a for loop iterable (line 967)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 967, 8), zip_call_result_164514)
        # Getting the type of the for loop variable (line 967)
        for_loop_var_164515 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 967, 8), zip_call_result_164514)
        # Assigning a type to the variable 'y' (line 967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 8), 'y', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 967, 8), for_loop_var_164515))
        # Assigning a type to the variable 'label' (line 967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 8), 'label', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 967, 8), for_loop_var_164515))
        # SSA begins for a for statement (line 967)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 968):
        
        # Assigning a Call to a Name (line 968):
        
        # Call to text(...): (line 968)
        # Processing the call arguments (line 968)
        float_164518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 968, 24), 'float')
        # Getting the type of 'y' (line 968)
        y_164519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 30), 'y', False)
        # Getting the type of 'label' (line 968)
        label_164520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 33), 'label', False)
        # Processing the call keyword arguments (line 968)
        # Getting the type of 'ax' (line 968)
        ax_164521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 50), 'ax', False)
        # Obtaining the member 'transAxes' of a type (line 968)
        transAxes_164522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 50), ax_164521, 'transAxes')
        keyword_164523 = transAxes_164522
        unicode_164524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 969, 44), 'unicode', u'left')
        keyword_164525 = unicode_164524
        unicode_164526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 970, 42), 'unicode', u'center')
        keyword_164527 = unicode_164526
        kwargs_164528 = {'verticalalignment': keyword_164527, 'horizontalalignment': keyword_164525, 'transform': keyword_164523}
        # Getting the type of 'ax' (line 968)
        ax_164516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 16), 'ax', False)
        # Obtaining the member 'text' of a type (line 968)
        text_164517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 16), ax_164516, 'text')
        # Calling text(args, kwargs) (line 968)
        text_call_result_164529 = invoke(stypy.reporting.localization.Localization(__file__, 968, 16), text_164517, *[float_164518, y_164519, label_164520], **kwargs_164528)
        
        # Assigning a type to the variable 't' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 12), 't', text_call_result_164529)
        
        
        # Getting the type of 'cnt' (line 972)
        cnt_164530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 15), 'cnt')
        # Getting the type of 'active' (line 972)
        active_164531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 22), 'active')
        # Applying the binary operator '==' (line 972)
        result_eq_164532 = python_operator(stypy.reporting.localization.Localization(__file__, 972, 15), '==', cnt_164530, active_164531)
        
        # Testing the type of an if condition (line 972)
        if_condition_164533 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 972, 12), result_eq_164532)
        # Assigning a type to the variable 'if_condition_164533' (line 972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 972, 12), 'if_condition_164533', if_condition_164533)
        # SSA begins for if statement (line 972)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 973):
        
        # Assigning a Name to a Attribute (line 973):
        # Getting the type of 'label' (line 973)
        label_164534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 38), 'label')
        # Getting the type of 'self' (line 973)
        self_164535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 16), 'self')
        # Setting the type of the member 'value_selected' of a type (line 973)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 16), self_164535, 'value_selected', label_164534)
        
        # Assigning a Name to a Name (line 974):
        
        # Assigning a Name to a Name (line 974):
        # Getting the type of 'activecolor' (line 974)
        activecolor_164536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 28), 'activecolor')
        # Assigning a type to the variable 'facecolor' (line 974)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 974, 16), 'facecolor', activecolor_164536)
        # SSA branch for the else part of an if statement (line 972)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 976):
        
        # Assigning a Name to a Name (line 976):
        # Getting the type of 'axcolor' (line 976)
        axcolor_164537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 28), 'axcolor')
        # Assigning a type to the variable 'facecolor' (line 976)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 16), 'facecolor', axcolor_164537)
        # SSA join for if statement (line 972)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 978):
        
        # Assigning a Call to a Name (line 978):
        
        # Call to Circle(...): (line 978)
        # Processing the call keyword arguments (line 978)
        
        # Obtaining an instance of the builtin type 'tuple' (line 978)
        tuple_164539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 978, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 978)
        # Adding element type (line 978)
        float_164540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 978, 27), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 978, 27), tuple_164539, float_164540)
        # Adding element type (line 978)
        # Getting the type of 'y' (line 978)
        y_164541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 33), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 978, 27), tuple_164539, y_164541)
        
        keyword_164542 = tuple_164539
        float_164543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 978, 44), 'float')
        keyword_164544 = float_164543
        unicode_164545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 978, 60), 'unicode', u'black')
        keyword_164546 = unicode_164545
        # Getting the type of 'facecolor' (line 979)
        facecolor_164547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 33), 'facecolor', False)
        keyword_164548 = facecolor_164547
        # Getting the type of 'ax' (line 979)
        ax_164549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 54), 'ax', False)
        # Obtaining the member 'transAxes' of a type (line 979)
        transAxes_164550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 979, 54), ax_164549, 'transAxes')
        keyword_164551 = transAxes_164550
        kwargs_164552 = {'edgecolor': keyword_164546, 'xy': keyword_164542, 'radius': keyword_164544, 'facecolor': keyword_164548, 'transform': keyword_164551}
        # Getting the type of 'Circle' (line 978)
        Circle_164538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 16), 'Circle', False)
        # Calling Circle(args, kwargs) (line 978)
        Circle_call_result_164553 = invoke(stypy.reporting.localization.Localization(__file__, 978, 16), Circle_164538, *[], **kwargs_164552)
        
        # Assigning a type to the variable 'p' (line 978)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 978, 12), 'p', Circle_call_result_164553)
        
        # Call to append(...): (line 981)
        # Processing the call arguments (line 981)
        # Getting the type of 't' (line 981)
        t_164557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 31), 't', False)
        # Processing the call keyword arguments (line 981)
        kwargs_164558 = {}
        # Getting the type of 'self' (line 981)
        self_164554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 12), 'self', False)
        # Obtaining the member 'labels' of a type (line 981)
        labels_164555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 981, 12), self_164554, 'labels')
        # Obtaining the member 'append' of a type (line 981)
        append_164556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 981, 12), labels_164555, 'append')
        # Calling append(args, kwargs) (line 981)
        append_call_result_164559 = invoke(stypy.reporting.localization.Localization(__file__, 981, 12), append_164556, *[t_164557], **kwargs_164558)
        
        
        # Call to append(...): (line 982)
        # Processing the call arguments (line 982)
        # Getting the type of 'p' (line 982)
        p_164563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 32), 'p', False)
        # Processing the call keyword arguments (line 982)
        kwargs_164564 = {}
        # Getting the type of 'self' (line 982)
        self_164560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 12), 'self', False)
        # Obtaining the member 'circles' of a type (line 982)
        circles_164561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 982, 12), self_164560, 'circles')
        # Obtaining the member 'append' of a type (line 982)
        append_164562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 982, 12), circles_164561, 'append')
        # Calling append(args, kwargs) (line 982)
        append_call_result_164565 = invoke(stypy.reporting.localization.Localization(__file__, 982, 12), append_164562, *[p_164563], **kwargs_164564)
        
        
        # Call to add_patch(...): (line 983)
        # Processing the call arguments (line 983)
        # Getting the type of 'p' (line 983)
        p_164568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 25), 'p', False)
        # Processing the call keyword arguments (line 983)
        kwargs_164569 = {}
        # Getting the type of 'ax' (line 983)
        ax_164566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 12), 'ax', False)
        # Obtaining the member 'add_patch' of a type (line 983)
        add_patch_164567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 983, 12), ax_164566, 'add_patch')
        # Calling add_patch(args, kwargs) (line 983)
        add_patch_call_result_164570 = invoke(stypy.reporting.localization.Localization(__file__, 983, 12), add_patch_164567, *[p_164568], **kwargs_164569)
        
        
        # Getting the type of 'cnt' (line 984)
        cnt_164571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 12), 'cnt')
        int_164572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 984, 19), 'int')
        # Applying the binary operator '+=' (line 984)
        result_iadd_164573 = python_operator(stypy.reporting.localization.Localization(__file__, 984, 12), '+=', cnt_164571, int_164572)
        # Assigning a type to the variable 'cnt' (line 984)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 984, 12), 'cnt', result_iadd_164573)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to connect_event(...): (line 986)
        # Processing the call arguments (line 986)
        unicode_164576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, 27), 'unicode', u'button_press_event')
        # Getting the type of 'self' (line 986)
        self_164577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 49), 'self', False)
        # Obtaining the member '_clicked' of a type (line 986)
        _clicked_164578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 49), self_164577, '_clicked')
        # Processing the call keyword arguments (line 986)
        kwargs_164579 = {}
        # Getting the type of 'self' (line 986)
        self_164574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 986)
        connect_event_164575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 8), self_164574, 'connect_event')
        # Calling connect_event(args, kwargs) (line 986)
        connect_event_call_result_164580 = invoke(stypy.reporting.localization.Localization(__file__, 986, 8), connect_event_164575, *[unicode_164576, _clicked_164578], **kwargs_164579)
        
        
        # Assigning a Num to a Attribute (line 988):
        
        # Assigning a Num to a Attribute (line 988):
        int_164581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 988, 19), 'int')
        # Getting the type of 'self' (line 988)
        self_164582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 8), 'self')
        # Setting the type of the member 'cnt' of a type (line 988)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 988, 8), self_164582, 'cnt', int_164581)
        
        # Assigning a Dict to a Attribute (line 989):
        
        # Assigning a Dict to a Attribute (line 989):
        
        # Obtaining an instance of the builtin type 'dict' (line 989)
        dict_164583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 989, 25), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 989)
        
        # Getting the type of 'self' (line 989)
        self_164584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 8), 'self')
        # Setting the type of the member 'observers' of a type (line 989)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 989, 8), self_164584, 'observers', dict_164583)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _clicked(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_clicked'
        module_type_store = module_type_store.open_function_context('_clicked', 991, 4, False)
        # Assigning a type to the variable 'self' (line 992)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RadioButtons._clicked.__dict__.__setitem__('stypy_localization', localization)
        RadioButtons._clicked.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RadioButtons._clicked.__dict__.__setitem__('stypy_type_store', module_type_store)
        RadioButtons._clicked.__dict__.__setitem__('stypy_function_name', 'RadioButtons._clicked')
        RadioButtons._clicked.__dict__.__setitem__('stypy_param_names_list', ['event'])
        RadioButtons._clicked.__dict__.__setitem__('stypy_varargs_param_name', None)
        RadioButtons._clicked.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RadioButtons._clicked.__dict__.__setitem__('stypy_call_defaults', defaults)
        RadioButtons._clicked.__dict__.__setitem__('stypy_call_varargs', varargs)
        RadioButtons._clicked.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RadioButtons._clicked.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadioButtons._clicked', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_clicked', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_clicked(...)' code ##################

        
        
        # Call to ignore(...): (line 992)
        # Processing the call arguments (line 992)
        # Getting the type of 'event' (line 992)
        event_164587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 23), 'event', False)
        # Processing the call keyword arguments (line 992)
        kwargs_164588 = {}
        # Getting the type of 'self' (line 992)
        self_164585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 11), 'self', False)
        # Obtaining the member 'ignore' of a type (line 992)
        ignore_164586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 11), self_164585, 'ignore')
        # Calling ignore(args, kwargs) (line 992)
        ignore_call_result_164589 = invoke(stypy.reporting.localization.Localization(__file__, 992, 11), ignore_164586, *[event_164587], **kwargs_164588)
        
        # Testing the type of an if condition (line 992)
        if_condition_164590 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 992, 8), ignore_call_result_164589)
        # Assigning a type to the variable 'if_condition_164590' (line 992)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 8), 'if_condition_164590', if_condition_164590)
        # SSA begins for if statement (line 992)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 993)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 993, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 992)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'event' (line 994)
        event_164591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 11), 'event')
        # Obtaining the member 'button' of a type (line 994)
        button_164592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 11), event_164591, 'button')
        int_164593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 994, 27), 'int')
        # Applying the binary operator '!=' (line 994)
        result_ne_164594 = python_operator(stypy.reporting.localization.Localization(__file__, 994, 11), '!=', button_164592, int_164593)
        
        # Testing the type of an if condition (line 994)
        if_condition_164595 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 994, 8), result_ne_164594)
        # Assigning a type to the variable 'if_condition_164595' (line 994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 8), 'if_condition_164595', if_condition_164595)
        # SSA begins for if statement (line 994)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 994)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'event' (line 996)
        event_164596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 11), 'event')
        # Obtaining the member 'inaxes' of a type (line 996)
        inaxes_164597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 11), event_164596, 'inaxes')
        # Getting the type of 'self' (line 996)
        self_164598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 27), 'self')
        # Obtaining the member 'ax' of a type (line 996)
        ax_164599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 27), self_164598, 'ax')
        # Applying the binary operator '!=' (line 996)
        result_ne_164600 = python_operator(stypy.reporting.localization.Localization(__file__, 996, 11), '!=', inaxes_164597, ax_164599)
        
        # Testing the type of an if condition (line 996)
        if_condition_164601 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 996, 8), result_ne_164600)
        # Assigning a type to the variable 'if_condition_164601' (line 996)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 8), 'if_condition_164601', if_condition_164601)
        # SSA begins for if statement (line 996)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 997)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 997, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 996)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 998):
        
        # Assigning a Call to a Name (line 998):
        
        # Call to transform_point(...): (line 998)
        # Processing the call arguments (line 998)
        
        # Obtaining an instance of the builtin type 'tuple' (line 998)
        tuple_164609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 998, 59), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 998)
        # Adding element type (line 998)
        # Getting the type of 'event' (line 998)
        event_164610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 59), 'event', False)
        # Obtaining the member 'x' of a type (line 998)
        x_164611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 59), event_164610, 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 998, 59), tuple_164609, x_164611)
        # Adding element type (line 998)
        # Getting the type of 'event' (line 998)
        event_164612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 68), 'event', False)
        # Obtaining the member 'y' of a type (line 998)
        y_164613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 68), event_164612, 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 998, 59), tuple_164609, y_164613)
        
        # Processing the call keyword arguments (line 998)
        kwargs_164614 = {}
        
        # Call to inverted(...): (line 998)
        # Processing the call keyword arguments (line 998)
        kwargs_164606 = {}
        # Getting the type of 'self' (line 998)
        self_164602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 13), 'self', False)
        # Obtaining the member 'ax' of a type (line 998)
        ax_164603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 13), self_164602, 'ax')
        # Obtaining the member 'transAxes' of a type (line 998)
        transAxes_164604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 13), ax_164603, 'transAxes')
        # Obtaining the member 'inverted' of a type (line 998)
        inverted_164605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 13), transAxes_164604, 'inverted')
        # Calling inverted(args, kwargs) (line 998)
        inverted_call_result_164607 = invoke(stypy.reporting.localization.Localization(__file__, 998, 13), inverted_164605, *[], **kwargs_164606)
        
        # Obtaining the member 'transform_point' of a type (line 998)
        transform_point_164608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 13), inverted_call_result_164607, 'transform_point')
        # Calling transform_point(args, kwargs) (line 998)
        transform_point_call_result_164615 = invoke(stypy.reporting.localization.Localization(__file__, 998, 13), transform_point_164608, *[tuple_164609], **kwargs_164614)
        
        # Assigning a type to the variable 'xy' (line 998)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 998, 8), 'xy', transform_point_call_result_164615)
        
        # Assigning a Call to a Name (line 999):
        
        # Assigning a Call to a Name (line 999):
        
        # Call to array(...): (line 999)
        # Processing the call arguments (line 999)
        
        # Obtaining an instance of the builtin type 'list' (line 999)
        list_164618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 999, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 999)
        # Adding element type (line 999)
        
        # Obtaining the type of the subscript
        int_164619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 999, 32), 'int')
        # Getting the type of 'xy' (line 999)
        xy_164620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 29), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 999)
        getitem___164621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 999, 29), xy_164620, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 999)
        subscript_call_result_164622 = invoke(stypy.reporting.localization.Localization(__file__, 999, 29), getitem___164621, int_164619)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 999, 28), list_164618, subscript_call_result_164622)
        # Adding element type (line 999)
        
        # Obtaining the type of the subscript
        int_164623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 999, 39), 'int')
        # Getting the type of 'xy' (line 999)
        xy_164624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 36), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 999)
        getitem___164625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 999, 36), xy_164624, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 999)
        subscript_call_result_164626 = invoke(stypy.reporting.localization.Localization(__file__, 999, 36), getitem___164625, int_164623)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 999, 28), list_164618, subscript_call_result_164626)
        
        # Processing the call keyword arguments (line 999)
        kwargs_164627 = {}
        # Getting the type of 'np' (line 999)
        np_164616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 19), 'np', False)
        # Obtaining the member 'array' of a type (line 999)
        array_164617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 999, 19), np_164616, 'array')
        # Calling array(args, kwargs) (line 999)
        array_call_result_164628 = invoke(stypy.reporting.localization.Localization(__file__, 999, 19), array_164617, *[list_164618], **kwargs_164627)
        
        # Assigning a type to the variable 'pclicked' (line 999)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 999, 8), 'pclicked', array_call_result_164628)

        @norecursion
        def inside(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'inside'
            module_type_store = module_type_store.open_function_context('inside', 1001, 8, False)
            
            # Passed parameters checking function
            inside.stypy_localization = localization
            inside.stypy_type_of_self = None
            inside.stypy_type_store = module_type_store
            inside.stypy_function_name = 'inside'
            inside.stypy_param_names_list = ['p']
            inside.stypy_varargs_param_name = None
            inside.stypy_kwargs_param_name = None
            inside.stypy_call_defaults = defaults
            inside.stypy_call_varargs = varargs
            inside.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'inside', ['p'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'inside', localization, ['p'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'inside(...)' code ##################

            
            # Assigning a Call to a Name (line 1002):
            
            # Assigning a Call to a Name (line 1002):
            
            # Call to array(...): (line 1002)
            # Processing the call arguments (line 1002)
            
            # Obtaining an instance of the builtin type 'list' (line 1002)
            list_164631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1002, 29), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1002)
            # Adding element type (line 1002)
            
            # Obtaining the type of the subscript
            int_164632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1002, 39), 'int')
            # Getting the type of 'p' (line 1002)
            p_164633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 30), 'p', False)
            # Obtaining the member 'center' of a type (line 1002)
            center_164634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1002, 30), p_164633, 'center')
            # Obtaining the member '__getitem__' of a type (line 1002)
            getitem___164635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1002, 30), center_164634, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1002)
            subscript_call_result_164636 = invoke(stypy.reporting.localization.Localization(__file__, 1002, 30), getitem___164635, int_164632)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1002, 29), list_164631, subscript_call_result_164636)
            # Adding element type (line 1002)
            
            # Obtaining the type of the subscript
            int_164637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1002, 52), 'int')
            # Getting the type of 'p' (line 1002)
            p_164638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 43), 'p', False)
            # Obtaining the member 'center' of a type (line 1002)
            center_164639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1002, 43), p_164638, 'center')
            # Obtaining the member '__getitem__' of a type (line 1002)
            getitem___164640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1002, 43), center_164639, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1002)
            subscript_call_result_164641 = invoke(stypy.reporting.localization.Localization(__file__, 1002, 43), getitem___164640, int_164637)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1002, 29), list_164631, subscript_call_result_164641)
            
            # Processing the call keyword arguments (line 1002)
            kwargs_164642 = {}
            # Getting the type of 'np' (line 1002)
            np_164629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 20), 'np', False)
            # Obtaining the member 'array' of a type (line 1002)
            array_164630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1002, 20), np_164629, 'array')
            # Calling array(args, kwargs) (line 1002)
            array_call_result_164643 = invoke(stypy.reporting.localization.Localization(__file__, 1002, 20), array_164630, *[list_164631], **kwargs_164642)
            
            # Assigning a type to the variable 'pcirc' (line 1002)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1002, 12), 'pcirc', array_call_result_164643)
            
            
            # Call to dist(...): (line 1003)
            # Processing the call arguments (line 1003)
            # Getting the type of 'pclicked' (line 1003)
            pclicked_164645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 24), 'pclicked', False)
            # Getting the type of 'pcirc' (line 1003)
            pcirc_164646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 34), 'pcirc', False)
            # Processing the call keyword arguments (line 1003)
            kwargs_164647 = {}
            # Getting the type of 'dist' (line 1003)
            dist_164644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 19), 'dist', False)
            # Calling dist(args, kwargs) (line 1003)
            dist_call_result_164648 = invoke(stypy.reporting.localization.Localization(__file__, 1003, 19), dist_164644, *[pclicked_164645, pcirc_164646], **kwargs_164647)
            
            # Getting the type of 'p' (line 1003)
            p_164649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 43), 'p')
            # Obtaining the member 'radius' of a type (line 1003)
            radius_164650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 43), p_164649, 'radius')
            # Applying the binary operator '<' (line 1003)
            result_lt_164651 = python_operator(stypy.reporting.localization.Localization(__file__, 1003, 19), '<', dist_call_result_164648, radius_164650)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1003)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1003, 12), 'stypy_return_type', result_lt_164651)
            
            # ################# End of 'inside(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'inside' in the type store
            # Getting the type of 'stypy_return_type' (line 1001)
            stypy_return_type_164652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_164652)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'inside'
            return stypy_return_type_164652

        # Assigning a type to the variable 'inside' (line 1001)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1001, 8), 'inside', inside)
        
        
        # Call to enumerate(...): (line 1005)
        # Processing the call arguments (line 1005)
        
        # Call to zip(...): (line 1005)
        # Processing the call arguments (line 1005)
        # Getting the type of 'self' (line 1005)
        self_164655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 39), 'self', False)
        # Obtaining the member 'circles' of a type (line 1005)
        circles_164656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 39), self_164655, 'circles')
        # Getting the type of 'self' (line 1005)
        self_164657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 53), 'self', False)
        # Obtaining the member 'labels' of a type (line 1005)
        labels_164658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 53), self_164657, 'labels')
        # Processing the call keyword arguments (line 1005)
        kwargs_164659 = {}
        # Getting the type of 'zip' (line 1005)
        zip_164654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 35), 'zip', False)
        # Calling zip(args, kwargs) (line 1005)
        zip_call_result_164660 = invoke(stypy.reporting.localization.Localization(__file__, 1005, 35), zip_164654, *[circles_164656, labels_164658], **kwargs_164659)
        
        # Processing the call keyword arguments (line 1005)
        kwargs_164661 = {}
        # Getting the type of 'enumerate' (line 1005)
        enumerate_164653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 25), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 1005)
        enumerate_call_result_164662 = invoke(stypy.reporting.localization.Localization(__file__, 1005, 25), enumerate_164653, *[zip_call_result_164660], **kwargs_164661)
        
        # Testing the type of a for loop iterable (line 1005)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1005, 8), enumerate_call_result_164662)
        # Getting the type of the for loop variable (line 1005)
        for_loop_var_164663 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1005, 8), enumerate_call_result_164662)
        # Assigning a type to the variable 'i' (line 1005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1005, 8), for_loop_var_164663))
        # Assigning a type to the variable 'p' (line 1005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 8), 'p', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1005, 8), for_loop_var_164663))
        # Assigning a type to the variable 't' (line 1005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 8), 't', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1005, 8), for_loop_var_164663))
        # SSA begins for a for statement (line 1005)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Evaluating a boolean operation
        
        # Call to contains(...): (line 1006)
        # Processing the call arguments (line 1006)
        # Getting the type of 'event' (line 1006)
        event_164669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 46), 'event', False)
        # Obtaining the member 'x' of a type (line 1006)
        x_164670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1006, 46), event_164669, 'x')
        # Getting the type of 'event' (line 1006)
        event_164671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 55), 'event', False)
        # Obtaining the member 'y' of a type (line 1006)
        y_164672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1006, 55), event_164671, 'y')
        # Processing the call keyword arguments (line 1006)
        kwargs_164673 = {}
        
        # Call to get_window_extent(...): (line 1006)
        # Processing the call keyword arguments (line 1006)
        kwargs_164666 = {}
        # Getting the type of 't' (line 1006)
        t_164664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 15), 't', False)
        # Obtaining the member 'get_window_extent' of a type (line 1006)
        get_window_extent_164665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1006, 15), t_164664, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 1006)
        get_window_extent_call_result_164667 = invoke(stypy.reporting.localization.Localization(__file__, 1006, 15), get_window_extent_164665, *[], **kwargs_164666)
        
        # Obtaining the member 'contains' of a type (line 1006)
        contains_164668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1006, 15), get_window_extent_call_result_164667, 'contains')
        # Calling contains(args, kwargs) (line 1006)
        contains_call_result_164674 = invoke(stypy.reporting.localization.Localization(__file__, 1006, 15), contains_164668, *[x_164670, y_164672], **kwargs_164673)
        
        
        # Call to inside(...): (line 1006)
        # Processing the call arguments (line 1006)
        # Getting the type of 'p' (line 1006)
        p_164676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 74), 'p', False)
        # Processing the call keyword arguments (line 1006)
        kwargs_164677 = {}
        # Getting the type of 'inside' (line 1006)
        inside_164675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 67), 'inside', False)
        # Calling inside(args, kwargs) (line 1006)
        inside_call_result_164678 = invoke(stypy.reporting.localization.Localization(__file__, 1006, 67), inside_164675, *[p_164676], **kwargs_164677)
        
        # Applying the binary operator 'or' (line 1006)
        result_or_keyword_164679 = python_operator(stypy.reporting.localization.Localization(__file__, 1006, 15), 'or', contains_call_result_164674, inside_call_result_164678)
        
        # Testing the type of an if condition (line 1006)
        if_condition_164680 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1006, 12), result_or_keyword_164679)
        # Assigning a type to the variable 'if_condition_164680' (line 1006)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1006, 12), 'if_condition_164680', if_condition_164680)
        # SSA begins for if statement (line 1006)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_active(...): (line 1007)
        # Processing the call arguments (line 1007)
        # Getting the type of 'i' (line 1007)
        i_164683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 32), 'i', False)
        # Processing the call keyword arguments (line 1007)
        kwargs_164684 = {}
        # Getting the type of 'self' (line 1007)
        self_164681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 16), 'self', False)
        # Obtaining the member 'set_active' of a type (line 1007)
        set_active_164682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1007, 16), self_164681, 'set_active')
        # Calling set_active(args, kwargs) (line 1007)
        set_active_call_result_164685 = invoke(stypy.reporting.localization.Localization(__file__, 1007, 16), set_active_164682, *[i_164683], **kwargs_164684)
        
        # SSA join for if statement (line 1006)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of a for statement (line 1005)
        module_type_store.open_ssa_branch('for loop else')
        # Assigning a type to the variable 'stypy_return_type' (line 1010)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 12), 'stypy_return_type', types.NoneType)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_clicked(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_clicked' in the type store
        # Getting the type of 'stypy_return_type' (line 991)
        stypy_return_type_164686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_164686)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_clicked'
        return stypy_return_type_164686


    @norecursion
    def set_active(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_active'
        module_type_store = module_type_store.open_function_context('set_active', 1012, 4, False)
        # Assigning a type to the variable 'self' (line 1013)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1013, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RadioButtons.set_active.__dict__.__setitem__('stypy_localization', localization)
        RadioButtons.set_active.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RadioButtons.set_active.__dict__.__setitem__('stypy_type_store', module_type_store)
        RadioButtons.set_active.__dict__.__setitem__('stypy_function_name', 'RadioButtons.set_active')
        RadioButtons.set_active.__dict__.__setitem__('stypy_param_names_list', ['index'])
        RadioButtons.set_active.__dict__.__setitem__('stypy_varargs_param_name', None)
        RadioButtons.set_active.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RadioButtons.set_active.__dict__.__setitem__('stypy_call_defaults', defaults)
        RadioButtons.set_active.__dict__.__setitem__('stypy_call_varargs', varargs)
        RadioButtons.set_active.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RadioButtons.set_active.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadioButtons.set_active', ['index'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_active', localization, ['index'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_active(...)' code ##################

        unicode_164687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1022, (-1)), 'unicode', u'\n        Trigger which radio button to make active.\n\n        *index* is an index into the original label list\n            that this object was constructed with.\n            Raise ValueError if the index is invalid.\n\n        Callbacks will be triggered if :attr:`eventson` is True.\n\n        ')
        
        
        int_164688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1023, 11), 'int')
        # Getting the type of 'index' (line 1023)
        index_164689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 15), 'index')
        # Applying the binary operator '>' (line 1023)
        result_gt_164690 = python_operator(stypy.reporting.localization.Localization(__file__, 1023, 11), '>', int_164688, index_164689)
        
        # Call to len(...): (line 1023)
        # Processing the call arguments (line 1023)
        # Getting the type of 'self' (line 1023)
        self_164692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 28), 'self', False)
        # Obtaining the member 'labels' of a type (line 1023)
        labels_164693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1023, 28), self_164692, 'labels')
        # Processing the call keyword arguments (line 1023)
        kwargs_164694 = {}
        # Getting the type of 'len' (line 1023)
        len_164691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 24), 'len', False)
        # Calling len(args, kwargs) (line 1023)
        len_call_result_164695 = invoke(stypy.reporting.localization.Localization(__file__, 1023, 24), len_164691, *[labels_164693], **kwargs_164694)
        
        # Applying the binary operator '>=' (line 1023)
        result_ge_164696 = python_operator(stypy.reporting.localization.Localization(__file__, 1023, 11), '>=', index_164689, len_call_result_164695)
        # Applying the binary operator '&' (line 1023)
        result_and__164697 = python_operator(stypy.reporting.localization.Localization(__file__, 1023, 11), '&', result_gt_164690, result_ge_164696)
        
        # Testing the type of an if condition (line 1023)
        if_condition_164698 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1023, 8), result_and__164697)
        # Assigning a type to the variable 'if_condition_164698' (line 1023)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1023, 8), 'if_condition_164698', if_condition_164698)
        # SSA begins for if statement (line 1023)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1024)
        # Processing the call arguments (line 1024)
        unicode_164700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1024, 29), 'unicode', u'Invalid RadioButton index: %d')
        # Getting the type of 'index' (line 1024)
        index_164701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 63), 'index', False)
        # Applying the binary operator '%' (line 1024)
        result_mod_164702 = python_operator(stypy.reporting.localization.Localization(__file__, 1024, 29), '%', unicode_164700, index_164701)
        
        # Processing the call keyword arguments (line 1024)
        kwargs_164703 = {}
        # Getting the type of 'ValueError' (line 1024)
        ValueError_164699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1024)
        ValueError_call_result_164704 = invoke(stypy.reporting.localization.Localization(__file__, 1024, 18), ValueError_164699, *[result_mod_164702], **kwargs_164703)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1024, 12), ValueError_call_result_164704, 'raise parameter', BaseException)
        # SSA join for if statement (line 1023)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 1026):
        
        # Assigning a Call to a Attribute (line 1026):
        
        # Call to get_text(...): (line 1026)
        # Processing the call keyword arguments (line 1026)
        kwargs_164711 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'index' (line 1026)
        index_164705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 42), 'index', False)
        # Getting the type of 'self' (line 1026)
        self_164706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 30), 'self', False)
        # Obtaining the member 'labels' of a type (line 1026)
        labels_164707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 30), self_164706, 'labels')
        # Obtaining the member '__getitem__' of a type (line 1026)
        getitem___164708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 30), labels_164707, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1026)
        subscript_call_result_164709 = invoke(stypy.reporting.localization.Localization(__file__, 1026, 30), getitem___164708, index_164705)
        
        # Obtaining the member 'get_text' of a type (line 1026)
        get_text_164710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 30), subscript_call_result_164709, 'get_text')
        # Calling get_text(args, kwargs) (line 1026)
        get_text_call_result_164712 = invoke(stypy.reporting.localization.Localization(__file__, 1026, 30), get_text_164710, *[], **kwargs_164711)
        
        # Getting the type of 'self' (line 1026)
        self_164713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 8), 'self')
        # Setting the type of the member 'value_selected' of a type (line 1026)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 8), self_164713, 'value_selected', get_text_call_result_164712)
        
        
        # Call to enumerate(...): (line 1028)
        # Processing the call arguments (line 1028)
        # Getting the type of 'self' (line 1028)
        self_164715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 30), 'self', False)
        # Obtaining the member 'circles' of a type (line 1028)
        circles_164716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 30), self_164715, 'circles')
        # Processing the call keyword arguments (line 1028)
        kwargs_164717 = {}
        # Getting the type of 'enumerate' (line 1028)
        enumerate_164714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 20), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 1028)
        enumerate_call_result_164718 = invoke(stypy.reporting.localization.Localization(__file__, 1028, 20), enumerate_164714, *[circles_164716], **kwargs_164717)
        
        # Testing the type of a for loop iterable (line 1028)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1028, 8), enumerate_call_result_164718)
        # Getting the type of the for loop variable (line 1028)
        for_loop_var_164719 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1028, 8), enumerate_call_result_164718)
        # Assigning a type to the variable 'i' (line 1028)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1028, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1028, 8), for_loop_var_164719))
        # Assigning a type to the variable 'p' (line 1028)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1028, 8), 'p', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1028, 8), for_loop_var_164719))
        # SSA begins for a for statement (line 1028)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'i' (line 1029)
        i_164720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 15), 'i')
        # Getting the type of 'index' (line 1029)
        index_164721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 20), 'index')
        # Applying the binary operator '==' (line 1029)
        result_eq_164722 = python_operator(stypy.reporting.localization.Localization(__file__, 1029, 15), '==', i_164720, index_164721)
        
        # Testing the type of an if condition (line 1029)
        if_condition_164723 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1029, 12), result_eq_164722)
        # Assigning a type to the variable 'if_condition_164723' (line 1029)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1029, 12), 'if_condition_164723', if_condition_164723)
        # SSA begins for if statement (line 1029)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1030):
        
        # Assigning a Attribute to a Name (line 1030):
        # Getting the type of 'self' (line 1030)
        self_164724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 24), 'self')
        # Obtaining the member 'activecolor' of a type (line 1030)
        activecolor_164725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1030, 24), self_164724, 'activecolor')
        # Assigning a type to the variable 'color' (line 1030)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1030, 16), 'color', activecolor_164725)
        # SSA branch for the else part of an if statement (line 1029)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1032):
        
        # Assigning a Call to a Name (line 1032):
        
        # Call to get_facecolor(...): (line 1032)
        # Processing the call keyword arguments (line 1032)
        kwargs_164729 = {}
        # Getting the type of 'self' (line 1032)
        self_164726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 24), 'self', False)
        # Obtaining the member 'ax' of a type (line 1032)
        ax_164727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1032, 24), self_164726, 'ax')
        # Obtaining the member 'get_facecolor' of a type (line 1032)
        get_facecolor_164728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1032, 24), ax_164727, 'get_facecolor')
        # Calling get_facecolor(args, kwargs) (line 1032)
        get_facecolor_call_result_164730 = invoke(stypy.reporting.localization.Localization(__file__, 1032, 24), get_facecolor_164728, *[], **kwargs_164729)
        
        # Assigning a type to the variable 'color' (line 1032)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1032, 16), 'color', get_facecolor_call_result_164730)
        # SSA join for if statement (line 1029)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_facecolor(...): (line 1033)
        # Processing the call arguments (line 1033)
        # Getting the type of 'color' (line 1033)
        color_164733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 28), 'color', False)
        # Processing the call keyword arguments (line 1033)
        kwargs_164734 = {}
        # Getting the type of 'p' (line 1033)
        p_164731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 12), 'p', False)
        # Obtaining the member 'set_facecolor' of a type (line 1033)
        set_facecolor_164732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1033, 12), p_164731, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 1033)
        set_facecolor_call_result_164735 = invoke(stypy.reporting.localization.Localization(__file__, 1033, 12), set_facecolor_164732, *[color_164733], **kwargs_164734)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1035)
        self_164736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 11), 'self')
        # Obtaining the member 'drawon' of a type (line 1035)
        drawon_164737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1035, 11), self_164736, 'drawon')
        # Testing the type of an if condition (line 1035)
        if_condition_164738 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1035, 8), drawon_164737)
        # Assigning a type to the variable 'if_condition_164738' (line 1035)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1035, 8), 'if_condition_164738', if_condition_164738)
        # SSA begins for if statement (line 1035)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 1036)
        # Processing the call keyword arguments (line 1036)
        kwargs_164744 = {}
        # Getting the type of 'self' (line 1036)
        self_164739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 1036)
        ax_164740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1036, 12), self_164739, 'ax')
        # Obtaining the member 'figure' of a type (line 1036)
        figure_164741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1036, 12), ax_164740, 'figure')
        # Obtaining the member 'canvas' of a type (line 1036)
        canvas_164742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1036, 12), figure_164741, 'canvas')
        # Obtaining the member 'draw' of a type (line 1036)
        draw_164743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1036, 12), canvas_164742, 'draw')
        # Calling draw(args, kwargs) (line 1036)
        draw_call_result_164745 = invoke(stypy.reporting.localization.Localization(__file__, 1036, 12), draw_164743, *[], **kwargs_164744)
        
        # SSA join for if statement (line 1035)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 1038)
        self_164746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 15), 'self')
        # Obtaining the member 'eventson' of a type (line 1038)
        eventson_164747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 15), self_164746, 'eventson')
        # Applying the 'not' unary operator (line 1038)
        result_not__164748 = python_operator(stypy.reporting.localization.Localization(__file__, 1038, 11), 'not', eventson_164747)
        
        # Testing the type of an if condition (line 1038)
        if_condition_164749 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1038, 8), result_not__164748)
        # Assigning a type to the variable 'if_condition_164749' (line 1038)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1038, 8), 'if_condition_164749', if_condition_164749)
        # SSA begins for if statement (line 1038)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1039)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1039, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1038)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to iteritems(...): (line 1040)
        # Processing the call arguments (line 1040)
        # Getting the type of 'self' (line 1040)
        self_164752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 39), 'self', False)
        # Obtaining the member 'observers' of a type (line 1040)
        observers_164753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 39), self_164752, 'observers')
        # Processing the call keyword arguments (line 1040)
        kwargs_164754 = {}
        # Getting the type of 'six' (line 1040)
        six_164750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 25), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 1040)
        iteritems_164751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 25), six_164750, 'iteritems')
        # Calling iteritems(args, kwargs) (line 1040)
        iteritems_call_result_164755 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 25), iteritems_164751, *[observers_164753], **kwargs_164754)
        
        # Testing the type of a for loop iterable (line 1040)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1040, 8), iteritems_call_result_164755)
        # Getting the type of the for loop variable (line 1040)
        for_loop_var_164756 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1040, 8), iteritems_call_result_164755)
        # Assigning a type to the variable 'cid' (line 1040)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1040, 8), 'cid', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1040, 8), for_loop_var_164756))
        # Assigning a type to the variable 'func' (line 1040)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1040, 8), 'func', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1040, 8), for_loop_var_164756))
        # SSA begins for a for statement (line 1040)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to func(...): (line 1041)
        # Processing the call arguments (line 1041)
        
        # Call to get_text(...): (line 1041)
        # Processing the call keyword arguments (line 1041)
        kwargs_164764 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'index' (line 1041)
        index_164758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 29), 'index', False)
        # Getting the type of 'self' (line 1041)
        self_164759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 17), 'self', False)
        # Obtaining the member 'labels' of a type (line 1041)
        labels_164760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 17), self_164759, 'labels')
        # Obtaining the member '__getitem__' of a type (line 1041)
        getitem___164761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 17), labels_164760, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1041)
        subscript_call_result_164762 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 17), getitem___164761, index_164758)
        
        # Obtaining the member 'get_text' of a type (line 1041)
        get_text_164763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 17), subscript_call_result_164762, 'get_text')
        # Calling get_text(args, kwargs) (line 1041)
        get_text_call_result_164765 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 17), get_text_164763, *[], **kwargs_164764)
        
        # Processing the call keyword arguments (line 1041)
        kwargs_164766 = {}
        # Getting the type of 'func' (line 1041)
        func_164757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 12), 'func', False)
        # Calling func(args, kwargs) (line 1041)
        func_call_result_164767 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 12), func_164757, *[get_text_call_result_164765], **kwargs_164766)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_active(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_active' in the type store
        # Getting the type of 'stypy_return_type' (line 1012)
        stypy_return_type_164768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_164768)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_active'
        return stypy_return_type_164768


    @norecursion
    def on_clicked(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'on_clicked'
        module_type_store = module_type_store.open_function_context('on_clicked', 1043, 4, False)
        # Assigning a type to the variable 'self' (line 1044)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1044, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RadioButtons.on_clicked.__dict__.__setitem__('stypy_localization', localization)
        RadioButtons.on_clicked.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RadioButtons.on_clicked.__dict__.__setitem__('stypy_type_store', module_type_store)
        RadioButtons.on_clicked.__dict__.__setitem__('stypy_function_name', 'RadioButtons.on_clicked')
        RadioButtons.on_clicked.__dict__.__setitem__('stypy_param_names_list', ['func'])
        RadioButtons.on_clicked.__dict__.__setitem__('stypy_varargs_param_name', None)
        RadioButtons.on_clicked.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RadioButtons.on_clicked.__dict__.__setitem__('stypy_call_defaults', defaults)
        RadioButtons.on_clicked.__dict__.__setitem__('stypy_call_varargs', varargs)
        RadioButtons.on_clicked.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RadioButtons.on_clicked.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadioButtons.on_clicked', ['func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'on_clicked', localization, ['func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'on_clicked(...)' code ##################

        unicode_164769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, (-1)), 'unicode', u'\n        When the button is clicked, call *func* with button label\n\n        A connection id is returned which can be used to disconnect\n        ')
        
        # Assigning a Attribute to a Name (line 1049):
        
        # Assigning a Attribute to a Name (line 1049):
        # Getting the type of 'self' (line 1049)
        self_164770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 14), 'self')
        # Obtaining the member 'cnt' of a type (line 1049)
        cnt_164771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 14), self_164770, 'cnt')
        # Assigning a type to the variable 'cid' (line 1049)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1049, 8), 'cid', cnt_164771)
        
        # Assigning a Name to a Subscript (line 1050):
        
        # Assigning a Name to a Subscript (line 1050):
        # Getting the type of 'func' (line 1050)
        func_164772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 30), 'func')
        # Getting the type of 'self' (line 1050)
        self_164773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 8), 'self')
        # Obtaining the member 'observers' of a type (line 1050)
        observers_164774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 8), self_164773, 'observers')
        # Getting the type of 'cid' (line 1050)
        cid_164775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 23), 'cid')
        # Storing an element on a container (line 1050)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1050, 8), observers_164774, (cid_164775, func_164772))
        
        # Getting the type of 'self' (line 1051)
        self_164776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 8), 'self')
        # Obtaining the member 'cnt' of a type (line 1051)
        cnt_164777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 8), self_164776, 'cnt')
        int_164778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, 20), 'int')
        # Applying the binary operator '+=' (line 1051)
        result_iadd_164779 = python_operator(stypy.reporting.localization.Localization(__file__, 1051, 8), '+=', cnt_164777, int_164778)
        # Getting the type of 'self' (line 1051)
        self_164780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 8), 'self')
        # Setting the type of the member 'cnt' of a type (line 1051)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 8), self_164780, 'cnt', result_iadd_164779)
        
        # Getting the type of 'cid' (line 1052)
        cid_164781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 15), 'cid')
        # Assigning a type to the variable 'stypy_return_type' (line 1052)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 8), 'stypy_return_type', cid_164781)
        
        # ################# End of 'on_clicked(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'on_clicked' in the type store
        # Getting the type of 'stypy_return_type' (line 1043)
        stypy_return_type_164782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_164782)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'on_clicked'
        return stypy_return_type_164782


    @norecursion
    def disconnect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'disconnect'
        module_type_store = module_type_store.open_function_context('disconnect', 1054, 4, False)
        # Assigning a type to the variable 'self' (line 1055)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1055, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RadioButtons.disconnect.__dict__.__setitem__('stypy_localization', localization)
        RadioButtons.disconnect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RadioButtons.disconnect.__dict__.__setitem__('stypy_type_store', module_type_store)
        RadioButtons.disconnect.__dict__.__setitem__('stypy_function_name', 'RadioButtons.disconnect')
        RadioButtons.disconnect.__dict__.__setitem__('stypy_param_names_list', ['cid'])
        RadioButtons.disconnect.__dict__.__setitem__('stypy_varargs_param_name', None)
        RadioButtons.disconnect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RadioButtons.disconnect.__dict__.__setitem__('stypy_call_defaults', defaults)
        RadioButtons.disconnect.__dict__.__setitem__('stypy_call_varargs', varargs)
        RadioButtons.disconnect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RadioButtons.disconnect.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RadioButtons.disconnect', ['cid'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'disconnect', localization, ['cid'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'disconnect(...)' code ##################

        unicode_164783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1055, 8), 'unicode', u'remove the observer with connection id *cid*')
        
        
        # SSA begins for try-except statement (line 1056)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        # Deleting a member
        # Getting the type of 'self' (line 1057)
        self_164784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 16), 'self')
        # Obtaining the member 'observers' of a type (line 1057)
        observers_164785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 16), self_164784, 'observers')
        
        # Obtaining the type of the subscript
        # Getting the type of 'cid' (line 1057)
        cid_164786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 31), 'cid')
        # Getting the type of 'self' (line 1057)
        self_164787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 16), 'self')
        # Obtaining the member 'observers' of a type (line 1057)
        observers_164788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 16), self_164787, 'observers')
        # Obtaining the member '__getitem__' of a type (line 1057)
        getitem___164789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 16), observers_164788, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1057)
        subscript_call_result_164790 = invoke(stypy.reporting.localization.Localization(__file__, 1057, 16), getitem___164789, cid_164786)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1057, 12), observers_164785, subscript_call_result_164790)
        # SSA branch for the except part of a try statement (line 1056)
        # SSA branch for the except 'KeyError' branch of a try statement (line 1056)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1056)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'disconnect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'disconnect' in the type store
        # Getting the type of 'stypy_return_type' (line 1054)
        stypy_return_type_164791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_164791)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'disconnect'
        return stypy_return_type_164791


# Assigning a type to the variable 'RadioButtons' (line 914)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 914, 0), 'RadioButtons', RadioButtons)
# Declaration of the 'SubplotTool' class
# Getting the type of 'Widget' (line 1062)
Widget_164792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 18), 'Widget')

class SubplotTool(Widget_164792, ):
    unicode_164793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1065, (-1)), 'unicode', u'\n    A tool to adjust the subplot params of a :class:`matplotlib.figure.Figure`.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1066, 4, False)
        # Assigning a type to the variable 'self' (line 1067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1067, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SubplotTool.__init__', ['targetfig', 'toolfig'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['targetfig', 'toolfig'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_164794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1075, (-1)), 'unicode', u'\n        *targetfig*\n            The figure instance to adjust.\n\n        *toolfig*\n            The figure instance to embed the subplot tool into. If\n            *None*, a default figure will be created. If you are using\n            this from the GUI\n        ')
        
        # Assigning a Name to a Attribute (line 1078):
        
        # Assigning a Name to a Attribute (line 1078):
        # Getting the type of 'targetfig' (line 1078)
        targetfig_164795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 25), 'targetfig')
        # Getting the type of 'self' (line 1078)
        self_164796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 8), 'self')
        # Setting the type of the member 'targetfig' of a type (line 1078)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1078, 8), self_164796, 'targetfig', targetfig_164795)
        
        # Call to subplots_adjust(...): (line 1079)
        # Processing the call keyword arguments (line 1079)
        float_164799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1079, 37), 'float')
        keyword_164800 = float_164799
        float_164801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1079, 48), 'float')
        keyword_164802 = float_164801
        kwargs_164803 = {'right': keyword_164802, 'left': keyword_164800}
        # Getting the type of 'toolfig' (line 1079)
        toolfig_164797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 8), 'toolfig', False)
        # Obtaining the member 'subplots_adjust' of a type (line 1079)
        subplots_adjust_164798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1079, 8), toolfig_164797, 'subplots_adjust')
        # Calling subplots_adjust(args, kwargs) (line 1079)
        subplots_adjust_call_result_164804 = invoke(stypy.reporting.localization.Localization(__file__, 1079, 8), subplots_adjust_164798, *[], **kwargs_164803)
        
        # Declaration of the 'toolbarfmt' class

        class toolbarfmt:

            @norecursion
            def __init__(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function '__init__'
                module_type_store = module_type_store.open_function_context('__init__', 1082, 12, False)
                # Assigning a type to the variable 'self' (line 1083)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1083, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'toolbarfmt.__init__', ['slider'], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return

                # Initialize method data
                init_call_information(module_type_store, '__init__', localization, ['slider'], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of '__init__(...)' code ##################

                
                # Assigning a Name to a Attribute (line 1083):
                
                # Assigning a Name to a Attribute (line 1083):
                # Getting the type of 'slider' (line 1083)
                slider_164805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 30), 'slider')
                # Getting the type of 'self' (line 1083)
                self_164806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 16), 'self')
                # Setting the type of the member 'slider' of a type (line 1083)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1083, 16), self_164806, 'slider', slider_164805)
                
                # ################# End of '__init__(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()


            @norecursion
            def __call__(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function '__call__'
                module_type_store = module_type_store.open_function_context('__call__', 1085, 12, False)
                # Assigning a type to the variable 'self' (line 1086)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                toolbarfmt.__call__.__dict__.__setitem__('stypy_localization', localization)
                toolbarfmt.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                toolbarfmt.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
                toolbarfmt.__call__.__dict__.__setitem__('stypy_function_name', 'toolbarfmt.__call__')
                toolbarfmt.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'y'])
                toolbarfmt.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
                toolbarfmt.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
                toolbarfmt.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
                toolbarfmt.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
                toolbarfmt.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                toolbarfmt.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'toolbarfmt.__call__', ['x', 'y'], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, '__call__', localization, ['x', 'y'], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of '__call__(...)' code ##################

                
                # Assigning a BinOp to a Name (line 1086):
                
                # Assigning a BinOp to a Name (line 1086):
                unicode_164807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1086, 22), 'unicode', u'%s=%s')
                
                # Obtaining an instance of the builtin type 'tuple' (line 1086)
                tuple_164808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1086, 33), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 1086)
                # Adding element type (line 1086)
                
                # Call to get_text(...): (line 1086)
                # Processing the call keyword arguments (line 1086)
                kwargs_164813 = {}
                # Getting the type of 'self' (line 1086)
                self_164809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 33), 'self', False)
                # Obtaining the member 'slider' of a type (line 1086)
                slider_164810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 33), self_164809, 'slider')
                # Obtaining the member 'label' of a type (line 1086)
                label_164811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 33), slider_164810, 'label')
                # Obtaining the member 'get_text' of a type (line 1086)
                get_text_164812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 33), label_164811, 'get_text')
                # Calling get_text(args, kwargs) (line 1086)
                get_text_call_result_164814 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 33), get_text_164812, *[], **kwargs_164813)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1086, 33), tuple_164808, get_text_call_result_164814)
                # Adding element type (line 1086)
                # Getting the type of 'self' (line 1087)
                self_164815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 33), 'self')
                # Obtaining the member 'slider' of a type (line 1087)
                slider_164816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 33), self_164815, 'slider')
                # Obtaining the member 'valfmt' of a type (line 1087)
                valfmt_164817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 33), slider_164816, 'valfmt')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1086, 33), tuple_164808, valfmt_164817)
                
                # Applying the binary operator '%' (line 1086)
                result_mod_164818 = python_operator(stypy.reporting.localization.Localization(__file__, 1086, 22), '%', unicode_164807, tuple_164808)
                
                # Assigning a type to the variable 'fmt' (line 1086)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 16), 'fmt', result_mod_164818)
                # Getting the type of 'fmt' (line 1088)
                fmt_164819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 23), 'fmt')
                # Getting the type of 'x' (line 1088)
                x_164820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 29), 'x')
                # Applying the binary operator '%' (line 1088)
                result_mod_164821 = python_operator(stypy.reporting.localization.Localization(__file__, 1088, 23), '%', fmt_164819, x_164820)
                
                # Assigning a type to the variable 'stypy_return_type' (line 1088)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 16), 'stypy_return_type', result_mod_164821)
                
                # ################# End of '__call__(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function '__call__' in the type store
                # Getting the type of 'stypy_return_type' (line 1085)
                stypy_return_type_164822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_164822)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function '__call__'
                return stypy_return_type_164822

        
        # Assigning a type to the variable 'toolbarfmt' (line 1081)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1081, 8), 'toolbarfmt', toolbarfmt)
        
        # Assigning a Call to a Attribute (line 1090):
        
        # Assigning a Call to a Attribute (line 1090):
        
        # Call to add_subplot(...): (line 1090)
        # Processing the call arguments (line 1090)
        int_164825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, 42), 'int')
        # Processing the call keyword arguments (line 1090)
        kwargs_164826 = {}
        # Getting the type of 'toolfig' (line 1090)
        toolfig_164823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 22), 'toolfig', False)
        # Obtaining the member 'add_subplot' of a type (line 1090)
        add_subplot_164824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 22), toolfig_164823, 'add_subplot')
        # Calling add_subplot(args, kwargs) (line 1090)
        add_subplot_call_result_164827 = invoke(stypy.reporting.localization.Localization(__file__, 1090, 22), add_subplot_164824, *[int_164825], **kwargs_164826)
        
        # Getting the type of 'self' (line 1090)
        self_164828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 8), 'self')
        # Setting the type of the member 'axleft' of a type (line 1090)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 8), self_164828, 'axleft', add_subplot_call_result_164827)
        
        # Call to set_title(...): (line 1091)
        # Processing the call arguments (line 1091)
        unicode_164832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1091, 30), 'unicode', u'Click on slider to adjust subplot param')
        # Processing the call keyword arguments (line 1091)
        kwargs_164833 = {}
        # Getting the type of 'self' (line 1091)
        self_164829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'self', False)
        # Obtaining the member 'axleft' of a type (line 1091)
        axleft_164830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 8), self_164829, 'axleft')
        # Obtaining the member 'set_title' of a type (line 1091)
        set_title_164831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 8), axleft_164830, 'set_title')
        # Calling set_title(args, kwargs) (line 1091)
        set_title_call_result_164834 = invoke(stypy.reporting.localization.Localization(__file__, 1091, 8), set_title_164831, *[unicode_164832], **kwargs_164833)
        
        
        # Call to set_navigate(...): (line 1092)
        # Processing the call arguments (line 1092)
        # Getting the type of 'False' (line 1092)
        False_164838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 33), 'False', False)
        # Processing the call keyword arguments (line 1092)
        kwargs_164839 = {}
        # Getting the type of 'self' (line 1092)
        self_164835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 8), 'self', False)
        # Obtaining the member 'axleft' of a type (line 1092)
        axleft_164836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1092, 8), self_164835, 'axleft')
        # Obtaining the member 'set_navigate' of a type (line 1092)
        set_navigate_164837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1092, 8), axleft_164836, 'set_navigate')
        # Calling set_navigate(args, kwargs) (line 1092)
        set_navigate_call_result_164840 = invoke(stypy.reporting.localization.Localization(__file__, 1092, 8), set_navigate_164837, *[False_164838], **kwargs_164839)
        
        
        # Assigning a Call to a Attribute (line 1094):
        
        # Assigning a Call to a Attribute (line 1094):
        
        # Call to Slider(...): (line 1094)
        # Processing the call arguments (line 1094)
        # Getting the type of 'self' (line 1094)
        self_164842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 33), 'self', False)
        # Obtaining the member 'axleft' of a type (line 1094)
        axleft_164843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 33), self_164842, 'axleft')
        unicode_164844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1094, 46), 'unicode', u'left')
        int_164845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1095, 33), 'int')
        int_164846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1095, 36), 'int')
        # Getting the type of 'targetfig' (line 1095)
        targetfig_164847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 39), 'targetfig', False)
        # Obtaining the member 'subplotpars' of a type (line 1095)
        subplotpars_164848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 39), targetfig_164847, 'subplotpars')
        # Obtaining the member 'left' of a type (line 1095)
        left_164849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 39), subplotpars_164848, 'left')
        # Processing the call keyword arguments (line 1094)
        # Getting the type of 'False' (line 1096)
        False_164850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 43), 'False', False)
        keyword_164851 = False_164850
        kwargs_164852 = {'closedmax': keyword_164851}
        # Getting the type of 'Slider' (line 1094)
        Slider_164841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 26), 'Slider', False)
        # Calling Slider(args, kwargs) (line 1094)
        Slider_call_result_164853 = invoke(stypy.reporting.localization.Localization(__file__, 1094, 26), Slider_164841, *[axleft_164843, unicode_164844, int_164845, int_164846, left_164849], **kwargs_164852)
        
        # Getting the type of 'self' (line 1094)
        self_164854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 8), 'self')
        # Setting the type of the member 'sliderleft' of a type (line 1094)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 8), self_164854, 'sliderleft', Slider_call_result_164853)
        
        # Call to on_changed(...): (line 1097)
        # Processing the call arguments (line 1097)
        # Getting the type of 'self' (line 1097)
        self_164858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 35), 'self', False)
        # Obtaining the member 'funcleft' of a type (line 1097)
        funcleft_164859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 35), self_164858, 'funcleft')
        # Processing the call keyword arguments (line 1097)
        kwargs_164860 = {}
        # Getting the type of 'self' (line 1097)
        self_164855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 8), 'self', False)
        # Obtaining the member 'sliderleft' of a type (line 1097)
        sliderleft_164856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 8), self_164855, 'sliderleft')
        # Obtaining the member 'on_changed' of a type (line 1097)
        on_changed_164857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 8), sliderleft_164856, 'on_changed')
        # Calling on_changed(args, kwargs) (line 1097)
        on_changed_call_result_164861 = invoke(stypy.reporting.localization.Localization(__file__, 1097, 8), on_changed_164857, *[funcleft_164859], **kwargs_164860)
        
        
        # Assigning a Call to a Attribute (line 1099):
        
        # Assigning a Call to a Attribute (line 1099):
        
        # Call to add_subplot(...): (line 1099)
        # Processing the call arguments (line 1099)
        int_164864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1099, 44), 'int')
        # Processing the call keyword arguments (line 1099)
        kwargs_164865 = {}
        # Getting the type of 'toolfig' (line 1099)
        toolfig_164862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 24), 'toolfig', False)
        # Obtaining the member 'add_subplot' of a type (line 1099)
        add_subplot_164863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 24), toolfig_164862, 'add_subplot')
        # Calling add_subplot(args, kwargs) (line 1099)
        add_subplot_call_result_164866 = invoke(stypy.reporting.localization.Localization(__file__, 1099, 24), add_subplot_164863, *[int_164864], **kwargs_164865)
        
        # Getting the type of 'self' (line 1099)
        self_164867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 8), 'self')
        # Setting the type of the member 'axbottom' of a type (line 1099)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 8), self_164867, 'axbottom', add_subplot_call_result_164866)
        
        # Call to set_navigate(...): (line 1100)
        # Processing the call arguments (line 1100)
        # Getting the type of 'False' (line 1100)
        False_164871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 35), 'False', False)
        # Processing the call keyword arguments (line 1100)
        kwargs_164872 = {}
        # Getting the type of 'self' (line 1100)
        self_164868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 8), 'self', False)
        # Obtaining the member 'axbottom' of a type (line 1100)
        axbottom_164869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1100, 8), self_164868, 'axbottom')
        # Obtaining the member 'set_navigate' of a type (line 1100)
        set_navigate_164870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1100, 8), axbottom_164869, 'set_navigate')
        # Calling set_navigate(args, kwargs) (line 1100)
        set_navigate_call_result_164873 = invoke(stypy.reporting.localization.Localization(__file__, 1100, 8), set_navigate_164870, *[False_164871], **kwargs_164872)
        
        
        # Assigning a Call to a Attribute (line 1101):
        
        # Assigning a Call to a Attribute (line 1101):
        
        # Call to Slider(...): (line 1101)
        # Processing the call arguments (line 1101)
        # Getting the type of 'self' (line 1101)
        self_164875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 35), 'self', False)
        # Obtaining the member 'axbottom' of a type (line 1101)
        axbottom_164876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1101, 35), self_164875, 'axbottom')
        unicode_164877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1102, 35), 'unicode', u'bottom')
        int_164878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1102, 45), 'int')
        int_164879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1102, 48), 'int')
        # Getting the type of 'targetfig' (line 1103)
        targetfig_164880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 35), 'targetfig', False)
        # Obtaining the member 'subplotpars' of a type (line 1103)
        subplotpars_164881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 35), targetfig_164880, 'subplotpars')
        # Obtaining the member 'bottom' of a type (line 1103)
        bottom_164882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 35), subplotpars_164881, 'bottom')
        # Processing the call keyword arguments (line 1101)
        # Getting the type of 'False' (line 1104)
        False_164883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 45), 'False', False)
        keyword_164884 = False_164883
        kwargs_164885 = {'closedmax': keyword_164884}
        # Getting the type of 'Slider' (line 1101)
        Slider_164874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 28), 'Slider', False)
        # Calling Slider(args, kwargs) (line 1101)
        Slider_call_result_164886 = invoke(stypy.reporting.localization.Localization(__file__, 1101, 28), Slider_164874, *[axbottom_164876, unicode_164877, int_164878, int_164879, bottom_164882], **kwargs_164885)
        
        # Getting the type of 'self' (line 1101)
        self_164887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 8), 'self')
        # Setting the type of the member 'sliderbottom' of a type (line 1101)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1101, 8), self_164887, 'sliderbottom', Slider_call_result_164886)
        
        # Call to on_changed(...): (line 1105)
        # Processing the call arguments (line 1105)
        # Getting the type of 'self' (line 1105)
        self_164891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 37), 'self', False)
        # Obtaining the member 'funcbottom' of a type (line 1105)
        funcbottom_164892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1105, 37), self_164891, 'funcbottom')
        # Processing the call keyword arguments (line 1105)
        kwargs_164893 = {}
        # Getting the type of 'self' (line 1105)
        self_164888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 8), 'self', False)
        # Obtaining the member 'sliderbottom' of a type (line 1105)
        sliderbottom_164889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1105, 8), self_164888, 'sliderbottom')
        # Obtaining the member 'on_changed' of a type (line 1105)
        on_changed_164890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1105, 8), sliderbottom_164889, 'on_changed')
        # Calling on_changed(args, kwargs) (line 1105)
        on_changed_call_result_164894 = invoke(stypy.reporting.localization.Localization(__file__, 1105, 8), on_changed_164890, *[funcbottom_164892], **kwargs_164893)
        
        
        # Assigning a Call to a Attribute (line 1107):
        
        # Assigning a Call to a Attribute (line 1107):
        
        # Call to add_subplot(...): (line 1107)
        # Processing the call arguments (line 1107)
        int_164897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1107, 43), 'int')
        # Processing the call keyword arguments (line 1107)
        kwargs_164898 = {}
        # Getting the type of 'toolfig' (line 1107)
        toolfig_164895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 23), 'toolfig', False)
        # Obtaining the member 'add_subplot' of a type (line 1107)
        add_subplot_164896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1107, 23), toolfig_164895, 'add_subplot')
        # Calling add_subplot(args, kwargs) (line 1107)
        add_subplot_call_result_164899 = invoke(stypy.reporting.localization.Localization(__file__, 1107, 23), add_subplot_164896, *[int_164897], **kwargs_164898)
        
        # Getting the type of 'self' (line 1107)
        self_164900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 8), 'self')
        # Setting the type of the member 'axright' of a type (line 1107)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1107, 8), self_164900, 'axright', add_subplot_call_result_164899)
        
        # Call to set_navigate(...): (line 1108)
        # Processing the call arguments (line 1108)
        # Getting the type of 'False' (line 1108)
        False_164904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 34), 'False', False)
        # Processing the call keyword arguments (line 1108)
        kwargs_164905 = {}
        # Getting the type of 'self' (line 1108)
        self_164901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 8), 'self', False)
        # Obtaining the member 'axright' of a type (line 1108)
        axright_164902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1108, 8), self_164901, 'axright')
        # Obtaining the member 'set_navigate' of a type (line 1108)
        set_navigate_164903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1108, 8), axright_164902, 'set_navigate')
        # Calling set_navigate(args, kwargs) (line 1108)
        set_navigate_call_result_164906 = invoke(stypy.reporting.localization.Localization(__file__, 1108, 8), set_navigate_164903, *[False_164904], **kwargs_164905)
        
        
        # Assigning a Call to a Attribute (line 1109):
        
        # Assigning a Call to a Attribute (line 1109):
        
        # Call to Slider(...): (line 1109)
        # Processing the call arguments (line 1109)
        # Getting the type of 'self' (line 1109)
        self_164908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 34), 'self', False)
        # Obtaining the member 'axright' of a type (line 1109)
        axright_164909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1109, 34), self_164908, 'axright')
        unicode_164910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1109, 48), 'unicode', u'right')
        int_164911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1109, 57), 'int')
        int_164912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1109, 60), 'int')
        # Getting the type of 'targetfig' (line 1110)
        targetfig_164913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 34), 'targetfig', False)
        # Obtaining the member 'subplotpars' of a type (line 1110)
        subplotpars_164914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1110, 34), targetfig_164913, 'subplotpars')
        # Obtaining the member 'right' of a type (line 1110)
        right_164915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1110, 34), subplotpars_164914, 'right')
        # Processing the call keyword arguments (line 1109)
        # Getting the type of 'False' (line 1111)
        False_164916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 44), 'False', False)
        keyword_164917 = False_164916
        kwargs_164918 = {'closedmin': keyword_164917}
        # Getting the type of 'Slider' (line 1109)
        Slider_164907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 27), 'Slider', False)
        # Calling Slider(args, kwargs) (line 1109)
        Slider_call_result_164919 = invoke(stypy.reporting.localization.Localization(__file__, 1109, 27), Slider_164907, *[axright_164909, unicode_164910, int_164911, int_164912, right_164915], **kwargs_164918)
        
        # Getting the type of 'self' (line 1109)
        self_164920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 8), 'self')
        # Setting the type of the member 'sliderright' of a type (line 1109)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1109, 8), self_164920, 'sliderright', Slider_call_result_164919)
        
        # Call to on_changed(...): (line 1112)
        # Processing the call arguments (line 1112)
        # Getting the type of 'self' (line 1112)
        self_164924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 36), 'self', False)
        # Obtaining the member 'funcright' of a type (line 1112)
        funcright_164925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1112, 36), self_164924, 'funcright')
        # Processing the call keyword arguments (line 1112)
        kwargs_164926 = {}
        # Getting the type of 'self' (line 1112)
        self_164921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 8), 'self', False)
        # Obtaining the member 'sliderright' of a type (line 1112)
        sliderright_164922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1112, 8), self_164921, 'sliderright')
        # Obtaining the member 'on_changed' of a type (line 1112)
        on_changed_164923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1112, 8), sliderright_164922, 'on_changed')
        # Calling on_changed(args, kwargs) (line 1112)
        on_changed_call_result_164927 = invoke(stypy.reporting.localization.Localization(__file__, 1112, 8), on_changed_164923, *[funcright_164925], **kwargs_164926)
        
        
        # Assigning a Call to a Attribute (line 1114):
        
        # Assigning a Call to a Attribute (line 1114):
        
        # Call to add_subplot(...): (line 1114)
        # Processing the call arguments (line 1114)
        int_164930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1114, 41), 'int')
        # Processing the call keyword arguments (line 1114)
        kwargs_164931 = {}
        # Getting the type of 'toolfig' (line 1114)
        toolfig_164928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 21), 'toolfig', False)
        # Obtaining the member 'add_subplot' of a type (line 1114)
        add_subplot_164929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 21), toolfig_164928, 'add_subplot')
        # Calling add_subplot(args, kwargs) (line 1114)
        add_subplot_call_result_164932 = invoke(stypy.reporting.localization.Localization(__file__, 1114, 21), add_subplot_164929, *[int_164930], **kwargs_164931)
        
        # Getting the type of 'self' (line 1114)
        self_164933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 8), 'self')
        # Setting the type of the member 'axtop' of a type (line 1114)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 8), self_164933, 'axtop', add_subplot_call_result_164932)
        
        # Call to set_navigate(...): (line 1115)
        # Processing the call arguments (line 1115)
        # Getting the type of 'False' (line 1115)
        False_164937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 32), 'False', False)
        # Processing the call keyword arguments (line 1115)
        kwargs_164938 = {}
        # Getting the type of 'self' (line 1115)
        self_164934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 8), 'self', False)
        # Obtaining the member 'axtop' of a type (line 1115)
        axtop_164935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 8), self_164934, 'axtop')
        # Obtaining the member 'set_navigate' of a type (line 1115)
        set_navigate_164936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 8), axtop_164935, 'set_navigate')
        # Calling set_navigate(args, kwargs) (line 1115)
        set_navigate_call_result_164939 = invoke(stypy.reporting.localization.Localization(__file__, 1115, 8), set_navigate_164936, *[False_164937], **kwargs_164938)
        
        
        # Assigning a Call to a Attribute (line 1116):
        
        # Assigning a Call to a Attribute (line 1116):
        
        # Call to Slider(...): (line 1116)
        # Processing the call arguments (line 1116)
        # Getting the type of 'self' (line 1116)
        self_164941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 32), 'self', False)
        # Obtaining the member 'axtop' of a type (line 1116)
        axtop_164942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1116, 32), self_164941, 'axtop')
        unicode_164943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1116, 44), 'unicode', u'top')
        int_164944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1116, 51), 'int')
        int_164945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1116, 54), 'int')
        # Getting the type of 'targetfig' (line 1117)
        targetfig_164946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 32), 'targetfig', False)
        # Obtaining the member 'subplotpars' of a type (line 1117)
        subplotpars_164947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1117, 32), targetfig_164946, 'subplotpars')
        # Obtaining the member 'top' of a type (line 1117)
        top_164948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1117, 32), subplotpars_164947, 'top')
        # Processing the call keyword arguments (line 1116)
        # Getting the type of 'False' (line 1118)
        False_164949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 42), 'False', False)
        keyword_164950 = False_164949
        kwargs_164951 = {'closedmin': keyword_164950}
        # Getting the type of 'Slider' (line 1116)
        Slider_164940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 25), 'Slider', False)
        # Calling Slider(args, kwargs) (line 1116)
        Slider_call_result_164952 = invoke(stypy.reporting.localization.Localization(__file__, 1116, 25), Slider_164940, *[axtop_164942, unicode_164943, int_164944, int_164945, top_164948], **kwargs_164951)
        
        # Getting the type of 'self' (line 1116)
        self_164953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 8), 'self')
        # Setting the type of the member 'slidertop' of a type (line 1116)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1116, 8), self_164953, 'slidertop', Slider_call_result_164952)
        
        # Call to on_changed(...): (line 1119)
        # Processing the call arguments (line 1119)
        # Getting the type of 'self' (line 1119)
        self_164957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 34), 'self', False)
        # Obtaining the member 'functop' of a type (line 1119)
        functop_164958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 34), self_164957, 'functop')
        # Processing the call keyword arguments (line 1119)
        kwargs_164959 = {}
        # Getting the type of 'self' (line 1119)
        self_164954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'self', False)
        # Obtaining the member 'slidertop' of a type (line 1119)
        slidertop_164955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 8), self_164954, 'slidertop')
        # Obtaining the member 'on_changed' of a type (line 1119)
        on_changed_164956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 8), slidertop_164955, 'on_changed')
        # Calling on_changed(args, kwargs) (line 1119)
        on_changed_call_result_164960 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 8), on_changed_164956, *[functop_164958], **kwargs_164959)
        
        
        # Assigning a Call to a Attribute (line 1121):
        
        # Assigning a Call to a Attribute (line 1121):
        
        # Call to add_subplot(...): (line 1121)
        # Processing the call arguments (line 1121)
        int_164963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1121, 44), 'int')
        # Processing the call keyword arguments (line 1121)
        kwargs_164964 = {}
        # Getting the type of 'toolfig' (line 1121)
        toolfig_164961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 24), 'toolfig', False)
        # Obtaining the member 'add_subplot' of a type (line 1121)
        add_subplot_164962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1121, 24), toolfig_164961, 'add_subplot')
        # Calling add_subplot(args, kwargs) (line 1121)
        add_subplot_call_result_164965 = invoke(stypy.reporting.localization.Localization(__file__, 1121, 24), add_subplot_164962, *[int_164963], **kwargs_164964)
        
        # Getting the type of 'self' (line 1121)
        self_164966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 8), 'self')
        # Setting the type of the member 'axwspace' of a type (line 1121)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1121, 8), self_164966, 'axwspace', add_subplot_call_result_164965)
        
        # Call to set_navigate(...): (line 1122)
        # Processing the call arguments (line 1122)
        # Getting the type of 'False' (line 1122)
        False_164970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 35), 'False', False)
        # Processing the call keyword arguments (line 1122)
        kwargs_164971 = {}
        # Getting the type of 'self' (line 1122)
        self_164967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 8), 'self', False)
        # Obtaining the member 'axwspace' of a type (line 1122)
        axwspace_164968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1122, 8), self_164967, 'axwspace')
        # Obtaining the member 'set_navigate' of a type (line 1122)
        set_navigate_164969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1122, 8), axwspace_164968, 'set_navigate')
        # Calling set_navigate(args, kwargs) (line 1122)
        set_navigate_call_result_164972 = invoke(stypy.reporting.localization.Localization(__file__, 1122, 8), set_navigate_164969, *[False_164970], **kwargs_164971)
        
        
        # Assigning a Call to a Attribute (line 1123):
        
        # Assigning a Call to a Attribute (line 1123):
        
        # Call to Slider(...): (line 1123)
        # Processing the call arguments (line 1123)
        # Getting the type of 'self' (line 1123)
        self_164974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 35), 'self', False)
        # Obtaining the member 'axwspace' of a type (line 1123)
        axwspace_164975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 35), self_164974, 'axwspace')
        unicode_164976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 50), 'unicode', u'wspace')
        int_164977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 35), 'int')
        int_164978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 38), 'int')
        # Getting the type of 'targetfig' (line 1124)
        targetfig_164979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 41), 'targetfig', False)
        # Obtaining the member 'subplotpars' of a type (line 1124)
        subplotpars_164980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 41), targetfig_164979, 'subplotpars')
        # Obtaining the member 'wspace' of a type (line 1124)
        wspace_164981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 41), subplotpars_164980, 'wspace')
        # Processing the call keyword arguments (line 1123)
        # Getting the type of 'False' (line 1125)
        False_164982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 45), 'False', False)
        keyword_164983 = False_164982
        kwargs_164984 = {'closedmax': keyword_164983}
        # Getting the type of 'Slider' (line 1123)
        Slider_164973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 28), 'Slider', False)
        # Calling Slider(args, kwargs) (line 1123)
        Slider_call_result_164985 = invoke(stypy.reporting.localization.Localization(__file__, 1123, 28), Slider_164973, *[axwspace_164975, unicode_164976, int_164977, int_164978, wspace_164981], **kwargs_164984)
        
        # Getting the type of 'self' (line 1123)
        self_164986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 8), 'self')
        # Setting the type of the member 'sliderwspace' of a type (line 1123)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 8), self_164986, 'sliderwspace', Slider_call_result_164985)
        
        # Call to on_changed(...): (line 1126)
        # Processing the call arguments (line 1126)
        # Getting the type of 'self' (line 1126)
        self_164990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 37), 'self', False)
        # Obtaining the member 'funcwspace' of a type (line 1126)
        funcwspace_164991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 37), self_164990, 'funcwspace')
        # Processing the call keyword arguments (line 1126)
        kwargs_164992 = {}
        # Getting the type of 'self' (line 1126)
        self_164987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 8), 'self', False)
        # Obtaining the member 'sliderwspace' of a type (line 1126)
        sliderwspace_164988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 8), self_164987, 'sliderwspace')
        # Obtaining the member 'on_changed' of a type (line 1126)
        on_changed_164989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 8), sliderwspace_164988, 'on_changed')
        # Calling on_changed(args, kwargs) (line 1126)
        on_changed_call_result_164993 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 8), on_changed_164989, *[funcwspace_164991], **kwargs_164992)
        
        
        # Assigning a Call to a Attribute (line 1128):
        
        # Assigning a Call to a Attribute (line 1128):
        
        # Call to add_subplot(...): (line 1128)
        # Processing the call arguments (line 1128)
        int_164996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1128, 44), 'int')
        # Processing the call keyword arguments (line 1128)
        kwargs_164997 = {}
        # Getting the type of 'toolfig' (line 1128)
        toolfig_164994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 24), 'toolfig', False)
        # Obtaining the member 'add_subplot' of a type (line 1128)
        add_subplot_164995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 24), toolfig_164994, 'add_subplot')
        # Calling add_subplot(args, kwargs) (line 1128)
        add_subplot_call_result_164998 = invoke(stypy.reporting.localization.Localization(__file__, 1128, 24), add_subplot_164995, *[int_164996], **kwargs_164997)
        
        # Getting the type of 'self' (line 1128)
        self_164999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 8), 'self')
        # Setting the type of the member 'axhspace' of a type (line 1128)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 8), self_164999, 'axhspace', add_subplot_call_result_164998)
        
        # Call to set_navigate(...): (line 1129)
        # Processing the call arguments (line 1129)
        # Getting the type of 'False' (line 1129)
        False_165003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 35), 'False', False)
        # Processing the call keyword arguments (line 1129)
        kwargs_165004 = {}
        # Getting the type of 'self' (line 1129)
        self_165000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 8), 'self', False)
        # Obtaining the member 'axhspace' of a type (line 1129)
        axhspace_165001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1129, 8), self_165000, 'axhspace')
        # Obtaining the member 'set_navigate' of a type (line 1129)
        set_navigate_165002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1129, 8), axhspace_165001, 'set_navigate')
        # Calling set_navigate(args, kwargs) (line 1129)
        set_navigate_call_result_165005 = invoke(stypy.reporting.localization.Localization(__file__, 1129, 8), set_navigate_165002, *[False_165003], **kwargs_165004)
        
        
        # Assigning a Call to a Attribute (line 1130):
        
        # Assigning a Call to a Attribute (line 1130):
        
        # Call to Slider(...): (line 1130)
        # Processing the call arguments (line 1130)
        # Getting the type of 'self' (line 1130)
        self_165007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 35), 'self', False)
        # Obtaining the member 'axhspace' of a type (line 1130)
        axhspace_165008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1130, 35), self_165007, 'axhspace')
        unicode_165009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1130, 50), 'unicode', u'hspace')
        int_165010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1131, 35), 'int')
        int_165011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1131, 38), 'int')
        # Getting the type of 'targetfig' (line 1131)
        targetfig_165012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 41), 'targetfig', False)
        # Obtaining the member 'subplotpars' of a type (line 1131)
        subplotpars_165013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 41), targetfig_165012, 'subplotpars')
        # Obtaining the member 'hspace' of a type (line 1131)
        hspace_165014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 41), subplotpars_165013, 'hspace')
        # Processing the call keyword arguments (line 1130)
        # Getting the type of 'False' (line 1132)
        False_165015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 45), 'False', False)
        keyword_165016 = False_165015
        kwargs_165017 = {'closedmax': keyword_165016}
        # Getting the type of 'Slider' (line 1130)
        Slider_165006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 28), 'Slider', False)
        # Calling Slider(args, kwargs) (line 1130)
        Slider_call_result_165018 = invoke(stypy.reporting.localization.Localization(__file__, 1130, 28), Slider_165006, *[axhspace_165008, unicode_165009, int_165010, int_165011, hspace_165014], **kwargs_165017)
        
        # Getting the type of 'self' (line 1130)
        self_165019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 8), 'self')
        # Setting the type of the member 'sliderhspace' of a type (line 1130)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1130, 8), self_165019, 'sliderhspace', Slider_call_result_165018)
        
        # Call to on_changed(...): (line 1133)
        # Processing the call arguments (line 1133)
        # Getting the type of 'self' (line 1133)
        self_165023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 37), 'self', False)
        # Obtaining the member 'funchspace' of a type (line 1133)
        funchspace_165024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 37), self_165023, 'funchspace')
        # Processing the call keyword arguments (line 1133)
        kwargs_165025 = {}
        # Getting the type of 'self' (line 1133)
        self_165020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 8), 'self', False)
        # Obtaining the member 'sliderhspace' of a type (line 1133)
        sliderhspace_165021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 8), self_165020, 'sliderhspace')
        # Obtaining the member 'on_changed' of a type (line 1133)
        on_changed_165022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 8), sliderhspace_165021, 'on_changed')
        # Calling on_changed(args, kwargs) (line 1133)
        on_changed_call_result_165026 = invoke(stypy.reporting.localization.Localization(__file__, 1133, 8), on_changed_165022, *[funchspace_165024], **kwargs_165025)
        
        
        # Assigning a Attribute to a Attribute (line 1136):
        
        # Assigning a Attribute to a Attribute (line 1136):
        # Getting the type of 'self' (line 1136)
        self_165027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 36), 'self')
        # Obtaining the member 'sliderright' of a type (line 1136)
        sliderright_165028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1136, 36), self_165027, 'sliderright')
        # Getting the type of 'self' (line 1136)
        self_165029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 8), 'self')
        # Obtaining the member 'sliderleft' of a type (line 1136)
        sliderleft_165030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1136, 8), self_165029, 'sliderleft')
        # Setting the type of the member 'slidermax' of a type (line 1136)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1136, 8), sliderleft_165030, 'slidermax', sliderright_165028)
        
        # Assigning a Attribute to a Attribute (line 1137):
        
        # Assigning a Attribute to a Attribute (line 1137):
        # Getting the type of 'self' (line 1137)
        self_165031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 37), 'self')
        # Obtaining the member 'sliderleft' of a type (line 1137)
        sliderleft_165032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1137, 37), self_165031, 'sliderleft')
        # Getting the type of 'self' (line 1137)
        self_165033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 8), 'self')
        # Obtaining the member 'sliderright' of a type (line 1137)
        sliderright_165034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1137, 8), self_165033, 'sliderright')
        # Setting the type of the member 'slidermin' of a type (line 1137)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1137, 8), sliderright_165034, 'slidermin', sliderleft_165032)
        
        # Assigning a Attribute to a Attribute (line 1138):
        
        # Assigning a Attribute to a Attribute (line 1138):
        # Getting the type of 'self' (line 1138)
        self_165035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 38), 'self')
        # Obtaining the member 'slidertop' of a type (line 1138)
        slidertop_165036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 38), self_165035, 'slidertop')
        # Getting the type of 'self' (line 1138)
        self_165037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 8), 'self')
        # Obtaining the member 'sliderbottom' of a type (line 1138)
        sliderbottom_165038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 8), self_165037, 'sliderbottom')
        # Setting the type of the member 'slidermax' of a type (line 1138)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 8), sliderbottom_165038, 'slidermax', slidertop_165036)
        
        # Assigning a Attribute to a Attribute (line 1139):
        
        # Assigning a Attribute to a Attribute (line 1139):
        # Getting the type of 'self' (line 1139)
        self_165039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 35), 'self')
        # Obtaining the member 'sliderbottom' of a type (line 1139)
        sliderbottom_165040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1139, 35), self_165039, 'sliderbottom')
        # Getting the type of 'self' (line 1139)
        self_165041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'self')
        # Obtaining the member 'slidertop' of a type (line 1139)
        slidertop_165042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1139, 8), self_165041, 'slidertop')
        # Setting the type of the member 'slidermin' of a type (line 1139)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1139, 8), slidertop_165042, 'slidermin', sliderbottom_165040)
        
        # Assigning a Call to a Name (line 1141):
        
        # Assigning a Call to a Name (line 1141):
        
        # Call to add_axes(...): (line 1141)
        # Processing the call arguments (line 1141)
        
        # Obtaining an instance of the builtin type 'list' (line 1141)
        list_165045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1141, 31), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1141)
        # Adding element type (line 1141)
        float_165046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1141, 32), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1141, 31), list_165045, float_165046)
        # Adding element type (line 1141)
        float_165047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1141, 37), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1141, 31), list_165045, float_165047)
        # Adding element type (line 1141)
        float_165048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1141, 43), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1141, 31), list_165045, float_165048)
        # Adding element type (line 1141)
        float_165049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1141, 49), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1141, 31), list_165045, float_165049)
        
        # Processing the call keyword arguments (line 1141)
        kwargs_165050 = {}
        # Getting the type of 'toolfig' (line 1141)
        toolfig_165043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 14), 'toolfig', False)
        # Obtaining the member 'add_axes' of a type (line 1141)
        add_axes_165044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1141, 14), toolfig_165043, 'add_axes')
        # Calling add_axes(args, kwargs) (line 1141)
        add_axes_call_result_165051 = invoke(stypy.reporting.localization.Localization(__file__, 1141, 14), add_axes_165044, *[list_165045], **kwargs_165050)
        
        # Assigning a type to the variable 'bax' (line 1141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 8), 'bax', add_axes_call_result_165051)
        
        # Assigning a Call to a Attribute (line 1142):
        
        # Assigning a Call to a Attribute (line 1142):
        
        # Call to Button(...): (line 1142)
        # Processing the call arguments (line 1142)
        # Getting the type of 'bax' (line 1142)
        bax_165053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 34), 'bax', False)
        unicode_165054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1142, 39), 'unicode', u'Reset')
        # Processing the call keyword arguments (line 1142)
        kwargs_165055 = {}
        # Getting the type of 'Button' (line 1142)
        Button_165052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 27), 'Button', False)
        # Calling Button(args, kwargs) (line 1142)
        Button_call_result_165056 = invoke(stypy.reporting.localization.Localization(__file__, 1142, 27), Button_165052, *[bax_165053, unicode_165054], **kwargs_165055)
        
        # Getting the type of 'self' (line 1142)
        self_165057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 8), 'self')
        # Setting the type of the member 'buttonreset' of a type (line 1142)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1142, 8), self_165057, 'buttonreset', Button_call_result_165056)
        
        # Assigning a Tuple to a Name (line 1144):
        
        # Assigning a Tuple to a Name (line 1144):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1144)
        tuple_165058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1144, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1144)
        # Adding element type (line 1144)
        # Getting the type of 'self' (line 1144)
        self_165059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 19), 'self')
        # Obtaining the member 'sliderleft' of a type (line 1144)
        sliderleft_165060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 19), self_165059, 'sliderleft')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1144, 19), tuple_165058, sliderleft_165060)
        # Adding element type (line 1144)
        # Getting the type of 'self' (line 1144)
        self_165061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 36), 'self')
        # Obtaining the member 'sliderbottom' of a type (line 1144)
        sliderbottom_165062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 36), self_165061, 'sliderbottom')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1144, 19), tuple_165058, sliderbottom_165062)
        # Adding element type (line 1144)
        # Getting the type of 'self' (line 1144)
        self_165063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 55), 'self')
        # Obtaining the member 'sliderright' of a type (line 1144)
        sliderright_165064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 55), self_165063, 'sliderright')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1144, 19), tuple_165058, sliderright_165064)
        # Adding element type (line 1144)
        # Getting the type of 'self' (line 1145)
        self_165065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 19), 'self')
        # Obtaining the member 'slidertop' of a type (line 1145)
        slidertop_165066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 19), self_165065, 'slidertop')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1144, 19), tuple_165058, slidertop_165066)
        # Adding element type (line 1144)
        # Getting the type of 'self' (line 1145)
        self_165067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 35), 'self')
        # Obtaining the member 'sliderwspace' of a type (line 1145)
        sliderwspace_165068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 35), self_165067, 'sliderwspace')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1144, 19), tuple_165058, sliderwspace_165068)
        # Adding element type (line 1144)
        # Getting the type of 'self' (line 1145)
        self_165069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 54), 'self')
        # Obtaining the member 'sliderhspace' of a type (line 1145)
        sliderhspace_165070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 54), self_165069, 'sliderhspace')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1144, 19), tuple_165058, sliderhspace_165070)
        
        # Assigning a type to the variable 'sliders' (line 1144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1144, 8), 'sliders', tuple_165058)

        @norecursion
        def func(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'func'
            module_type_store = module_type_store.open_function_context('func', 1147, 8, False)
            
            # Passed parameters checking function
            func.stypy_localization = localization
            func.stypy_type_of_self = None
            func.stypy_type_store = module_type_store
            func.stypy_function_name = 'func'
            func.stypy_param_names_list = ['event']
            func.stypy_varargs_param_name = None
            func.stypy_kwargs_param_name = None
            func.stypy_call_defaults = defaults
            func.stypy_call_varargs = varargs
            func.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'func', ['event'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'func', localization, ['event'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'func(...)' code ##################

            
            # Assigning a Attribute to a Name (line 1148):
            
            # Assigning a Attribute to a Name (line 1148):
            # Getting the type of 'self' (line 1148)
            self_165071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 25), 'self')
            # Obtaining the member 'drawon' of a type (line 1148)
            drawon_165072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1148, 25), self_165071, 'drawon')
            # Assigning a type to the variable 'thisdrawon' (line 1148)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1148, 12), 'thisdrawon', drawon_165072)
            
            # Assigning a Name to a Attribute (line 1150):
            
            # Assigning a Name to a Attribute (line 1150):
            # Getting the type of 'False' (line 1150)
            False_165073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 26), 'False')
            # Getting the type of 'self' (line 1150)
            self_165074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 12), 'self')
            # Setting the type of the member 'drawon' of a type (line 1150)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 12), self_165074, 'drawon', False_165073)
            
            # Assigning a List to a Name (line 1153):
            
            # Assigning a List to a Name (line 1153):
            
            # Obtaining an instance of the builtin type 'list' (line 1153)
            list_165075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1153, 17), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1153)
            
            # Assigning a type to the variable 'bs' (line 1153)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 12), 'bs', list_165075)
            
            # Getting the type of 'sliders' (line 1154)
            sliders_165076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 26), 'sliders')
            # Testing the type of a for loop iterable (line 1154)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1154, 12), sliders_165076)
            # Getting the type of the for loop variable (line 1154)
            for_loop_var_165077 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1154, 12), sliders_165076)
            # Assigning a type to the variable 'slider' (line 1154)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1154, 12), 'slider', for_loop_var_165077)
            # SSA begins for a for statement (line 1154)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Call to append(...): (line 1155)
            # Processing the call arguments (line 1155)
            # Getting the type of 'slider' (line 1155)
            slider_165080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 26), 'slider', False)
            # Obtaining the member 'drawon' of a type (line 1155)
            drawon_165081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1155, 26), slider_165080, 'drawon')
            # Processing the call keyword arguments (line 1155)
            kwargs_165082 = {}
            # Getting the type of 'bs' (line 1155)
            bs_165078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 16), 'bs', False)
            # Obtaining the member 'append' of a type (line 1155)
            append_165079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1155, 16), bs_165078, 'append')
            # Calling append(args, kwargs) (line 1155)
            append_call_result_165083 = invoke(stypy.reporting.localization.Localization(__file__, 1155, 16), append_165079, *[drawon_165081], **kwargs_165082)
            
            
            # Assigning a Name to a Attribute (line 1156):
            
            # Assigning a Name to a Attribute (line 1156):
            # Getting the type of 'False' (line 1156)
            False_165084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 32), 'False')
            # Getting the type of 'slider' (line 1156)
            slider_165085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 16), 'slider')
            # Setting the type of the member 'drawon' of a type (line 1156)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1156, 16), slider_165085, 'drawon', False_165084)
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'sliders' (line 1159)
            sliders_165086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 26), 'sliders')
            # Testing the type of a for loop iterable (line 1159)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1159, 12), sliders_165086)
            # Getting the type of the for loop variable (line 1159)
            for_loop_var_165087 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1159, 12), sliders_165086)
            # Assigning a type to the variable 'slider' (line 1159)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1159, 12), 'slider', for_loop_var_165087)
            # SSA begins for a for statement (line 1159)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Call to reset(...): (line 1160)
            # Processing the call keyword arguments (line 1160)
            kwargs_165090 = {}
            # Getting the type of 'slider' (line 1160)
            slider_165088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 16), 'slider', False)
            # Obtaining the member 'reset' of a type (line 1160)
            reset_165089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1160, 16), slider_165088, 'reset')
            # Calling reset(args, kwargs) (line 1160)
            reset_call_result_165091 = invoke(stypy.reporting.localization.Localization(__file__, 1160, 16), reset_165089, *[], **kwargs_165090)
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Call to zip(...): (line 1163)
            # Processing the call arguments (line 1163)
            # Getting the type of 'sliders' (line 1163)
            sliders_165093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 33), 'sliders', False)
            # Getting the type of 'bs' (line 1163)
            bs_165094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 42), 'bs', False)
            # Processing the call keyword arguments (line 1163)
            kwargs_165095 = {}
            # Getting the type of 'zip' (line 1163)
            zip_165092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 29), 'zip', False)
            # Calling zip(args, kwargs) (line 1163)
            zip_call_result_165096 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 29), zip_165092, *[sliders_165093, bs_165094], **kwargs_165095)
            
            # Testing the type of a for loop iterable (line 1163)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1163, 12), zip_call_result_165096)
            # Getting the type of the for loop variable (line 1163)
            for_loop_var_165097 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1163, 12), zip_call_result_165096)
            # Assigning a type to the variable 'slider' (line 1163)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 12), 'slider', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1163, 12), for_loop_var_165097))
            # Assigning a type to the variable 'b' (line 1163)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 12), 'b', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1163, 12), for_loop_var_165097))
            # SSA begins for a for statement (line 1163)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Assigning a Name to a Attribute (line 1164):
            
            # Assigning a Name to a Attribute (line 1164):
            # Getting the type of 'b' (line 1164)
            b_165098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 32), 'b')
            # Getting the type of 'slider' (line 1164)
            slider_165099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 16), 'slider')
            # Setting the type of the member 'drawon' of a type (line 1164)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 16), slider_165099, 'drawon', b_165098)
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Name to a Attribute (line 1167):
            
            # Assigning a Name to a Attribute (line 1167):
            # Getting the type of 'thisdrawon' (line 1167)
            thisdrawon_165100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 26), 'thisdrawon')
            # Getting the type of 'self' (line 1167)
            self_165101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 12), 'self')
            # Setting the type of the member 'drawon' of a type (line 1167)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1167, 12), self_165101, 'drawon', thisdrawon_165100)
            
            # Getting the type of 'self' (line 1168)
            self_165102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 15), 'self')
            # Obtaining the member 'drawon' of a type (line 1168)
            drawon_165103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1168, 15), self_165102, 'drawon')
            # Testing the type of an if condition (line 1168)
            if_condition_165104 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1168, 12), drawon_165103)
            # Assigning a type to the variable 'if_condition_165104' (line 1168)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1168, 12), 'if_condition_165104', if_condition_165104)
            # SSA begins for if statement (line 1168)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to draw(...): (line 1169)
            # Processing the call keyword arguments (line 1169)
            kwargs_165108 = {}
            # Getting the type of 'toolfig' (line 1169)
            toolfig_165105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 16), 'toolfig', False)
            # Obtaining the member 'canvas' of a type (line 1169)
            canvas_165106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1169, 16), toolfig_165105, 'canvas')
            # Obtaining the member 'draw' of a type (line 1169)
            draw_165107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1169, 16), canvas_165106, 'draw')
            # Calling draw(args, kwargs) (line 1169)
            draw_call_result_165109 = invoke(stypy.reporting.localization.Localization(__file__, 1169, 16), draw_165107, *[], **kwargs_165108)
            
            
            # Call to draw(...): (line 1170)
            # Processing the call keyword arguments (line 1170)
            kwargs_165114 = {}
            # Getting the type of 'self' (line 1170)
            self_165110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 16), 'self', False)
            # Obtaining the member 'targetfig' of a type (line 1170)
            targetfig_165111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1170, 16), self_165110, 'targetfig')
            # Obtaining the member 'canvas' of a type (line 1170)
            canvas_165112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1170, 16), targetfig_165111, 'canvas')
            # Obtaining the member 'draw' of a type (line 1170)
            draw_165113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1170, 16), canvas_165112, 'draw')
            # Calling draw(args, kwargs) (line 1170)
            draw_call_result_165115 = invoke(stypy.reporting.localization.Localization(__file__, 1170, 16), draw_165113, *[], **kwargs_165114)
            
            # SSA join for if statement (line 1168)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # ################# End of 'func(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'func' in the type store
            # Getting the type of 'stypy_return_type' (line 1147)
            stypy_return_type_165116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_165116)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'func'
            return stypy_return_type_165116

        # Assigning a type to the variable 'func' (line 1147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 8), 'func', func)
        
        # Assigning a Attribute to a Name (line 1175):
        
        # Assigning a Attribute to a Name (line 1175):
        # Getting the type of 'toolfig' (line 1175)
        toolfig_165117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 19), 'toolfig')
        # Obtaining the member 'subplotpars' of a type (line 1175)
        subplotpars_165118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 19), toolfig_165117, 'subplotpars')
        # Obtaining the member 'validate' of a type (line 1175)
        validate_165119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 19), subplotpars_165118, 'validate')
        # Assigning a type to the variable 'validate' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 8), 'validate', validate_165119)
        
        # Assigning a Name to a Attribute (line 1176):
        
        # Assigning a Name to a Attribute (line 1176):
        # Getting the type of 'False' (line 1176)
        False_165120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 39), 'False')
        # Getting the type of 'toolfig' (line 1176)
        toolfig_165121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 8), 'toolfig')
        # Obtaining the member 'subplotpars' of a type (line 1176)
        subplotpars_165122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 8), toolfig_165121, 'subplotpars')
        # Setting the type of the member 'validate' of a type (line 1176)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 8), subplotpars_165122, 'validate', False_165120)
        
        # Call to on_clicked(...): (line 1177)
        # Processing the call arguments (line 1177)
        # Getting the type of 'func' (line 1177)
        func_165126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 36), 'func', False)
        # Processing the call keyword arguments (line 1177)
        kwargs_165127 = {}
        # Getting the type of 'self' (line 1177)
        self_165123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 8), 'self', False)
        # Obtaining the member 'buttonreset' of a type (line 1177)
        buttonreset_165124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 8), self_165123, 'buttonreset')
        # Obtaining the member 'on_clicked' of a type (line 1177)
        on_clicked_165125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 8), buttonreset_165124, 'on_clicked')
        # Calling on_clicked(args, kwargs) (line 1177)
        on_clicked_call_result_165128 = invoke(stypy.reporting.localization.Localization(__file__, 1177, 8), on_clicked_165125, *[func_165126], **kwargs_165127)
        
        
        # Assigning a Name to a Attribute (line 1178):
        
        # Assigning a Name to a Attribute (line 1178):
        # Getting the type of 'validate' (line 1178)
        validate_165129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 39), 'validate')
        # Getting the type of 'toolfig' (line 1178)
        toolfig_165130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 8), 'toolfig')
        # Obtaining the member 'subplotpars' of a type (line 1178)
        subplotpars_165131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1178, 8), toolfig_165130, 'subplotpars')
        # Setting the type of the member 'validate' of a type (line 1178)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1178, 8), subplotpars_165131, 'validate', validate_165129)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def funcleft(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'funcleft'
        module_type_store = module_type_store.open_function_context('funcleft', 1180, 4, False)
        # Assigning a type to the variable 'self' (line 1181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1181, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SubplotTool.funcleft.__dict__.__setitem__('stypy_localization', localization)
        SubplotTool.funcleft.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SubplotTool.funcleft.__dict__.__setitem__('stypy_type_store', module_type_store)
        SubplotTool.funcleft.__dict__.__setitem__('stypy_function_name', 'SubplotTool.funcleft')
        SubplotTool.funcleft.__dict__.__setitem__('stypy_param_names_list', ['val'])
        SubplotTool.funcleft.__dict__.__setitem__('stypy_varargs_param_name', None)
        SubplotTool.funcleft.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SubplotTool.funcleft.__dict__.__setitem__('stypy_call_defaults', defaults)
        SubplotTool.funcleft.__dict__.__setitem__('stypy_call_varargs', varargs)
        SubplotTool.funcleft.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SubplotTool.funcleft.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SubplotTool.funcleft', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'funcleft', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'funcleft(...)' code ##################

        
        # Call to subplots_adjust(...): (line 1181)
        # Processing the call keyword arguments (line 1181)
        # Getting the type of 'val' (line 1181)
        val_165135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 44), 'val', False)
        keyword_165136 = val_165135
        kwargs_165137 = {'left': keyword_165136}
        # Getting the type of 'self' (line 1181)
        self_165132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 8), 'self', False)
        # Obtaining the member 'targetfig' of a type (line 1181)
        targetfig_165133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1181, 8), self_165132, 'targetfig')
        # Obtaining the member 'subplots_adjust' of a type (line 1181)
        subplots_adjust_165134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1181, 8), targetfig_165133, 'subplots_adjust')
        # Calling subplots_adjust(args, kwargs) (line 1181)
        subplots_adjust_call_result_165138 = invoke(stypy.reporting.localization.Localization(__file__, 1181, 8), subplots_adjust_165134, *[], **kwargs_165137)
        
        
        # Getting the type of 'self' (line 1182)
        self_165139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 11), 'self')
        # Obtaining the member 'drawon' of a type (line 1182)
        drawon_165140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1182, 11), self_165139, 'drawon')
        # Testing the type of an if condition (line 1182)
        if_condition_165141 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1182, 8), drawon_165140)
        # Assigning a type to the variable 'if_condition_165141' (line 1182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'if_condition_165141', if_condition_165141)
        # SSA begins for if statement (line 1182)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 1183)
        # Processing the call keyword arguments (line 1183)
        kwargs_165146 = {}
        # Getting the type of 'self' (line 1183)
        self_165142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 12), 'self', False)
        # Obtaining the member 'targetfig' of a type (line 1183)
        targetfig_165143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 12), self_165142, 'targetfig')
        # Obtaining the member 'canvas' of a type (line 1183)
        canvas_165144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 12), targetfig_165143, 'canvas')
        # Obtaining the member 'draw' of a type (line 1183)
        draw_165145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 12), canvas_165144, 'draw')
        # Calling draw(args, kwargs) (line 1183)
        draw_call_result_165147 = invoke(stypy.reporting.localization.Localization(__file__, 1183, 12), draw_165145, *[], **kwargs_165146)
        
        # SSA join for if statement (line 1182)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'funcleft(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'funcleft' in the type store
        # Getting the type of 'stypy_return_type' (line 1180)
        stypy_return_type_165148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_165148)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'funcleft'
        return stypy_return_type_165148


    @norecursion
    def funcright(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'funcright'
        module_type_store = module_type_store.open_function_context('funcright', 1185, 4, False)
        # Assigning a type to the variable 'self' (line 1186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SubplotTool.funcright.__dict__.__setitem__('stypy_localization', localization)
        SubplotTool.funcright.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SubplotTool.funcright.__dict__.__setitem__('stypy_type_store', module_type_store)
        SubplotTool.funcright.__dict__.__setitem__('stypy_function_name', 'SubplotTool.funcright')
        SubplotTool.funcright.__dict__.__setitem__('stypy_param_names_list', ['val'])
        SubplotTool.funcright.__dict__.__setitem__('stypy_varargs_param_name', None)
        SubplotTool.funcright.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SubplotTool.funcright.__dict__.__setitem__('stypy_call_defaults', defaults)
        SubplotTool.funcright.__dict__.__setitem__('stypy_call_varargs', varargs)
        SubplotTool.funcright.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SubplotTool.funcright.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SubplotTool.funcright', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'funcright', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'funcright(...)' code ##################

        
        # Call to subplots_adjust(...): (line 1186)
        # Processing the call keyword arguments (line 1186)
        # Getting the type of 'val' (line 1186)
        val_165152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 45), 'val', False)
        keyword_165153 = val_165152
        kwargs_165154 = {'right': keyword_165153}
        # Getting the type of 'self' (line 1186)
        self_165149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 8), 'self', False)
        # Obtaining the member 'targetfig' of a type (line 1186)
        targetfig_165150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 8), self_165149, 'targetfig')
        # Obtaining the member 'subplots_adjust' of a type (line 1186)
        subplots_adjust_165151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 8), targetfig_165150, 'subplots_adjust')
        # Calling subplots_adjust(args, kwargs) (line 1186)
        subplots_adjust_call_result_165155 = invoke(stypy.reporting.localization.Localization(__file__, 1186, 8), subplots_adjust_165151, *[], **kwargs_165154)
        
        
        # Getting the type of 'self' (line 1187)
        self_165156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 11), 'self')
        # Obtaining the member 'drawon' of a type (line 1187)
        drawon_165157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 11), self_165156, 'drawon')
        # Testing the type of an if condition (line 1187)
        if_condition_165158 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1187, 8), drawon_165157)
        # Assigning a type to the variable 'if_condition_165158' (line 1187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'if_condition_165158', if_condition_165158)
        # SSA begins for if statement (line 1187)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 1188)
        # Processing the call keyword arguments (line 1188)
        kwargs_165163 = {}
        # Getting the type of 'self' (line 1188)
        self_165159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 12), 'self', False)
        # Obtaining the member 'targetfig' of a type (line 1188)
        targetfig_165160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 12), self_165159, 'targetfig')
        # Obtaining the member 'canvas' of a type (line 1188)
        canvas_165161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 12), targetfig_165160, 'canvas')
        # Obtaining the member 'draw' of a type (line 1188)
        draw_165162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 12), canvas_165161, 'draw')
        # Calling draw(args, kwargs) (line 1188)
        draw_call_result_165164 = invoke(stypy.reporting.localization.Localization(__file__, 1188, 12), draw_165162, *[], **kwargs_165163)
        
        # SSA join for if statement (line 1187)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'funcright(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'funcright' in the type store
        # Getting the type of 'stypy_return_type' (line 1185)
        stypy_return_type_165165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_165165)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'funcright'
        return stypy_return_type_165165


    @norecursion
    def funcbottom(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'funcbottom'
        module_type_store = module_type_store.open_function_context('funcbottom', 1190, 4, False)
        # Assigning a type to the variable 'self' (line 1191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SubplotTool.funcbottom.__dict__.__setitem__('stypy_localization', localization)
        SubplotTool.funcbottom.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SubplotTool.funcbottom.__dict__.__setitem__('stypy_type_store', module_type_store)
        SubplotTool.funcbottom.__dict__.__setitem__('stypy_function_name', 'SubplotTool.funcbottom')
        SubplotTool.funcbottom.__dict__.__setitem__('stypy_param_names_list', ['val'])
        SubplotTool.funcbottom.__dict__.__setitem__('stypy_varargs_param_name', None)
        SubplotTool.funcbottom.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SubplotTool.funcbottom.__dict__.__setitem__('stypy_call_defaults', defaults)
        SubplotTool.funcbottom.__dict__.__setitem__('stypy_call_varargs', varargs)
        SubplotTool.funcbottom.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SubplotTool.funcbottom.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SubplotTool.funcbottom', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'funcbottom', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'funcbottom(...)' code ##################

        
        # Call to subplots_adjust(...): (line 1191)
        # Processing the call keyword arguments (line 1191)
        # Getting the type of 'val' (line 1191)
        val_165169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 46), 'val', False)
        keyword_165170 = val_165169
        kwargs_165171 = {'bottom': keyword_165170}
        # Getting the type of 'self' (line 1191)
        self_165166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 8), 'self', False)
        # Obtaining the member 'targetfig' of a type (line 1191)
        targetfig_165167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 8), self_165166, 'targetfig')
        # Obtaining the member 'subplots_adjust' of a type (line 1191)
        subplots_adjust_165168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 8), targetfig_165167, 'subplots_adjust')
        # Calling subplots_adjust(args, kwargs) (line 1191)
        subplots_adjust_call_result_165172 = invoke(stypy.reporting.localization.Localization(__file__, 1191, 8), subplots_adjust_165168, *[], **kwargs_165171)
        
        
        # Getting the type of 'self' (line 1192)
        self_165173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 11), 'self')
        # Obtaining the member 'drawon' of a type (line 1192)
        drawon_165174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1192, 11), self_165173, 'drawon')
        # Testing the type of an if condition (line 1192)
        if_condition_165175 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1192, 8), drawon_165174)
        # Assigning a type to the variable 'if_condition_165175' (line 1192)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1192, 8), 'if_condition_165175', if_condition_165175)
        # SSA begins for if statement (line 1192)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 1193)
        # Processing the call keyword arguments (line 1193)
        kwargs_165180 = {}
        # Getting the type of 'self' (line 1193)
        self_165176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 12), 'self', False)
        # Obtaining the member 'targetfig' of a type (line 1193)
        targetfig_165177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1193, 12), self_165176, 'targetfig')
        # Obtaining the member 'canvas' of a type (line 1193)
        canvas_165178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1193, 12), targetfig_165177, 'canvas')
        # Obtaining the member 'draw' of a type (line 1193)
        draw_165179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1193, 12), canvas_165178, 'draw')
        # Calling draw(args, kwargs) (line 1193)
        draw_call_result_165181 = invoke(stypy.reporting.localization.Localization(__file__, 1193, 12), draw_165179, *[], **kwargs_165180)
        
        # SSA join for if statement (line 1192)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'funcbottom(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'funcbottom' in the type store
        # Getting the type of 'stypy_return_type' (line 1190)
        stypy_return_type_165182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_165182)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'funcbottom'
        return stypy_return_type_165182


    @norecursion
    def functop(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'functop'
        module_type_store = module_type_store.open_function_context('functop', 1195, 4, False)
        # Assigning a type to the variable 'self' (line 1196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1196, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SubplotTool.functop.__dict__.__setitem__('stypy_localization', localization)
        SubplotTool.functop.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SubplotTool.functop.__dict__.__setitem__('stypy_type_store', module_type_store)
        SubplotTool.functop.__dict__.__setitem__('stypy_function_name', 'SubplotTool.functop')
        SubplotTool.functop.__dict__.__setitem__('stypy_param_names_list', ['val'])
        SubplotTool.functop.__dict__.__setitem__('stypy_varargs_param_name', None)
        SubplotTool.functop.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SubplotTool.functop.__dict__.__setitem__('stypy_call_defaults', defaults)
        SubplotTool.functop.__dict__.__setitem__('stypy_call_varargs', varargs)
        SubplotTool.functop.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SubplotTool.functop.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SubplotTool.functop', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'functop', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'functop(...)' code ##################

        
        # Call to subplots_adjust(...): (line 1196)
        # Processing the call keyword arguments (line 1196)
        # Getting the type of 'val' (line 1196)
        val_165186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 43), 'val', False)
        keyword_165187 = val_165186
        kwargs_165188 = {'top': keyword_165187}
        # Getting the type of 'self' (line 1196)
        self_165183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 8), 'self', False)
        # Obtaining the member 'targetfig' of a type (line 1196)
        targetfig_165184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1196, 8), self_165183, 'targetfig')
        # Obtaining the member 'subplots_adjust' of a type (line 1196)
        subplots_adjust_165185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1196, 8), targetfig_165184, 'subplots_adjust')
        # Calling subplots_adjust(args, kwargs) (line 1196)
        subplots_adjust_call_result_165189 = invoke(stypy.reporting.localization.Localization(__file__, 1196, 8), subplots_adjust_165185, *[], **kwargs_165188)
        
        
        # Getting the type of 'self' (line 1197)
        self_165190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 11), 'self')
        # Obtaining the member 'drawon' of a type (line 1197)
        drawon_165191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1197, 11), self_165190, 'drawon')
        # Testing the type of an if condition (line 1197)
        if_condition_165192 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1197, 8), drawon_165191)
        # Assigning a type to the variable 'if_condition_165192' (line 1197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1197, 8), 'if_condition_165192', if_condition_165192)
        # SSA begins for if statement (line 1197)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 1198)
        # Processing the call keyword arguments (line 1198)
        kwargs_165197 = {}
        # Getting the type of 'self' (line 1198)
        self_165193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 12), 'self', False)
        # Obtaining the member 'targetfig' of a type (line 1198)
        targetfig_165194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 12), self_165193, 'targetfig')
        # Obtaining the member 'canvas' of a type (line 1198)
        canvas_165195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 12), targetfig_165194, 'canvas')
        # Obtaining the member 'draw' of a type (line 1198)
        draw_165196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 12), canvas_165195, 'draw')
        # Calling draw(args, kwargs) (line 1198)
        draw_call_result_165198 = invoke(stypy.reporting.localization.Localization(__file__, 1198, 12), draw_165196, *[], **kwargs_165197)
        
        # SSA join for if statement (line 1197)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'functop(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'functop' in the type store
        # Getting the type of 'stypy_return_type' (line 1195)
        stypy_return_type_165199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_165199)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'functop'
        return stypy_return_type_165199


    @norecursion
    def funcwspace(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'funcwspace'
        module_type_store = module_type_store.open_function_context('funcwspace', 1200, 4, False)
        # Assigning a type to the variable 'self' (line 1201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1201, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SubplotTool.funcwspace.__dict__.__setitem__('stypy_localization', localization)
        SubplotTool.funcwspace.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SubplotTool.funcwspace.__dict__.__setitem__('stypy_type_store', module_type_store)
        SubplotTool.funcwspace.__dict__.__setitem__('stypy_function_name', 'SubplotTool.funcwspace')
        SubplotTool.funcwspace.__dict__.__setitem__('stypy_param_names_list', ['val'])
        SubplotTool.funcwspace.__dict__.__setitem__('stypy_varargs_param_name', None)
        SubplotTool.funcwspace.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SubplotTool.funcwspace.__dict__.__setitem__('stypy_call_defaults', defaults)
        SubplotTool.funcwspace.__dict__.__setitem__('stypy_call_varargs', varargs)
        SubplotTool.funcwspace.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SubplotTool.funcwspace.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SubplotTool.funcwspace', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'funcwspace', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'funcwspace(...)' code ##################

        
        # Call to subplots_adjust(...): (line 1201)
        # Processing the call keyword arguments (line 1201)
        # Getting the type of 'val' (line 1201)
        val_165203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 46), 'val', False)
        keyword_165204 = val_165203
        kwargs_165205 = {'wspace': keyword_165204}
        # Getting the type of 'self' (line 1201)
        self_165200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 8), 'self', False)
        # Obtaining the member 'targetfig' of a type (line 1201)
        targetfig_165201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 8), self_165200, 'targetfig')
        # Obtaining the member 'subplots_adjust' of a type (line 1201)
        subplots_adjust_165202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 8), targetfig_165201, 'subplots_adjust')
        # Calling subplots_adjust(args, kwargs) (line 1201)
        subplots_adjust_call_result_165206 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 8), subplots_adjust_165202, *[], **kwargs_165205)
        
        
        # Getting the type of 'self' (line 1202)
        self_165207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 11), 'self')
        # Obtaining the member 'drawon' of a type (line 1202)
        drawon_165208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 11), self_165207, 'drawon')
        # Testing the type of an if condition (line 1202)
        if_condition_165209 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1202, 8), drawon_165208)
        # Assigning a type to the variable 'if_condition_165209' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'if_condition_165209', if_condition_165209)
        # SSA begins for if statement (line 1202)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 1203)
        # Processing the call keyword arguments (line 1203)
        kwargs_165214 = {}
        # Getting the type of 'self' (line 1203)
        self_165210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 12), 'self', False)
        # Obtaining the member 'targetfig' of a type (line 1203)
        targetfig_165211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1203, 12), self_165210, 'targetfig')
        # Obtaining the member 'canvas' of a type (line 1203)
        canvas_165212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1203, 12), targetfig_165211, 'canvas')
        # Obtaining the member 'draw' of a type (line 1203)
        draw_165213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1203, 12), canvas_165212, 'draw')
        # Calling draw(args, kwargs) (line 1203)
        draw_call_result_165215 = invoke(stypy.reporting.localization.Localization(__file__, 1203, 12), draw_165213, *[], **kwargs_165214)
        
        # SSA join for if statement (line 1202)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'funcwspace(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'funcwspace' in the type store
        # Getting the type of 'stypy_return_type' (line 1200)
        stypy_return_type_165216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_165216)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'funcwspace'
        return stypy_return_type_165216


    @norecursion
    def funchspace(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'funchspace'
        module_type_store = module_type_store.open_function_context('funchspace', 1205, 4, False)
        # Assigning a type to the variable 'self' (line 1206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1206, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SubplotTool.funchspace.__dict__.__setitem__('stypy_localization', localization)
        SubplotTool.funchspace.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SubplotTool.funchspace.__dict__.__setitem__('stypy_type_store', module_type_store)
        SubplotTool.funchspace.__dict__.__setitem__('stypy_function_name', 'SubplotTool.funchspace')
        SubplotTool.funchspace.__dict__.__setitem__('stypy_param_names_list', ['val'])
        SubplotTool.funchspace.__dict__.__setitem__('stypy_varargs_param_name', None)
        SubplotTool.funchspace.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SubplotTool.funchspace.__dict__.__setitem__('stypy_call_defaults', defaults)
        SubplotTool.funchspace.__dict__.__setitem__('stypy_call_varargs', varargs)
        SubplotTool.funchspace.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SubplotTool.funchspace.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SubplotTool.funchspace', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'funchspace', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'funchspace(...)' code ##################

        
        # Call to subplots_adjust(...): (line 1206)
        # Processing the call keyword arguments (line 1206)
        # Getting the type of 'val' (line 1206)
        val_165220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 46), 'val', False)
        keyword_165221 = val_165220
        kwargs_165222 = {'hspace': keyword_165221}
        # Getting the type of 'self' (line 1206)
        self_165217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 8), 'self', False)
        # Obtaining the member 'targetfig' of a type (line 1206)
        targetfig_165218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 8), self_165217, 'targetfig')
        # Obtaining the member 'subplots_adjust' of a type (line 1206)
        subplots_adjust_165219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 8), targetfig_165218, 'subplots_adjust')
        # Calling subplots_adjust(args, kwargs) (line 1206)
        subplots_adjust_call_result_165223 = invoke(stypy.reporting.localization.Localization(__file__, 1206, 8), subplots_adjust_165219, *[], **kwargs_165222)
        
        
        # Getting the type of 'self' (line 1207)
        self_165224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 11), 'self')
        # Obtaining the member 'drawon' of a type (line 1207)
        drawon_165225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1207, 11), self_165224, 'drawon')
        # Testing the type of an if condition (line 1207)
        if_condition_165226 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1207, 8), drawon_165225)
        # Assigning a type to the variable 'if_condition_165226' (line 1207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1207, 8), 'if_condition_165226', if_condition_165226)
        # SSA begins for if statement (line 1207)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 1208)
        # Processing the call keyword arguments (line 1208)
        kwargs_165231 = {}
        # Getting the type of 'self' (line 1208)
        self_165227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 12), 'self', False)
        # Obtaining the member 'targetfig' of a type (line 1208)
        targetfig_165228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 12), self_165227, 'targetfig')
        # Obtaining the member 'canvas' of a type (line 1208)
        canvas_165229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 12), targetfig_165228, 'canvas')
        # Obtaining the member 'draw' of a type (line 1208)
        draw_165230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 12), canvas_165229, 'draw')
        # Calling draw(args, kwargs) (line 1208)
        draw_call_result_165232 = invoke(stypy.reporting.localization.Localization(__file__, 1208, 12), draw_165230, *[], **kwargs_165231)
        
        # SSA join for if statement (line 1207)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'funchspace(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'funchspace' in the type store
        # Getting the type of 'stypy_return_type' (line 1205)
        stypy_return_type_165233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_165233)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'funchspace'
        return stypy_return_type_165233


# Assigning a type to the variable 'SubplotTool' (line 1062)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1062, 0), 'SubplotTool', SubplotTool)
# Declaration of the 'Cursor' class
# Getting the type of 'AxesWidget' (line 1211)
AxesWidget_165234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 13), 'AxesWidget')

class Cursor(AxesWidget_165234, ):
    unicode_165235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1227, (-1)), 'unicode', u'\n    A horizontal and vertical line that spans the axes and moves with\n    the pointer.  You can turn off the hline or vline respectively with\n    the following attributes:\n\n      *horizOn*\n        Controls the visibility of the horizontal line\n\n      *vertOn*\n        Controls the visibility of the horizontal line\n\n    and the visibility of the cursor itself with the *visible* attribute.\n\n    For the cursor to remain responsive you must keep a reference to\n    it.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 1228)
        True_165236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 35), 'True')
        # Getting the type of 'True' (line 1228)
        True_165237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 48), 'True')
        # Getting the type of 'False' (line 1228)
        False_165238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 62), 'False')
        defaults = [True_165236, True_165237, False_165238]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1228, 4, False)
        # Assigning a type to the variable 'self' (line 1229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Cursor.__init__', ['ax', 'horizOn', 'vertOn', 'useblit'], None, 'lineprops', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'horizOn', 'vertOn', 'useblit'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_165239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1234, (-1)), 'unicode', u'\n        Add a cursor to *ax*.  If ``useblit=True``, use the backend-\n        dependent blitting features for faster updates (GTKAgg\n        only for now).  *lineprops* is a dictionary of line properties.\n        ')
        
        # Call to __init__(...): (line 1236)
        # Processing the call arguments (line 1236)
        # Getting the type of 'self' (line 1236)
        self_165242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 28), 'self', False)
        # Getting the type of 'ax' (line 1236)
        ax_165243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 34), 'ax', False)
        # Processing the call keyword arguments (line 1236)
        kwargs_165244 = {}
        # Getting the type of 'AxesWidget' (line 1236)
        AxesWidget_165240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 8), 'AxesWidget', False)
        # Obtaining the member '__init__' of a type (line 1236)
        init___165241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1236, 8), AxesWidget_165240, '__init__')
        # Calling __init__(args, kwargs) (line 1236)
        init___call_result_165245 = invoke(stypy.reporting.localization.Localization(__file__, 1236, 8), init___165241, *[self_165242, ax_165243], **kwargs_165244)
        
        
        # Call to connect_event(...): (line 1238)
        # Processing the call arguments (line 1238)
        unicode_165248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 27), 'unicode', u'motion_notify_event')
        # Getting the type of 'self' (line 1238)
        self_165249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 50), 'self', False)
        # Obtaining the member 'onmove' of a type (line 1238)
        onmove_165250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 50), self_165249, 'onmove')
        # Processing the call keyword arguments (line 1238)
        kwargs_165251 = {}
        # Getting the type of 'self' (line 1238)
        self_165246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 1238)
        connect_event_165247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 8), self_165246, 'connect_event')
        # Calling connect_event(args, kwargs) (line 1238)
        connect_event_call_result_165252 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 8), connect_event_165247, *[unicode_165248, onmove_165250], **kwargs_165251)
        
        
        # Call to connect_event(...): (line 1239)
        # Processing the call arguments (line 1239)
        unicode_165255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1239, 27), 'unicode', u'draw_event')
        # Getting the type of 'self' (line 1239)
        self_165256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 41), 'self', False)
        # Obtaining the member 'clear' of a type (line 1239)
        clear_165257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 41), self_165256, 'clear')
        # Processing the call keyword arguments (line 1239)
        kwargs_165258 = {}
        # Getting the type of 'self' (line 1239)
        self_165253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 1239)
        connect_event_165254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 8), self_165253, 'connect_event')
        # Calling connect_event(args, kwargs) (line 1239)
        connect_event_call_result_165259 = invoke(stypy.reporting.localization.Localization(__file__, 1239, 8), connect_event_165254, *[unicode_165255, clear_165257], **kwargs_165258)
        
        
        # Assigning a Name to a Attribute (line 1241):
        
        # Assigning a Name to a Attribute (line 1241):
        # Getting the type of 'True' (line 1241)
        True_165260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 23), 'True')
        # Getting the type of 'self' (line 1241)
        self_165261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 8), 'self')
        # Setting the type of the member 'visible' of a type (line 1241)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1241, 8), self_165261, 'visible', True_165260)
        
        # Assigning a Name to a Attribute (line 1242):
        
        # Assigning a Name to a Attribute (line 1242):
        # Getting the type of 'horizOn' (line 1242)
        horizOn_165262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 23), 'horizOn')
        # Getting the type of 'self' (line 1242)
        self_165263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 8), 'self')
        # Setting the type of the member 'horizOn' of a type (line 1242)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1242, 8), self_165263, 'horizOn', horizOn_165262)
        
        # Assigning a Name to a Attribute (line 1243):
        
        # Assigning a Name to a Attribute (line 1243):
        # Getting the type of 'vertOn' (line 1243)
        vertOn_165264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 22), 'vertOn')
        # Getting the type of 'self' (line 1243)
        self_165265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 8), 'self')
        # Setting the type of the member 'vertOn' of a type (line 1243)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 8), self_165265, 'vertOn', vertOn_165264)
        
        # Assigning a BoolOp to a Attribute (line 1244):
        
        # Assigning a BoolOp to a Attribute (line 1244):
        
        # Evaluating a boolean operation
        # Getting the type of 'useblit' (line 1244)
        useblit_165266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 23), 'useblit')
        # Getting the type of 'self' (line 1244)
        self_165267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 35), 'self')
        # Obtaining the member 'canvas' of a type (line 1244)
        canvas_165268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1244, 35), self_165267, 'canvas')
        # Obtaining the member 'supports_blit' of a type (line 1244)
        supports_blit_165269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1244, 35), canvas_165268, 'supports_blit')
        # Applying the binary operator 'and' (line 1244)
        result_and_keyword_165270 = python_operator(stypy.reporting.localization.Localization(__file__, 1244, 23), 'and', useblit_165266, supports_blit_165269)
        
        # Getting the type of 'self' (line 1244)
        self_165271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 8), 'self')
        # Setting the type of the member 'useblit' of a type (line 1244)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1244, 8), self_165271, 'useblit', result_and_keyword_165270)
        
        # Getting the type of 'self' (line 1246)
        self_165272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 11), 'self')
        # Obtaining the member 'useblit' of a type (line 1246)
        useblit_165273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1246, 11), self_165272, 'useblit')
        # Testing the type of an if condition (line 1246)
        if_condition_165274 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1246, 8), useblit_165273)
        # Assigning a type to the variable 'if_condition_165274' (line 1246)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1246, 8), 'if_condition_165274', if_condition_165274)
        # SSA begins for if statement (line 1246)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 1247):
        
        # Assigning a Name to a Subscript (line 1247):
        # Getting the type of 'True' (line 1247)
        True_165275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 36), 'True')
        # Getting the type of 'lineprops' (line 1247)
        lineprops_165276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 12), 'lineprops')
        unicode_165277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1247, 22), 'unicode', u'animated')
        # Storing an element on a container (line 1247)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1247, 12), lineprops_165276, (unicode_165277, True_165275))
        # SSA join for if statement (line 1246)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 1248):
        
        # Assigning a Call to a Attribute (line 1248):
        
        # Call to axhline(...): (line 1248)
        # Processing the call arguments (line 1248)
        
        # Obtaining the type of the subscript
        int_165280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1248, 48), 'int')
        
        # Call to get_ybound(...): (line 1248)
        # Processing the call keyword arguments (line 1248)
        kwargs_165283 = {}
        # Getting the type of 'ax' (line 1248)
        ax_165281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 32), 'ax', False)
        # Obtaining the member 'get_ybound' of a type (line 1248)
        get_ybound_165282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 32), ax_165281, 'get_ybound')
        # Calling get_ybound(args, kwargs) (line 1248)
        get_ybound_call_result_165284 = invoke(stypy.reporting.localization.Localization(__file__, 1248, 32), get_ybound_165282, *[], **kwargs_165283)
        
        # Obtaining the member '__getitem__' of a type (line 1248)
        getitem___165285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 32), get_ybound_call_result_165284, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1248)
        subscript_call_result_165286 = invoke(stypy.reporting.localization.Localization(__file__, 1248, 32), getitem___165285, int_165280)
        
        # Processing the call keyword arguments (line 1248)
        # Getting the type of 'False' (line 1248)
        False_165287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 60), 'False', False)
        keyword_165288 = False_165287
        # Getting the type of 'lineprops' (line 1248)
        lineprops_165289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 69), 'lineprops', False)
        kwargs_165290 = {'visible': keyword_165288, 'lineprops_165289': lineprops_165289}
        # Getting the type of 'ax' (line 1248)
        ax_165278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 21), 'ax', False)
        # Obtaining the member 'axhline' of a type (line 1248)
        axhline_165279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 21), ax_165278, 'axhline')
        # Calling axhline(args, kwargs) (line 1248)
        axhline_call_result_165291 = invoke(stypy.reporting.localization.Localization(__file__, 1248, 21), axhline_165279, *[subscript_call_result_165286], **kwargs_165290)
        
        # Getting the type of 'self' (line 1248)
        self_165292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 8), 'self')
        # Setting the type of the member 'lineh' of a type (line 1248)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 8), self_165292, 'lineh', axhline_call_result_165291)
        
        # Assigning a Call to a Attribute (line 1249):
        
        # Assigning a Call to a Attribute (line 1249):
        
        # Call to axvline(...): (line 1249)
        # Processing the call arguments (line 1249)
        
        # Obtaining the type of the subscript
        int_165295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1249, 48), 'int')
        
        # Call to get_xbound(...): (line 1249)
        # Processing the call keyword arguments (line 1249)
        kwargs_165298 = {}
        # Getting the type of 'ax' (line 1249)
        ax_165296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 32), 'ax', False)
        # Obtaining the member 'get_xbound' of a type (line 1249)
        get_xbound_165297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1249, 32), ax_165296, 'get_xbound')
        # Calling get_xbound(args, kwargs) (line 1249)
        get_xbound_call_result_165299 = invoke(stypy.reporting.localization.Localization(__file__, 1249, 32), get_xbound_165297, *[], **kwargs_165298)
        
        # Obtaining the member '__getitem__' of a type (line 1249)
        getitem___165300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1249, 32), get_xbound_call_result_165299, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1249)
        subscript_call_result_165301 = invoke(stypy.reporting.localization.Localization(__file__, 1249, 32), getitem___165300, int_165295)
        
        # Processing the call keyword arguments (line 1249)
        # Getting the type of 'False' (line 1249)
        False_165302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 60), 'False', False)
        keyword_165303 = False_165302
        # Getting the type of 'lineprops' (line 1249)
        lineprops_165304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 69), 'lineprops', False)
        kwargs_165305 = {'visible': keyword_165303, 'lineprops_165304': lineprops_165304}
        # Getting the type of 'ax' (line 1249)
        ax_165293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 21), 'ax', False)
        # Obtaining the member 'axvline' of a type (line 1249)
        axvline_165294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1249, 21), ax_165293, 'axvline')
        # Calling axvline(args, kwargs) (line 1249)
        axvline_call_result_165306 = invoke(stypy.reporting.localization.Localization(__file__, 1249, 21), axvline_165294, *[subscript_call_result_165301], **kwargs_165305)
        
        # Getting the type of 'self' (line 1249)
        self_165307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 8), 'self')
        # Setting the type of the member 'linev' of a type (line 1249)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1249, 8), self_165307, 'linev', axvline_call_result_165306)
        
        # Assigning a Name to a Attribute (line 1251):
        
        # Assigning a Name to a Attribute (line 1251):
        # Getting the type of 'None' (line 1251)
        None_165308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 26), 'None')
        # Getting the type of 'self' (line 1251)
        self_165309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 8), 'self')
        # Setting the type of the member 'background' of a type (line 1251)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1251, 8), self_165309, 'background', None_165308)
        
        # Assigning a Name to a Attribute (line 1252):
        
        # Assigning a Name to a Attribute (line 1252):
        # Getting the type of 'False' (line 1252)
        False_165310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 25), 'False')
        # Getting the type of 'self' (line 1252)
        self_165311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 8), 'self')
        # Setting the type of the member 'needclear' of a type (line 1252)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1252, 8), self_165311, 'needclear', False_165310)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def clear(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'clear'
        module_type_store = module_type_store.open_function_context('clear', 1254, 4, False)
        # Assigning a type to the variable 'self' (line 1255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Cursor.clear.__dict__.__setitem__('stypy_localization', localization)
        Cursor.clear.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Cursor.clear.__dict__.__setitem__('stypy_type_store', module_type_store)
        Cursor.clear.__dict__.__setitem__('stypy_function_name', 'Cursor.clear')
        Cursor.clear.__dict__.__setitem__('stypy_param_names_list', ['event'])
        Cursor.clear.__dict__.__setitem__('stypy_varargs_param_name', None)
        Cursor.clear.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Cursor.clear.__dict__.__setitem__('stypy_call_defaults', defaults)
        Cursor.clear.__dict__.__setitem__('stypy_call_varargs', varargs)
        Cursor.clear.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Cursor.clear.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Cursor.clear', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'clear', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'clear(...)' code ##################

        unicode_165312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, 8), 'unicode', u'clear the cursor')
        
        
        # Call to ignore(...): (line 1256)
        # Processing the call arguments (line 1256)
        # Getting the type of 'event' (line 1256)
        event_165315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 23), 'event', False)
        # Processing the call keyword arguments (line 1256)
        kwargs_165316 = {}
        # Getting the type of 'self' (line 1256)
        self_165313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 11), 'self', False)
        # Obtaining the member 'ignore' of a type (line 1256)
        ignore_165314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1256, 11), self_165313, 'ignore')
        # Calling ignore(args, kwargs) (line 1256)
        ignore_call_result_165317 = invoke(stypy.reporting.localization.Localization(__file__, 1256, 11), ignore_165314, *[event_165315], **kwargs_165316)
        
        # Testing the type of an if condition (line 1256)
        if_condition_165318 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1256, 8), ignore_call_result_165317)
        # Assigning a type to the variable 'if_condition_165318' (line 1256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1256, 8), 'if_condition_165318', if_condition_165318)
        # SSA begins for if statement (line 1256)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1257, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1256)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1258)
        self_165319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 11), 'self')
        # Obtaining the member 'useblit' of a type (line 1258)
        useblit_165320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1258, 11), self_165319, 'useblit')
        # Testing the type of an if condition (line 1258)
        if_condition_165321 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1258, 8), useblit_165320)
        # Assigning a type to the variable 'if_condition_165321' (line 1258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1258, 8), 'if_condition_165321', if_condition_165321)
        # SSA begins for if statement (line 1258)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1259):
        
        # Assigning a Call to a Attribute (line 1259):
        
        # Call to copy_from_bbox(...): (line 1259)
        # Processing the call arguments (line 1259)
        # Getting the type of 'self' (line 1259)
        self_165325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 57), 'self', False)
        # Obtaining the member 'ax' of a type (line 1259)
        ax_165326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1259, 57), self_165325, 'ax')
        # Obtaining the member 'bbox' of a type (line 1259)
        bbox_165327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1259, 57), ax_165326, 'bbox')
        # Processing the call keyword arguments (line 1259)
        kwargs_165328 = {}
        # Getting the type of 'self' (line 1259)
        self_165322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 30), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1259)
        canvas_165323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1259, 30), self_165322, 'canvas')
        # Obtaining the member 'copy_from_bbox' of a type (line 1259)
        copy_from_bbox_165324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1259, 30), canvas_165323, 'copy_from_bbox')
        # Calling copy_from_bbox(args, kwargs) (line 1259)
        copy_from_bbox_call_result_165329 = invoke(stypy.reporting.localization.Localization(__file__, 1259, 30), copy_from_bbox_165324, *[bbox_165327], **kwargs_165328)
        
        # Getting the type of 'self' (line 1259)
        self_165330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 12), 'self')
        # Setting the type of the member 'background' of a type (line 1259)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1259, 12), self_165330, 'background', copy_from_bbox_call_result_165329)
        # SSA join for if statement (line 1258)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_visible(...): (line 1260)
        # Processing the call arguments (line 1260)
        # Getting the type of 'False' (line 1260)
        False_165334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 31), 'False', False)
        # Processing the call keyword arguments (line 1260)
        kwargs_165335 = {}
        # Getting the type of 'self' (line 1260)
        self_165331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 8), 'self', False)
        # Obtaining the member 'linev' of a type (line 1260)
        linev_165332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1260, 8), self_165331, 'linev')
        # Obtaining the member 'set_visible' of a type (line 1260)
        set_visible_165333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1260, 8), linev_165332, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1260)
        set_visible_call_result_165336 = invoke(stypy.reporting.localization.Localization(__file__, 1260, 8), set_visible_165333, *[False_165334], **kwargs_165335)
        
        
        # Call to set_visible(...): (line 1261)
        # Processing the call arguments (line 1261)
        # Getting the type of 'False' (line 1261)
        False_165340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 31), 'False', False)
        # Processing the call keyword arguments (line 1261)
        kwargs_165341 = {}
        # Getting the type of 'self' (line 1261)
        self_165337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 8), 'self', False)
        # Obtaining the member 'lineh' of a type (line 1261)
        lineh_165338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1261, 8), self_165337, 'lineh')
        # Obtaining the member 'set_visible' of a type (line 1261)
        set_visible_165339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1261, 8), lineh_165338, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1261)
        set_visible_call_result_165342 = invoke(stypy.reporting.localization.Localization(__file__, 1261, 8), set_visible_165339, *[False_165340], **kwargs_165341)
        
        
        # ################# End of 'clear(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'clear' in the type store
        # Getting the type of 'stypy_return_type' (line 1254)
        stypy_return_type_165343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_165343)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'clear'
        return stypy_return_type_165343


    @norecursion
    def onmove(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'onmove'
        module_type_store = module_type_store.open_function_context('onmove', 1263, 4, False)
        # Assigning a type to the variable 'self' (line 1264)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1264, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Cursor.onmove.__dict__.__setitem__('stypy_localization', localization)
        Cursor.onmove.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Cursor.onmove.__dict__.__setitem__('stypy_type_store', module_type_store)
        Cursor.onmove.__dict__.__setitem__('stypy_function_name', 'Cursor.onmove')
        Cursor.onmove.__dict__.__setitem__('stypy_param_names_list', ['event'])
        Cursor.onmove.__dict__.__setitem__('stypy_varargs_param_name', None)
        Cursor.onmove.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Cursor.onmove.__dict__.__setitem__('stypy_call_defaults', defaults)
        Cursor.onmove.__dict__.__setitem__('stypy_call_varargs', varargs)
        Cursor.onmove.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Cursor.onmove.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Cursor.onmove', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'onmove', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'onmove(...)' code ##################

        unicode_165344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1264, 8), 'unicode', u'on mouse motion draw the cursor if visible')
        
        
        # Call to ignore(...): (line 1265)
        # Processing the call arguments (line 1265)
        # Getting the type of 'event' (line 1265)
        event_165347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 23), 'event', False)
        # Processing the call keyword arguments (line 1265)
        kwargs_165348 = {}
        # Getting the type of 'self' (line 1265)
        self_165345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 11), 'self', False)
        # Obtaining the member 'ignore' of a type (line 1265)
        ignore_165346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1265, 11), self_165345, 'ignore')
        # Calling ignore(args, kwargs) (line 1265)
        ignore_call_result_165349 = invoke(stypy.reporting.localization.Localization(__file__, 1265, 11), ignore_165346, *[event_165347], **kwargs_165348)
        
        # Testing the type of an if condition (line 1265)
        if_condition_165350 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1265, 8), ignore_call_result_165349)
        # Assigning a type to the variable 'if_condition_165350' (line 1265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1265, 8), 'if_condition_165350', if_condition_165350)
        # SSA begins for if statement (line 1265)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1266)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1266, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1265)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to available(...): (line 1267)
        # Processing the call arguments (line 1267)
        # Getting the type of 'self' (line 1267)
        self_165355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 48), 'self', False)
        # Processing the call keyword arguments (line 1267)
        kwargs_165356 = {}
        # Getting the type of 'self' (line 1267)
        self_165351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 15), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1267)
        canvas_165352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1267, 15), self_165351, 'canvas')
        # Obtaining the member 'widgetlock' of a type (line 1267)
        widgetlock_165353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1267, 15), canvas_165352, 'widgetlock')
        # Obtaining the member 'available' of a type (line 1267)
        available_165354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1267, 15), widgetlock_165353, 'available')
        # Calling available(args, kwargs) (line 1267)
        available_call_result_165357 = invoke(stypy.reporting.localization.Localization(__file__, 1267, 15), available_165354, *[self_165355], **kwargs_165356)
        
        # Applying the 'not' unary operator (line 1267)
        result_not__165358 = python_operator(stypy.reporting.localization.Localization(__file__, 1267, 11), 'not', available_call_result_165357)
        
        # Testing the type of an if condition (line 1267)
        if_condition_165359 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1267, 8), result_not__165358)
        # Assigning a type to the variable 'if_condition_165359' (line 1267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1267, 8), 'if_condition_165359', if_condition_165359)
        # SSA begins for if statement (line 1267)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1268, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1267)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'event' (line 1269)
        event_165360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 11), 'event')
        # Obtaining the member 'inaxes' of a type (line 1269)
        inaxes_165361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1269, 11), event_165360, 'inaxes')
        # Getting the type of 'self' (line 1269)
        self_165362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 27), 'self')
        # Obtaining the member 'ax' of a type (line 1269)
        ax_165363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1269, 27), self_165362, 'ax')
        # Applying the binary operator '!=' (line 1269)
        result_ne_165364 = python_operator(stypy.reporting.localization.Localization(__file__, 1269, 11), '!=', inaxes_165361, ax_165363)
        
        # Testing the type of an if condition (line 1269)
        if_condition_165365 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1269, 8), result_ne_165364)
        # Assigning a type to the variable 'if_condition_165365' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 8), 'if_condition_165365', if_condition_165365)
        # SSA begins for if statement (line 1269)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_visible(...): (line 1270)
        # Processing the call arguments (line 1270)
        # Getting the type of 'False' (line 1270)
        False_165369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 35), 'False', False)
        # Processing the call keyword arguments (line 1270)
        kwargs_165370 = {}
        # Getting the type of 'self' (line 1270)
        self_165366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 12), 'self', False)
        # Obtaining the member 'linev' of a type (line 1270)
        linev_165367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1270, 12), self_165366, 'linev')
        # Obtaining the member 'set_visible' of a type (line 1270)
        set_visible_165368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1270, 12), linev_165367, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1270)
        set_visible_call_result_165371 = invoke(stypy.reporting.localization.Localization(__file__, 1270, 12), set_visible_165368, *[False_165369], **kwargs_165370)
        
        
        # Call to set_visible(...): (line 1271)
        # Processing the call arguments (line 1271)
        # Getting the type of 'False' (line 1271)
        False_165375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 35), 'False', False)
        # Processing the call keyword arguments (line 1271)
        kwargs_165376 = {}
        # Getting the type of 'self' (line 1271)
        self_165372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 12), 'self', False)
        # Obtaining the member 'lineh' of a type (line 1271)
        lineh_165373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1271, 12), self_165372, 'lineh')
        # Obtaining the member 'set_visible' of a type (line 1271)
        set_visible_165374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1271, 12), lineh_165373, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1271)
        set_visible_call_result_165377 = invoke(stypy.reporting.localization.Localization(__file__, 1271, 12), set_visible_165374, *[False_165375], **kwargs_165376)
        
        
        # Getting the type of 'self' (line 1273)
        self_165378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 15), 'self')
        # Obtaining the member 'needclear' of a type (line 1273)
        needclear_165379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1273, 15), self_165378, 'needclear')
        # Testing the type of an if condition (line 1273)
        if_condition_165380 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1273, 12), needclear_165379)
        # Assigning a type to the variable 'if_condition_165380' (line 1273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1273, 12), 'if_condition_165380', if_condition_165380)
        # SSA begins for if statement (line 1273)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 1274)
        # Processing the call keyword arguments (line 1274)
        kwargs_165384 = {}
        # Getting the type of 'self' (line 1274)
        self_165381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 16), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1274)
        canvas_165382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1274, 16), self_165381, 'canvas')
        # Obtaining the member 'draw' of a type (line 1274)
        draw_165383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1274, 16), canvas_165382, 'draw')
        # Calling draw(args, kwargs) (line 1274)
        draw_call_result_165385 = invoke(stypy.reporting.localization.Localization(__file__, 1274, 16), draw_165383, *[], **kwargs_165384)
        
        
        # Assigning a Name to a Attribute (line 1275):
        
        # Assigning a Name to a Attribute (line 1275):
        # Getting the type of 'False' (line 1275)
        False_165386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 33), 'False')
        # Getting the type of 'self' (line 1275)
        self_165387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 16), 'self')
        # Setting the type of the member 'needclear' of a type (line 1275)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1275, 16), self_165387, 'needclear', False_165386)
        # SSA join for if statement (line 1273)
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 1276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1276, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1269)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1277):
        
        # Assigning a Name to a Attribute (line 1277):
        # Getting the type of 'True' (line 1277)
        True_165388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 25), 'True')
        # Getting the type of 'self' (line 1277)
        self_165389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 8), 'self')
        # Setting the type of the member 'needclear' of a type (line 1277)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1277, 8), self_165389, 'needclear', True_165388)
        
        
        # Getting the type of 'self' (line 1278)
        self_165390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 15), 'self')
        # Obtaining the member 'visible' of a type (line 1278)
        visible_165391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1278, 15), self_165390, 'visible')
        # Applying the 'not' unary operator (line 1278)
        result_not__165392 = python_operator(stypy.reporting.localization.Localization(__file__, 1278, 11), 'not', visible_165391)
        
        # Testing the type of an if condition (line 1278)
        if_condition_165393 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1278, 8), result_not__165392)
        # Assigning a type to the variable 'if_condition_165393' (line 1278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1278, 8), 'if_condition_165393', if_condition_165393)
        # SSA begins for if statement (line 1278)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1279, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1278)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_xdata(...): (line 1280)
        # Processing the call arguments (line 1280)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1280)
        tuple_165397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1280, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1280)
        # Adding element type (line 1280)
        # Getting the type of 'event' (line 1280)
        event_165398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 30), 'event', False)
        # Obtaining the member 'xdata' of a type (line 1280)
        xdata_165399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 30), event_165398, 'xdata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1280, 30), tuple_165397, xdata_165399)
        # Adding element type (line 1280)
        # Getting the type of 'event' (line 1280)
        event_165400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 43), 'event', False)
        # Obtaining the member 'xdata' of a type (line 1280)
        xdata_165401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 43), event_165400, 'xdata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1280, 30), tuple_165397, xdata_165401)
        
        # Processing the call keyword arguments (line 1280)
        kwargs_165402 = {}
        # Getting the type of 'self' (line 1280)
        self_165394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 8), 'self', False)
        # Obtaining the member 'linev' of a type (line 1280)
        linev_165395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 8), self_165394, 'linev')
        # Obtaining the member 'set_xdata' of a type (line 1280)
        set_xdata_165396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 8), linev_165395, 'set_xdata')
        # Calling set_xdata(args, kwargs) (line 1280)
        set_xdata_call_result_165403 = invoke(stypy.reporting.localization.Localization(__file__, 1280, 8), set_xdata_165396, *[tuple_165397], **kwargs_165402)
        
        
        # Call to set_ydata(...): (line 1282)
        # Processing the call arguments (line 1282)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1282)
        tuple_165407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1282, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1282)
        # Adding element type (line 1282)
        # Getting the type of 'event' (line 1282)
        event_165408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 30), 'event', False)
        # Obtaining the member 'ydata' of a type (line 1282)
        ydata_165409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1282, 30), event_165408, 'ydata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1282, 30), tuple_165407, ydata_165409)
        # Adding element type (line 1282)
        # Getting the type of 'event' (line 1282)
        event_165410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 43), 'event', False)
        # Obtaining the member 'ydata' of a type (line 1282)
        ydata_165411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1282, 43), event_165410, 'ydata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1282, 30), tuple_165407, ydata_165411)
        
        # Processing the call keyword arguments (line 1282)
        kwargs_165412 = {}
        # Getting the type of 'self' (line 1282)
        self_165404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 8), 'self', False)
        # Obtaining the member 'lineh' of a type (line 1282)
        lineh_165405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1282, 8), self_165404, 'lineh')
        # Obtaining the member 'set_ydata' of a type (line 1282)
        set_ydata_165406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1282, 8), lineh_165405, 'set_ydata')
        # Calling set_ydata(args, kwargs) (line 1282)
        set_ydata_call_result_165413 = invoke(stypy.reporting.localization.Localization(__file__, 1282, 8), set_ydata_165406, *[tuple_165407], **kwargs_165412)
        
        
        # Call to set_visible(...): (line 1283)
        # Processing the call arguments (line 1283)
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 1283)
        self_165417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 31), 'self', False)
        # Obtaining the member 'visible' of a type (line 1283)
        visible_165418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1283, 31), self_165417, 'visible')
        # Getting the type of 'self' (line 1283)
        self_165419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 48), 'self', False)
        # Obtaining the member 'vertOn' of a type (line 1283)
        vertOn_165420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1283, 48), self_165419, 'vertOn')
        # Applying the binary operator 'and' (line 1283)
        result_and_keyword_165421 = python_operator(stypy.reporting.localization.Localization(__file__, 1283, 31), 'and', visible_165418, vertOn_165420)
        
        # Processing the call keyword arguments (line 1283)
        kwargs_165422 = {}
        # Getting the type of 'self' (line 1283)
        self_165414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 8), 'self', False)
        # Obtaining the member 'linev' of a type (line 1283)
        linev_165415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1283, 8), self_165414, 'linev')
        # Obtaining the member 'set_visible' of a type (line 1283)
        set_visible_165416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1283, 8), linev_165415, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1283)
        set_visible_call_result_165423 = invoke(stypy.reporting.localization.Localization(__file__, 1283, 8), set_visible_165416, *[result_and_keyword_165421], **kwargs_165422)
        
        
        # Call to set_visible(...): (line 1284)
        # Processing the call arguments (line 1284)
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 1284)
        self_165427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 31), 'self', False)
        # Obtaining the member 'visible' of a type (line 1284)
        visible_165428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 31), self_165427, 'visible')
        # Getting the type of 'self' (line 1284)
        self_165429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 48), 'self', False)
        # Obtaining the member 'horizOn' of a type (line 1284)
        horizOn_165430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 48), self_165429, 'horizOn')
        # Applying the binary operator 'and' (line 1284)
        result_and_keyword_165431 = python_operator(stypy.reporting.localization.Localization(__file__, 1284, 31), 'and', visible_165428, horizOn_165430)
        
        # Processing the call keyword arguments (line 1284)
        kwargs_165432 = {}
        # Getting the type of 'self' (line 1284)
        self_165424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 8), 'self', False)
        # Obtaining the member 'lineh' of a type (line 1284)
        lineh_165425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 8), self_165424, 'lineh')
        # Obtaining the member 'set_visible' of a type (line 1284)
        set_visible_165426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 8), lineh_165425, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1284)
        set_visible_call_result_165433 = invoke(stypy.reporting.localization.Localization(__file__, 1284, 8), set_visible_165426, *[result_and_keyword_165431], **kwargs_165432)
        
        
        # Call to _update(...): (line 1286)
        # Processing the call keyword arguments (line 1286)
        kwargs_165436 = {}
        # Getting the type of 'self' (line 1286)
        self_165434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 8), 'self', False)
        # Obtaining the member '_update' of a type (line 1286)
        _update_165435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1286, 8), self_165434, '_update')
        # Calling _update(args, kwargs) (line 1286)
        _update_call_result_165437 = invoke(stypy.reporting.localization.Localization(__file__, 1286, 8), _update_165435, *[], **kwargs_165436)
        
        
        # ################# End of 'onmove(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'onmove' in the type store
        # Getting the type of 'stypy_return_type' (line 1263)
        stypy_return_type_165438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_165438)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'onmove'
        return stypy_return_type_165438


    @norecursion
    def _update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update'
        module_type_store = module_type_store.open_function_context('_update', 1288, 4, False)
        # Assigning a type to the variable 'self' (line 1289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1289, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Cursor._update.__dict__.__setitem__('stypy_localization', localization)
        Cursor._update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Cursor._update.__dict__.__setitem__('stypy_type_store', module_type_store)
        Cursor._update.__dict__.__setitem__('stypy_function_name', 'Cursor._update')
        Cursor._update.__dict__.__setitem__('stypy_param_names_list', [])
        Cursor._update.__dict__.__setitem__('stypy_varargs_param_name', None)
        Cursor._update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Cursor._update.__dict__.__setitem__('stypy_call_defaults', defaults)
        Cursor._update.__dict__.__setitem__('stypy_call_varargs', varargs)
        Cursor._update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Cursor._update.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Cursor._update', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update(...)' code ##################

        
        # Getting the type of 'self' (line 1290)
        self_165439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 11), 'self')
        # Obtaining the member 'useblit' of a type (line 1290)
        useblit_165440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1290, 11), self_165439, 'useblit')
        # Testing the type of an if condition (line 1290)
        if_condition_165441 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1290, 8), useblit_165440)
        # Assigning a type to the variable 'if_condition_165441' (line 1290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 8), 'if_condition_165441', if_condition_165441)
        # SSA begins for if statement (line 1290)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 1291)
        self_165442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 15), 'self')
        # Obtaining the member 'background' of a type (line 1291)
        background_165443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 15), self_165442, 'background')
        # Getting the type of 'None' (line 1291)
        None_165444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 38), 'None')
        # Applying the binary operator 'isnot' (line 1291)
        result_is_not_165445 = python_operator(stypy.reporting.localization.Localization(__file__, 1291, 15), 'isnot', background_165443, None_165444)
        
        # Testing the type of an if condition (line 1291)
        if_condition_165446 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1291, 12), result_is_not_165445)
        # Assigning a type to the variable 'if_condition_165446' (line 1291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1291, 12), 'if_condition_165446', if_condition_165446)
        # SSA begins for if statement (line 1291)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to restore_region(...): (line 1292)
        # Processing the call arguments (line 1292)
        # Getting the type of 'self' (line 1292)
        self_165450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 43), 'self', False)
        # Obtaining the member 'background' of a type (line 1292)
        background_165451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1292, 43), self_165450, 'background')
        # Processing the call keyword arguments (line 1292)
        kwargs_165452 = {}
        # Getting the type of 'self' (line 1292)
        self_165447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 16), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1292)
        canvas_165448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1292, 16), self_165447, 'canvas')
        # Obtaining the member 'restore_region' of a type (line 1292)
        restore_region_165449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1292, 16), canvas_165448, 'restore_region')
        # Calling restore_region(args, kwargs) (line 1292)
        restore_region_call_result_165453 = invoke(stypy.reporting.localization.Localization(__file__, 1292, 16), restore_region_165449, *[background_165451], **kwargs_165452)
        
        # SSA join for if statement (line 1291)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw_artist(...): (line 1293)
        # Processing the call arguments (line 1293)
        # Getting the type of 'self' (line 1293)
        self_165457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 32), 'self', False)
        # Obtaining the member 'linev' of a type (line 1293)
        linev_165458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 32), self_165457, 'linev')
        # Processing the call keyword arguments (line 1293)
        kwargs_165459 = {}
        # Getting the type of 'self' (line 1293)
        self_165454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 1293)
        ax_165455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 12), self_165454, 'ax')
        # Obtaining the member 'draw_artist' of a type (line 1293)
        draw_artist_165456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 12), ax_165455, 'draw_artist')
        # Calling draw_artist(args, kwargs) (line 1293)
        draw_artist_call_result_165460 = invoke(stypy.reporting.localization.Localization(__file__, 1293, 12), draw_artist_165456, *[linev_165458], **kwargs_165459)
        
        
        # Call to draw_artist(...): (line 1294)
        # Processing the call arguments (line 1294)
        # Getting the type of 'self' (line 1294)
        self_165464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 32), 'self', False)
        # Obtaining the member 'lineh' of a type (line 1294)
        lineh_165465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 32), self_165464, 'lineh')
        # Processing the call keyword arguments (line 1294)
        kwargs_165466 = {}
        # Getting the type of 'self' (line 1294)
        self_165461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 1294)
        ax_165462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 12), self_165461, 'ax')
        # Obtaining the member 'draw_artist' of a type (line 1294)
        draw_artist_165463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 12), ax_165462, 'draw_artist')
        # Calling draw_artist(args, kwargs) (line 1294)
        draw_artist_call_result_165467 = invoke(stypy.reporting.localization.Localization(__file__, 1294, 12), draw_artist_165463, *[lineh_165465], **kwargs_165466)
        
        
        # Call to blit(...): (line 1295)
        # Processing the call arguments (line 1295)
        # Getting the type of 'self' (line 1295)
        self_165471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 29), 'self', False)
        # Obtaining the member 'ax' of a type (line 1295)
        ax_165472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 29), self_165471, 'ax')
        # Obtaining the member 'bbox' of a type (line 1295)
        bbox_165473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 29), ax_165472, 'bbox')
        # Processing the call keyword arguments (line 1295)
        kwargs_165474 = {}
        # Getting the type of 'self' (line 1295)
        self_165468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1295)
        canvas_165469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 12), self_165468, 'canvas')
        # Obtaining the member 'blit' of a type (line 1295)
        blit_165470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 12), canvas_165469, 'blit')
        # Calling blit(args, kwargs) (line 1295)
        blit_call_result_165475 = invoke(stypy.reporting.localization.Localization(__file__, 1295, 12), blit_165470, *[bbox_165473], **kwargs_165474)
        
        # SSA branch for the else part of an if statement (line 1290)
        module_type_store.open_ssa_branch('else')
        
        # Call to draw_idle(...): (line 1298)
        # Processing the call keyword arguments (line 1298)
        kwargs_165479 = {}
        # Getting the type of 'self' (line 1298)
        self_165476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1298)
        canvas_165477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 12), self_165476, 'canvas')
        # Obtaining the member 'draw_idle' of a type (line 1298)
        draw_idle_165478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 12), canvas_165477, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 1298)
        draw_idle_call_result_165480 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 12), draw_idle_165478, *[], **kwargs_165479)
        
        # SSA join for if statement (line 1290)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'False' (line 1300)
        False_165481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 1300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1300, 8), 'stypy_return_type', False_165481)
        
        # ################# End of '_update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update' in the type store
        # Getting the type of 'stypy_return_type' (line 1288)
        stypy_return_type_165482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_165482)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update'
        return stypy_return_type_165482


# Assigning a type to the variable 'Cursor' (line 1211)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1211, 0), 'Cursor', Cursor)
# Declaration of the 'MultiCursor' class
# Getting the type of 'Widget' (line 1303)
Widget_165483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 18), 'Widget')

class MultiCursor(Widget_165483, ):
    unicode_165484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1331, (-1)), 'unicode', u"\n    Provide a vertical (default) and/or horizontal line cursor shared between\n    multiple axes.\n\n    For the cursor to remain responsive you must keep a reference to\n    it.\n\n    Example usage::\n\n        from matplotlib.widgets import MultiCursor\n        from pylab import figure, show, np\n\n        t = np.arange(0.0, 2.0, 0.01)\n        s1 = np.sin(2*np.pi*t)\n        s2 = np.sin(4*np.pi*t)\n        fig = figure()\n        ax1 = fig.add_subplot(211)\n        ax1.plot(t, s1)\n\n\n        ax2 = fig.add_subplot(212, sharex=ax1)\n        ax2.plot(t, s2)\n\n        multi = MultiCursor(fig.canvas, (ax1, ax2), color='r', lw=1,\n                            horizOn=False, vertOn=True)\n        show()\n\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 1332)
        True_165485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 45), 'True')
        # Getting the type of 'False' (line 1332)
        False_165486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 59), 'False')
        # Getting the type of 'True' (line 1332)
        True_165487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 73), 'True')
        defaults = [True_165485, False_165486, True_165487]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1332, 4, False)
        # Assigning a type to the variable 'self' (line 1333)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1333, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MultiCursor.__init__', ['canvas', 'axes', 'useblit', 'horizOn', 'vertOn'], None, 'lineprops', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['canvas', 'axes', 'useblit', 'horizOn', 'vertOn'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1335):
        
        # Assigning a Name to a Attribute (line 1335):
        # Getting the type of 'canvas' (line 1335)
        canvas_165488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 22), 'canvas')
        # Getting the type of 'self' (line 1335)
        self_165489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 8), 'self')
        # Setting the type of the member 'canvas' of a type (line 1335)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1335, 8), self_165489, 'canvas', canvas_165488)
        
        # Assigning a Name to a Attribute (line 1336):
        
        # Assigning a Name to a Attribute (line 1336):
        # Getting the type of 'axes' (line 1336)
        axes_165490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 20), 'axes')
        # Getting the type of 'self' (line 1336)
        self_165491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 8), 'self')
        # Setting the type of the member 'axes' of a type (line 1336)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1336, 8), self_165491, 'axes', axes_165490)
        
        # Assigning a Name to a Attribute (line 1337):
        
        # Assigning a Name to a Attribute (line 1337):
        # Getting the type of 'horizOn' (line 1337)
        horizOn_165492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 23), 'horizOn')
        # Getting the type of 'self' (line 1337)
        self_165493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 8), 'self')
        # Setting the type of the member 'horizOn' of a type (line 1337)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1337, 8), self_165493, 'horizOn', horizOn_165492)
        
        # Assigning a Name to a Attribute (line 1338):
        
        # Assigning a Name to a Attribute (line 1338):
        # Getting the type of 'vertOn' (line 1338)
        vertOn_165494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 22), 'vertOn')
        # Getting the type of 'self' (line 1338)
        self_165495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 8), 'self')
        # Setting the type of the member 'vertOn' of a type (line 1338)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1338, 8), self_165495, 'vertOn', vertOn_165494)
        
        # Assigning a Call to a Tuple (line 1340):
        
        # Assigning a Call to a Name:
        
        # Call to get_xlim(...): (line 1340)
        # Processing the call keyword arguments (line 1340)
        kwargs_165501 = {}
        
        # Obtaining the type of the subscript
        int_165496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1340, 26), 'int')
        # Getting the type of 'axes' (line 1340)
        axes_165497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 21), 'axes', False)
        # Obtaining the member '__getitem__' of a type (line 1340)
        getitem___165498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 21), axes_165497, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1340)
        subscript_call_result_165499 = invoke(stypy.reporting.localization.Localization(__file__, 1340, 21), getitem___165498, int_165496)
        
        # Obtaining the member 'get_xlim' of a type (line 1340)
        get_xlim_165500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 21), subscript_call_result_165499, 'get_xlim')
        # Calling get_xlim(args, kwargs) (line 1340)
        get_xlim_call_result_165502 = invoke(stypy.reporting.localization.Localization(__file__, 1340, 21), get_xlim_165500, *[], **kwargs_165501)
        
        # Assigning a type to the variable 'call_assignment_162275' (line 1340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 8), 'call_assignment_162275', get_xlim_call_result_165502)
        
        # Assigning a Call to a Name (line 1340):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_165505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1340, 8), 'int')
        # Processing the call keyword arguments
        kwargs_165506 = {}
        # Getting the type of 'call_assignment_162275' (line 1340)
        call_assignment_162275_165503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 8), 'call_assignment_162275', False)
        # Obtaining the member '__getitem__' of a type (line 1340)
        getitem___165504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 8), call_assignment_162275_165503, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_165507 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___165504, *[int_165505], **kwargs_165506)
        
        # Assigning a type to the variable 'call_assignment_162276' (line 1340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 8), 'call_assignment_162276', getitem___call_result_165507)
        
        # Assigning a Name to a Name (line 1340):
        # Getting the type of 'call_assignment_162276' (line 1340)
        call_assignment_162276_165508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 8), 'call_assignment_162276')
        # Assigning a type to the variable 'xmin' (line 1340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 8), 'xmin', call_assignment_162276_165508)
        
        # Assigning a Call to a Name (line 1340):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_165511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1340, 8), 'int')
        # Processing the call keyword arguments
        kwargs_165512 = {}
        # Getting the type of 'call_assignment_162275' (line 1340)
        call_assignment_162275_165509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 8), 'call_assignment_162275', False)
        # Obtaining the member '__getitem__' of a type (line 1340)
        getitem___165510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 8), call_assignment_162275_165509, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_165513 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___165510, *[int_165511], **kwargs_165512)
        
        # Assigning a type to the variable 'call_assignment_162277' (line 1340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 8), 'call_assignment_162277', getitem___call_result_165513)
        
        # Assigning a Name to a Name (line 1340):
        # Getting the type of 'call_assignment_162277' (line 1340)
        call_assignment_162277_165514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 8), 'call_assignment_162277')
        # Assigning a type to the variable 'xmax' (line 1340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 14), 'xmax', call_assignment_162277_165514)
        
        # Assigning a Call to a Tuple (line 1341):
        
        # Assigning a Call to a Name:
        
        # Call to get_ylim(...): (line 1341)
        # Processing the call keyword arguments (line 1341)
        kwargs_165520 = {}
        
        # Obtaining the type of the subscript
        int_165515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1341, 26), 'int')
        # Getting the type of 'axes' (line 1341)
        axes_165516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 21), 'axes', False)
        # Obtaining the member '__getitem__' of a type (line 1341)
        getitem___165517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1341, 21), axes_165516, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1341)
        subscript_call_result_165518 = invoke(stypy.reporting.localization.Localization(__file__, 1341, 21), getitem___165517, int_165515)
        
        # Obtaining the member 'get_ylim' of a type (line 1341)
        get_ylim_165519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1341, 21), subscript_call_result_165518, 'get_ylim')
        # Calling get_ylim(args, kwargs) (line 1341)
        get_ylim_call_result_165521 = invoke(stypy.reporting.localization.Localization(__file__, 1341, 21), get_ylim_165519, *[], **kwargs_165520)
        
        # Assigning a type to the variable 'call_assignment_162278' (line 1341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 8), 'call_assignment_162278', get_ylim_call_result_165521)
        
        # Assigning a Call to a Name (line 1341):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_165524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1341, 8), 'int')
        # Processing the call keyword arguments
        kwargs_165525 = {}
        # Getting the type of 'call_assignment_162278' (line 1341)
        call_assignment_162278_165522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 8), 'call_assignment_162278', False)
        # Obtaining the member '__getitem__' of a type (line 1341)
        getitem___165523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1341, 8), call_assignment_162278_165522, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_165526 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___165523, *[int_165524], **kwargs_165525)
        
        # Assigning a type to the variable 'call_assignment_162279' (line 1341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 8), 'call_assignment_162279', getitem___call_result_165526)
        
        # Assigning a Name to a Name (line 1341):
        # Getting the type of 'call_assignment_162279' (line 1341)
        call_assignment_162279_165527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 8), 'call_assignment_162279')
        # Assigning a type to the variable 'ymin' (line 1341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 8), 'ymin', call_assignment_162279_165527)
        
        # Assigning a Call to a Name (line 1341):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_165530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1341, 8), 'int')
        # Processing the call keyword arguments
        kwargs_165531 = {}
        # Getting the type of 'call_assignment_162278' (line 1341)
        call_assignment_162278_165528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 8), 'call_assignment_162278', False)
        # Obtaining the member '__getitem__' of a type (line 1341)
        getitem___165529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1341, 8), call_assignment_162278_165528, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_165532 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___165529, *[int_165530], **kwargs_165531)
        
        # Assigning a type to the variable 'call_assignment_162280' (line 1341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 8), 'call_assignment_162280', getitem___call_result_165532)
        
        # Assigning a Name to a Name (line 1341):
        # Getting the type of 'call_assignment_162280' (line 1341)
        call_assignment_162280_165533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 8), 'call_assignment_162280')
        # Assigning a type to the variable 'ymax' (line 1341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 14), 'ymax', call_assignment_162280_165533)
        
        # Assigning a BinOp to a Name (line 1342):
        
        # Assigning a BinOp to a Name (line 1342):
        float_165534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1342, 15), 'float')
        # Getting the type of 'xmin' (line 1342)
        xmin_165535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 22), 'xmin')
        # Getting the type of 'xmax' (line 1342)
        xmax_165536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 29), 'xmax')
        # Applying the binary operator '+' (line 1342)
        result_add_165537 = python_operator(stypy.reporting.localization.Localization(__file__, 1342, 22), '+', xmin_165535, xmax_165536)
        
        # Applying the binary operator '*' (line 1342)
        result_mul_165538 = python_operator(stypy.reporting.localization.Localization(__file__, 1342, 15), '*', float_165534, result_add_165537)
        
        # Assigning a type to the variable 'xmid' (line 1342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1342, 8), 'xmid', result_mul_165538)
        
        # Assigning a BinOp to a Name (line 1343):
        
        # Assigning a BinOp to a Name (line 1343):
        float_165539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1343, 15), 'float')
        # Getting the type of 'ymin' (line 1343)
        ymin_165540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 22), 'ymin')
        # Getting the type of 'ymax' (line 1343)
        ymax_165541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 29), 'ymax')
        # Applying the binary operator '+' (line 1343)
        result_add_165542 = python_operator(stypy.reporting.localization.Localization(__file__, 1343, 22), '+', ymin_165540, ymax_165541)
        
        # Applying the binary operator '*' (line 1343)
        result_mul_165543 = python_operator(stypy.reporting.localization.Localization(__file__, 1343, 15), '*', float_165539, result_add_165542)
        
        # Assigning a type to the variable 'ymid' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'ymid', result_mul_165543)
        
        # Assigning a Name to a Attribute (line 1345):
        
        # Assigning a Name to a Attribute (line 1345):
        # Getting the type of 'True' (line 1345)
        True_165544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 23), 'True')
        # Getting the type of 'self' (line 1345)
        self_165545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 8), 'self')
        # Setting the type of the member 'visible' of a type (line 1345)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1345, 8), self_165545, 'visible', True_165544)
        
        # Assigning a BoolOp to a Attribute (line 1346):
        
        # Assigning a BoolOp to a Attribute (line 1346):
        
        # Evaluating a boolean operation
        # Getting the type of 'useblit' (line 1346)
        useblit_165546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 23), 'useblit')
        # Getting the type of 'self' (line 1346)
        self_165547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 35), 'self')
        # Obtaining the member 'canvas' of a type (line 1346)
        canvas_165548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1346, 35), self_165547, 'canvas')
        # Obtaining the member 'supports_blit' of a type (line 1346)
        supports_blit_165549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1346, 35), canvas_165548, 'supports_blit')
        # Applying the binary operator 'and' (line 1346)
        result_and_keyword_165550 = python_operator(stypy.reporting.localization.Localization(__file__, 1346, 23), 'and', useblit_165546, supports_blit_165549)
        
        # Getting the type of 'self' (line 1346)
        self_165551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 8), 'self')
        # Setting the type of the member 'useblit' of a type (line 1346)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1346, 8), self_165551, 'useblit', result_and_keyword_165550)
        
        # Assigning a Name to a Attribute (line 1347):
        
        # Assigning a Name to a Attribute (line 1347):
        # Getting the type of 'None' (line 1347)
        None_165552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 26), 'None')
        # Getting the type of 'self' (line 1347)
        self_165553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 8), 'self')
        # Setting the type of the member 'background' of a type (line 1347)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1347, 8), self_165553, 'background', None_165552)
        
        # Assigning a Name to a Attribute (line 1348):
        
        # Assigning a Name to a Attribute (line 1348):
        # Getting the type of 'False' (line 1348)
        False_165554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 25), 'False')
        # Getting the type of 'self' (line 1348)
        self_165555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 8), 'self')
        # Setting the type of the member 'needclear' of a type (line 1348)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1348, 8), self_165555, 'needclear', False_165554)
        
        # Getting the type of 'self' (line 1350)
        self_165556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 11), 'self')
        # Obtaining the member 'useblit' of a type (line 1350)
        useblit_165557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1350, 11), self_165556, 'useblit')
        # Testing the type of an if condition (line 1350)
        if_condition_165558 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1350, 8), useblit_165557)
        # Assigning a type to the variable 'if_condition_165558' (line 1350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1350, 8), 'if_condition_165558', if_condition_165558)
        # SSA begins for if statement (line 1350)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 1351):
        
        # Assigning a Name to a Subscript (line 1351):
        # Getting the type of 'True' (line 1351)
        True_165559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 36), 'True')
        # Getting the type of 'lineprops' (line 1351)
        lineprops_165560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 12), 'lineprops')
        unicode_165561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1351, 22), 'unicode', u'animated')
        # Storing an element on a container (line 1351)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1351, 12), lineprops_165560, (unicode_165561, True_165559))
        # SSA join for if statement (line 1350)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'vertOn' (line 1353)
        vertOn_165562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 11), 'vertOn')
        # Testing the type of an if condition (line 1353)
        if_condition_165563 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1353, 8), vertOn_165562)
        # Assigning a type to the variable 'if_condition_165563' (line 1353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1353, 8), 'if_condition_165563', if_condition_165563)
        # SSA begins for if statement (line 1353)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a ListComp to a Attribute (line 1354):
        
        # Assigning a ListComp to a Attribute (line 1354):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'axes' (line 1355)
        axes_165572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 37), 'axes')
        comprehension_165573 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1354, 27), axes_165572)
        # Assigning a type to the variable 'ax' (line 1354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1354, 27), 'ax', comprehension_165573)
        
        # Call to axvline(...): (line 1354)
        # Processing the call arguments (line 1354)
        # Getting the type of 'xmid' (line 1354)
        xmid_165566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 38), 'xmid', False)
        # Processing the call keyword arguments (line 1354)
        # Getting the type of 'False' (line 1354)
        False_165567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 52), 'False', False)
        keyword_165568 = False_165567
        # Getting the type of 'lineprops' (line 1354)
        lineprops_165569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 61), 'lineprops', False)
        kwargs_165570 = {'visible': keyword_165568, 'lineprops_165569': lineprops_165569}
        # Getting the type of 'ax' (line 1354)
        ax_165564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 27), 'ax', False)
        # Obtaining the member 'axvline' of a type (line 1354)
        axvline_165565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1354, 27), ax_165564, 'axvline')
        # Calling axvline(args, kwargs) (line 1354)
        axvline_call_result_165571 = invoke(stypy.reporting.localization.Localization(__file__, 1354, 27), axvline_165565, *[xmid_165566], **kwargs_165570)
        
        list_165574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1354, 27), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1354, 27), list_165574, axvline_call_result_165571)
        # Getting the type of 'self' (line 1354)
        self_165575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 12), 'self')
        # Setting the type of the member 'vlines' of a type (line 1354)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1354, 12), self_165575, 'vlines', list_165574)
        # SSA branch for the else part of an if statement (line 1353)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a List to a Attribute (line 1357):
        
        # Assigning a List to a Attribute (line 1357):
        
        # Obtaining an instance of the builtin type 'list' (line 1357)
        list_165576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1357, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1357)
        
        # Getting the type of 'self' (line 1357)
        self_165577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 12), 'self')
        # Setting the type of the member 'vlines' of a type (line 1357)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1357, 12), self_165577, 'vlines', list_165576)
        # SSA join for if statement (line 1353)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'horizOn' (line 1359)
        horizOn_165578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 11), 'horizOn')
        # Testing the type of an if condition (line 1359)
        if_condition_165579 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1359, 8), horizOn_165578)
        # Assigning a type to the variable 'if_condition_165579' (line 1359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1359, 8), 'if_condition_165579', if_condition_165579)
        # SSA begins for if statement (line 1359)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a ListComp to a Attribute (line 1360):
        
        # Assigning a ListComp to a Attribute (line 1360):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'axes' (line 1361)
        axes_165588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 37), 'axes')
        comprehension_165589 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1360, 27), axes_165588)
        # Assigning a type to the variable 'ax' (line 1360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1360, 27), 'ax', comprehension_165589)
        
        # Call to axhline(...): (line 1360)
        # Processing the call arguments (line 1360)
        # Getting the type of 'ymid' (line 1360)
        ymid_165582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 38), 'ymid', False)
        # Processing the call keyword arguments (line 1360)
        # Getting the type of 'False' (line 1360)
        False_165583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 52), 'False', False)
        keyword_165584 = False_165583
        # Getting the type of 'lineprops' (line 1360)
        lineprops_165585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 61), 'lineprops', False)
        kwargs_165586 = {'visible': keyword_165584, 'lineprops_165585': lineprops_165585}
        # Getting the type of 'ax' (line 1360)
        ax_165580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 27), 'ax', False)
        # Obtaining the member 'axhline' of a type (line 1360)
        axhline_165581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1360, 27), ax_165580, 'axhline')
        # Calling axhline(args, kwargs) (line 1360)
        axhline_call_result_165587 = invoke(stypy.reporting.localization.Localization(__file__, 1360, 27), axhline_165581, *[ymid_165582], **kwargs_165586)
        
        list_165590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1360, 27), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1360, 27), list_165590, axhline_call_result_165587)
        # Getting the type of 'self' (line 1360)
        self_165591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 12), 'self')
        # Setting the type of the member 'hlines' of a type (line 1360)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1360, 12), self_165591, 'hlines', list_165590)
        # SSA branch for the else part of an if statement (line 1359)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a List to a Attribute (line 1363):
        
        # Assigning a List to a Attribute (line 1363):
        
        # Obtaining an instance of the builtin type 'list' (line 1363)
        list_165592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1363, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1363)
        
        # Getting the type of 'self' (line 1363)
        self_165593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 12), 'self')
        # Setting the type of the member 'hlines' of a type (line 1363)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1363, 12), self_165593, 'hlines', list_165592)
        # SSA join for if statement (line 1359)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to connect(...): (line 1365)
        # Processing the call keyword arguments (line 1365)
        kwargs_165596 = {}
        # Getting the type of 'self' (line 1365)
        self_165594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 8), 'self', False)
        # Obtaining the member 'connect' of a type (line 1365)
        connect_165595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1365, 8), self_165594, 'connect')
        # Calling connect(args, kwargs) (line 1365)
        connect_call_result_165597 = invoke(stypy.reporting.localization.Localization(__file__, 1365, 8), connect_165595, *[], **kwargs_165596)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def connect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'connect'
        module_type_store = module_type_store.open_function_context('connect', 1367, 4, False)
        # Assigning a type to the variable 'self' (line 1368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1368, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MultiCursor.connect.__dict__.__setitem__('stypy_localization', localization)
        MultiCursor.connect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MultiCursor.connect.__dict__.__setitem__('stypy_type_store', module_type_store)
        MultiCursor.connect.__dict__.__setitem__('stypy_function_name', 'MultiCursor.connect')
        MultiCursor.connect.__dict__.__setitem__('stypy_param_names_list', [])
        MultiCursor.connect.__dict__.__setitem__('stypy_varargs_param_name', None)
        MultiCursor.connect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MultiCursor.connect.__dict__.__setitem__('stypy_call_defaults', defaults)
        MultiCursor.connect.__dict__.__setitem__('stypy_call_varargs', varargs)
        MultiCursor.connect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MultiCursor.connect.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MultiCursor.connect', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'connect', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'connect(...)' code ##################

        unicode_165598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1368, 8), 'unicode', u'connect events')
        
        # Assigning a Call to a Attribute (line 1369):
        
        # Assigning a Call to a Attribute (line 1369):
        
        # Call to mpl_connect(...): (line 1369)
        # Processing the call arguments (line 1369)
        unicode_165602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1369, 50), 'unicode', u'motion_notify_event')
        # Getting the type of 'self' (line 1370)
        self_165603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 50), 'self', False)
        # Obtaining the member 'onmove' of a type (line 1370)
        onmove_165604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1370, 50), self_165603, 'onmove')
        # Processing the call keyword arguments (line 1369)
        kwargs_165605 = {}
        # Getting the type of 'self' (line 1369)
        self_165599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 26), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1369)
        canvas_165600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1369, 26), self_165599, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 1369)
        mpl_connect_165601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1369, 26), canvas_165600, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 1369)
        mpl_connect_call_result_165606 = invoke(stypy.reporting.localization.Localization(__file__, 1369, 26), mpl_connect_165601, *[unicode_165602, onmove_165604], **kwargs_165605)
        
        # Getting the type of 'self' (line 1369)
        self_165607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 8), 'self')
        # Setting the type of the member '_cidmotion' of a type (line 1369)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1369, 8), self_165607, '_cidmotion', mpl_connect_call_result_165606)
        
        # Assigning a Call to a Attribute (line 1371):
        
        # Assigning a Call to a Attribute (line 1371):
        
        # Call to mpl_connect(...): (line 1371)
        # Processing the call arguments (line 1371)
        unicode_165611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 48), 'unicode', u'draw_event')
        # Getting the type of 'self' (line 1371)
        self_165612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 62), 'self', False)
        # Obtaining the member 'clear' of a type (line 1371)
        clear_165613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 62), self_165612, 'clear')
        # Processing the call keyword arguments (line 1371)
        kwargs_165614 = {}
        # Getting the type of 'self' (line 1371)
        self_165608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 24), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1371)
        canvas_165609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 24), self_165608, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 1371)
        mpl_connect_165610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 24), canvas_165609, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 1371)
        mpl_connect_call_result_165615 = invoke(stypy.reporting.localization.Localization(__file__, 1371, 24), mpl_connect_165610, *[unicode_165611, clear_165613], **kwargs_165614)
        
        # Getting the type of 'self' (line 1371)
        self_165616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 8), 'self')
        # Setting the type of the member '_ciddraw' of a type (line 1371)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 8), self_165616, '_ciddraw', mpl_connect_call_result_165615)
        
        # ################# End of 'connect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'connect' in the type store
        # Getting the type of 'stypy_return_type' (line 1367)
        stypy_return_type_165617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_165617)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'connect'
        return stypy_return_type_165617


    @norecursion
    def disconnect(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'disconnect'
        module_type_store = module_type_store.open_function_context('disconnect', 1373, 4, False)
        # Assigning a type to the variable 'self' (line 1374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1374, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MultiCursor.disconnect.__dict__.__setitem__('stypy_localization', localization)
        MultiCursor.disconnect.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MultiCursor.disconnect.__dict__.__setitem__('stypy_type_store', module_type_store)
        MultiCursor.disconnect.__dict__.__setitem__('stypy_function_name', 'MultiCursor.disconnect')
        MultiCursor.disconnect.__dict__.__setitem__('stypy_param_names_list', [])
        MultiCursor.disconnect.__dict__.__setitem__('stypy_varargs_param_name', None)
        MultiCursor.disconnect.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MultiCursor.disconnect.__dict__.__setitem__('stypy_call_defaults', defaults)
        MultiCursor.disconnect.__dict__.__setitem__('stypy_call_varargs', varargs)
        MultiCursor.disconnect.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MultiCursor.disconnect.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MultiCursor.disconnect', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'disconnect', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'disconnect(...)' code ##################

        unicode_165618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1374, 8), 'unicode', u'disconnect events')
        
        # Call to mpl_disconnect(...): (line 1375)
        # Processing the call arguments (line 1375)
        # Getting the type of 'self' (line 1375)
        self_165622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 35), 'self', False)
        # Obtaining the member '_cidmotion' of a type (line 1375)
        _cidmotion_165623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 35), self_165622, '_cidmotion')
        # Processing the call keyword arguments (line 1375)
        kwargs_165624 = {}
        # Getting the type of 'self' (line 1375)
        self_165619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1375)
        canvas_165620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 8), self_165619, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 1375)
        mpl_disconnect_165621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 8), canvas_165620, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 1375)
        mpl_disconnect_call_result_165625 = invoke(stypy.reporting.localization.Localization(__file__, 1375, 8), mpl_disconnect_165621, *[_cidmotion_165623], **kwargs_165624)
        
        
        # Call to mpl_disconnect(...): (line 1376)
        # Processing the call arguments (line 1376)
        # Getting the type of 'self' (line 1376)
        self_165629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 35), 'self', False)
        # Obtaining the member '_ciddraw' of a type (line 1376)
        _ciddraw_165630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 35), self_165629, '_ciddraw')
        # Processing the call keyword arguments (line 1376)
        kwargs_165631 = {}
        # Getting the type of 'self' (line 1376)
        self_165626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1376)
        canvas_165627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 8), self_165626, 'canvas')
        # Obtaining the member 'mpl_disconnect' of a type (line 1376)
        mpl_disconnect_165628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 8), canvas_165627, 'mpl_disconnect')
        # Calling mpl_disconnect(args, kwargs) (line 1376)
        mpl_disconnect_call_result_165632 = invoke(stypy.reporting.localization.Localization(__file__, 1376, 8), mpl_disconnect_165628, *[_ciddraw_165630], **kwargs_165631)
        
        
        # ################# End of 'disconnect(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'disconnect' in the type store
        # Getting the type of 'stypy_return_type' (line 1373)
        stypy_return_type_165633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_165633)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'disconnect'
        return stypy_return_type_165633


    @norecursion
    def clear(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'clear'
        module_type_store = module_type_store.open_function_context('clear', 1378, 4, False)
        # Assigning a type to the variable 'self' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MultiCursor.clear.__dict__.__setitem__('stypy_localization', localization)
        MultiCursor.clear.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MultiCursor.clear.__dict__.__setitem__('stypy_type_store', module_type_store)
        MultiCursor.clear.__dict__.__setitem__('stypy_function_name', 'MultiCursor.clear')
        MultiCursor.clear.__dict__.__setitem__('stypy_param_names_list', ['event'])
        MultiCursor.clear.__dict__.__setitem__('stypy_varargs_param_name', None)
        MultiCursor.clear.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MultiCursor.clear.__dict__.__setitem__('stypy_call_defaults', defaults)
        MultiCursor.clear.__dict__.__setitem__('stypy_call_varargs', varargs)
        MultiCursor.clear.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MultiCursor.clear.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MultiCursor.clear', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'clear', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'clear(...)' code ##################

        unicode_165634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1379, 8), 'unicode', u'clear the cursor')
        
        
        # Call to ignore(...): (line 1380)
        # Processing the call arguments (line 1380)
        # Getting the type of 'event' (line 1380)
        event_165637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 23), 'event', False)
        # Processing the call keyword arguments (line 1380)
        kwargs_165638 = {}
        # Getting the type of 'self' (line 1380)
        self_165635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 11), 'self', False)
        # Obtaining the member 'ignore' of a type (line 1380)
        ignore_165636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1380, 11), self_165635, 'ignore')
        # Calling ignore(args, kwargs) (line 1380)
        ignore_call_result_165639 = invoke(stypy.reporting.localization.Localization(__file__, 1380, 11), ignore_165636, *[event_165637], **kwargs_165638)
        
        # Testing the type of an if condition (line 1380)
        if_condition_165640 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1380, 8), ignore_call_result_165639)
        # Assigning a type to the variable 'if_condition_165640' (line 1380)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1380, 8), 'if_condition_165640', if_condition_165640)
        # SSA begins for if statement (line 1380)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1380)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1382)
        self_165641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 11), 'self')
        # Obtaining the member 'useblit' of a type (line 1382)
        useblit_165642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1382, 11), self_165641, 'useblit')
        # Testing the type of an if condition (line 1382)
        if_condition_165643 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1382, 8), useblit_165642)
        # Assigning a type to the variable 'if_condition_165643' (line 1382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 8), 'if_condition_165643', if_condition_165643)
        # SSA begins for if statement (line 1382)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1383):
        
        # Assigning a Call to a Attribute (line 1383):
        
        # Call to copy_from_bbox(...): (line 1384)
        # Processing the call arguments (line 1384)
        # Getting the type of 'self' (line 1384)
        self_165647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 43), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1384)
        canvas_165648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1384, 43), self_165647, 'canvas')
        # Obtaining the member 'figure' of a type (line 1384)
        figure_165649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1384, 43), canvas_165648, 'figure')
        # Obtaining the member 'bbox' of a type (line 1384)
        bbox_165650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1384, 43), figure_165649, 'bbox')
        # Processing the call keyword arguments (line 1384)
        kwargs_165651 = {}
        # Getting the type of 'self' (line 1384)
        self_165644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 16), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1384)
        canvas_165645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1384, 16), self_165644, 'canvas')
        # Obtaining the member 'copy_from_bbox' of a type (line 1384)
        copy_from_bbox_165646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1384, 16), canvas_165645, 'copy_from_bbox')
        # Calling copy_from_bbox(args, kwargs) (line 1384)
        copy_from_bbox_call_result_165652 = invoke(stypy.reporting.localization.Localization(__file__, 1384, 16), copy_from_bbox_165646, *[bbox_165650], **kwargs_165651)
        
        # Getting the type of 'self' (line 1383)
        self_165653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 12), 'self')
        # Setting the type of the member 'background' of a type (line 1383)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1383, 12), self_165653, 'background', copy_from_bbox_call_result_165652)
        # SSA join for if statement (line 1382)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1385)
        self_165654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 20), 'self')
        # Obtaining the member 'vlines' of a type (line 1385)
        vlines_165655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1385, 20), self_165654, 'vlines')
        # Getting the type of 'self' (line 1385)
        self_165656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 34), 'self')
        # Obtaining the member 'hlines' of a type (line 1385)
        hlines_165657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1385, 34), self_165656, 'hlines')
        # Applying the binary operator '+' (line 1385)
        result_add_165658 = python_operator(stypy.reporting.localization.Localization(__file__, 1385, 20), '+', vlines_165655, hlines_165657)
        
        # Testing the type of a for loop iterable (line 1385)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1385, 8), result_add_165658)
        # Getting the type of the for loop variable (line 1385)
        for_loop_var_165659 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1385, 8), result_add_165658)
        # Assigning a type to the variable 'line' (line 1385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1385, 8), 'line', for_loop_var_165659)
        # SSA begins for a for statement (line 1385)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_visible(...): (line 1386)
        # Processing the call arguments (line 1386)
        # Getting the type of 'False' (line 1386)
        False_165662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 29), 'False', False)
        # Processing the call keyword arguments (line 1386)
        kwargs_165663 = {}
        # Getting the type of 'line' (line 1386)
        line_165660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 12), 'line', False)
        # Obtaining the member 'set_visible' of a type (line 1386)
        set_visible_165661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1386, 12), line_165660, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1386)
        set_visible_call_result_165664 = invoke(stypy.reporting.localization.Localization(__file__, 1386, 12), set_visible_165661, *[False_165662], **kwargs_165663)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'clear(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'clear' in the type store
        # Getting the type of 'stypy_return_type' (line 1378)
        stypy_return_type_165665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_165665)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'clear'
        return stypy_return_type_165665


    @norecursion
    def onmove(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'onmove'
        module_type_store = module_type_store.open_function_context('onmove', 1388, 4, False)
        # Assigning a type to the variable 'self' (line 1389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1389, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MultiCursor.onmove.__dict__.__setitem__('stypy_localization', localization)
        MultiCursor.onmove.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MultiCursor.onmove.__dict__.__setitem__('stypy_type_store', module_type_store)
        MultiCursor.onmove.__dict__.__setitem__('stypy_function_name', 'MultiCursor.onmove')
        MultiCursor.onmove.__dict__.__setitem__('stypy_param_names_list', ['event'])
        MultiCursor.onmove.__dict__.__setitem__('stypy_varargs_param_name', None)
        MultiCursor.onmove.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MultiCursor.onmove.__dict__.__setitem__('stypy_call_defaults', defaults)
        MultiCursor.onmove.__dict__.__setitem__('stypy_call_varargs', varargs)
        MultiCursor.onmove.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MultiCursor.onmove.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MultiCursor.onmove', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'onmove', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'onmove(...)' code ##################

        
        
        # Call to ignore(...): (line 1389)
        # Processing the call arguments (line 1389)
        # Getting the type of 'event' (line 1389)
        event_165668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 23), 'event', False)
        # Processing the call keyword arguments (line 1389)
        kwargs_165669 = {}
        # Getting the type of 'self' (line 1389)
        self_165666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 11), 'self', False)
        # Obtaining the member 'ignore' of a type (line 1389)
        ignore_165667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1389, 11), self_165666, 'ignore')
        # Calling ignore(args, kwargs) (line 1389)
        ignore_call_result_165670 = invoke(stypy.reporting.localization.Localization(__file__, 1389, 11), ignore_165667, *[event_165668], **kwargs_165669)
        
        # Testing the type of an if condition (line 1389)
        if_condition_165671 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1389, 8), ignore_call_result_165670)
        # Assigning a type to the variable 'if_condition_165671' (line 1389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1389, 8), 'if_condition_165671', if_condition_165671)
        # SSA begins for if statement (line 1389)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1390, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1389)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1391)
        # Getting the type of 'event' (line 1391)
        event_165672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 11), 'event')
        # Obtaining the member 'inaxes' of a type (line 1391)
        inaxes_165673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1391, 11), event_165672, 'inaxes')
        # Getting the type of 'None' (line 1391)
        None_165674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 27), 'None')
        
        (may_be_165675, more_types_in_union_165676) = may_be_none(inaxes_165673, None_165674)

        if may_be_165675:

            if more_types_in_union_165676:
                # Runtime conditional SSA (line 1391)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 1392)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_165676:
                # SSA join for if statement (line 1391)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to available(...): (line 1393)
        # Processing the call arguments (line 1393)
        # Getting the type of 'self' (line 1393)
        self_165681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 48), 'self', False)
        # Processing the call keyword arguments (line 1393)
        kwargs_165682 = {}
        # Getting the type of 'self' (line 1393)
        self_165677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 15), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1393)
        canvas_165678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1393, 15), self_165677, 'canvas')
        # Obtaining the member 'widgetlock' of a type (line 1393)
        widgetlock_165679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1393, 15), canvas_165678, 'widgetlock')
        # Obtaining the member 'available' of a type (line 1393)
        available_165680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1393, 15), widgetlock_165679, 'available')
        # Calling available(args, kwargs) (line 1393)
        available_call_result_165683 = invoke(stypy.reporting.localization.Localization(__file__, 1393, 15), available_165680, *[self_165681], **kwargs_165682)
        
        # Applying the 'not' unary operator (line 1393)
        result_not__165684 = python_operator(stypy.reporting.localization.Localization(__file__, 1393, 11), 'not', available_call_result_165683)
        
        # Testing the type of an if condition (line 1393)
        if_condition_165685 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1393, 8), result_not__165684)
        # Assigning a type to the variable 'if_condition_165685' (line 1393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1393, 8), 'if_condition_165685', if_condition_165685)
        # SSA begins for if statement (line 1393)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1394, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1393)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1395):
        
        # Assigning a Name to a Attribute (line 1395):
        # Getting the type of 'True' (line 1395)
        True_165686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 25), 'True')
        # Getting the type of 'self' (line 1395)
        self_165687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 8), 'self')
        # Setting the type of the member 'needclear' of a type (line 1395)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1395, 8), self_165687, 'needclear', True_165686)
        
        
        # Getting the type of 'self' (line 1396)
        self_165688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 15), 'self')
        # Obtaining the member 'visible' of a type (line 1396)
        visible_165689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1396, 15), self_165688, 'visible')
        # Applying the 'not' unary operator (line 1396)
        result_not__165690 = python_operator(stypy.reporting.localization.Localization(__file__, 1396, 11), 'not', visible_165689)
        
        # Testing the type of an if condition (line 1396)
        if_condition_165691 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1396, 8), result_not__165690)
        # Assigning a type to the variable 'if_condition_165691' (line 1396)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1396, 8), 'if_condition_165691', if_condition_165691)
        # SSA begins for if statement (line 1396)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1396)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1398)
        self_165692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 11), 'self')
        # Obtaining the member 'vertOn' of a type (line 1398)
        vertOn_165693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1398, 11), self_165692, 'vertOn')
        # Testing the type of an if condition (line 1398)
        if_condition_165694 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1398, 8), vertOn_165693)
        # Assigning a type to the variable 'if_condition_165694' (line 1398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 8), 'if_condition_165694', if_condition_165694)
        # SSA begins for if statement (line 1398)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 1399)
        self_165695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 24), 'self')
        # Obtaining the member 'vlines' of a type (line 1399)
        vlines_165696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1399, 24), self_165695, 'vlines')
        # Testing the type of a for loop iterable (line 1399)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1399, 12), vlines_165696)
        # Getting the type of the for loop variable (line 1399)
        for_loop_var_165697 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1399, 12), vlines_165696)
        # Assigning a type to the variable 'line' (line 1399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1399, 12), 'line', for_loop_var_165697)
        # SSA begins for a for statement (line 1399)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_xdata(...): (line 1400)
        # Processing the call arguments (line 1400)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1400)
        tuple_165700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1400)
        # Adding element type (line 1400)
        # Getting the type of 'event' (line 1400)
        event_165701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 32), 'event', False)
        # Obtaining the member 'xdata' of a type (line 1400)
        xdata_165702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 32), event_165701, 'xdata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 32), tuple_165700, xdata_165702)
        # Adding element type (line 1400)
        # Getting the type of 'event' (line 1400)
        event_165703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 45), 'event', False)
        # Obtaining the member 'xdata' of a type (line 1400)
        xdata_165704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 45), event_165703, 'xdata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 32), tuple_165700, xdata_165704)
        
        # Processing the call keyword arguments (line 1400)
        kwargs_165705 = {}
        # Getting the type of 'line' (line 1400)
        line_165698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 16), 'line', False)
        # Obtaining the member 'set_xdata' of a type (line 1400)
        set_xdata_165699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 16), line_165698, 'set_xdata')
        # Calling set_xdata(args, kwargs) (line 1400)
        set_xdata_call_result_165706 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 16), set_xdata_165699, *[tuple_165700], **kwargs_165705)
        
        
        # Call to set_visible(...): (line 1401)
        # Processing the call arguments (line 1401)
        # Getting the type of 'self' (line 1401)
        self_165709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 33), 'self', False)
        # Obtaining the member 'visible' of a type (line 1401)
        visible_165710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1401, 33), self_165709, 'visible')
        # Processing the call keyword arguments (line 1401)
        kwargs_165711 = {}
        # Getting the type of 'line' (line 1401)
        line_165707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 16), 'line', False)
        # Obtaining the member 'set_visible' of a type (line 1401)
        set_visible_165708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1401, 16), line_165707, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1401)
        set_visible_call_result_165712 = invoke(stypy.reporting.localization.Localization(__file__, 1401, 16), set_visible_165708, *[visible_165710], **kwargs_165711)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1398)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1402)
        self_165713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 11), 'self')
        # Obtaining the member 'horizOn' of a type (line 1402)
        horizOn_165714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1402, 11), self_165713, 'horizOn')
        # Testing the type of an if condition (line 1402)
        if_condition_165715 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1402, 8), horizOn_165714)
        # Assigning a type to the variable 'if_condition_165715' (line 1402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1402, 8), 'if_condition_165715', if_condition_165715)
        # SSA begins for if statement (line 1402)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 1403)
        self_165716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 24), 'self')
        # Obtaining the member 'hlines' of a type (line 1403)
        hlines_165717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1403, 24), self_165716, 'hlines')
        # Testing the type of a for loop iterable (line 1403)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1403, 12), hlines_165717)
        # Getting the type of the for loop variable (line 1403)
        for_loop_var_165718 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1403, 12), hlines_165717)
        # Assigning a type to the variable 'line' (line 1403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1403, 12), 'line', for_loop_var_165718)
        # SSA begins for a for statement (line 1403)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_ydata(...): (line 1404)
        # Processing the call arguments (line 1404)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1404)
        tuple_165721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1404, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1404)
        # Adding element type (line 1404)
        # Getting the type of 'event' (line 1404)
        event_165722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 32), 'event', False)
        # Obtaining the member 'ydata' of a type (line 1404)
        ydata_165723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1404, 32), event_165722, 'ydata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1404, 32), tuple_165721, ydata_165723)
        # Adding element type (line 1404)
        # Getting the type of 'event' (line 1404)
        event_165724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 45), 'event', False)
        # Obtaining the member 'ydata' of a type (line 1404)
        ydata_165725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1404, 45), event_165724, 'ydata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1404, 32), tuple_165721, ydata_165725)
        
        # Processing the call keyword arguments (line 1404)
        kwargs_165726 = {}
        # Getting the type of 'line' (line 1404)
        line_165719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 16), 'line', False)
        # Obtaining the member 'set_ydata' of a type (line 1404)
        set_ydata_165720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1404, 16), line_165719, 'set_ydata')
        # Calling set_ydata(args, kwargs) (line 1404)
        set_ydata_call_result_165727 = invoke(stypy.reporting.localization.Localization(__file__, 1404, 16), set_ydata_165720, *[tuple_165721], **kwargs_165726)
        
        
        # Call to set_visible(...): (line 1405)
        # Processing the call arguments (line 1405)
        # Getting the type of 'self' (line 1405)
        self_165730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 33), 'self', False)
        # Obtaining the member 'visible' of a type (line 1405)
        visible_165731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1405, 33), self_165730, 'visible')
        # Processing the call keyword arguments (line 1405)
        kwargs_165732 = {}
        # Getting the type of 'line' (line 1405)
        line_165728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 16), 'line', False)
        # Obtaining the member 'set_visible' of a type (line 1405)
        set_visible_165729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1405, 16), line_165728, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1405)
        set_visible_call_result_165733 = invoke(stypy.reporting.localization.Localization(__file__, 1405, 16), set_visible_165729, *[visible_165731], **kwargs_165732)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1402)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _update(...): (line 1406)
        # Processing the call keyword arguments (line 1406)
        kwargs_165736 = {}
        # Getting the type of 'self' (line 1406)
        self_165734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 8), 'self', False)
        # Obtaining the member '_update' of a type (line 1406)
        _update_165735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1406, 8), self_165734, '_update')
        # Calling _update(args, kwargs) (line 1406)
        _update_call_result_165737 = invoke(stypy.reporting.localization.Localization(__file__, 1406, 8), _update_165735, *[], **kwargs_165736)
        
        
        # ################# End of 'onmove(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'onmove' in the type store
        # Getting the type of 'stypy_return_type' (line 1388)
        stypy_return_type_165738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_165738)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'onmove'
        return stypy_return_type_165738


    @norecursion
    def _update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update'
        module_type_store = module_type_store.open_function_context('_update', 1408, 4, False)
        # Assigning a type to the variable 'self' (line 1409)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1409, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MultiCursor._update.__dict__.__setitem__('stypy_localization', localization)
        MultiCursor._update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MultiCursor._update.__dict__.__setitem__('stypy_type_store', module_type_store)
        MultiCursor._update.__dict__.__setitem__('stypy_function_name', 'MultiCursor._update')
        MultiCursor._update.__dict__.__setitem__('stypy_param_names_list', [])
        MultiCursor._update.__dict__.__setitem__('stypy_varargs_param_name', None)
        MultiCursor._update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MultiCursor._update.__dict__.__setitem__('stypy_call_defaults', defaults)
        MultiCursor._update.__dict__.__setitem__('stypy_call_varargs', varargs)
        MultiCursor._update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MultiCursor._update.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MultiCursor._update', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update(...)' code ##################

        
        # Getting the type of 'self' (line 1409)
        self_165739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 11), 'self')
        # Obtaining the member 'useblit' of a type (line 1409)
        useblit_165740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 11), self_165739, 'useblit')
        # Testing the type of an if condition (line 1409)
        if_condition_165741 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1409, 8), useblit_165740)
        # Assigning a type to the variable 'if_condition_165741' (line 1409)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1409, 8), 'if_condition_165741', if_condition_165741)
        # SSA begins for if statement (line 1409)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 1410)
        self_165742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 15), 'self')
        # Obtaining the member 'background' of a type (line 1410)
        background_165743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1410, 15), self_165742, 'background')
        # Getting the type of 'None' (line 1410)
        None_165744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 38), 'None')
        # Applying the binary operator 'isnot' (line 1410)
        result_is_not_165745 = python_operator(stypy.reporting.localization.Localization(__file__, 1410, 15), 'isnot', background_165743, None_165744)
        
        # Testing the type of an if condition (line 1410)
        if_condition_165746 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1410, 12), result_is_not_165745)
        # Assigning a type to the variable 'if_condition_165746' (line 1410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1410, 12), 'if_condition_165746', if_condition_165746)
        # SSA begins for if statement (line 1410)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to restore_region(...): (line 1411)
        # Processing the call arguments (line 1411)
        # Getting the type of 'self' (line 1411)
        self_165750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 43), 'self', False)
        # Obtaining the member 'background' of a type (line 1411)
        background_165751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 43), self_165750, 'background')
        # Processing the call keyword arguments (line 1411)
        kwargs_165752 = {}
        # Getting the type of 'self' (line 1411)
        self_165747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 16), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1411)
        canvas_165748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 16), self_165747, 'canvas')
        # Obtaining the member 'restore_region' of a type (line 1411)
        restore_region_165749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 16), canvas_165748, 'restore_region')
        # Calling restore_region(args, kwargs) (line 1411)
        restore_region_call_result_165753 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 16), restore_region_165749, *[background_165751], **kwargs_165752)
        
        # SSA join for if statement (line 1410)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1412)
        self_165754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 15), 'self')
        # Obtaining the member 'vertOn' of a type (line 1412)
        vertOn_165755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1412, 15), self_165754, 'vertOn')
        # Testing the type of an if condition (line 1412)
        if_condition_165756 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1412, 12), vertOn_165755)
        # Assigning a type to the variable 'if_condition_165756' (line 1412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1412, 12), 'if_condition_165756', if_condition_165756)
        # SSA begins for if statement (line 1412)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to zip(...): (line 1413)
        # Processing the call arguments (line 1413)
        # Getting the type of 'self' (line 1413)
        self_165758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 36), 'self', False)
        # Obtaining the member 'axes' of a type (line 1413)
        axes_165759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1413, 36), self_165758, 'axes')
        # Getting the type of 'self' (line 1413)
        self_165760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 47), 'self', False)
        # Obtaining the member 'vlines' of a type (line 1413)
        vlines_165761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1413, 47), self_165760, 'vlines')
        # Processing the call keyword arguments (line 1413)
        kwargs_165762 = {}
        # Getting the type of 'zip' (line 1413)
        zip_165757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 32), 'zip', False)
        # Calling zip(args, kwargs) (line 1413)
        zip_call_result_165763 = invoke(stypy.reporting.localization.Localization(__file__, 1413, 32), zip_165757, *[axes_165759, vlines_165761], **kwargs_165762)
        
        # Testing the type of a for loop iterable (line 1413)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1413, 16), zip_call_result_165763)
        # Getting the type of the for loop variable (line 1413)
        for_loop_var_165764 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1413, 16), zip_call_result_165763)
        # Assigning a type to the variable 'ax' (line 1413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 16), 'ax', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1413, 16), for_loop_var_165764))
        # Assigning a type to the variable 'line' (line 1413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 16), 'line', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1413, 16), for_loop_var_165764))
        # SSA begins for a for statement (line 1413)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to draw_artist(...): (line 1414)
        # Processing the call arguments (line 1414)
        # Getting the type of 'line' (line 1414)
        line_165767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 35), 'line', False)
        # Processing the call keyword arguments (line 1414)
        kwargs_165768 = {}
        # Getting the type of 'ax' (line 1414)
        ax_165765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 20), 'ax', False)
        # Obtaining the member 'draw_artist' of a type (line 1414)
        draw_artist_165766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1414, 20), ax_165765, 'draw_artist')
        # Calling draw_artist(args, kwargs) (line 1414)
        draw_artist_call_result_165769 = invoke(stypy.reporting.localization.Localization(__file__, 1414, 20), draw_artist_165766, *[line_165767], **kwargs_165768)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1412)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1415)
        self_165770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 15), 'self')
        # Obtaining the member 'horizOn' of a type (line 1415)
        horizOn_165771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1415, 15), self_165770, 'horizOn')
        # Testing the type of an if condition (line 1415)
        if_condition_165772 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1415, 12), horizOn_165771)
        # Assigning a type to the variable 'if_condition_165772' (line 1415)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1415, 12), 'if_condition_165772', if_condition_165772)
        # SSA begins for if statement (line 1415)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to zip(...): (line 1416)
        # Processing the call arguments (line 1416)
        # Getting the type of 'self' (line 1416)
        self_165774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 36), 'self', False)
        # Obtaining the member 'axes' of a type (line 1416)
        axes_165775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1416, 36), self_165774, 'axes')
        # Getting the type of 'self' (line 1416)
        self_165776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 47), 'self', False)
        # Obtaining the member 'hlines' of a type (line 1416)
        hlines_165777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1416, 47), self_165776, 'hlines')
        # Processing the call keyword arguments (line 1416)
        kwargs_165778 = {}
        # Getting the type of 'zip' (line 1416)
        zip_165773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 32), 'zip', False)
        # Calling zip(args, kwargs) (line 1416)
        zip_call_result_165779 = invoke(stypy.reporting.localization.Localization(__file__, 1416, 32), zip_165773, *[axes_165775, hlines_165777], **kwargs_165778)
        
        # Testing the type of a for loop iterable (line 1416)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1416, 16), zip_call_result_165779)
        # Getting the type of the for loop variable (line 1416)
        for_loop_var_165780 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1416, 16), zip_call_result_165779)
        # Assigning a type to the variable 'ax' (line 1416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 16), 'ax', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1416, 16), for_loop_var_165780))
        # Assigning a type to the variable 'line' (line 1416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 16), 'line', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1416, 16), for_loop_var_165780))
        # SSA begins for a for statement (line 1416)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to draw_artist(...): (line 1417)
        # Processing the call arguments (line 1417)
        # Getting the type of 'line' (line 1417)
        line_165783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 35), 'line', False)
        # Processing the call keyword arguments (line 1417)
        kwargs_165784 = {}
        # Getting the type of 'ax' (line 1417)
        ax_165781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 20), 'ax', False)
        # Obtaining the member 'draw_artist' of a type (line 1417)
        draw_artist_165782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 20), ax_165781, 'draw_artist')
        # Calling draw_artist(args, kwargs) (line 1417)
        draw_artist_call_result_165785 = invoke(stypy.reporting.localization.Localization(__file__, 1417, 20), draw_artist_165782, *[line_165783], **kwargs_165784)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1415)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to blit(...): (line 1418)
        # Processing the call arguments (line 1418)
        # Getting the type of 'self' (line 1418)
        self_165789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 29), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1418)
        canvas_165790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 29), self_165789, 'canvas')
        # Obtaining the member 'figure' of a type (line 1418)
        figure_165791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 29), canvas_165790, 'figure')
        # Obtaining the member 'bbox' of a type (line 1418)
        bbox_165792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 29), figure_165791, 'bbox')
        # Processing the call keyword arguments (line 1418)
        kwargs_165793 = {}
        # Getting the type of 'self' (line 1418)
        self_165786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1418)
        canvas_165787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 12), self_165786, 'canvas')
        # Obtaining the member 'blit' of a type (line 1418)
        blit_165788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 12), canvas_165787, 'blit')
        # Calling blit(args, kwargs) (line 1418)
        blit_call_result_165794 = invoke(stypy.reporting.localization.Localization(__file__, 1418, 12), blit_165788, *[bbox_165792], **kwargs_165793)
        
        # SSA branch for the else part of an if statement (line 1409)
        module_type_store.open_ssa_branch('else')
        
        # Call to draw_idle(...): (line 1420)
        # Processing the call keyword arguments (line 1420)
        kwargs_165798 = {}
        # Getting the type of 'self' (line 1420)
        self_165795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1420)
        canvas_165796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 12), self_165795, 'canvas')
        # Obtaining the member 'draw_idle' of a type (line 1420)
        draw_idle_165797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 12), canvas_165796, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 1420)
        draw_idle_call_result_165799 = invoke(stypy.reporting.localization.Localization(__file__, 1420, 12), draw_idle_165797, *[], **kwargs_165798)
        
        # SSA join for if statement (line 1409)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update' in the type store
        # Getting the type of 'stypy_return_type' (line 1408)
        stypy_return_type_165800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_165800)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update'
        return stypy_return_type_165800


# Assigning a type to the variable 'MultiCursor' (line 1303)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 0), 'MultiCursor', MultiCursor)
# Declaration of the '_SelectorWidget' class
# Getting the type of 'AxesWidget' (line 1423)
AxesWidget_165801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 22), 'AxesWidget')

class _SelectorWidget(AxesWidget_165801, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1425)
        False_165802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 45), 'False')
        # Getting the type of 'None' (line 1425)
        None_165803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 59), 'None')
        # Getting the type of 'None' (line 1426)
        None_165804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 37), 'None')
        defaults = [False_165802, None_165803, None_165804]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1425, 4, False)
        # Assigning a type to the variable 'self' (line 1426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget.__init__', ['ax', 'onselect', 'useblit', 'button', 'state_modifier_keys'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'onselect', 'useblit', 'button', 'state_modifier_keys'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1427)
        # Processing the call arguments (line 1427)
        # Getting the type of 'self' (line 1427)
        self_165807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 28), 'self', False)
        # Getting the type of 'ax' (line 1427)
        ax_165808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 34), 'ax', False)
        # Processing the call keyword arguments (line 1427)
        kwargs_165809 = {}
        # Getting the type of 'AxesWidget' (line 1427)
        AxesWidget_165805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 8), 'AxesWidget', False)
        # Obtaining the member '__init__' of a type (line 1427)
        init___165806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1427, 8), AxesWidget_165805, '__init__')
        # Calling __init__(args, kwargs) (line 1427)
        init___call_result_165810 = invoke(stypy.reporting.localization.Localization(__file__, 1427, 8), init___165806, *[self_165807, ax_165808], **kwargs_165809)
        
        
        # Assigning a Name to a Attribute (line 1429):
        
        # Assigning a Name to a Attribute (line 1429):
        # Getting the type of 'True' (line 1429)
        True_165811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 23), 'True')
        # Getting the type of 'self' (line 1429)
        self_165812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 8), 'self')
        # Setting the type of the member 'visible' of a type (line 1429)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1429, 8), self_165812, 'visible', True_165811)
        
        # Assigning a Name to a Attribute (line 1430):
        
        # Assigning a Name to a Attribute (line 1430):
        # Getting the type of 'onselect' (line 1430)
        onselect_165813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 24), 'onselect')
        # Getting the type of 'self' (line 1430)
        self_165814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 8), 'self')
        # Setting the type of the member 'onselect' of a type (line 1430)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1430, 8), self_165814, 'onselect', onselect_165813)
        
        # Assigning a BoolOp to a Attribute (line 1431):
        
        # Assigning a BoolOp to a Attribute (line 1431):
        
        # Evaluating a boolean operation
        # Getting the type of 'useblit' (line 1431)
        useblit_165815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 23), 'useblit')
        # Getting the type of 'self' (line 1431)
        self_165816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 35), 'self')
        # Obtaining the member 'canvas' of a type (line 1431)
        canvas_165817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 35), self_165816, 'canvas')
        # Obtaining the member 'supports_blit' of a type (line 1431)
        supports_blit_165818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 35), canvas_165817, 'supports_blit')
        # Applying the binary operator 'and' (line 1431)
        result_and_keyword_165819 = python_operator(stypy.reporting.localization.Localization(__file__, 1431, 23), 'and', useblit_165815, supports_blit_165818)
        
        # Getting the type of 'self' (line 1431)
        self_165820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 8), 'self')
        # Setting the type of the member 'useblit' of a type (line 1431)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 8), self_165820, 'useblit', result_and_keyword_165819)
        
        # Call to connect_default_events(...): (line 1432)
        # Processing the call keyword arguments (line 1432)
        kwargs_165823 = {}
        # Getting the type of 'self' (line 1432)
        self_165821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 8), 'self', False)
        # Obtaining the member 'connect_default_events' of a type (line 1432)
        connect_default_events_165822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1432, 8), self_165821, 'connect_default_events')
        # Calling connect_default_events(args, kwargs) (line 1432)
        connect_default_events_call_result_165824 = invoke(stypy.reporting.localization.Localization(__file__, 1432, 8), connect_default_events_165822, *[], **kwargs_165823)
        
        
        # Assigning a Call to a Attribute (line 1434):
        
        # Assigning a Call to a Attribute (line 1434):
        
        # Call to dict(...): (line 1434)
        # Processing the call keyword arguments (line 1434)
        unicode_165826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1434, 45), 'unicode', u' ')
        keyword_165827 = unicode_165826
        unicode_165828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1434, 56), 'unicode', u'escape')
        keyword_165829 = unicode_165828
        unicode_165830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1435, 47), 'unicode', u'shift')
        keyword_165831 = unicode_165830
        unicode_165832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1435, 63), 'unicode', u'control')
        keyword_165833 = unicode_165832
        kwargs_165834 = {'clear': keyword_165829, 'move': keyword_165827, 'square': keyword_165831, 'center': keyword_165833}
        # Getting the type of 'dict' (line 1434)
        dict_165825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 35), 'dict', False)
        # Calling dict(args, kwargs) (line 1434)
        dict_call_result_165835 = invoke(stypy.reporting.localization.Localization(__file__, 1434, 35), dict_165825, *[], **kwargs_165834)
        
        # Getting the type of 'self' (line 1434)
        self_165836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 8), 'self')
        # Setting the type of the member 'state_modifier_keys' of a type (line 1434)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 8), self_165836, 'state_modifier_keys', dict_call_result_165835)
        
        # Call to update(...): (line 1436)
        # Processing the call arguments (line 1436)
        
        # Evaluating a boolean operation
        # Getting the type of 'state_modifier_keys' (line 1436)
        state_modifier_keys_165840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 40), 'state_modifier_keys', False)
        
        # Obtaining an instance of the builtin type 'dict' (line 1436)
        dict_165841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1436, 63), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1436)
        
        # Applying the binary operator 'or' (line 1436)
        result_or_keyword_165842 = python_operator(stypy.reporting.localization.Localization(__file__, 1436, 40), 'or', state_modifier_keys_165840, dict_165841)
        
        # Processing the call keyword arguments (line 1436)
        kwargs_165843 = {}
        # Getting the type of 'self' (line 1436)
        self_165837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 8), 'self', False)
        # Obtaining the member 'state_modifier_keys' of a type (line 1436)
        state_modifier_keys_165838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1436, 8), self_165837, 'state_modifier_keys')
        # Obtaining the member 'update' of a type (line 1436)
        update_165839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1436, 8), state_modifier_keys_165838, 'update')
        # Calling update(args, kwargs) (line 1436)
        update_call_result_165844 = invoke(stypy.reporting.localization.Localization(__file__, 1436, 8), update_165839, *[result_or_keyword_165842], **kwargs_165843)
        
        
        # Assigning a Name to a Attribute (line 1438):
        
        # Assigning a Name to a Attribute (line 1438):
        # Getting the type of 'None' (line 1438)
        None_165845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 26), 'None')
        # Getting the type of 'self' (line 1438)
        self_165846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 8), 'self')
        # Setting the type of the member 'background' of a type (line 1438)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1438, 8), self_165846, 'background', None_165845)
        
        # Assigning a List to a Attribute (line 1439):
        
        # Assigning a List to a Attribute (line 1439):
        
        # Obtaining an instance of the builtin type 'list' (line 1439)
        list_165847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1439, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1439)
        
        # Getting the type of 'self' (line 1439)
        self_165848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 8), 'self')
        # Setting the type of the member 'artists' of a type (line 1439)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1439, 8), self_165848, 'artists', list_165847)
        
        # Type idiom detected: calculating its left and rigth part (line 1441)
        # Getting the type of 'int' (line 1441)
        int_165849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 30), 'int')
        # Getting the type of 'button' (line 1441)
        button_165850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 22), 'button')
        
        (may_be_165851, more_types_in_union_165852) = may_be_subtype(int_165849, button_165850)

        if may_be_165851:

            if more_types_in_union_165852:
                # Runtime conditional SSA (line 1441)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'button' (line 1441)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1441, 8), 'button', remove_not_subtype_from_union(button_165850, int))
            
            # Assigning a List to a Attribute (line 1442):
            
            # Assigning a List to a Attribute (line 1442):
            
            # Obtaining an instance of the builtin type 'list' (line 1442)
            list_165853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1442, 32), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1442)
            # Adding element type (line 1442)
            # Getting the type of 'button' (line 1442)
            button_165854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 33), 'button')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1442, 32), list_165853, button_165854)
            
            # Getting the type of 'self' (line 1442)
            self_165855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 12), 'self')
            # Setting the type of the member 'validButtons' of a type (line 1442)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1442, 12), self_165855, 'validButtons', list_165853)

            if more_types_in_union_165852:
                # Runtime conditional SSA for else branch (line 1441)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_165851) or more_types_in_union_165852):
            # Assigning a type to the variable 'button' (line 1441)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1441, 8), 'button', remove_subtype_from_union(button_165850, int))
            
            # Assigning a Name to a Attribute (line 1444):
            
            # Assigning a Name to a Attribute (line 1444):
            # Getting the type of 'button' (line 1444)
            button_165856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 32), 'button')
            # Getting the type of 'self' (line 1444)
            self_165857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 12), 'self')
            # Setting the type of the member 'validButtons' of a type (line 1444)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 12), self_165857, 'validButtons', button_165856)

            if (may_be_165851 and more_types_in_union_165852):
                # SSA join for if statement (line 1441)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 1447):
        
        # Assigning a Name to a Attribute (line 1447):
        # Getting the type of 'None' (line 1447)
        None_165858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 26), 'None')
        # Getting the type of 'self' (line 1447)
        self_165859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 8), 'self')
        # Setting the type of the member 'eventpress' of a type (line 1447)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1447, 8), self_165859, 'eventpress', None_165858)
        
        # Assigning a Name to a Attribute (line 1449):
        
        # Assigning a Name to a Attribute (line 1449):
        # Getting the type of 'None' (line 1449)
        None_165860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 28), 'None')
        # Getting the type of 'self' (line 1449)
        self_165861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 8), 'self')
        # Setting the type of the member 'eventrelease' of a type (line 1449)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1449, 8), self_165861, 'eventrelease', None_165860)
        
        # Assigning a Name to a Attribute (line 1450):
        
        # Assigning a Name to a Attribute (line 1450):
        # Getting the type of 'None' (line 1450)
        None_165862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 27), 'None')
        # Getting the type of 'self' (line 1450)
        self_165863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 8), 'self')
        # Setting the type of the member '_prev_event' of a type (line 1450)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1450, 8), self_165863, '_prev_event', None_165862)
        
        # Assigning a Call to a Attribute (line 1451):
        
        # Assigning a Call to a Attribute (line 1451):
        
        # Call to set(...): (line 1451)
        # Processing the call keyword arguments (line 1451)
        kwargs_165865 = {}
        # Getting the type of 'set' (line 1451)
        set_165864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 21), 'set', False)
        # Calling set(args, kwargs) (line 1451)
        set_call_result_165866 = invoke(stypy.reporting.localization.Localization(__file__, 1451, 21), set_165864, *[], **kwargs_165865)
        
        # Getting the type of 'self' (line 1451)
        self_165867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 8), 'self')
        # Setting the type of the member 'state' of a type (line 1451)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1451, 8), self_165867, 'state', set_call_result_165866)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_active(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_active'
        module_type_store = module_type_store.open_function_context('set_active', 1453, 4, False)
        # Assigning a type to the variable 'self' (line 1454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1454, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget.set_active.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget.set_active.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget.set_active.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget.set_active.__dict__.__setitem__('stypy_function_name', '_SelectorWidget.set_active')
        _SelectorWidget.set_active.__dict__.__setitem__('stypy_param_names_list', ['active'])
        _SelectorWidget.set_active.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget.set_active.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget.set_active.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget.set_active.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget.set_active.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget.set_active.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget.set_active', ['active'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_active', localization, ['active'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_active(...)' code ##################

        
        # Call to set_active(...): (line 1454)
        # Processing the call arguments (line 1454)
        # Getting the type of 'self' (line 1454)
        self_165870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 30), 'self', False)
        # Getting the type of 'active' (line 1454)
        active_165871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 36), 'active', False)
        # Processing the call keyword arguments (line 1454)
        kwargs_165872 = {}
        # Getting the type of 'AxesWidget' (line 1454)
        AxesWidget_165868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 8), 'AxesWidget', False)
        # Obtaining the member 'set_active' of a type (line 1454)
        set_active_165869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1454, 8), AxesWidget_165868, 'set_active')
        # Calling set_active(args, kwargs) (line 1454)
        set_active_call_result_165873 = invoke(stypy.reporting.localization.Localization(__file__, 1454, 8), set_active_165869, *[self_165870, active_165871], **kwargs_165872)
        
        
        # Getting the type of 'active' (line 1455)
        active_165874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 11), 'active')
        # Testing the type of an if condition (line 1455)
        if_condition_165875 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1455, 8), active_165874)
        # Assigning a type to the variable 'if_condition_165875' (line 1455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 8), 'if_condition_165875', if_condition_165875)
        # SSA begins for if statement (line 1455)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to update_background(...): (line 1456)
        # Processing the call arguments (line 1456)
        # Getting the type of 'None' (line 1456)
        None_165878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 35), 'None', False)
        # Processing the call keyword arguments (line 1456)
        kwargs_165879 = {}
        # Getting the type of 'self' (line 1456)
        self_165876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 12), 'self', False)
        # Obtaining the member 'update_background' of a type (line 1456)
        update_background_165877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 12), self_165876, 'update_background')
        # Calling update_background(args, kwargs) (line 1456)
        update_background_call_result_165880 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 12), update_background_165877, *[None_165878], **kwargs_165879)
        
        # SSA join for if statement (line 1455)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_active(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_active' in the type store
        # Getting the type of 'stypy_return_type' (line 1453)
        stypy_return_type_165881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_165881)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_active'
        return stypy_return_type_165881


    @norecursion
    def update_background(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_background'
        module_type_store = module_type_store.open_function_context('update_background', 1458, 4, False)
        # Assigning a type to the variable 'self' (line 1459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1459, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget.update_background.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget.update_background.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget.update_background.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget.update_background.__dict__.__setitem__('stypy_function_name', '_SelectorWidget.update_background')
        _SelectorWidget.update_background.__dict__.__setitem__('stypy_param_names_list', ['event'])
        _SelectorWidget.update_background.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget.update_background.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget.update_background.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget.update_background.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget.update_background.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget.update_background.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget.update_background', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_background', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_background(...)' code ##################

        unicode_165882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1459, 8), 'unicode', u'force an update of the background')
        
        # Getting the type of 'self' (line 1462)
        self_165883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 11), 'self')
        # Obtaining the member 'useblit' of a type (line 1462)
        useblit_165884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1462, 11), self_165883, 'useblit')
        # Testing the type of an if condition (line 1462)
        if_condition_165885 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1462, 8), useblit_165884)
        # Assigning a type to the variable 'if_condition_165885' (line 1462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1462, 8), 'if_condition_165885', if_condition_165885)
        # SSA begins for if statement (line 1462)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1463):
        
        # Assigning a Call to a Attribute (line 1463):
        
        # Call to copy_from_bbox(...): (line 1463)
        # Processing the call arguments (line 1463)
        # Getting the type of 'self' (line 1463)
        self_165889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 57), 'self', False)
        # Obtaining the member 'ax' of a type (line 1463)
        ax_165890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1463, 57), self_165889, 'ax')
        # Obtaining the member 'bbox' of a type (line 1463)
        bbox_165891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1463, 57), ax_165890, 'bbox')
        # Processing the call keyword arguments (line 1463)
        kwargs_165892 = {}
        # Getting the type of 'self' (line 1463)
        self_165886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 30), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1463)
        canvas_165887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1463, 30), self_165886, 'canvas')
        # Obtaining the member 'copy_from_bbox' of a type (line 1463)
        copy_from_bbox_165888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1463, 30), canvas_165887, 'copy_from_bbox')
        # Calling copy_from_bbox(args, kwargs) (line 1463)
        copy_from_bbox_call_result_165893 = invoke(stypy.reporting.localization.Localization(__file__, 1463, 30), copy_from_bbox_165888, *[bbox_165891], **kwargs_165892)
        
        # Getting the type of 'self' (line 1463)
        self_165894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 12), 'self')
        # Setting the type of the member 'background' of a type (line 1463)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1463, 12), self_165894, 'background', copy_from_bbox_call_result_165893)
        # SSA join for if statement (line 1462)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'update_background(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_background' in the type store
        # Getting the type of 'stypy_return_type' (line 1458)
        stypy_return_type_165895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_165895)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_background'
        return stypy_return_type_165895


    @norecursion
    def connect_default_events(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'connect_default_events'
        module_type_store = module_type_store.open_function_context('connect_default_events', 1465, 4, False)
        # Assigning a type to the variable 'self' (line 1466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1466, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget.connect_default_events.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget.connect_default_events.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget.connect_default_events.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget.connect_default_events.__dict__.__setitem__('stypy_function_name', '_SelectorWidget.connect_default_events')
        _SelectorWidget.connect_default_events.__dict__.__setitem__('stypy_param_names_list', [])
        _SelectorWidget.connect_default_events.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget.connect_default_events.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget.connect_default_events.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget.connect_default_events.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget.connect_default_events.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget.connect_default_events.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget.connect_default_events', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'connect_default_events', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'connect_default_events(...)' code ##################

        unicode_165896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1466, 8), 'unicode', u'Connect the major canvas events to methods.')
        
        # Call to connect_event(...): (line 1467)
        # Processing the call arguments (line 1467)
        unicode_165899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1467, 27), 'unicode', u'motion_notify_event')
        # Getting the type of 'self' (line 1467)
        self_165900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 50), 'self', False)
        # Obtaining the member 'onmove' of a type (line 1467)
        onmove_165901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1467, 50), self_165900, 'onmove')
        # Processing the call keyword arguments (line 1467)
        kwargs_165902 = {}
        # Getting the type of 'self' (line 1467)
        self_165897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 1467)
        connect_event_165898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1467, 8), self_165897, 'connect_event')
        # Calling connect_event(args, kwargs) (line 1467)
        connect_event_call_result_165903 = invoke(stypy.reporting.localization.Localization(__file__, 1467, 8), connect_event_165898, *[unicode_165899, onmove_165901], **kwargs_165902)
        
        
        # Call to connect_event(...): (line 1468)
        # Processing the call arguments (line 1468)
        unicode_165906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1468, 27), 'unicode', u'button_press_event')
        # Getting the type of 'self' (line 1468)
        self_165907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 49), 'self', False)
        # Obtaining the member 'press' of a type (line 1468)
        press_165908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 49), self_165907, 'press')
        # Processing the call keyword arguments (line 1468)
        kwargs_165909 = {}
        # Getting the type of 'self' (line 1468)
        self_165904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 1468)
        connect_event_165905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 8), self_165904, 'connect_event')
        # Calling connect_event(args, kwargs) (line 1468)
        connect_event_call_result_165910 = invoke(stypy.reporting.localization.Localization(__file__, 1468, 8), connect_event_165905, *[unicode_165906, press_165908], **kwargs_165909)
        
        
        # Call to connect_event(...): (line 1469)
        # Processing the call arguments (line 1469)
        unicode_165913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 27), 'unicode', u'button_release_event')
        # Getting the type of 'self' (line 1469)
        self_165914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 51), 'self', False)
        # Obtaining the member 'release' of a type (line 1469)
        release_165915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1469, 51), self_165914, 'release')
        # Processing the call keyword arguments (line 1469)
        kwargs_165916 = {}
        # Getting the type of 'self' (line 1469)
        self_165911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 1469)
        connect_event_165912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1469, 8), self_165911, 'connect_event')
        # Calling connect_event(args, kwargs) (line 1469)
        connect_event_call_result_165917 = invoke(stypy.reporting.localization.Localization(__file__, 1469, 8), connect_event_165912, *[unicode_165913, release_165915], **kwargs_165916)
        
        
        # Call to connect_event(...): (line 1470)
        # Processing the call arguments (line 1470)
        unicode_165920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1470, 27), 'unicode', u'draw_event')
        # Getting the type of 'self' (line 1470)
        self_165921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 41), 'self', False)
        # Obtaining the member 'update_background' of a type (line 1470)
        update_background_165922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1470, 41), self_165921, 'update_background')
        # Processing the call keyword arguments (line 1470)
        kwargs_165923 = {}
        # Getting the type of 'self' (line 1470)
        self_165918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 1470)
        connect_event_165919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1470, 8), self_165918, 'connect_event')
        # Calling connect_event(args, kwargs) (line 1470)
        connect_event_call_result_165924 = invoke(stypy.reporting.localization.Localization(__file__, 1470, 8), connect_event_165919, *[unicode_165920, update_background_165922], **kwargs_165923)
        
        
        # Call to connect_event(...): (line 1471)
        # Processing the call arguments (line 1471)
        unicode_165927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 27), 'unicode', u'key_press_event')
        # Getting the type of 'self' (line 1471)
        self_165928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 46), 'self', False)
        # Obtaining the member 'on_key_press' of a type (line 1471)
        on_key_press_165929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 46), self_165928, 'on_key_press')
        # Processing the call keyword arguments (line 1471)
        kwargs_165930 = {}
        # Getting the type of 'self' (line 1471)
        self_165925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 1471)
        connect_event_165926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 8), self_165925, 'connect_event')
        # Calling connect_event(args, kwargs) (line 1471)
        connect_event_call_result_165931 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 8), connect_event_165926, *[unicode_165927, on_key_press_165929], **kwargs_165930)
        
        
        # Call to connect_event(...): (line 1472)
        # Processing the call arguments (line 1472)
        unicode_165934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, 27), 'unicode', u'key_release_event')
        # Getting the type of 'self' (line 1472)
        self_165935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 48), 'self', False)
        # Obtaining the member 'on_key_release' of a type (line 1472)
        on_key_release_165936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 48), self_165935, 'on_key_release')
        # Processing the call keyword arguments (line 1472)
        kwargs_165937 = {}
        # Getting the type of 'self' (line 1472)
        self_165932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 1472)
        connect_event_165933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 8), self_165932, 'connect_event')
        # Calling connect_event(args, kwargs) (line 1472)
        connect_event_call_result_165938 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 8), connect_event_165933, *[unicode_165934, on_key_release_165936], **kwargs_165937)
        
        
        # Call to connect_event(...): (line 1473)
        # Processing the call arguments (line 1473)
        unicode_165941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1473, 27), 'unicode', u'scroll_event')
        # Getting the type of 'self' (line 1473)
        self_165942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 43), 'self', False)
        # Obtaining the member 'on_scroll' of a type (line 1473)
        on_scroll_165943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 43), self_165942, 'on_scroll')
        # Processing the call keyword arguments (line 1473)
        kwargs_165944 = {}
        # Getting the type of 'self' (line 1473)
        self_165939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 1473)
        connect_event_165940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 8), self_165939, 'connect_event')
        # Calling connect_event(args, kwargs) (line 1473)
        connect_event_call_result_165945 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 8), connect_event_165940, *[unicode_165941, on_scroll_165943], **kwargs_165944)
        
        
        # ################# End of 'connect_default_events(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'connect_default_events' in the type store
        # Getting the type of 'stypy_return_type' (line 1465)
        stypy_return_type_165946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_165946)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'connect_default_events'
        return stypy_return_type_165946


    @norecursion
    def ignore(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'ignore'
        module_type_store = module_type_store.open_function_context('ignore', 1475, 4, False)
        # Assigning a type to the variable 'self' (line 1476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1476, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget.ignore.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget.ignore.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget.ignore.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget.ignore.__dict__.__setitem__('stypy_function_name', '_SelectorWidget.ignore')
        _SelectorWidget.ignore.__dict__.__setitem__('stypy_param_names_list', ['event'])
        _SelectorWidget.ignore.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget.ignore.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget.ignore.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget.ignore.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget.ignore.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget.ignore.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget.ignore', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ignore', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ignore(...)' code ##################

        unicode_165947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1476, 8), 'unicode', u'return *True* if *event* should be ignored')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1477)
        self_165948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 15), 'self')
        # Obtaining the member 'active' of a type (line 1477)
        active_165949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1477, 15), self_165948, 'active')
        # Applying the 'not' unary operator (line 1477)
        result_not__165950 = python_operator(stypy.reporting.localization.Localization(__file__, 1477, 11), 'not', active_165949)
        
        
        
        # Call to get_visible(...): (line 1477)
        # Processing the call keyword arguments (line 1477)
        kwargs_165954 = {}
        # Getting the type of 'self' (line 1477)
        self_165951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 34), 'self', False)
        # Obtaining the member 'ax' of a type (line 1477)
        ax_165952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1477, 34), self_165951, 'ax')
        # Obtaining the member 'get_visible' of a type (line 1477)
        get_visible_165953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1477, 34), ax_165952, 'get_visible')
        # Calling get_visible(args, kwargs) (line 1477)
        get_visible_call_result_165955 = invoke(stypy.reporting.localization.Localization(__file__, 1477, 34), get_visible_165953, *[], **kwargs_165954)
        
        # Applying the 'not' unary operator (line 1477)
        result_not__165956 = python_operator(stypy.reporting.localization.Localization(__file__, 1477, 30), 'not', get_visible_call_result_165955)
        
        # Applying the binary operator 'or' (line 1477)
        result_or_keyword_165957 = python_operator(stypy.reporting.localization.Localization(__file__, 1477, 11), 'or', result_not__165950, result_not__165956)
        
        # Testing the type of an if condition (line 1477)
        if_condition_165958 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1477, 8), result_or_keyword_165957)
        # Assigning a type to the variable 'if_condition_165958' (line 1477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1477, 8), 'if_condition_165958', if_condition_165958)
        # SSA begins for if statement (line 1477)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'True' (line 1478)
        True_165959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 19), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 1478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1478, 12), 'stypy_return_type', True_165959)
        # SSA join for if statement (line 1477)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to available(...): (line 1481)
        # Processing the call arguments (line 1481)
        # Getting the type of 'self' (line 1481)
        self_165964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 48), 'self', False)
        # Processing the call keyword arguments (line 1481)
        kwargs_165965 = {}
        # Getting the type of 'self' (line 1481)
        self_165960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 15), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1481)
        canvas_165961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 15), self_165960, 'canvas')
        # Obtaining the member 'widgetlock' of a type (line 1481)
        widgetlock_165962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 15), canvas_165961, 'widgetlock')
        # Obtaining the member 'available' of a type (line 1481)
        available_165963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 15), widgetlock_165962, 'available')
        # Calling available(args, kwargs) (line 1481)
        available_call_result_165966 = invoke(stypy.reporting.localization.Localization(__file__, 1481, 15), available_165963, *[self_165964], **kwargs_165965)
        
        # Applying the 'not' unary operator (line 1481)
        result_not__165967 = python_operator(stypy.reporting.localization.Localization(__file__, 1481, 11), 'not', available_call_result_165966)
        
        # Testing the type of an if condition (line 1481)
        if_condition_165968 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1481, 8), result_not__165967)
        # Assigning a type to the variable 'if_condition_165968' (line 1481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1481, 8), 'if_condition_165968', if_condition_165968)
        # SSA begins for if statement (line 1481)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'True' (line 1482)
        True_165969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 19), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 1482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1482, 12), 'stypy_return_type', True_165969)
        # SSA join for if statement (line 1481)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1484)
        unicode_165970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1484, 30), 'unicode', u'button')
        # Getting the type of 'event' (line 1484)
        event_165971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 23), 'event')
        
        (may_be_165972, more_types_in_union_165973) = may_not_provide_member(unicode_165970, event_165971)

        if may_be_165972:

            if more_types_in_union_165973:
                # Runtime conditional SSA (line 1484)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'event' (line 1484)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1484, 8), 'event', remove_member_provider_from_union(event_165971, u'button'))
            
            # Assigning a Name to a Attribute (line 1485):
            
            # Assigning a Name to a Attribute (line 1485):
            # Getting the type of 'None' (line 1485)
            None_165974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 27), 'None')
            # Getting the type of 'event' (line 1485)
            event_165975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 12), 'event')
            # Setting the type of the member 'button' of a type (line 1485)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1485, 12), event_165975, 'button', None_165974)

            if more_types_in_union_165973:
                # SSA join for if statement (line 1484)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'self' (line 1489)
        self_165976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 11), 'self')
        # Obtaining the member 'validButtons' of a type (line 1489)
        validButtons_165977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1489, 11), self_165976, 'validButtons')
        # Getting the type of 'None' (line 1489)
        None_165978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 36), 'None')
        # Applying the binary operator 'isnot' (line 1489)
        result_is_not_165979 = python_operator(stypy.reporting.localization.Localization(__file__, 1489, 11), 'isnot', validButtons_165977, None_165978)
        
        # Testing the type of an if condition (line 1489)
        if_condition_165980 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1489, 8), result_is_not_165979)
        # Assigning a type to the variable 'if_condition_165980' (line 1489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 8), 'if_condition_165980', if_condition_165980)
        # SSA begins for if statement (line 1489)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'event' (line 1490)
        event_165981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 15), 'event')
        # Obtaining the member 'button' of a type (line 1490)
        button_165982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1490, 15), event_165981, 'button')
        # Getting the type of 'self' (line 1490)
        self_165983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 35), 'self')
        # Obtaining the member 'validButtons' of a type (line 1490)
        validButtons_165984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1490, 35), self_165983, 'validButtons')
        # Applying the binary operator 'notin' (line 1490)
        result_contains_165985 = python_operator(stypy.reporting.localization.Localization(__file__, 1490, 15), 'notin', button_165982, validButtons_165984)
        
        # Testing the type of an if condition (line 1490)
        if_condition_165986 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1490, 12), result_contains_165985)
        # Assigning a type to the variable 'if_condition_165986' (line 1490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1490, 12), 'if_condition_165986', if_condition_165986)
        # SSA begins for if statement (line 1490)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'True' (line 1491)
        True_165987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 23), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 1491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 16), 'stypy_return_type', True_165987)
        # SSA join for if statement (line 1490)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1489)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1495)
        # Getting the type of 'self' (line 1495)
        self_165988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 11), 'self')
        # Obtaining the member 'eventpress' of a type (line 1495)
        eventpress_165989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1495, 11), self_165988, 'eventpress')
        # Getting the type of 'None' (line 1495)
        None_165990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 30), 'None')
        
        (may_be_165991, more_types_in_union_165992) = may_be_none(eventpress_165989, None_165990)

        if may_be_165991:

            if more_types_in_union_165992:
                # Runtime conditional SSA (line 1495)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'event' (line 1496)
            event_165993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 19), 'event')
            # Obtaining the member 'inaxes' of a type (line 1496)
            inaxes_165994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1496, 19), event_165993, 'inaxes')
            # Getting the type of 'self' (line 1496)
            self_165995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 35), 'self')
            # Obtaining the member 'ax' of a type (line 1496)
            ax_165996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1496, 35), self_165995, 'ax')
            # Applying the binary operator '!=' (line 1496)
            result_ne_165997 = python_operator(stypy.reporting.localization.Localization(__file__, 1496, 19), '!=', inaxes_165994, ax_165996)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1496)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1496, 12), 'stypy_return_type', result_ne_165997)

            if more_types_in_union_165992:
                # SSA join for if statement (line 1495)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'event' (line 1500)
        event_165998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 11), 'event')
        # Obtaining the member 'button' of a type (line 1500)
        button_165999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1500, 11), event_165998, 'button')
        # Getting the type of 'self' (line 1500)
        self_166000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 27), 'self')
        # Obtaining the member 'eventpress' of a type (line 1500)
        eventpress_166001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1500, 27), self_166000, 'eventpress')
        # Obtaining the member 'button' of a type (line 1500)
        button_166002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1500, 27), eventpress_166001, 'button')
        # Applying the binary operator '==' (line 1500)
        result_eq_166003 = python_operator(stypy.reporting.localization.Localization(__file__, 1500, 11), '==', button_165999, button_166002)
        
        # Testing the type of an if condition (line 1500)
        if_condition_166004 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1500, 8), result_eq_166003)
        # Assigning a type to the variable 'if_condition_166004' (line 1500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1500, 8), 'if_condition_166004', if_condition_166004)
        # SSA begins for if statement (line 1500)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'False' (line 1501)
        False_166005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 19), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 1501)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 12), 'stypy_return_type', False_166005)
        # SSA join for if statement (line 1500)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'event' (line 1505)
        event_166006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 16), 'event')
        # Obtaining the member 'inaxes' of a type (line 1505)
        inaxes_166007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1505, 16), event_166006, 'inaxes')
        # Getting the type of 'self' (line 1505)
        self_166008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 32), 'self')
        # Obtaining the member 'ax' of a type (line 1505)
        ax_166009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1505, 32), self_166008, 'ax')
        # Applying the binary operator '!=' (line 1505)
        result_ne_166010 = python_operator(stypy.reporting.localization.Localization(__file__, 1505, 16), '!=', inaxes_166007, ax_166009)
        
        
        # Getting the type of 'event' (line 1506)
        event_166011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 16), 'event')
        # Obtaining the member 'button' of a type (line 1506)
        button_166012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1506, 16), event_166011, 'button')
        # Getting the type of 'self' (line 1506)
        self_166013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 32), 'self')
        # Obtaining the member 'eventpress' of a type (line 1506)
        eventpress_166014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1506, 32), self_166013, 'eventpress')
        # Obtaining the member 'button' of a type (line 1506)
        button_166015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1506, 32), eventpress_166014, 'button')
        # Applying the binary operator '!=' (line 1506)
        result_ne_166016 = python_operator(stypy.reporting.localization.Localization(__file__, 1506, 16), '!=', button_166012, button_166015)
        
        # Applying the binary operator 'or' (line 1505)
        result_or_keyword_166017 = python_operator(stypy.reporting.localization.Localization(__file__, 1505, 16), 'or', result_ne_166010, result_ne_166016)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1505)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1505, 8), 'stypy_return_type', result_or_keyword_166017)
        
        # ################# End of 'ignore(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ignore' in the type store
        # Getting the type of 'stypy_return_type' (line 1475)
        stypy_return_type_166018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166018)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ignore'
        return stypy_return_type_166018


    @norecursion
    def update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update'
        module_type_store = module_type_store.open_function_context('update', 1508, 4, False)
        # Assigning a type to the variable 'self' (line 1509)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1509, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget.update.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget.update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget.update.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget.update.__dict__.__setitem__('stypy_function_name', '_SelectorWidget.update')
        _SelectorWidget.update.__dict__.__setitem__('stypy_param_names_list', [])
        _SelectorWidget.update.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget.update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget.update.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget.update.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget.update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget.update.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget.update', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update(...)' code ##################

        unicode_166019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1512, (-1)), 'unicode', u'draw using newfangled blit or oldfangled draw depending on\n        useblit\n\n        ')
        
        
        
        # Call to get_visible(...): (line 1513)
        # Processing the call keyword arguments (line 1513)
        kwargs_166023 = {}
        # Getting the type of 'self' (line 1513)
        self_166020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 15), 'self', False)
        # Obtaining the member 'ax' of a type (line 1513)
        ax_166021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1513, 15), self_166020, 'ax')
        # Obtaining the member 'get_visible' of a type (line 1513)
        get_visible_166022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1513, 15), ax_166021, 'get_visible')
        # Calling get_visible(args, kwargs) (line 1513)
        get_visible_call_result_166024 = invoke(stypy.reporting.localization.Localization(__file__, 1513, 15), get_visible_166022, *[], **kwargs_166023)
        
        # Applying the 'not' unary operator (line 1513)
        result_not__166025 = python_operator(stypy.reporting.localization.Localization(__file__, 1513, 11), 'not', get_visible_call_result_166024)
        
        # Testing the type of an if condition (line 1513)
        if_condition_166026 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1513, 8), result_not__166025)
        # Assigning a type to the variable 'if_condition_166026' (line 1513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1513, 8), 'if_condition_166026', if_condition_166026)
        # SSA begins for if statement (line 1513)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'False' (line 1514)
        False_166027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 19), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 1514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1514, 12), 'stypy_return_type', False_166027)
        # SSA join for if statement (line 1513)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1516)
        self_166028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 11), 'self')
        # Obtaining the member 'useblit' of a type (line 1516)
        useblit_166029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1516, 11), self_166028, 'useblit')
        # Testing the type of an if condition (line 1516)
        if_condition_166030 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1516, 8), useblit_166029)
        # Assigning a type to the variable 'if_condition_166030' (line 1516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1516, 8), 'if_condition_166030', if_condition_166030)
        # SSA begins for if statement (line 1516)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 1517)
        self_166031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 15), 'self')
        # Obtaining the member 'background' of a type (line 1517)
        background_166032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1517, 15), self_166031, 'background')
        # Getting the type of 'None' (line 1517)
        None_166033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 38), 'None')
        # Applying the binary operator 'isnot' (line 1517)
        result_is_not_166034 = python_operator(stypy.reporting.localization.Localization(__file__, 1517, 15), 'isnot', background_166032, None_166033)
        
        # Testing the type of an if condition (line 1517)
        if_condition_166035 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1517, 12), result_is_not_166034)
        # Assigning a type to the variable 'if_condition_166035' (line 1517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1517, 12), 'if_condition_166035', if_condition_166035)
        # SSA begins for if statement (line 1517)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to restore_region(...): (line 1518)
        # Processing the call arguments (line 1518)
        # Getting the type of 'self' (line 1518)
        self_166039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1518, 43), 'self', False)
        # Obtaining the member 'background' of a type (line 1518)
        background_166040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1518, 43), self_166039, 'background')
        # Processing the call keyword arguments (line 1518)
        kwargs_166041 = {}
        # Getting the type of 'self' (line 1518)
        self_166036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1518, 16), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1518)
        canvas_166037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1518, 16), self_166036, 'canvas')
        # Obtaining the member 'restore_region' of a type (line 1518)
        restore_region_166038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1518, 16), canvas_166037, 'restore_region')
        # Calling restore_region(args, kwargs) (line 1518)
        restore_region_call_result_166042 = invoke(stypy.reporting.localization.Localization(__file__, 1518, 16), restore_region_166038, *[background_166040], **kwargs_166041)
        
        # SSA join for if statement (line 1517)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1519)
        self_166043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 26), 'self')
        # Obtaining the member 'artists' of a type (line 1519)
        artists_166044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1519, 26), self_166043, 'artists')
        # Testing the type of a for loop iterable (line 1519)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1519, 12), artists_166044)
        # Getting the type of the for loop variable (line 1519)
        for_loop_var_166045 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1519, 12), artists_166044)
        # Assigning a type to the variable 'artist' (line 1519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1519, 12), 'artist', for_loop_var_166045)
        # SSA begins for a for statement (line 1519)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to draw_artist(...): (line 1520)
        # Processing the call arguments (line 1520)
        # Getting the type of 'artist' (line 1520)
        artist_166049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 36), 'artist', False)
        # Processing the call keyword arguments (line 1520)
        kwargs_166050 = {}
        # Getting the type of 'self' (line 1520)
        self_166046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 16), 'self', False)
        # Obtaining the member 'ax' of a type (line 1520)
        ax_166047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1520, 16), self_166046, 'ax')
        # Obtaining the member 'draw_artist' of a type (line 1520)
        draw_artist_166048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1520, 16), ax_166047, 'draw_artist')
        # Calling draw_artist(args, kwargs) (line 1520)
        draw_artist_call_result_166051 = invoke(stypy.reporting.localization.Localization(__file__, 1520, 16), draw_artist_166048, *[artist_166049], **kwargs_166050)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to blit(...): (line 1522)
        # Processing the call arguments (line 1522)
        # Getting the type of 'self' (line 1522)
        self_166055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 29), 'self', False)
        # Obtaining the member 'ax' of a type (line 1522)
        ax_166056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1522, 29), self_166055, 'ax')
        # Obtaining the member 'bbox' of a type (line 1522)
        bbox_166057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1522, 29), ax_166056, 'bbox')
        # Processing the call keyword arguments (line 1522)
        kwargs_166058 = {}
        # Getting the type of 'self' (line 1522)
        self_166052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1522)
        canvas_166053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1522, 12), self_166052, 'canvas')
        # Obtaining the member 'blit' of a type (line 1522)
        blit_166054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1522, 12), canvas_166053, 'blit')
        # Calling blit(args, kwargs) (line 1522)
        blit_call_result_166059 = invoke(stypy.reporting.localization.Localization(__file__, 1522, 12), blit_166054, *[bbox_166057], **kwargs_166058)
        
        # SSA branch for the else part of an if statement (line 1516)
        module_type_store.open_ssa_branch('else')
        
        # Call to draw_idle(...): (line 1525)
        # Processing the call keyword arguments (line 1525)
        kwargs_166063 = {}
        # Getting the type of 'self' (line 1525)
        self_166060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1525)
        canvas_166061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1525, 12), self_166060, 'canvas')
        # Obtaining the member 'draw_idle' of a type (line 1525)
        draw_idle_166062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1525, 12), canvas_166061, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 1525)
        draw_idle_call_result_166064 = invoke(stypy.reporting.localization.Localization(__file__, 1525, 12), draw_idle_166062, *[], **kwargs_166063)
        
        # SSA join for if statement (line 1516)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'False' (line 1526)
        False_166065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 1526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1526, 8), 'stypy_return_type', False_166065)
        
        # ################# End of 'update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update' in the type store
        # Getting the type of 'stypy_return_type' (line 1508)
        stypy_return_type_166066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166066)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update'
        return stypy_return_type_166066


    @norecursion
    def _get_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_data'
        module_type_store = module_type_store.open_function_context('_get_data', 1528, 4, False)
        # Assigning a type to the variable 'self' (line 1529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget._get_data.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget._get_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget._get_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget._get_data.__dict__.__setitem__('stypy_function_name', '_SelectorWidget._get_data')
        _SelectorWidget._get_data.__dict__.__setitem__('stypy_param_names_list', ['event'])
        _SelectorWidget._get_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget._get_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget._get_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget._get_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget._get_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget._get_data.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget._get_data', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_data', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_data(...)' code ##################

        unicode_166067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1529, 8), 'unicode', u'Get the xdata and ydata for event, with limits')
        
        # Type idiom detected: calculating its left and rigth part (line 1530)
        # Getting the type of 'event' (line 1530)
        event_166068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 11), 'event')
        # Obtaining the member 'xdata' of a type (line 1530)
        xdata_166069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1530, 11), event_166068, 'xdata')
        # Getting the type of 'None' (line 1530)
        None_166070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 26), 'None')
        
        (may_be_166071, more_types_in_union_166072) = may_be_none(xdata_166069, None_166070)

        if may_be_166071:

            if more_types_in_union_166072:
                # Runtime conditional SSA (line 1530)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Obtaining an instance of the builtin type 'tuple' (line 1531)
            tuple_166073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1531, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1531)
            # Adding element type (line 1531)
            # Getting the type of 'None' (line 1531)
            None_166074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 19), 'None')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1531, 19), tuple_166073, None_166074)
            # Adding element type (line 1531)
            # Getting the type of 'None' (line 1531)
            None_166075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 25), 'None')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1531, 19), tuple_166073, None_166075)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1531)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 12), 'stypy_return_type', tuple_166073)

            if more_types_in_union_166072:
                # SSA join for if statement (line 1530)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Tuple (line 1532):
        
        # Assigning a Call to a Name:
        
        # Call to get_xbound(...): (line 1532)
        # Processing the call keyword arguments (line 1532)
        kwargs_166079 = {}
        # Getting the type of 'self' (line 1532)
        self_166076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 17), 'self', False)
        # Obtaining the member 'ax' of a type (line 1532)
        ax_166077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 17), self_166076, 'ax')
        # Obtaining the member 'get_xbound' of a type (line 1532)
        get_xbound_166078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 17), ax_166077, 'get_xbound')
        # Calling get_xbound(args, kwargs) (line 1532)
        get_xbound_call_result_166080 = invoke(stypy.reporting.localization.Localization(__file__, 1532, 17), get_xbound_166078, *[], **kwargs_166079)
        
        # Assigning a type to the variable 'call_assignment_162281' (line 1532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 8), 'call_assignment_162281', get_xbound_call_result_166080)
        
        # Assigning a Call to a Name (line 1532):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_166083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1532, 8), 'int')
        # Processing the call keyword arguments
        kwargs_166084 = {}
        # Getting the type of 'call_assignment_162281' (line 1532)
        call_assignment_162281_166081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 8), 'call_assignment_162281', False)
        # Obtaining the member '__getitem__' of a type (line 1532)
        getitem___166082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 8), call_assignment_162281_166081, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_166085 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___166082, *[int_166083], **kwargs_166084)
        
        # Assigning a type to the variable 'call_assignment_162282' (line 1532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 8), 'call_assignment_162282', getitem___call_result_166085)
        
        # Assigning a Name to a Name (line 1532):
        # Getting the type of 'call_assignment_162282' (line 1532)
        call_assignment_162282_166086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 8), 'call_assignment_162282')
        # Assigning a type to the variable 'x0' (line 1532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 8), 'x0', call_assignment_162282_166086)
        
        # Assigning a Call to a Name (line 1532):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_166089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1532, 8), 'int')
        # Processing the call keyword arguments
        kwargs_166090 = {}
        # Getting the type of 'call_assignment_162281' (line 1532)
        call_assignment_162281_166087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 8), 'call_assignment_162281', False)
        # Obtaining the member '__getitem__' of a type (line 1532)
        getitem___166088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 8), call_assignment_162281_166087, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_166091 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___166088, *[int_166089], **kwargs_166090)
        
        # Assigning a type to the variable 'call_assignment_162283' (line 1532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 8), 'call_assignment_162283', getitem___call_result_166091)
        
        # Assigning a Name to a Name (line 1532):
        # Getting the type of 'call_assignment_162283' (line 1532)
        call_assignment_162283_166092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 8), 'call_assignment_162283')
        # Assigning a type to the variable 'x1' (line 1532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 12), 'x1', call_assignment_162283_166092)
        
        # Assigning a Call to a Tuple (line 1533):
        
        # Assigning a Call to a Name:
        
        # Call to get_ybound(...): (line 1533)
        # Processing the call keyword arguments (line 1533)
        kwargs_166096 = {}
        # Getting the type of 'self' (line 1533)
        self_166093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 17), 'self', False)
        # Obtaining the member 'ax' of a type (line 1533)
        ax_166094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1533, 17), self_166093, 'ax')
        # Obtaining the member 'get_ybound' of a type (line 1533)
        get_ybound_166095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1533, 17), ax_166094, 'get_ybound')
        # Calling get_ybound(args, kwargs) (line 1533)
        get_ybound_call_result_166097 = invoke(stypy.reporting.localization.Localization(__file__, 1533, 17), get_ybound_166095, *[], **kwargs_166096)
        
        # Assigning a type to the variable 'call_assignment_162284' (line 1533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 8), 'call_assignment_162284', get_ybound_call_result_166097)
        
        # Assigning a Call to a Name (line 1533):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_166100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1533, 8), 'int')
        # Processing the call keyword arguments
        kwargs_166101 = {}
        # Getting the type of 'call_assignment_162284' (line 1533)
        call_assignment_162284_166098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 8), 'call_assignment_162284', False)
        # Obtaining the member '__getitem__' of a type (line 1533)
        getitem___166099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1533, 8), call_assignment_162284_166098, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_166102 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___166099, *[int_166100], **kwargs_166101)
        
        # Assigning a type to the variable 'call_assignment_162285' (line 1533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 8), 'call_assignment_162285', getitem___call_result_166102)
        
        # Assigning a Name to a Name (line 1533):
        # Getting the type of 'call_assignment_162285' (line 1533)
        call_assignment_162285_166103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 8), 'call_assignment_162285')
        # Assigning a type to the variable 'y0' (line 1533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 8), 'y0', call_assignment_162285_166103)
        
        # Assigning a Call to a Name (line 1533):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_166106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1533, 8), 'int')
        # Processing the call keyword arguments
        kwargs_166107 = {}
        # Getting the type of 'call_assignment_162284' (line 1533)
        call_assignment_162284_166104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 8), 'call_assignment_162284', False)
        # Obtaining the member '__getitem__' of a type (line 1533)
        getitem___166105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1533, 8), call_assignment_162284_166104, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_166108 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___166105, *[int_166106], **kwargs_166107)
        
        # Assigning a type to the variable 'call_assignment_162286' (line 1533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 8), 'call_assignment_162286', getitem___call_result_166108)
        
        # Assigning a Name to a Name (line 1533):
        # Getting the type of 'call_assignment_162286' (line 1533)
        call_assignment_162286_166109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 8), 'call_assignment_162286')
        # Assigning a type to the variable 'y1' (line 1533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 12), 'y1', call_assignment_162286_166109)
        
        # Assigning a Call to a Name (line 1534):
        
        # Assigning a Call to a Name (line 1534):
        
        # Call to max(...): (line 1534)
        # Processing the call arguments (line 1534)
        # Getting the type of 'x0' (line 1534)
        x0_166111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 20), 'x0', False)
        # Getting the type of 'event' (line 1534)
        event_166112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 24), 'event', False)
        # Obtaining the member 'xdata' of a type (line 1534)
        xdata_166113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1534, 24), event_166112, 'xdata')
        # Processing the call keyword arguments (line 1534)
        kwargs_166114 = {}
        # Getting the type of 'max' (line 1534)
        max_166110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 16), 'max', False)
        # Calling max(args, kwargs) (line 1534)
        max_call_result_166115 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 16), max_166110, *[x0_166111, xdata_166113], **kwargs_166114)
        
        # Assigning a type to the variable 'xdata' (line 1534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1534, 8), 'xdata', max_call_result_166115)
        
        # Assigning a Call to a Name (line 1535):
        
        # Assigning a Call to a Name (line 1535):
        
        # Call to min(...): (line 1535)
        # Processing the call arguments (line 1535)
        # Getting the type of 'x1' (line 1535)
        x1_166117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 20), 'x1', False)
        # Getting the type of 'xdata' (line 1535)
        xdata_166118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 24), 'xdata', False)
        # Processing the call keyword arguments (line 1535)
        kwargs_166119 = {}
        # Getting the type of 'min' (line 1535)
        min_166116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 16), 'min', False)
        # Calling min(args, kwargs) (line 1535)
        min_call_result_166120 = invoke(stypy.reporting.localization.Localization(__file__, 1535, 16), min_166116, *[x1_166117, xdata_166118], **kwargs_166119)
        
        # Assigning a type to the variable 'xdata' (line 1535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 8), 'xdata', min_call_result_166120)
        
        # Assigning a Call to a Name (line 1536):
        
        # Assigning a Call to a Name (line 1536):
        
        # Call to max(...): (line 1536)
        # Processing the call arguments (line 1536)
        # Getting the type of 'y0' (line 1536)
        y0_166122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 20), 'y0', False)
        # Getting the type of 'event' (line 1536)
        event_166123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 24), 'event', False)
        # Obtaining the member 'ydata' of a type (line 1536)
        ydata_166124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1536, 24), event_166123, 'ydata')
        # Processing the call keyword arguments (line 1536)
        kwargs_166125 = {}
        # Getting the type of 'max' (line 1536)
        max_166121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 16), 'max', False)
        # Calling max(args, kwargs) (line 1536)
        max_call_result_166126 = invoke(stypy.reporting.localization.Localization(__file__, 1536, 16), max_166121, *[y0_166122, ydata_166124], **kwargs_166125)
        
        # Assigning a type to the variable 'ydata' (line 1536)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1536, 8), 'ydata', max_call_result_166126)
        
        # Assigning a Call to a Name (line 1537):
        
        # Assigning a Call to a Name (line 1537):
        
        # Call to min(...): (line 1537)
        # Processing the call arguments (line 1537)
        # Getting the type of 'y1' (line 1537)
        y1_166128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 20), 'y1', False)
        # Getting the type of 'ydata' (line 1537)
        ydata_166129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 24), 'ydata', False)
        # Processing the call keyword arguments (line 1537)
        kwargs_166130 = {}
        # Getting the type of 'min' (line 1537)
        min_166127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 16), 'min', False)
        # Calling min(args, kwargs) (line 1537)
        min_call_result_166131 = invoke(stypy.reporting.localization.Localization(__file__, 1537, 16), min_166127, *[y1_166128, ydata_166129], **kwargs_166130)
        
        # Assigning a type to the variable 'ydata' (line 1537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 8), 'ydata', min_call_result_166131)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1538)
        tuple_166132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1538, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1538)
        # Adding element type (line 1538)
        # Getting the type of 'xdata' (line 1538)
        xdata_166133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 15), 'xdata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1538, 15), tuple_166132, xdata_166133)
        # Adding element type (line 1538)
        # Getting the type of 'ydata' (line 1538)
        ydata_166134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 22), 'ydata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1538, 15), tuple_166132, ydata_166134)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 8), 'stypy_return_type', tuple_166132)
        
        # ################# End of '_get_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_data' in the type store
        # Getting the type of 'stypy_return_type' (line 1528)
        stypy_return_type_166135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166135)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_data'
        return stypy_return_type_166135


    @norecursion
    def _clean_event(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_clean_event'
        module_type_store = module_type_store.open_function_context('_clean_event', 1540, 4, False)
        # Assigning a type to the variable 'self' (line 1541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1541, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget._clean_event.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget._clean_event.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget._clean_event.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget._clean_event.__dict__.__setitem__('stypy_function_name', '_SelectorWidget._clean_event')
        _SelectorWidget._clean_event.__dict__.__setitem__('stypy_param_names_list', ['event'])
        _SelectorWidget._clean_event.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget._clean_event.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget._clean_event.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget._clean_event.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget._clean_event.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget._clean_event.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget._clean_event', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_clean_event', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_clean_event(...)' code ##################

        unicode_166136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1546, (-1)), 'unicode', u'Clean up an event\n\n        Use prev event if there is no xdata\n        Limit the xdata and ydata to the axes limits\n        Set the prev event\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1547)
        # Getting the type of 'event' (line 1547)
        event_166137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 11), 'event')
        # Obtaining the member 'xdata' of a type (line 1547)
        xdata_166138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1547, 11), event_166137, 'xdata')
        # Getting the type of 'None' (line 1547)
        None_166139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 26), 'None')
        
        (may_be_166140, more_types_in_union_166141) = may_be_none(xdata_166138, None_166139)

        if may_be_166140:

            if more_types_in_union_166141:
                # Runtime conditional SSA (line 1547)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 1548):
            
            # Assigning a Attribute to a Name (line 1548):
            # Getting the type of 'self' (line 1548)
            self_166142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 20), 'self')
            # Obtaining the member '_prev_event' of a type (line 1548)
            _prev_event_166143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1548, 20), self_166142, '_prev_event')
            # Assigning a type to the variable 'event' (line 1548)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1548, 12), 'event', _prev_event_166143)

            if more_types_in_union_166141:
                # Runtime conditional SSA for else branch (line 1547)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_166140) or more_types_in_union_166141):
            
            # Assigning a Call to a Name (line 1550):
            
            # Assigning a Call to a Name (line 1550):
            
            # Call to copy(...): (line 1550)
            # Processing the call arguments (line 1550)
            # Getting the type of 'event' (line 1550)
            event_166146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 30), 'event', False)
            # Processing the call keyword arguments (line 1550)
            kwargs_166147 = {}
            # Getting the type of 'copy' (line 1550)
            copy_166144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 20), 'copy', False)
            # Obtaining the member 'copy' of a type (line 1550)
            copy_166145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1550, 20), copy_166144, 'copy')
            # Calling copy(args, kwargs) (line 1550)
            copy_call_result_166148 = invoke(stypy.reporting.localization.Localization(__file__, 1550, 20), copy_166145, *[event_166146], **kwargs_166147)
            
            # Assigning a type to the variable 'event' (line 1550)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1550, 12), 'event', copy_call_result_166148)

            if (may_be_166140 and more_types_in_union_166141):
                # SSA join for if statement (line 1547)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Tuple (line 1551):
        
        # Assigning a Call to a Name:
        
        # Call to _get_data(...): (line 1551)
        # Processing the call arguments (line 1551)
        # Getting the type of 'event' (line 1551)
        event_166151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 50), 'event', False)
        # Processing the call keyword arguments (line 1551)
        kwargs_166152 = {}
        # Getting the type of 'self' (line 1551)
        self_166149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 35), 'self', False)
        # Obtaining the member '_get_data' of a type (line 1551)
        _get_data_166150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 35), self_166149, '_get_data')
        # Calling _get_data(args, kwargs) (line 1551)
        _get_data_call_result_166153 = invoke(stypy.reporting.localization.Localization(__file__, 1551, 35), _get_data_166150, *[event_166151], **kwargs_166152)
        
        # Assigning a type to the variable 'call_assignment_162287' (line 1551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'call_assignment_162287', _get_data_call_result_166153)
        
        # Assigning a Call to a Name (line 1551):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_166156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 8), 'int')
        # Processing the call keyword arguments
        kwargs_166157 = {}
        # Getting the type of 'call_assignment_162287' (line 1551)
        call_assignment_162287_166154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'call_assignment_162287', False)
        # Obtaining the member '__getitem__' of a type (line 1551)
        getitem___166155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 8), call_assignment_162287_166154, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_166158 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___166155, *[int_166156], **kwargs_166157)
        
        # Assigning a type to the variable 'call_assignment_162288' (line 1551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'call_assignment_162288', getitem___call_result_166158)
        
        # Assigning a Name to a Attribute (line 1551):
        # Getting the type of 'call_assignment_162288' (line 1551)
        call_assignment_162288_166159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'call_assignment_162288')
        # Getting the type of 'event' (line 1551)
        event_166160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'event')
        # Setting the type of the member 'xdata' of a type (line 1551)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 8), event_166160, 'xdata', call_assignment_162288_166159)
        
        # Assigning a Call to a Name (line 1551):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_166163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 8), 'int')
        # Processing the call keyword arguments
        kwargs_166164 = {}
        # Getting the type of 'call_assignment_162287' (line 1551)
        call_assignment_162287_166161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'call_assignment_162287', False)
        # Obtaining the member '__getitem__' of a type (line 1551)
        getitem___166162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 8), call_assignment_162287_166161, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_166165 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___166162, *[int_166163], **kwargs_166164)
        
        # Assigning a type to the variable 'call_assignment_162289' (line 1551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'call_assignment_162289', getitem___call_result_166165)
        
        # Assigning a Name to a Attribute (line 1551):
        # Getting the type of 'call_assignment_162289' (line 1551)
        call_assignment_162289_166166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'call_assignment_162289')
        # Getting the type of 'event' (line 1551)
        event_166167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 21), 'event')
        # Setting the type of the member 'ydata' of a type (line 1551)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 21), event_166167, 'ydata', call_assignment_162289_166166)
        
        # Assigning a Name to a Attribute (line 1553):
        
        # Assigning a Name to a Attribute (line 1553):
        # Getting the type of 'event' (line 1553)
        event_166168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 27), 'event')
        # Getting the type of 'self' (line 1553)
        self_166169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 8), 'self')
        # Setting the type of the member '_prev_event' of a type (line 1553)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1553, 8), self_166169, '_prev_event', event_166168)
        # Getting the type of 'event' (line 1554)
        event_166170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 15), 'event')
        # Assigning a type to the variable 'stypy_return_type' (line 1554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1554, 8), 'stypy_return_type', event_166170)
        
        # ################# End of '_clean_event(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_clean_event' in the type store
        # Getting the type of 'stypy_return_type' (line 1540)
        stypy_return_type_166171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166171)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_clean_event'
        return stypy_return_type_166171


    @norecursion
    def press(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'press'
        module_type_store = module_type_store.open_function_context('press', 1556, 4, False)
        # Assigning a type to the variable 'self' (line 1557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1557, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget.press.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget.press.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget.press.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget.press.__dict__.__setitem__('stypy_function_name', '_SelectorWidget.press')
        _SelectorWidget.press.__dict__.__setitem__('stypy_param_names_list', ['event'])
        _SelectorWidget.press.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget.press.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget.press.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget.press.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget.press.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget.press.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget.press', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'press', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'press(...)' code ##################

        unicode_166172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1557, 8), 'unicode', u'Button press handler and validator')
        
        
        
        # Call to ignore(...): (line 1558)
        # Processing the call arguments (line 1558)
        # Getting the type of 'event' (line 1558)
        event_166175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 27), 'event', False)
        # Processing the call keyword arguments (line 1558)
        kwargs_166176 = {}
        # Getting the type of 'self' (line 1558)
        self_166173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 15), 'self', False)
        # Obtaining the member 'ignore' of a type (line 1558)
        ignore_166174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1558, 15), self_166173, 'ignore')
        # Calling ignore(args, kwargs) (line 1558)
        ignore_call_result_166177 = invoke(stypy.reporting.localization.Localization(__file__, 1558, 15), ignore_166174, *[event_166175], **kwargs_166176)
        
        # Applying the 'not' unary operator (line 1558)
        result_not__166178 = python_operator(stypy.reporting.localization.Localization(__file__, 1558, 11), 'not', ignore_call_result_166177)
        
        # Testing the type of an if condition (line 1558)
        if_condition_166179 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1558, 8), result_not__166178)
        # Assigning a type to the variable 'if_condition_166179' (line 1558)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1558, 8), 'if_condition_166179', if_condition_166179)
        # SSA begins for if statement (line 1558)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1559):
        
        # Assigning a Call to a Name (line 1559):
        
        # Call to _clean_event(...): (line 1559)
        # Processing the call arguments (line 1559)
        # Getting the type of 'event' (line 1559)
        event_166182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 38), 'event', False)
        # Processing the call keyword arguments (line 1559)
        kwargs_166183 = {}
        # Getting the type of 'self' (line 1559)
        self_166180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 20), 'self', False)
        # Obtaining the member '_clean_event' of a type (line 1559)
        _clean_event_166181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1559, 20), self_166180, '_clean_event')
        # Calling _clean_event(args, kwargs) (line 1559)
        _clean_event_call_result_166184 = invoke(stypy.reporting.localization.Localization(__file__, 1559, 20), _clean_event_166181, *[event_166182], **kwargs_166183)
        
        # Assigning a type to the variable 'event' (line 1559)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1559, 12), 'event', _clean_event_call_result_166184)
        
        # Assigning a Name to a Attribute (line 1560):
        
        # Assigning a Name to a Attribute (line 1560):
        # Getting the type of 'event' (line 1560)
        event_166185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 30), 'event')
        # Getting the type of 'self' (line 1560)
        self_166186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 12), 'self')
        # Setting the type of the member 'eventpress' of a type (line 1560)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1560, 12), self_166186, 'eventpress', event_166185)
        
        # Assigning a Name to a Attribute (line 1561):
        
        # Assigning a Name to a Attribute (line 1561):
        # Getting the type of 'event' (line 1561)
        event_166187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 31), 'event')
        # Getting the type of 'self' (line 1561)
        self_166188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 12), 'self')
        # Setting the type of the member '_prev_event' of a type (line 1561)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1561, 12), self_166188, '_prev_event', event_166187)
        
        # Assigning a BoolOp to a Name (line 1562):
        
        # Assigning a BoolOp to a Name (line 1562):
        
        # Evaluating a boolean operation
        # Getting the type of 'event' (line 1562)
        event_166189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 18), 'event')
        # Obtaining the member 'key' of a type (line 1562)
        key_166190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1562, 18), event_166189, 'key')
        unicode_166191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1562, 31), 'unicode', u'')
        # Applying the binary operator 'or' (line 1562)
        result_or_keyword_166192 = python_operator(stypy.reporting.localization.Localization(__file__, 1562, 18), 'or', key_166190, unicode_166191)
        
        # Assigning a type to the variable 'key' (line 1562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1562, 12), 'key', result_or_keyword_166192)
        
        # Assigning a Call to a Name (line 1563):
        
        # Assigning a Call to a Name (line 1563):
        
        # Call to replace(...): (line 1563)
        # Processing the call arguments (line 1563)
        unicode_166195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1563, 30), 'unicode', u'ctrl')
        unicode_166196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1563, 38), 'unicode', u'control')
        # Processing the call keyword arguments (line 1563)
        kwargs_166197 = {}
        # Getting the type of 'key' (line 1563)
        key_166193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 18), 'key', False)
        # Obtaining the member 'replace' of a type (line 1563)
        replace_166194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1563, 18), key_166193, 'replace')
        # Calling replace(args, kwargs) (line 1563)
        replace_call_result_166198 = invoke(stypy.reporting.localization.Localization(__file__, 1563, 18), replace_166194, *[unicode_166195, unicode_166196], **kwargs_166197)
        
        # Assigning a type to the variable 'key' (line 1563)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1563, 12), 'key', replace_call_result_166198)
        
        
        # Getting the type of 'key' (line 1565)
        key_166199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 15), 'key')
        
        # Obtaining the type of the subscript
        unicode_166200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1565, 47), 'unicode', u'move')
        # Getting the type of 'self' (line 1565)
        self_166201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 22), 'self')
        # Obtaining the member 'state_modifier_keys' of a type (line 1565)
        state_modifier_keys_166202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 22), self_166201, 'state_modifier_keys')
        # Obtaining the member '__getitem__' of a type (line 1565)
        getitem___166203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 22), state_modifier_keys_166202, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1565)
        subscript_call_result_166204 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 22), getitem___166203, unicode_166200)
        
        # Applying the binary operator '==' (line 1565)
        result_eq_166205 = python_operator(stypy.reporting.localization.Localization(__file__, 1565, 15), '==', key_166199, subscript_call_result_166204)
        
        # Testing the type of an if condition (line 1565)
        if_condition_166206 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1565, 12), result_eq_166205)
        # Assigning a type to the variable 'if_condition_166206' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 12), 'if_condition_166206', if_condition_166206)
        # SSA begins for if statement (line 1565)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to add(...): (line 1566)
        # Processing the call arguments (line 1566)
        unicode_166210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1566, 31), 'unicode', u'move')
        # Processing the call keyword arguments (line 1566)
        kwargs_166211 = {}
        # Getting the type of 'self' (line 1566)
        self_166207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 16), 'self', False)
        # Obtaining the member 'state' of a type (line 1566)
        state_166208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 16), self_166207, 'state')
        # Obtaining the member 'add' of a type (line 1566)
        add_166209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 16), state_166208, 'add')
        # Calling add(args, kwargs) (line 1566)
        add_call_result_166212 = invoke(stypy.reporting.localization.Localization(__file__, 1566, 16), add_166209, *[unicode_166210], **kwargs_166211)
        
        # SSA join for if statement (line 1565)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _press(...): (line 1567)
        # Processing the call arguments (line 1567)
        # Getting the type of 'event' (line 1567)
        event_166215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 24), 'event', False)
        # Processing the call keyword arguments (line 1567)
        kwargs_166216 = {}
        # Getting the type of 'self' (line 1567)
        self_166213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 12), 'self', False)
        # Obtaining the member '_press' of a type (line 1567)
        _press_166214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 12), self_166213, '_press')
        # Calling _press(args, kwargs) (line 1567)
        _press_call_result_166217 = invoke(stypy.reporting.localization.Localization(__file__, 1567, 12), _press_166214, *[event_166215], **kwargs_166216)
        
        # Getting the type of 'True' (line 1568)
        True_166218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 19), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 1568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1568, 12), 'stypy_return_type', True_166218)
        # SSA join for if statement (line 1558)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'False' (line 1569)
        False_166219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 1569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1569, 8), 'stypy_return_type', False_166219)
        
        # ################# End of 'press(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'press' in the type store
        # Getting the type of 'stypy_return_type' (line 1556)
        stypy_return_type_166220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166220)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'press'
        return stypy_return_type_166220


    @norecursion
    def _press(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_press'
        module_type_store = module_type_store.open_function_context('_press', 1571, 4, False)
        # Assigning a type to the variable 'self' (line 1572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1572, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget._press.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget._press.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget._press.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget._press.__dict__.__setitem__('stypy_function_name', '_SelectorWidget._press')
        _SelectorWidget._press.__dict__.__setitem__('stypy_param_names_list', ['event'])
        _SelectorWidget._press.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget._press.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget._press.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget._press.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget._press.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget._press.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget._press', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_press', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_press(...)' code ##################

        unicode_166221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1572, 8), 'unicode', u'Button press handler')
        pass
        
        # ################# End of '_press(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_press' in the type store
        # Getting the type of 'stypy_return_type' (line 1571)
        stypy_return_type_166222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166222)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_press'
        return stypy_return_type_166222


    @norecursion
    def release(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'release'
        module_type_store = module_type_store.open_function_context('release', 1575, 4, False)
        # Assigning a type to the variable 'self' (line 1576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1576, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget.release.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget.release.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget.release.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget.release.__dict__.__setitem__('stypy_function_name', '_SelectorWidget.release')
        _SelectorWidget.release.__dict__.__setitem__('stypy_param_names_list', ['event'])
        _SelectorWidget.release.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget.release.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget.release.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget.release.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget.release.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget.release.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget.release', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'release', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'release(...)' code ##################

        unicode_166223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1576, 8), 'unicode', u'Button release event handler and validator')
        
        
        # Evaluating a boolean operation
        
        
        # Call to ignore(...): (line 1577)
        # Processing the call arguments (line 1577)
        # Getting the type of 'event' (line 1577)
        event_166226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 27), 'event', False)
        # Processing the call keyword arguments (line 1577)
        kwargs_166227 = {}
        # Getting the type of 'self' (line 1577)
        self_166224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 15), 'self', False)
        # Obtaining the member 'ignore' of a type (line 1577)
        ignore_166225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 15), self_166224, 'ignore')
        # Calling ignore(args, kwargs) (line 1577)
        ignore_call_result_166228 = invoke(stypy.reporting.localization.Localization(__file__, 1577, 15), ignore_166225, *[event_166226], **kwargs_166227)
        
        # Applying the 'not' unary operator (line 1577)
        result_not__166229 = python_operator(stypy.reporting.localization.Localization(__file__, 1577, 11), 'not', ignore_call_result_166228)
        
        # Getting the type of 'self' (line 1577)
        self_166230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 38), 'self')
        # Obtaining the member 'eventpress' of a type (line 1577)
        eventpress_166231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 38), self_166230, 'eventpress')
        # Applying the binary operator 'and' (line 1577)
        result_and_keyword_166232 = python_operator(stypy.reporting.localization.Localization(__file__, 1577, 11), 'and', result_not__166229, eventpress_166231)
        
        # Testing the type of an if condition (line 1577)
        if_condition_166233 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1577, 8), result_and_keyword_166232)
        # Assigning a type to the variable 'if_condition_166233' (line 1577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1577, 8), 'if_condition_166233', if_condition_166233)
        # SSA begins for if statement (line 1577)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1578):
        
        # Assigning a Call to a Name (line 1578):
        
        # Call to _clean_event(...): (line 1578)
        # Processing the call arguments (line 1578)
        # Getting the type of 'event' (line 1578)
        event_166236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 38), 'event', False)
        # Processing the call keyword arguments (line 1578)
        kwargs_166237 = {}
        # Getting the type of 'self' (line 1578)
        self_166234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 20), 'self', False)
        # Obtaining the member '_clean_event' of a type (line 1578)
        _clean_event_166235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1578, 20), self_166234, '_clean_event')
        # Calling _clean_event(args, kwargs) (line 1578)
        _clean_event_call_result_166238 = invoke(stypy.reporting.localization.Localization(__file__, 1578, 20), _clean_event_166235, *[event_166236], **kwargs_166237)
        
        # Assigning a type to the variable 'event' (line 1578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1578, 12), 'event', _clean_event_call_result_166238)
        
        # Assigning a Name to a Attribute (line 1579):
        
        # Assigning a Name to a Attribute (line 1579):
        # Getting the type of 'event' (line 1579)
        event_166239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1579, 32), 'event')
        # Getting the type of 'self' (line 1579)
        self_166240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1579, 12), 'self')
        # Setting the type of the member 'eventrelease' of a type (line 1579)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1579, 12), self_166240, 'eventrelease', event_166239)
        
        # Call to _release(...): (line 1580)
        # Processing the call arguments (line 1580)
        # Getting the type of 'event' (line 1580)
        event_166243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 26), 'event', False)
        # Processing the call keyword arguments (line 1580)
        kwargs_166244 = {}
        # Getting the type of 'self' (line 1580)
        self_166241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 12), 'self', False)
        # Obtaining the member '_release' of a type (line 1580)
        _release_166242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1580, 12), self_166241, '_release')
        # Calling _release(args, kwargs) (line 1580)
        _release_call_result_166245 = invoke(stypy.reporting.localization.Localization(__file__, 1580, 12), _release_166242, *[event_166243], **kwargs_166244)
        
        
        # Assigning a Name to a Attribute (line 1581):
        
        # Assigning a Name to a Attribute (line 1581):
        # Getting the type of 'None' (line 1581)
        None_166246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 30), 'None')
        # Getting the type of 'self' (line 1581)
        self_166247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 12), 'self')
        # Setting the type of the member 'eventpress' of a type (line 1581)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1581, 12), self_166247, 'eventpress', None_166246)
        
        # Assigning a Name to a Attribute (line 1582):
        
        # Assigning a Name to a Attribute (line 1582):
        # Getting the type of 'None' (line 1582)
        None_166248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 32), 'None')
        # Getting the type of 'self' (line 1582)
        self_166249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 12), 'self')
        # Setting the type of the member 'eventrelease' of a type (line 1582)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1582, 12), self_166249, 'eventrelease', None_166248)
        
        # Call to discard(...): (line 1583)
        # Processing the call arguments (line 1583)
        unicode_166253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1583, 31), 'unicode', u'move')
        # Processing the call keyword arguments (line 1583)
        kwargs_166254 = {}
        # Getting the type of 'self' (line 1583)
        self_166250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 12), 'self', False)
        # Obtaining the member 'state' of a type (line 1583)
        state_166251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 12), self_166250, 'state')
        # Obtaining the member 'discard' of a type (line 1583)
        discard_166252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 12), state_166251, 'discard')
        # Calling discard(args, kwargs) (line 1583)
        discard_call_result_166255 = invoke(stypy.reporting.localization.Localization(__file__, 1583, 12), discard_166252, *[unicode_166253], **kwargs_166254)
        
        # Getting the type of 'True' (line 1584)
        True_166256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 19), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 1584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1584, 12), 'stypy_return_type', True_166256)
        # SSA join for if statement (line 1577)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'False' (line 1585)
        False_166257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 1585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1585, 8), 'stypy_return_type', False_166257)
        
        # ################# End of 'release(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'release' in the type store
        # Getting the type of 'stypy_return_type' (line 1575)
        stypy_return_type_166258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166258)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'release'
        return stypy_return_type_166258


    @norecursion
    def _release(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_release'
        module_type_store = module_type_store.open_function_context('_release', 1587, 4, False)
        # Assigning a type to the variable 'self' (line 1588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1588, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget._release.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget._release.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget._release.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget._release.__dict__.__setitem__('stypy_function_name', '_SelectorWidget._release')
        _SelectorWidget._release.__dict__.__setitem__('stypy_param_names_list', ['event'])
        _SelectorWidget._release.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget._release.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget._release.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget._release.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget._release.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget._release.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget._release', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_release', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_release(...)' code ##################

        unicode_166259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1588, 8), 'unicode', u'Button release event handler')
        pass
        
        # ################# End of '_release(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_release' in the type store
        # Getting the type of 'stypy_return_type' (line 1587)
        stypy_return_type_166260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166260)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_release'
        return stypy_return_type_166260


    @norecursion
    def onmove(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'onmove'
        module_type_store = module_type_store.open_function_context('onmove', 1591, 4, False)
        # Assigning a type to the variable 'self' (line 1592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1592, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget.onmove.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget.onmove.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget.onmove.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget.onmove.__dict__.__setitem__('stypy_function_name', '_SelectorWidget.onmove')
        _SelectorWidget.onmove.__dict__.__setitem__('stypy_param_names_list', ['event'])
        _SelectorWidget.onmove.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget.onmove.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget.onmove.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget.onmove.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget.onmove.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget.onmove.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget.onmove', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'onmove', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'onmove(...)' code ##################

        unicode_166261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1592, 8), 'unicode', u'Cursor move event handler and validator')
        
        
        # Evaluating a boolean operation
        
        
        # Call to ignore(...): (line 1593)
        # Processing the call arguments (line 1593)
        # Getting the type of 'event' (line 1593)
        event_166264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 27), 'event', False)
        # Processing the call keyword arguments (line 1593)
        kwargs_166265 = {}
        # Getting the type of 'self' (line 1593)
        self_166262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 15), 'self', False)
        # Obtaining the member 'ignore' of a type (line 1593)
        ignore_166263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 15), self_166262, 'ignore')
        # Calling ignore(args, kwargs) (line 1593)
        ignore_call_result_166266 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 15), ignore_166263, *[event_166264], **kwargs_166265)
        
        # Applying the 'not' unary operator (line 1593)
        result_not__166267 = python_operator(stypy.reporting.localization.Localization(__file__, 1593, 11), 'not', ignore_call_result_166266)
        
        # Getting the type of 'self' (line 1593)
        self_166268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 38), 'self')
        # Obtaining the member 'eventpress' of a type (line 1593)
        eventpress_166269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 38), self_166268, 'eventpress')
        # Applying the binary operator 'and' (line 1593)
        result_and_keyword_166270 = python_operator(stypy.reporting.localization.Localization(__file__, 1593, 11), 'and', result_not__166267, eventpress_166269)
        
        # Testing the type of an if condition (line 1593)
        if_condition_166271 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1593, 8), result_and_keyword_166270)
        # Assigning a type to the variable 'if_condition_166271' (line 1593)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 8), 'if_condition_166271', if_condition_166271)
        # SSA begins for if statement (line 1593)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1594):
        
        # Assigning a Call to a Name (line 1594):
        
        # Call to _clean_event(...): (line 1594)
        # Processing the call arguments (line 1594)
        # Getting the type of 'event' (line 1594)
        event_166274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 38), 'event', False)
        # Processing the call keyword arguments (line 1594)
        kwargs_166275 = {}
        # Getting the type of 'self' (line 1594)
        self_166272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 20), 'self', False)
        # Obtaining the member '_clean_event' of a type (line 1594)
        _clean_event_166273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1594, 20), self_166272, '_clean_event')
        # Calling _clean_event(args, kwargs) (line 1594)
        _clean_event_call_result_166276 = invoke(stypy.reporting.localization.Localization(__file__, 1594, 20), _clean_event_166273, *[event_166274], **kwargs_166275)
        
        # Assigning a type to the variable 'event' (line 1594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1594, 12), 'event', _clean_event_call_result_166276)
        
        # Call to _onmove(...): (line 1595)
        # Processing the call arguments (line 1595)
        # Getting the type of 'event' (line 1595)
        event_166279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 25), 'event', False)
        # Processing the call keyword arguments (line 1595)
        kwargs_166280 = {}
        # Getting the type of 'self' (line 1595)
        self_166277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 12), 'self', False)
        # Obtaining the member '_onmove' of a type (line 1595)
        _onmove_166278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1595, 12), self_166277, '_onmove')
        # Calling _onmove(args, kwargs) (line 1595)
        _onmove_call_result_166281 = invoke(stypy.reporting.localization.Localization(__file__, 1595, 12), _onmove_166278, *[event_166279], **kwargs_166280)
        
        # Getting the type of 'True' (line 1596)
        True_166282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 19), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 1596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1596, 12), 'stypy_return_type', True_166282)
        # SSA join for if statement (line 1593)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'False' (line 1597)
        False_166283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 1597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1597, 8), 'stypy_return_type', False_166283)
        
        # ################# End of 'onmove(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'onmove' in the type store
        # Getting the type of 'stypy_return_type' (line 1591)
        stypy_return_type_166284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166284)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'onmove'
        return stypy_return_type_166284


    @norecursion
    def _onmove(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onmove'
        module_type_store = module_type_store.open_function_context('_onmove', 1599, 4, False)
        # Assigning a type to the variable 'self' (line 1600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1600, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget._onmove.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget._onmove.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget._onmove.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget._onmove.__dict__.__setitem__('stypy_function_name', '_SelectorWidget._onmove')
        _SelectorWidget._onmove.__dict__.__setitem__('stypy_param_names_list', ['event'])
        _SelectorWidget._onmove.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget._onmove.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget._onmove.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget._onmove.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget._onmove.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget._onmove.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget._onmove', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onmove', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onmove(...)' code ##################

        unicode_166285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1600, 8), 'unicode', u'Cursor move event handler')
        pass
        
        # ################# End of '_onmove(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onmove' in the type store
        # Getting the type of 'stypy_return_type' (line 1599)
        stypy_return_type_166286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166286)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onmove'
        return stypy_return_type_166286


    @norecursion
    def on_scroll(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'on_scroll'
        module_type_store = module_type_store.open_function_context('on_scroll', 1603, 4, False)
        # Assigning a type to the variable 'self' (line 1604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1604, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget.on_scroll.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget.on_scroll.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget.on_scroll.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget.on_scroll.__dict__.__setitem__('stypy_function_name', '_SelectorWidget.on_scroll')
        _SelectorWidget.on_scroll.__dict__.__setitem__('stypy_param_names_list', ['event'])
        _SelectorWidget.on_scroll.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget.on_scroll.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget.on_scroll.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget.on_scroll.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget.on_scroll.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget.on_scroll.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget.on_scroll', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'on_scroll', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'on_scroll(...)' code ##################

        unicode_166287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1604, 8), 'unicode', u'Mouse scroll event handler and validator')
        
        
        
        # Call to ignore(...): (line 1605)
        # Processing the call arguments (line 1605)
        # Getting the type of 'event' (line 1605)
        event_166290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 27), 'event', False)
        # Processing the call keyword arguments (line 1605)
        kwargs_166291 = {}
        # Getting the type of 'self' (line 1605)
        self_166288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 15), 'self', False)
        # Obtaining the member 'ignore' of a type (line 1605)
        ignore_166289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1605, 15), self_166288, 'ignore')
        # Calling ignore(args, kwargs) (line 1605)
        ignore_call_result_166292 = invoke(stypy.reporting.localization.Localization(__file__, 1605, 15), ignore_166289, *[event_166290], **kwargs_166291)
        
        # Applying the 'not' unary operator (line 1605)
        result_not__166293 = python_operator(stypy.reporting.localization.Localization(__file__, 1605, 11), 'not', ignore_call_result_166292)
        
        # Testing the type of an if condition (line 1605)
        if_condition_166294 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1605, 8), result_not__166293)
        # Assigning a type to the variable 'if_condition_166294' (line 1605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 8), 'if_condition_166294', if_condition_166294)
        # SSA begins for if statement (line 1605)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _on_scroll(...): (line 1606)
        # Processing the call arguments (line 1606)
        # Getting the type of 'event' (line 1606)
        event_166297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 28), 'event', False)
        # Processing the call keyword arguments (line 1606)
        kwargs_166298 = {}
        # Getting the type of 'self' (line 1606)
        self_166295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 12), 'self', False)
        # Obtaining the member '_on_scroll' of a type (line 1606)
        _on_scroll_166296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1606, 12), self_166295, '_on_scroll')
        # Calling _on_scroll(args, kwargs) (line 1606)
        _on_scroll_call_result_166299 = invoke(stypy.reporting.localization.Localization(__file__, 1606, 12), _on_scroll_166296, *[event_166297], **kwargs_166298)
        
        # SSA join for if statement (line 1605)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'on_scroll(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'on_scroll' in the type store
        # Getting the type of 'stypy_return_type' (line 1603)
        stypy_return_type_166300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166300)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'on_scroll'
        return stypy_return_type_166300


    @norecursion
    def _on_scroll(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_on_scroll'
        module_type_store = module_type_store.open_function_context('_on_scroll', 1608, 4, False)
        # Assigning a type to the variable 'self' (line 1609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1609, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget._on_scroll.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget._on_scroll.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget._on_scroll.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget._on_scroll.__dict__.__setitem__('stypy_function_name', '_SelectorWidget._on_scroll')
        _SelectorWidget._on_scroll.__dict__.__setitem__('stypy_param_names_list', ['event'])
        _SelectorWidget._on_scroll.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget._on_scroll.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget._on_scroll.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget._on_scroll.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget._on_scroll.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget._on_scroll.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget._on_scroll', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_on_scroll', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_on_scroll(...)' code ##################

        unicode_166301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1609, 8), 'unicode', u'Mouse scroll event handler')
        pass
        
        # ################# End of '_on_scroll(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_on_scroll' in the type store
        # Getting the type of 'stypy_return_type' (line 1608)
        stypy_return_type_166302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1608, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166302)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_on_scroll'
        return stypy_return_type_166302


    @norecursion
    def on_key_press(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'on_key_press'
        module_type_store = module_type_store.open_function_context('on_key_press', 1612, 4, False)
        # Assigning a type to the variable 'self' (line 1613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1613, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget.on_key_press.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget.on_key_press.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget.on_key_press.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget.on_key_press.__dict__.__setitem__('stypy_function_name', '_SelectorWidget.on_key_press')
        _SelectorWidget.on_key_press.__dict__.__setitem__('stypy_param_names_list', ['event'])
        _SelectorWidget.on_key_press.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget.on_key_press.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget.on_key_press.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget.on_key_press.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget.on_key_press.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget.on_key_press.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget.on_key_press', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'on_key_press', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'on_key_press(...)' code ##################

        unicode_166303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1613, 8), 'unicode', u'Key press event handler and validator for all selection widgets')
        
        # Getting the type of 'self' (line 1614)
        self_166304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 11), 'self')
        # Obtaining the member 'active' of a type (line 1614)
        active_166305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1614, 11), self_166304, 'active')
        # Testing the type of an if condition (line 1614)
        if_condition_166306 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1614, 8), active_166305)
        # Assigning a type to the variable 'if_condition_166306' (line 1614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1614, 8), 'if_condition_166306', if_condition_166306)
        # SSA begins for if statement (line 1614)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BoolOp to a Name (line 1615):
        
        # Assigning a BoolOp to a Name (line 1615):
        
        # Evaluating a boolean operation
        # Getting the type of 'event' (line 1615)
        event_166307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 18), 'event')
        # Obtaining the member 'key' of a type (line 1615)
        key_166308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1615, 18), event_166307, 'key')
        unicode_166309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1615, 31), 'unicode', u'')
        # Applying the binary operator 'or' (line 1615)
        result_or_keyword_166310 = python_operator(stypy.reporting.localization.Localization(__file__, 1615, 18), 'or', key_166308, unicode_166309)
        
        # Assigning a type to the variable 'key' (line 1615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1615, 12), 'key', result_or_keyword_166310)
        
        # Assigning a Call to a Name (line 1616):
        
        # Assigning a Call to a Name (line 1616):
        
        # Call to replace(...): (line 1616)
        # Processing the call arguments (line 1616)
        unicode_166313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1616, 30), 'unicode', u'ctrl')
        unicode_166314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1616, 38), 'unicode', u'control')
        # Processing the call keyword arguments (line 1616)
        kwargs_166315 = {}
        # Getting the type of 'key' (line 1616)
        key_166311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 18), 'key', False)
        # Obtaining the member 'replace' of a type (line 1616)
        replace_166312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1616, 18), key_166311, 'replace')
        # Calling replace(args, kwargs) (line 1616)
        replace_call_result_166316 = invoke(stypy.reporting.localization.Localization(__file__, 1616, 18), replace_166312, *[unicode_166313, unicode_166314], **kwargs_166315)
        
        # Assigning a type to the variable 'key' (line 1616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1616, 12), 'key', replace_call_result_166316)
        
        
        # Getting the type of 'key' (line 1617)
        key_166317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 15), 'key')
        
        # Obtaining the type of the subscript
        unicode_166318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1617, 47), 'unicode', u'clear')
        # Getting the type of 'self' (line 1617)
        self_166319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 22), 'self')
        # Obtaining the member 'state_modifier_keys' of a type (line 1617)
        state_modifier_keys_166320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1617, 22), self_166319, 'state_modifier_keys')
        # Obtaining the member '__getitem__' of a type (line 1617)
        getitem___166321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1617, 22), state_modifier_keys_166320, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1617)
        subscript_call_result_166322 = invoke(stypy.reporting.localization.Localization(__file__, 1617, 22), getitem___166321, unicode_166318)
        
        # Applying the binary operator '==' (line 1617)
        result_eq_166323 = python_operator(stypy.reporting.localization.Localization(__file__, 1617, 15), '==', key_166317, subscript_call_result_166322)
        
        # Testing the type of an if condition (line 1617)
        if_condition_166324 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1617, 12), result_eq_166323)
        # Assigning a type to the variable 'if_condition_166324' (line 1617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1617, 12), 'if_condition_166324', if_condition_166324)
        # SSA begins for if statement (line 1617)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 1618)
        self_166325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 30), 'self')
        # Obtaining the member 'artists' of a type (line 1618)
        artists_166326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1618, 30), self_166325, 'artists')
        # Testing the type of a for loop iterable (line 1618)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1618, 16), artists_166326)
        # Getting the type of the for loop variable (line 1618)
        for_loop_var_166327 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1618, 16), artists_166326)
        # Assigning a type to the variable 'artist' (line 1618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1618, 16), 'artist', for_loop_var_166327)
        # SSA begins for a for statement (line 1618)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_visible(...): (line 1619)
        # Processing the call arguments (line 1619)
        # Getting the type of 'False' (line 1619)
        False_166330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 39), 'False', False)
        # Processing the call keyword arguments (line 1619)
        kwargs_166331 = {}
        # Getting the type of 'artist' (line 1619)
        artist_166328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 20), 'artist', False)
        # Obtaining the member 'set_visible' of a type (line 1619)
        set_visible_166329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1619, 20), artist_166328, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1619)
        set_visible_call_result_166332 = invoke(stypy.reporting.localization.Localization(__file__, 1619, 20), set_visible_166329, *[False_166330], **kwargs_166331)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to update(...): (line 1620)
        # Processing the call keyword arguments (line 1620)
        kwargs_166335 = {}
        # Getting the type of 'self' (line 1620)
        self_166333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 16), 'self', False)
        # Obtaining the member 'update' of a type (line 1620)
        update_166334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1620, 16), self_166333, 'update')
        # Calling update(args, kwargs) (line 1620)
        update_call_result_166336 = invoke(stypy.reporting.localization.Localization(__file__, 1620, 16), update_166334, *[], **kwargs_166335)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1621, 16), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1617)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to items(...): (line 1622)
        # Processing the call keyword arguments (line 1622)
        kwargs_166340 = {}
        # Getting the type of 'self' (line 1622)
        self_166337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 37), 'self', False)
        # Obtaining the member 'state_modifier_keys' of a type (line 1622)
        state_modifier_keys_166338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1622, 37), self_166337, 'state_modifier_keys')
        # Obtaining the member 'items' of a type (line 1622)
        items_166339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1622, 37), state_modifier_keys_166338, 'items')
        # Calling items(args, kwargs) (line 1622)
        items_call_result_166341 = invoke(stypy.reporting.localization.Localization(__file__, 1622, 37), items_166339, *[], **kwargs_166340)
        
        # Testing the type of a for loop iterable (line 1622)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1622, 12), items_call_result_166341)
        # Getting the type of the for loop variable (line 1622)
        for_loop_var_166342 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1622, 12), items_call_result_166341)
        # Assigning a type to the variable 'state' (line 1622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1622, 12), 'state', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1622, 12), for_loop_var_166342))
        # Assigning a type to the variable 'modifier' (line 1622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1622, 12), 'modifier', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1622, 12), for_loop_var_166342))
        # SSA begins for a for statement (line 1622)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'modifier' (line 1623)
        modifier_166343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 19), 'modifier')
        # Getting the type of 'key' (line 1623)
        key_166344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 31), 'key')
        # Applying the binary operator 'in' (line 1623)
        result_contains_166345 = python_operator(stypy.reporting.localization.Localization(__file__, 1623, 19), 'in', modifier_166343, key_166344)
        
        # Testing the type of an if condition (line 1623)
        if_condition_166346 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1623, 16), result_contains_166345)
        # Assigning a type to the variable 'if_condition_166346' (line 1623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1623, 16), 'if_condition_166346', if_condition_166346)
        # SSA begins for if statement (line 1623)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to add(...): (line 1624)
        # Processing the call arguments (line 1624)
        # Getting the type of 'state' (line 1624)
        state_166350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1624, 35), 'state', False)
        # Processing the call keyword arguments (line 1624)
        kwargs_166351 = {}
        # Getting the type of 'self' (line 1624)
        self_166347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1624, 20), 'self', False)
        # Obtaining the member 'state' of a type (line 1624)
        state_166348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1624, 20), self_166347, 'state')
        # Obtaining the member 'add' of a type (line 1624)
        add_166349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1624, 20), state_166348, 'add')
        # Calling add(args, kwargs) (line 1624)
        add_call_result_166352 = invoke(stypy.reporting.localization.Localization(__file__, 1624, 20), add_166349, *[state_166350], **kwargs_166351)
        
        # SSA join for if statement (line 1623)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _on_key_press(...): (line 1625)
        # Processing the call arguments (line 1625)
        # Getting the type of 'event' (line 1625)
        event_166355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 31), 'event', False)
        # Processing the call keyword arguments (line 1625)
        kwargs_166356 = {}
        # Getting the type of 'self' (line 1625)
        self_166353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 12), 'self', False)
        # Obtaining the member '_on_key_press' of a type (line 1625)
        _on_key_press_166354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1625, 12), self_166353, '_on_key_press')
        # Calling _on_key_press(args, kwargs) (line 1625)
        _on_key_press_call_result_166357 = invoke(stypy.reporting.localization.Localization(__file__, 1625, 12), _on_key_press_166354, *[event_166355], **kwargs_166356)
        
        # SSA join for if statement (line 1614)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'on_key_press(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'on_key_press' in the type store
        # Getting the type of 'stypy_return_type' (line 1612)
        stypy_return_type_166358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166358)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'on_key_press'
        return stypy_return_type_166358


    @norecursion
    def _on_key_press(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_on_key_press'
        module_type_store = module_type_store.open_function_context('_on_key_press', 1627, 4, False)
        # Assigning a type to the variable 'self' (line 1628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget._on_key_press.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget._on_key_press.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget._on_key_press.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget._on_key_press.__dict__.__setitem__('stypy_function_name', '_SelectorWidget._on_key_press')
        _SelectorWidget._on_key_press.__dict__.__setitem__('stypy_param_names_list', ['event'])
        _SelectorWidget._on_key_press.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget._on_key_press.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget._on_key_press.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget._on_key_press.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget._on_key_press.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget._on_key_press.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget._on_key_press', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_on_key_press', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_on_key_press(...)' code ##################

        unicode_166359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1629, (-1)), 'unicode', u'Key press event handler - use for widget-specific key press actions.\n        ')
        pass
        
        # ################# End of '_on_key_press(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_on_key_press' in the type store
        # Getting the type of 'stypy_return_type' (line 1627)
        stypy_return_type_166360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166360)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_on_key_press'
        return stypy_return_type_166360


    @norecursion
    def on_key_release(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'on_key_release'
        module_type_store = module_type_store.open_function_context('on_key_release', 1632, 4, False)
        # Assigning a type to the variable 'self' (line 1633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1633, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget.on_key_release.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget.on_key_release.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget.on_key_release.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget.on_key_release.__dict__.__setitem__('stypy_function_name', '_SelectorWidget.on_key_release')
        _SelectorWidget.on_key_release.__dict__.__setitem__('stypy_param_names_list', ['event'])
        _SelectorWidget.on_key_release.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget.on_key_release.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget.on_key_release.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget.on_key_release.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget.on_key_release.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget.on_key_release.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget.on_key_release', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'on_key_release', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'on_key_release(...)' code ##################

        unicode_166361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1633, 8), 'unicode', u'Key release event handler and validator')
        
        # Getting the type of 'self' (line 1634)
        self_166362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 11), 'self')
        # Obtaining the member 'active' of a type (line 1634)
        active_166363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1634, 11), self_166362, 'active')
        # Testing the type of an if condition (line 1634)
        if_condition_166364 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1634, 8), active_166363)
        # Assigning a type to the variable 'if_condition_166364' (line 1634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1634, 8), 'if_condition_166364', if_condition_166364)
        # SSA begins for if statement (line 1634)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BoolOp to a Name (line 1635):
        
        # Assigning a BoolOp to a Name (line 1635):
        
        # Evaluating a boolean operation
        # Getting the type of 'event' (line 1635)
        event_166365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 18), 'event')
        # Obtaining the member 'key' of a type (line 1635)
        key_166366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1635, 18), event_166365, 'key')
        unicode_166367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1635, 31), 'unicode', u'')
        # Applying the binary operator 'or' (line 1635)
        result_or_keyword_166368 = python_operator(stypy.reporting.localization.Localization(__file__, 1635, 18), 'or', key_166366, unicode_166367)
        
        # Assigning a type to the variable 'key' (line 1635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1635, 12), 'key', result_or_keyword_166368)
        
        
        # Call to items(...): (line 1636)
        # Processing the call keyword arguments (line 1636)
        kwargs_166372 = {}
        # Getting the type of 'self' (line 1636)
        self_166369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 37), 'self', False)
        # Obtaining the member 'state_modifier_keys' of a type (line 1636)
        state_modifier_keys_166370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1636, 37), self_166369, 'state_modifier_keys')
        # Obtaining the member 'items' of a type (line 1636)
        items_166371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1636, 37), state_modifier_keys_166370, 'items')
        # Calling items(args, kwargs) (line 1636)
        items_call_result_166373 = invoke(stypy.reporting.localization.Localization(__file__, 1636, 37), items_166371, *[], **kwargs_166372)
        
        # Testing the type of a for loop iterable (line 1636)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1636, 12), items_call_result_166373)
        # Getting the type of the for loop variable (line 1636)
        for_loop_var_166374 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1636, 12), items_call_result_166373)
        # Assigning a type to the variable 'state' (line 1636)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1636, 12), 'state', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1636, 12), for_loop_var_166374))
        # Assigning a type to the variable 'modifier' (line 1636)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1636, 12), 'modifier', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1636, 12), for_loop_var_166374))
        # SSA begins for a for statement (line 1636)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'modifier' (line 1637)
        modifier_166375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 19), 'modifier')
        # Getting the type of 'key' (line 1637)
        key_166376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 31), 'key')
        # Applying the binary operator 'in' (line 1637)
        result_contains_166377 = python_operator(stypy.reporting.localization.Localization(__file__, 1637, 19), 'in', modifier_166375, key_166376)
        
        # Testing the type of an if condition (line 1637)
        if_condition_166378 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1637, 16), result_contains_166377)
        # Assigning a type to the variable 'if_condition_166378' (line 1637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 16), 'if_condition_166378', if_condition_166378)
        # SSA begins for if statement (line 1637)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to discard(...): (line 1638)
        # Processing the call arguments (line 1638)
        # Getting the type of 'state' (line 1638)
        state_166382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 39), 'state', False)
        # Processing the call keyword arguments (line 1638)
        kwargs_166383 = {}
        # Getting the type of 'self' (line 1638)
        self_166379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 20), 'self', False)
        # Obtaining the member 'state' of a type (line 1638)
        state_166380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1638, 20), self_166379, 'state')
        # Obtaining the member 'discard' of a type (line 1638)
        discard_166381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1638, 20), state_166380, 'discard')
        # Calling discard(args, kwargs) (line 1638)
        discard_call_result_166384 = invoke(stypy.reporting.localization.Localization(__file__, 1638, 20), discard_166381, *[state_166382], **kwargs_166383)
        
        # SSA join for if statement (line 1637)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _on_key_release(...): (line 1639)
        # Processing the call arguments (line 1639)
        # Getting the type of 'event' (line 1639)
        event_166387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 33), 'event', False)
        # Processing the call keyword arguments (line 1639)
        kwargs_166388 = {}
        # Getting the type of 'self' (line 1639)
        self_166385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 12), 'self', False)
        # Obtaining the member '_on_key_release' of a type (line 1639)
        _on_key_release_166386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1639, 12), self_166385, '_on_key_release')
        # Calling _on_key_release(args, kwargs) (line 1639)
        _on_key_release_call_result_166389 = invoke(stypy.reporting.localization.Localization(__file__, 1639, 12), _on_key_release_166386, *[event_166387], **kwargs_166388)
        
        # SSA join for if statement (line 1634)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'on_key_release(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'on_key_release' in the type store
        # Getting the type of 'stypy_return_type' (line 1632)
        stypy_return_type_166390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166390)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'on_key_release'
        return stypy_return_type_166390


    @norecursion
    def _on_key_release(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_on_key_release'
        module_type_store = module_type_store.open_function_context('_on_key_release', 1641, 4, False)
        # Assigning a type to the variable 'self' (line 1642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1642, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget._on_key_release.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget._on_key_release.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget._on_key_release.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget._on_key_release.__dict__.__setitem__('stypy_function_name', '_SelectorWidget._on_key_release')
        _SelectorWidget._on_key_release.__dict__.__setitem__('stypy_param_names_list', ['event'])
        _SelectorWidget._on_key_release.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget._on_key_release.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget._on_key_release.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget._on_key_release.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget._on_key_release.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget._on_key_release.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget._on_key_release', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_on_key_release', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_on_key_release(...)' code ##################

        unicode_166391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1642, 8), 'unicode', u'Key release event handler')
        pass
        
        # ################# End of '_on_key_release(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_on_key_release' in the type store
        # Getting the type of 'stypy_return_type' (line 1641)
        stypy_return_type_166392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166392)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_on_key_release'
        return stypy_return_type_166392


    @norecursion
    def set_visible(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_visible'
        module_type_store = module_type_store.open_function_context('set_visible', 1645, 4, False)
        # Assigning a type to the variable 'self' (line 1646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _SelectorWidget.set_visible.__dict__.__setitem__('stypy_localization', localization)
        _SelectorWidget.set_visible.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _SelectorWidget.set_visible.__dict__.__setitem__('stypy_type_store', module_type_store)
        _SelectorWidget.set_visible.__dict__.__setitem__('stypy_function_name', '_SelectorWidget.set_visible')
        _SelectorWidget.set_visible.__dict__.__setitem__('stypy_param_names_list', ['visible'])
        _SelectorWidget.set_visible.__dict__.__setitem__('stypy_varargs_param_name', None)
        _SelectorWidget.set_visible.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _SelectorWidget.set_visible.__dict__.__setitem__('stypy_call_defaults', defaults)
        _SelectorWidget.set_visible.__dict__.__setitem__('stypy_call_varargs', varargs)
        _SelectorWidget.set_visible.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _SelectorWidget.set_visible.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_SelectorWidget.set_visible', ['visible'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_visible', localization, ['visible'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_visible(...)' code ##################

        unicode_166393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1646, 8), 'unicode', u' Set the visibility of our artists ')
        
        # Assigning a Name to a Attribute (line 1647):
        
        # Assigning a Name to a Attribute (line 1647):
        # Getting the type of 'visible' (line 1647)
        visible_166394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 23), 'visible')
        # Getting the type of 'self' (line 1647)
        self_166395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 8), 'self')
        # Setting the type of the member 'visible' of a type (line 1647)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1647, 8), self_166395, 'visible', visible_166394)
        
        # Getting the type of 'self' (line 1648)
        self_166396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 22), 'self')
        # Obtaining the member 'artists' of a type (line 1648)
        artists_166397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 22), self_166396, 'artists')
        # Testing the type of a for loop iterable (line 1648)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1648, 8), artists_166397)
        # Getting the type of the for loop variable (line 1648)
        for_loop_var_166398 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1648, 8), artists_166397)
        # Assigning a type to the variable 'artist' (line 1648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 8), 'artist', for_loop_var_166398)
        # SSA begins for a for statement (line 1648)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_visible(...): (line 1649)
        # Processing the call arguments (line 1649)
        # Getting the type of 'visible' (line 1649)
        visible_166401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 31), 'visible', False)
        # Processing the call keyword arguments (line 1649)
        kwargs_166402 = {}
        # Getting the type of 'artist' (line 1649)
        artist_166399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 12), 'artist', False)
        # Obtaining the member 'set_visible' of a type (line 1649)
        set_visible_166400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1649, 12), artist_166399, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1649)
        set_visible_call_result_166403 = invoke(stypy.reporting.localization.Localization(__file__, 1649, 12), set_visible_166400, *[visible_166401], **kwargs_166402)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_visible(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_visible' in the type store
        # Getting the type of 'stypy_return_type' (line 1645)
        stypy_return_type_166404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166404)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_visible'
        return stypy_return_type_166404


# Assigning a type to the variable '_SelectorWidget' (line 1423)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1423, 0), '_SelectorWidget', _SelectorWidget)
# Declaration of the 'SpanSelector' class
# Getting the type of '_SelectorWidget' (line 1652)
_SelectorWidget_166405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 19), '_SelectorWidget')

class SpanSelector(_SelectorWidget_166405, ):
    unicode_166406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1709, (-1)), 'unicode', u'\n    Visually select a min/max range on a single axis and call a function with\n    those values.\n\n    To guarantee that the selector remains responsive, keep a reference to\n    it.\n\n    In order to turn off the SpanSelector, set `span_selector.active=False`. To\n    turn it back on, set `span_selector.active=True`.\n\n    Parameters\n    ----------\n    ax :  :class:`matplotlib.axes.Axes` object\n\n    onselect : func(min, max), min/max are floats\n\n    direction : "horizontal" or "vertical"\n      The axis along which to draw the span selector\n\n    minspan : float, default is None\n     If selection is less than *minspan*, do not call *onselect*\n\n    useblit : bool, default is False\n      If True, use the backend-dependent blitting features for faster\n      canvas updates. Only available for GTKAgg right now.\n\n    rectprops : dict, default is None\n      Dictionary of :class:`matplotlib.patches.Patch` properties\n\n    onmove_callback : func(min, max), min/max are floats, default is None\n      Called on mouse move while the span is being selected\n\n    span_stays : bool, default is False\n      If True, the span stays visible after the mouse is released\n\n    button : int or list of ints\n      Determines which mouse buttons activate the span selector\n        1 = left mouse button\n\n        2 = center mouse button (scroll wheel)\n\n        3 = right mouse button\n\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> import matplotlib.widgets as mwidgets\n    >>> fig, ax = plt.subplots()\n    >>> ax.plot([1, 2, 3], [10, 50, 100])\n    >>> def onselect(vmin, vmax):\n            print(vmin, vmax)\n    >>> rectprops = dict(facecolor=\'blue\', alpha=0.5)\n    >>> span = mwidgets.SpanSelector(ax, onselect, \'horizontal\',\n                                     rectprops=rectprops)\n    >>> fig.show()\n\n    See also: :ref:`sphx_glr_gallery_widgets_span_selector.py`\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1711)
        None_166407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 56), 'None')
        # Getting the type of 'False' (line 1711)
        False_166408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 70), 'False')
        # Getting the type of 'None' (line 1712)
        None_166409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 27), 'None')
        # Getting the type of 'None' (line 1712)
        None_166410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 49), 'None')
        # Getting the type of 'False' (line 1712)
        False_166411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 66), 'False')
        # Getting the type of 'None' (line 1713)
        None_166412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 24), 'None')
        defaults = [None_166407, False_166408, None_166409, None_166410, False_166411, None_166412]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1711, 4, False)
        # Assigning a type to the variable 'self' (line 1712)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1712, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SpanSelector.__init__', ['ax', 'onselect', 'direction', 'minspan', 'useblit', 'rectprops', 'onmove_callback', 'span_stays', 'button'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'onselect', 'direction', 'minspan', 'useblit', 'rectprops', 'onmove_callback', 'span_stays', 'button'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1715)
        # Processing the call arguments (line 1715)
        # Getting the type of 'self' (line 1715)
        self_166415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 33), 'self', False)
        # Getting the type of 'ax' (line 1715)
        ax_166416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 39), 'ax', False)
        # Getting the type of 'onselect' (line 1715)
        onselect_166417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 43), 'onselect', False)
        # Processing the call keyword arguments (line 1715)
        # Getting the type of 'useblit' (line 1715)
        useblit_166418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 61), 'useblit', False)
        keyword_166419 = useblit_166418
        # Getting the type of 'button' (line 1716)
        button_166420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 40), 'button', False)
        keyword_166421 = button_166420
        kwargs_166422 = {'button': keyword_166421, 'useblit': keyword_166419}
        # Getting the type of '_SelectorWidget' (line 1715)
        _SelectorWidget_166413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 8), '_SelectorWidget', False)
        # Obtaining the member '__init__' of a type (line 1715)
        init___166414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1715, 8), _SelectorWidget_166413, '__init__')
        # Calling __init__(args, kwargs) (line 1715)
        init___call_result_166423 = invoke(stypy.reporting.localization.Localization(__file__, 1715, 8), init___166414, *[self_166415, ax_166416, onselect_166417], **kwargs_166422)
        
        
        # Type idiom detected: calculating its left and rigth part (line 1718)
        # Getting the type of 'rectprops' (line 1718)
        rectprops_166424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 11), 'rectprops')
        # Getting the type of 'None' (line 1718)
        None_166425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 24), 'None')
        
        (may_be_166426, more_types_in_union_166427) = may_be_none(rectprops_166424, None_166425)

        if may_be_166426:

            if more_types_in_union_166427:
                # Runtime conditional SSA (line 1718)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1719):
            
            # Assigning a Call to a Name (line 1719):
            
            # Call to dict(...): (line 1719)
            # Processing the call keyword arguments (line 1719)
            unicode_166429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1719, 39), 'unicode', u'red')
            keyword_166430 = unicode_166429
            float_166431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1719, 52), 'float')
            keyword_166432 = float_166431
            kwargs_166433 = {'alpha': keyword_166432, 'facecolor': keyword_166430}
            # Getting the type of 'dict' (line 1719)
            dict_166428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 24), 'dict', False)
            # Calling dict(args, kwargs) (line 1719)
            dict_call_result_166434 = invoke(stypy.reporting.localization.Localization(__file__, 1719, 24), dict_166428, *[], **kwargs_166433)
            
            # Assigning a type to the variable 'rectprops' (line 1719)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 12), 'rectprops', dict_call_result_166434)

            if more_types_in_union_166427:
                # SSA join for if statement (line 1718)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Subscript (line 1721):
        
        # Assigning a Attribute to a Subscript (line 1721):
        # Getting the type of 'self' (line 1721)
        self_166435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 32), 'self')
        # Obtaining the member 'useblit' of a type (line 1721)
        useblit_166436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1721, 32), self_166435, 'useblit')
        # Getting the type of 'rectprops' (line 1721)
        rectprops_166437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 8), 'rectprops')
        unicode_166438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1721, 18), 'unicode', u'animated')
        # Storing an element on a container (line 1721)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1721, 8), rectprops_166437, (unicode_166438, useblit_166436))
        
        
        # Getting the type of 'direction' (line 1723)
        direction_166439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 11), 'direction')
        
        # Obtaining an instance of the builtin type 'list' (line 1723)
        list_166440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1723, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1723)
        # Adding element type (line 1723)
        unicode_166441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1723, 29), 'unicode', u'horizontal')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1723, 28), list_166440, unicode_166441)
        # Adding element type (line 1723)
        unicode_166442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1723, 43), 'unicode', u'vertical')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1723, 28), list_166440, unicode_166442)
        
        # Applying the binary operator 'notin' (line 1723)
        result_contains_166443 = python_operator(stypy.reporting.localization.Localization(__file__, 1723, 11), 'notin', direction_166439, list_166440)
        
        # Testing the type of an if condition (line 1723)
        if_condition_166444 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1723, 8), result_contains_166443)
        # Assigning a type to the variable 'if_condition_166444' (line 1723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1723, 8), 'if_condition_166444', if_condition_166444)
        # SSA begins for if statement (line 1723)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1724):
        
        # Assigning a Str to a Name (line 1724):
        unicode_166445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1724, 18), 'unicode', u"direction must be in [ 'horizontal' | 'vertical' ]")
        # Assigning a type to the variable 'msg' (line 1724)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1724, 12), 'msg', unicode_166445)
        
        # Call to ValueError(...): (line 1725)
        # Processing the call arguments (line 1725)
        # Getting the type of 'msg' (line 1725)
        msg_166447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 29), 'msg', False)
        # Processing the call keyword arguments (line 1725)
        kwargs_166448 = {}
        # Getting the type of 'ValueError' (line 1725)
        ValueError_166446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1725)
        ValueError_call_result_166449 = invoke(stypy.reporting.localization.Localization(__file__, 1725, 18), ValueError_166446, *[msg_166447], **kwargs_166448)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1725, 12), ValueError_call_result_166449, 'raise parameter', BaseException)
        # SSA join for if statement (line 1723)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1726):
        
        # Assigning a Name to a Attribute (line 1726):
        # Getting the type of 'direction' (line 1726)
        direction_166450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 25), 'direction')
        # Getting the type of 'self' (line 1726)
        self_166451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 8), 'self')
        # Setting the type of the member 'direction' of a type (line 1726)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1726, 8), self_166451, 'direction', direction_166450)
        
        # Assigning a Name to a Attribute (line 1728):
        
        # Assigning a Name to a Attribute (line 1728):
        # Getting the type of 'None' (line 1728)
        None_166452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 20), 'None')
        # Getting the type of 'self' (line 1728)
        self_166453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 8), 'self')
        # Setting the type of the member 'rect' of a type (line 1728)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1728, 8), self_166453, 'rect', None_166452)
        
        # Assigning a Name to a Attribute (line 1729):
        
        # Assigning a Name to a Attribute (line 1729):
        # Getting the type of 'None' (line 1729)
        None_166454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 22), 'None')
        # Getting the type of 'self' (line 1729)
        self_166455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 8), 'self')
        # Setting the type of the member 'pressv' of a type (line 1729)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1729, 8), self_166455, 'pressv', None_166454)
        
        # Assigning a Name to a Attribute (line 1731):
        
        # Assigning a Name to a Attribute (line 1731):
        # Getting the type of 'rectprops' (line 1731)
        rectprops_166456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 25), 'rectprops')
        # Getting the type of 'self' (line 1731)
        self_166457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 8), 'self')
        # Setting the type of the member 'rectprops' of a type (line 1731)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1731, 8), self_166457, 'rectprops', rectprops_166456)
        
        # Assigning a Name to a Attribute (line 1732):
        
        # Assigning a Name to a Attribute (line 1732):
        # Getting the type of 'onmove_callback' (line 1732)
        onmove_callback_166458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 31), 'onmove_callback')
        # Getting the type of 'self' (line 1732)
        self_166459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 8), 'self')
        # Setting the type of the member 'onmove_callback' of a type (line 1732)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1732, 8), self_166459, 'onmove_callback', onmove_callback_166458)
        
        # Assigning a Name to a Attribute (line 1733):
        
        # Assigning a Name to a Attribute (line 1733):
        # Getting the type of 'minspan' (line 1733)
        minspan_166460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 23), 'minspan')
        # Getting the type of 'self' (line 1733)
        self_166461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 8), 'self')
        # Setting the type of the member 'minspan' of a type (line 1733)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1733, 8), self_166461, 'minspan', minspan_166460)
        
        # Assigning a Name to a Attribute (line 1734):
        
        # Assigning a Name to a Attribute (line 1734):
        # Getting the type of 'span_stays' (line 1734)
        span_stays_166462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 26), 'span_stays')
        # Getting the type of 'self' (line 1734)
        self_166463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 8), 'self')
        # Setting the type of the member 'span_stays' of a type (line 1734)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1734, 8), self_166463, 'span_stays', span_stays_166462)
        
        # Assigning a Tuple to a Attribute (line 1737):
        
        # Assigning a Tuple to a Attribute (line 1737):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1737)
        tuple_166464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1737, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1737)
        # Adding element type (line 1737)
        int_166465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1737, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1737, 21), tuple_166464, int_166465)
        # Adding element type (line 1737)
        int_166466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1737, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1737, 21), tuple_166464, int_166466)
        
        # Getting the type of 'self' (line 1737)
        self_166467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 8), 'self')
        # Setting the type of the member 'prev' of a type (line 1737)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1737, 8), self_166467, 'prev', tuple_166464)
        
        # Assigning a Name to a Attribute (line 1740):
        
        # Assigning a Name to a Attribute (line 1740):
        # Getting the type of 'None' (line 1740)
        None_166468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 22), 'None')
        # Getting the type of 'self' (line 1740)
        self_166469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 8), 'self')
        # Setting the type of the member 'canvas' of a type (line 1740)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 8), self_166469, 'canvas', None_166468)
        
        # Call to new_axes(...): (line 1741)
        # Processing the call arguments (line 1741)
        # Getting the type of 'ax' (line 1741)
        ax_166472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 22), 'ax', False)
        # Processing the call keyword arguments (line 1741)
        kwargs_166473 = {}
        # Getting the type of 'self' (line 1741)
        self_166470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 8), 'self', False)
        # Obtaining the member 'new_axes' of a type (line 1741)
        new_axes_166471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1741, 8), self_166470, 'new_axes')
        # Calling new_axes(args, kwargs) (line 1741)
        new_axes_call_result_166474 = invoke(stypy.reporting.localization.Localization(__file__, 1741, 8), new_axes_166471, *[ax_166472], **kwargs_166473)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def new_axes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'new_axes'
        module_type_store = module_type_store.open_function_context('new_axes', 1743, 4, False)
        # Assigning a type to the variable 'self' (line 1744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1744, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SpanSelector.new_axes.__dict__.__setitem__('stypy_localization', localization)
        SpanSelector.new_axes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SpanSelector.new_axes.__dict__.__setitem__('stypy_type_store', module_type_store)
        SpanSelector.new_axes.__dict__.__setitem__('stypy_function_name', 'SpanSelector.new_axes')
        SpanSelector.new_axes.__dict__.__setitem__('stypy_param_names_list', ['ax'])
        SpanSelector.new_axes.__dict__.__setitem__('stypy_varargs_param_name', None)
        SpanSelector.new_axes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SpanSelector.new_axes.__dict__.__setitem__('stypy_call_defaults', defaults)
        SpanSelector.new_axes.__dict__.__setitem__('stypy_call_varargs', varargs)
        SpanSelector.new_axes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SpanSelector.new_axes.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SpanSelector.new_axes', ['ax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'new_axes', localization, ['ax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'new_axes(...)' code ##################

        unicode_166475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1744, 8), 'unicode', u'Set SpanSelector to operate on a new Axes')
        
        # Assigning a Name to a Attribute (line 1745):
        
        # Assigning a Name to a Attribute (line 1745):
        # Getting the type of 'ax' (line 1745)
        ax_166476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 18), 'ax')
        # Getting the type of 'self' (line 1745)
        self_166477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 8), 'self')
        # Setting the type of the member 'ax' of a type (line 1745)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1745, 8), self_166477, 'ax', ax_166476)
        
        
        # Getting the type of 'self' (line 1746)
        self_166478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 11), 'self')
        # Obtaining the member 'canvas' of a type (line 1746)
        canvas_166479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1746, 11), self_166478, 'canvas')
        # Getting the type of 'ax' (line 1746)
        ax_166480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 30), 'ax')
        # Obtaining the member 'figure' of a type (line 1746)
        figure_166481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1746, 30), ax_166480, 'figure')
        # Obtaining the member 'canvas' of a type (line 1746)
        canvas_166482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1746, 30), figure_166481, 'canvas')
        # Applying the binary operator 'isnot' (line 1746)
        result_is_not_166483 = python_operator(stypy.reporting.localization.Localization(__file__, 1746, 11), 'isnot', canvas_166479, canvas_166482)
        
        # Testing the type of an if condition (line 1746)
        if_condition_166484 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1746, 8), result_is_not_166483)
        # Assigning a type to the variable 'if_condition_166484' (line 1746)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1746, 8), 'if_condition_166484', if_condition_166484)
        # SSA begins for if statement (line 1746)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 1747)
        self_166485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 15), 'self')
        # Obtaining the member 'canvas' of a type (line 1747)
        canvas_166486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1747, 15), self_166485, 'canvas')
        # Getting the type of 'None' (line 1747)
        None_166487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 34), 'None')
        # Applying the binary operator 'isnot' (line 1747)
        result_is_not_166488 = python_operator(stypy.reporting.localization.Localization(__file__, 1747, 15), 'isnot', canvas_166486, None_166487)
        
        # Testing the type of an if condition (line 1747)
        if_condition_166489 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1747, 12), result_is_not_166488)
        # Assigning a type to the variable 'if_condition_166489' (line 1747)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1747, 12), 'if_condition_166489', if_condition_166489)
        # SSA begins for if statement (line 1747)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to disconnect_events(...): (line 1748)
        # Processing the call keyword arguments (line 1748)
        kwargs_166492 = {}
        # Getting the type of 'self' (line 1748)
        self_166490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 16), 'self', False)
        # Obtaining the member 'disconnect_events' of a type (line 1748)
        disconnect_events_166491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1748, 16), self_166490, 'disconnect_events')
        # Calling disconnect_events(args, kwargs) (line 1748)
        disconnect_events_call_result_166493 = invoke(stypy.reporting.localization.Localization(__file__, 1748, 16), disconnect_events_166491, *[], **kwargs_166492)
        
        # SSA join for if statement (line 1747)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Attribute (line 1750):
        
        # Assigning a Attribute to a Attribute (line 1750):
        # Getting the type of 'ax' (line 1750)
        ax_166494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 26), 'ax')
        # Obtaining the member 'figure' of a type (line 1750)
        figure_166495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1750, 26), ax_166494, 'figure')
        # Obtaining the member 'canvas' of a type (line 1750)
        canvas_166496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1750, 26), figure_166495, 'canvas')
        # Getting the type of 'self' (line 1750)
        self_166497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 12), 'self')
        # Setting the type of the member 'canvas' of a type (line 1750)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1750, 12), self_166497, 'canvas', canvas_166496)
        
        # Call to connect_default_events(...): (line 1751)
        # Processing the call keyword arguments (line 1751)
        kwargs_166500 = {}
        # Getting the type of 'self' (line 1751)
        self_166498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1751, 12), 'self', False)
        # Obtaining the member 'connect_default_events' of a type (line 1751)
        connect_default_events_166499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1751, 12), self_166498, 'connect_default_events')
        # Calling connect_default_events(args, kwargs) (line 1751)
        connect_default_events_call_result_166501 = invoke(stypy.reporting.localization.Localization(__file__, 1751, 12), connect_default_events_166499, *[], **kwargs_166500)
        
        # SSA join for if statement (line 1746)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 1753)
        self_166502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 11), 'self')
        # Obtaining the member 'direction' of a type (line 1753)
        direction_166503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1753, 11), self_166502, 'direction')
        unicode_166504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1753, 29), 'unicode', u'horizontal')
        # Applying the binary operator '==' (line 1753)
        result_eq_166505 = python_operator(stypy.reporting.localization.Localization(__file__, 1753, 11), '==', direction_166503, unicode_166504)
        
        # Testing the type of an if condition (line 1753)
        if_condition_166506 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1753, 8), result_eq_166505)
        # Assigning a type to the variable 'if_condition_166506' (line 1753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1753, 8), 'if_condition_166506', if_condition_166506)
        # SSA begins for if statement (line 1753)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1754):
        
        # Assigning a Call to a Name (line 1754):
        
        # Call to blended_transform_factory(...): (line 1754)
        # Processing the call arguments (line 1754)
        # Getting the type of 'self' (line 1754)
        self_166508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 46), 'self', False)
        # Obtaining the member 'ax' of a type (line 1754)
        ax_166509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1754, 46), self_166508, 'ax')
        # Obtaining the member 'transData' of a type (line 1754)
        transData_166510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1754, 46), ax_166509, 'transData')
        # Getting the type of 'self' (line 1755)
        self_166511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 46), 'self', False)
        # Obtaining the member 'ax' of a type (line 1755)
        ax_166512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1755, 46), self_166511, 'ax')
        # Obtaining the member 'transAxes' of a type (line 1755)
        transAxes_166513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1755, 46), ax_166512, 'transAxes')
        # Processing the call keyword arguments (line 1754)
        kwargs_166514 = {}
        # Getting the type of 'blended_transform_factory' (line 1754)
        blended_transform_factory_166507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 20), 'blended_transform_factory', False)
        # Calling blended_transform_factory(args, kwargs) (line 1754)
        blended_transform_factory_call_result_166515 = invoke(stypy.reporting.localization.Localization(__file__, 1754, 20), blended_transform_factory_166507, *[transData_166510, transAxes_166513], **kwargs_166514)
        
        # Assigning a type to the variable 'trans' (line 1754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1754, 12), 'trans', blended_transform_factory_call_result_166515)
        
        # Assigning a Tuple to a Tuple (line 1756):
        
        # Assigning a Num to a Name (line 1756):
        int_166516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1756, 19), 'int')
        # Assigning a type to the variable 'tuple_assignment_162290' (line 1756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1756, 12), 'tuple_assignment_162290', int_166516)
        
        # Assigning a Num to a Name (line 1756):
        int_166517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1756, 22), 'int')
        # Assigning a type to the variable 'tuple_assignment_162291' (line 1756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1756, 12), 'tuple_assignment_162291', int_166517)
        
        # Assigning a Name to a Name (line 1756):
        # Getting the type of 'tuple_assignment_162290' (line 1756)
        tuple_assignment_162290_166518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 12), 'tuple_assignment_162290')
        # Assigning a type to the variable 'w' (line 1756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1756, 12), 'w', tuple_assignment_162290_166518)
        
        # Assigning a Name to a Name (line 1756):
        # Getting the type of 'tuple_assignment_162291' (line 1756)
        tuple_assignment_162291_166519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 12), 'tuple_assignment_162291')
        # Assigning a type to the variable 'h' (line 1756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1756, 15), 'h', tuple_assignment_162291_166519)
        # SSA branch for the else part of an if statement (line 1753)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1758):
        
        # Assigning a Call to a Name (line 1758):
        
        # Call to blended_transform_factory(...): (line 1758)
        # Processing the call arguments (line 1758)
        # Getting the type of 'self' (line 1758)
        self_166521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 46), 'self', False)
        # Obtaining the member 'ax' of a type (line 1758)
        ax_166522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1758, 46), self_166521, 'ax')
        # Obtaining the member 'transAxes' of a type (line 1758)
        transAxes_166523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1758, 46), ax_166522, 'transAxes')
        # Getting the type of 'self' (line 1759)
        self_166524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 46), 'self', False)
        # Obtaining the member 'ax' of a type (line 1759)
        ax_166525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1759, 46), self_166524, 'ax')
        # Obtaining the member 'transData' of a type (line 1759)
        transData_166526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1759, 46), ax_166525, 'transData')
        # Processing the call keyword arguments (line 1758)
        kwargs_166527 = {}
        # Getting the type of 'blended_transform_factory' (line 1758)
        blended_transform_factory_166520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 20), 'blended_transform_factory', False)
        # Calling blended_transform_factory(args, kwargs) (line 1758)
        blended_transform_factory_call_result_166528 = invoke(stypy.reporting.localization.Localization(__file__, 1758, 20), blended_transform_factory_166520, *[transAxes_166523, transData_166526], **kwargs_166527)
        
        # Assigning a type to the variable 'trans' (line 1758)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1758, 12), 'trans', blended_transform_factory_call_result_166528)
        
        # Assigning a Tuple to a Tuple (line 1760):
        
        # Assigning a Num to a Name (line 1760):
        int_166529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1760, 19), 'int')
        # Assigning a type to the variable 'tuple_assignment_162292' (line 1760)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1760, 12), 'tuple_assignment_162292', int_166529)
        
        # Assigning a Num to a Name (line 1760):
        int_166530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1760, 22), 'int')
        # Assigning a type to the variable 'tuple_assignment_162293' (line 1760)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1760, 12), 'tuple_assignment_162293', int_166530)
        
        # Assigning a Name to a Name (line 1760):
        # Getting the type of 'tuple_assignment_162292' (line 1760)
        tuple_assignment_162292_166531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 12), 'tuple_assignment_162292')
        # Assigning a type to the variable 'w' (line 1760)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1760, 12), 'w', tuple_assignment_162292_166531)
        
        # Assigning a Name to a Name (line 1760):
        # Getting the type of 'tuple_assignment_162293' (line 1760)
        tuple_assignment_162293_166532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 12), 'tuple_assignment_162293')
        # Assigning a type to the variable 'h' (line 1760)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1760, 15), 'h', tuple_assignment_162293_166532)
        # SSA join for if statement (line 1753)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 1761):
        
        # Assigning a Call to a Attribute (line 1761):
        
        # Call to Rectangle(...): (line 1761)
        # Processing the call arguments (line 1761)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1761)
        tuple_166534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1761, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1761)
        # Adding element type (line 1761)
        int_166535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1761, 31), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1761, 31), tuple_166534, int_166535)
        # Adding element type (line 1761)
        int_166536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1761, 34), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1761, 31), tuple_166534, int_166536)
        
        # Getting the type of 'w' (line 1761)
        w_166537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 38), 'w', False)
        # Getting the type of 'h' (line 1761)
        h_166538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 41), 'h', False)
        # Processing the call keyword arguments (line 1761)
        # Getting the type of 'trans' (line 1762)
        trans_166539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 40), 'trans', False)
        keyword_166540 = trans_166539
        # Getting the type of 'False' (line 1763)
        False_166541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 38), 'False', False)
        keyword_166542 = False_166541
        # Getting the type of 'self' (line 1764)
        self_166543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 32), 'self', False)
        # Obtaining the member 'rectprops' of a type (line 1764)
        rectprops_166544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1764, 32), self_166543, 'rectprops')
        kwargs_166545 = {'visible': keyword_166542, 'transform': keyword_166540, 'rectprops_166544': rectprops_166544}
        # Getting the type of 'Rectangle' (line 1761)
        Rectangle_166533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 20), 'Rectangle', False)
        # Calling Rectangle(args, kwargs) (line 1761)
        Rectangle_call_result_166546 = invoke(stypy.reporting.localization.Localization(__file__, 1761, 20), Rectangle_166533, *[tuple_166534, w_166537, h_166538], **kwargs_166545)
        
        # Getting the type of 'self' (line 1761)
        self_166547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 8), 'self')
        # Setting the type of the member 'rect' of a type (line 1761)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1761, 8), self_166547, 'rect', Rectangle_call_result_166546)
        
        # Getting the type of 'self' (line 1765)
        self_166548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1765, 11), 'self')
        # Obtaining the member 'span_stays' of a type (line 1765)
        span_stays_166549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1765, 11), self_166548, 'span_stays')
        # Testing the type of an if condition (line 1765)
        if_condition_166550 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1765, 8), span_stays_166549)
        # Assigning a type to the variable 'if_condition_166550' (line 1765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1765, 8), 'if_condition_166550', if_condition_166550)
        # SSA begins for if statement (line 1765)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1766):
        
        # Assigning a Call to a Attribute (line 1766):
        
        # Call to Rectangle(...): (line 1766)
        # Processing the call arguments (line 1766)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1766)
        tuple_166552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1766, 40), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1766)
        # Adding element type (line 1766)
        int_166553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1766, 40), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1766, 40), tuple_166552, int_166553)
        # Adding element type (line 1766)
        int_166554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1766, 43), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1766, 40), tuple_166552, int_166554)
        
        # Getting the type of 'w' (line 1766)
        w_166555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 47), 'w', False)
        # Getting the type of 'h' (line 1766)
        h_166556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 50), 'h', False)
        # Processing the call keyword arguments (line 1766)
        # Getting the type of 'trans' (line 1767)
        trans_166557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 49), 'trans', False)
        keyword_166558 = trans_166557
        # Getting the type of 'False' (line 1768)
        False_166559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 47), 'False', False)
        keyword_166560 = False_166559
        # Getting the type of 'self' (line 1769)
        self_166561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1769, 41), 'self', False)
        # Obtaining the member 'rectprops' of a type (line 1769)
        rectprops_166562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1769, 41), self_166561, 'rectprops')
        kwargs_166563 = {'visible': keyword_166560, 'transform': keyword_166558, 'rectprops_166562': rectprops_166562}
        # Getting the type of 'Rectangle' (line 1766)
        Rectangle_166551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 29), 'Rectangle', False)
        # Calling Rectangle(args, kwargs) (line 1766)
        Rectangle_call_result_166564 = invoke(stypy.reporting.localization.Localization(__file__, 1766, 29), Rectangle_166551, *[tuple_166552, w_166555, h_166556], **kwargs_166563)
        
        # Getting the type of 'self' (line 1766)
        self_166565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 12), 'self')
        # Setting the type of the member 'stay_rect' of a type (line 1766)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1766, 12), self_166565, 'stay_rect', Rectangle_call_result_166564)
        
        # Call to set_animated(...): (line 1770)
        # Processing the call arguments (line 1770)
        # Getting the type of 'False' (line 1770)
        False_166569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 40), 'False', False)
        # Processing the call keyword arguments (line 1770)
        kwargs_166570 = {}
        # Getting the type of 'self' (line 1770)
        self_166566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 12), 'self', False)
        # Obtaining the member 'stay_rect' of a type (line 1770)
        stay_rect_166567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1770, 12), self_166566, 'stay_rect')
        # Obtaining the member 'set_animated' of a type (line 1770)
        set_animated_166568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1770, 12), stay_rect_166567, 'set_animated')
        # Calling set_animated(args, kwargs) (line 1770)
        set_animated_call_result_166571 = invoke(stypy.reporting.localization.Localization(__file__, 1770, 12), set_animated_166568, *[False_166569], **kwargs_166570)
        
        
        # Call to add_patch(...): (line 1771)
        # Processing the call arguments (line 1771)
        # Getting the type of 'self' (line 1771)
        self_166575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 30), 'self', False)
        # Obtaining the member 'stay_rect' of a type (line 1771)
        stay_rect_166576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 30), self_166575, 'stay_rect')
        # Processing the call keyword arguments (line 1771)
        kwargs_166577 = {}
        # Getting the type of 'self' (line 1771)
        self_166572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 1771)
        ax_166573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 12), self_166572, 'ax')
        # Obtaining the member 'add_patch' of a type (line 1771)
        add_patch_166574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 12), ax_166573, 'add_patch')
        # Calling add_patch(args, kwargs) (line 1771)
        add_patch_call_result_166578 = invoke(stypy.reporting.localization.Localization(__file__, 1771, 12), add_patch_166574, *[stay_rect_166576], **kwargs_166577)
        
        # SSA join for if statement (line 1765)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to add_patch(...): (line 1773)
        # Processing the call arguments (line 1773)
        # Getting the type of 'self' (line 1773)
        self_166582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 26), 'self', False)
        # Obtaining the member 'rect' of a type (line 1773)
        rect_166583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 26), self_166582, 'rect')
        # Processing the call keyword arguments (line 1773)
        kwargs_166584 = {}
        # Getting the type of 'self' (line 1773)
        self_166579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 8), 'self', False)
        # Obtaining the member 'ax' of a type (line 1773)
        ax_166580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 8), self_166579, 'ax')
        # Obtaining the member 'add_patch' of a type (line 1773)
        add_patch_166581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 8), ax_166580, 'add_patch')
        # Calling add_patch(args, kwargs) (line 1773)
        add_patch_call_result_166585 = invoke(stypy.reporting.localization.Localization(__file__, 1773, 8), add_patch_166581, *[rect_166583], **kwargs_166584)
        
        
        # Assigning a List to a Attribute (line 1774):
        
        # Assigning a List to a Attribute (line 1774):
        
        # Obtaining an instance of the builtin type 'list' (line 1774)
        list_166586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1774, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1774)
        # Adding element type (line 1774)
        # Getting the type of 'self' (line 1774)
        self_166587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 24), 'self')
        # Obtaining the member 'rect' of a type (line 1774)
        rect_166588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1774, 24), self_166587, 'rect')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1774, 23), list_166586, rect_166588)
        
        # Getting the type of 'self' (line 1774)
        self_166589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 8), 'self')
        # Setting the type of the member 'artists' of a type (line 1774)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1774, 8), self_166589, 'artists', list_166586)
        
        # ################# End of 'new_axes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'new_axes' in the type store
        # Getting the type of 'stypy_return_type' (line 1743)
        stypy_return_type_166590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166590)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'new_axes'
        return stypy_return_type_166590


    @norecursion
    def ignore(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'ignore'
        module_type_store = module_type_store.open_function_context('ignore', 1776, 4, False)
        # Assigning a type to the variable 'self' (line 1777)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1777, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SpanSelector.ignore.__dict__.__setitem__('stypy_localization', localization)
        SpanSelector.ignore.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SpanSelector.ignore.__dict__.__setitem__('stypy_type_store', module_type_store)
        SpanSelector.ignore.__dict__.__setitem__('stypy_function_name', 'SpanSelector.ignore')
        SpanSelector.ignore.__dict__.__setitem__('stypy_param_names_list', ['event'])
        SpanSelector.ignore.__dict__.__setitem__('stypy_varargs_param_name', None)
        SpanSelector.ignore.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SpanSelector.ignore.__dict__.__setitem__('stypy_call_defaults', defaults)
        SpanSelector.ignore.__dict__.__setitem__('stypy_call_varargs', varargs)
        SpanSelector.ignore.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SpanSelector.ignore.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SpanSelector.ignore', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ignore', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ignore(...)' code ##################

        unicode_166591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1777, 8), 'unicode', u'return *True* if *event* should be ignored')
        
        # Evaluating a boolean operation
        
        # Call to ignore(...): (line 1778)
        # Processing the call arguments (line 1778)
        # Getting the type of 'self' (line 1778)
        self_166594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 38), 'self', False)
        # Getting the type of 'event' (line 1778)
        event_166595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 44), 'event', False)
        # Processing the call keyword arguments (line 1778)
        kwargs_166596 = {}
        # Getting the type of '_SelectorWidget' (line 1778)
        _SelectorWidget_166592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 15), '_SelectorWidget', False)
        # Obtaining the member 'ignore' of a type (line 1778)
        ignore_166593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1778, 15), _SelectorWidget_166592, 'ignore')
        # Calling ignore(args, kwargs) (line 1778)
        ignore_call_result_166597 = invoke(stypy.reporting.localization.Localization(__file__, 1778, 15), ignore_166593, *[self_166594, event_166595], **kwargs_166596)
        
        
        # Getting the type of 'self' (line 1778)
        self_166598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 58), 'self')
        # Obtaining the member 'visible' of a type (line 1778)
        visible_166599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1778, 58), self_166598, 'visible')
        # Applying the 'not' unary operator (line 1778)
        result_not__166600 = python_operator(stypy.reporting.localization.Localization(__file__, 1778, 54), 'not', visible_166599)
        
        # Applying the binary operator 'or' (line 1778)
        result_or_keyword_166601 = python_operator(stypy.reporting.localization.Localization(__file__, 1778, 15), 'or', ignore_call_result_166597, result_not__166600)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1778, 8), 'stypy_return_type', result_or_keyword_166601)
        
        # ################# End of 'ignore(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ignore' in the type store
        # Getting the type of 'stypy_return_type' (line 1776)
        stypy_return_type_166602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166602)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ignore'
        return stypy_return_type_166602


    @norecursion
    def _press(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_press'
        module_type_store = module_type_store.open_function_context('_press', 1780, 4, False)
        # Assigning a type to the variable 'self' (line 1781)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1781, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SpanSelector._press.__dict__.__setitem__('stypy_localization', localization)
        SpanSelector._press.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SpanSelector._press.__dict__.__setitem__('stypy_type_store', module_type_store)
        SpanSelector._press.__dict__.__setitem__('stypy_function_name', 'SpanSelector._press')
        SpanSelector._press.__dict__.__setitem__('stypy_param_names_list', ['event'])
        SpanSelector._press.__dict__.__setitem__('stypy_varargs_param_name', None)
        SpanSelector._press.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SpanSelector._press.__dict__.__setitem__('stypy_call_defaults', defaults)
        SpanSelector._press.__dict__.__setitem__('stypy_call_varargs', varargs)
        SpanSelector._press.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SpanSelector._press.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SpanSelector._press', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_press', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_press(...)' code ##################

        unicode_166603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1781, 8), 'unicode', u'on button press event')
        
        # Call to set_visible(...): (line 1782)
        # Processing the call arguments (line 1782)
        # Getting the type of 'self' (line 1782)
        self_166607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 30), 'self', False)
        # Obtaining the member 'visible' of a type (line 1782)
        visible_166608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1782, 30), self_166607, 'visible')
        # Processing the call keyword arguments (line 1782)
        kwargs_166609 = {}
        # Getting the type of 'self' (line 1782)
        self_166604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 8), 'self', False)
        # Obtaining the member 'rect' of a type (line 1782)
        rect_166605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1782, 8), self_166604, 'rect')
        # Obtaining the member 'set_visible' of a type (line 1782)
        set_visible_166606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1782, 8), rect_166605, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1782)
        set_visible_call_result_166610 = invoke(stypy.reporting.localization.Localization(__file__, 1782, 8), set_visible_166606, *[visible_166608], **kwargs_166609)
        
        
        # Getting the type of 'self' (line 1783)
        self_166611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 11), 'self')
        # Obtaining the member 'span_stays' of a type (line 1783)
        span_stays_166612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1783, 11), self_166611, 'span_stays')
        # Testing the type of an if condition (line 1783)
        if_condition_166613 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1783, 8), span_stays_166612)
        # Assigning a type to the variable 'if_condition_166613' (line 1783)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1783, 8), 'if_condition_166613', if_condition_166613)
        # SSA begins for if statement (line 1783)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_visible(...): (line 1784)
        # Processing the call arguments (line 1784)
        # Getting the type of 'False' (line 1784)
        False_166617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 39), 'False', False)
        # Processing the call keyword arguments (line 1784)
        kwargs_166618 = {}
        # Getting the type of 'self' (line 1784)
        self_166614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 12), 'self', False)
        # Obtaining the member 'stay_rect' of a type (line 1784)
        stay_rect_166615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 12), self_166614, 'stay_rect')
        # Obtaining the member 'set_visible' of a type (line 1784)
        set_visible_166616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 12), stay_rect_166615, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1784)
        set_visible_call_result_166619 = invoke(stypy.reporting.localization.Localization(__file__, 1784, 12), set_visible_166616, *[False_166617], **kwargs_166618)
        
        
        # Getting the type of 'self' (line 1787)
        self_166620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 15), 'self')
        # Obtaining the member 'useblit' of a type (line 1787)
        useblit_166621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1787, 15), self_166620, 'useblit')
        # Testing the type of an if condition (line 1787)
        if_condition_166622 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1787, 12), useblit_166621)
        # Assigning a type to the variable 'if_condition_166622' (line 1787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 12), 'if_condition_166622', if_condition_166622)
        # SSA begins for if statement (line 1787)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 1788)
        # Processing the call keyword arguments (line 1788)
        kwargs_166626 = {}
        # Getting the type of 'self' (line 1788)
        self_166623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 16), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1788)
        canvas_166624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1788, 16), self_166623, 'canvas')
        # Obtaining the member 'draw' of a type (line 1788)
        draw_166625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1788, 16), canvas_166624, 'draw')
        # Calling draw(args, kwargs) (line 1788)
        draw_call_result_166627 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 16), draw_166625, *[], **kwargs_166626)
        
        # SSA join for if statement (line 1787)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1783)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1789):
        
        # Assigning a Call to a Name:
        
        # Call to _get_data(...): (line 1789)
        # Processing the call arguments (line 1789)
        # Getting the type of 'event' (line 1789)
        event_166630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 38), 'event', False)
        # Processing the call keyword arguments (line 1789)
        kwargs_166631 = {}
        # Getting the type of 'self' (line 1789)
        self_166628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 23), 'self', False)
        # Obtaining the member '_get_data' of a type (line 1789)
        _get_data_166629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1789, 23), self_166628, '_get_data')
        # Calling _get_data(args, kwargs) (line 1789)
        _get_data_call_result_166632 = invoke(stypy.reporting.localization.Localization(__file__, 1789, 23), _get_data_166629, *[event_166630], **kwargs_166631)
        
        # Assigning a type to the variable 'call_assignment_162294' (line 1789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1789, 8), 'call_assignment_162294', _get_data_call_result_166632)
        
        # Assigning a Call to a Name (line 1789):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_166635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1789, 8), 'int')
        # Processing the call keyword arguments
        kwargs_166636 = {}
        # Getting the type of 'call_assignment_162294' (line 1789)
        call_assignment_162294_166633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 8), 'call_assignment_162294', False)
        # Obtaining the member '__getitem__' of a type (line 1789)
        getitem___166634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1789, 8), call_assignment_162294_166633, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_166637 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___166634, *[int_166635], **kwargs_166636)
        
        # Assigning a type to the variable 'call_assignment_162295' (line 1789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1789, 8), 'call_assignment_162295', getitem___call_result_166637)
        
        # Assigning a Name to a Name (line 1789):
        # Getting the type of 'call_assignment_162295' (line 1789)
        call_assignment_162295_166638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 8), 'call_assignment_162295')
        # Assigning a type to the variable 'xdata' (line 1789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1789, 8), 'xdata', call_assignment_162295_166638)
        
        # Assigning a Call to a Name (line 1789):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_166641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1789, 8), 'int')
        # Processing the call keyword arguments
        kwargs_166642 = {}
        # Getting the type of 'call_assignment_162294' (line 1789)
        call_assignment_162294_166639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 8), 'call_assignment_162294', False)
        # Obtaining the member '__getitem__' of a type (line 1789)
        getitem___166640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1789, 8), call_assignment_162294_166639, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_166643 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___166640, *[int_166641], **kwargs_166642)
        
        # Assigning a type to the variable 'call_assignment_162296' (line 1789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1789, 8), 'call_assignment_162296', getitem___call_result_166643)
        
        # Assigning a Name to a Name (line 1789):
        # Getting the type of 'call_assignment_162296' (line 1789)
        call_assignment_162296_166644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 8), 'call_assignment_162296')
        # Assigning a type to the variable 'ydata' (line 1789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1789, 15), 'ydata', call_assignment_162296_166644)
        
        
        # Getting the type of 'self' (line 1790)
        self_166645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 11), 'self')
        # Obtaining the member 'direction' of a type (line 1790)
        direction_166646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1790, 11), self_166645, 'direction')
        unicode_166647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1790, 29), 'unicode', u'horizontal')
        # Applying the binary operator '==' (line 1790)
        result_eq_166648 = python_operator(stypy.reporting.localization.Localization(__file__, 1790, 11), '==', direction_166646, unicode_166647)
        
        # Testing the type of an if condition (line 1790)
        if_condition_166649 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1790, 8), result_eq_166648)
        # Assigning a type to the variable 'if_condition_166649' (line 1790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1790, 8), 'if_condition_166649', if_condition_166649)
        # SSA begins for if statement (line 1790)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1791):
        
        # Assigning a Name to a Attribute (line 1791):
        # Getting the type of 'xdata' (line 1791)
        xdata_166650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 26), 'xdata')
        # Getting the type of 'self' (line 1791)
        self_166651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 12), 'self')
        # Setting the type of the member 'pressv' of a type (line 1791)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1791, 12), self_166651, 'pressv', xdata_166650)
        # SSA branch for the else part of an if statement (line 1790)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 1793):
        
        # Assigning a Name to a Attribute (line 1793):
        # Getting the type of 'ydata' (line 1793)
        ydata_166652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 26), 'ydata')
        # Getting the type of 'self' (line 1793)
        self_166653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 12), 'self')
        # Setting the type of the member 'pressv' of a type (line 1793)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1793, 12), self_166653, 'pressv', ydata_166652)
        # SSA join for if statement (line 1790)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'False' (line 1794)
        False_166654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 1794)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1794, 8), 'stypy_return_type', False_166654)
        
        # ################# End of '_press(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_press' in the type store
        # Getting the type of 'stypy_return_type' (line 1780)
        stypy_return_type_166655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166655)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_press'
        return stypy_return_type_166655


    @norecursion
    def _release(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_release'
        module_type_store = module_type_store.open_function_context('_release', 1796, 4, False)
        # Assigning a type to the variable 'self' (line 1797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1797, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SpanSelector._release.__dict__.__setitem__('stypy_localization', localization)
        SpanSelector._release.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SpanSelector._release.__dict__.__setitem__('stypy_type_store', module_type_store)
        SpanSelector._release.__dict__.__setitem__('stypy_function_name', 'SpanSelector._release')
        SpanSelector._release.__dict__.__setitem__('stypy_param_names_list', ['event'])
        SpanSelector._release.__dict__.__setitem__('stypy_varargs_param_name', None)
        SpanSelector._release.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SpanSelector._release.__dict__.__setitem__('stypy_call_defaults', defaults)
        SpanSelector._release.__dict__.__setitem__('stypy_call_varargs', varargs)
        SpanSelector._release.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SpanSelector._release.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SpanSelector._release', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_release', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_release(...)' code ##################

        unicode_166656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1797, 8), 'unicode', u'on button release event')
        
        # Type idiom detected: calculating its left and rigth part (line 1798)
        # Getting the type of 'self' (line 1798)
        self_166657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 11), 'self')
        # Obtaining the member 'pressv' of a type (line 1798)
        pressv_166658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1798, 11), self_166657, 'pressv')
        # Getting the type of 'None' (line 1798)
        None_166659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 26), 'None')
        
        (may_be_166660, more_types_in_union_166661) = may_be_none(pressv_166658, None_166659)

        if may_be_166660:

            if more_types_in_union_166661:
                # Runtime conditional SSA (line 1798)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 1799)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1799, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_166661:
                # SSA join for if statement (line 1798)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 1800):
        
        # Assigning a Name to a Attribute (line 1800):
        # Getting the type of 'False' (line 1800)
        False_166662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 26), 'False')
        # Getting the type of 'self' (line 1800)
        self_166663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 8), 'self')
        # Setting the type of the member 'buttonDown' of a type (line 1800)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1800, 8), self_166663, 'buttonDown', False_166662)
        
        # Call to set_visible(...): (line 1802)
        # Processing the call arguments (line 1802)
        # Getting the type of 'False' (line 1802)
        False_166667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 30), 'False', False)
        # Processing the call keyword arguments (line 1802)
        kwargs_166668 = {}
        # Getting the type of 'self' (line 1802)
        self_166664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 8), 'self', False)
        # Obtaining the member 'rect' of a type (line 1802)
        rect_166665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1802, 8), self_166664, 'rect')
        # Obtaining the member 'set_visible' of a type (line 1802)
        set_visible_166666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1802, 8), rect_166665, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1802)
        set_visible_call_result_166669 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 8), set_visible_166666, *[False_166667], **kwargs_166668)
        
        
        # Getting the type of 'self' (line 1804)
        self_166670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 11), 'self')
        # Obtaining the member 'span_stays' of a type (line 1804)
        span_stays_166671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1804, 11), self_166670, 'span_stays')
        # Testing the type of an if condition (line 1804)
        if_condition_166672 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1804, 8), span_stays_166671)
        # Assigning a type to the variable 'if_condition_166672' (line 1804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1804, 8), 'if_condition_166672', if_condition_166672)
        # SSA begins for if statement (line 1804)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_x(...): (line 1805)
        # Processing the call arguments (line 1805)
        
        # Call to get_x(...): (line 1805)
        # Processing the call keyword arguments (line 1805)
        kwargs_166679 = {}
        # Getting the type of 'self' (line 1805)
        self_166676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 33), 'self', False)
        # Obtaining the member 'rect' of a type (line 1805)
        rect_166677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1805, 33), self_166676, 'rect')
        # Obtaining the member 'get_x' of a type (line 1805)
        get_x_166678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1805, 33), rect_166677, 'get_x')
        # Calling get_x(args, kwargs) (line 1805)
        get_x_call_result_166680 = invoke(stypy.reporting.localization.Localization(__file__, 1805, 33), get_x_166678, *[], **kwargs_166679)
        
        # Processing the call keyword arguments (line 1805)
        kwargs_166681 = {}
        # Getting the type of 'self' (line 1805)
        self_166673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 12), 'self', False)
        # Obtaining the member 'stay_rect' of a type (line 1805)
        stay_rect_166674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1805, 12), self_166673, 'stay_rect')
        # Obtaining the member 'set_x' of a type (line 1805)
        set_x_166675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1805, 12), stay_rect_166674, 'set_x')
        # Calling set_x(args, kwargs) (line 1805)
        set_x_call_result_166682 = invoke(stypy.reporting.localization.Localization(__file__, 1805, 12), set_x_166675, *[get_x_call_result_166680], **kwargs_166681)
        
        
        # Call to set_y(...): (line 1806)
        # Processing the call arguments (line 1806)
        
        # Call to get_y(...): (line 1806)
        # Processing the call keyword arguments (line 1806)
        kwargs_166689 = {}
        # Getting the type of 'self' (line 1806)
        self_166686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 33), 'self', False)
        # Obtaining the member 'rect' of a type (line 1806)
        rect_166687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1806, 33), self_166686, 'rect')
        # Obtaining the member 'get_y' of a type (line 1806)
        get_y_166688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1806, 33), rect_166687, 'get_y')
        # Calling get_y(args, kwargs) (line 1806)
        get_y_call_result_166690 = invoke(stypy.reporting.localization.Localization(__file__, 1806, 33), get_y_166688, *[], **kwargs_166689)
        
        # Processing the call keyword arguments (line 1806)
        kwargs_166691 = {}
        # Getting the type of 'self' (line 1806)
        self_166683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 12), 'self', False)
        # Obtaining the member 'stay_rect' of a type (line 1806)
        stay_rect_166684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1806, 12), self_166683, 'stay_rect')
        # Obtaining the member 'set_y' of a type (line 1806)
        set_y_166685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1806, 12), stay_rect_166684, 'set_y')
        # Calling set_y(args, kwargs) (line 1806)
        set_y_call_result_166692 = invoke(stypy.reporting.localization.Localization(__file__, 1806, 12), set_y_166685, *[get_y_call_result_166690], **kwargs_166691)
        
        
        # Call to set_width(...): (line 1807)
        # Processing the call arguments (line 1807)
        
        # Call to get_width(...): (line 1807)
        # Processing the call keyword arguments (line 1807)
        kwargs_166699 = {}
        # Getting the type of 'self' (line 1807)
        self_166696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 37), 'self', False)
        # Obtaining the member 'rect' of a type (line 1807)
        rect_166697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1807, 37), self_166696, 'rect')
        # Obtaining the member 'get_width' of a type (line 1807)
        get_width_166698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1807, 37), rect_166697, 'get_width')
        # Calling get_width(args, kwargs) (line 1807)
        get_width_call_result_166700 = invoke(stypy.reporting.localization.Localization(__file__, 1807, 37), get_width_166698, *[], **kwargs_166699)
        
        # Processing the call keyword arguments (line 1807)
        kwargs_166701 = {}
        # Getting the type of 'self' (line 1807)
        self_166693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 12), 'self', False)
        # Obtaining the member 'stay_rect' of a type (line 1807)
        stay_rect_166694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1807, 12), self_166693, 'stay_rect')
        # Obtaining the member 'set_width' of a type (line 1807)
        set_width_166695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1807, 12), stay_rect_166694, 'set_width')
        # Calling set_width(args, kwargs) (line 1807)
        set_width_call_result_166702 = invoke(stypy.reporting.localization.Localization(__file__, 1807, 12), set_width_166695, *[get_width_call_result_166700], **kwargs_166701)
        
        
        # Call to set_height(...): (line 1808)
        # Processing the call arguments (line 1808)
        
        # Call to get_height(...): (line 1808)
        # Processing the call keyword arguments (line 1808)
        kwargs_166709 = {}
        # Getting the type of 'self' (line 1808)
        self_166706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 38), 'self', False)
        # Obtaining the member 'rect' of a type (line 1808)
        rect_166707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1808, 38), self_166706, 'rect')
        # Obtaining the member 'get_height' of a type (line 1808)
        get_height_166708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1808, 38), rect_166707, 'get_height')
        # Calling get_height(args, kwargs) (line 1808)
        get_height_call_result_166710 = invoke(stypy.reporting.localization.Localization(__file__, 1808, 38), get_height_166708, *[], **kwargs_166709)
        
        # Processing the call keyword arguments (line 1808)
        kwargs_166711 = {}
        # Getting the type of 'self' (line 1808)
        self_166703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 12), 'self', False)
        # Obtaining the member 'stay_rect' of a type (line 1808)
        stay_rect_166704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1808, 12), self_166703, 'stay_rect')
        # Obtaining the member 'set_height' of a type (line 1808)
        set_height_166705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1808, 12), stay_rect_166704, 'set_height')
        # Calling set_height(args, kwargs) (line 1808)
        set_height_call_result_166712 = invoke(stypy.reporting.localization.Localization(__file__, 1808, 12), set_height_166705, *[get_height_call_result_166710], **kwargs_166711)
        
        
        # Call to set_visible(...): (line 1809)
        # Processing the call arguments (line 1809)
        # Getting the type of 'True' (line 1809)
        True_166716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 39), 'True', False)
        # Processing the call keyword arguments (line 1809)
        kwargs_166717 = {}
        # Getting the type of 'self' (line 1809)
        self_166713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 12), 'self', False)
        # Obtaining the member 'stay_rect' of a type (line 1809)
        stay_rect_166714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1809, 12), self_166713, 'stay_rect')
        # Obtaining the member 'set_visible' of a type (line 1809)
        set_visible_166715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1809, 12), stay_rect_166714, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1809)
        set_visible_call_result_166718 = invoke(stypy.reporting.localization.Localization(__file__, 1809, 12), set_visible_166715, *[True_166716], **kwargs_166717)
        
        # SSA join for if statement (line 1804)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw_idle(...): (line 1811)
        # Processing the call keyword arguments (line 1811)
        kwargs_166722 = {}
        # Getting the type of 'self' (line 1811)
        self_166719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1811)
        canvas_166720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1811, 8), self_166719, 'canvas')
        # Obtaining the member 'draw_idle' of a type (line 1811)
        draw_idle_166721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1811, 8), canvas_166720, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 1811)
        draw_idle_call_result_166723 = invoke(stypy.reporting.localization.Localization(__file__, 1811, 8), draw_idle_166721, *[], **kwargs_166722)
        
        
        # Assigning a Attribute to a Name (line 1812):
        
        # Assigning a Attribute to a Name (line 1812):
        # Getting the type of 'self' (line 1812)
        self_166724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 15), 'self')
        # Obtaining the member 'pressv' of a type (line 1812)
        pressv_166725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1812, 15), self_166724, 'pressv')
        # Assigning a type to the variable 'vmin' (line 1812)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1812, 8), 'vmin', pressv_166725)
        
        # Assigning a Call to a Tuple (line 1813):
        
        # Assigning a Call to a Name:
        
        # Call to _get_data(...): (line 1813)
        # Processing the call arguments (line 1813)
        # Getting the type of 'event' (line 1813)
        event_166728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 38), 'event', False)
        # Processing the call keyword arguments (line 1813)
        kwargs_166729 = {}
        # Getting the type of 'self' (line 1813)
        self_166726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 23), 'self', False)
        # Obtaining the member '_get_data' of a type (line 1813)
        _get_data_166727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1813, 23), self_166726, '_get_data')
        # Calling _get_data(args, kwargs) (line 1813)
        _get_data_call_result_166730 = invoke(stypy.reporting.localization.Localization(__file__, 1813, 23), _get_data_166727, *[event_166728], **kwargs_166729)
        
        # Assigning a type to the variable 'call_assignment_162297' (line 1813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 8), 'call_assignment_162297', _get_data_call_result_166730)
        
        # Assigning a Call to a Name (line 1813):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_166733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1813, 8), 'int')
        # Processing the call keyword arguments
        kwargs_166734 = {}
        # Getting the type of 'call_assignment_162297' (line 1813)
        call_assignment_162297_166731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 8), 'call_assignment_162297', False)
        # Obtaining the member '__getitem__' of a type (line 1813)
        getitem___166732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1813, 8), call_assignment_162297_166731, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_166735 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___166732, *[int_166733], **kwargs_166734)
        
        # Assigning a type to the variable 'call_assignment_162298' (line 1813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 8), 'call_assignment_162298', getitem___call_result_166735)
        
        # Assigning a Name to a Name (line 1813):
        # Getting the type of 'call_assignment_162298' (line 1813)
        call_assignment_162298_166736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 8), 'call_assignment_162298')
        # Assigning a type to the variable 'xdata' (line 1813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 8), 'xdata', call_assignment_162298_166736)
        
        # Assigning a Call to a Name (line 1813):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_166739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1813, 8), 'int')
        # Processing the call keyword arguments
        kwargs_166740 = {}
        # Getting the type of 'call_assignment_162297' (line 1813)
        call_assignment_162297_166737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 8), 'call_assignment_162297', False)
        # Obtaining the member '__getitem__' of a type (line 1813)
        getitem___166738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1813, 8), call_assignment_162297_166737, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_166741 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___166738, *[int_166739], **kwargs_166740)
        
        # Assigning a type to the variable 'call_assignment_162299' (line 1813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 8), 'call_assignment_162299', getitem___call_result_166741)
        
        # Assigning a Name to a Name (line 1813):
        # Getting the type of 'call_assignment_162299' (line 1813)
        call_assignment_162299_166742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 8), 'call_assignment_162299')
        # Assigning a type to the variable 'ydata' (line 1813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 15), 'ydata', call_assignment_162299_166742)
        
        
        # Getting the type of 'self' (line 1814)
        self_166743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 11), 'self')
        # Obtaining the member 'direction' of a type (line 1814)
        direction_166744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 11), self_166743, 'direction')
        unicode_166745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1814, 29), 'unicode', u'horizontal')
        # Applying the binary operator '==' (line 1814)
        result_eq_166746 = python_operator(stypy.reporting.localization.Localization(__file__, 1814, 11), '==', direction_166744, unicode_166745)
        
        # Testing the type of an if condition (line 1814)
        if_condition_166747 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1814, 8), result_eq_166746)
        # Assigning a type to the variable 'if_condition_166747' (line 1814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 8), 'if_condition_166747', if_condition_166747)
        # SSA begins for if statement (line 1814)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BoolOp to a Name (line 1815):
        
        # Assigning a BoolOp to a Name (line 1815):
        
        # Evaluating a boolean operation
        # Getting the type of 'xdata' (line 1815)
        xdata_166748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 19), 'xdata')
        
        # Obtaining the type of the subscript
        int_166749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1815, 38), 'int')
        # Getting the type of 'self' (line 1815)
        self_166750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 28), 'self')
        # Obtaining the member 'prev' of a type (line 1815)
        prev_166751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1815, 28), self_166750, 'prev')
        # Obtaining the member '__getitem__' of a type (line 1815)
        getitem___166752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1815, 28), prev_166751, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1815)
        subscript_call_result_166753 = invoke(stypy.reporting.localization.Localization(__file__, 1815, 28), getitem___166752, int_166749)
        
        # Applying the binary operator 'or' (line 1815)
        result_or_keyword_166754 = python_operator(stypy.reporting.localization.Localization(__file__, 1815, 19), 'or', xdata_166748, subscript_call_result_166753)
        
        # Assigning a type to the variable 'vmax' (line 1815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1815, 12), 'vmax', result_or_keyword_166754)
        # SSA branch for the else part of an if statement (line 1814)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BoolOp to a Name (line 1817):
        
        # Assigning a BoolOp to a Name (line 1817):
        
        # Evaluating a boolean operation
        # Getting the type of 'ydata' (line 1817)
        ydata_166755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 19), 'ydata')
        
        # Obtaining the type of the subscript
        int_166756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1817, 38), 'int')
        # Getting the type of 'self' (line 1817)
        self_166757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 28), 'self')
        # Obtaining the member 'prev' of a type (line 1817)
        prev_166758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 28), self_166757, 'prev')
        # Obtaining the member '__getitem__' of a type (line 1817)
        getitem___166759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 28), prev_166758, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1817)
        subscript_call_result_166760 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 28), getitem___166759, int_166756)
        
        # Applying the binary operator 'or' (line 1817)
        result_or_keyword_166761 = python_operator(stypy.reporting.localization.Localization(__file__, 1817, 19), 'or', ydata_166755, subscript_call_result_166760)
        
        # Assigning a type to the variable 'vmax' (line 1817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1817, 12), 'vmax', result_or_keyword_166761)
        # SSA join for if statement (line 1814)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'vmin' (line 1819)
        vmin_166762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 11), 'vmin')
        # Getting the type of 'vmax' (line 1819)
        vmax_166763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 18), 'vmax')
        # Applying the binary operator '>' (line 1819)
        result_gt_166764 = python_operator(stypy.reporting.localization.Localization(__file__, 1819, 11), '>', vmin_166762, vmax_166763)
        
        # Testing the type of an if condition (line 1819)
        if_condition_166765 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1819, 8), result_gt_166764)
        # Assigning a type to the variable 'if_condition_166765' (line 1819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1819, 8), 'if_condition_166765', if_condition_166765)
        # SSA begins for if statement (line 1819)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 1820):
        
        # Assigning a Name to a Name (line 1820):
        # Getting the type of 'vmax' (line 1820)
        vmax_166766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 25), 'vmax')
        # Assigning a type to the variable 'tuple_assignment_162300' (line 1820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 12), 'tuple_assignment_162300', vmax_166766)
        
        # Assigning a Name to a Name (line 1820):
        # Getting the type of 'vmin' (line 1820)
        vmin_166767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 31), 'vmin')
        # Assigning a type to the variable 'tuple_assignment_162301' (line 1820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 12), 'tuple_assignment_162301', vmin_166767)
        
        # Assigning a Name to a Name (line 1820):
        # Getting the type of 'tuple_assignment_162300' (line 1820)
        tuple_assignment_162300_166768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 12), 'tuple_assignment_162300')
        # Assigning a type to the variable 'vmin' (line 1820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 12), 'vmin', tuple_assignment_162300_166768)
        
        # Assigning a Name to a Name (line 1820):
        # Getting the type of 'tuple_assignment_162301' (line 1820)
        tuple_assignment_162301_166769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 12), 'tuple_assignment_162301')
        # Assigning a type to the variable 'vmax' (line 1820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 18), 'vmax', tuple_assignment_162301_166769)
        # SSA join for if statement (line 1819)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1821):
        
        # Assigning a BinOp to a Name (line 1821):
        # Getting the type of 'vmax' (line 1821)
        vmax_166770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 15), 'vmax')
        # Getting the type of 'vmin' (line 1821)
        vmin_166771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 22), 'vmin')
        # Applying the binary operator '-' (line 1821)
        result_sub_166772 = python_operator(stypy.reporting.localization.Localization(__file__, 1821, 15), '-', vmax_166770, vmin_166771)
        
        # Assigning a type to the variable 'span' (line 1821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1821, 8), 'span', result_sub_166772)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1822)
        self_166773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 11), 'self')
        # Obtaining the member 'minspan' of a type (line 1822)
        minspan_166774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1822, 11), self_166773, 'minspan')
        # Getting the type of 'None' (line 1822)
        None_166775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 31), 'None')
        # Applying the binary operator 'isnot' (line 1822)
        result_is_not_166776 = python_operator(stypy.reporting.localization.Localization(__file__, 1822, 11), 'isnot', minspan_166774, None_166775)
        
        
        # Getting the type of 'span' (line 1822)
        span_166777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 40), 'span')
        # Getting the type of 'self' (line 1822)
        self_166778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 47), 'self')
        # Obtaining the member 'minspan' of a type (line 1822)
        minspan_166779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1822, 47), self_166778, 'minspan')
        # Applying the binary operator '<' (line 1822)
        result_lt_166780 = python_operator(stypy.reporting.localization.Localization(__file__, 1822, 40), '<', span_166777, minspan_166779)
        
        # Applying the binary operator 'and' (line 1822)
        result_and_keyword_166781 = python_operator(stypy.reporting.localization.Localization(__file__, 1822, 11), 'and', result_is_not_166776, result_lt_166780)
        
        # Testing the type of an if condition (line 1822)
        if_condition_166782 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1822, 8), result_and_keyword_166781)
        # Assigning a type to the variable 'if_condition_166782' (line 1822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 8), 'if_condition_166782', if_condition_166782)
        # SSA begins for if statement (line 1822)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1823)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1823, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1822)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to onselect(...): (line 1824)
        # Processing the call arguments (line 1824)
        # Getting the type of 'vmin' (line 1824)
        vmin_166785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 22), 'vmin', False)
        # Getting the type of 'vmax' (line 1824)
        vmax_166786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 28), 'vmax', False)
        # Processing the call keyword arguments (line 1824)
        kwargs_166787 = {}
        # Getting the type of 'self' (line 1824)
        self_166783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 8), 'self', False)
        # Obtaining the member 'onselect' of a type (line 1824)
        onselect_166784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1824, 8), self_166783, 'onselect')
        # Calling onselect(args, kwargs) (line 1824)
        onselect_call_result_166788 = invoke(stypy.reporting.localization.Localization(__file__, 1824, 8), onselect_166784, *[vmin_166785, vmax_166786], **kwargs_166787)
        
        
        # Assigning a Name to a Attribute (line 1825):
        
        # Assigning a Name to a Attribute (line 1825):
        # Getting the type of 'None' (line 1825)
        None_166789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 22), 'None')
        # Getting the type of 'self' (line 1825)
        self_166790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 8), 'self')
        # Setting the type of the member 'pressv' of a type (line 1825)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1825, 8), self_166790, 'pressv', None_166789)
        # Getting the type of 'False' (line 1826)
        False_166791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1826, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 1826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1826, 8), 'stypy_return_type', False_166791)
        
        # ################# End of '_release(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_release' in the type store
        # Getting the type of 'stypy_return_type' (line 1796)
        stypy_return_type_166792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166792)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_release'
        return stypy_return_type_166792


    @norecursion
    def _onmove(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onmove'
        module_type_store = module_type_store.open_function_context('_onmove', 1828, 4, False)
        # Assigning a type to the variable 'self' (line 1829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1829, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SpanSelector._onmove.__dict__.__setitem__('stypy_localization', localization)
        SpanSelector._onmove.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SpanSelector._onmove.__dict__.__setitem__('stypy_type_store', module_type_store)
        SpanSelector._onmove.__dict__.__setitem__('stypy_function_name', 'SpanSelector._onmove')
        SpanSelector._onmove.__dict__.__setitem__('stypy_param_names_list', ['event'])
        SpanSelector._onmove.__dict__.__setitem__('stypy_varargs_param_name', None)
        SpanSelector._onmove.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SpanSelector._onmove.__dict__.__setitem__('stypy_call_defaults', defaults)
        SpanSelector._onmove.__dict__.__setitem__('stypy_call_varargs', varargs)
        SpanSelector._onmove.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SpanSelector._onmove.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SpanSelector._onmove', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onmove', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onmove(...)' code ##################

        unicode_166793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1829, 8), 'unicode', u'on motion notify event')
        
        # Type idiom detected: calculating its left and rigth part (line 1830)
        # Getting the type of 'self' (line 1830)
        self_166794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 11), 'self')
        # Obtaining the member 'pressv' of a type (line 1830)
        pressv_166795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1830, 11), self_166794, 'pressv')
        # Getting the type of 'None' (line 1830)
        None_166796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 26), 'None')
        
        (may_be_166797, more_types_in_union_166798) = may_be_none(pressv_166795, None_166796)

        if may_be_166797:

            if more_types_in_union_166798:
                # Runtime conditional SSA (line 1830)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 1831)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1831, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_166798:
                # SSA join for if statement (line 1830)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Tuple (line 1832):
        
        # Assigning a Call to a Name:
        
        # Call to _get_data(...): (line 1832)
        # Processing the call arguments (line 1832)
        # Getting the type of 'event' (line 1832)
        event_166801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 30), 'event', False)
        # Processing the call keyword arguments (line 1832)
        kwargs_166802 = {}
        # Getting the type of 'self' (line 1832)
        self_166799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 15), 'self', False)
        # Obtaining the member '_get_data' of a type (line 1832)
        _get_data_166800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1832, 15), self_166799, '_get_data')
        # Calling _get_data(args, kwargs) (line 1832)
        _get_data_call_result_166803 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 15), _get_data_166800, *[event_166801], **kwargs_166802)
        
        # Assigning a type to the variable 'call_assignment_162302' (line 1832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1832, 8), 'call_assignment_162302', _get_data_call_result_166803)
        
        # Assigning a Call to a Name (line 1832):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_166806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 8), 'int')
        # Processing the call keyword arguments
        kwargs_166807 = {}
        # Getting the type of 'call_assignment_162302' (line 1832)
        call_assignment_162302_166804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 8), 'call_assignment_162302', False)
        # Obtaining the member '__getitem__' of a type (line 1832)
        getitem___166805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1832, 8), call_assignment_162302_166804, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_166808 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___166805, *[int_166806], **kwargs_166807)
        
        # Assigning a type to the variable 'call_assignment_162303' (line 1832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1832, 8), 'call_assignment_162303', getitem___call_result_166808)
        
        # Assigning a Name to a Name (line 1832):
        # Getting the type of 'call_assignment_162303' (line 1832)
        call_assignment_162303_166809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 8), 'call_assignment_162303')
        # Assigning a type to the variable 'x' (line 1832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1832, 8), 'x', call_assignment_162303_166809)
        
        # Assigning a Call to a Name (line 1832):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_166812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 8), 'int')
        # Processing the call keyword arguments
        kwargs_166813 = {}
        # Getting the type of 'call_assignment_162302' (line 1832)
        call_assignment_162302_166810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 8), 'call_assignment_162302', False)
        # Obtaining the member '__getitem__' of a type (line 1832)
        getitem___166811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1832, 8), call_assignment_162302_166810, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_166814 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___166811, *[int_166812], **kwargs_166813)
        
        # Assigning a type to the variable 'call_assignment_162304' (line 1832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1832, 8), 'call_assignment_162304', getitem___call_result_166814)
        
        # Assigning a Name to a Name (line 1832):
        # Getting the type of 'call_assignment_162304' (line 1832)
        call_assignment_162304_166815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 8), 'call_assignment_162304')
        # Assigning a type to the variable 'y' (line 1832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1832, 11), 'y', call_assignment_162304_166815)
        
        # Type idiom detected: calculating its left and rigth part (line 1833)
        # Getting the type of 'x' (line 1833)
        x_166816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 11), 'x')
        # Getting the type of 'None' (line 1833)
        None_166817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 16), 'None')
        
        (may_be_166818, more_types_in_union_166819) = may_be_none(x_166816, None_166817)

        if may_be_166818:

            if more_types_in_union_166819:
                # Runtime conditional SSA (line 1833)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 1834)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1834, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_166819:
                # SSA join for if statement (line 1833)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Tuple to a Attribute (line 1836):
        
        # Assigning a Tuple to a Attribute (line 1836):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1836)
        tuple_166820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1836, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1836)
        # Adding element type (line 1836)
        # Getting the type of 'x' (line 1836)
        x_166821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 20), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1836, 20), tuple_166820, x_166821)
        # Adding element type (line 1836)
        # Getting the type of 'y' (line 1836)
        y_166822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 23), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1836, 20), tuple_166820, y_166822)
        
        # Getting the type of 'self' (line 1836)
        self_166823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 8), 'self')
        # Setting the type of the member 'prev' of a type (line 1836)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1836, 8), self_166823, 'prev', tuple_166820)
        
        
        # Getting the type of 'self' (line 1837)
        self_166824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 11), 'self')
        # Obtaining the member 'direction' of a type (line 1837)
        direction_166825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1837, 11), self_166824, 'direction')
        unicode_166826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1837, 29), 'unicode', u'horizontal')
        # Applying the binary operator '==' (line 1837)
        result_eq_166827 = python_operator(stypy.reporting.localization.Localization(__file__, 1837, 11), '==', direction_166825, unicode_166826)
        
        # Testing the type of an if condition (line 1837)
        if_condition_166828 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1837, 8), result_eq_166827)
        # Assigning a type to the variable 'if_condition_166828' (line 1837)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1837, 8), 'if_condition_166828', if_condition_166828)
        # SSA begins for if statement (line 1837)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1838):
        
        # Assigning a Name to a Name (line 1838):
        # Getting the type of 'x' (line 1838)
        x_166829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1838, 16), 'x')
        # Assigning a type to the variable 'v' (line 1838)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1838, 12), 'v', x_166829)
        # SSA branch for the else part of an if statement (line 1837)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1840):
        
        # Assigning a Name to a Name (line 1840):
        # Getting the type of 'y' (line 1840)
        y_166830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 16), 'y')
        # Assigning a type to the variable 'v' (line 1840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1840, 12), 'v', y_166830)
        # SSA join for if statement (line 1837)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 1842):
        
        # Assigning a Name to a Name (line 1842):
        # Getting the type of 'v' (line 1842)
        v_166831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 21), 'v')
        # Assigning a type to the variable 'tuple_assignment_162305' (line 1842)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 8), 'tuple_assignment_162305', v_166831)
        
        # Assigning a Attribute to a Name (line 1842):
        # Getting the type of 'self' (line 1842)
        self_166832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 24), 'self')
        # Obtaining the member 'pressv' of a type (line 1842)
        pressv_166833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1842, 24), self_166832, 'pressv')
        # Assigning a type to the variable 'tuple_assignment_162306' (line 1842)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 8), 'tuple_assignment_162306', pressv_166833)
        
        # Assigning a Name to a Name (line 1842):
        # Getting the type of 'tuple_assignment_162305' (line 1842)
        tuple_assignment_162305_166834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 8), 'tuple_assignment_162305')
        # Assigning a type to the variable 'minv' (line 1842)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 8), 'minv', tuple_assignment_162305_166834)
        
        # Assigning a Name to a Name (line 1842):
        # Getting the type of 'tuple_assignment_162306' (line 1842)
        tuple_assignment_162306_166835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 8), 'tuple_assignment_162306')
        # Assigning a type to the variable 'maxv' (line 1842)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 14), 'maxv', tuple_assignment_162306_166835)
        
        
        # Getting the type of 'minv' (line 1843)
        minv_166836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 11), 'minv')
        # Getting the type of 'maxv' (line 1843)
        maxv_166837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 18), 'maxv')
        # Applying the binary operator '>' (line 1843)
        result_gt_166838 = python_operator(stypy.reporting.localization.Localization(__file__, 1843, 11), '>', minv_166836, maxv_166837)
        
        # Testing the type of an if condition (line 1843)
        if_condition_166839 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1843, 8), result_gt_166838)
        # Assigning a type to the variable 'if_condition_166839' (line 1843)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1843, 8), 'if_condition_166839', if_condition_166839)
        # SSA begins for if statement (line 1843)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 1844):
        
        # Assigning a Name to a Name (line 1844):
        # Getting the type of 'maxv' (line 1844)
        maxv_166840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 25), 'maxv')
        # Assigning a type to the variable 'tuple_assignment_162307' (line 1844)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1844, 12), 'tuple_assignment_162307', maxv_166840)
        
        # Assigning a Name to a Name (line 1844):
        # Getting the type of 'minv' (line 1844)
        minv_166841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 31), 'minv')
        # Assigning a type to the variable 'tuple_assignment_162308' (line 1844)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1844, 12), 'tuple_assignment_162308', minv_166841)
        
        # Assigning a Name to a Name (line 1844):
        # Getting the type of 'tuple_assignment_162307' (line 1844)
        tuple_assignment_162307_166842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 12), 'tuple_assignment_162307')
        # Assigning a type to the variable 'minv' (line 1844)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1844, 12), 'minv', tuple_assignment_162307_166842)
        
        # Assigning a Name to a Name (line 1844):
        # Getting the type of 'tuple_assignment_162308' (line 1844)
        tuple_assignment_162308_166843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 12), 'tuple_assignment_162308')
        # Assigning a type to the variable 'maxv' (line 1844)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1844, 18), 'maxv', tuple_assignment_162308_166843)
        # SSA join for if statement (line 1843)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 1845)
        self_166844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 11), 'self')
        # Obtaining the member 'direction' of a type (line 1845)
        direction_166845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1845, 11), self_166844, 'direction')
        unicode_166846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 29), 'unicode', u'horizontal')
        # Applying the binary operator '==' (line 1845)
        result_eq_166847 = python_operator(stypy.reporting.localization.Localization(__file__, 1845, 11), '==', direction_166845, unicode_166846)
        
        # Testing the type of an if condition (line 1845)
        if_condition_166848 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1845, 8), result_eq_166847)
        # Assigning a type to the variable 'if_condition_166848' (line 1845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1845, 8), 'if_condition_166848', if_condition_166848)
        # SSA begins for if statement (line 1845)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_x(...): (line 1846)
        # Processing the call arguments (line 1846)
        # Getting the type of 'minv' (line 1846)
        minv_166852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 28), 'minv', False)
        # Processing the call keyword arguments (line 1846)
        kwargs_166853 = {}
        # Getting the type of 'self' (line 1846)
        self_166849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 12), 'self', False)
        # Obtaining the member 'rect' of a type (line 1846)
        rect_166850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1846, 12), self_166849, 'rect')
        # Obtaining the member 'set_x' of a type (line 1846)
        set_x_166851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1846, 12), rect_166850, 'set_x')
        # Calling set_x(args, kwargs) (line 1846)
        set_x_call_result_166854 = invoke(stypy.reporting.localization.Localization(__file__, 1846, 12), set_x_166851, *[minv_166852], **kwargs_166853)
        
        
        # Call to set_width(...): (line 1847)
        # Processing the call arguments (line 1847)
        # Getting the type of 'maxv' (line 1847)
        maxv_166858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 32), 'maxv', False)
        # Getting the type of 'minv' (line 1847)
        minv_166859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 39), 'minv', False)
        # Applying the binary operator '-' (line 1847)
        result_sub_166860 = python_operator(stypy.reporting.localization.Localization(__file__, 1847, 32), '-', maxv_166858, minv_166859)
        
        # Processing the call keyword arguments (line 1847)
        kwargs_166861 = {}
        # Getting the type of 'self' (line 1847)
        self_166855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 12), 'self', False)
        # Obtaining the member 'rect' of a type (line 1847)
        rect_166856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1847, 12), self_166855, 'rect')
        # Obtaining the member 'set_width' of a type (line 1847)
        set_width_166857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1847, 12), rect_166856, 'set_width')
        # Calling set_width(args, kwargs) (line 1847)
        set_width_call_result_166862 = invoke(stypy.reporting.localization.Localization(__file__, 1847, 12), set_width_166857, *[result_sub_166860], **kwargs_166861)
        
        # SSA branch for the else part of an if statement (line 1845)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_y(...): (line 1849)
        # Processing the call arguments (line 1849)
        # Getting the type of 'minv' (line 1849)
        minv_166866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 28), 'minv', False)
        # Processing the call keyword arguments (line 1849)
        kwargs_166867 = {}
        # Getting the type of 'self' (line 1849)
        self_166863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'self', False)
        # Obtaining the member 'rect' of a type (line 1849)
        rect_166864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 12), self_166863, 'rect')
        # Obtaining the member 'set_y' of a type (line 1849)
        set_y_166865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 12), rect_166864, 'set_y')
        # Calling set_y(args, kwargs) (line 1849)
        set_y_call_result_166868 = invoke(stypy.reporting.localization.Localization(__file__, 1849, 12), set_y_166865, *[minv_166866], **kwargs_166867)
        
        
        # Call to set_height(...): (line 1850)
        # Processing the call arguments (line 1850)
        # Getting the type of 'maxv' (line 1850)
        maxv_166872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 33), 'maxv', False)
        # Getting the type of 'minv' (line 1850)
        minv_166873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 40), 'minv', False)
        # Applying the binary operator '-' (line 1850)
        result_sub_166874 = python_operator(stypy.reporting.localization.Localization(__file__, 1850, 33), '-', maxv_166872, minv_166873)
        
        # Processing the call keyword arguments (line 1850)
        kwargs_166875 = {}
        # Getting the type of 'self' (line 1850)
        self_166869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 12), 'self', False)
        # Obtaining the member 'rect' of a type (line 1850)
        rect_166870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1850, 12), self_166869, 'rect')
        # Obtaining the member 'set_height' of a type (line 1850)
        set_height_166871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1850, 12), rect_166870, 'set_height')
        # Calling set_height(args, kwargs) (line 1850)
        set_height_call_result_166876 = invoke(stypy.reporting.localization.Localization(__file__, 1850, 12), set_height_166871, *[result_sub_166874], **kwargs_166875)
        
        # SSA join for if statement (line 1845)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 1852)
        self_166877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 11), 'self')
        # Obtaining the member 'onmove_callback' of a type (line 1852)
        onmove_callback_166878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1852, 11), self_166877, 'onmove_callback')
        # Getting the type of 'None' (line 1852)
        None_166879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 39), 'None')
        # Applying the binary operator 'isnot' (line 1852)
        result_is_not_166880 = python_operator(stypy.reporting.localization.Localization(__file__, 1852, 11), 'isnot', onmove_callback_166878, None_166879)
        
        # Testing the type of an if condition (line 1852)
        if_condition_166881 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1852, 8), result_is_not_166880)
        # Assigning a type to the variable 'if_condition_166881' (line 1852)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1852, 8), 'if_condition_166881', if_condition_166881)
        # SSA begins for if statement (line 1852)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1853):
        
        # Assigning a Attribute to a Name (line 1853):
        # Getting the type of 'self' (line 1853)
        self_166882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 19), 'self')
        # Obtaining the member 'pressv' of a type (line 1853)
        pressv_166883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1853, 19), self_166882, 'pressv')
        # Assigning a type to the variable 'vmin' (line 1853)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1853, 12), 'vmin', pressv_166883)
        
        # Assigning a Call to a Tuple (line 1854):
        
        # Assigning a Call to a Name:
        
        # Call to _get_data(...): (line 1854)
        # Processing the call arguments (line 1854)
        # Getting the type of 'event' (line 1854)
        event_166886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 42), 'event', False)
        # Processing the call keyword arguments (line 1854)
        kwargs_166887 = {}
        # Getting the type of 'self' (line 1854)
        self_166884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 27), 'self', False)
        # Obtaining the member '_get_data' of a type (line 1854)
        _get_data_166885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 27), self_166884, '_get_data')
        # Calling _get_data(args, kwargs) (line 1854)
        _get_data_call_result_166888 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 27), _get_data_166885, *[event_166886], **kwargs_166887)
        
        # Assigning a type to the variable 'call_assignment_162309' (line 1854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 12), 'call_assignment_162309', _get_data_call_result_166888)
        
        # Assigning a Call to a Name (line 1854):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_166891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 12), 'int')
        # Processing the call keyword arguments
        kwargs_166892 = {}
        # Getting the type of 'call_assignment_162309' (line 1854)
        call_assignment_162309_166889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 12), 'call_assignment_162309', False)
        # Obtaining the member '__getitem__' of a type (line 1854)
        getitem___166890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 12), call_assignment_162309_166889, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_166893 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___166890, *[int_166891], **kwargs_166892)
        
        # Assigning a type to the variable 'call_assignment_162310' (line 1854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 12), 'call_assignment_162310', getitem___call_result_166893)
        
        # Assigning a Name to a Name (line 1854):
        # Getting the type of 'call_assignment_162310' (line 1854)
        call_assignment_162310_166894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 12), 'call_assignment_162310')
        # Assigning a type to the variable 'xdata' (line 1854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 12), 'xdata', call_assignment_162310_166894)
        
        # Assigning a Call to a Name (line 1854):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_166897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 12), 'int')
        # Processing the call keyword arguments
        kwargs_166898 = {}
        # Getting the type of 'call_assignment_162309' (line 1854)
        call_assignment_162309_166895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 12), 'call_assignment_162309', False)
        # Obtaining the member '__getitem__' of a type (line 1854)
        getitem___166896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 12), call_assignment_162309_166895, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_166899 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___166896, *[int_166897], **kwargs_166898)
        
        # Assigning a type to the variable 'call_assignment_162311' (line 1854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 12), 'call_assignment_162311', getitem___call_result_166899)
        
        # Assigning a Name to a Name (line 1854):
        # Getting the type of 'call_assignment_162311' (line 1854)
        call_assignment_162311_166900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 12), 'call_assignment_162311')
        # Assigning a type to the variable 'ydata' (line 1854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 19), 'ydata', call_assignment_162311_166900)
        
        
        # Getting the type of 'self' (line 1855)
        self_166901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 15), 'self')
        # Obtaining the member 'direction' of a type (line 1855)
        direction_166902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1855, 15), self_166901, 'direction')
        unicode_166903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1855, 33), 'unicode', u'horizontal')
        # Applying the binary operator '==' (line 1855)
        result_eq_166904 = python_operator(stypy.reporting.localization.Localization(__file__, 1855, 15), '==', direction_166902, unicode_166903)
        
        # Testing the type of an if condition (line 1855)
        if_condition_166905 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1855, 12), result_eq_166904)
        # Assigning a type to the variable 'if_condition_166905' (line 1855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1855, 12), 'if_condition_166905', if_condition_166905)
        # SSA begins for if statement (line 1855)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BoolOp to a Name (line 1856):
        
        # Assigning a BoolOp to a Name (line 1856):
        
        # Evaluating a boolean operation
        # Getting the type of 'xdata' (line 1856)
        xdata_166906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 23), 'xdata')
        
        # Obtaining the type of the subscript
        int_166907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1856, 42), 'int')
        # Getting the type of 'self' (line 1856)
        self_166908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 32), 'self')
        # Obtaining the member 'prev' of a type (line 1856)
        prev_166909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1856, 32), self_166908, 'prev')
        # Obtaining the member '__getitem__' of a type (line 1856)
        getitem___166910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1856, 32), prev_166909, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1856)
        subscript_call_result_166911 = invoke(stypy.reporting.localization.Localization(__file__, 1856, 32), getitem___166910, int_166907)
        
        # Applying the binary operator 'or' (line 1856)
        result_or_keyword_166912 = python_operator(stypy.reporting.localization.Localization(__file__, 1856, 23), 'or', xdata_166906, subscript_call_result_166911)
        
        # Assigning a type to the variable 'vmax' (line 1856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1856, 16), 'vmax', result_or_keyword_166912)
        # SSA branch for the else part of an if statement (line 1855)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BoolOp to a Name (line 1858):
        
        # Assigning a BoolOp to a Name (line 1858):
        
        # Evaluating a boolean operation
        # Getting the type of 'ydata' (line 1858)
        ydata_166913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 23), 'ydata')
        
        # Obtaining the type of the subscript
        int_166914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1858, 42), 'int')
        # Getting the type of 'self' (line 1858)
        self_166915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 32), 'self')
        # Obtaining the member 'prev' of a type (line 1858)
        prev_166916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1858, 32), self_166915, 'prev')
        # Obtaining the member '__getitem__' of a type (line 1858)
        getitem___166917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1858, 32), prev_166916, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1858)
        subscript_call_result_166918 = invoke(stypy.reporting.localization.Localization(__file__, 1858, 32), getitem___166917, int_166914)
        
        # Applying the binary operator 'or' (line 1858)
        result_or_keyword_166919 = python_operator(stypy.reporting.localization.Localization(__file__, 1858, 23), 'or', ydata_166913, subscript_call_result_166918)
        
        # Assigning a type to the variable 'vmax' (line 1858)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1858, 16), 'vmax', result_or_keyword_166919)
        # SSA join for if statement (line 1855)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'vmin' (line 1860)
        vmin_166920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1860, 15), 'vmin')
        # Getting the type of 'vmax' (line 1860)
        vmax_166921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1860, 22), 'vmax')
        # Applying the binary operator '>' (line 1860)
        result_gt_166922 = python_operator(stypy.reporting.localization.Localization(__file__, 1860, 15), '>', vmin_166920, vmax_166921)
        
        # Testing the type of an if condition (line 1860)
        if_condition_166923 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1860, 12), result_gt_166922)
        # Assigning a type to the variable 'if_condition_166923' (line 1860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1860, 12), 'if_condition_166923', if_condition_166923)
        # SSA begins for if statement (line 1860)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 1861):
        
        # Assigning a Name to a Name (line 1861):
        # Getting the type of 'vmax' (line 1861)
        vmax_166924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 29), 'vmax')
        # Assigning a type to the variable 'tuple_assignment_162312' (line 1861)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1861, 16), 'tuple_assignment_162312', vmax_166924)
        
        # Assigning a Name to a Name (line 1861):
        # Getting the type of 'vmin' (line 1861)
        vmin_166925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 35), 'vmin')
        # Assigning a type to the variable 'tuple_assignment_162313' (line 1861)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1861, 16), 'tuple_assignment_162313', vmin_166925)
        
        # Assigning a Name to a Name (line 1861):
        # Getting the type of 'tuple_assignment_162312' (line 1861)
        tuple_assignment_162312_166926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 16), 'tuple_assignment_162312')
        # Assigning a type to the variable 'vmin' (line 1861)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1861, 16), 'vmin', tuple_assignment_162312_166926)
        
        # Assigning a Name to a Name (line 1861):
        # Getting the type of 'tuple_assignment_162313' (line 1861)
        tuple_assignment_162313_166927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 16), 'tuple_assignment_162313')
        # Assigning a type to the variable 'vmax' (line 1861)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1861, 22), 'vmax', tuple_assignment_162313_166927)
        # SSA join for if statement (line 1860)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to onmove_callback(...): (line 1862)
        # Processing the call arguments (line 1862)
        # Getting the type of 'vmin' (line 1862)
        vmin_166930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 33), 'vmin', False)
        # Getting the type of 'vmax' (line 1862)
        vmax_166931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 39), 'vmax', False)
        # Processing the call keyword arguments (line 1862)
        kwargs_166932 = {}
        # Getting the type of 'self' (line 1862)
        self_166928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 12), 'self', False)
        # Obtaining the member 'onmove_callback' of a type (line 1862)
        onmove_callback_166929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1862, 12), self_166928, 'onmove_callback')
        # Calling onmove_callback(args, kwargs) (line 1862)
        onmove_callback_call_result_166933 = invoke(stypy.reporting.localization.Localization(__file__, 1862, 12), onmove_callback_166929, *[vmin_166930, vmax_166931], **kwargs_166932)
        
        # SSA join for if statement (line 1852)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to update(...): (line 1864)
        # Processing the call keyword arguments (line 1864)
        kwargs_166936 = {}
        # Getting the type of 'self' (line 1864)
        self_166934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 8), 'self', False)
        # Obtaining the member 'update' of a type (line 1864)
        update_166935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1864, 8), self_166934, 'update')
        # Calling update(args, kwargs) (line 1864)
        update_call_result_166937 = invoke(stypy.reporting.localization.Localization(__file__, 1864, 8), update_166935, *[], **kwargs_166936)
        
        # Getting the type of 'False' (line 1865)
        False_166938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 1865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1865, 8), 'stypy_return_type', False_166938)
        
        # ################# End of '_onmove(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onmove' in the type store
        # Getting the type of 'stypy_return_type' (line 1828)
        stypy_return_type_166939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166939)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onmove'
        return stypy_return_type_166939


# Assigning a type to the variable 'SpanSelector' (line 1652)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1652, 0), 'SpanSelector', SpanSelector)
# Declaration of the 'ToolHandles' class

class ToolHandles(object, ):
    unicode_166940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1881, (-1)), 'unicode', u'Control handles for canvas tools.\n\n    Parameters\n    ----------\n    ax : :class:`matplotlib.axes.Axes`\n        Matplotlib axes where tool handles are displayed.\n    x, y : 1D arrays\n        Coordinates of control handles.\n    marker : str\n        Shape of marker used to display handle. See `matplotlib.pyplot.plot`.\n    marker_props : dict\n        Additional marker properties. See :class:`matplotlib.lines.Line2D`.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_166941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1883, 40), 'unicode', u'o')
        # Getting the type of 'None' (line 1883)
        None_166942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1883, 58), 'None')
        # Getting the type of 'True' (line 1883)
        True_166943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1883, 72), 'True')
        defaults = [unicode_166941, None_166942, True_166943]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1883, 4, False)
        # Assigning a type to the variable 'self' (line 1884)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1884, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolHandles.__init__', ['ax', 'x', 'y', 'marker', 'marker_props', 'useblit'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'x', 'y', 'marker', 'marker_props', 'useblit'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1884):
        
        # Assigning a Name to a Attribute (line 1884):
        # Getting the type of 'ax' (line 1884)
        ax_166944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 18), 'ax')
        # Getting the type of 'self' (line 1884)
        self_166945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 8), 'self')
        # Setting the type of the member 'ax' of a type (line 1884)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1884, 8), self_166945, 'ax', ax_166944)
        
        # Assigning a Call to a Name (line 1886):
        
        # Assigning a Call to a Name (line 1886):
        
        # Call to dict(...): (line 1886)
        # Processing the call keyword arguments (line 1886)
        # Getting the type of 'marker' (line 1886)
        marker_166947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 28), 'marker', False)
        keyword_166948 = marker_166947
        int_166949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1886, 47), 'int')
        keyword_166950 = int_166949
        unicode_166951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1886, 54), 'unicode', u'w')
        keyword_166952 = unicode_166951
        unicode_166953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1886, 62), 'unicode', u'none')
        keyword_166954 = unicode_166953
        float_166955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1887, 27), 'float')
        keyword_166956 = float_166955
        # Getting the type of 'False' (line 1887)
        False_166957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 40), 'False', False)
        keyword_166958 = False_166957
        unicode_166959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1887, 53), 'unicode', u'_nolegend_')
        keyword_166960 = unicode_166959
        kwargs_166961 = {'mfc': keyword_166952, 'markersize': keyword_166950, 'label': keyword_166960, 'visible': keyword_166958, 'ls': keyword_166954, 'marker': keyword_166948, 'alpha': keyword_166956}
        # Getting the type of 'dict' (line 1886)
        dict_166946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 16), 'dict', False)
        # Calling dict(args, kwargs) (line 1886)
        dict_call_result_166962 = invoke(stypy.reporting.localization.Localization(__file__, 1886, 16), dict_166946, *[], **kwargs_166961)
        
        # Assigning a type to the variable 'props' (line 1886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1886, 8), 'props', dict_call_result_166962)
        
        # Call to update(...): (line 1888)
        # Processing the call arguments (line 1888)
        
        
        # Getting the type of 'marker_props' (line 1888)
        marker_props_166965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 37), 'marker_props', False)
        # Getting the type of 'None' (line 1888)
        None_166966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 57), 'None', False)
        # Applying the binary operator 'isnot' (line 1888)
        result_is_not_166967 = python_operator(stypy.reporting.localization.Localization(__file__, 1888, 37), 'isnot', marker_props_166965, None_166966)
        
        # Testing the type of an if expression (line 1888)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1888, 21), result_is_not_166967)
        # SSA begins for if expression (line 1888)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        # Getting the type of 'marker_props' (line 1888)
        marker_props_166968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 21), 'marker_props', False)
        # SSA branch for the else part of an if expression (line 1888)
        module_type_store.open_ssa_branch('if expression else')
        
        # Obtaining an instance of the builtin type 'dict' (line 1888)
        dict_166969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1888, 67), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1888)
        
        # SSA join for if expression (line 1888)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_166970 = union_type.UnionType.add(marker_props_166968, dict_166969)
        
        # Processing the call keyword arguments (line 1888)
        kwargs_166971 = {}
        # Getting the type of 'props' (line 1888)
        props_166963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 8), 'props', False)
        # Obtaining the member 'update' of a type (line 1888)
        update_166964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1888, 8), props_166963, 'update')
        # Calling update(args, kwargs) (line 1888)
        update_call_result_166972 = invoke(stypy.reporting.localization.Localization(__file__, 1888, 8), update_166964, *[if_exp_166970], **kwargs_166971)
        
        
        # Assigning a Call to a Attribute (line 1889):
        
        # Assigning a Call to a Attribute (line 1889):
        
        # Call to Line2D(...): (line 1889)
        # Processing the call arguments (line 1889)
        # Getting the type of 'x' (line 1889)
        x_166974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 31), 'x', False)
        # Getting the type of 'y' (line 1889)
        y_166975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 34), 'y', False)
        # Processing the call keyword arguments (line 1889)
        # Getting the type of 'useblit' (line 1889)
        useblit_166976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 46), 'useblit', False)
        keyword_166977 = useblit_166976
        # Getting the type of 'props' (line 1889)
        props_166978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 57), 'props', False)
        kwargs_166979 = {'animated': keyword_166977, 'props_166978': props_166978}
        # Getting the type of 'Line2D' (line 1889)
        Line2D_166973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 24), 'Line2D', False)
        # Calling Line2D(args, kwargs) (line 1889)
        Line2D_call_result_166980 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 24), Line2D_166973, *[x_166974, y_166975], **kwargs_166979)
        
        # Getting the type of 'self' (line 1889)
        self_166981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 8), 'self')
        # Setting the type of the member '_markers' of a type (line 1889)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1889, 8), self_166981, '_markers', Line2D_call_result_166980)
        
        # Call to add_line(...): (line 1890)
        # Processing the call arguments (line 1890)
        # Getting the type of 'self' (line 1890)
        self_166985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 25), 'self', False)
        # Obtaining the member '_markers' of a type (line 1890)
        _markers_166986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1890, 25), self_166985, '_markers')
        # Processing the call keyword arguments (line 1890)
        kwargs_166987 = {}
        # Getting the type of 'self' (line 1890)
        self_166982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 8), 'self', False)
        # Obtaining the member 'ax' of a type (line 1890)
        ax_166983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1890, 8), self_166982, 'ax')
        # Obtaining the member 'add_line' of a type (line 1890)
        add_line_166984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1890, 8), ax_166983, 'add_line')
        # Calling add_line(args, kwargs) (line 1890)
        add_line_call_result_166988 = invoke(stypy.reporting.localization.Localization(__file__, 1890, 8), add_line_166984, *[_markers_166986], **kwargs_166987)
        
        
        # Assigning a Attribute to a Attribute (line 1891):
        
        # Assigning a Attribute to a Attribute (line 1891):
        # Getting the type of 'self' (line 1891)
        self_166989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1891, 22), 'self')
        # Obtaining the member '_markers' of a type (line 1891)
        _markers_166990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1891, 22), self_166989, '_markers')
        # Getting the type of 'self' (line 1891)
        self_166991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1891, 8), 'self')
        # Setting the type of the member 'artist' of a type (line 1891)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1891, 8), self_166991, 'artist', _markers_166990)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def x(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'x'
        module_type_store = module_type_store.open_function_context('x', 1893, 4, False)
        # Assigning a type to the variable 'self' (line 1894)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1894, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolHandles.x.__dict__.__setitem__('stypy_localization', localization)
        ToolHandles.x.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolHandles.x.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolHandles.x.__dict__.__setitem__('stypy_function_name', 'ToolHandles.x')
        ToolHandles.x.__dict__.__setitem__('stypy_param_names_list', [])
        ToolHandles.x.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolHandles.x.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolHandles.x.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolHandles.x.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolHandles.x.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolHandles.x.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolHandles.x', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'x', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'x(...)' code ##################

        
        # Call to get_xdata(...): (line 1895)
        # Processing the call keyword arguments (line 1895)
        kwargs_166995 = {}
        # Getting the type of 'self' (line 1895)
        self_166992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 15), 'self', False)
        # Obtaining the member '_markers' of a type (line 1895)
        _markers_166993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1895, 15), self_166992, '_markers')
        # Obtaining the member 'get_xdata' of a type (line 1895)
        get_xdata_166994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1895, 15), _markers_166993, 'get_xdata')
        # Calling get_xdata(args, kwargs) (line 1895)
        get_xdata_call_result_166996 = invoke(stypy.reporting.localization.Localization(__file__, 1895, 15), get_xdata_166994, *[], **kwargs_166995)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1895, 8), 'stypy_return_type', get_xdata_call_result_166996)
        
        # ################# End of 'x(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'x' in the type store
        # Getting the type of 'stypy_return_type' (line 1893)
        stypy_return_type_166997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_166997)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'x'
        return stypy_return_type_166997


    @norecursion
    def y(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'y'
        module_type_store = module_type_store.open_function_context('y', 1897, 4, False)
        # Assigning a type to the variable 'self' (line 1898)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1898, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolHandles.y.__dict__.__setitem__('stypy_localization', localization)
        ToolHandles.y.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolHandles.y.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolHandles.y.__dict__.__setitem__('stypy_function_name', 'ToolHandles.y')
        ToolHandles.y.__dict__.__setitem__('stypy_param_names_list', [])
        ToolHandles.y.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolHandles.y.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolHandles.y.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolHandles.y.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolHandles.y.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolHandles.y.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolHandles.y', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'y', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'y(...)' code ##################

        
        # Call to get_ydata(...): (line 1899)
        # Processing the call keyword arguments (line 1899)
        kwargs_167001 = {}
        # Getting the type of 'self' (line 1899)
        self_166998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 15), 'self', False)
        # Obtaining the member '_markers' of a type (line 1899)
        _markers_166999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1899, 15), self_166998, '_markers')
        # Obtaining the member 'get_ydata' of a type (line 1899)
        get_ydata_167000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1899, 15), _markers_166999, 'get_ydata')
        # Calling get_ydata(args, kwargs) (line 1899)
        get_ydata_call_result_167002 = invoke(stypy.reporting.localization.Localization(__file__, 1899, 15), get_ydata_167000, *[], **kwargs_167001)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1899)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1899, 8), 'stypy_return_type', get_ydata_call_result_167002)
        
        # ################# End of 'y(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'y' in the type store
        # Getting the type of 'stypy_return_type' (line 1897)
        stypy_return_type_167003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_167003)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'y'
        return stypy_return_type_167003


    @norecursion
    def set_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1901)
        None_167004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 30), 'None')
        defaults = [None_167004]
        # Create a new context for function 'set_data'
        module_type_store = module_type_store.open_function_context('set_data', 1901, 4, False)
        # Assigning a type to the variable 'self' (line 1902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1902, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolHandles.set_data.__dict__.__setitem__('stypy_localization', localization)
        ToolHandles.set_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolHandles.set_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolHandles.set_data.__dict__.__setitem__('stypy_function_name', 'ToolHandles.set_data')
        ToolHandles.set_data.__dict__.__setitem__('stypy_param_names_list', ['pts', 'y'])
        ToolHandles.set_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolHandles.set_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolHandles.set_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolHandles.set_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolHandles.set_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolHandles.set_data.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolHandles.set_data', ['pts', 'y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_data', localization, ['pts', 'y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_data(...)' code ##################

        unicode_167005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1902, 8), 'unicode', u'Set x and y positions of handles')
        
        # Type idiom detected: calculating its left and rigth part (line 1903)
        # Getting the type of 'y' (line 1903)
        y_167006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1903, 8), 'y')
        # Getting the type of 'None' (line 1903)
        None_167007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1903, 20), 'None')
        
        (may_be_167008, more_types_in_union_167009) = may_not_be_none(y_167006, None_167007)

        if may_be_167008:

            if more_types_in_union_167009:
                # Runtime conditional SSA (line 1903)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 1904):
            
            # Assigning a Name to a Name (line 1904):
            # Getting the type of 'pts' (line 1904)
            pts_167010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 16), 'pts')
            # Assigning a type to the variable 'x' (line 1904)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1904, 12), 'x', pts_167010)
            
            # Assigning a Call to a Name (line 1905):
            
            # Assigning a Call to a Name (line 1905):
            
            # Call to array(...): (line 1905)
            # Processing the call arguments (line 1905)
            
            # Obtaining an instance of the builtin type 'list' (line 1905)
            list_167013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1905, 27), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1905)
            # Adding element type (line 1905)
            # Getting the type of 'x' (line 1905)
            x_167014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 28), 'x', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1905, 27), list_167013, x_167014)
            # Adding element type (line 1905)
            # Getting the type of 'y' (line 1905)
            y_167015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 31), 'y', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1905, 27), list_167013, y_167015)
            
            # Processing the call keyword arguments (line 1905)
            kwargs_167016 = {}
            # Getting the type of 'np' (line 1905)
            np_167011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 18), 'np', False)
            # Obtaining the member 'array' of a type (line 1905)
            array_167012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1905, 18), np_167011, 'array')
            # Calling array(args, kwargs) (line 1905)
            array_call_result_167017 = invoke(stypy.reporting.localization.Localization(__file__, 1905, 18), array_167012, *[list_167013], **kwargs_167016)
            
            # Assigning a type to the variable 'pts' (line 1905)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1905, 12), 'pts', array_call_result_167017)

            if more_types_in_union_167009:
                # SSA join for if statement (line 1903)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to set_data(...): (line 1906)
        # Processing the call arguments (line 1906)
        # Getting the type of 'pts' (line 1906)
        pts_167021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 31), 'pts', False)
        # Processing the call keyword arguments (line 1906)
        kwargs_167022 = {}
        # Getting the type of 'self' (line 1906)
        self_167018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 8), 'self', False)
        # Obtaining the member '_markers' of a type (line 1906)
        _markers_167019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1906, 8), self_167018, '_markers')
        # Obtaining the member 'set_data' of a type (line 1906)
        set_data_167020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1906, 8), _markers_167019, 'set_data')
        # Calling set_data(args, kwargs) (line 1906)
        set_data_call_result_167023 = invoke(stypy.reporting.localization.Localization(__file__, 1906, 8), set_data_167020, *[pts_167021], **kwargs_167022)
        
        
        # ################# End of 'set_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_data' in the type store
        # Getting the type of 'stypy_return_type' (line 1901)
        stypy_return_type_167024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_167024)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_data'
        return stypy_return_type_167024


    @norecursion
    def set_visible(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_visible'
        module_type_store = module_type_store.open_function_context('set_visible', 1908, 4, False)
        # Assigning a type to the variable 'self' (line 1909)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1909, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolHandles.set_visible.__dict__.__setitem__('stypy_localization', localization)
        ToolHandles.set_visible.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolHandles.set_visible.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolHandles.set_visible.__dict__.__setitem__('stypy_function_name', 'ToolHandles.set_visible')
        ToolHandles.set_visible.__dict__.__setitem__('stypy_param_names_list', ['val'])
        ToolHandles.set_visible.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolHandles.set_visible.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolHandles.set_visible.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolHandles.set_visible.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolHandles.set_visible.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolHandles.set_visible.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolHandles.set_visible', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_visible', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_visible(...)' code ##################

        
        # Call to set_visible(...): (line 1909)
        # Processing the call arguments (line 1909)
        # Getting the type of 'val' (line 1909)
        val_167028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 34), 'val', False)
        # Processing the call keyword arguments (line 1909)
        kwargs_167029 = {}
        # Getting the type of 'self' (line 1909)
        self_167025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 8), 'self', False)
        # Obtaining the member '_markers' of a type (line 1909)
        _markers_167026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1909, 8), self_167025, '_markers')
        # Obtaining the member 'set_visible' of a type (line 1909)
        set_visible_167027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1909, 8), _markers_167026, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1909)
        set_visible_call_result_167030 = invoke(stypy.reporting.localization.Localization(__file__, 1909, 8), set_visible_167027, *[val_167028], **kwargs_167029)
        
        
        # ################# End of 'set_visible(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_visible' in the type store
        # Getting the type of 'stypy_return_type' (line 1908)
        stypy_return_type_167031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_167031)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_visible'
        return stypy_return_type_167031


    @norecursion
    def set_animated(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_animated'
        module_type_store = module_type_store.open_function_context('set_animated', 1911, 4, False)
        # Assigning a type to the variable 'self' (line 1912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolHandles.set_animated.__dict__.__setitem__('stypy_localization', localization)
        ToolHandles.set_animated.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolHandles.set_animated.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolHandles.set_animated.__dict__.__setitem__('stypy_function_name', 'ToolHandles.set_animated')
        ToolHandles.set_animated.__dict__.__setitem__('stypy_param_names_list', ['val'])
        ToolHandles.set_animated.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolHandles.set_animated.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolHandles.set_animated.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolHandles.set_animated.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolHandles.set_animated.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolHandles.set_animated.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolHandles.set_animated', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_animated', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_animated(...)' code ##################

        
        # Call to set_animated(...): (line 1912)
        # Processing the call arguments (line 1912)
        # Getting the type of 'val' (line 1912)
        val_167035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 35), 'val', False)
        # Processing the call keyword arguments (line 1912)
        kwargs_167036 = {}
        # Getting the type of 'self' (line 1912)
        self_167032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 8), 'self', False)
        # Obtaining the member '_markers' of a type (line 1912)
        _markers_167033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1912, 8), self_167032, '_markers')
        # Obtaining the member 'set_animated' of a type (line 1912)
        set_animated_167034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1912, 8), _markers_167033, 'set_animated')
        # Calling set_animated(args, kwargs) (line 1912)
        set_animated_call_result_167037 = invoke(stypy.reporting.localization.Localization(__file__, 1912, 8), set_animated_167034, *[val_167035], **kwargs_167036)
        
        
        # ################# End of 'set_animated(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_animated' in the type store
        # Getting the type of 'stypy_return_type' (line 1911)
        stypy_return_type_167038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_167038)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_animated'
        return stypy_return_type_167038


    @norecursion
    def closest(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'closest'
        module_type_store = module_type_store.open_function_context('closest', 1914, 4, False)
        # Assigning a type to the variable 'self' (line 1915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1915, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ToolHandles.closest.__dict__.__setitem__('stypy_localization', localization)
        ToolHandles.closest.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ToolHandles.closest.__dict__.__setitem__('stypy_type_store', module_type_store)
        ToolHandles.closest.__dict__.__setitem__('stypy_function_name', 'ToolHandles.closest')
        ToolHandles.closest.__dict__.__setitem__('stypy_param_names_list', ['x', 'y'])
        ToolHandles.closest.__dict__.__setitem__('stypy_varargs_param_name', None)
        ToolHandles.closest.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ToolHandles.closest.__dict__.__setitem__('stypy_call_defaults', defaults)
        ToolHandles.closest.__dict__.__setitem__('stypy_call_varargs', varargs)
        ToolHandles.closest.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ToolHandles.closest.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ToolHandles.closest', ['x', 'y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'closest', localization, ['x', 'y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'closest(...)' code ##################

        unicode_167039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1915, 8), 'unicode', u'Return index and pixel distance to closest index.')
        
        # Assigning a Call to a Name (line 1916):
        
        # Assigning a Call to a Name (line 1916):
        
        # Call to transpose(...): (line 1916)
        # Processing the call arguments (line 1916)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1916)
        tuple_167042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1916, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1916)
        # Adding element type (line 1916)
        # Getting the type of 'self' (line 1916)
        self_167043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 28), 'self', False)
        # Obtaining the member 'x' of a type (line 1916)
        x_167044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 28), self_167043, 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1916, 28), tuple_167042, x_167044)
        # Adding element type (line 1916)
        # Getting the type of 'self' (line 1916)
        self_167045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 36), 'self', False)
        # Obtaining the member 'y' of a type (line 1916)
        y_167046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 36), self_167045, 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1916, 28), tuple_167042, y_167046)
        
        # Processing the call keyword arguments (line 1916)
        kwargs_167047 = {}
        # Getting the type of 'np' (line 1916)
        np_167040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 14), 'np', False)
        # Obtaining the member 'transpose' of a type (line 1916)
        transpose_167041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 14), np_167040, 'transpose')
        # Calling transpose(args, kwargs) (line 1916)
        transpose_call_result_167048 = invoke(stypy.reporting.localization.Localization(__file__, 1916, 14), transpose_167041, *[tuple_167042], **kwargs_167047)
        
        # Assigning a type to the variable 'pts' (line 1916)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1916, 8), 'pts', transpose_call_result_167048)
        
        # Assigning a Call to a Name (line 1918):
        
        # Assigning a Call to a Name (line 1918):
        
        # Call to transform(...): (line 1918)
        # Processing the call arguments (line 1918)
        # Getting the type of 'pts' (line 1918)
        pts_167053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 42), 'pts', False)
        # Processing the call keyword arguments (line 1918)
        kwargs_167054 = {}
        # Getting the type of 'self' (line 1918)
        self_167049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 14), 'self', False)
        # Obtaining the member 'ax' of a type (line 1918)
        ax_167050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1918, 14), self_167049, 'ax')
        # Obtaining the member 'transData' of a type (line 1918)
        transData_167051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1918, 14), ax_167050, 'transData')
        # Obtaining the member 'transform' of a type (line 1918)
        transform_167052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1918, 14), transData_167051, 'transform')
        # Calling transform(args, kwargs) (line 1918)
        transform_call_result_167055 = invoke(stypy.reporting.localization.Localization(__file__, 1918, 14), transform_167052, *[pts_167053], **kwargs_167054)
        
        # Assigning a type to the variable 'pts' (line 1918)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1918, 8), 'pts', transform_call_result_167055)
        
        # Assigning a BinOp to a Name (line 1919):
        
        # Assigning a BinOp to a Name (line 1919):
        # Getting the type of 'pts' (line 1919)
        pts_167056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 15), 'pts')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1919)
        tuple_167057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1919, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1919)
        # Adding element type (line 1919)
        # Getting the type of 'x' (line 1919)
        x_167058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 23), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1919, 23), tuple_167057, x_167058)
        # Adding element type (line 1919)
        # Getting the type of 'y' (line 1919)
        y_167059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 26), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1919, 23), tuple_167057, y_167059)
        
        # Applying the binary operator '-' (line 1919)
        result_sub_167060 = python_operator(stypy.reporting.localization.Localization(__file__, 1919, 15), '-', pts_167056, tuple_167057)
        
        # Assigning a type to the variable 'diff' (line 1919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1919, 8), 'diff', result_sub_167060)
        
        
        # Getting the type of 'diff' (line 1920)
        diff_167061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 11), 'diff')
        # Obtaining the member 'ndim' of a type (line 1920)
        ndim_167062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1920, 11), diff_167061, 'ndim')
        int_167063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 24), 'int')
        # Applying the binary operator '==' (line 1920)
        result_eq_167064 = python_operator(stypy.reporting.localization.Localization(__file__, 1920, 11), '==', ndim_167062, int_167063)
        
        # Testing the type of an if condition (line 1920)
        if_condition_167065 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1920, 8), result_eq_167064)
        # Assigning a type to the variable 'if_condition_167065' (line 1920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 8), 'if_condition_167065', if_condition_167065)
        # SSA begins for if statement (line 1920)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1921):
        
        # Assigning a Call to a Name (line 1921):
        
        # Call to sqrt(...): (line 1921)
        # Processing the call arguments (line 1921)
        
        # Call to sum(...): (line 1921)
        # Processing the call arguments (line 1921)
        # Getting the type of 'diff' (line 1921)
        diff_167070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 34), 'diff', False)
        int_167071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1921, 42), 'int')
        # Applying the binary operator '**' (line 1921)
        result_pow_167072 = python_operator(stypy.reporting.localization.Localization(__file__, 1921, 34), '**', diff_167070, int_167071)
        
        # Processing the call keyword arguments (line 1921)
        int_167073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1921, 50), 'int')
        keyword_167074 = int_167073
        kwargs_167075 = {'axis': keyword_167074}
        # Getting the type of 'np' (line 1921)
        np_167068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 27), 'np', False)
        # Obtaining the member 'sum' of a type (line 1921)
        sum_167069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1921, 27), np_167068, 'sum')
        # Calling sum(args, kwargs) (line 1921)
        sum_call_result_167076 = invoke(stypy.reporting.localization.Localization(__file__, 1921, 27), sum_167069, *[result_pow_167072], **kwargs_167075)
        
        # Processing the call keyword arguments (line 1921)
        kwargs_167077 = {}
        # Getting the type of 'np' (line 1921)
        np_167066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 19), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 1921)
        sqrt_167067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1921, 19), np_167066, 'sqrt')
        # Calling sqrt(args, kwargs) (line 1921)
        sqrt_call_result_167078 = invoke(stypy.reporting.localization.Localization(__file__, 1921, 19), sqrt_167067, *[sum_call_result_167076], **kwargs_167077)
        
        # Assigning a type to the variable 'dist' (line 1921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1921, 12), 'dist', sqrt_call_result_167078)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1922)
        tuple_167079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1922, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1922)
        # Adding element type (line 1922)
        
        # Call to argmin(...): (line 1922)
        # Processing the call arguments (line 1922)
        # Getting the type of 'dist' (line 1922)
        dist_167082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 29), 'dist', False)
        # Processing the call keyword arguments (line 1922)
        kwargs_167083 = {}
        # Getting the type of 'np' (line 1922)
        np_167080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 19), 'np', False)
        # Obtaining the member 'argmin' of a type (line 1922)
        argmin_167081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1922, 19), np_167080, 'argmin')
        # Calling argmin(args, kwargs) (line 1922)
        argmin_call_result_167084 = invoke(stypy.reporting.localization.Localization(__file__, 1922, 19), argmin_167081, *[dist_167082], **kwargs_167083)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1922, 19), tuple_167079, argmin_call_result_167084)
        # Adding element type (line 1922)
        
        # Call to min(...): (line 1922)
        # Processing the call arguments (line 1922)
        # Getting the type of 'dist' (line 1922)
        dist_167087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 43), 'dist', False)
        # Processing the call keyword arguments (line 1922)
        kwargs_167088 = {}
        # Getting the type of 'np' (line 1922)
        np_167085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 36), 'np', False)
        # Obtaining the member 'min' of a type (line 1922)
        min_167086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1922, 36), np_167085, 'min')
        # Calling min(args, kwargs) (line 1922)
        min_call_result_167089 = invoke(stypy.reporting.localization.Localization(__file__, 1922, 36), min_167086, *[dist_167087], **kwargs_167088)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1922, 19), tuple_167079, min_call_result_167089)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1922)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1922, 12), 'stypy_return_type', tuple_167079)
        # SSA branch for the else part of an if statement (line 1920)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1924)
        tuple_167090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1924, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1924)
        # Adding element type (line 1924)
        int_167091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1924, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1924, 19), tuple_167090, int_167091)
        # Adding element type (line 1924)
        
        # Call to sqrt(...): (line 1924)
        # Processing the call arguments (line 1924)
        
        # Call to sum(...): (line 1924)
        # Processing the call arguments (line 1924)
        # Getting the type of 'diff' (line 1924)
        diff_167096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 37), 'diff', False)
        int_167097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1924, 45), 'int')
        # Applying the binary operator '**' (line 1924)
        result_pow_167098 = python_operator(stypy.reporting.localization.Localization(__file__, 1924, 37), '**', diff_167096, int_167097)
        
        # Processing the call keyword arguments (line 1924)
        kwargs_167099 = {}
        # Getting the type of 'np' (line 1924)
        np_167094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 30), 'np', False)
        # Obtaining the member 'sum' of a type (line 1924)
        sum_167095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1924, 30), np_167094, 'sum')
        # Calling sum(args, kwargs) (line 1924)
        sum_call_result_167100 = invoke(stypy.reporting.localization.Localization(__file__, 1924, 30), sum_167095, *[result_pow_167098], **kwargs_167099)
        
        # Processing the call keyword arguments (line 1924)
        kwargs_167101 = {}
        # Getting the type of 'np' (line 1924)
        np_167092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 22), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 1924)
        sqrt_167093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1924, 22), np_167092, 'sqrt')
        # Calling sqrt(args, kwargs) (line 1924)
        sqrt_call_result_167102 = invoke(stypy.reporting.localization.Localization(__file__, 1924, 22), sqrt_167093, *[sum_call_result_167100], **kwargs_167101)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1924, 19), tuple_167090, sqrt_call_result_167102)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1924, 12), 'stypy_return_type', tuple_167090)
        # SSA join for if statement (line 1920)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'closest(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'closest' in the type store
        # Getting the type of 'stypy_return_type' (line 1914)
        stypy_return_type_167103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_167103)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'closest'
        return stypy_return_type_167103


# Assigning a type to the variable 'ToolHandles' (line 1868)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 0), 'ToolHandles', ToolHandles)
# Declaration of the 'RectangleSelector' class
# Getting the type of '_SelectorWidget' (line 1927)
_SelectorWidget_167104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 24), '_SelectorWidget')

class RectangleSelector(_SelectorWidget_167104, ):
    unicode_167105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1963, (-1)), 'unicode', u"\n    Select a rectangular region of an axes.\n\n    For the cursor to remain responsive you must keep a reference to\n    it.\n\n    Example usage::\n\n        from matplotlib.widgets import  RectangleSelector\n        from pylab import *\n\n        def onselect(eclick, erelease):\n          'eclick and erelease are matplotlib events at press and release'\n          print(' startposition : (%f, %f)' % (eclick.xdata, eclick.ydata))\n          print(' endposition   : (%f, %f)' % (erelease.xdata, erelease.ydata))\n          print(' used button   : ', eclick.button)\n\n        def toggle_selector(event):\n            print(' Key pressed.')\n            if event.key in ['Q', 'q'] and toggle_selector.RS.active:\n                print(' RectangleSelector deactivated.')\n                toggle_selector.RS.set_active(False)\n            if event.key in ['A', 'a'] and not toggle_selector.RS.active:\n                print(' RectangleSelector activated.')\n                toggle_selector.RS.set_active(True)\n\n        x = arange(100)/(99.0)\n        y = sin(x)\n        fig = figure\n        ax = subplot(111)\n        ax.plot(x,y)\n\n        toggle_selector.RS = RectangleSelector(ax, onselect, drawtype='line')\n        connect('key_press_event', toggle_selector)\n        show()\n    ")
    
    # Assigning a Name to a Name (line 1965):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_167106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1967, 46), 'unicode', u'box')
        # Getting the type of 'None' (line 1968)
        None_167107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 26), 'None')
        # Getting the type of 'None' (line 1968)
        None_167108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 41), 'None')
        # Getting the type of 'False' (line 1968)
        False_167109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 55), 'False')
        # Getting the type of 'None' (line 1969)
        None_167110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 27), 'None')
        # Getting the type of 'None' (line 1969)
        None_167111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 43), 'None')
        unicode_167112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1969, 60), 'unicode', u'data')
        # Getting the type of 'None' (line 1970)
        None_167113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 24), 'None')
        int_167114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1970, 38), 'int')
        # Getting the type of 'None' (line 1970)
        None_167115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 55), 'None')
        # Getting the type of 'False' (line 1971)
        False_167116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 29), 'False')
        # Getting the type of 'None' (line 1971)
        None_167117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 56), 'None')
        defaults = [unicode_167106, None_167107, None_167108, False_167109, None_167110, None_167111, unicode_167112, None_167113, int_167114, None_167115, False_167116, None_167117]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1967, 4, False)
        # Assigning a type to the variable 'self' (line 1968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1968, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RectangleSelector.__init__', ['ax', 'onselect', 'drawtype', 'minspanx', 'minspany', 'useblit', 'lineprops', 'rectprops', 'spancoords', 'button', 'maxdist', 'marker_props', 'interactive', 'state_modifier_keys'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'onselect', 'drawtype', 'minspanx', 'minspany', 'useblit', 'lineprops', 'rectprops', 'spancoords', 'button', 'maxdist', 'marker_props', 'interactive', 'state_modifier_keys'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_167118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2029, (-1)), 'unicode', u"\n        Create a selector in *ax*.  When a selection is made, clear\n        the span and call onselect with::\n\n          onselect(pos_1, pos_2)\n\n        and clear the drawn box/line. The ``pos_1`` and ``pos_2`` are\n        arrays of length 2 containing the x- and y-coordinate.\n\n        If *minspanx* is not *None* then events smaller than *minspanx*\n        in x direction are ignored (it's the same for y).\n\n        The rectangle is drawn with *rectprops*; default::\n\n          rectprops = dict(facecolor='red', edgecolor = 'black',\n                           alpha=0.2, fill=True)\n\n        The line is drawn with *lineprops*; default::\n\n          lineprops = dict(color='black', linestyle='-',\n                           linewidth = 2, alpha=0.5)\n\n        Use *drawtype* if you want the mouse to draw a line,\n        a box or nothing between click and actual position by setting\n\n        ``drawtype = 'line'``, ``drawtype='box'`` or ``drawtype = 'none'``.\n\n        *spancoords* is one of 'data' or 'pixels'.  If 'data', *minspanx*\n        and *minspanx* will be interpreted in the same coordinates as\n        the x and y axis. If 'pixels', they are in pixels.\n\n        *button* is a list of integers indicating which mouse buttons should\n        be used for rectangle selection.  You can also specify a single\n        integer if only a single button is desired.  Default is *None*,\n        which does not limit which button can be used.\n\n        Note, typically:\n         1 = left mouse button\n         2 = center mouse button (scroll wheel)\n         3 = right mouse button\n\n        *interactive* will draw a set of handles and allow you interact\n        with the widget after it is drawn.\n\n        *state_modifier_keys* are keyboard modifiers that affect the behavior\n        of the widget.\n\n        The defaults are:\n        dict(move=' ', clear='escape', square='shift', center='ctrl')\n\n        Keyboard modifiers, which:\n        'move': Move the existing shape.\n        'clear': Clear the current shape.\n        'square': Makes the shape square.\n        'center': Make the initial point the center of the shape.\n        'square' and 'center' can be combined.\n        ")
        
        # Call to __init__(...): (line 2030)
        # Processing the call arguments (line 2030)
        # Getting the type of 'self' (line 2030)
        self_167121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 33), 'self', False)
        # Getting the type of 'ax' (line 2030)
        ax_167122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 39), 'ax', False)
        # Getting the type of 'onselect' (line 2030)
        onselect_167123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 43), 'onselect', False)
        # Processing the call keyword arguments (line 2030)
        # Getting the type of 'useblit' (line 2030)
        useblit_167124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 61), 'useblit', False)
        keyword_167125 = useblit_167124
        # Getting the type of 'button' (line 2031)
        button_167126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2031, 40), 'button', False)
        keyword_167127 = button_167126
        # Getting the type of 'state_modifier_keys' (line 2032)
        state_modifier_keys_167128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 53), 'state_modifier_keys', False)
        keyword_167129 = state_modifier_keys_167128
        kwargs_167130 = {'button': keyword_167127, 'state_modifier_keys': keyword_167129, 'useblit': keyword_167125}
        # Getting the type of '_SelectorWidget' (line 2030)
        _SelectorWidget_167119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 8), '_SelectorWidget', False)
        # Obtaining the member '__init__' of a type (line 2030)
        init___167120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2030, 8), _SelectorWidget_167119, '__init__')
        # Calling __init__(args, kwargs) (line 2030)
        init___call_result_167131 = invoke(stypy.reporting.localization.Localization(__file__, 2030, 8), init___167120, *[self_167121, ax_167122, onselect_167123], **kwargs_167130)
        
        
        # Assigning a Name to a Attribute (line 2034):
        
        # Assigning a Name to a Attribute (line 2034):
        # Getting the type of 'None' (line 2034)
        None_167132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2034, 23), 'None')
        # Getting the type of 'self' (line 2034)
        self_167133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2034, 8), 'self')
        # Setting the type of the member 'to_draw' of a type (line 2034)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2034, 8), self_167133, 'to_draw', None_167132)
        
        # Assigning a Name to a Attribute (line 2035):
        
        # Assigning a Name to a Attribute (line 2035):
        # Getting the type of 'True' (line 2035)
        True_167134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 23), 'True')
        # Getting the type of 'self' (line 2035)
        self_167135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 8), 'self')
        # Setting the type of the member 'visible' of a type (line 2035)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2035, 8), self_167135, 'visible', True_167134)
        
        # Assigning a Name to a Attribute (line 2036):
        
        # Assigning a Name to a Attribute (line 2036):
        # Getting the type of 'interactive' (line 2036)
        interactive_167136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 27), 'interactive')
        # Getting the type of 'self' (line 2036)
        self_167137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 8), 'self')
        # Setting the type of the member 'interactive' of a type (line 2036)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2036, 8), self_167137, 'interactive', interactive_167136)
        
        
        # Getting the type of 'drawtype' (line 2038)
        drawtype_167138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 11), 'drawtype')
        unicode_167139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2038, 23), 'unicode', u'none')
        # Applying the binary operator '==' (line 2038)
        result_eq_167140 = python_operator(stypy.reporting.localization.Localization(__file__, 2038, 11), '==', drawtype_167138, unicode_167139)
        
        # Testing the type of an if condition (line 2038)
        if_condition_167141 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2038, 8), result_eq_167140)
        # Assigning a type to the variable 'if_condition_167141' (line 2038)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2038, 8), 'if_condition_167141', if_condition_167141)
        # SSA begins for if statement (line 2038)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 2039):
        
        # Assigning a Str to a Name (line 2039):
        unicode_167142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2039, 23), 'unicode', u'line')
        # Assigning a type to the variable 'drawtype' (line 2039)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2039, 12), 'drawtype', unicode_167142)
        
        # Assigning a Name to a Attribute (line 2040):
        
        # Assigning a Name to a Attribute (line 2040):
        # Getting the type of 'False' (line 2040)
        False_167143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2040, 27), 'False')
        # Getting the type of 'self' (line 2040)
        self_167144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2040, 12), 'self')
        # Setting the type of the member 'visible' of a type (line 2040)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2040, 12), self_167144, 'visible', False_167143)
        # SSA join for if statement (line 2038)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'drawtype' (line 2042)
        drawtype_167145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 11), 'drawtype')
        unicode_167146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2042, 23), 'unicode', u'box')
        # Applying the binary operator '==' (line 2042)
        result_eq_167147 = python_operator(stypy.reporting.localization.Localization(__file__, 2042, 11), '==', drawtype_167145, unicode_167146)
        
        # Testing the type of an if condition (line 2042)
        if_condition_167148 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2042, 8), result_eq_167147)
        # Assigning a type to the variable 'if_condition_167148' (line 2042)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2042, 8), 'if_condition_167148', if_condition_167148)
        # SSA begins for if statement (line 2042)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 2043)
        # Getting the type of 'rectprops' (line 2043)
        rectprops_167149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2043, 15), 'rectprops')
        # Getting the type of 'None' (line 2043)
        None_167150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2043, 28), 'None')
        
        (may_be_167151, more_types_in_union_167152) = may_be_none(rectprops_167149, None_167150)

        if may_be_167151:

            if more_types_in_union_167152:
                # Runtime conditional SSA (line 2043)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 2044):
            
            # Assigning a Call to a Name (line 2044):
            
            # Call to dict(...): (line 2044)
            # Processing the call keyword arguments (line 2044)
            unicode_167154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2044, 43), 'unicode', u'red')
            keyword_167155 = unicode_167154
            unicode_167156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2044, 60), 'unicode', u'black')
            keyword_167157 = unicode_167156
            float_167158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2045, 39), 'float')
            keyword_167159 = float_167158
            # Getting the type of 'True' (line 2045)
            True_167160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2045, 49), 'True', False)
            keyword_167161 = True_167160
            kwargs_167162 = {'edgecolor': keyword_167157, 'fill': keyword_167161, 'facecolor': keyword_167155, 'alpha': keyword_167159}
            # Getting the type of 'dict' (line 2044)
            dict_167153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 28), 'dict', False)
            # Calling dict(args, kwargs) (line 2044)
            dict_call_result_167163 = invoke(stypy.reporting.localization.Localization(__file__, 2044, 28), dict_167153, *[], **kwargs_167162)
            
            # Assigning a type to the variable 'rectprops' (line 2044)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2044, 16), 'rectprops', dict_call_result_167163)

            if more_types_in_union_167152:
                # SSA join for if statement (line 2043)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Subscript (line 2046):
        
        # Assigning a Attribute to a Subscript (line 2046):
        # Getting the type of 'self' (line 2046)
        self_167164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2046, 36), 'self')
        # Obtaining the member 'useblit' of a type (line 2046)
        useblit_167165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2046, 36), self_167164, 'useblit')
        # Getting the type of 'rectprops' (line 2046)
        rectprops_167166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2046, 12), 'rectprops')
        unicode_167167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2046, 22), 'unicode', u'animated')
        # Storing an element on a container (line 2046)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2046, 12), rectprops_167166, (unicode_167167, useblit_167165))
        
        # Assigning a Name to a Attribute (line 2047):
        
        # Assigning a Name to a Attribute (line 2047):
        # Getting the type of 'rectprops' (line 2047)
        rectprops_167168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2047, 29), 'rectprops')
        # Getting the type of 'self' (line 2047)
        self_167169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2047, 12), 'self')
        # Setting the type of the member 'rectprops' of a type (line 2047)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2047, 12), self_167169, 'rectprops', rectprops_167168)
        
        # Assigning a Call to a Attribute (line 2048):
        
        # Assigning a Call to a Attribute (line 2048):
        
        # Call to _shape_klass(...): (line 2048)
        # Processing the call arguments (line 2048)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2048)
        tuple_167172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2048, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2048)
        # Adding element type (line 2048)
        int_167173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2048, 46), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2048, 46), tuple_167172, int_167173)
        # Adding element type (line 2048)
        int_167174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2048, 49), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2048, 46), tuple_167172, int_167174)
        
        int_167175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2048, 53), 'int')
        int_167176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2048, 56), 'int')
        # Processing the call keyword arguments (line 2048)
        # Getting the type of 'False' (line 2048)
        False_167177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2048, 67), 'False', False)
        keyword_167178 = False_167177
        # Getting the type of 'self' (line 2049)
        self_167179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 47), 'self', False)
        # Obtaining the member 'rectprops' of a type (line 2049)
        rectprops_167180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2049, 47), self_167179, 'rectprops')
        kwargs_167181 = {'visible': keyword_167178, 'rectprops_167180': rectprops_167180}
        # Getting the type of 'self' (line 2048)
        self_167170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2048, 27), 'self', False)
        # Obtaining the member '_shape_klass' of a type (line 2048)
        _shape_klass_167171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2048, 27), self_167170, '_shape_klass')
        # Calling _shape_klass(args, kwargs) (line 2048)
        _shape_klass_call_result_167182 = invoke(stypy.reporting.localization.Localization(__file__, 2048, 27), _shape_klass_167171, *[tuple_167172, int_167175, int_167176], **kwargs_167181)
        
        # Getting the type of 'self' (line 2048)
        self_167183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2048, 12), 'self')
        # Setting the type of the member 'to_draw' of a type (line 2048)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2048, 12), self_167183, 'to_draw', _shape_klass_call_result_167182)
        
        # Call to add_patch(...): (line 2050)
        # Processing the call arguments (line 2050)
        # Getting the type of 'self' (line 2050)
        self_167187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2050, 30), 'self', False)
        # Obtaining the member 'to_draw' of a type (line 2050)
        to_draw_167188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2050, 30), self_167187, 'to_draw')
        # Processing the call keyword arguments (line 2050)
        kwargs_167189 = {}
        # Getting the type of 'self' (line 2050)
        self_167184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2050, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 2050)
        ax_167185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2050, 12), self_167184, 'ax')
        # Obtaining the member 'add_patch' of a type (line 2050)
        add_patch_167186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2050, 12), ax_167185, 'add_patch')
        # Calling add_patch(args, kwargs) (line 2050)
        add_patch_call_result_167190 = invoke(stypy.reporting.localization.Localization(__file__, 2050, 12), add_patch_167186, *[to_draw_167188], **kwargs_167189)
        
        # SSA join for if statement (line 2042)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'drawtype' (line 2051)
        drawtype_167191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2051, 11), 'drawtype')
        unicode_167192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2051, 23), 'unicode', u'line')
        # Applying the binary operator '==' (line 2051)
        result_eq_167193 = python_operator(stypy.reporting.localization.Localization(__file__, 2051, 11), '==', drawtype_167191, unicode_167192)
        
        # Testing the type of an if condition (line 2051)
        if_condition_167194 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2051, 8), result_eq_167193)
        # Assigning a type to the variable 'if_condition_167194' (line 2051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2051, 8), 'if_condition_167194', if_condition_167194)
        # SSA begins for if statement (line 2051)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 2052)
        # Getting the type of 'lineprops' (line 2052)
        lineprops_167195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 15), 'lineprops')
        # Getting the type of 'None' (line 2052)
        None_167196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 28), 'None')
        
        (may_be_167197, more_types_in_union_167198) = may_be_none(lineprops_167195, None_167196)

        if may_be_167197:

            if more_types_in_union_167198:
                # Runtime conditional SSA (line 2052)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 2053):
            
            # Assigning a Call to a Name (line 2053):
            
            # Call to dict(...): (line 2053)
            # Processing the call keyword arguments (line 2053)
            unicode_167200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2053, 39), 'unicode', u'black')
            keyword_167201 = unicode_167200
            unicode_167202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2053, 58), 'unicode', u'-')
            keyword_167203 = unicode_167202
            int_167204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2054, 43), 'int')
            keyword_167205 = int_167204
            float_167206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2054, 52), 'float')
            keyword_167207 = float_167206
            kwargs_167208 = {'color': keyword_167201, 'alpha': keyword_167207, 'linewidth': keyword_167205, 'linestyle': keyword_167203}
            # Getting the type of 'dict' (line 2053)
            dict_167199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2053, 28), 'dict', False)
            # Calling dict(args, kwargs) (line 2053)
            dict_call_result_167209 = invoke(stypy.reporting.localization.Localization(__file__, 2053, 28), dict_167199, *[], **kwargs_167208)
            
            # Assigning a type to the variable 'lineprops' (line 2053)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2053, 16), 'lineprops', dict_call_result_167209)

            if more_types_in_union_167198:
                # SSA join for if statement (line 2052)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Subscript (line 2055):
        
        # Assigning a Attribute to a Subscript (line 2055):
        # Getting the type of 'self' (line 2055)
        self_167210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 36), 'self')
        # Obtaining the member 'useblit' of a type (line 2055)
        useblit_167211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2055, 36), self_167210, 'useblit')
        # Getting the type of 'lineprops' (line 2055)
        lineprops_167212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 12), 'lineprops')
        unicode_167213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2055, 22), 'unicode', u'animated')
        # Storing an element on a container (line 2055)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2055, 12), lineprops_167212, (unicode_167213, useblit_167211))
        
        # Assigning a Name to a Attribute (line 2056):
        
        # Assigning a Name to a Attribute (line 2056):
        # Getting the type of 'lineprops' (line 2056)
        lineprops_167214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2056, 29), 'lineprops')
        # Getting the type of 'self' (line 2056)
        self_167215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2056, 12), 'self')
        # Setting the type of the member 'lineprops' of a type (line 2056)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2056, 12), self_167215, 'lineprops', lineprops_167214)
        
        # Assigning a Call to a Attribute (line 2057):
        
        # Assigning a Call to a Attribute (line 2057):
        
        # Call to Line2D(...): (line 2057)
        # Processing the call arguments (line 2057)
        
        # Obtaining an instance of the builtin type 'list' (line 2057)
        list_167217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2057, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2057)
        # Adding element type (line 2057)
        int_167218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2057, 35), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2057, 34), list_167217, int_167218)
        # Adding element type (line 2057)
        int_167219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2057, 38), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2057, 34), list_167217, int_167219)
        
        
        # Obtaining an instance of the builtin type 'list' (line 2057)
        list_167220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2057, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2057)
        # Adding element type (line 2057)
        int_167221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2057, 43), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2057, 42), list_167220, int_167221)
        # Adding element type (line 2057)
        int_167222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2057, 46), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2057, 42), list_167220, int_167222)
        
        # Processing the call keyword arguments (line 2057)
        # Getting the type of 'False' (line 2057)
        False_167223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 58), 'False', False)
        keyword_167224 = False_167223
        # Getting the type of 'self' (line 2058)
        self_167225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 36), 'self', False)
        # Obtaining the member 'lineprops' of a type (line 2058)
        lineprops_167226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2058, 36), self_167225, 'lineprops')
        kwargs_167227 = {'visible': keyword_167224, 'lineprops_167226': lineprops_167226}
        # Getting the type of 'Line2D' (line 2057)
        Line2D_167216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 27), 'Line2D', False)
        # Calling Line2D(args, kwargs) (line 2057)
        Line2D_call_result_167228 = invoke(stypy.reporting.localization.Localization(__file__, 2057, 27), Line2D_167216, *[list_167217, list_167220], **kwargs_167227)
        
        # Getting the type of 'self' (line 2057)
        self_167229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 12), 'self')
        # Setting the type of the member 'to_draw' of a type (line 2057)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2057, 12), self_167229, 'to_draw', Line2D_call_result_167228)
        
        # Call to add_line(...): (line 2059)
        # Processing the call arguments (line 2059)
        # Getting the type of 'self' (line 2059)
        self_167233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 29), 'self', False)
        # Obtaining the member 'to_draw' of a type (line 2059)
        to_draw_167234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2059, 29), self_167233, 'to_draw')
        # Processing the call keyword arguments (line 2059)
        kwargs_167235 = {}
        # Getting the type of 'self' (line 2059)
        self_167230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 2059)
        ax_167231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2059, 12), self_167230, 'ax')
        # Obtaining the member 'add_line' of a type (line 2059)
        add_line_167232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2059, 12), ax_167231, 'add_line')
        # Calling add_line(args, kwargs) (line 2059)
        add_line_call_result_167236 = invoke(stypy.reporting.localization.Localization(__file__, 2059, 12), add_line_167232, *[to_draw_167234], **kwargs_167235)
        
        # SSA join for if statement (line 2051)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2061):
        
        # Assigning a Name to a Attribute (line 2061):
        # Getting the type of 'minspanx' (line 2061)
        minspanx_167237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 24), 'minspanx')
        # Getting the type of 'self' (line 2061)
        self_167238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 8), 'self')
        # Setting the type of the member 'minspanx' of a type (line 2061)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2061, 8), self_167238, 'minspanx', minspanx_167237)
        
        # Assigning a Name to a Attribute (line 2062):
        
        # Assigning a Name to a Attribute (line 2062):
        # Getting the type of 'minspany' (line 2062)
        minspany_167239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 24), 'minspany')
        # Getting the type of 'self' (line 2062)
        self_167240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 8), 'self')
        # Setting the type of the member 'minspany' of a type (line 2062)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2062, 8), self_167240, 'minspany', minspany_167239)
        
        
        # Getting the type of 'spancoords' (line 2064)
        spancoords_167241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 11), 'spancoords')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2064)
        tuple_167242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2064, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2064)
        # Adding element type (line 2064)
        unicode_167243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2064, 30), 'unicode', u'data')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2064, 30), tuple_167242, unicode_167243)
        # Adding element type (line 2064)
        unicode_167244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2064, 38), 'unicode', u'pixels')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2064, 30), tuple_167242, unicode_167244)
        
        # Applying the binary operator 'notin' (line 2064)
        result_contains_167245 = python_operator(stypy.reporting.localization.Localization(__file__, 2064, 11), 'notin', spancoords_167241, tuple_167242)
        
        # Testing the type of an if condition (line 2064)
        if_condition_167246 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2064, 8), result_contains_167245)
        # Assigning a type to the variable 'if_condition_167246' (line 2064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2064, 8), 'if_condition_167246', if_condition_167246)
        # SSA begins for if statement (line 2064)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 2065):
        
        # Assigning a Str to a Name (line 2065):
        unicode_167247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2065, 18), 'unicode', u"'spancoords' must be one of [ 'data' | 'pixels' ]")
        # Assigning a type to the variable 'msg' (line 2065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2065, 12), 'msg', unicode_167247)
        
        # Call to ValueError(...): (line 2066)
        # Processing the call arguments (line 2066)
        # Getting the type of 'msg' (line 2066)
        msg_167249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 29), 'msg', False)
        # Processing the call keyword arguments (line 2066)
        kwargs_167250 = {}
        # Getting the type of 'ValueError' (line 2066)
        ValueError_167248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2066)
        ValueError_call_result_167251 = invoke(stypy.reporting.localization.Localization(__file__, 2066, 18), ValueError_167248, *[msg_167249], **kwargs_167250)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2066, 12), ValueError_call_result_167251, 'raise parameter', BaseException)
        # SSA join for if statement (line 2064)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2068):
        
        # Assigning a Name to a Attribute (line 2068):
        # Getting the type of 'spancoords' (line 2068)
        spancoords_167252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 26), 'spancoords')
        # Getting the type of 'self' (line 2068)
        self_167253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 8), 'self')
        # Setting the type of the member 'spancoords' of a type (line 2068)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2068, 8), self_167253, 'spancoords', spancoords_167252)
        
        # Assigning a Name to a Attribute (line 2069):
        
        # Assigning a Name to a Attribute (line 2069):
        # Getting the type of 'drawtype' (line 2069)
        drawtype_167254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 24), 'drawtype')
        # Getting the type of 'self' (line 2069)
        self_167255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 8), 'self')
        # Setting the type of the member 'drawtype' of a type (line 2069)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2069, 8), self_167255, 'drawtype', drawtype_167254)
        
        # Assigning a Name to a Attribute (line 2071):
        
        # Assigning a Name to a Attribute (line 2071):
        # Getting the type of 'maxdist' (line 2071)
        maxdist_167256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 23), 'maxdist')
        # Getting the type of 'self' (line 2071)
        self_167257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 8), 'self')
        # Setting the type of the member 'maxdist' of a type (line 2071)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2071, 8), self_167257, 'maxdist', maxdist_167256)
        
        # Type idiom detected: calculating its left and rigth part (line 2073)
        # Getting the type of 'rectprops' (line 2073)
        rectprops_167258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 11), 'rectprops')
        # Getting the type of 'None' (line 2073)
        None_167259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 24), 'None')
        
        (may_be_167260, more_types_in_union_167261) = may_be_none(rectprops_167258, None_167259)

        if may_be_167260:

            if more_types_in_union_167261:
                # Runtime conditional SSA (line 2073)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 2074):
            
            # Assigning a Call to a Name (line 2074):
            
            # Call to dict(...): (line 2074)
            # Processing the call keyword arguments (line 2074)
            unicode_167263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2074, 29), 'unicode', u'r')
            keyword_167264 = unicode_167263
            kwargs_167265 = {'mec': keyword_167264}
            # Getting the type of 'dict' (line 2074)
            dict_167262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2074, 20), 'dict', False)
            # Calling dict(args, kwargs) (line 2074)
            dict_call_result_167266 = invoke(stypy.reporting.localization.Localization(__file__, 2074, 20), dict_167262, *[], **kwargs_167265)
            
            # Assigning a type to the variable 'props' (line 2074)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2074, 12), 'props', dict_call_result_167266)

            if more_types_in_union_167261:
                # Runtime conditional SSA for else branch (line 2073)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_167260) or more_types_in_union_167261):
            
            # Assigning a Call to a Name (line 2076):
            
            # Assigning a Call to a Name (line 2076):
            
            # Call to dict(...): (line 2076)
            # Processing the call keyword arguments (line 2076)
            
            # Call to get(...): (line 2076)
            # Processing the call arguments (line 2076)
            unicode_167270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2076, 43), 'unicode', u'edgecolor')
            unicode_167271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2076, 56), 'unicode', u'r')
            # Processing the call keyword arguments (line 2076)
            kwargs_167272 = {}
            # Getting the type of 'rectprops' (line 2076)
            rectprops_167268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 29), 'rectprops', False)
            # Obtaining the member 'get' of a type (line 2076)
            get_167269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2076, 29), rectprops_167268, 'get')
            # Calling get(args, kwargs) (line 2076)
            get_call_result_167273 = invoke(stypy.reporting.localization.Localization(__file__, 2076, 29), get_167269, *[unicode_167270, unicode_167271], **kwargs_167272)
            
            keyword_167274 = get_call_result_167273
            kwargs_167275 = {'mec': keyword_167274}
            # Getting the type of 'dict' (line 2076)
            dict_167267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 20), 'dict', False)
            # Calling dict(args, kwargs) (line 2076)
            dict_call_result_167276 = invoke(stypy.reporting.localization.Localization(__file__, 2076, 20), dict_167267, *[], **kwargs_167275)
            
            # Assigning a type to the variable 'props' (line 2076)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2076, 12), 'props', dict_call_result_167276)

            if (may_be_167260 and more_types_in_union_167261):
                # SSA join for if statement (line 2073)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a List to a Attribute (line 2077):
        
        # Assigning a List to a Attribute (line 2077):
        
        # Obtaining an instance of the builtin type 'list' (line 2077)
        list_167277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2077, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2077)
        # Adding element type (line 2077)
        unicode_167278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2077, 30), 'unicode', u'NW')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2077, 29), list_167277, unicode_167278)
        # Adding element type (line 2077)
        unicode_167279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2077, 36), 'unicode', u'NE')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2077, 29), list_167277, unicode_167279)
        # Adding element type (line 2077)
        unicode_167280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2077, 42), 'unicode', u'SE')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2077, 29), list_167277, unicode_167280)
        # Adding element type (line 2077)
        unicode_167281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2077, 48), 'unicode', u'SW')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2077, 29), list_167277, unicode_167281)
        
        # Getting the type of 'self' (line 2077)
        self_167282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2077, 8), 'self')
        # Setting the type of the member '_corner_order' of a type (line 2077)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2077, 8), self_167282, '_corner_order', list_167277)
        
        # Assigning a Attribute to a Tuple (line 2078):
        
        # Assigning a Subscript to a Name (line 2078):
        
        # Obtaining the type of the subscript
        int_167283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2078, 8), 'int')
        # Getting the type of 'self' (line 2078)
        self_167284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 17), 'self')
        # Obtaining the member 'corners' of a type (line 2078)
        corners_167285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2078, 17), self_167284, 'corners')
        # Obtaining the member '__getitem__' of a type (line 2078)
        getitem___167286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2078, 8), corners_167285, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2078)
        subscript_call_result_167287 = invoke(stypy.reporting.localization.Localization(__file__, 2078, 8), getitem___167286, int_167283)
        
        # Assigning a type to the variable 'tuple_var_assignment_162314' (line 2078)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2078, 8), 'tuple_var_assignment_162314', subscript_call_result_167287)
        
        # Assigning a Subscript to a Name (line 2078):
        
        # Obtaining the type of the subscript
        int_167288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2078, 8), 'int')
        # Getting the type of 'self' (line 2078)
        self_167289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 17), 'self')
        # Obtaining the member 'corners' of a type (line 2078)
        corners_167290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2078, 17), self_167289, 'corners')
        # Obtaining the member '__getitem__' of a type (line 2078)
        getitem___167291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2078, 8), corners_167290, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2078)
        subscript_call_result_167292 = invoke(stypy.reporting.localization.Localization(__file__, 2078, 8), getitem___167291, int_167288)
        
        # Assigning a type to the variable 'tuple_var_assignment_162315' (line 2078)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2078, 8), 'tuple_var_assignment_162315', subscript_call_result_167292)
        
        # Assigning a Name to a Name (line 2078):
        # Getting the type of 'tuple_var_assignment_162314' (line 2078)
        tuple_var_assignment_162314_167293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 8), 'tuple_var_assignment_162314')
        # Assigning a type to the variable 'xc' (line 2078)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2078, 8), 'xc', tuple_var_assignment_162314_167293)
        
        # Assigning a Name to a Name (line 2078):
        # Getting the type of 'tuple_var_assignment_162315' (line 2078)
        tuple_var_assignment_162315_167294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 8), 'tuple_var_assignment_162315')
        # Assigning a type to the variable 'yc' (line 2078)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2078, 12), 'yc', tuple_var_assignment_162315_167294)
        
        # Assigning a Call to a Attribute (line 2079):
        
        # Assigning a Call to a Attribute (line 2079):
        
        # Call to ToolHandles(...): (line 2079)
        # Processing the call arguments (line 2079)
        # Getting the type of 'self' (line 2079)
        self_167296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 43), 'self', False)
        # Obtaining the member 'ax' of a type (line 2079)
        ax_167297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2079, 43), self_167296, 'ax')
        # Getting the type of 'xc' (line 2079)
        xc_167298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 52), 'xc', False)
        # Getting the type of 'yc' (line 2079)
        yc_167299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 56), 'yc', False)
        # Processing the call keyword arguments (line 2079)
        # Getting the type of 'props' (line 2079)
        props_167300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 73), 'props', False)
        keyword_167301 = props_167300
        # Getting the type of 'self' (line 2080)
        self_167302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 51), 'self', False)
        # Obtaining the member 'useblit' of a type (line 2080)
        useblit_167303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2080, 51), self_167302, 'useblit')
        keyword_167304 = useblit_167303
        kwargs_167305 = {'marker_props': keyword_167301, 'useblit': keyword_167304}
        # Getting the type of 'ToolHandles' (line 2079)
        ToolHandles_167295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 31), 'ToolHandles', False)
        # Calling ToolHandles(args, kwargs) (line 2079)
        ToolHandles_call_result_167306 = invoke(stypy.reporting.localization.Localization(__file__, 2079, 31), ToolHandles_167295, *[ax_167297, xc_167298, yc_167299], **kwargs_167305)
        
        # Getting the type of 'self' (line 2079)
        self_167307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 8), 'self')
        # Setting the type of the member '_corner_handles' of a type (line 2079)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2079, 8), self_167307, '_corner_handles', ToolHandles_call_result_167306)
        
        # Assigning a List to a Attribute (line 2082):
        
        # Assigning a List to a Attribute (line 2082):
        
        # Obtaining an instance of the builtin type 'list' (line 2082)
        list_167308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2082, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2082)
        # Adding element type (line 2082)
        unicode_167309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2082, 28), 'unicode', u'W')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2082, 27), list_167308, unicode_167309)
        # Adding element type (line 2082)
        unicode_167310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2082, 33), 'unicode', u'N')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2082, 27), list_167308, unicode_167310)
        # Adding element type (line 2082)
        unicode_167311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2082, 38), 'unicode', u'E')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2082, 27), list_167308, unicode_167311)
        # Adding element type (line 2082)
        unicode_167312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2082, 43), 'unicode', u'S')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2082, 27), list_167308, unicode_167312)
        
        # Getting the type of 'self' (line 2082)
        self_167313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 8), 'self')
        # Setting the type of the member '_edge_order' of a type (line 2082)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2082, 8), self_167313, '_edge_order', list_167308)
        
        # Assigning a Attribute to a Tuple (line 2083):
        
        # Assigning a Subscript to a Name (line 2083):
        
        # Obtaining the type of the subscript
        int_167314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2083, 8), 'int')
        # Getting the type of 'self' (line 2083)
        self_167315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 17), 'self')
        # Obtaining the member 'edge_centers' of a type (line 2083)
        edge_centers_167316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2083, 17), self_167315, 'edge_centers')
        # Obtaining the member '__getitem__' of a type (line 2083)
        getitem___167317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2083, 8), edge_centers_167316, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2083)
        subscript_call_result_167318 = invoke(stypy.reporting.localization.Localization(__file__, 2083, 8), getitem___167317, int_167314)
        
        # Assigning a type to the variable 'tuple_var_assignment_162316' (line 2083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 8), 'tuple_var_assignment_162316', subscript_call_result_167318)
        
        # Assigning a Subscript to a Name (line 2083):
        
        # Obtaining the type of the subscript
        int_167319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2083, 8), 'int')
        # Getting the type of 'self' (line 2083)
        self_167320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 17), 'self')
        # Obtaining the member 'edge_centers' of a type (line 2083)
        edge_centers_167321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2083, 17), self_167320, 'edge_centers')
        # Obtaining the member '__getitem__' of a type (line 2083)
        getitem___167322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2083, 8), edge_centers_167321, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2083)
        subscript_call_result_167323 = invoke(stypy.reporting.localization.Localization(__file__, 2083, 8), getitem___167322, int_167319)
        
        # Assigning a type to the variable 'tuple_var_assignment_162317' (line 2083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 8), 'tuple_var_assignment_162317', subscript_call_result_167323)
        
        # Assigning a Name to a Name (line 2083):
        # Getting the type of 'tuple_var_assignment_162316' (line 2083)
        tuple_var_assignment_162316_167324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 8), 'tuple_var_assignment_162316')
        # Assigning a type to the variable 'xe' (line 2083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 8), 'xe', tuple_var_assignment_162316_167324)
        
        # Assigning a Name to a Name (line 2083):
        # Getting the type of 'tuple_var_assignment_162317' (line 2083)
        tuple_var_assignment_162317_167325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 8), 'tuple_var_assignment_162317')
        # Assigning a type to the variable 'ye' (line 2083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 12), 'ye', tuple_var_assignment_162317_167325)
        
        # Assigning a Call to a Attribute (line 2084):
        
        # Assigning a Call to a Attribute (line 2084):
        
        # Call to ToolHandles(...): (line 2084)
        # Processing the call arguments (line 2084)
        # Getting the type of 'self' (line 2084)
        self_167327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 41), 'self', False)
        # Obtaining the member 'ax' of a type (line 2084)
        ax_167328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2084, 41), self_167327, 'ax')
        # Getting the type of 'xe' (line 2084)
        xe_167329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 50), 'xe', False)
        # Getting the type of 'ye' (line 2084)
        ye_167330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 54), 'ye', False)
        # Processing the call keyword arguments (line 2084)
        unicode_167331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2084, 65), 'unicode', u's')
        keyword_167332 = unicode_167331
        # Getting the type of 'props' (line 2085)
        props_167333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 54), 'props', False)
        keyword_167334 = props_167333
        # Getting the type of 'self' (line 2086)
        self_167335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 49), 'self', False)
        # Obtaining the member 'useblit' of a type (line 2086)
        useblit_167336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2086, 49), self_167335, 'useblit')
        keyword_167337 = useblit_167336
        kwargs_167338 = {'marker': keyword_167332, 'marker_props': keyword_167334, 'useblit': keyword_167337}
        # Getting the type of 'ToolHandles' (line 2084)
        ToolHandles_167326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 29), 'ToolHandles', False)
        # Calling ToolHandles(args, kwargs) (line 2084)
        ToolHandles_call_result_167339 = invoke(stypy.reporting.localization.Localization(__file__, 2084, 29), ToolHandles_167326, *[ax_167328, xe_167329, ye_167330], **kwargs_167338)
        
        # Getting the type of 'self' (line 2084)
        self_167340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 8), 'self')
        # Setting the type of the member '_edge_handles' of a type (line 2084)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2084, 8), self_167340, '_edge_handles', ToolHandles_call_result_167339)
        
        # Assigning a Attribute to a Tuple (line 2088):
        
        # Assigning a Subscript to a Name (line 2088):
        
        # Obtaining the type of the subscript
        int_167341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2088, 8), 'int')
        # Getting the type of 'self' (line 2088)
        self_167342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 17), 'self')
        # Obtaining the member 'center' of a type (line 2088)
        center_167343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2088, 17), self_167342, 'center')
        # Obtaining the member '__getitem__' of a type (line 2088)
        getitem___167344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2088, 8), center_167343, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2088)
        subscript_call_result_167345 = invoke(stypy.reporting.localization.Localization(__file__, 2088, 8), getitem___167344, int_167341)
        
        # Assigning a type to the variable 'tuple_var_assignment_162318' (line 2088)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 8), 'tuple_var_assignment_162318', subscript_call_result_167345)
        
        # Assigning a Subscript to a Name (line 2088):
        
        # Obtaining the type of the subscript
        int_167346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2088, 8), 'int')
        # Getting the type of 'self' (line 2088)
        self_167347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 17), 'self')
        # Obtaining the member 'center' of a type (line 2088)
        center_167348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2088, 17), self_167347, 'center')
        # Obtaining the member '__getitem__' of a type (line 2088)
        getitem___167349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2088, 8), center_167348, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2088)
        subscript_call_result_167350 = invoke(stypy.reporting.localization.Localization(__file__, 2088, 8), getitem___167349, int_167346)
        
        # Assigning a type to the variable 'tuple_var_assignment_162319' (line 2088)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 8), 'tuple_var_assignment_162319', subscript_call_result_167350)
        
        # Assigning a Name to a Name (line 2088):
        # Getting the type of 'tuple_var_assignment_162318' (line 2088)
        tuple_var_assignment_162318_167351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 8), 'tuple_var_assignment_162318')
        # Assigning a type to the variable 'xc' (line 2088)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 8), 'xc', tuple_var_assignment_162318_167351)
        
        # Assigning a Name to a Name (line 2088):
        # Getting the type of 'tuple_var_assignment_162319' (line 2088)
        tuple_var_assignment_162319_167352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 8), 'tuple_var_assignment_162319')
        # Assigning a type to the variable 'yc' (line 2088)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 12), 'yc', tuple_var_assignment_162319_167352)
        
        # Assigning a Call to a Attribute (line 2089):
        
        # Assigning a Call to a Attribute (line 2089):
        
        # Call to ToolHandles(...): (line 2089)
        # Processing the call arguments (line 2089)
        # Getting the type of 'self' (line 2089)
        self_167354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 42), 'self', False)
        # Obtaining the member 'ax' of a type (line 2089)
        ax_167355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2089, 42), self_167354, 'ax')
        
        # Obtaining an instance of the builtin type 'list' (line 2089)
        list_167356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2089, 51), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2089)
        # Adding element type (line 2089)
        # Getting the type of 'xc' (line 2089)
        xc_167357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 52), 'xc', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2089, 51), list_167356, xc_167357)
        
        
        # Obtaining an instance of the builtin type 'list' (line 2089)
        list_167358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2089, 57), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2089)
        # Adding element type (line 2089)
        # Getting the type of 'yc' (line 2089)
        yc_167359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 58), 'yc', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2089, 57), list_167358, yc_167359)
        
        # Processing the call keyword arguments (line 2089)
        unicode_167360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2089, 70), 'unicode', u's')
        keyword_167361 = unicode_167360
        # Getting the type of 'props' (line 2090)
        props_167362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2090, 55), 'props', False)
        keyword_167363 = props_167362
        # Getting the type of 'self' (line 2091)
        self_167364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2091, 50), 'self', False)
        # Obtaining the member 'useblit' of a type (line 2091)
        useblit_167365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2091, 50), self_167364, 'useblit')
        keyword_167366 = useblit_167365
        kwargs_167367 = {'marker': keyword_167361, 'marker_props': keyword_167363, 'useblit': keyword_167366}
        # Getting the type of 'ToolHandles' (line 2089)
        ToolHandles_167353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 30), 'ToolHandles', False)
        # Calling ToolHandles(args, kwargs) (line 2089)
        ToolHandles_call_result_167368 = invoke(stypy.reporting.localization.Localization(__file__, 2089, 30), ToolHandles_167353, *[ax_167355, list_167356, list_167358], **kwargs_167367)
        
        # Getting the type of 'self' (line 2089)
        self_167369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 8), 'self')
        # Setting the type of the member '_center_handle' of a type (line 2089)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2089, 8), self_167369, '_center_handle', ToolHandles_call_result_167368)
        
        # Assigning a Name to a Attribute (line 2093):
        
        # Assigning a Name to a Attribute (line 2093):
        # Getting the type of 'None' (line 2093)
        None_167370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 29), 'None')
        # Getting the type of 'self' (line 2093)
        self_167371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 8), 'self')
        # Setting the type of the member 'active_handle' of a type (line 2093)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2093, 8), self_167371, 'active_handle', None_167370)
        
        # Assigning a List to a Attribute (line 2095):
        
        # Assigning a List to a Attribute (line 2095):
        
        # Obtaining an instance of the builtin type 'list' (line 2095)
        list_167372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2095, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2095)
        # Adding element type (line 2095)
        # Getting the type of 'self' (line 2095)
        self_167373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 24), 'self')
        # Obtaining the member 'to_draw' of a type (line 2095)
        to_draw_167374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2095, 24), self_167373, 'to_draw')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2095, 23), list_167372, to_draw_167374)
        # Adding element type (line 2095)
        # Getting the type of 'self' (line 2095)
        self_167375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 38), 'self')
        # Obtaining the member '_center_handle' of a type (line 2095)
        _center_handle_167376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2095, 38), self_167375, '_center_handle')
        # Obtaining the member 'artist' of a type (line 2095)
        artist_167377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2095, 38), _center_handle_167376, 'artist')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2095, 23), list_167372, artist_167377)
        # Adding element type (line 2095)
        # Getting the type of 'self' (line 2096)
        self_167378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2096, 24), 'self')
        # Obtaining the member '_corner_handles' of a type (line 2096)
        _corner_handles_167379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2096, 24), self_167378, '_corner_handles')
        # Obtaining the member 'artist' of a type (line 2096)
        artist_167380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2096, 24), _corner_handles_167379, 'artist')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2095, 23), list_167372, artist_167380)
        # Adding element type (line 2095)
        # Getting the type of 'self' (line 2097)
        self_167381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2097, 24), 'self')
        # Obtaining the member '_edge_handles' of a type (line 2097)
        _edge_handles_167382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2097, 24), self_167381, '_edge_handles')
        # Obtaining the member 'artist' of a type (line 2097)
        artist_167383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2097, 24), _edge_handles_167382, 'artist')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2095, 23), list_167372, artist_167383)
        
        # Getting the type of 'self' (line 2095)
        self_167384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 8), 'self')
        # Setting the type of the member 'artists' of a type (line 2095)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2095, 8), self_167384, 'artists', list_167372)
        
        
        # Getting the type of 'self' (line 2099)
        self_167385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2099, 15), 'self')
        # Obtaining the member 'interactive' of a type (line 2099)
        interactive_167386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2099, 15), self_167385, 'interactive')
        # Applying the 'not' unary operator (line 2099)
        result_not__167387 = python_operator(stypy.reporting.localization.Localization(__file__, 2099, 11), 'not', interactive_167386)
        
        # Testing the type of an if condition (line 2099)
        if_condition_167388 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2099, 8), result_not__167387)
        # Assigning a type to the variable 'if_condition_167388' (line 2099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2099, 8), 'if_condition_167388', if_condition_167388)
        # SSA begins for if statement (line 2099)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Attribute (line 2100):
        
        # Assigning a List to a Attribute (line 2100):
        
        # Obtaining an instance of the builtin type 'list' (line 2100)
        list_167389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2100, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2100)
        # Adding element type (line 2100)
        # Getting the type of 'self' (line 2100)
        self_167390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 28), 'self')
        # Obtaining the member 'to_draw' of a type (line 2100)
        to_draw_167391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2100, 28), self_167390, 'to_draw')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2100, 27), list_167389, to_draw_167391)
        
        # Getting the type of 'self' (line 2100)
        self_167392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 12), 'self')
        # Setting the type of the member 'artists' of a type (line 2100)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2100, 12), self_167392, 'artists', list_167389)
        # SSA join for if statement (line 2099)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2102):
        
        # Assigning a Name to a Attribute (line 2102):
        # Getting the type of 'None' (line 2102)
        None_167393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 33), 'None')
        # Getting the type of 'self' (line 2102)
        self_167394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 8), 'self')
        # Setting the type of the member '_extents_on_press' of a type (line 2102)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2102, 8), self_167394, '_extents_on_press', None_167393)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _press(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_press'
        module_type_store = module_type_store.open_function_context('_press', 2104, 4, False)
        # Assigning a type to the variable 'self' (line 2105)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2105, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RectangleSelector._press.__dict__.__setitem__('stypy_localization', localization)
        RectangleSelector._press.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RectangleSelector._press.__dict__.__setitem__('stypy_type_store', module_type_store)
        RectangleSelector._press.__dict__.__setitem__('stypy_function_name', 'RectangleSelector._press')
        RectangleSelector._press.__dict__.__setitem__('stypy_param_names_list', ['event'])
        RectangleSelector._press.__dict__.__setitem__('stypy_varargs_param_name', None)
        RectangleSelector._press.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RectangleSelector._press.__dict__.__setitem__('stypy_call_defaults', defaults)
        RectangleSelector._press.__dict__.__setitem__('stypy_call_varargs', varargs)
        RectangleSelector._press.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RectangleSelector._press.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RectangleSelector._press', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_press', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_press(...)' code ##################

        unicode_167395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2105, 8), 'unicode', u'on button press event')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2108)
        self_167396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2108, 11), 'self')
        # Obtaining the member 'interactive' of a type (line 2108)
        interactive_167397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2108, 11), self_167396, 'interactive')
        
        # Call to get_visible(...): (line 2108)
        # Processing the call keyword arguments (line 2108)
        kwargs_167401 = {}
        # Getting the type of 'self' (line 2108)
        self_167398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2108, 32), 'self', False)
        # Obtaining the member 'to_draw' of a type (line 2108)
        to_draw_167399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2108, 32), self_167398, 'to_draw')
        # Obtaining the member 'get_visible' of a type (line 2108)
        get_visible_167400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2108, 32), to_draw_167399, 'get_visible')
        # Calling get_visible(args, kwargs) (line 2108)
        get_visible_call_result_167402 = invoke(stypy.reporting.localization.Localization(__file__, 2108, 32), get_visible_167400, *[], **kwargs_167401)
        
        # Applying the binary operator 'and' (line 2108)
        result_and_keyword_167403 = python_operator(stypy.reporting.localization.Localization(__file__, 2108, 11), 'and', interactive_167397, get_visible_call_result_167402)
        
        # Testing the type of an if condition (line 2108)
        if_condition_167404 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2108, 8), result_and_keyword_167403)
        # Assigning a type to the variable 'if_condition_167404' (line 2108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2108, 8), 'if_condition_167404', if_condition_167404)
        # SSA begins for if statement (line 2108)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _set_active_handle(...): (line 2109)
        # Processing the call arguments (line 2109)
        # Getting the type of 'event' (line 2109)
        event_167407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 36), 'event', False)
        # Processing the call keyword arguments (line 2109)
        kwargs_167408 = {}
        # Getting the type of 'self' (line 2109)
        self_167405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 12), 'self', False)
        # Obtaining the member '_set_active_handle' of a type (line 2109)
        _set_active_handle_167406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2109, 12), self_167405, '_set_active_handle')
        # Calling _set_active_handle(args, kwargs) (line 2109)
        _set_active_handle_call_result_167409 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 12), _set_active_handle_167406, *[event_167407], **kwargs_167408)
        
        # SSA branch for the else part of an if statement (line 2108)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 2111):
        
        # Assigning a Name to a Attribute (line 2111):
        # Getting the type of 'None' (line 2111)
        None_167410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 33), 'None')
        # Getting the type of 'self' (line 2111)
        self_167411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 12), 'self')
        # Setting the type of the member 'active_handle' of a type (line 2111)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2111, 12), self_167411, 'active_handle', None_167410)
        # SSA join for if statement (line 2108)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2113)
        self_167412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 11), 'self')
        # Obtaining the member 'active_handle' of a type (line 2113)
        active_handle_167413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2113, 11), self_167412, 'active_handle')
        # Getting the type of 'None' (line 2113)
        None_167414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 33), 'None')
        # Applying the binary operator 'is' (line 2113)
        result_is__167415 = python_operator(stypy.reporting.localization.Localization(__file__, 2113, 11), 'is', active_handle_167413, None_167414)
        
        
        # Getting the type of 'self' (line 2113)
        self_167416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 45), 'self')
        # Obtaining the member 'interactive' of a type (line 2113)
        interactive_167417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2113, 45), self_167416, 'interactive')
        # Applying the 'not' unary operator (line 2113)
        result_not__167418 = python_operator(stypy.reporting.localization.Localization(__file__, 2113, 41), 'not', interactive_167417)
        
        # Applying the binary operator 'or' (line 2113)
        result_or_keyword_167419 = python_operator(stypy.reporting.localization.Localization(__file__, 2113, 11), 'or', result_is__167415, result_not__167418)
        
        # Testing the type of an if condition (line 2113)
        if_condition_167420 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2113, 8), result_or_keyword_167419)
        # Assigning a type to the variable 'if_condition_167420' (line 2113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2113, 8), 'if_condition_167420', if_condition_167420)
        # SSA begins for if statement (line 2113)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to update(...): (line 2115)
        # Processing the call keyword arguments (line 2115)
        kwargs_167423 = {}
        # Getting the type of 'self' (line 2115)
        self_167421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 12), 'self', False)
        # Obtaining the member 'update' of a type (line 2115)
        update_167422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2115, 12), self_167421, 'update')
        # Calling update(args, kwargs) (line 2115)
        update_call_result_167424 = invoke(stypy.reporting.localization.Localization(__file__, 2115, 12), update_167422, *[], **kwargs_167423)
        
        # SSA join for if statement (line 2113)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_visible(...): (line 2117)
        # Processing the call arguments (line 2117)
        # Getting the type of 'self' (line 2117)
        self_167427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2117, 25), 'self', False)
        # Obtaining the member 'visible' of a type (line 2117)
        visible_167428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2117, 25), self_167427, 'visible')
        # Processing the call keyword arguments (line 2117)
        kwargs_167429 = {}
        # Getting the type of 'self' (line 2117)
        self_167425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2117, 8), 'self', False)
        # Obtaining the member 'set_visible' of a type (line 2117)
        set_visible_167426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2117, 8), self_167425, 'set_visible')
        # Calling set_visible(args, kwargs) (line 2117)
        set_visible_call_result_167430 = invoke(stypy.reporting.localization.Localization(__file__, 2117, 8), set_visible_167426, *[visible_167428], **kwargs_167429)
        
        
        # ################# End of '_press(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_press' in the type store
        # Getting the type of 'stypy_return_type' (line 2104)
        stypy_return_type_167431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_167431)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_press'
        return stypy_return_type_167431


    @norecursion
    def _release(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_release'
        module_type_store = module_type_store.open_function_context('_release', 2119, 4, False)
        # Assigning a type to the variable 'self' (line 2120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2120, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RectangleSelector._release.__dict__.__setitem__('stypy_localization', localization)
        RectangleSelector._release.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RectangleSelector._release.__dict__.__setitem__('stypy_type_store', module_type_store)
        RectangleSelector._release.__dict__.__setitem__('stypy_function_name', 'RectangleSelector._release')
        RectangleSelector._release.__dict__.__setitem__('stypy_param_names_list', ['event'])
        RectangleSelector._release.__dict__.__setitem__('stypy_varargs_param_name', None)
        RectangleSelector._release.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RectangleSelector._release.__dict__.__setitem__('stypy_call_defaults', defaults)
        RectangleSelector._release.__dict__.__setitem__('stypy_call_varargs', varargs)
        RectangleSelector._release.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RectangleSelector._release.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RectangleSelector._release', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_release', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_release(...)' code ##################

        unicode_167432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2120, 8), 'unicode', u'on button release event')
        
        
        # Getting the type of 'self' (line 2121)
        self_167433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 15), 'self')
        # Obtaining the member 'interactive' of a type (line 2121)
        interactive_167434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2121, 15), self_167433, 'interactive')
        # Applying the 'not' unary operator (line 2121)
        result_not__167435 = python_operator(stypy.reporting.localization.Localization(__file__, 2121, 11), 'not', interactive_167434)
        
        # Testing the type of an if condition (line 2121)
        if_condition_167436 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2121, 8), result_not__167435)
        # Assigning a type to the variable 'if_condition_167436' (line 2121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2121, 8), 'if_condition_167436', if_condition_167436)
        # SSA begins for if statement (line 2121)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_visible(...): (line 2122)
        # Processing the call arguments (line 2122)
        # Getting the type of 'False' (line 2122)
        False_167440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2122, 37), 'False', False)
        # Processing the call keyword arguments (line 2122)
        kwargs_167441 = {}
        # Getting the type of 'self' (line 2122)
        self_167437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2122, 12), 'self', False)
        # Obtaining the member 'to_draw' of a type (line 2122)
        to_draw_167438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2122, 12), self_167437, 'to_draw')
        # Obtaining the member 'set_visible' of a type (line 2122)
        set_visible_167439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2122, 12), to_draw_167438, 'set_visible')
        # Calling set_visible(args, kwargs) (line 2122)
        set_visible_call_result_167442 = invoke(stypy.reporting.localization.Localization(__file__, 2122, 12), set_visible_167439, *[False_167440], **kwargs_167441)
        
        # SSA join for if statement (line 2121)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Tuple (line 2125):
        
        # Assigning a Subscript to a Name (line 2125):
        
        # Obtaining the type of the subscript
        int_167443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2125, 8), 'int')
        # Getting the type of 'self' (line 2125)
        self_167444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2125, 25), 'self')
        # Obtaining the member 'extents' of a type (line 2125)
        extents_167445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2125, 25), self_167444, 'extents')
        # Obtaining the member '__getitem__' of a type (line 2125)
        getitem___167446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2125, 8), extents_167445, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2125)
        subscript_call_result_167447 = invoke(stypy.reporting.localization.Localization(__file__, 2125, 8), getitem___167446, int_167443)
        
        # Assigning a type to the variable 'tuple_var_assignment_162320' (line 2125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2125, 8), 'tuple_var_assignment_162320', subscript_call_result_167447)
        
        # Assigning a Subscript to a Name (line 2125):
        
        # Obtaining the type of the subscript
        int_167448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2125, 8), 'int')
        # Getting the type of 'self' (line 2125)
        self_167449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2125, 25), 'self')
        # Obtaining the member 'extents' of a type (line 2125)
        extents_167450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2125, 25), self_167449, 'extents')
        # Obtaining the member '__getitem__' of a type (line 2125)
        getitem___167451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2125, 8), extents_167450, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2125)
        subscript_call_result_167452 = invoke(stypy.reporting.localization.Localization(__file__, 2125, 8), getitem___167451, int_167448)
        
        # Assigning a type to the variable 'tuple_var_assignment_162321' (line 2125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2125, 8), 'tuple_var_assignment_162321', subscript_call_result_167452)
        
        # Assigning a Subscript to a Name (line 2125):
        
        # Obtaining the type of the subscript
        int_167453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2125, 8), 'int')
        # Getting the type of 'self' (line 2125)
        self_167454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2125, 25), 'self')
        # Obtaining the member 'extents' of a type (line 2125)
        extents_167455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2125, 25), self_167454, 'extents')
        # Obtaining the member '__getitem__' of a type (line 2125)
        getitem___167456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2125, 8), extents_167455, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2125)
        subscript_call_result_167457 = invoke(stypy.reporting.localization.Localization(__file__, 2125, 8), getitem___167456, int_167453)
        
        # Assigning a type to the variable 'tuple_var_assignment_162322' (line 2125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2125, 8), 'tuple_var_assignment_162322', subscript_call_result_167457)
        
        # Assigning a Subscript to a Name (line 2125):
        
        # Obtaining the type of the subscript
        int_167458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2125, 8), 'int')
        # Getting the type of 'self' (line 2125)
        self_167459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2125, 25), 'self')
        # Obtaining the member 'extents' of a type (line 2125)
        extents_167460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2125, 25), self_167459, 'extents')
        # Obtaining the member '__getitem__' of a type (line 2125)
        getitem___167461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2125, 8), extents_167460, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2125)
        subscript_call_result_167462 = invoke(stypy.reporting.localization.Localization(__file__, 2125, 8), getitem___167461, int_167458)
        
        # Assigning a type to the variable 'tuple_var_assignment_162323' (line 2125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2125, 8), 'tuple_var_assignment_162323', subscript_call_result_167462)
        
        # Assigning a Name to a Name (line 2125):
        # Getting the type of 'tuple_var_assignment_162320' (line 2125)
        tuple_var_assignment_162320_167463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2125, 8), 'tuple_var_assignment_162320')
        # Assigning a type to the variable 'x1' (line 2125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2125, 8), 'x1', tuple_var_assignment_162320_167463)
        
        # Assigning a Name to a Name (line 2125):
        # Getting the type of 'tuple_var_assignment_162321' (line 2125)
        tuple_var_assignment_162321_167464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2125, 8), 'tuple_var_assignment_162321')
        # Assigning a type to the variable 'x2' (line 2125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2125, 12), 'x2', tuple_var_assignment_162321_167464)
        
        # Assigning a Name to a Name (line 2125):
        # Getting the type of 'tuple_var_assignment_162322' (line 2125)
        tuple_var_assignment_162322_167465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2125, 8), 'tuple_var_assignment_162322')
        # Assigning a type to the variable 'y1' (line 2125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2125, 16), 'y1', tuple_var_assignment_162322_167465)
        
        # Assigning a Name to a Name (line 2125):
        # Getting the type of 'tuple_var_assignment_162323' (line 2125)
        tuple_var_assignment_162323_167466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2125, 8), 'tuple_var_assignment_162323')
        # Assigning a type to the variable 'y2' (line 2125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2125, 20), 'y2', tuple_var_assignment_162323_167466)
        
        # Assigning a Name to a Attribute (line 2126):
        
        # Assigning a Name to a Attribute (line 2126):
        # Getting the type of 'x1' (line 2126)
        x1_167467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2126, 32), 'x1')
        # Getting the type of 'self' (line 2126)
        self_167468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2126, 8), 'self')
        # Obtaining the member 'eventpress' of a type (line 2126)
        eventpress_167469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2126, 8), self_167468, 'eventpress')
        # Setting the type of the member 'xdata' of a type (line 2126)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2126, 8), eventpress_167469, 'xdata', x1_167467)
        
        # Assigning a Name to a Attribute (line 2127):
        
        # Assigning a Name to a Attribute (line 2127):
        # Getting the type of 'y1' (line 2127)
        y1_167470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2127, 32), 'y1')
        # Getting the type of 'self' (line 2127)
        self_167471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2127, 8), 'self')
        # Obtaining the member 'eventpress' of a type (line 2127)
        eventpress_167472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2127, 8), self_167471, 'eventpress')
        # Setting the type of the member 'ydata' of a type (line 2127)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2127, 8), eventpress_167472, 'ydata', y1_167470)
        
        # Assigning a Call to a Name (line 2128):
        
        # Assigning a Call to a Name (line 2128):
        
        # Call to transform_point(...): (line 2128)
        # Processing the call arguments (line 2128)
        
        # Obtaining an instance of the builtin type 'list' (line 2128)
        list_167477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2128, 48), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2128)
        # Adding element type (line 2128)
        # Getting the type of 'x1' (line 2128)
        x1_167478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2128, 49), 'x1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2128, 48), list_167477, x1_167478)
        # Adding element type (line 2128)
        # Getting the type of 'y1' (line 2128)
        y1_167479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2128, 53), 'y1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2128, 48), list_167477, y1_167479)
        
        # Processing the call keyword arguments (line 2128)
        kwargs_167480 = {}
        # Getting the type of 'self' (line 2128)
        self_167473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2128, 14), 'self', False)
        # Obtaining the member 'ax' of a type (line 2128)
        ax_167474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2128, 14), self_167473, 'ax')
        # Obtaining the member 'transData' of a type (line 2128)
        transData_167475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2128, 14), ax_167474, 'transData')
        # Obtaining the member 'transform_point' of a type (line 2128)
        transform_point_167476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2128, 14), transData_167475, 'transform_point')
        # Calling transform_point(args, kwargs) (line 2128)
        transform_point_call_result_167481 = invoke(stypy.reporting.localization.Localization(__file__, 2128, 14), transform_point_167476, *[list_167477], **kwargs_167480)
        
        # Assigning a type to the variable 'xy1' (line 2128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2128, 8), 'xy1', transform_point_call_result_167481)
        
        # Assigning a Name to a Tuple (line 2129):
        
        # Assigning a Subscript to a Name (line 2129):
        
        # Obtaining the type of the subscript
        int_167482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2129, 8), 'int')
        # Getting the type of 'xy1' (line 2129)
        xy1_167483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2129, 47), 'xy1')
        # Obtaining the member '__getitem__' of a type (line 2129)
        getitem___167484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2129, 8), xy1_167483, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2129)
        subscript_call_result_167485 = invoke(stypy.reporting.localization.Localization(__file__, 2129, 8), getitem___167484, int_167482)
        
        # Assigning a type to the variable 'tuple_var_assignment_162324' (line 2129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2129, 8), 'tuple_var_assignment_162324', subscript_call_result_167485)
        
        # Assigning a Subscript to a Name (line 2129):
        
        # Obtaining the type of the subscript
        int_167486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2129, 8), 'int')
        # Getting the type of 'xy1' (line 2129)
        xy1_167487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2129, 47), 'xy1')
        # Obtaining the member '__getitem__' of a type (line 2129)
        getitem___167488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2129, 8), xy1_167487, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2129)
        subscript_call_result_167489 = invoke(stypy.reporting.localization.Localization(__file__, 2129, 8), getitem___167488, int_167486)
        
        # Assigning a type to the variable 'tuple_var_assignment_162325' (line 2129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2129, 8), 'tuple_var_assignment_162325', subscript_call_result_167489)
        
        # Assigning a Name to a Attribute (line 2129):
        # Getting the type of 'tuple_var_assignment_162324' (line 2129)
        tuple_var_assignment_162324_167490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2129, 8), 'tuple_var_assignment_162324')
        # Getting the type of 'self' (line 2129)
        self_167491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2129, 8), 'self')
        # Obtaining the member 'eventpress' of a type (line 2129)
        eventpress_167492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2129, 8), self_167491, 'eventpress')
        # Setting the type of the member 'x' of a type (line 2129)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2129, 8), eventpress_167492, 'x', tuple_var_assignment_162324_167490)
        
        # Assigning a Name to a Attribute (line 2129):
        # Getting the type of 'tuple_var_assignment_162325' (line 2129)
        tuple_var_assignment_162325_167493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2129, 8), 'tuple_var_assignment_162325')
        # Getting the type of 'self' (line 2129)
        self_167494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2129, 27), 'self')
        # Obtaining the member 'eventpress' of a type (line 2129)
        eventpress_167495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2129, 27), self_167494, 'eventpress')
        # Setting the type of the member 'y' of a type (line 2129)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2129, 27), eventpress_167495, 'y', tuple_var_assignment_162325_167493)
        
        # Assigning a Name to a Attribute (line 2131):
        
        # Assigning a Name to a Attribute (line 2131):
        # Getting the type of 'x2' (line 2131)
        x2_167496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2131, 34), 'x2')
        # Getting the type of 'self' (line 2131)
        self_167497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2131, 8), 'self')
        # Obtaining the member 'eventrelease' of a type (line 2131)
        eventrelease_167498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2131, 8), self_167497, 'eventrelease')
        # Setting the type of the member 'xdata' of a type (line 2131)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2131, 8), eventrelease_167498, 'xdata', x2_167496)
        
        # Assigning a Name to a Attribute (line 2132):
        
        # Assigning a Name to a Attribute (line 2132):
        # Getting the type of 'y2' (line 2132)
        y2_167499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2132, 34), 'y2')
        # Getting the type of 'self' (line 2132)
        self_167500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2132, 8), 'self')
        # Obtaining the member 'eventrelease' of a type (line 2132)
        eventrelease_167501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2132, 8), self_167500, 'eventrelease')
        # Setting the type of the member 'ydata' of a type (line 2132)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2132, 8), eventrelease_167501, 'ydata', y2_167499)
        
        # Assigning a Call to a Name (line 2133):
        
        # Assigning a Call to a Name (line 2133):
        
        # Call to transform_point(...): (line 2133)
        # Processing the call arguments (line 2133)
        
        # Obtaining an instance of the builtin type 'list' (line 2133)
        list_167506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2133, 48), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2133)
        # Adding element type (line 2133)
        # Getting the type of 'x2' (line 2133)
        x2_167507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2133, 49), 'x2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2133, 48), list_167506, x2_167507)
        # Adding element type (line 2133)
        # Getting the type of 'y2' (line 2133)
        y2_167508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2133, 53), 'y2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2133, 48), list_167506, y2_167508)
        
        # Processing the call keyword arguments (line 2133)
        kwargs_167509 = {}
        # Getting the type of 'self' (line 2133)
        self_167502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2133, 14), 'self', False)
        # Obtaining the member 'ax' of a type (line 2133)
        ax_167503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2133, 14), self_167502, 'ax')
        # Obtaining the member 'transData' of a type (line 2133)
        transData_167504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2133, 14), ax_167503, 'transData')
        # Obtaining the member 'transform_point' of a type (line 2133)
        transform_point_167505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2133, 14), transData_167504, 'transform_point')
        # Calling transform_point(args, kwargs) (line 2133)
        transform_point_call_result_167510 = invoke(stypy.reporting.localization.Localization(__file__, 2133, 14), transform_point_167505, *[list_167506], **kwargs_167509)
        
        # Assigning a type to the variable 'xy2' (line 2133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2133, 8), 'xy2', transform_point_call_result_167510)
        
        # Assigning a Name to a Tuple (line 2134):
        
        # Assigning a Subscript to a Name (line 2134):
        
        # Obtaining the type of the subscript
        int_167511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2134, 8), 'int')
        # Getting the type of 'xy2' (line 2134)
        xy2_167512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 51), 'xy2')
        # Obtaining the member '__getitem__' of a type (line 2134)
        getitem___167513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 8), xy2_167512, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2134)
        subscript_call_result_167514 = invoke(stypy.reporting.localization.Localization(__file__, 2134, 8), getitem___167513, int_167511)
        
        # Assigning a type to the variable 'tuple_var_assignment_162326' (line 2134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2134, 8), 'tuple_var_assignment_162326', subscript_call_result_167514)
        
        # Assigning a Subscript to a Name (line 2134):
        
        # Obtaining the type of the subscript
        int_167515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2134, 8), 'int')
        # Getting the type of 'xy2' (line 2134)
        xy2_167516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 51), 'xy2')
        # Obtaining the member '__getitem__' of a type (line 2134)
        getitem___167517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 8), xy2_167516, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2134)
        subscript_call_result_167518 = invoke(stypy.reporting.localization.Localization(__file__, 2134, 8), getitem___167517, int_167515)
        
        # Assigning a type to the variable 'tuple_var_assignment_162327' (line 2134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2134, 8), 'tuple_var_assignment_162327', subscript_call_result_167518)
        
        # Assigning a Name to a Attribute (line 2134):
        # Getting the type of 'tuple_var_assignment_162326' (line 2134)
        tuple_var_assignment_162326_167519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 8), 'tuple_var_assignment_162326')
        # Getting the type of 'self' (line 2134)
        self_167520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 8), 'self')
        # Obtaining the member 'eventrelease' of a type (line 2134)
        eventrelease_167521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 8), self_167520, 'eventrelease')
        # Setting the type of the member 'x' of a type (line 2134)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 8), eventrelease_167521, 'x', tuple_var_assignment_162326_167519)
        
        # Assigning a Name to a Attribute (line 2134):
        # Getting the type of 'tuple_var_assignment_162327' (line 2134)
        tuple_var_assignment_162327_167522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 8), 'tuple_var_assignment_162327')
        # Getting the type of 'self' (line 2134)
        self_167523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 29), 'self')
        # Obtaining the member 'eventrelease' of a type (line 2134)
        eventrelease_167524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 29), self_167523, 'eventrelease')
        # Setting the type of the member 'y' of a type (line 2134)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 29), eventrelease_167524, 'y', tuple_var_assignment_162327_167522)
        
        
        # Getting the type of 'self' (line 2136)
        self_167525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 11), 'self')
        # Obtaining the member 'spancoords' of a type (line 2136)
        spancoords_167526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2136, 11), self_167525, 'spancoords')
        unicode_167527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2136, 30), 'unicode', u'data')
        # Applying the binary operator '==' (line 2136)
        result_eq_167528 = python_operator(stypy.reporting.localization.Localization(__file__, 2136, 11), '==', spancoords_167526, unicode_167527)
        
        # Testing the type of an if condition (line 2136)
        if_condition_167529 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2136, 8), result_eq_167528)
        # Assigning a type to the variable 'if_condition_167529' (line 2136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2136, 8), 'if_condition_167529', if_condition_167529)
        # SSA begins for if statement (line 2136)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 2137):
        
        # Assigning a Attribute to a Name (line 2137):
        # Getting the type of 'self' (line 2137)
        self_167530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2137, 25), 'self')
        # Obtaining the member 'eventpress' of a type (line 2137)
        eventpress_167531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2137, 25), self_167530, 'eventpress')
        # Obtaining the member 'xdata' of a type (line 2137)
        xdata_167532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2137, 25), eventpress_167531, 'xdata')
        # Assigning a type to the variable 'tuple_assignment_162328' (line 2137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2137, 12), 'tuple_assignment_162328', xdata_167532)
        
        # Assigning a Attribute to a Name (line 2137):
        # Getting the type of 'self' (line 2137)
        self_167533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2137, 48), 'self')
        # Obtaining the member 'eventpress' of a type (line 2137)
        eventpress_167534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2137, 48), self_167533, 'eventpress')
        # Obtaining the member 'ydata' of a type (line 2137)
        ydata_167535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2137, 48), eventpress_167534, 'ydata')
        # Assigning a type to the variable 'tuple_assignment_162329' (line 2137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2137, 12), 'tuple_assignment_162329', ydata_167535)
        
        # Assigning a Name to a Name (line 2137):
        # Getting the type of 'tuple_assignment_162328' (line 2137)
        tuple_assignment_162328_167536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2137, 12), 'tuple_assignment_162328')
        # Assigning a type to the variable 'xmin' (line 2137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2137, 12), 'xmin', tuple_assignment_162328_167536)
        
        # Assigning a Name to a Name (line 2137):
        # Getting the type of 'tuple_assignment_162329' (line 2137)
        tuple_assignment_162329_167537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2137, 12), 'tuple_assignment_162329')
        # Assigning a type to the variable 'ymin' (line 2137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2137, 18), 'ymin', tuple_assignment_162329_167537)
        
        # Assigning a Tuple to a Tuple (line 2138):
        
        # Assigning a Attribute to a Name (line 2138):
        # Getting the type of 'self' (line 2138)
        self_167538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 25), 'self')
        # Obtaining the member 'eventrelease' of a type (line 2138)
        eventrelease_167539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2138, 25), self_167538, 'eventrelease')
        # Obtaining the member 'xdata' of a type (line 2138)
        xdata_167540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2138, 25), eventrelease_167539, 'xdata')
        # Assigning a type to the variable 'tuple_assignment_162330' (line 2138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2138, 12), 'tuple_assignment_162330', xdata_167540)
        
        # Assigning a Attribute to a Name (line 2138):
        # Getting the type of 'self' (line 2138)
        self_167541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 50), 'self')
        # Obtaining the member 'eventrelease' of a type (line 2138)
        eventrelease_167542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2138, 50), self_167541, 'eventrelease')
        # Obtaining the member 'ydata' of a type (line 2138)
        ydata_167543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2138, 50), eventrelease_167542, 'ydata')
        # Assigning a type to the variable 'tuple_assignment_162331' (line 2138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2138, 12), 'tuple_assignment_162331', ydata_167543)
        
        # Assigning a Name to a Name (line 2138):
        # Getting the type of 'tuple_assignment_162330' (line 2138)
        tuple_assignment_162330_167544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 12), 'tuple_assignment_162330')
        # Assigning a type to the variable 'xmax' (line 2138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2138, 12), 'xmax', tuple_assignment_162330_167544)
        
        # Assigning a Name to a Name (line 2138):
        # Getting the type of 'tuple_assignment_162331' (line 2138)
        tuple_assignment_162331_167545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 12), 'tuple_assignment_162331')
        # Assigning a type to the variable 'ymax' (line 2138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2138, 18), 'ymax', tuple_assignment_162331_167545)
        # SSA branch for the else part of an if statement (line 2136)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 2141)
        self_167546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 13), 'self')
        # Obtaining the member 'spancoords' of a type (line 2141)
        spancoords_167547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2141, 13), self_167546, 'spancoords')
        unicode_167548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2141, 32), 'unicode', u'pixels')
        # Applying the binary operator '==' (line 2141)
        result_eq_167549 = python_operator(stypy.reporting.localization.Localization(__file__, 2141, 13), '==', spancoords_167547, unicode_167548)
        
        # Testing the type of an if condition (line 2141)
        if_condition_167550 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2141, 13), result_eq_167549)
        # Assigning a type to the variable 'if_condition_167550' (line 2141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2141, 13), 'if_condition_167550', if_condition_167550)
        # SSA begins for if statement (line 2141)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 2142):
        
        # Assigning a Attribute to a Name (line 2142):
        # Getting the type of 'self' (line 2142)
        self_167551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2142, 25), 'self')
        # Obtaining the member 'eventpress' of a type (line 2142)
        eventpress_167552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2142, 25), self_167551, 'eventpress')
        # Obtaining the member 'x' of a type (line 2142)
        x_167553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2142, 25), eventpress_167552, 'x')
        # Assigning a type to the variable 'tuple_assignment_162332' (line 2142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2142, 12), 'tuple_assignment_162332', x_167553)
        
        # Assigning a Attribute to a Name (line 2142):
        # Getting the type of 'self' (line 2142)
        self_167554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2142, 44), 'self')
        # Obtaining the member 'eventpress' of a type (line 2142)
        eventpress_167555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2142, 44), self_167554, 'eventpress')
        # Obtaining the member 'y' of a type (line 2142)
        y_167556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2142, 44), eventpress_167555, 'y')
        # Assigning a type to the variable 'tuple_assignment_162333' (line 2142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2142, 12), 'tuple_assignment_162333', y_167556)
        
        # Assigning a Name to a Name (line 2142):
        # Getting the type of 'tuple_assignment_162332' (line 2142)
        tuple_assignment_162332_167557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2142, 12), 'tuple_assignment_162332')
        # Assigning a type to the variable 'xmin' (line 2142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2142, 12), 'xmin', tuple_assignment_162332_167557)
        
        # Assigning a Name to a Name (line 2142):
        # Getting the type of 'tuple_assignment_162333' (line 2142)
        tuple_assignment_162333_167558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2142, 12), 'tuple_assignment_162333')
        # Assigning a type to the variable 'ymin' (line 2142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2142, 18), 'ymin', tuple_assignment_162333_167558)
        
        # Assigning a Tuple to a Tuple (line 2143):
        
        # Assigning a Attribute to a Name (line 2143):
        # Getting the type of 'self' (line 2143)
        self_167559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 25), 'self')
        # Obtaining the member 'eventrelease' of a type (line 2143)
        eventrelease_167560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2143, 25), self_167559, 'eventrelease')
        # Obtaining the member 'x' of a type (line 2143)
        x_167561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2143, 25), eventrelease_167560, 'x')
        # Assigning a type to the variable 'tuple_assignment_162334' (line 2143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2143, 12), 'tuple_assignment_162334', x_167561)
        
        # Assigning a Attribute to a Name (line 2143):
        # Getting the type of 'self' (line 2143)
        self_167562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 46), 'self')
        # Obtaining the member 'eventrelease' of a type (line 2143)
        eventrelease_167563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2143, 46), self_167562, 'eventrelease')
        # Obtaining the member 'y' of a type (line 2143)
        y_167564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2143, 46), eventrelease_167563, 'y')
        # Assigning a type to the variable 'tuple_assignment_162335' (line 2143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2143, 12), 'tuple_assignment_162335', y_167564)
        
        # Assigning a Name to a Name (line 2143):
        # Getting the type of 'tuple_assignment_162334' (line 2143)
        tuple_assignment_162334_167565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 12), 'tuple_assignment_162334')
        # Assigning a type to the variable 'xmax' (line 2143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2143, 12), 'xmax', tuple_assignment_162334_167565)
        
        # Assigning a Name to a Name (line 2143):
        # Getting the type of 'tuple_assignment_162335' (line 2143)
        tuple_assignment_162335_167566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 12), 'tuple_assignment_162335')
        # Assigning a type to the variable 'ymax' (line 2143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2143, 18), 'ymax', tuple_assignment_162335_167566)
        # SSA branch for the else part of an if statement (line 2141)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 2145)
        # Processing the call arguments (line 2145)
        unicode_167568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2145, 29), 'unicode', u'spancoords must be "data" or "pixels"')
        # Processing the call keyword arguments (line 2145)
        kwargs_167569 = {}
        # Getting the type of 'ValueError' (line 2145)
        ValueError_167567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2145, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2145)
        ValueError_call_result_167570 = invoke(stypy.reporting.localization.Localization(__file__, 2145, 18), ValueError_167567, *[unicode_167568], **kwargs_167569)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2145, 12), ValueError_call_result_167570, 'raise parameter', BaseException)
        # SSA join for if statement (line 2141)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2136)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'xmin' (line 2147)
        xmin_167571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 11), 'xmin')
        # Getting the type of 'xmax' (line 2147)
        xmax_167572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 18), 'xmax')
        # Applying the binary operator '>' (line 2147)
        result_gt_167573 = python_operator(stypy.reporting.localization.Localization(__file__, 2147, 11), '>', xmin_167571, xmax_167572)
        
        # Testing the type of an if condition (line 2147)
        if_condition_167574 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2147, 8), result_gt_167573)
        # Assigning a type to the variable 'if_condition_167574' (line 2147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2147, 8), 'if_condition_167574', if_condition_167574)
        # SSA begins for if statement (line 2147)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 2148):
        
        # Assigning a Name to a Name (line 2148):
        # Getting the type of 'xmax' (line 2148)
        xmax_167575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 25), 'xmax')
        # Assigning a type to the variable 'tuple_assignment_162336' (line 2148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2148, 12), 'tuple_assignment_162336', xmax_167575)
        
        # Assigning a Name to a Name (line 2148):
        # Getting the type of 'xmin' (line 2148)
        xmin_167576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 31), 'xmin')
        # Assigning a type to the variable 'tuple_assignment_162337' (line 2148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2148, 12), 'tuple_assignment_162337', xmin_167576)
        
        # Assigning a Name to a Name (line 2148):
        # Getting the type of 'tuple_assignment_162336' (line 2148)
        tuple_assignment_162336_167577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 12), 'tuple_assignment_162336')
        # Assigning a type to the variable 'xmin' (line 2148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2148, 12), 'xmin', tuple_assignment_162336_167577)
        
        # Assigning a Name to a Name (line 2148):
        # Getting the type of 'tuple_assignment_162337' (line 2148)
        tuple_assignment_162337_167578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 12), 'tuple_assignment_162337')
        # Assigning a type to the variable 'xmax' (line 2148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2148, 18), 'xmax', tuple_assignment_162337_167578)
        # SSA join for if statement (line 2147)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'ymin' (line 2149)
        ymin_167579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 11), 'ymin')
        # Getting the type of 'ymax' (line 2149)
        ymax_167580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 18), 'ymax')
        # Applying the binary operator '>' (line 2149)
        result_gt_167581 = python_operator(stypy.reporting.localization.Localization(__file__, 2149, 11), '>', ymin_167579, ymax_167580)
        
        # Testing the type of an if condition (line 2149)
        if_condition_167582 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2149, 8), result_gt_167581)
        # Assigning a type to the variable 'if_condition_167582' (line 2149)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2149, 8), 'if_condition_167582', if_condition_167582)
        # SSA begins for if statement (line 2149)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 2150):
        
        # Assigning a Name to a Name (line 2150):
        # Getting the type of 'ymax' (line 2150)
        ymax_167583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2150, 25), 'ymax')
        # Assigning a type to the variable 'tuple_assignment_162338' (line 2150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2150, 12), 'tuple_assignment_162338', ymax_167583)
        
        # Assigning a Name to a Name (line 2150):
        # Getting the type of 'ymin' (line 2150)
        ymin_167584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2150, 31), 'ymin')
        # Assigning a type to the variable 'tuple_assignment_162339' (line 2150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2150, 12), 'tuple_assignment_162339', ymin_167584)
        
        # Assigning a Name to a Name (line 2150):
        # Getting the type of 'tuple_assignment_162338' (line 2150)
        tuple_assignment_162338_167585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2150, 12), 'tuple_assignment_162338')
        # Assigning a type to the variable 'ymin' (line 2150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2150, 12), 'ymin', tuple_assignment_162338_167585)
        
        # Assigning a Name to a Name (line 2150):
        # Getting the type of 'tuple_assignment_162339' (line 2150)
        tuple_assignment_162339_167586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2150, 12), 'tuple_assignment_162339')
        # Assigning a type to the variable 'ymax' (line 2150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2150, 18), 'ymax', tuple_assignment_162339_167586)
        # SSA join for if statement (line 2149)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 2152):
        
        # Assigning a BinOp to a Name (line 2152):
        # Getting the type of 'xmax' (line 2152)
        xmax_167587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2152, 16), 'xmax')
        # Getting the type of 'xmin' (line 2152)
        xmin_167588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2152, 23), 'xmin')
        # Applying the binary operator '-' (line 2152)
        result_sub_167589 = python_operator(stypy.reporting.localization.Localization(__file__, 2152, 16), '-', xmax_167587, xmin_167588)
        
        # Assigning a type to the variable 'spanx' (line 2152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2152, 8), 'spanx', result_sub_167589)
        
        # Assigning a BinOp to a Name (line 2153):
        
        # Assigning a BinOp to a Name (line 2153):
        # Getting the type of 'ymax' (line 2153)
        ymax_167590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 16), 'ymax')
        # Getting the type of 'ymin' (line 2153)
        ymin_167591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 23), 'ymin')
        # Applying the binary operator '-' (line 2153)
        result_sub_167592 = python_operator(stypy.reporting.localization.Localization(__file__, 2153, 16), '-', ymax_167590, ymin_167591)
        
        # Assigning a type to the variable 'spany' (line 2153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2153, 8), 'spany', result_sub_167592)
        
        # Assigning a BoolOp to a Name (line 2154):
        
        # Assigning a BoolOp to a Name (line 2154):
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2154)
        self_167593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 20), 'self')
        # Obtaining the member 'minspanx' of a type (line 2154)
        minspanx_167594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2154, 20), self_167593, 'minspanx')
        # Getting the type of 'None' (line 2154)
        None_167595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 41), 'None')
        # Applying the binary operator 'isnot' (line 2154)
        result_is_not_167596 = python_operator(stypy.reporting.localization.Localization(__file__, 2154, 20), 'isnot', minspanx_167594, None_167595)
        
        
        # Getting the type of 'spanx' (line 2154)
        spanx_167597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 50), 'spanx')
        # Getting the type of 'self' (line 2154)
        self_167598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 58), 'self')
        # Obtaining the member 'minspanx' of a type (line 2154)
        minspanx_167599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2154, 58), self_167598, 'minspanx')
        # Applying the binary operator '<' (line 2154)
        result_lt_167600 = python_operator(stypy.reporting.localization.Localization(__file__, 2154, 50), '<', spanx_167597, minspanx_167599)
        
        # Applying the binary operator 'and' (line 2154)
        result_and_keyword_167601 = python_operator(stypy.reporting.localization.Localization(__file__, 2154, 20), 'and', result_is_not_167596, result_lt_167600)
        
        # Assigning a type to the variable 'xproblems' (line 2154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2154, 8), 'xproblems', result_and_keyword_167601)
        
        # Assigning a BoolOp to a Name (line 2155):
        
        # Assigning a BoolOp to a Name (line 2155):
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2155)
        self_167602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 20), 'self')
        # Obtaining the member 'minspany' of a type (line 2155)
        minspany_167603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2155, 20), self_167602, 'minspany')
        # Getting the type of 'None' (line 2155)
        None_167604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 41), 'None')
        # Applying the binary operator 'isnot' (line 2155)
        result_is_not_167605 = python_operator(stypy.reporting.localization.Localization(__file__, 2155, 20), 'isnot', minspany_167603, None_167604)
        
        
        # Getting the type of 'spany' (line 2155)
        spany_167606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 50), 'spany')
        # Getting the type of 'self' (line 2155)
        self_167607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 58), 'self')
        # Obtaining the member 'minspany' of a type (line 2155)
        minspany_167608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2155, 58), self_167607, 'minspany')
        # Applying the binary operator '<' (line 2155)
        result_lt_167609 = python_operator(stypy.reporting.localization.Localization(__file__, 2155, 50), '<', spany_167606, minspany_167608)
        
        # Applying the binary operator 'and' (line 2155)
        result_and_keyword_167610 = python_operator(stypy.reporting.localization.Localization(__file__, 2155, 20), 'and', result_is_not_167605, result_lt_167609)
        
        # Assigning a type to the variable 'yproblems' (line 2155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2155, 8), 'yproblems', result_and_keyword_167610)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2159)
        self_167611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 11), 'self')
        # Obtaining the member 'drawtype' of a type (line 2159)
        drawtype_167612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2159, 11), self_167611, 'drawtype')
        unicode_167613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2159, 28), 'unicode', u'none')
        # Applying the binary operator '!=' (line 2159)
        result_ne_167614 = python_operator(stypy.reporting.localization.Localization(__file__, 2159, 11), '!=', drawtype_167612, unicode_167613)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'xproblems' (line 2159)
        xproblems_167615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 40), 'xproblems')
        # Getting the type of 'yproblems' (line 2159)
        yproblems_167616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 53), 'yproblems')
        # Applying the binary operator 'or' (line 2159)
        result_or_keyword_167617 = python_operator(stypy.reporting.localization.Localization(__file__, 2159, 40), 'or', xproblems_167615, yproblems_167616)
        
        # Applying the binary operator 'and' (line 2159)
        result_and_keyword_167618 = python_operator(stypy.reporting.localization.Localization(__file__, 2159, 11), 'and', result_ne_167614, result_or_keyword_167617)
        
        # Testing the type of an if condition (line 2159)
        if_condition_167619 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2159, 8), result_and_keyword_167618)
        # Assigning a type to the variable 'if_condition_167619' (line 2159)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2159, 8), 'if_condition_167619', if_condition_167619)
        # SSA begins for if statement (line 2159)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 2160)
        self_167620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 26), 'self')
        # Obtaining the member 'artists' of a type (line 2160)
        artists_167621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2160, 26), self_167620, 'artists')
        # Testing the type of a for loop iterable (line 2160)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2160, 12), artists_167621)
        # Getting the type of the for loop variable (line 2160)
        for_loop_var_167622 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2160, 12), artists_167621)
        # Assigning a type to the variable 'artist' (line 2160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2160, 12), 'artist', for_loop_var_167622)
        # SSA begins for a for statement (line 2160)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_visible(...): (line 2161)
        # Processing the call arguments (line 2161)
        # Getting the type of 'False' (line 2161)
        False_167625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 35), 'False', False)
        # Processing the call keyword arguments (line 2161)
        kwargs_167626 = {}
        # Getting the type of 'artist' (line 2161)
        artist_167623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 16), 'artist', False)
        # Obtaining the member 'set_visible' of a type (line 2161)
        set_visible_167624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2161, 16), artist_167623, 'set_visible')
        # Calling set_visible(args, kwargs) (line 2161)
        set_visible_call_result_167627 = invoke(stypy.reporting.localization.Localization(__file__, 2161, 16), set_visible_167624, *[False_167625], **kwargs_167626)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to update(...): (line 2162)
        # Processing the call keyword arguments (line 2162)
        kwargs_167630 = {}
        # Getting the type of 'self' (line 2162)
        self_167628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 12), 'self', False)
        # Obtaining the member 'update' of a type (line 2162)
        update_167629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2162, 12), self_167628, 'update')
        # Calling update(args, kwargs) (line 2162)
        update_call_result_167631 = invoke(stypy.reporting.localization.Localization(__file__, 2162, 12), update_167629, *[], **kwargs_167630)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2163, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 2159)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to onselect(...): (line 2166)
        # Processing the call arguments (line 2166)
        # Getting the type of 'self' (line 2166)
        self_167634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 22), 'self', False)
        # Obtaining the member 'eventpress' of a type (line 2166)
        eventpress_167635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2166, 22), self_167634, 'eventpress')
        # Getting the type of 'self' (line 2166)
        self_167636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 39), 'self', False)
        # Obtaining the member 'eventrelease' of a type (line 2166)
        eventrelease_167637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2166, 39), self_167636, 'eventrelease')
        # Processing the call keyword arguments (line 2166)
        kwargs_167638 = {}
        # Getting the type of 'self' (line 2166)
        self_167632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 8), 'self', False)
        # Obtaining the member 'onselect' of a type (line 2166)
        onselect_167633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2166, 8), self_167632, 'onselect')
        # Calling onselect(args, kwargs) (line 2166)
        onselect_call_result_167639 = invoke(stypy.reporting.localization.Localization(__file__, 2166, 8), onselect_167633, *[eventpress_167635, eventrelease_167637], **kwargs_167638)
        
        
        # Call to update(...): (line 2167)
        # Processing the call keyword arguments (line 2167)
        kwargs_167642 = {}
        # Getting the type of 'self' (line 2167)
        self_167640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 8), 'self', False)
        # Obtaining the member 'update' of a type (line 2167)
        update_167641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2167, 8), self_167640, 'update')
        # Calling update(args, kwargs) (line 2167)
        update_call_result_167643 = invoke(stypy.reporting.localization.Localization(__file__, 2167, 8), update_167641, *[], **kwargs_167642)
        
        # Getting the type of 'False' (line 2169)
        False_167644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 2169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2169, 8), 'stypy_return_type', False_167644)
        
        # ################# End of '_release(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_release' in the type store
        # Getting the type of 'stypy_return_type' (line 2119)
        stypy_return_type_167645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2119, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_167645)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_release'
        return stypy_return_type_167645


    @norecursion
    def _onmove(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onmove'
        module_type_store = module_type_store.open_function_context('_onmove', 2171, 4, False)
        # Assigning a type to the variable 'self' (line 2172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2172, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RectangleSelector._onmove.__dict__.__setitem__('stypy_localization', localization)
        RectangleSelector._onmove.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RectangleSelector._onmove.__dict__.__setitem__('stypy_type_store', module_type_store)
        RectangleSelector._onmove.__dict__.__setitem__('stypy_function_name', 'RectangleSelector._onmove')
        RectangleSelector._onmove.__dict__.__setitem__('stypy_param_names_list', ['event'])
        RectangleSelector._onmove.__dict__.__setitem__('stypy_varargs_param_name', None)
        RectangleSelector._onmove.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RectangleSelector._onmove.__dict__.__setitem__('stypy_call_defaults', defaults)
        RectangleSelector._onmove.__dict__.__setitem__('stypy_call_varargs', varargs)
        RectangleSelector._onmove.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RectangleSelector._onmove.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RectangleSelector._onmove', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onmove', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onmove(...)' code ##################

        unicode_167646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2172, 8), 'unicode', u'on motion notify event if box/line is wanted')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2174)
        self_167647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 11), 'self')
        # Obtaining the member 'active_handle' of a type (line 2174)
        active_handle_167648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2174, 11), self_167647, 'active_handle')
        
        
        # Getting the type of 'self' (line 2174)
        self_167649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 38), 'self')
        # Obtaining the member 'active_handle' of a type (line 2174)
        active_handle_167650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2174, 38), self_167649, 'active_handle')
        unicode_167651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2174, 60), 'unicode', u'C')
        # Applying the binary operator '==' (line 2174)
        result_eq_167652 = python_operator(stypy.reporting.localization.Localization(__file__, 2174, 38), '==', active_handle_167650, unicode_167651)
        
        # Applying the 'not' unary operator (line 2174)
        result_not__167653 = python_operator(stypy.reporting.localization.Localization(__file__, 2174, 34), 'not', result_eq_167652)
        
        # Applying the binary operator 'and' (line 2174)
        result_and_keyword_167654 = python_operator(stypy.reporting.localization.Localization(__file__, 2174, 11), 'and', active_handle_167648, result_not__167653)
        
        # Testing the type of an if condition (line 2174)
        if_condition_167655 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2174, 8), result_and_keyword_167654)
        # Assigning a type to the variable 'if_condition_167655' (line 2174)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2174, 8), 'if_condition_167655', if_condition_167655)
        # SSA begins for if statement (line 2174)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 2175):
        
        # Assigning a Subscript to a Name (line 2175):
        
        # Obtaining the type of the subscript
        int_167656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2175, 12), 'int')
        # Getting the type of 'self' (line 2175)
        self_167657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 29), 'self')
        # Obtaining the member '_extents_on_press' of a type (line 2175)
        _extents_on_press_167658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2175, 29), self_167657, '_extents_on_press')
        # Obtaining the member '__getitem__' of a type (line 2175)
        getitem___167659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2175, 12), _extents_on_press_167658, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2175)
        subscript_call_result_167660 = invoke(stypy.reporting.localization.Localization(__file__, 2175, 12), getitem___167659, int_167656)
        
        # Assigning a type to the variable 'tuple_var_assignment_162340' (line 2175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2175, 12), 'tuple_var_assignment_162340', subscript_call_result_167660)
        
        # Assigning a Subscript to a Name (line 2175):
        
        # Obtaining the type of the subscript
        int_167661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2175, 12), 'int')
        # Getting the type of 'self' (line 2175)
        self_167662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 29), 'self')
        # Obtaining the member '_extents_on_press' of a type (line 2175)
        _extents_on_press_167663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2175, 29), self_167662, '_extents_on_press')
        # Obtaining the member '__getitem__' of a type (line 2175)
        getitem___167664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2175, 12), _extents_on_press_167663, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2175)
        subscript_call_result_167665 = invoke(stypy.reporting.localization.Localization(__file__, 2175, 12), getitem___167664, int_167661)
        
        # Assigning a type to the variable 'tuple_var_assignment_162341' (line 2175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2175, 12), 'tuple_var_assignment_162341', subscript_call_result_167665)
        
        # Assigning a Subscript to a Name (line 2175):
        
        # Obtaining the type of the subscript
        int_167666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2175, 12), 'int')
        # Getting the type of 'self' (line 2175)
        self_167667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 29), 'self')
        # Obtaining the member '_extents_on_press' of a type (line 2175)
        _extents_on_press_167668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2175, 29), self_167667, '_extents_on_press')
        # Obtaining the member '__getitem__' of a type (line 2175)
        getitem___167669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2175, 12), _extents_on_press_167668, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2175)
        subscript_call_result_167670 = invoke(stypy.reporting.localization.Localization(__file__, 2175, 12), getitem___167669, int_167666)
        
        # Assigning a type to the variable 'tuple_var_assignment_162342' (line 2175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2175, 12), 'tuple_var_assignment_162342', subscript_call_result_167670)
        
        # Assigning a Subscript to a Name (line 2175):
        
        # Obtaining the type of the subscript
        int_167671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2175, 12), 'int')
        # Getting the type of 'self' (line 2175)
        self_167672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 29), 'self')
        # Obtaining the member '_extents_on_press' of a type (line 2175)
        _extents_on_press_167673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2175, 29), self_167672, '_extents_on_press')
        # Obtaining the member '__getitem__' of a type (line 2175)
        getitem___167674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2175, 12), _extents_on_press_167673, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2175)
        subscript_call_result_167675 = invoke(stypy.reporting.localization.Localization(__file__, 2175, 12), getitem___167674, int_167671)
        
        # Assigning a type to the variable 'tuple_var_assignment_162343' (line 2175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2175, 12), 'tuple_var_assignment_162343', subscript_call_result_167675)
        
        # Assigning a Name to a Name (line 2175):
        # Getting the type of 'tuple_var_assignment_162340' (line 2175)
        tuple_var_assignment_162340_167676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 12), 'tuple_var_assignment_162340')
        # Assigning a type to the variable 'x1' (line 2175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2175, 12), 'x1', tuple_var_assignment_162340_167676)
        
        # Assigning a Name to a Name (line 2175):
        # Getting the type of 'tuple_var_assignment_162341' (line 2175)
        tuple_var_assignment_162341_167677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 12), 'tuple_var_assignment_162341')
        # Assigning a type to the variable 'x2' (line 2175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2175, 16), 'x2', tuple_var_assignment_162341_167677)
        
        # Assigning a Name to a Name (line 2175):
        # Getting the type of 'tuple_var_assignment_162342' (line 2175)
        tuple_var_assignment_162342_167678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 12), 'tuple_var_assignment_162342')
        # Assigning a type to the variable 'y1' (line 2175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2175, 20), 'y1', tuple_var_assignment_162342_167678)
        
        # Assigning a Name to a Name (line 2175):
        # Getting the type of 'tuple_var_assignment_162343' (line 2175)
        tuple_var_assignment_162343_167679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 12), 'tuple_var_assignment_162343')
        # Assigning a type to the variable 'y2' (line 2175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2175, 24), 'y2', tuple_var_assignment_162343_167679)
        
        
        # Getting the type of 'self' (line 2176)
        self_167680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 15), 'self')
        # Obtaining the member 'active_handle' of a type (line 2176)
        active_handle_167681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2176, 15), self_167680, 'active_handle')
        
        # Obtaining an instance of the builtin type 'list' (line 2176)
        list_167682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2176, 37), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2176)
        # Adding element type (line 2176)
        unicode_167683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2176, 38), 'unicode', u'E')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 37), list_167682, unicode_167683)
        # Adding element type (line 2176)
        unicode_167684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2176, 43), 'unicode', u'W')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 37), list_167682, unicode_167684)
        
        # Getting the type of 'self' (line 2176)
        self_167685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 50), 'self')
        # Obtaining the member '_corner_order' of a type (line 2176)
        _corner_order_167686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2176, 50), self_167685, '_corner_order')
        # Applying the binary operator '+' (line 2176)
        result_add_167687 = python_operator(stypy.reporting.localization.Localization(__file__, 2176, 37), '+', list_167682, _corner_order_167686)
        
        # Applying the binary operator 'in' (line 2176)
        result_contains_167688 = python_operator(stypy.reporting.localization.Localization(__file__, 2176, 15), 'in', active_handle_167681, result_add_167687)
        
        # Testing the type of an if condition (line 2176)
        if_condition_167689 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2176, 12), result_contains_167688)
        # Assigning a type to the variable 'if_condition_167689' (line 2176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2176, 12), 'if_condition_167689', if_condition_167689)
        # SSA begins for if statement (line 2176)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 2177):
        
        # Assigning a Attribute to a Name (line 2177):
        # Getting the type of 'event' (line 2177)
        event_167690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 21), 'event')
        # Obtaining the member 'xdata' of a type (line 2177)
        xdata_167691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2177, 21), event_167690, 'xdata')
        # Assigning a type to the variable 'x2' (line 2177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2177, 16), 'x2', xdata_167691)
        # SSA join for if statement (line 2176)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 2178)
        self_167692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 15), 'self')
        # Obtaining the member 'active_handle' of a type (line 2178)
        active_handle_167693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2178, 15), self_167692, 'active_handle')
        
        # Obtaining an instance of the builtin type 'list' (line 2178)
        list_167694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2178, 37), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2178)
        # Adding element type (line 2178)
        unicode_167695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2178, 38), 'unicode', u'N')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2178, 37), list_167694, unicode_167695)
        # Adding element type (line 2178)
        unicode_167696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2178, 43), 'unicode', u'S')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2178, 37), list_167694, unicode_167696)
        
        # Getting the type of 'self' (line 2178)
        self_167697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 50), 'self')
        # Obtaining the member '_corner_order' of a type (line 2178)
        _corner_order_167698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2178, 50), self_167697, '_corner_order')
        # Applying the binary operator '+' (line 2178)
        result_add_167699 = python_operator(stypy.reporting.localization.Localization(__file__, 2178, 37), '+', list_167694, _corner_order_167698)
        
        # Applying the binary operator 'in' (line 2178)
        result_contains_167700 = python_operator(stypy.reporting.localization.Localization(__file__, 2178, 15), 'in', active_handle_167693, result_add_167699)
        
        # Testing the type of an if condition (line 2178)
        if_condition_167701 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2178, 12), result_contains_167700)
        # Assigning a type to the variable 'if_condition_167701' (line 2178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2178, 12), 'if_condition_167701', if_condition_167701)
        # SSA begins for if statement (line 2178)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 2179):
        
        # Assigning a Attribute to a Name (line 2179):
        # Getting the type of 'event' (line 2179)
        event_167702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 21), 'event')
        # Obtaining the member 'ydata' of a type (line 2179)
        ydata_167703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2179, 21), event_167702, 'ydata')
        # Assigning a type to the variable 'y2' (line 2179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2179, 16), 'y2', ydata_167703)
        # SSA join for if statement (line 2178)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2174)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        
        unicode_167704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2182, 15), 'unicode', u'move')
        # Getting the type of 'self' (line 2182)
        self_167705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 25), 'self')
        # Obtaining the member 'state' of a type (line 2182)
        state_167706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2182, 25), self_167705, 'state')
        # Applying the binary operator 'in' (line 2182)
        result_contains_167707 = python_operator(stypy.reporting.localization.Localization(__file__, 2182, 15), 'in', unicode_167704, state_167706)
        
        
        # Getting the type of 'self' (line 2182)
        self_167708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 39), 'self')
        # Obtaining the member 'active_handle' of a type (line 2182)
        active_handle_167709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2182, 39), self_167708, 'active_handle')
        unicode_167710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2182, 61), 'unicode', u'C')
        # Applying the binary operator '==' (line 2182)
        result_eq_167711 = python_operator(stypy.reporting.localization.Localization(__file__, 2182, 39), '==', active_handle_167709, unicode_167710)
        
        # Applying the binary operator 'or' (line 2182)
        result_or_keyword_167712 = python_operator(stypy.reporting.localization.Localization(__file__, 2182, 15), 'or', result_contains_167707, result_eq_167711)
        
        
        # Getting the type of 'self' (line 2183)
        self_167713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 18), 'self')
        # Obtaining the member '_extents_on_press' of a type (line 2183)
        _extents_on_press_167714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2183, 18), self_167713, '_extents_on_press')
        # Getting the type of 'None' (line 2183)
        None_167715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 48), 'None')
        # Applying the binary operator 'isnot' (line 2183)
        result_is_not_167716 = python_operator(stypy.reporting.localization.Localization(__file__, 2183, 18), 'isnot', _extents_on_press_167714, None_167715)
        
        # Applying the binary operator 'and' (line 2182)
        result_and_keyword_167717 = python_operator(stypy.reporting.localization.Localization(__file__, 2182, 14), 'and', result_or_keyword_167712, result_is_not_167716)
        
        # Testing the type of an if condition (line 2182)
        if_condition_167718 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2182, 13), result_and_keyword_167717)
        # Assigning a type to the variable 'if_condition_167718' (line 2182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2182, 13), 'if_condition_167718', if_condition_167718)
        # SSA begins for if statement (line 2182)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 2184):
        
        # Assigning a Subscript to a Name (line 2184):
        
        # Obtaining the type of the subscript
        int_167719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2184, 12), 'int')
        # Getting the type of 'self' (line 2184)
        self_167720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 29), 'self')
        # Obtaining the member '_extents_on_press' of a type (line 2184)
        _extents_on_press_167721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 29), self_167720, '_extents_on_press')
        # Obtaining the member '__getitem__' of a type (line 2184)
        getitem___167722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 12), _extents_on_press_167721, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2184)
        subscript_call_result_167723 = invoke(stypy.reporting.localization.Localization(__file__, 2184, 12), getitem___167722, int_167719)
        
        # Assigning a type to the variable 'tuple_var_assignment_162344' (line 2184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'tuple_var_assignment_162344', subscript_call_result_167723)
        
        # Assigning a Subscript to a Name (line 2184):
        
        # Obtaining the type of the subscript
        int_167724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2184, 12), 'int')
        # Getting the type of 'self' (line 2184)
        self_167725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 29), 'self')
        # Obtaining the member '_extents_on_press' of a type (line 2184)
        _extents_on_press_167726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 29), self_167725, '_extents_on_press')
        # Obtaining the member '__getitem__' of a type (line 2184)
        getitem___167727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 12), _extents_on_press_167726, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2184)
        subscript_call_result_167728 = invoke(stypy.reporting.localization.Localization(__file__, 2184, 12), getitem___167727, int_167724)
        
        # Assigning a type to the variable 'tuple_var_assignment_162345' (line 2184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'tuple_var_assignment_162345', subscript_call_result_167728)
        
        # Assigning a Subscript to a Name (line 2184):
        
        # Obtaining the type of the subscript
        int_167729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2184, 12), 'int')
        # Getting the type of 'self' (line 2184)
        self_167730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 29), 'self')
        # Obtaining the member '_extents_on_press' of a type (line 2184)
        _extents_on_press_167731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 29), self_167730, '_extents_on_press')
        # Obtaining the member '__getitem__' of a type (line 2184)
        getitem___167732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 12), _extents_on_press_167731, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2184)
        subscript_call_result_167733 = invoke(stypy.reporting.localization.Localization(__file__, 2184, 12), getitem___167732, int_167729)
        
        # Assigning a type to the variable 'tuple_var_assignment_162346' (line 2184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'tuple_var_assignment_162346', subscript_call_result_167733)
        
        # Assigning a Subscript to a Name (line 2184):
        
        # Obtaining the type of the subscript
        int_167734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2184, 12), 'int')
        # Getting the type of 'self' (line 2184)
        self_167735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 29), 'self')
        # Obtaining the member '_extents_on_press' of a type (line 2184)
        _extents_on_press_167736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 29), self_167735, '_extents_on_press')
        # Obtaining the member '__getitem__' of a type (line 2184)
        getitem___167737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 12), _extents_on_press_167736, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2184)
        subscript_call_result_167738 = invoke(stypy.reporting.localization.Localization(__file__, 2184, 12), getitem___167737, int_167734)
        
        # Assigning a type to the variable 'tuple_var_assignment_162347' (line 2184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'tuple_var_assignment_162347', subscript_call_result_167738)
        
        # Assigning a Name to a Name (line 2184):
        # Getting the type of 'tuple_var_assignment_162344' (line 2184)
        tuple_var_assignment_162344_167739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'tuple_var_assignment_162344')
        # Assigning a type to the variable 'x1' (line 2184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'x1', tuple_var_assignment_162344_167739)
        
        # Assigning a Name to a Name (line 2184):
        # Getting the type of 'tuple_var_assignment_162345' (line 2184)
        tuple_var_assignment_162345_167740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'tuple_var_assignment_162345')
        # Assigning a type to the variable 'x2' (line 2184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 16), 'x2', tuple_var_assignment_162345_167740)
        
        # Assigning a Name to a Name (line 2184):
        # Getting the type of 'tuple_var_assignment_162346' (line 2184)
        tuple_var_assignment_162346_167741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'tuple_var_assignment_162346')
        # Assigning a type to the variable 'y1' (line 2184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 20), 'y1', tuple_var_assignment_162346_167741)
        
        # Assigning a Name to a Name (line 2184):
        # Getting the type of 'tuple_var_assignment_162347' (line 2184)
        tuple_var_assignment_162347_167742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 12), 'tuple_var_assignment_162347')
        # Assigning a type to the variable 'y2' (line 2184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 24), 'y2', tuple_var_assignment_162347_167742)
        
        # Assigning a BinOp to a Name (line 2185):
        
        # Assigning a BinOp to a Name (line 2185):
        # Getting the type of 'event' (line 2185)
        event_167743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 17), 'event')
        # Obtaining the member 'xdata' of a type (line 2185)
        xdata_167744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2185, 17), event_167743, 'xdata')
        # Getting the type of 'self' (line 2185)
        self_167745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 31), 'self')
        # Obtaining the member 'eventpress' of a type (line 2185)
        eventpress_167746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2185, 31), self_167745, 'eventpress')
        # Obtaining the member 'xdata' of a type (line 2185)
        xdata_167747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2185, 31), eventpress_167746, 'xdata')
        # Applying the binary operator '-' (line 2185)
        result_sub_167748 = python_operator(stypy.reporting.localization.Localization(__file__, 2185, 17), '-', xdata_167744, xdata_167747)
        
        # Assigning a type to the variable 'dx' (line 2185)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2185, 12), 'dx', result_sub_167748)
        
        # Assigning a BinOp to a Name (line 2186):
        
        # Assigning a BinOp to a Name (line 2186):
        # Getting the type of 'event' (line 2186)
        event_167749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 17), 'event')
        # Obtaining the member 'ydata' of a type (line 2186)
        ydata_167750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 17), event_167749, 'ydata')
        # Getting the type of 'self' (line 2186)
        self_167751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 31), 'self')
        # Obtaining the member 'eventpress' of a type (line 2186)
        eventpress_167752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 31), self_167751, 'eventpress')
        # Obtaining the member 'ydata' of a type (line 2186)
        ydata_167753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 31), eventpress_167752, 'ydata')
        # Applying the binary operator '-' (line 2186)
        result_sub_167754 = python_operator(stypy.reporting.localization.Localization(__file__, 2186, 17), '-', ydata_167750, ydata_167753)
        
        # Assigning a type to the variable 'dy' (line 2186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2186, 12), 'dy', result_sub_167754)
        
        # Getting the type of 'x1' (line 2187)
        x1_167755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 12), 'x1')
        # Getting the type of 'dx' (line 2187)
        dx_167756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 18), 'dx')
        # Applying the binary operator '+=' (line 2187)
        result_iadd_167757 = python_operator(stypy.reporting.localization.Localization(__file__, 2187, 12), '+=', x1_167755, dx_167756)
        # Assigning a type to the variable 'x1' (line 2187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2187, 12), 'x1', result_iadd_167757)
        
        
        # Getting the type of 'x2' (line 2188)
        x2_167758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 12), 'x2')
        # Getting the type of 'dx' (line 2188)
        dx_167759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 18), 'dx')
        # Applying the binary operator '+=' (line 2188)
        result_iadd_167760 = python_operator(stypy.reporting.localization.Localization(__file__, 2188, 12), '+=', x2_167758, dx_167759)
        # Assigning a type to the variable 'x2' (line 2188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2188, 12), 'x2', result_iadd_167760)
        
        
        # Getting the type of 'y1' (line 2189)
        y1_167761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2189, 12), 'y1')
        # Getting the type of 'dy' (line 2189)
        dy_167762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2189, 18), 'dy')
        # Applying the binary operator '+=' (line 2189)
        result_iadd_167763 = python_operator(stypy.reporting.localization.Localization(__file__, 2189, 12), '+=', y1_167761, dy_167762)
        # Assigning a type to the variable 'y1' (line 2189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2189, 12), 'y1', result_iadd_167763)
        
        
        # Getting the type of 'y2' (line 2190)
        y2_167764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2190, 12), 'y2')
        # Getting the type of 'dy' (line 2190)
        dy_167765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2190, 18), 'dy')
        # Applying the binary operator '+=' (line 2190)
        result_iadd_167766 = python_operator(stypy.reporting.localization.Localization(__file__, 2190, 12), '+=', y2_167764, dy_167765)
        # Assigning a type to the variable 'y2' (line 2190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2190, 12), 'y2', result_iadd_167766)
        
        # SSA branch for the else part of an if statement (line 2182)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a List to a Name (line 2194):
        
        # Assigning a List to a Name (line 2194):
        
        # Obtaining an instance of the builtin type 'list' (line 2194)
        list_167767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2194, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2194)
        # Adding element type (line 2194)
        # Getting the type of 'self' (line 2194)
        self_167768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 22), 'self')
        # Obtaining the member 'eventpress' of a type (line 2194)
        eventpress_167769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2194, 22), self_167768, 'eventpress')
        # Obtaining the member 'xdata' of a type (line 2194)
        xdata_167770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2194, 22), eventpress_167769, 'xdata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2194, 21), list_167767, xdata_167770)
        # Adding element type (line 2194)
        # Getting the type of 'self' (line 2194)
        self_167771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 45), 'self')
        # Obtaining the member 'eventpress' of a type (line 2194)
        eventpress_167772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2194, 45), self_167771, 'eventpress')
        # Obtaining the member 'ydata' of a type (line 2194)
        ydata_167773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2194, 45), eventpress_167772, 'ydata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2194, 21), list_167767, ydata_167773)
        
        # Assigning a type to the variable 'center' (line 2194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2194, 12), 'center', list_167767)
        
        # Assigning a List to a Name (line 2195):
        
        # Assigning a List to a Name (line 2195):
        
        # Obtaining an instance of the builtin type 'list' (line 2195)
        list_167774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2195, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2195)
        # Adding element type (line 2195)
        # Getting the type of 'self' (line 2195)
        self_167775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 26), 'self')
        # Obtaining the member 'eventpress' of a type (line 2195)
        eventpress_167776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2195, 26), self_167775, 'eventpress')
        # Obtaining the member 'x' of a type (line 2195)
        x_167777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2195, 26), eventpress_167776, 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2195, 25), list_167774, x_167777)
        # Adding element type (line 2195)
        # Getting the type of 'self' (line 2195)
        self_167778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 45), 'self')
        # Obtaining the member 'eventpress' of a type (line 2195)
        eventpress_167779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2195, 45), self_167778, 'eventpress')
        # Obtaining the member 'y' of a type (line 2195)
        y_167780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2195, 45), eventpress_167779, 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2195, 25), list_167774, y_167780)
        
        # Assigning a type to the variable 'center_pix' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 12), 'center_pix', list_167774)
        
        # Assigning a BinOp to a Name (line 2196):
        
        # Assigning a BinOp to a Name (line 2196):
        # Getting the type of 'event' (line 2196)
        event_167781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 18), 'event')
        # Obtaining the member 'xdata' of a type (line 2196)
        xdata_167782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2196, 18), event_167781, 'xdata')
        
        # Obtaining the type of the subscript
        int_167783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2196, 39), 'int')
        # Getting the type of 'center' (line 2196)
        center_167784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 32), 'center')
        # Obtaining the member '__getitem__' of a type (line 2196)
        getitem___167785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2196, 32), center_167784, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2196)
        subscript_call_result_167786 = invoke(stypy.reporting.localization.Localization(__file__, 2196, 32), getitem___167785, int_167783)
        
        # Applying the binary operator '-' (line 2196)
        result_sub_167787 = python_operator(stypy.reporting.localization.Localization(__file__, 2196, 18), '-', xdata_167782, subscript_call_result_167786)
        
        float_167788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2196, 45), 'float')
        # Applying the binary operator 'div' (line 2196)
        result_div_167789 = python_operator(stypy.reporting.localization.Localization(__file__, 2196, 17), 'div', result_sub_167787, float_167788)
        
        # Assigning a type to the variable 'dx' (line 2196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2196, 12), 'dx', result_div_167789)
        
        # Assigning a BinOp to a Name (line 2197):
        
        # Assigning a BinOp to a Name (line 2197):
        # Getting the type of 'event' (line 2197)
        event_167790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 18), 'event')
        # Obtaining the member 'ydata' of a type (line 2197)
        ydata_167791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 18), event_167790, 'ydata')
        
        # Obtaining the type of the subscript
        int_167792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 39), 'int')
        # Getting the type of 'center' (line 2197)
        center_167793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 32), 'center')
        # Obtaining the member '__getitem__' of a type (line 2197)
        getitem___167794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 32), center_167793, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2197)
        subscript_call_result_167795 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 32), getitem___167794, int_167792)
        
        # Applying the binary operator '-' (line 2197)
        result_sub_167796 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 18), '-', ydata_167791, subscript_call_result_167795)
        
        float_167797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 45), 'float')
        # Applying the binary operator 'div' (line 2197)
        result_div_167798 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 17), 'div', result_sub_167796, float_167797)
        
        # Assigning a type to the variable 'dy' (line 2197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 12), 'dy', result_div_167798)
        
        
        unicode_167799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2200, 15), 'unicode', u'square')
        # Getting the type of 'self' (line 2200)
        self_167800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 27), 'self')
        # Obtaining the member 'state' of a type (line 2200)
        state_167801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2200, 27), self_167800, 'state')
        # Applying the binary operator 'in' (line 2200)
        result_contains_167802 = python_operator(stypy.reporting.localization.Localization(__file__, 2200, 15), 'in', unicode_167799, state_167801)
        
        # Testing the type of an if condition (line 2200)
        if_condition_167803 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2200, 12), result_contains_167802)
        # Assigning a type to the variable 'if_condition_167803' (line 2200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2200, 12), 'if_condition_167803', if_condition_167803)
        # SSA begins for if statement (line 2200)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2201):
        
        # Assigning a Call to a Name (line 2201):
        
        # Call to abs(...): (line 2201)
        # Processing the call arguments (line 2201)
        # Getting the type of 'event' (line 2201)
        event_167805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 29), 'event', False)
        # Obtaining the member 'x' of a type (line 2201)
        x_167806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2201, 29), event_167805, 'x')
        
        # Obtaining the type of the subscript
        int_167807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2201, 50), 'int')
        # Getting the type of 'center_pix' (line 2201)
        center_pix_167808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 39), 'center_pix', False)
        # Obtaining the member '__getitem__' of a type (line 2201)
        getitem___167809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2201, 39), center_pix_167808, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2201)
        subscript_call_result_167810 = invoke(stypy.reporting.localization.Localization(__file__, 2201, 39), getitem___167809, int_167807)
        
        # Applying the binary operator '-' (line 2201)
        result_sub_167811 = python_operator(stypy.reporting.localization.Localization(__file__, 2201, 29), '-', x_167806, subscript_call_result_167810)
        
        # Processing the call keyword arguments (line 2201)
        kwargs_167812 = {}
        # Getting the type of 'abs' (line 2201)
        abs_167804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 25), 'abs', False)
        # Calling abs(args, kwargs) (line 2201)
        abs_call_result_167813 = invoke(stypy.reporting.localization.Localization(__file__, 2201, 25), abs_167804, *[result_sub_167811], **kwargs_167812)
        
        # Assigning a type to the variable 'dx_pix' (line 2201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2201, 16), 'dx_pix', abs_call_result_167813)
        
        # Assigning a Call to a Name (line 2202):
        
        # Assigning a Call to a Name (line 2202):
        
        # Call to abs(...): (line 2202)
        # Processing the call arguments (line 2202)
        # Getting the type of 'event' (line 2202)
        event_167815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 29), 'event', False)
        # Obtaining the member 'y' of a type (line 2202)
        y_167816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2202, 29), event_167815, 'y')
        
        # Obtaining the type of the subscript
        int_167817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2202, 50), 'int')
        # Getting the type of 'center_pix' (line 2202)
        center_pix_167818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 39), 'center_pix', False)
        # Obtaining the member '__getitem__' of a type (line 2202)
        getitem___167819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2202, 39), center_pix_167818, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2202)
        subscript_call_result_167820 = invoke(stypy.reporting.localization.Localization(__file__, 2202, 39), getitem___167819, int_167817)
        
        # Applying the binary operator '-' (line 2202)
        result_sub_167821 = python_operator(stypy.reporting.localization.Localization(__file__, 2202, 29), '-', y_167816, subscript_call_result_167820)
        
        # Processing the call keyword arguments (line 2202)
        kwargs_167822 = {}
        # Getting the type of 'abs' (line 2202)
        abs_167814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 25), 'abs', False)
        # Calling abs(args, kwargs) (line 2202)
        abs_call_result_167823 = invoke(stypy.reporting.localization.Localization(__file__, 2202, 25), abs_167814, *[result_sub_167821], **kwargs_167822)
        
        # Assigning a type to the variable 'dy_pix' (line 2202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2202, 16), 'dy_pix', abs_call_result_167823)
        
        
        # Getting the type of 'dx_pix' (line 2203)
        dx_pix_167824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 23), 'dx_pix')
        # Applying the 'not' unary operator (line 2203)
        result_not__167825 = python_operator(stypy.reporting.localization.Localization(__file__, 2203, 19), 'not', dx_pix_167824)
        
        # Testing the type of an if condition (line 2203)
        if_condition_167826 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2203, 16), result_not__167825)
        # Assigning a type to the variable 'if_condition_167826' (line 2203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2203, 16), 'if_condition_167826', if_condition_167826)
        # SSA begins for if statement (line 2203)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 2204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2204, 20), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 2203)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2205):
        
        # Assigning a Call to a Name (line 2205):
        
        # Call to max(...): (line 2205)
        # Processing the call arguments (line 2205)
        
        # Call to abs(...): (line 2205)
        # Processing the call arguments (line 2205)
        # Getting the type of 'dx_pix' (line 2205)
        dx_pix_167829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 31), 'dx_pix', False)
        # Processing the call keyword arguments (line 2205)
        kwargs_167830 = {}
        # Getting the type of 'abs' (line 2205)
        abs_167828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 27), 'abs', False)
        # Calling abs(args, kwargs) (line 2205)
        abs_call_result_167831 = invoke(stypy.reporting.localization.Localization(__file__, 2205, 27), abs_167828, *[dx_pix_167829], **kwargs_167830)
        
        
        # Call to abs(...): (line 2205)
        # Processing the call arguments (line 2205)
        # Getting the type of 'dy_pix' (line 2205)
        dy_pix_167833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 44), 'dy_pix', False)
        # Processing the call keyword arguments (line 2205)
        kwargs_167834 = {}
        # Getting the type of 'abs' (line 2205)
        abs_167832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 40), 'abs', False)
        # Calling abs(args, kwargs) (line 2205)
        abs_call_result_167835 = invoke(stypy.reporting.localization.Localization(__file__, 2205, 40), abs_167832, *[dy_pix_167833], **kwargs_167834)
        
        # Processing the call keyword arguments (line 2205)
        kwargs_167836 = {}
        # Getting the type of 'max' (line 2205)
        max_167827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 23), 'max', False)
        # Calling max(args, kwargs) (line 2205)
        max_call_result_167837 = invoke(stypy.reporting.localization.Localization(__file__, 2205, 23), max_167827, *[abs_call_result_167831, abs_call_result_167835], **kwargs_167836)
        
        # Assigning a type to the variable 'maxd' (line 2205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2205, 16), 'maxd', max_call_result_167837)
        
        
        
        # Call to abs(...): (line 2206)
        # Processing the call arguments (line 2206)
        # Getting the type of 'dx_pix' (line 2206)
        dx_pix_167839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 23), 'dx_pix', False)
        # Processing the call keyword arguments (line 2206)
        kwargs_167840 = {}
        # Getting the type of 'abs' (line 2206)
        abs_167838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 19), 'abs', False)
        # Calling abs(args, kwargs) (line 2206)
        abs_call_result_167841 = invoke(stypy.reporting.localization.Localization(__file__, 2206, 19), abs_167838, *[dx_pix_167839], **kwargs_167840)
        
        # Getting the type of 'maxd' (line 2206)
        maxd_167842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 33), 'maxd')
        # Applying the binary operator '<' (line 2206)
        result_lt_167843 = python_operator(stypy.reporting.localization.Localization(__file__, 2206, 19), '<', abs_call_result_167841, maxd_167842)
        
        # Testing the type of an if condition (line 2206)
        if_condition_167844 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2206, 16), result_lt_167843)
        # Assigning a type to the variable 'if_condition_167844' (line 2206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2206, 16), 'if_condition_167844', if_condition_167844)
        # SSA begins for if statement (line 2206)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'dx' (line 2207)
        dx_167845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 20), 'dx')
        # Getting the type of 'maxd' (line 2207)
        maxd_167846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 26), 'maxd')
        
        # Call to abs(...): (line 2207)
        # Processing the call arguments (line 2207)
        # Getting the type of 'dx_pix' (line 2207)
        dx_pix_167848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 38), 'dx_pix', False)
        # Processing the call keyword arguments (line 2207)
        kwargs_167849 = {}
        # Getting the type of 'abs' (line 2207)
        abs_167847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 34), 'abs', False)
        # Calling abs(args, kwargs) (line 2207)
        abs_call_result_167850 = invoke(stypy.reporting.localization.Localization(__file__, 2207, 34), abs_167847, *[dx_pix_167848], **kwargs_167849)
        
        float_167851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2207, 48), 'float')
        # Applying the binary operator '+' (line 2207)
        result_add_167852 = python_operator(stypy.reporting.localization.Localization(__file__, 2207, 34), '+', abs_call_result_167850, float_167851)
        
        # Applying the binary operator 'div' (line 2207)
        result_div_167853 = python_operator(stypy.reporting.localization.Localization(__file__, 2207, 26), 'div', maxd_167846, result_add_167852)
        
        # Applying the binary operator '*=' (line 2207)
        result_imul_167854 = python_operator(stypy.reporting.localization.Localization(__file__, 2207, 20), '*=', dx_167845, result_div_167853)
        # Assigning a type to the variable 'dx' (line 2207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2207, 20), 'dx', result_imul_167854)
        
        # SSA join for if statement (line 2206)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to abs(...): (line 2208)
        # Processing the call arguments (line 2208)
        # Getting the type of 'dy_pix' (line 2208)
        dy_pix_167856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 23), 'dy_pix', False)
        # Processing the call keyword arguments (line 2208)
        kwargs_167857 = {}
        # Getting the type of 'abs' (line 2208)
        abs_167855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 19), 'abs', False)
        # Calling abs(args, kwargs) (line 2208)
        abs_call_result_167858 = invoke(stypy.reporting.localization.Localization(__file__, 2208, 19), abs_167855, *[dy_pix_167856], **kwargs_167857)
        
        # Getting the type of 'maxd' (line 2208)
        maxd_167859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 33), 'maxd')
        # Applying the binary operator '<' (line 2208)
        result_lt_167860 = python_operator(stypy.reporting.localization.Localization(__file__, 2208, 19), '<', abs_call_result_167858, maxd_167859)
        
        # Testing the type of an if condition (line 2208)
        if_condition_167861 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2208, 16), result_lt_167860)
        # Assigning a type to the variable 'if_condition_167861' (line 2208)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2208, 16), 'if_condition_167861', if_condition_167861)
        # SSA begins for if statement (line 2208)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'dy' (line 2209)
        dy_167862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 20), 'dy')
        # Getting the type of 'maxd' (line 2209)
        maxd_167863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 26), 'maxd')
        
        # Call to abs(...): (line 2209)
        # Processing the call arguments (line 2209)
        # Getting the type of 'dy_pix' (line 2209)
        dy_pix_167865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 38), 'dy_pix', False)
        # Processing the call keyword arguments (line 2209)
        kwargs_167866 = {}
        # Getting the type of 'abs' (line 2209)
        abs_167864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 34), 'abs', False)
        # Calling abs(args, kwargs) (line 2209)
        abs_call_result_167867 = invoke(stypy.reporting.localization.Localization(__file__, 2209, 34), abs_167864, *[dy_pix_167865], **kwargs_167866)
        
        float_167868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2209, 48), 'float')
        # Applying the binary operator '+' (line 2209)
        result_add_167869 = python_operator(stypy.reporting.localization.Localization(__file__, 2209, 34), '+', abs_call_result_167867, float_167868)
        
        # Applying the binary operator 'div' (line 2209)
        result_div_167870 = python_operator(stypy.reporting.localization.Localization(__file__, 2209, 26), 'div', maxd_167863, result_add_167869)
        
        # Applying the binary operator '*=' (line 2209)
        result_imul_167871 = python_operator(stypy.reporting.localization.Localization(__file__, 2209, 20), '*=', dy_167862, result_div_167870)
        # Assigning a type to the variable 'dy' (line 2209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2209, 20), 'dy', result_imul_167871)
        
        # SSA join for if statement (line 2208)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2200)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_167872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2212, 15), 'unicode', u'center')
        # Getting the type of 'self' (line 2212)
        self_167873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 27), 'self')
        # Obtaining the member 'state' of a type (line 2212)
        state_167874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2212, 27), self_167873, 'state')
        # Applying the binary operator 'in' (line 2212)
        result_contains_167875 = python_operator(stypy.reporting.localization.Localization(__file__, 2212, 15), 'in', unicode_167872, state_167874)
        
        # Testing the type of an if condition (line 2212)
        if_condition_167876 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2212, 12), result_contains_167875)
        # Assigning a type to the variable 'if_condition_167876' (line 2212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2212, 12), 'if_condition_167876', if_condition_167876)
        # SSA begins for if statement (line 2212)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'dx' (line 2213)
        dx_167877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 16), 'dx')
        int_167878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2213, 22), 'int')
        # Applying the binary operator '*=' (line 2213)
        result_imul_167879 = python_operator(stypy.reporting.localization.Localization(__file__, 2213, 16), '*=', dx_167877, int_167878)
        # Assigning a type to the variable 'dx' (line 2213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2213, 16), 'dx', result_imul_167879)
        
        
        # Getting the type of 'dy' (line 2214)
        dy_167880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 16), 'dy')
        int_167881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2214, 22), 'int')
        # Applying the binary operator '*=' (line 2214)
        result_imul_167882 = python_operator(stypy.reporting.localization.Localization(__file__, 2214, 16), '*=', dy_167880, int_167881)
        # Assigning a type to the variable 'dy' (line 2214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2214, 16), 'dy', result_imul_167882)
        
        # SSA branch for the else part of an if statement (line 2212)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'center' (line 2218)
        center_167883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 16), 'center')
        
        # Obtaining the type of the subscript
        int_167884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2218, 23), 'int')
        # Getting the type of 'center' (line 2218)
        center_167885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 16), 'center')
        # Obtaining the member '__getitem__' of a type (line 2218)
        getitem___167886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2218, 16), center_167885, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2218)
        subscript_call_result_167887 = invoke(stypy.reporting.localization.Localization(__file__, 2218, 16), getitem___167886, int_167884)
        
        # Getting the type of 'dx' (line 2218)
        dx_167888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 29), 'dx')
        # Applying the binary operator '+=' (line 2218)
        result_iadd_167889 = python_operator(stypy.reporting.localization.Localization(__file__, 2218, 16), '+=', subscript_call_result_167887, dx_167888)
        # Getting the type of 'center' (line 2218)
        center_167890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 16), 'center')
        int_167891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2218, 23), 'int')
        # Storing an element on a container (line 2218)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2218, 16), center_167890, (int_167891, result_iadd_167889))
        
        
        # Getting the type of 'center' (line 2219)
        center_167892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 16), 'center')
        
        # Obtaining the type of the subscript
        int_167893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2219, 23), 'int')
        # Getting the type of 'center' (line 2219)
        center_167894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 16), 'center')
        # Obtaining the member '__getitem__' of a type (line 2219)
        getitem___167895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2219, 16), center_167894, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2219)
        subscript_call_result_167896 = invoke(stypy.reporting.localization.Localization(__file__, 2219, 16), getitem___167895, int_167893)
        
        # Getting the type of 'dy' (line 2219)
        dy_167897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 29), 'dy')
        # Applying the binary operator '+=' (line 2219)
        result_iadd_167898 = python_operator(stypy.reporting.localization.Localization(__file__, 2219, 16), '+=', subscript_call_result_167896, dy_167897)
        # Getting the type of 'center' (line 2219)
        center_167899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 16), 'center')
        int_167900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2219, 23), 'int')
        # Storing an element on a container (line 2219)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2219, 16), center_167899, (int_167900, result_iadd_167898))
        
        # SSA join for if statement (line 2212)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 2221):
        
        # Assigning a BinOp to a Name (line 2221):
        
        # Obtaining the type of the subscript
        int_167901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2221, 37), 'int')
        # Getting the type of 'center' (line 2221)
        center_167902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 30), 'center')
        # Obtaining the member '__getitem__' of a type (line 2221)
        getitem___167903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2221, 30), center_167902, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2221)
        subscript_call_result_167904 = invoke(stypy.reporting.localization.Localization(__file__, 2221, 30), getitem___167903, int_167901)
        
        # Getting the type of 'dx' (line 2221)
        dx_167905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 42), 'dx')
        # Applying the binary operator '-' (line 2221)
        result_sub_167906 = python_operator(stypy.reporting.localization.Localization(__file__, 2221, 30), '-', subscript_call_result_167904, dx_167905)
        
        # Assigning a type to the variable 'tuple_assignment_162348' (line 2221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2221, 12), 'tuple_assignment_162348', result_sub_167906)
        
        # Assigning a BinOp to a Name (line 2221):
        
        # Obtaining the type of the subscript
        int_167907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2221, 53), 'int')
        # Getting the type of 'center' (line 2221)
        center_167908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 46), 'center')
        # Obtaining the member '__getitem__' of a type (line 2221)
        getitem___167909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2221, 46), center_167908, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2221)
        subscript_call_result_167910 = invoke(stypy.reporting.localization.Localization(__file__, 2221, 46), getitem___167909, int_167907)
        
        # Getting the type of 'dx' (line 2221)
        dx_167911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 58), 'dx')
        # Applying the binary operator '+' (line 2221)
        result_add_167912 = python_operator(stypy.reporting.localization.Localization(__file__, 2221, 46), '+', subscript_call_result_167910, dx_167911)
        
        # Assigning a type to the variable 'tuple_assignment_162349' (line 2221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2221, 12), 'tuple_assignment_162349', result_add_167912)
        
        # Assigning a BinOp to a Name (line 2221):
        
        # Obtaining the type of the subscript
        int_167913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2222, 37), 'int')
        # Getting the type of 'center' (line 2222)
        center_167914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 30), 'center')
        # Obtaining the member '__getitem__' of a type (line 2222)
        getitem___167915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2222, 30), center_167914, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2222)
        subscript_call_result_167916 = invoke(stypy.reporting.localization.Localization(__file__, 2222, 30), getitem___167915, int_167913)
        
        # Getting the type of 'dy' (line 2222)
        dy_167917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 42), 'dy')
        # Applying the binary operator '-' (line 2222)
        result_sub_167918 = python_operator(stypy.reporting.localization.Localization(__file__, 2222, 30), '-', subscript_call_result_167916, dy_167917)
        
        # Assigning a type to the variable 'tuple_assignment_162350' (line 2221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2221, 12), 'tuple_assignment_162350', result_sub_167918)
        
        # Assigning a BinOp to a Name (line 2221):
        
        # Obtaining the type of the subscript
        int_167919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2222, 53), 'int')
        # Getting the type of 'center' (line 2222)
        center_167920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 46), 'center')
        # Obtaining the member '__getitem__' of a type (line 2222)
        getitem___167921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2222, 46), center_167920, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2222)
        subscript_call_result_167922 = invoke(stypy.reporting.localization.Localization(__file__, 2222, 46), getitem___167921, int_167919)
        
        # Getting the type of 'dy' (line 2222)
        dy_167923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 58), 'dy')
        # Applying the binary operator '+' (line 2222)
        result_add_167924 = python_operator(stypy.reporting.localization.Localization(__file__, 2222, 46), '+', subscript_call_result_167922, dy_167923)
        
        # Assigning a type to the variable 'tuple_assignment_162351' (line 2221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2221, 12), 'tuple_assignment_162351', result_add_167924)
        
        # Assigning a Name to a Name (line 2221):
        # Getting the type of 'tuple_assignment_162348' (line 2221)
        tuple_assignment_162348_167925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 12), 'tuple_assignment_162348')
        # Assigning a type to the variable 'x1' (line 2221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2221, 12), 'x1', tuple_assignment_162348_167925)
        
        # Assigning a Name to a Name (line 2221):
        # Getting the type of 'tuple_assignment_162349' (line 2221)
        tuple_assignment_162349_167926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 12), 'tuple_assignment_162349')
        # Assigning a type to the variable 'x2' (line 2221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2221, 16), 'x2', tuple_assignment_162349_167926)
        
        # Assigning a Name to a Name (line 2221):
        # Getting the type of 'tuple_assignment_162350' (line 2221)
        tuple_assignment_162350_167927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 12), 'tuple_assignment_162350')
        # Assigning a type to the variable 'y1' (line 2221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2221, 20), 'y1', tuple_assignment_162350_167927)
        
        # Assigning a Name to a Name (line 2221):
        # Getting the type of 'tuple_assignment_162351' (line 2221)
        tuple_assignment_162351_167928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 12), 'tuple_assignment_162351')
        # Assigning a type to the variable 'y2' (line 2221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2221, 24), 'y2', tuple_assignment_162351_167928)
        # SSA join for if statement (line 2182)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2174)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Attribute (line 2224):
        
        # Assigning a Tuple to a Attribute (line 2224):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2224)
        tuple_167929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2224, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2224)
        # Adding element type (line 2224)
        # Getting the type of 'x1' (line 2224)
        x1_167930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 23), 'x1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2224, 23), tuple_167929, x1_167930)
        # Adding element type (line 2224)
        # Getting the type of 'x2' (line 2224)
        x2_167931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 27), 'x2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2224, 23), tuple_167929, x2_167931)
        # Adding element type (line 2224)
        # Getting the type of 'y1' (line 2224)
        y1_167932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 31), 'y1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2224, 23), tuple_167929, y1_167932)
        # Adding element type (line 2224)
        # Getting the type of 'y2' (line 2224)
        y2_167933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 35), 'y2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2224, 23), tuple_167929, y2_167933)
        
        # Getting the type of 'self' (line 2224)
        self_167934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 8), 'self')
        # Setting the type of the member 'extents' of a type (line 2224)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2224, 8), self_167934, 'extents', tuple_167929)
        
        # ################# End of '_onmove(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onmove' in the type store
        # Getting the type of 'stypy_return_type' (line 2171)
        stypy_return_type_167935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_167935)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onmove'
        return stypy_return_type_167935


    @norecursion
    def _rect_bbox(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_rect_bbox'
        module_type_store = module_type_store.open_function_context('_rect_bbox', 2226, 4, False)
        # Assigning a type to the variable 'self' (line 2227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2227, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RectangleSelector._rect_bbox.__dict__.__setitem__('stypy_localization', localization)
        RectangleSelector._rect_bbox.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RectangleSelector._rect_bbox.__dict__.__setitem__('stypy_type_store', module_type_store)
        RectangleSelector._rect_bbox.__dict__.__setitem__('stypy_function_name', 'RectangleSelector._rect_bbox')
        RectangleSelector._rect_bbox.__dict__.__setitem__('stypy_param_names_list', [])
        RectangleSelector._rect_bbox.__dict__.__setitem__('stypy_varargs_param_name', None)
        RectangleSelector._rect_bbox.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RectangleSelector._rect_bbox.__dict__.__setitem__('stypy_call_defaults', defaults)
        RectangleSelector._rect_bbox.__dict__.__setitem__('stypy_call_varargs', varargs)
        RectangleSelector._rect_bbox.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RectangleSelector._rect_bbox.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RectangleSelector._rect_bbox', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_rect_bbox', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_rect_bbox(...)' code ##################

        
        
        # Getting the type of 'self' (line 2228)
        self_167936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 11), 'self')
        # Obtaining the member 'drawtype' of a type (line 2228)
        drawtype_167937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2228, 11), self_167936, 'drawtype')
        unicode_167938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2228, 28), 'unicode', u'box')
        # Applying the binary operator '==' (line 2228)
        result_eq_167939 = python_operator(stypy.reporting.localization.Localization(__file__, 2228, 11), '==', drawtype_167937, unicode_167938)
        
        # Testing the type of an if condition (line 2228)
        if_condition_167940 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2228, 8), result_eq_167939)
        # Assigning a type to the variable 'if_condition_167940' (line 2228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2228, 8), 'if_condition_167940', if_condition_167940)
        # SSA begins for if statement (line 2228)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2229):
        
        # Assigning a Call to a Name (line 2229):
        
        # Call to get_x(...): (line 2229)
        # Processing the call keyword arguments (line 2229)
        kwargs_167944 = {}
        # Getting the type of 'self' (line 2229)
        self_167941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 17), 'self', False)
        # Obtaining the member 'to_draw' of a type (line 2229)
        to_draw_167942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2229, 17), self_167941, 'to_draw')
        # Obtaining the member 'get_x' of a type (line 2229)
        get_x_167943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2229, 17), to_draw_167942, 'get_x')
        # Calling get_x(args, kwargs) (line 2229)
        get_x_call_result_167945 = invoke(stypy.reporting.localization.Localization(__file__, 2229, 17), get_x_167943, *[], **kwargs_167944)
        
        # Assigning a type to the variable 'x0' (line 2229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2229, 12), 'x0', get_x_call_result_167945)
        
        # Assigning a Call to a Name (line 2230):
        
        # Assigning a Call to a Name (line 2230):
        
        # Call to get_y(...): (line 2230)
        # Processing the call keyword arguments (line 2230)
        kwargs_167949 = {}
        # Getting the type of 'self' (line 2230)
        self_167946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2230, 17), 'self', False)
        # Obtaining the member 'to_draw' of a type (line 2230)
        to_draw_167947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2230, 17), self_167946, 'to_draw')
        # Obtaining the member 'get_y' of a type (line 2230)
        get_y_167948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2230, 17), to_draw_167947, 'get_y')
        # Calling get_y(args, kwargs) (line 2230)
        get_y_call_result_167950 = invoke(stypy.reporting.localization.Localization(__file__, 2230, 17), get_y_167948, *[], **kwargs_167949)
        
        # Assigning a type to the variable 'y0' (line 2230)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2230, 12), 'y0', get_y_call_result_167950)
        
        # Assigning a Call to a Name (line 2231):
        
        # Assigning a Call to a Name (line 2231):
        
        # Call to get_width(...): (line 2231)
        # Processing the call keyword arguments (line 2231)
        kwargs_167954 = {}
        # Getting the type of 'self' (line 2231)
        self_167951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2231, 20), 'self', False)
        # Obtaining the member 'to_draw' of a type (line 2231)
        to_draw_167952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2231, 20), self_167951, 'to_draw')
        # Obtaining the member 'get_width' of a type (line 2231)
        get_width_167953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2231, 20), to_draw_167952, 'get_width')
        # Calling get_width(args, kwargs) (line 2231)
        get_width_call_result_167955 = invoke(stypy.reporting.localization.Localization(__file__, 2231, 20), get_width_167953, *[], **kwargs_167954)
        
        # Assigning a type to the variable 'width' (line 2231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2231, 12), 'width', get_width_call_result_167955)
        
        # Assigning a Call to a Name (line 2232):
        
        # Assigning a Call to a Name (line 2232):
        
        # Call to get_height(...): (line 2232)
        # Processing the call keyword arguments (line 2232)
        kwargs_167959 = {}
        # Getting the type of 'self' (line 2232)
        self_167956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 21), 'self', False)
        # Obtaining the member 'to_draw' of a type (line 2232)
        to_draw_167957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 21), self_167956, 'to_draw')
        # Obtaining the member 'get_height' of a type (line 2232)
        get_height_167958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 21), to_draw_167957, 'get_height')
        # Calling get_height(args, kwargs) (line 2232)
        get_height_call_result_167960 = invoke(stypy.reporting.localization.Localization(__file__, 2232, 21), get_height_167958, *[], **kwargs_167959)
        
        # Assigning a type to the variable 'height' (line 2232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 12), 'height', get_height_call_result_167960)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2233)
        tuple_167961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2233, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2233)
        # Adding element type (line 2233)
        # Getting the type of 'x0' (line 2233)
        x0_167962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 19), 'x0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 19), tuple_167961, x0_167962)
        # Adding element type (line 2233)
        # Getting the type of 'y0' (line 2233)
        y0_167963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 23), 'y0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 19), tuple_167961, y0_167963)
        # Adding element type (line 2233)
        # Getting the type of 'width' (line 2233)
        width_167964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 27), 'width')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 19), tuple_167961, width_167964)
        # Adding element type (line 2233)
        # Getting the type of 'height' (line 2233)
        height_167965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 34), 'height')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2233, 19), tuple_167961, height_167965)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2233, 12), 'stypy_return_type', tuple_167961)
        # SSA branch for the else part of an if statement (line 2228)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 2235):
        
        # Assigning a Call to a Name:
        
        # Call to get_data(...): (line 2235)
        # Processing the call keyword arguments (line 2235)
        kwargs_167969 = {}
        # Getting the type of 'self' (line 2235)
        self_167966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 19), 'self', False)
        # Obtaining the member 'to_draw' of a type (line 2235)
        to_draw_167967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2235, 19), self_167966, 'to_draw')
        # Obtaining the member 'get_data' of a type (line 2235)
        get_data_167968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2235, 19), to_draw_167967, 'get_data')
        # Calling get_data(args, kwargs) (line 2235)
        get_data_call_result_167970 = invoke(stypy.reporting.localization.Localization(__file__, 2235, 19), get_data_167968, *[], **kwargs_167969)
        
        # Assigning a type to the variable 'call_assignment_162352' (line 2235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2235, 12), 'call_assignment_162352', get_data_call_result_167970)
        
        # Assigning a Call to a Name (line 2235):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_167973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2235, 12), 'int')
        # Processing the call keyword arguments
        kwargs_167974 = {}
        # Getting the type of 'call_assignment_162352' (line 2235)
        call_assignment_162352_167971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 12), 'call_assignment_162352', False)
        # Obtaining the member '__getitem__' of a type (line 2235)
        getitem___167972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2235, 12), call_assignment_162352_167971, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_167975 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___167972, *[int_167973], **kwargs_167974)
        
        # Assigning a type to the variable 'call_assignment_162353' (line 2235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2235, 12), 'call_assignment_162353', getitem___call_result_167975)
        
        # Assigning a Name to a Name (line 2235):
        # Getting the type of 'call_assignment_162353' (line 2235)
        call_assignment_162353_167976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 12), 'call_assignment_162353')
        # Assigning a type to the variable 'x' (line 2235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2235, 12), 'x', call_assignment_162353_167976)
        
        # Assigning a Call to a Name (line 2235):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_167979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2235, 12), 'int')
        # Processing the call keyword arguments
        kwargs_167980 = {}
        # Getting the type of 'call_assignment_162352' (line 2235)
        call_assignment_162352_167977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 12), 'call_assignment_162352', False)
        # Obtaining the member '__getitem__' of a type (line 2235)
        getitem___167978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2235, 12), call_assignment_162352_167977, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_167981 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___167978, *[int_167979], **kwargs_167980)
        
        # Assigning a type to the variable 'call_assignment_162354' (line 2235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2235, 12), 'call_assignment_162354', getitem___call_result_167981)
        
        # Assigning a Name to a Name (line 2235):
        # Getting the type of 'call_assignment_162354' (line 2235)
        call_assignment_162354_167982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 12), 'call_assignment_162354')
        # Assigning a type to the variable 'y' (line 2235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2235, 15), 'y', call_assignment_162354_167982)
        
        # Assigning a Tuple to a Tuple (line 2236):
        
        # Assigning a Call to a Name (line 2236):
        
        # Call to min(...): (line 2236)
        # Processing the call arguments (line 2236)
        # Getting the type of 'x' (line 2236)
        x_167984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 25), 'x', False)
        # Processing the call keyword arguments (line 2236)
        kwargs_167985 = {}
        # Getting the type of 'min' (line 2236)
        min_167983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 21), 'min', False)
        # Calling min(args, kwargs) (line 2236)
        min_call_result_167986 = invoke(stypy.reporting.localization.Localization(__file__, 2236, 21), min_167983, *[x_167984], **kwargs_167985)
        
        # Assigning a type to the variable 'tuple_assignment_162355' (line 2236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2236, 12), 'tuple_assignment_162355', min_call_result_167986)
        
        # Assigning a Call to a Name (line 2236):
        
        # Call to max(...): (line 2236)
        # Processing the call arguments (line 2236)
        # Getting the type of 'x' (line 2236)
        x_167988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 33), 'x', False)
        # Processing the call keyword arguments (line 2236)
        kwargs_167989 = {}
        # Getting the type of 'max' (line 2236)
        max_167987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 29), 'max', False)
        # Calling max(args, kwargs) (line 2236)
        max_call_result_167990 = invoke(stypy.reporting.localization.Localization(__file__, 2236, 29), max_167987, *[x_167988], **kwargs_167989)
        
        # Assigning a type to the variable 'tuple_assignment_162356' (line 2236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2236, 12), 'tuple_assignment_162356', max_call_result_167990)
        
        # Assigning a Name to a Name (line 2236):
        # Getting the type of 'tuple_assignment_162355' (line 2236)
        tuple_assignment_162355_167991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 12), 'tuple_assignment_162355')
        # Assigning a type to the variable 'x0' (line 2236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2236, 12), 'x0', tuple_assignment_162355_167991)
        
        # Assigning a Name to a Name (line 2236):
        # Getting the type of 'tuple_assignment_162356' (line 2236)
        tuple_assignment_162356_167992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 12), 'tuple_assignment_162356')
        # Assigning a type to the variable 'x1' (line 2236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2236, 16), 'x1', tuple_assignment_162356_167992)
        
        # Assigning a Tuple to a Tuple (line 2237):
        
        # Assigning a Call to a Name (line 2237):
        
        # Call to min(...): (line 2237)
        # Processing the call arguments (line 2237)
        # Getting the type of 'y' (line 2237)
        y_167994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 25), 'y', False)
        # Processing the call keyword arguments (line 2237)
        kwargs_167995 = {}
        # Getting the type of 'min' (line 2237)
        min_167993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 21), 'min', False)
        # Calling min(args, kwargs) (line 2237)
        min_call_result_167996 = invoke(stypy.reporting.localization.Localization(__file__, 2237, 21), min_167993, *[y_167994], **kwargs_167995)
        
        # Assigning a type to the variable 'tuple_assignment_162357' (line 2237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2237, 12), 'tuple_assignment_162357', min_call_result_167996)
        
        # Assigning a Call to a Name (line 2237):
        
        # Call to max(...): (line 2237)
        # Processing the call arguments (line 2237)
        # Getting the type of 'y' (line 2237)
        y_167998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 33), 'y', False)
        # Processing the call keyword arguments (line 2237)
        kwargs_167999 = {}
        # Getting the type of 'max' (line 2237)
        max_167997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 29), 'max', False)
        # Calling max(args, kwargs) (line 2237)
        max_call_result_168000 = invoke(stypy.reporting.localization.Localization(__file__, 2237, 29), max_167997, *[y_167998], **kwargs_167999)
        
        # Assigning a type to the variable 'tuple_assignment_162358' (line 2237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2237, 12), 'tuple_assignment_162358', max_call_result_168000)
        
        # Assigning a Name to a Name (line 2237):
        # Getting the type of 'tuple_assignment_162357' (line 2237)
        tuple_assignment_162357_168001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 12), 'tuple_assignment_162357')
        # Assigning a type to the variable 'y0' (line 2237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2237, 12), 'y0', tuple_assignment_162357_168001)
        
        # Assigning a Name to a Name (line 2237):
        # Getting the type of 'tuple_assignment_162358' (line 2237)
        tuple_assignment_162358_168002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 12), 'tuple_assignment_162358')
        # Assigning a type to the variable 'y1' (line 2237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2237, 16), 'y1', tuple_assignment_162358_168002)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2238)
        tuple_168003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2238, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2238)
        # Adding element type (line 2238)
        # Getting the type of 'x0' (line 2238)
        x0_168004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 19), 'x0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2238, 19), tuple_168003, x0_168004)
        # Adding element type (line 2238)
        # Getting the type of 'y0' (line 2238)
        y0_168005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 23), 'y0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2238, 19), tuple_168003, y0_168005)
        # Adding element type (line 2238)
        # Getting the type of 'x1' (line 2238)
        x1_168006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 27), 'x1')
        # Getting the type of 'x0' (line 2238)
        x0_168007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 32), 'x0')
        # Applying the binary operator '-' (line 2238)
        result_sub_168008 = python_operator(stypy.reporting.localization.Localization(__file__, 2238, 27), '-', x1_168006, x0_168007)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2238, 19), tuple_168003, result_sub_168008)
        # Adding element type (line 2238)
        # Getting the type of 'y1' (line 2238)
        y1_168009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 36), 'y1')
        # Getting the type of 'y0' (line 2238)
        y0_168010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 41), 'y0')
        # Applying the binary operator '-' (line 2238)
        result_sub_168011 = python_operator(stypy.reporting.localization.Localization(__file__, 2238, 36), '-', y1_168009, y0_168010)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2238, 19), tuple_168003, result_sub_168011)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2238, 12), 'stypy_return_type', tuple_168003)
        # SSA join for if statement (line 2228)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_rect_bbox(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_rect_bbox' in the type store
        # Getting the type of 'stypy_return_type' (line 2226)
        stypy_return_type_168012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168012)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_rect_bbox'
        return stypy_return_type_168012


    @norecursion
    def corners(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'corners'
        module_type_store = module_type_store.open_function_context('corners', 2240, 4, False)
        # Assigning a type to the variable 'self' (line 2241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2241, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RectangleSelector.corners.__dict__.__setitem__('stypy_localization', localization)
        RectangleSelector.corners.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RectangleSelector.corners.__dict__.__setitem__('stypy_type_store', module_type_store)
        RectangleSelector.corners.__dict__.__setitem__('stypy_function_name', 'RectangleSelector.corners')
        RectangleSelector.corners.__dict__.__setitem__('stypy_param_names_list', [])
        RectangleSelector.corners.__dict__.__setitem__('stypy_varargs_param_name', None)
        RectangleSelector.corners.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RectangleSelector.corners.__dict__.__setitem__('stypy_call_defaults', defaults)
        RectangleSelector.corners.__dict__.__setitem__('stypy_call_varargs', varargs)
        RectangleSelector.corners.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RectangleSelector.corners.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RectangleSelector.corners', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'corners', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'corners(...)' code ##################

        unicode_168013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2242, 8), 'unicode', u'Corners of rectangle from lower left, moving clockwise.')
        
        # Assigning a Attribute to a Tuple (line 2243):
        
        # Assigning a Subscript to a Name (line 2243):
        
        # Obtaining the type of the subscript
        int_168014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2243, 8), 'int')
        # Getting the type of 'self' (line 2243)
        self_168015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 32), 'self')
        # Obtaining the member '_rect_bbox' of a type (line 2243)
        _rect_bbox_168016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2243, 32), self_168015, '_rect_bbox')
        # Obtaining the member '__getitem__' of a type (line 2243)
        getitem___168017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2243, 8), _rect_bbox_168016, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2243)
        subscript_call_result_168018 = invoke(stypy.reporting.localization.Localization(__file__, 2243, 8), getitem___168017, int_168014)
        
        # Assigning a type to the variable 'tuple_var_assignment_162359' (line 2243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 8), 'tuple_var_assignment_162359', subscript_call_result_168018)
        
        # Assigning a Subscript to a Name (line 2243):
        
        # Obtaining the type of the subscript
        int_168019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2243, 8), 'int')
        # Getting the type of 'self' (line 2243)
        self_168020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 32), 'self')
        # Obtaining the member '_rect_bbox' of a type (line 2243)
        _rect_bbox_168021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2243, 32), self_168020, '_rect_bbox')
        # Obtaining the member '__getitem__' of a type (line 2243)
        getitem___168022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2243, 8), _rect_bbox_168021, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2243)
        subscript_call_result_168023 = invoke(stypy.reporting.localization.Localization(__file__, 2243, 8), getitem___168022, int_168019)
        
        # Assigning a type to the variable 'tuple_var_assignment_162360' (line 2243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 8), 'tuple_var_assignment_162360', subscript_call_result_168023)
        
        # Assigning a Subscript to a Name (line 2243):
        
        # Obtaining the type of the subscript
        int_168024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2243, 8), 'int')
        # Getting the type of 'self' (line 2243)
        self_168025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 32), 'self')
        # Obtaining the member '_rect_bbox' of a type (line 2243)
        _rect_bbox_168026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2243, 32), self_168025, '_rect_bbox')
        # Obtaining the member '__getitem__' of a type (line 2243)
        getitem___168027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2243, 8), _rect_bbox_168026, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2243)
        subscript_call_result_168028 = invoke(stypy.reporting.localization.Localization(__file__, 2243, 8), getitem___168027, int_168024)
        
        # Assigning a type to the variable 'tuple_var_assignment_162361' (line 2243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 8), 'tuple_var_assignment_162361', subscript_call_result_168028)
        
        # Assigning a Subscript to a Name (line 2243):
        
        # Obtaining the type of the subscript
        int_168029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2243, 8), 'int')
        # Getting the type of 'self' (line 2243)
        self_168030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 32), 'self')
        # Obtaining the member '_rect_bbox' of a type (line 2243)
        _rect_bbox_168031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2243, 32), self_168030, '_rect_bbox')
        # Obtaining the member '__getitem__' of a type (line 2243)
        getitem___168032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2243, 8), _rect_bbox_168031, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2243)
        subscript_call_result_168033 = invoke(stypy.reporting.localization.Localization(__file__, 2243, 8), getitem___168032, int_168029)
        
        # Assigning a type to the variable 'tuple_var_assignment_162362' (line 2243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 8), 'tuple_var_assignment_162362', subscript_call_result_168033)
        
        # Assigning a Name to a Name (line 2243):
        # Getting the type of 'tuple_var_assignment_162359' (line 2243)
        tuple_var_assignment_162359_168034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 8), 'tuple_var_assignment_162359')
        # Assigning a type to the variable 'x0' (line 2243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 8), 'x0', tuple_var_assignment_162359_168034)
        
        # Assigning a Name to a Name (line 2243):
        # Getting the type of 'tuple_var_assignment_162360' (line 2243)
        tuple_var_assignment_162360_168035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 8), 'tuple_var_assignment_162360')
        # Assigning a type to the variable 'y0' (line 2243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 12), 'y0', tuple_var_assignment_162360_168035)
        
        # Assigning a Name to a Name (line 2243):
        # Getting the type of 'tuple_var_assignment_162361' (line 2243)
        tuple_var_assignment_162361_168036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 8), 'tuple_var_assignment_162361')
        # Assigning a type to the variable 'width' (line 2243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 16), 'width', tuple_var_assignment_162361_168036)
        
        # Assigning a Name to a Name (line 2243):
        # Getting the type of 'tuple_var_assignment_162362' (line 2243)
        tuple_var_assignment_162362_168037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 8), 'tuple_var_assignment_162362')
        # Assigning a type to the variable 'height' (line 2243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 23), 'height', tuple_var_assignment_162362_168037)
        
        # Assigning a Tuple to a Name (line 2244):
        
        # Assigning a Tuple to a Name (line 2244):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2244)
        tuple_168038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2244, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2244)
        # Adding element type (line 2244)
        # Getting the type of 'x0' (line 2244)
        x0_168039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 13), 'x0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 13), tuple_168038, x0_168039)
        # Adding element type (line 2244)
        # Getting the type of 'x0' (line 2244)
        x0_168040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 17), 'x0')
        # Getting the type of 'width' (line 2244)
        width_168041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 22), 'width')
        # Applying the binary operator '+' (line 2244)
        result_add_168042 = python_operator(stypy.reporting.localization.Localization(__file__, 2244, 17), '+', x0_168040, width_168041)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 13), tuple_168038, result_add_168042)
        # Adding element type (line 2244)
        # Getting the type of 'x0' (line 2244)
        x0_168043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 29), 'x0')
        # Getting the type of 'width' (line 2244)
        width_168044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 34), 'width')
        # Applying the binary operator '+' (line 2244)
        result_add_168045 = python_operator(stypy.reporting.localization.Localization(__file__, 2244, 29), '+', x0_168043, width_168044)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 13), tuple_168038, result_add_168045)
        # Adding element type (line 2244)
        # Getting the type of 'x0' (line 2244)
        x0_168046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 41), 'x0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2244, 13), tuple_168038, x0_168046)
        
        # Assigning a type to the variable 'xc' (line 2244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2244, 8), 'xc', tuple_168038)
        
        # Assigning a Tuple to a Name (line 2245):
        
        # Assigning a Tuple to a Name (line 2245):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2245)
        tuple_168047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2245, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2245)
        # Adding element type (line 2245)
        # Getting the type of 'y0' (line 2245)
        y0_168048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 13), 'y0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2245, 13), tuple_168047, y0_168048)
        # Adding element type (line 2245)
        # Getting the type of 'y0' (line 2245)
        y0_168049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 17), 'y0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2245, 13), tuple_168047, y0_168049)
        # Adding element type (line 2245)
        # Getting the type of 'y0' (line 2245)
        y0_168050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 21), 'y0')
        # Getting the type of 'height' (line 2245)
        height_168051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 26), 'height')
        # Applying the binary operator '+' (line 2245)
        result_add_168052 = python_operator(stypy.reporting.localization.Localization(__file__, 2245, 21), '+', y0_168050, height_168051)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2245, 13), tuple_168047, result_add_168052)
        # Adding element type (line 2245)
        # Getting the type of 'y0' (line 2245)
        y0_168053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 34), 'y0')
        # Getting the type of 'height' (line 2245)
        height_168054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 39), 'height')
        # Applying the binary operator '+' (line 2245)
        result_add_168055 = python_operator(stypy.reporting.localization.Localization(__file__, 2245, 34), '+', y0_168053, height_168054)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2245, 13), tuple_168047, result_add_168055)
        
        # Assigning a type to the variable 'yc' (line 2245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2245, 8), 'yc', tuple_168047)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2246)
        tuple_168056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2246, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2246)
        # Adding element type (line 2246)
        # Getting the type of 'xc' (line 2246)
        xc_168057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2246, 15), 'xc')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2246, 15), tuple_168056, xc_168057)
        # Adding element type (line 2246)
        # Getting the type of 'yc' (line 2246)
        yc_168058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2246, 19), 'yc')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2246, 15), tuple_168056, yc_168058)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2246)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2246, 8), 'stypy_return_type', tuple_168056)
        
        # ################# End of 'corners(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'corners' in the type store
        # Getting the type of 'stypy_return_type' (line 2240)
        stypy_return_type_168059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168059)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'corners'
        return stypy_return_type_168059


    @norecursion
    def edge_centers(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'edge_centers'
        module_type_store = module_type_store.open_function_context('edge_centers', 2248, 4, False)
        # Assigning a type to the variable 'self' (line 2249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2249, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RectangleSelector.edge_centers.__dict__.__setitem__('stypy_localization', localization)
        RectangleSelector.edge_centers.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RectangleSelector.edge_centers.__dict__.__setitem__('stypy_type_store', module_type_store)
        RectangleSelector.edge_centers.__dict__.__setitem__('stypy_function_name', 'RectangleSelector.edge_centers')
        RectangleSelector.edge_centers.__dict__.__setitem__('stypy_param_names_list', [])
        RectangleSelector.edge_centers.__dict__.__setitem__('stypy_varargs_param_name', None)
        RectangleSelector.edge_centers.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RectangleSelector.edge_centers.__dict__.__setitem__('stypy_call_defaults', defaults)
        RectangleSelector.edge_centers.__dict__.__setitem__('stypy_call_varargs', varargs)
        RectangleSelector.edge_centers.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RectangleSelector.edge_centers.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RectangleSelector.edge_centers', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'edge_centers', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'edge_centers(...)' code ##################

        unicode_168060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2250, 8), 'unicode', u'Midpoint of rectangle edges from left, moving clockwise.')
        
        # Assigning a Attribute to a Tuple (line 2251):
        
        # Assigning a Subscript to a Name (line 2251):
        
        # Obtaining the type of the subscript
        int_168061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2251, 8), 'int')
        # Getting the type of 'self' (line 2251)
        self_168062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2251, 32), 'self')
        # Obtaining the member '_rect_bbox' of a type (line 2251)
        _rect_bbox_168063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2251, 32), self_168062, '_rect_bbox')
        # Obtaining the member '__getitem__' of a type (line 2251)
        getitem___168064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2251, 8), _rect_bbox_168063, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2251)
        subscript_call_result_168065 = invoke(stypy.reporting.localization.Localization(__file__, 2251, 8), getitem___168064, int_168061)
        
        # Assigning a type to the variable 'tuple_var_assignment_162363' (line 2251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2251, 8), 'tuple_var_assignment_162363', subscript_call_result_168065)
        
        # Assigning a Subscript to a Name (line 2251):
        
        # Obtaining the type of the subscript
        int_168066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2251, 8), 'int')
        # Getting the type of 'self' (line 2251)
        self_168067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2251, 32), 'self')
        # Obtaining the member '_rect_bbox' of a type (line 2251)
        _rect_bbox_168068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2251, 32), self_168067, '_rect_bbox')
        # Obtaining the member '__getitem__' of a type (line 2251)
        getitem___168069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2251, 8), _rect_bbox_168068, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2251)
        subscript_call_result_168070 = invoke(stypy.reporting.localization.Localization(__file__, 2251, 8), getitem___168069, int_168066)
        
        # Assigning a type to the variable 'tuple_var_assignment_162364' (line 2251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2251, 8), 'tuple_var_assignment_162364', subscript_call_result_168070)
        
        # Assigning a Subscript to a Name (line 2251):
        
        # Obtaining the type of the subscript
        int_168071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2251, 8), 'int')
        # Getting the type of 'self' (line 2251)
        self_168072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2251, 32), 'self')
        # Obtaining the member '_rect_bbox' of a type (line 2251)
        _rect_bbox_168073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2251, 32), self_168072, '_rect_bbox')
        # Obtaining the member '__getitem__' of a type (line 2251)
        getitem___168074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2251, 8), _rect_bbox_168073, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2251)
        subscript_call_result_168075 = invoke(stypy.reporting.localization.Localization(__file__, 2251, 8), getitem___168074, int_168071)
        
        # Assigning a type to the variable 'tuple_var_assignment_162365' (line 2251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2251, 8), 'tuple_var_assignment_162365', subscript_call_result_168075)
        
        # Assigning a Subscript to a Name (line 2251):
        
        # Obtaining the type of the subscript
        int_168076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2251, 8), 'int')
        # Getting the type of 'self' (line 2251)
        self_168077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2251, 32), 'self')
        # Obtaining the member '_rect_bbox' of a type (line 2251)
        _rect_bbox_168078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2251, 32), self_168077, '_rect_bbox')
        # Obtaining the member '__getitem__' of a type (line 2251)
        getitem___168079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2251, 8), _rect_bbox_168078, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2251)
        subscript_call_result_168080 = invoke(stypy.reporting.localization.Localization(__file__, 2251, 8), getitem___168079, int_168076)
        
        # Assigning a type to the variable 'tuple_var_assignment_162366' (line 2251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2251, 8), 'tuple_var_assignment_162366', subscript_call_result_168080)
        
        # Assigning a Name to a Name (line 2251):
        # Getting the type of 'tuple_var_assignment_162363' (line 2251)
        tuple_var_assignment_162363_168081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2251, 8), 'tuple_var_assignment_162363')
        # Assigning a type to the variable 'x0' (line 2251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2251, 8), 'x0', tuple_var_assignment_162363_168081)
        
        # Assigning a Name to a Name (line 2251):
        # Getting the type of 'tuple_var_assignment_162364' (line 2251)
        tuple_var_assignment_162364_168082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2251, 8), 'tuple_var_assignment_162364')
        # Assigning a type to the variable 'y0' (line 2251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2251, 12), 'y0', tuple_var_assignment_162364_168082)
        
        # Assigning a Name to a Name (line 2251):
        # Getting the type of 'tuple_var_assignment_162365' (line 2251)
        tuple_var_assignment_162365_168083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2251, 8), 'tuple_var_assignment_162365')
        # Assigning a type to the variable 'width' (line 2251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2251, 16), 'width', tuple_var_assignment_162365_168083)
        
        # Assigning a Name to a Name (line 2251):
        # Getting the type of 'tuple_var_assignment_162366' (line 2251)
        tuple_var_assignment_162366_168084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2251, 8), 'tuple_var_assignment_162366')
        # Assigning a type to the variable 'height' (line 2251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2251, 23), 'height', tuple_var_assignment_162366_168084)
        
        # Assigning a BinOp to a Name (line 2252):
        
        # Assigning a BinOp to a Name (line 2252):
        # Getting the type of 'width' (line 2252)
        width_168085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2252, 12), 'width')
        float_168086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2252, 20), 'float')
        # Applying the binary operator 'div' (line 2252)
        result_div_168087 = python_operator(stypy.reporting.localization.Localization(__file__, 2252, 12), 'div', width_168085, float_168086)
        
        # Assigning a type to the variable 'w' (line 2252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2252, 8), 'w', result_div_168087)
        
        # Assigning a BinOp to a Name (line 2253):
        
        # Assigning a BinOp to a Name (line 2253):
        # Getting the type of 'height' (line 2253)
        height_168088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2253, 12), 'height')
        float_168089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2253, 21), 'float')
        # Applying the binary operator 'div' (line 2253)
        result_div_168090 = python_operator(stypy.reporting.localization.Localization(__file__, 2253, 12), 'div', height_168088, float_168089)
        
        # Assigning a type to the variable 'h' (line 2253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2253, 8), 'h', result_div_168090)
        
        # Assigning a Tuple to a Name (line 2254):
        
        # Assigning a Tuple to a Name (line 2254):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2254)
        tuple_168091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2254, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2254)
        # Adding element type (line 2254)
        # Getting the type of 'x0' (line 2254)
        x0_168092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2254, 13), 'x0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2254, 13), tuple_168091, x0_168092)
        # Adding element type (line 2254)
        # Getting the type of 'x0' (line 2254)
        x0_168093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2254, 17), 'x0')
        # Getting the type of 'w' (line 2254)
        w_168094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2254, 22), 'w')
        # Applying the binary operator '+' (line 2254)
        result_add_168095 = python_operator(stypy.reporting.localization.Localization(__file__, 2254, 17), '+', x0_168093, w_168094)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2254, 13), tuple_168091, result_add_168095)
        # Adding element type (line 2254)
        # Getting the type of 'x0' (line 2254)
        x0_168096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2254, 25), 'x0')
        # Getting the type of 'width' (line 2254)
        width_168097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2254, 30), 'width')
        # Applying the binary operator '+' (line 2254)
        result_add_168098 = python_operator(stypy.reporting.localization.Localization(__file__, 2254, 25), '+', x0_168096, width_168097)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2254, 13), tuple_168091, result_add_168098)
        # Adding element type (line 2254)
        # Getting the type of 'x0' (line 2254)
        x0_168099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2254, 37), 'x0')
        # Getting the type of 'w' (line 2254)
        w_168100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2254, 42), 'w')
        # Applying the binary operator '+' (line 2254)
        result_add_168101 = python_operator(stypy.reporting.localization.Localization(__file__, 2254, 37), '+', x0_168099, w_168100)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2254, 13), tuple_168091, result_add_168101)
        
        # Assigning a type to the variable 'xe' (line 2254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2254, 8), 'xe', tuple_168091)
        
        # Assigning a Tuple to a Name (line 2255):
        
        # Assigning a Tuple to a Name (line 2255):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2255)
        tuple_168102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2255, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2255)
        # Adding element type (line 2255)
        # Getting the type of 'y0' (line 2255)
        y0_168103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 13), 'y0')
        # Getting the type of 'h' (line 2255)
        h_168104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 18), 'h')
        # Applying the binary operator '+' (line 2255)
        result_add_168105 = python_operator(stypy.reporting.localization.Localization(__file__, 2255, 13), '+', y0_168103, h_168104)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2255, 13), tuple_168102, result_add_168105)
        # Adding element type (line 2255)
        # Getting the type of 'y0' (line 2255)
        y0_168106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 21), 'y0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2255, 13), tuple_168102, y0_168106)
        # Adding element type (line 2255)
        # Getting the type of 'y0' (line 2255)
        y0_168107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 25), 'y0')
        # Getting the type of 'h' (line 2255)
        h_168108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 30), 'h')
        # Applying the binary operator '+' (line 2255)
        result_add_168109 = python_operator(stypy.reporting.localization.Localization(__file__, 2255, 25), '+', y0_168107, h_168108)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2255, 13), tuple_168102, result_add_168109)
        # Adding element type (line 2255)
        # Getting the type of 'y0' (line 2255)
        y0_168110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 33), 'y0')
        # Getting the type of 'height' (line 2255)
        height_168111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 38), 'height')
        # Applying the binary operator '+' (line 2255)
        result_add_168112 = python_operator(stypy.reporting.localization.Localization(__file__, 2255, 33), '+', y0_168110, height_168111)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2255, 13), tuple_168102, result_add_168112)
        
        # Assigning a type to the variable 'ye' (line 2255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2255, 8), 'ye', tuple_168102)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2256)
        tuple_168113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2256, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2256)
        # Adding element type (line 2256)
        # Getting the type of 'xe' (line 2256)
        xe_168114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 15), 'xe')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2256, 15), tuple_168113, xe_168114)
        # Adding element type (line 2256)
        # Getting the type of 'ye' (line 2256)
        ye_168115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 19), 'ye')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2256, 15), tuple_168113, ye_168115)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2256, 8), 'stypy_return_type', tuple_168113)
        
        # ################# End of 'edge_centers(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'edge_centers' in the type store
        # Getting the type of 'stypy_return_type' (line 2248)
        stypy_return_type_168116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2248, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168116)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'edge_centers'
        return stypy_return_type_168116


    @norecursion
    def center(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'center'
        module_type_store = module_type_store.open_function_context('center', 2258, 4, False)
        # Assigning a type to the variable 'self' (line 2259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2259, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RectangleSelector.center.__dict__.__setitem__('stypy_localization', localization)
        RectangleSelector.center.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RectangleSelector.center.__dict__.__setitem__('stypy_type_store', module_type_store)
        RectangleSelector.center.__dict__.__setitem__('stypy_function_name', 'RectangleSelector.center')
        RectangleSelector.center.__dict__.__setitem__('stypy_param_names_list', [])
        RectangleSelector.center.__dict__.__setitem__('stypy_varargs_param_name', None)
        RectangleSelector.center.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RectangleSelector.center.__dict__.__setitem__('stypy_call_defaults', defaults)
        RectangleSelector.center.__dict__.__setitem__('stypy_call_varargs', varargs)
        RectangleSelector.center.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RectangleSelector.center.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RectangleSelector.center', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'center', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'center(...)' code ##################

        unicode_168117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2260, 8), 'unicode', u'Center of rectangle')
        
        # Assigning a Attribute to a Tuple (line 2261):
        
        # Assigning a Subscript to a Name (line 2261):
        
        # Obtaining the type of the subscript
        int_168118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2261, 8), 'int')
        # Getting the type of 'self' (line 2261)
        self_168119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 32), 'self')
        # Obtaining the member '_rect_bbox' of a type (line 2261)
        _rect_bbox_168120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2261, 32), self_168119, '_rect_bbox')
        # Obtaining the member '__getitem__' of a type (line 2261)
        getitem___168121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2261, 8), _rect_bbox_168120, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2261)
        subscript_call_result_168122 = invoke(stypy.reporting.localization.Localization(__file__, 2261, 8), getitem___168121, int_168118)
        
        # Assigning a type to the variable 'tuple_var_assignment_162367' (line 2261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2261, 8), 'tuple_var_assignment_162367', subscript_call_result_168122)
        
        # Assigning a Subscript to a Name (line 2261):
        
        # Obtaining the type of the subscript
        int_168123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2261, 8), 'int')
        # Getting the type of 'self' (line 2261)
        self_168124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 32), 'self')
        # Obtaining the member '_rect_bbox' of a type (line 2261)
        _rect_bbox_168125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2261, 32), self_168124, '_rect_bbox')
        # Obtaining the member '__getitem__' of a type (line 2261)
        getitem___168126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2261, 8), _rect_bbox_168125, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2261)
        subscript_call_result_168127 = invoke(stypy.reporting.localization.Localization(__file__, 2261, 8), getitem___168126, int_168123)
        
        # Assigning a type to the variable 'tuple_var_assignment_162368' (line 2261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2261, 8), 'tuple_var_assignment_162368', subscript_call_result_168127)
        
        # Assigning a Subscript to a Name (line 2261):
        
        # Obtaining the type of the subscript
        int_168128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2261, 8), 'int')
        # Getting the type of 'self' (line 2261)
        self_168129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 32), 'self')
        # Obtaining the member '_rect_bbox' of a type (line 2261)
        _rect_bbox_168130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2261, 32), self_168129, '_rect_bbox')
        # Obtaining the member '__getitem__' of a type (line 2261)
        getitem___168131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2261, 8), _rect_bbox_168130, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2261)
        subscript_call_result_168132 = invoke(stypy.reporting.localization.Localization(__file__, 2261, 8), getitem___168131, int_168128)
        
        # Assigning a type to the variable 'tuple_var_assignment_162369' (line 2261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2261, 8), 'tuple_var_assignment_162369', subscript_call_result_168132)
        
        # Assigning a Subscript to a Name (line 2261):
        
        # Obtaining the type of the subscript
        int_168133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2261, 8), 'int')
        # Getting the type of 'self' (line 2261)
        self_168134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 32), 'self')
        # Obtaining the member '_rect_bbox' of a type (line 2261)
        _rect_bbox_168135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2261, 32), self_168134, '_rect_bbox')
        # Obtaining the member '__getitem__' of a type (line 2261)
        getitem___168136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2261, 8), _rect_bbox_168135, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2261)
        subscript_call_result_168137 = invoke(stypy.reporting.localization.Localization(__file__, 2261, 8), getitem___168136, int_168133)
        
        # Assigning a type to the variable 'tuple_var_assignment_162370' (line 2261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2261, 8), 'tuple_var_assignment_162370', subscript_call_result_168137)
        
        # Assigning a Name to a Name (line 2261):
        # Getting the type of 'tuple_var_assignment_162367' (line 2261)
        tuple_var_assignment_162367_168138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 8), 'tuple_var_assignment_162367')
        # Assigning a type to the variable 'x0' (line 2261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2261, 8), 'x0', tuple_var_assignment_162367_168138)
        
        # Assigning a Name to a Name (line 2261):
        # Getting the type of 'tuple_var_assignment_162368' (line 2261)
        tuple_var_assignment_162368_168139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 8), 'tuple_var_assignment_162368')
        # Assigning a type to the variable 'y0' (line 2261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2261, 12), 'y0', tuple_var_assignment_162368_168139)
        
        # Assigning a Name to a Name (line 2261):
        # Getting the type of 'tuple_var_assignment_162369' (line 2261)
        tuple_var_assignment_162369_168140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 8), 'tuple_var_assignment_162369')
        # Assigning a type to the variable 'width' (line 2261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2261, 16), 'width', tuple_var_assignment_162369_168140)
        
        # Assigning a Name to a Name (line 2261):
        # Getting the type of 'tuple_var_assignment_162370' (line 2261)
        tuple_var_assignment_162370_168141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 8), 'tuple_var_assignment_162370')
        # Assigning a type to the variable 'height' (line 2261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2261, 23), 'height', tuple_var_assignment_162370_168141)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2262)
        tuple_168142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2262, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2262)
        # Adding element type (line 2262)
        # Getting the type of 'x0' (line 2262)
        x0_168143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 15), 'x0')
        # Getting the type of 'width' (line 2262)
        width_168144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 20), 'width')
        float_168145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2262, 28), 'float')
        # Applying the binary operator 'div' (line 2262)
        result_div_168146 = python_operator(stypy.reporting.localization.Localization(__file__, 2262, 20), 'div', width_168144, float_168145)
        
        # Applying the binary operator '+' (line 2262)
        result_add_168147 = python_operator(stypy.reporting.localization.Localization(__file__, 2262, 15), '+', x0_168143, result_div_168146)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2262, 15), tuple_168142, result_add_168147)
        # Adding element type (line 2262)
        # Getting the type of 'y0' (line 2262)
        y0_168148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 32), 'y0')
        # Getting the type of 'height' (line 2262)
        height_168149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 37), 'height')
        float_168150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2262, 46), 'float')
        # Applying the binary operator 'div' (line 2262)
        result_div_168151 = python_operator(stypy.reporting.localization.Localization(__file__, 2262, 37), 'div', height_168149, float_168150)
        
        # Applying the binary operator '+' (line 2262)
        result_add_168152 = python_operator(stypy.reporting.localization.Localization(__file__, 2262, 32), '+', y0_168148, result_div_168151)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2262, 15), tuple_168142, result_add_168152)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2262, 8), 'stypy_return_type', tuple_168142)
        
        # ################# End of 'center(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'center' in the type store
        # Getting the type of 'stypy_return_type' (line 2258)
        stypy_return_type_168153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168153)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'center'
        return stypy_return_type_168153


    @norecursion
    def extents(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'extents'
        module_type_store = module_type_store.open_function_context('extents', 2264, 4, False)
        # Assigning a type to the variable 'self' (line 2265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2265, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RectangleSelector.extents.__dict__.__setitem__('stypy_localization', localization)
        RectangleSelector.extents.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RectangleSelector.extents.__dict__.__setitem__('stypy_type_store', module_type_store)
        RectangleSelector.extents.__dict__.__setitem__('stypy_function_name', 'RectangleSelector.extents')
        RectangleSelector.extents.__dict__.__setitem__('stypy_param_names_list', [])
        RectangleSelector.extents.__dict__.__setitem__('stypy_varargs_param_name', None)
        RectangleSelector.extents.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RectangleSelector.extents.__dict__.__setitem__('stypy_call_defaults', defaults)
        RectangleSelector.extents.__dict__.__setitem__('stypy_call_varargs', varargs)
        RectangleSelector.extents.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RectangleSelector.extents.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RectangleSelector.extents', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'extents', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'extents(...)' code ##################

        unicode_168154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2266, 8), 'unicode', u'Return (xmin, xmax, ymin, ymax).')
        
        # Assigning a Attribute to a Tuple (line 2267):
        
        # Assigning a Subscript to a Name (line 2267):
        
        # Obtaining the type of the subscript
        int_168155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 8), 'int')
        # Getting the type of 'self' (line 2267)
        self_168156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 32), 'self')
        # Obtaining the member '_rect_bbox' of a type (line 2267)
        _rect_bbox_168157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2267, 32), self_168156, '_rect_bbox')
        # Obtaining the member '__getitem__' of a type (line 2267)
        getitem___168158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2267, 8), _rect_bbox_168157, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2267)
        subscript_call_result_168159 = invoke(stypy.reporting.localization.Localization(__file__, 2267, 8), getitem___168158, int_168155)
        
        # Assigning a type to the variable 'tuple_var_assignment_162371' (line 2267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2267, 8), 'tuple_var_assignment_162371', subscript_call_result_168159)
        
        # Assigning a Subscript to a Name (line 2267):
        
        # Obtaining the type of the subscript
        int_168160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 8), 'int')
        # Getting the type of 'self' (line 2267)
        self_168161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 32), 'self')
        # Obtaining the member '_rect_bbox' of a type (line 2267)
        _rect_bbox_168162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2267, 32), self_168161, '_rect_bbox')
        # Obtaining the member '__getitem__' of a type (line 2267)
        getitem___168163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2267, 8), _rect_bbox_168162, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2267)
        subscript_call_result_168164 = invoke(stypy.reporting.localization.Localization(__file__, 2267, 8), getitem___168163, int_168160)
        
        # Assigning a type to the variable 'tuple_var_assignment_162372' (line 2267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2267, 8), 'tuple_var_assignment_162372', subscript_call_result_168164)
        
        # Assigning a Subscript to a Name (line 2267):
        
        # Obtaining the type of the subscript
        int_168165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 8), 'int')
        # Getting the type of 'self' (line 2267)
        self_168166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 32), 'self')
        # Obtaining the member '_rect_bbox' of a type (line 2267)
        _rect_bbox_168167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2267, 32), self_168166, '_rect_bbox')
        # Obtaining the member '__getitem__' of a type (line 2267)
        getitem___168168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2267, 8), _rect_bbox_168167, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2267)
        subscript_call_result_168169 = invoke(stypy.reporting.localization.Localization(__file__, 2267, 8), getitem___168168, int_168165)
        
        # Assigning a type to the variable 'tuple_var_assignment_162373' (line 2267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2267, 8), 'tuple_var_assignment_162373', subscript_call_result_168169)
        
        # Assigning a Subscript to a Name (line 2267):
        
        # Obtaining the type of the subscript
        int_168170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, 8), 'int')
        # Getting the type of 'self' (line 2267)
        self_168171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 32), 'self')
        # Obtaining the member '_rect_bbox' of a type (line 2267)
        _rect_bbox_168172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2267, 32), self_168171, '_rect_bbox')
        # Obtaining the member '__getitem__' of a type (line 2267)
        getitem___168173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2267, 8), _rect_bbox_168172, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2267)
        subscript_call_result_168174 = invoke(stypy.reporting.localization.Localization(__file__, 2267, 8), getitem___168173, int_168170)
        
        # Assigning a type to the variable 'tuple_var_assignment_162374' (line 2267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2267, 8), 'tuple_var_assignment_162374', subscript_call_result_168174)
        
        # Assigning a Name to a Name (line 2267):
        # Getting the type of 'tuple_var_assignment_162371' (line 2267)
        tuple_var_assignment_162371_168175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 8), 'tuple_var_assignment_162371')
        # Assigning a type to the variable 'x0' (line 2267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2267, 8), 'x0', tuple_var_assignment_162371_168175)
        
        # Assigning a Name to a Name (line 2267):
        # Getting the type of 'tuple_var_assignment_162372' (line 2267)
        tuple_var_assignment_162372_168176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 8), 'tuple_var_assignment_162372')
        # Assigning a type to the variable 'y0' (line 2267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2267, 12), 'y0', tuple_var_assignment_162372_168176)
        
        # Assigning a Name to a Name (line 2267):
        # Getting the type of 'tuple_var_assignment_162373' (line 2267)
        tuple_var_assignment_162373_168177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 8), 'tuple_var_assignment_162373')
        # Assigning a type to the variable 'width' (line 2267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2267, 16), 'width', tuple_var_assignment_162373_168177)
        
        # Assigning a Name to a Name (line 2267):
        # Getting the type of 'tuple_var_assignment_162374' (line 2267)
        tuple_var_assignment_162374_168178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 8), 'tuple_var_assignment_162374')
        # Assigning a type to the variable 'height' (line 2267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2267, 23), 'height', tuple_var_assignment_162374_168178)
        
        # Assigning a Call to a Tuple (line 2268):
        
        # Assigning a Call to a Name:
        
        # Call to sorted(...): (line 2268)
        # Processing the call arguments (line 2268)
        
        # Obtaining an instance of the builtin type 'list' (line 2268)
        list_168180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2268, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2268)
        # Adding element type (line 2268)
        # Getting the type of 'x0' (line 2268)
        x0_168181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 29), 'x0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2268, 28), list_168180, x0_168181)
        # Adding element type (line 2268)
        # Getting the type of 'x0' (line 2268)
        x0_168182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 33), 'x0', False)
        # Getting the type of 'width' (line 2268)
        width_168183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 38), 'width', False)
        # Applying the binary operator '+' (line 2268)
        result_add_168184 = python_operator(stypy.reporting.localization.Localization(__file__, 2268, 33), '+', x0_168182, width_168183)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2268, 28), list_168180, result_add_168184)
        
        # Processing the call keyword arguments (line 2268)
        kwargs_168185 = {}
        # Getting the type of 'sorted' (line 2268)
        sorted_168179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 21), 'sorted', False)
        # Calling sorted(args, kwargs) (line 2268)
        sorted_call_result_168186 = invoke(stypy.reporting.localization.Localization(__file__, 2268, 21), sorted_168179, *[list_168180], **kwargs_168185)
        
        # Assigning a type to the variable 'call_assignment_162375' (line 2268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2268, 8), 'call_assignment_162375', sorted_call_result_168186)
        
        # Assigning a Call to a Name (line 2268):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2268, 8), 'int')
        # Processing the call keyword arguments
        kwargs_168190 = {}
        # Getting the type of 'call_assignment_162375' (line 2268)
        call_assignment_162375_168187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 8), 'call_assignment_162375', False)
        # Obtaining the member '__getitem__' of a type (line 2268)
        getitem___168188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2268, 8), call_assignment_162375_168187, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168191 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168188, *[int_168189], **kwargs_168190)
        
        # Assigning a type to the variable 'call_assignment_162376' (line 2268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2268, 8), 'call_assignment_162376', getitem___call_result_168191)
        
        # Assigning a Name to a Name (line 2268):
        # Getting the type of 'call_assignment_162376' (line 2268)
        call_assignment_162376_168192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 8), 'call_assignment_162376')
        # Assigning a type to the variable 'xmin' (line 2268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2268, 8), 'xmin', call_assignment_162376_168192)
        
        # Assigning a Call to a Name (line 2268):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2268, 8), 'int')
        # Processing the call keyword arguments
        kwargs_168196 = {}
        # Getting the type of 'call_assignment_162375' (line 2268)
        call_assignment_162375_168193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 8), 'call_assignment_162375', False)
        # Obtaining the member '__getitem__' of a type (line 2268)
        getitem___168194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2268, 8), call_assignment_162375_168193, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168197 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168194, *[int_168195], **kwargs_168196)
        
        # Assigning a type to the variable 'call_assignment_162377' (line 2268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2268, 8), 'call_assignment_162377', getitem___call_result_168197)
        
        # Assigning a Name to a Name (line 2268):
        # Getting the type of 'call_assignment_162377' (line 2268)
        call_assignment_162377_168198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 8), 'call_assignment_162377')
        # Assigning a type to the variable 'xmax' (line 2268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2268, 14), 'xmax', call_assignment_162377_168198)
        
        # Assigning a Call to a Tuple (line 2269):
        
        # Assigning a Call to a Name:
        
        # Call to sorted(...): (line 2269)
        # Processing the call arguments (line 2269)
        
        # Obtaining an instance of the builtin type 'list' (line 2269)
        list_168200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2269)
        # Adding element type (line 2269)
        # Getting the type of 'y0' (line 2269)
        y0_168201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 29), 'y0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2269, 28), list_168200, y0_168201)
        # Adding element type (line 2269)
        # Getting the type of 'y0' (line 2269)
        y0_168202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 33), 'y0', False)
        # Getting the type of 'height' (line 2269)
        height_168203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 38), 'height', False)
        # Applying the binary operator '+' (line 2269)
        result_add_168204 = python_operator(stypy.reporting.localization.Localization(__file__, 2269, 33), '+', y0_168202, height_168203)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2269, 28), list_168200, result_add_168204)
        
        # Processing the call keyword arguments (line 2269)
        kwargs_168205 = {}
        # Getting the type of 'sorted' (line 2269)
        sorted_168199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 21), 'sorted', False)
        # Calling sorted(args, kwargs) (line 2269)
        sorted_call_result_168206 = invoke(stypy.reporting.localization.Localization(__file__, 2269, 21), sorted_168199, *[list_168200], **kwargs_168205)
        
        # Assigning a type to the variable 'call_assignment_162378' (line 2269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 8), 'call_assignment_162378', sorted_call_result_168206)
        
        # Assigning a Call to a Name (line 2269):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 8), 'int')
        # Processing the call keyword arguments
        kwargs_168210 = {}
        # Getting the type of 'call_assignment_162378' (line 2269)
        call_assignment_162378_168207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 8), 'call_assignment_162378', False)
        # Obtaining the member '__getitem__' of a type (line 2269)
        getitem___168208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2269, 8), call_assignment_162378_168207, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168211 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168208, *[int_168209], **kwargs_168210)
        
        # Assigning a type to the variable 'call_assignment_162379' (line 2269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 8), 'call_assignment_162379', getitem___call_result_168211)
        
        # Assigning a Name to a Name (line 2269):
        # Getting the type of 'call_assignment_162379' (line 2269)
        call_assignment_162379_168212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 8), 'call_assignment_162379')
        # Assigning a type to the variable 'ymin' (line 2269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 8), 'ymin', call_assignment_162379_168212)
        
        # Assigning a Call to a Name (line 2269):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 8), 'int')
        # Processing the call keyword arguments
        kwargs_168216 = {}
        # Getting the type of 'call_assignment_162378' (line 2269)
        call_assignment_162378_168213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 8), 'call_assignment_162378', False)
        # Obtaining the member '__getitem__' of a type (line 2269)
        getitem___168214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2269, 8), call_assignment_162378_168213, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168217 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168214, *[int_168215], **kwargs_168216)
        
        # Assigning a type to the variable 'call_assignment_162380' (line 2269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 8), 'call_assignment_162380', getitem___call_result_168217)
        
        # Assigning a Name to a Name (line 2269):
        # Getting the type of 'call_assignment_162380' (line 2269)
        call_assignment_162380_168218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 8), 'call_assignment_162380')
        # Assigning a type to the variable 'ymax' (line 2269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 14), 'ymax', call_assignment_162380_168218)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2270)
        tuple_168219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2270, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2270)
        # Adding element type (line 2270)
        # Getting the type of 'xmin' (line 2270)
        xmin_168220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 15), 'xmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2270, 15), tuple_168219, xmin_168220)
        # Adding element type (line 2270)
        # Getting the type of 'xmax' (line 2270)
        xmax_168221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 21), 'xmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2270, 15), tuple_168219, xmax_168221)
        # Adding element type (line 2270)
        # Getting the type of 'ymin' (line 2270)
        ymin_168222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 27), 'ymin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2270, 15), tuple_168219, ymin_168222)
        # Adding element type (line 2270)
        # Getting the type of 'ymax' (line 2270)
        ymax_168223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 33), 'ymax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2270, 15), tuple_168219, ymax_168223)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 8), 'stypy_return_type', tuple_168219)
        
        # ################# End of 'extents(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'extents' in the type store
        # Getting the type of 'stypy_return_type' (line 2264)
        stypy_return_type_168224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168224)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'extents'
        return stypy_return_type_168224


    @norecursion
    def extents(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'extents'
        module_type_store = module_type_store.open_function_context('extents', 2272, 4, False)
        # Assigning a type to the variable 'self' (line 2273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2273, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RectangleSelector.extents.__dict__.__setitem__('stypy_localization', localization)
        RectangleSelector.extents.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RectangleSelector.extents.__dict__.__setitem__('stypy_type_store', module_type_store)
        RectangleSelector.extents.__dict__.__setitem__('stypy_function_name', 'RectangleSelector.extents')
        RectangleSelector.extents.__dict__.__setitem__('stypy_param_names_list', ['extents'])
        RectangleSelector.extents.__dict__.__setitem__('stypy_varargs_param_name', None)
        RectangleSelector.extents.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RectangleSelector.extents.__dict__.__setitem__('stypy_call_defaults', defaults)
        RectangleSelector.extents.__dict__.__setitem__('stypy_call_varargs', varargs)
        RectangleSelector.extents.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RectangleSelector.extents.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RectangleSelector.extents', ['extents'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'extents', localization, ['extents'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'extents(...)' code ##################

        
        # Call to draw_shape(...): (line 2275)
        # Processing the call arguments (line 2275)
        # Getting the type of 'extents' (line 2275)
        extents_168227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2275, 24), 'extents', False)
        # Processing the call keyword arguments (line 2275)
        kwargs_168228 = {}
        # Getting the type of 'self' (line 2275)
        self_168225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2275, 8), 'self', False)
        # Obtaining the member 'draw_shape' of a type (line 2275)
        draw_shape_168226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2275, 8), self_168225, 'draw_shape')
        # Calling draw_shape(args, kwargs) (line 2275)
        draw_shape_call_result_168229 = invoke(stypy.reporting.localization.Localization(__file__, 2275, 8), draw_shape_168226, *[extents_168227], **kwargs_168228)
        
        
        # Call to set_data(...): (line 2277)
        # Getting the type of 'self' (line 2277)
        self_168233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2277, 39), 'self', False)
        # Obtaining the member 'corners' of a type (line 2277)
        corners_168234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2277, 39), self_168233, 'corners')
        # Processing the call keyword arguments (line 2277)
        kwargs_168235 = {}
        # Getting the type of 'self' (line 2277)
        self_168230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2277, 8), 'self', False)
        # Obtaining the member '_corner_handles' of a type (line 2277)
        _corner_handles_168231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2277, 8), self_168230, '_corner_handles')
        # Obtaining the member 'set_data' of a type (line 2277)
        set_data_168232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2277, 8), _corner_handles_168231, 'set_data')
        # Calling set_data(args, kwargs) (line 2277)
        set_data_call_result_168236 = invoke(stypy.reporting.localization.Localization(__file__, 2277, 8), set_data_168232, *[corners_168234], **kwargs_168235)
        
        
        # Call to set_data(...): (line 2278)
        # Getting the type of 'self' (line 2278)
        self_168240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2278, 37), 'self', False)
        # Obtaining the member 'edge_centers' of a type (line 2278)
        edge_centers_168241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2278, 37), self_168240, 'edge_centers')
        # Processing the call keyword arguments (line 2278)
        kwargs_168242 = {}
        # Getting the type of 'self' (line 2278)
        self_168237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2278, 8), 'self', False)
        # Obtaining the member '_edge_handles' of a type (line 2278)
        _edge_handles_168238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2278, 8), self_168237, '_edge_handles')
        # Obtaining the member 'set_data' of a type (line 2278)
        set_data_168239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2278, 8), _edge_handles_168238, 'set_data')
        # Calling set_data(args, kwargs) (line 2278)
        set_data_call_result_168243 = invoke(stypy.reporting.localization.Localization(__file__, 2278, 8), set_data_168239, *[edge_centers_168241], **kwargs_168242)
        
        
        # Call to set_data(...): (line 2279)
        # Getting the type of 'self' (line 2279)
        self_168247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 38), 'self', False)
        # Obtaining the member 'center' of a type (line 2279)
        center_168248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2279, 38), self_168247, 'center')
        # Processing the call keyword arguments (line 2279)
        kwargs_168249 = {}
        # Getting the type of 'self' (line 2279)
        self_168244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 8), 'self', False)
        # Obtaining the member '_center_handle' of a type (line 2279)
        _center_handle_168245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2279, 8), self_168244, '_center_handle')
        # Obtaining the member 'set_data' of a type (line 2279)
        set_data_168246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2279, 8), _center_handle_168245, 'set_data')
        # Calling set_data(args, kwargs) (line 2279)
        set_data_call_result_168250 = invoke(stypy.reporting.localization.Localization(__file__, 2279, 8), set_data_168246, *[center_168248], **kwargs_168249)
        
        
        # Call to set_visible(...): (line 2280)
        # Processing the call arguments (line 2280)
        # Getting the type of 'self' (line 2280)
        self_168253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2280, 25), 'self', False)
        # Obtaining the member 'visible' of a type (line 2280)
        visible_168254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2280, 25), self_168253, 'visible')
        # Processing the call keyword arguments (line 2280)
        kwargs_168255 = {}
        # Getting the type of 'self' (line 2280)
        self_168251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2280, 8), 'self', False)
        # Obtaining the member 'set_visible' of a type (line 2280)
        set_visible_168252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2280, 8), self_168251, 'set_visible')
        # Calling set_visible(args, kwargs) (line 2280)
        set_visible_call_result_168256 = invoke(stypy.reporting.localization.Localization(__file__, 2280, 8), set_visible_168252, *[visible_168254], **kwargs_168255)
        
        
        # Call to update(...): (line 2281)
        # Processing the call keyword arguments (line 2281)
        kwargs_168259 = {}
        # Getting the type of 'self' (line 2281)
        self_168257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2281, 8), 'self', False)
        # Obtaining the member 'update' of a type (line 2281)
        update_168258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2281, 8), self_168257, 'update')
        # Calling update(args, kwargs) (line 2281)
        update_call_result_168260 = invoke(stypy.reporting.localization.Localization(__file__, 2281, 8), update_168258, *[], **kwargs_168259)
        
        
        # ################# End of 'extents(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'extents' in the type store
        # Getting the type of 'stypy_return_type' (line 2272)
        stypy_return_type_168261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2272, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168261)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'extents'
        return stypy_return_type_168261


    @norecursion
    def draw_shape(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_shape'
        module_type_store = module_type_store.open_function_context('draw_shape', 2283, 4, False)
        # Assigning a type to the variable 'self' (line 2284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2284, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RectangleSelector.draw_shape.__dict__.__setitem__('stypy_localization', localization)
        RectangleSelector.draw_shape.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RectangleSelector.draw_shape.__dict__.__setitem__('stypy_type_store', module_type_store)
        RectangleSelector.draw_shape.__dict__.__setitem__('stypy_function_name', 'RectangleSelector.draw_shape')
        RectangleSelector.draw_shape.__dict__.__setitem__('stypy_param_names_list', ['extents'])
        RectangleSelector.draw_shape.__dict__.__setitem__('stypy_varargs_param_name', None)
        RectangleSelector.draw_shape.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RectangleSelector.draw_shape.__dict__.__setitem__('stypy_call_defaults', defaults)
        RectangleSelector.draw_shape.__dict__.__setitem__('stypy_call_varargs', varargs)
        RectangleSelector.draw_shape.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RectangleSelector.draw_shape.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RectangleSelector.draw_shape', ['extents'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_shape', localization, ['extents'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_shape(...)' code ##################

        
        # Assigning a Name to a Tuple (line 2284):
        
        # Assigning a Subscript to a Name (line 2284):
        
        # Obtaining the type of the subscript
        int_168262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2284, 8), 'int')
        # Getting the type of 'extents' (line 2284)
        extents_168263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2284, 25), 'extents')
        # Obtaining the member '__getitem__' of a type (line 2284)
        getitem___168264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2284, 8), extents_168263, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2284)
        subscript_call_result_168265 = invoke(stypy.reporting.localization.Localization(__file__, 2284, 8), getitem___168264, int_168262)
        
        # Assigning a type to the variable 'tuple_var_assignment_162381' (line 2284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2284, 8), 'tuple_var_assignment_162381', subscript_call_result_168265)
        
        # Assigning a Subscript to a Name (line 2284):
        
        # Obtaining the type of the subscript
        int_168266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2284, 8), 'int')
        # Getting the type of 'extents' (line 2284)
        extents_168267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2284, 25), 'extents')
        # Obtaining the member '__getitem__' of a type (line 2284)
        getitem___168268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2284, 8), extents_168267, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2284)
        subscript_call_result_168269 = invoke(stypy.reporting.localization.Localization(__file__, 2284, 8), getitem___168268, int_168266)
        
        # Assigning a type to the variable 'tuple_var_assignment_162382' (line 2284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2284, 8), 'tuple_var_assignment_162382', subscript_call_result_168269)
        
        # Assigning a Subscript to a Name (line 2284):
        
        # Obtaining the type of the subscript
        int_168270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2284, 8), 'int')
        # Getting the type of 'extents' (line 2284)
        extents_168271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2284, 25), 'extents')
        # Obtaining the member '__getitem__' of a type (line 2284)
        getitem___168272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2284, 8), extents_168271, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2284)
        subscript_call_result_168273 = invoke(stypy.reporting.localization.Localization(__file__, 2284, 8), getitem___168272, int_168270)
        
        # Assigning a type to the variable 'tuple_var_assignment_162383' (line 2284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2284, 8), 'tuple_var_assignment_162383', subscript_call_result_168273)
        
        # Assigning a Subscript to a Name (line 2284):
        
        # Obtaining the type of the subscript
        int_168274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2284, 8), 'int')
        # Getting the type of 'extents' (line 2284)
        extents_168275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2284, 25), 'extents')
        # Obtaining the member '__getitem__' of a type (line 2284)
        getitem___168276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2284, 8), extents_168275, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2284)
        subscript_call_result_168277 = invoke(stypy.reporting.localization.Localization(__file__, 2284, 8), getitem___168276, int_168274)
        
        # Assigning a type to the variable 'tuple_var_assignment_162384' (line 2284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2284, 8), 'tuple_var_assignment_162384', subscript_call_result_168277)
        
        # Assigning a Name to a Name (line 2284):
        # Getting the type of 'tuple_var_assignment_162381' (line 2284)
        tuple_var_assignment_162381_168278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2284, 8), 'tuple_var_assignment_162381')
        # Assigning a type to the variable 'x0' (line 2284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2284, 8), 'x0', tuple_var_assignment_162381_168278)
        
        # Assigning a Name to a Name (line 2284):
        # Getting the type of 'tuple_var_assignment_162382' (line 2284)
        tuple_var_assignment_162382_168279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2284, 8), 'tuple_var_assignment_162382')
        # Assigning a type to the variable 'x1' (line 2284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2284, 12), 'x1', tuple_var_assignment_162382_168279)
        
        # Assigning a Name to a Name (line 2284):
        # Getting the type of 'tuple_var_assignment_162383' (line 2284)
        tuple_var_assignment_162383_168280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2284, 8), 'tuple_var_assignment_162383')
        # Assigning a type to the variable 'y0' (line 2284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2284, 16), 'y0', tuple_var_assignment_162383_168280)
        
        # Assigning a Name to a Name (line 2284):
        # Getting the type of 'tuple_var_assignment_162384' (line 2284)
        tuple_var_assignment_162384_168281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2284, 8), 'tuple_var_assignment_162384')
        # Assigning a type to the variable 'y1' (line 2284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2284, 20), 'y1', tuple_var_assignment_162384_168281)
        
        # Assigning a Call to a Tuple (line 2285):
        
        # Assigning a Call to a Name:
        
        # Call to sorted(...): (line 2285)
        # Processing the call arguments (line 2285)
        
        # Obtaining an instance of the builtin type 'list' (line 2285)
        list_168283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2285, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2285)
        # Adding element type (line 2285)
        # Getting the type of 'x0' (line 2285)
        x0_168284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 29), 'x0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2285, 28), list_168283, x0_168284)
        # Adding element type (line 2285)
        # Getting the type of 'x1' (line 2285)
        x1_168285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 33), 'x1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2285, 28), list_168283, x1_168285)
        
        # Processing the call keyword arguments (line 2285)
        kwargs_168286 = {}
        # Getting the type of 'sorted' (line 2285)
        sorted_168282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 21), 'sorted', False)
        # Calling sorted(args, kwargs) (line 2285)
        sorted_call_result_168287 = invoke(stypy.reporting.localization.Localization(__file__, 2285, 21), sorted_168282, *[list_168283], **kwargs_168286)
        
        # Assigning a type to the variable 'call_assignment_162385' (line 2285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2285, 8), 'call_assignment_162385', sorted_call_result_168287)
        
        # Assigning a Call to a Name (line 2285):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2285, 8), 'int')
        # Processing the call keyword arguments
        kwargs_168291 = {}
        # Getting the type of 'call_assignment_162385' (line 2285)
        call_assignment_162385_168288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 8), 'call_assignment_162385', False)
        # Obtaining the member '__getitem__' of a type (line 2285)
        getitem___168289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2285, 8), call_assignment_162385_168288, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168292 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168289, *[int_168290], **kwargs_168291)
        
        # Assigning a type to the variable 'call_assignment_162386' (line 2285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2285, 8), 'call_assignment_162386', getitem___call_result_168292)
        
        # Assigning a Name to a Name (line 2285):
        # Getting the type of 'call_assignment_162386' (line 2285)
        call_assignment_162386_168293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 8), 'call_assignment_162386')
        # Assigning a type to the variable 'xmin' (line 2285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2285, 8), 'xmin', call_assignment_162386_168293)
        
        # Assigning a Call to a Name (line 2285):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2285, 8), 'int')
        # Processing the call keyword arguments
        kwargs_168297 = {}
        # Getting the type of 'call_assignment_162385' (line 2285)
        call_assignment_162385_168294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 8), 'call_assignment_162385', False)
        # Obtaining the member '__getitem__' of a type (line 2285)
        getitem___168295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2285, 8), call_assignment_162385_168294, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168298 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168295, *[int_168296], **kwargs_168297)
        
        # Assigning a type to the variable 'call_assignment_162387' (line 2285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2285, 8), 'call_assignment_162387', getitem___call_result_168298)
        
        # Assigning a Name to a Name (line 2285):
        # Getting the type of 'call_assignment_162387' (line 2285)
        call_assignment_162387_168299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 8), 'call_assignment_162387')
        # Assigning a type to the variable 'xmax' (line 2285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2285, 14), 'xmax', call_assignment_162387_168299)
        
        # Assigning a Call to a Tuple (line 2286):
        
        # Assigning a Call to a Name:
        
        # Call to sorted(...): (line 2286)
        # Processing the call arguments (line 2286)
        
        # Obtaining an instance of the builtin type 'list' (line 2286)
        list_168301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2286, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2286)
        # Adding element type (line 2286)
        # Getting the type of 'y0' (line 2286)
        y0_168302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2286, 29), 'y0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2286, 28), list_168301, y0_168302)
        # Adding element type (line 2286)
        # Getting the type of 'y1' (line 2286)
        y1_168303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2286, 33), 'y1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2286, 28), list_168301, y1_168303)
        
        # Processing the call keyword arguments (line 2286)
        kwargs_168304 = {}
        # Getting the type of 'sorted' (line 2286)
        sorted_168300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2286, 21), 'sorted', False)
        # Calling sorted(args, kwargs) (line 2286)
        sorted_call_result_168305 = invoke(stypy.reporting.localization.Localization(__file__, 2286, 21), sorted_168300, *[list_168301], **kwargs_168304)
        
        # Assigning a type to the variable 'call_assignment_162388' (line 2286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2286, 8), 'call_assignment_162388', sorted_call_result_168305)
        
        # Assigning a Call to a Name (line 2286):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2286, 8), 'int')
        # Processing the call keyword arguments
        kwargs_168309 = {}
        # Getting the type of 'call_assignment_162388' (line 2286)
        call_assignment_162388_168306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2286, 8), 'call_assignment_162388', False)
        # Obtaining the member '__getitem__' of a type (line 2286)
        getitem___168307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2286, 8), call_assignment_162388_168306, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168310 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168307, *[int_168308], **kwargs_168309)
        
        # Assigning a type to the variable 'call_assignment_162389' (line 2286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2286, 8), 'call_assignment_162389', getitem___call_result_168310)
        
        # Assigning a Name to a Name (line 2286):
        # Getting the type of 'call_assignment_162389' (line 2286)
        call_assignment_162389_168311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2286, 8), 'call_assignment_162389')
        # Assigning a type to the variable 'ymin' (line 2286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2286, 8), 'ymin', call_assignment_162389_168311)
        
        # Assigning a Call to a Name (line 2286):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2286, 8), 'int')
        # Processing the call keyword arguments
        kwargs_168315 = {}
        # Getting the type of 'call_assignment_162388' (line 2286)
        call_assignment_162388_168312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2286, 8), 'call_assignment_162388', False)
        # Obtaining the member '__getitem__' of a type (line 2286)
        getitem___168313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2286, 8), call_assignment_162388_168312, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168316 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168313, *[int_168314], **kwargs_168315)
        
        # Assigning a type to the variable 'call_assignment_162390' (line 2286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2286, 8), 'call_assignment_162390', getitem___call_result_168316)
        
        # Assigning a Name to a Name (line 2286):
        # Getting the type of 'call_assignment_162390' (line 2286)
        call_assignment_162390_168317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2286, 8), 'call_assignment_162390')
        # Assigning a type to the variable 'ymax' (line 2286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2286, 14), 'ymax', call_assignment_162390_168317)
        
        # Assigning a Call to a Name (line 2287):
        
        # Assigning a Call to a Name (line 2287):
        
        # Call to sorted(...): (line 2287)
        # Processing the call arguments (line 2287)
        
        # Call to get_xlim(...): (line 2287)
        # Processing the call keyword arguments (line 2287)
        kwargs_168322 = {}
        # Getting the type of 'self' (line 2287)
        self_168319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 22), 'self', False)
        # Obtaining the member 'ax' of a type (line 2287)
        ax_168320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2287, 22), self_168319, 'ax')
        # Obtaining the member 'get_xlim' of a type (line 2287)
        get_xlim_168321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2287, 22), ax_168320, 'get_xlim')
        # Calling get_xlim(args, kwargs) (line 2287)
        get_xlim_call_result_168323 = invoke(stypy.reporting.localization.Localization(__file__, 2287, 22), get_xlim_168321, *[], **kwargs_168322)
        
        # Processing the call keyword arguments (line 2287)
        kwargs_168324 = {}
        # Getting the type of 'sorted' (line 2287)
        sorted_168318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 15), 'sorted', False)
        # Calling sorted(args, kwargs) (line 2287)
        sorted_call_result_168325 = invoke(stypy.reporting.localization.Localization(__file__, 2287, 15), sorted_168318, *[get_xlim_call_result_168323], **kwargs_168324)
        
        # Assigning a type to the variable 'xlim' (line 2287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2287, 8), 'xlim', sorted_call_result_168325)
        
        # Assigning a Call to a Name (line 2288):
        
        # Assigning a Call to a Name (line 2288):
        
        # Call to sorted(...): (line 2288)
        # Processing the call arguments (line 2288)
        
        # Call to get_ylim(...): (line 2288)
        # Processing the call keyword arguments (line 2288)
        kwargs_168330 = {}
        # Getting the type of 'self' (line 2288)
        self_168327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2288, 22), 'self', False)
        # Obtaining the member 'ax' of a type (line 2288)
        ax_168328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2288, 22), self_168327, 'ax')
        # Obtaining the member 'get_ylim' of a type (line 2288)
        get_ylim_168329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2288, 22), ax_168328, 'get_ylim')
        # Calling get_ylim(args, kwargs) (line 2288)
        get_ylim_call_result_168331 = invoke(stypy.reporting.localization.Localization(__file__, 2288, 22), get_ylim_168329, *[], **kwargs_168330)
        
        # Processing the call keyword arguments (line 2288)
        kwargs_168332 = {}
        # Getting the type of 'sorted' (line 2288)
        sorted_168326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2288, 15), 'sorted', False)
        # Calling sorted(args, kwargs) (line 2288)
        sorted_call_result_168333 = invoke(stypy.reporting.localization.Localization(__file__, 2288, 15), sorted_168326, *[get_ylim_call_result_168331], **kwargs_168332)
        
        # Assigning a type to the variable 'ylim' (line 2288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2288, 8), 'ylim', sorted_call_result_168333)
        
        # Assigning a Call to a Name (line 2290):
        
        # Assigning a Call to a Name (line 2290):
        
        # Call to max(...): (line 2290)
        # Processing the call arguments (line 2290)
        
        # Obtaining the type of the subscript
        int_168335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2290, 24), 'int')
        # Getting the type of 'xlim' (line 2290)
        xlim_168336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 19), 'xlim', False)
        # Obtaining the member '__getitem__' of a type (line 2290)
        getitem___168337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2290, 19), xlim_168336, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2290)
        subscript_call_result_168338 = invoke(stypy.reporting.localization.Localization(__file__, 2290, 19), getitem___168337, int_168335)
        
        # Getting the type of 'xmin' (line 2290)
        xmin_168339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 28), 'xmin', False)
        # Processing the call keyword arguments (line 2290)
        kwargs_168340 = {}
        # Getting the type of 'max' (line 2290)
        max_168334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 15), 'max', False)
        # Calling max(args, kwargs) (line 2290)
        max_call_result_168341 = invoke(stypy.reporting.localization.Localization(__file__, 2290, 15), max_168334, *[subscript_call_result_168338, xmin_168339], **kwargs_168340)
        
        # Assigning a type to the variable 'xmin' (line 2290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2290, 8), 'xmin', max_call_result_168341)
        
        # Assigning a Call to a Name (line 2291):
        
        # Assigning a Call to a Name (line 2291):
        
        # Call to max(...): (line 2291)
        # Processing the call arguments (line 2291)
        
        # Obtaining the type of the subscript
        int_168343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2291, 24), 'int')
        # Getting the type of 'ylim' (line 2291)
        ylim_168344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2291, 19), 'ylim', False)
        # Obtaining the member '__getitem__' of a type (line 2291)
        getitem___168345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2291, 19), ylim_168344, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2291)
        subscript_call_result_168346 = invoke(stypy.reporting.localization.Localization(__file__, 2291, 19), getitem___168345, int_168343)
        
        # Getting the type of 'ymin' (line 2291)
        ymin_168347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2291, 28), 'ymin', False)
        # Processing the call keyword arguments (line 2291)
        kwargs_168348 = {}
        # Getting the type of 'max' (line 2291)
        max_168342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2291, 15), 'max', False)
        # Calling max(args, kwargs) (line 2291)
        max_call_result_168349 = invoke(stypy.reporting.localization.Localization(__file__, 2291, 15), max_168342, *[subscript_call_result_168346, ymin_168347], **kwargs_168348)
        
        # Assigning a type to the variable 'ymin' (line 2291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2291, 8), 'ymin', max_call_result_168349)
        
        # Assigning a Call to a Name (line 2292):
        
        # Assigning a Call to a Name (line 2292):
        
        # Call to min(...): (line 2292)
        # Processing the call arguments (line 2292)
        # Getting the type of 'xmax' (line 2292)
        xmax_168351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 19), 'xmax', False)
        
        # Obtaining the type of the subscript
        int_168352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2292, 30), 'int')
        # Getting the type of 'xlim' (line 2292)
        xlim_168353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 25), 'xlim', False)
        # Obtaining the member '__getitem__' of a type (line 2292)
        getitem___168354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2292, 25), xlim_168353, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2292)
        subscript_call_result_168355 = invoke(stypy.reporting.localization.Localization(__file__, 2292, 25), getitem___168354, int_168352)
        
        # Processing the call keyword arguments (line 2292)
        kwargs_168356 = {}
        # Getting the type of 'min' (line 2292)
        min_168350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 15), 'min', False)
        # Calling min(args, kwargs) (line 2292)
        min_call_result_168357 = invoke(stypy.reporting.localization.Localization(__file__, 2292, 15), min_168350, *[xmax_168351, subscript_call_result_168355], **kwargs_168356)
        
        # Assigning a type to the variable 'xmax' (line 2292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2292, 8), 'xmax', min_call_result_168357)
        
        # Assigning a Call to a Name (line 2293):
        
        # Assigning a Call to a Name (line 2293):
        
        # Call to min(...): (line 2293)
        # Processing the call arguments (line 2293)
        # Getting the type of 'ymax' (line 2293)
        ymax_168359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 19), 'ymax', False)
        
        # Obtaining the type of the subscript
        int_168360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2293, 30), 'int')
        # Getting the type of 'ylim' (line 2293)
        ylim_168361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 25), 'ylim', False)
        # Obtaining the member '__getitem__' of a type (line 2293)
        getitem___168362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2293, 25), ylim_168361, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2293)
        subscript_call_result_168363 = invoke(stypy.reporting.localization.Localization(__file__, 2293, 25), getitem___168362, int_168360)
        
        # Processing the call keyword arguments (line 2293)
        kwargs_168364 = {}
        # Getting the type of 'min' (line 2293)
        min_168358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 15), 'min', False)
        # Calling min(args, kwargs) (line 2293)
        min_call_result_168365 = invoke(stypy.reporting.localization.Localization(__file__, 2293, 15), min_168358, *[ymax_168359, subscript_call_result_168363], **kwargs_168364)
        
        # Assigning a type to the variable 'ymax' (line 2293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2293, 8), 'ymax', min_call_result_168365)
        
        
        # Getting the type of 'self' (line 2295)
        self_168366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 11), 'self')
        # Obtaining the member 'drawtype' of a type (line 2295)
        drawtype_168367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2295, 11), self_168366, 'drawtype')
        unicode_168368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2295, 28), 'unicode', u'box')
        # Applying the binary operator '==' (line 2295)
        result_eq_168369 = python_operator(stypy.reporting.localization.Localization(__file__, 2295, 11), '==', drawtype_168367, unicode_168368)
        
        # Testing the type of an if condition (line 2295)
        if_condition_168370 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2295, 8), result_eq_168369)
        # Assigning a type to the variable 'if_condition_168370' (line 2295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 8), 'if_condition_168370', if_condition_168370)
        # SSA begins for if statement (line 2295)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_x(...): (line 2296)
        # Processing the call arguments (line 2296)
        # Getting the type of 'xmin' (line 2296)
        xmin_168374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 31), 'xmin', False)
        # Processing the call keyword arguments (line 2296)
        kwargs_168375 = {}
        # Getting the type of 'self' (line 2296)
        self_168371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 12), 'self', False)
        # Obtaining the member 'to_draw' of a type (line 2296)
        to_draw_168372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2296, 12), self_168371, 'to_draw')
        # Obtaining the member 'set_x' of a type (line 2296)
        set_x_168373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2296, 12), to_draw_168372, 'set_x')
        # Calling set_x(args, kwargs) (line 2296)
        set_x_call_result_168376 = invoke(stypy.reporting.localization.Localization(__file__, 2296, 12), set_x_168373, *[xmin_168374], **kwargs_168375)
        
        
        # Call to set_y(...): (line 2297)
        # Processing the call arguments (line 2297)
        # Getting the type of 'ymin' (line 2297)
        ymin_168380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 31), 'ymin', False)
        # Processing the call keyword arguments (line 2297)
        kwargs_168381 = {}
        # Getting the type of 'self' (line 2297)
        self_168377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 12), 'self', False)
        # Obtaining the member 'to_draw' of a type (line 2297)
        to_draw_168378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2297, 12), self_168377, 'to_draw')
        # Obtaining the member 'set_y' of a type (line 2297)
        set_y_168379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2297, 12), to_draw_168378, 'set_y')
        # Calling set_y(args, kwargs) (line 2297)
        set_y_call_result_168382 = invoke(stypy.reporting.localization.Localization(__file__, 2297, 12), set_y_168379, *[ymin_168380], **kwargs_168381)
        
        
        # Call to set_width(...): (line 2298)
        # Processing the call arguments (line 2298)
        # Getting the type of 'xmax' (line 2298)
        xmax_168386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 35), 'xmax', False)
        # Getting the type of 'xmin' (line 2298)
        xmin_168387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 42), 'xmin', False)
        # Applying the binary operator '-' (line 2298)
        result_sub_168388 = python_operator(stypy.reporting.localization.Localization(__file__, 2298, 35), '-', xmax_168386, xmin_168387)
        
        # Processing the call keyword arguments (line 2298)
        kwargs_168389 = {}
        # Getting the type of 'self' (line 2298)
        self_168383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 12), 'self', False)
        # Obtaining the member 'to_draw' of a type (line 2298)
        to_draw_168384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2298, 12), self_168383, 'to_draw')
        # Obtaining the member 'set_width' of a type (line 2298)
        set_width_168385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2298, 12), to_draw_168384, 'set_width')
        # Calling set_width(args, kwargs) (line 2298)
        set_width_call_result_168390 = invoke(stypy.reporting.localization.Localization(__file__, 2298, 12), set_width_168385, *[result_sub_168388], **kwargs_168389)
        
        
        # Call to set_height(...): (line 2299)
        # Processing the call arguments (line 2299)
        # Getting the type of 'ymax' (line 2299)
        ymax_168394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 36), 'ymax', False)
        # Getting the type of 'ymin' (line 2299)
        ymin_168395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 43), 'ymin', False)
        # Applying the binary operator '-' (line 2299)
        result_sub_168396 = python_operator(stypy.reporting.localization.Localization(__file__, 2299, 36), '-', ymax_168394, ymin_168395)
        
        # Processing the call keyword arguments (line 2299)
        kwargs_168397 = {}
        # Getting the type of 'self' (line 2299)
        self_168391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 12), 'self', False)
        # Obtaining the member 'to_draw' of a type (line 2299)
        to_draw_168392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2299, 12), self_168391, 'to_draw')
        # Obtaining the member 'set_height' of a type (line 2299)
        set_height_168393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2299, 12), to_draw_168392, 'set_height')
        # Calling set_height(args, kwargs) (line 2299)
        set_height_call_result_168398 = invoke(stypy.reporting.localization.Localization(__file__, 2299, 12), set_height_168393, *[result_sub_168396], **kwargs_168397)
        
        # SSA branch for the else part of an if statement (line 2295)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 2301)
        self_168399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 13), 'self')
        # Obtaining the member 'drawtype' of a type (line 2301)
        drawtype_168400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2301, 13), self_168399, 'drawtype')
        unicode_168401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2301, 30), 'unicode', u'line')
        # Applying the binary operator '==' (line 2301)
        result_eq_168402 = python_operator(stypy.reporting.localization.Localization(__file__, 2301, 13), '==', drawtype_168400, unicode_168401)
        
        # Testing the type of an if condition (line 2301)
        if_condition_168403 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2301, 13), result_eq_168402)
        # Assigning a type to the variable 'if_condition_168403' (line 2301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2301, 13), 'if_condition_168403', if_condition_168403)
        # SSA begins for if statement (line 2301)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_data(...): (line 2302)
        # Processing the call arguments (line 2302)
        
        # Obtaining an instance of the builtin type 'list' (line 2302)
        list_168407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2302, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2302)
        # Adding element type (line 2302)
        # Getting the type of 'xmin' (line 2302)
        xmin_168408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 35), 'xmin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2302, 34), list_168407, xmin_168408)
        # Adding element type (line 2302)
        # Getting the type of 'xmax' (line 2302)
        xmax_168409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 41), 'xmax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2302, 34), list_168407, xmax_168409)
        
        
        # Obtaining an instance of the builtin type 'list' (line 2302)
        list_168410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2302, 48), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2302)
        # Adding element type (line 2302)
        # Getting the type of 'ymin' (line 2302)
        ymin_168411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 49), 'ymin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2302, 48), list_168410, ymin_168411)
        # Adding element type (line 2302)
        # Getting the type of 'ymax' (line 2302)
        ymax_168412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 55), 'ymax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2302, 48), list_168410, ymax_168412)
        
        # Processing the call keyword arguments (line 2302)
        kwargs_168413 = {}
        # Getting the type of 'self' (line 2302)
        self_168404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 12), 'self', False)
        # Obtaining the member 'to_draw' of a type (line 2302)
        to_draw_168405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2302, 12), self_168404, 'to_draw')
        # Obtaining the member 'set_data' of a type (line 2302)
        set_data_168406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2302, 12), to_draw_168405, 'set_data')
        # Calling set_data(args, kwargs) (line 2302)
        set_data_call_result_168414 = invoke(stypy.reporting.localization.Localization(__file__, 2302, 12), set_data_168406, *[list_168407, list_168410], **kwargs_168413)
        
        # SSA join for if statement (line 2301)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2295)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'draw_shape(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_shape' in the type store
        # Getting the type of 'stypy_return_type' (line 2283)
        stypy_return_type_168415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2283, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168415)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_shape'
        return stypy_return_type_168415


    @norecursion
    def _set_active_handle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_active_handle'
        module_type_store = module_type_store.open_function_context('_set_active_handle', 2304, 4, False)
        # Assigning a type to the variable 'self' (line 2305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2305, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RectangleSelector._set_active_handle.__dict__.__setitem__('stypy_localization', localization)
        RectangleSelector._set_active_handle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RectangleSelector._set_active_handle.__dict__.__setitem__('stypy_type_store', module_type_store)
        RectangleSelector._set_active_handle.__dict__.__setitem__('stypy_function_name', 'RectangleSelector._set_active_handle')
        RectangleSelector._set_active_handle.__dict__.__setitem__('stypy_param_names_list', ['event'])
        RectangleSelector._set_active_handle.__dict__.__setitem__('stypy_varargs_param_name', None)
        RectangleSelector._set_active_handle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RectangleSelector._set_active_handle.__dict__.__setitem__('stypy_call_defaults', defaults)
        RectangleSelector._set_active_handle.__dict__.__setitem__('stypy_call_varargs', varargs)
        RectangleSelector._set_active_handle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RectangleSelector._set_active_handle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RectangleSelector._set_active_handle', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_active_handle', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_active_handle(...)' code ##################

        unicode_168416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2305, 8), 'unicode', u'Set active handle based on the location of the mouse event')
        
        # Assigning a Call to a Tuple (line 2307):
        
        # Assigning a Call to a Name:
        
        # Call to closest(...): (line 2307)
        # Processing the call arguments (line 2307)
        # Getting the type of 'event' (line 2307)
        event_168420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 53), 'event', False)
        # Obtaining the member 'x' of a type (line 2307)
        x_168421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 53), event_168420, 'x')
        # Getting the type of 'event' (line 2307)
        event_168422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 62), 'event', False)
        # Obtaining the member 'y' of a type (line 2307)
        y_168423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 62), event_168422, 'y')
        # Processing the call keyword arguments (line 2307)
        kwargs_168424 = {}
        # Getting the type of 'self' (line 2307)
        self_168417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 24), 'self', False)
        # Obtaining the member '_corner_handles' of a type (line 2307)
        _corner_handles_168418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 24), self_168417, '_corner_handles')
        # Obtaining the member 'closest' of a type (line 2307)
        closest_168419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 24), _corner_handles_168418, 'closest')
        # Calling closest(args, kwargs) (line 2307)
        closest_call_result_168425 = invoke(stypy.reporting.localization.Localization(__file__, 2307, 24), closest_168419, *[x_168421, y_168423], **kwargs_168424)
        
        # Assigning a type to the variable 'call_assignment_162391' (line 2307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 8), 'call_assignment_162391', closest_call_result_168425)
        
        # Assigning a Call to a Name (line 2307):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2307, 8), 'int')
        # Processing the call keyword arguments
        kwargs_168429 = {}
        # Getting the type of 'call_assignment_162391' (line 2307)
        call_assignment_162391_168426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 8), 'call_assignment_162391', False)
        # Obtaining the member '__getitem__' of a type (line 2307)
        getitem___168427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 8), call_assignment_162391_168426, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168430 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168427, *[int_168428], **kwargs_168429)
        
        # Assigning a type to the variable 'call_assignment_162392' (line 2307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 8), 'call_assignment_162392', getitem___call_result_168430)
        
        # Assigning a Name to a Name (line 2307):
        # Getting the type of 'call_assignment_162392' (line 2307)
        call_assignment_162392_168431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 8), 'call_assignment_162392')
        # Assigning a type to the variable 'c_idx' (line 2307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 8), 'c_idx', call_assignment_162392_168431)
        
        # Assigning a Call to a Name (line 2307):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2307, 8), 'int')
        # Processing the call keyword arguments
        kwargs_168435 = {}
        # Getting the type of 'call_assignment_162391' (line 2307)
        call_assignment_162391_168432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 8), 'call_assignment_162391', False)
        # Obtaining the member '__getitem__' of a type (line 2307)
        getitem___168433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 8), call_assignment_162391_168432, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168436 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168433, *[int_168434], **kwargs_168435)
        
        # Assigning a type to the variable 'call_assignment_162393' (line 2307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 8), 'call_assignment_162393', getitem___call_result_168436)
        
        # Assigning a Name to a Name (line 2307):
        # Getting the type of 'call_assignment_162393' (line 2307)
        call_assignment_162393_168437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 8), 'call_assignment_162393')
        # Assigning a type to the variable 'c_dist' (line 2307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 15), 'c_dist', call_assignment_162393_168437)
        
        # Assigning a Call to a Tuple (line 2308):
        
        # Assigning a Call to a Name:
        
        # Call to closest(...): (line 2308)
        # Processing the call arguments (line 2308)
        # Getting the type of 'event' (line 2308)
        event_168441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 51), 'event', False)
        # Obtaining the member 'x' of a type (line 2308)
        x_168442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2308, 51), event_168441, 'x')
        # Getting the type of 'event' (line 2308)
        event_168443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 60), 'event', False)
        # Obtaining the member 'y' of a type (line 2308)
        y_168444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2308, 60), event_168443, 'y')
        # Processing the call keyword arguments (line 2308)
        kwargs_168445 = {}
        # Getting the type of 'self' (line 2308)
        self_168438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 24), 'self', False)
        # Obtaining the member '_edge_handles' of a type (line 2308)
        _edge_handles_168439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2308, 24), self_168438, '_edge_handles')
        # Obtaining the member 'closest' of a type (line 2308)
        closest_168440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2308, 24), _edge_handles_168439, 'closest')
        # Calling closest(args, kwargs) (line 2308)
        closest_call_result_168446 = invoke(stypy.reporting.localization.Localization(__file__, 2308, 24), closest_168440, *[x_168442, y_168444], **kwargs_168445)
        
        # Assigning a type to the variable 'call_assignment_162394' (line 2308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2308, 8), 'call_assignment_162394', closest_call_result_168446)
        
        # Assigning a Call to a Name (line 2308):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2308, 8), 'int')
        # Processing the call keyword arguments
        kwargs_168450 = {}
        # Getting the type of 'call_assignment_162394' (line 2308)
        call_assignment_162394_168447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 8), 'call_assignment_162394', False)
        # Obtaining the member '__getitem__' of a type (line 2308)
        getitem___168448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2308, 8), call_assignment_162394_168447, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168451 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168448, *[int_168449], **kwargs_168450)
        
        # Assigning a type to the variable 'call_assignment_162395' (line 2308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2308, 8), 'call_assignment_162395', getitem___call_result_168451)
        
        # Assigning a Name to a Name (line 2308):
        # Getting the type of 'call_assignment_162395' (line 2308)
        call_assignment_162395_168452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 8), 'call_assignment_162395')
        # Assigning a type to the variable 'e_idx' (line 2308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2308, 8), 'e_idx', call_assignment_162395_168452)
        
        # Assigning a Call to a Name (line 2308):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2308, 8), 'int')
        # Processing the call keyword arguments
        kwargs_168456 = {}
        # Getting the type of 'call_assignment_162394' (line 2308)
        call_assignment_162394_168453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 8), 'call_assignment_162394', False)
        # Obtaining the member '__getitem__' of a type (line 2308)
        getitem___168454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2308, 8), call_assignment_162394_168453, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168457 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168454, *[int_168455], **kwargs_168456)
        
        # Assigning a type to the variable 'call_assignment_162396' (line 2308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2308, 8), 'call_assignment_162396', getitem___call_result_168457)
        
        # Assigning a Name to a Name (line 2308):
        # Getting the type of 'call_assignment_162396' (line 2308)
        call_assignment_162396_168458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 8), 'call_assignment_162396')
        # Assigning a type to the variable 'e_dist' (line 2308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2308, 15), 'e_dist', call_assignment_162396_168458)
        
        # Assigning a Call to a Tuple (line 2309):
        
        # Assigning a Call to a Name:
        
        # Call to closest(...): (line 2309)
        # Processing the call arguments (line 2309)
        # Getting the type of 'event' (line 2309)
        event_168462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 52), 'event', False)
        # Obtaining the member 'x' of a type (line 2309)
        x_168463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2309, 52), event_168462, 'x')
        # Getting the type of 'event' (line 2309)
        event_168464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 61), 'event', False)
        # Obtaining the member 'y' of a type (line 2309)
        y_168465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2309, 61), event_168464, 'y')
        # Processing the call keyword arguments (line 2309)
        kwargs_168466 = {}
        # Getting the type of 'self' (line 2309)
        self_168459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 24), 'self', False)
        # Obtaining the member '_center_handle' of a type (line 2309)
        _center_handle_168460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2309, 24), self_168459, '_center_handle')
        # Obtaining the member 'closest' of a type (line 2309)
        closest_168461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2309, 24), _center_handle_168460, 'closest')
        # Calling closest(args, kwargs) (line 2309)
        closest_call_result_168467 = invoke(stypy.reporting.localization.Localization(__file__, 2309, 24), closest_168461, *[x_168463, y_168465], **kwargs_168466)
        
        # Assigning a type to the variable 'call_assignment_162397' (line 2309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2309, 8), 'call_assignment_162397', closest_call_result_168467)
        
        # Assigning a Call to a Name (line 2309):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2309, 8), 'int')
        # Processing the call keyword arguments
        kwargs_168471 = {}
        # Getting the type of 'call_assignment_162397' (line 2309)
        call_assignment_162397_168468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 8), 'call_assignment_162397', False)
        # Obtaining the member '__getitem__' of a type (line 2309)
        getitem___168469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2309, 8), call_assignment_162397_168468, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168472 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168469, *[int_168470], **kwargs_168471)
        
        # Assigning a type to the variable 'call_assignment_162398' (line 2309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2309, 8), 'call_assignment_162398', getitem___call_result_168472)
        
        # Assigning a Name to a Name (line 2309):
        # Getting the type of 'call_assignment_162398' (line 2309)
        call_assignment_162398_168473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 8), 'call_assignment_162398')
        # Assigning a type to the variable 'm_idx' (line 2309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2309, 8), 'm_idx', call_assignment_162398_168473)
        
        # Assigning a Call to a Name (line 2309):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2309, 8), 'int')
        # Processing the call keyword arguments
        kwargs_168477 = {}
        # Getting the type of 'call_assignment_162397' (line 2309)
        call_assignment_162397_168474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 8), 'call_assignment_162397', False)
        # Obtaining the member '__getitem__' of a type (line 2309)
        getitem___168475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2309, 8), call_assignment_162397_168474, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168478 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168475, *[int_168476], **kwargs_168477)
        
        # Assigning a type to the variable 'call_assignment_162399' (line 2309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2309, 8), 'call_assignment_162399', getitem___call_result_168478)
        
        # Assigning a Name to a Name (line 2309):
        # Getting the type of 'call_assignment_162399' (line 2309)
        call_assignment_162399_168479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 8), 'call_assignment_162399')
        # Assigning a type to the variable 'm_dist' (line 2309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2309, 15), 'm_dist', call_assignment_162399_168479)
        
        
        unicode_168480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2311, 11), 'unicode', u'move')
        # Getting the type of 'self' (line 2311)
        self_168481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 21), 'self')
        # Obtaining the member 'state' of a type (line 2311)
        state_168482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2311, 21), self_168481, 'state')
        # Applying the binary operator 'in' (line 2311)
        result_contains_168483 = python_operator(stypy.reporting.localization.Localization(__file__, 2311, 11), 'in', unicode_168480, state_168482)
        
        # Testing the type of an if condition (line 2311)
        if_condition_168484 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2311, 8), result_contains_168483)
        # Assigning a type to the variable 'if_condition_168484' (line 2311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2311, 8), 'if_condition_168484', if_condition_168484)
        # SSA begins for if statement (line 2311)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Attribute (line 2312):
        
        # Assigning a Str to a Attribute (line 2312):
        unicode_168485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2312, 33), 'unicode', u'C')
        # Getting the type of 'self' (line 2312)
        self_168486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 12), 'self')
        # Setting the type of the member 'active_handle' of a type (line 2312)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2312, 12), self_168486, 'active_handle', unicode_168485)
        
        # Assigning a Attribute to a Attribute (line 2313):
        
        # Assigning a Attribute to a Attribute (line 2313):
        # Getting the type of 'self' (line 2313)
        self_168487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 37), 'self')
        # Obtaining the member 'extents' of a type (line 2313)
        extents_168488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2313, 37), self_168487, 'extents')
        # Getting the type of 'self' (line 2313)
        self_168489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 12), 'self')
        # Setting the type of the member '_extents_on_press' of a type (line 2313)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2313, 12), self_168489, '_extents_on_press', extents_168488)
        # SSA branch for the else part of an if statement (line 2311)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'm_dist' (line 2316)
        m_dist_168490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 13), 'm_dist')
        # Getting the type of 'self' (line 2316)
        self_168491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 22), 'self')
        # Obtaining the member 'maxdist' of a type (line 2316)
        maxdist_168492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2316, 22), self_168491, 'maxdist')
        int_168493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2316, 37), 'int')
        # Applying the binary operator '*' (line 2316)
        result_mul_168494 = python_operator(stypy.reporting.localization.Localization(__file__, 2316, 22), '*', maxdist_168492, int_168493)
        
        # Applying the binary operator '<' (line 2316)
        result_lt_168495 = python_operator(stypy.reporting.localization.Localization(__file__, 2316, 13), '<', m_dist_168490, result_mul_168494)
        
        # Testing the type of an if condition (line 2316)
        if_condition_168496 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2316, 13), result_lt_168495)
        # Assigning a type to the variable 'if_condition_168496' (line 2316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2316, 13), 'if_condition_168496', if_condition_168496)
        # SSA begins for if statement (line 2316)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Attribute (line 2317):
        
        # Assigning a Str to a Attribute (line 2317):
        unicode_168497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2317, 33), 'unicode', u'C')
        # Getting the type of 'self' (line 2317)
        self_168498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2317, 12), 'self')
        # Setting the type of the member 'active_handle' of a type (line 2317)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2317, 12), self_168498, 'active_handle', unicode_168497)
        # SSA branch for the else part of an if statement (line 2316)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'c_dist' (line 2318)
        c_dist_168499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 13), 'c_dist')
        # Getting the type of 'self' (line 2318)
        self_168500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 22), 'self')
        # Obtaining the member 'maxdist' of a type (line 2318)
        maxdist_168501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2318, 22), self_168500, 'maxdist')
        # Applying the binary operator '>' (line 2318)
        result_gt_168502 = python_operator(stypy.reporting.localization.Localization(__file__, 2318, 13), '>', c_dist_168499, maxdist_168501)
        
        
        # Getting the type of 'e_dist' (line 2318)
        e_dist_168503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 39), 'e_dist')
        # Getting the type of 'self' (line 2318)
        self_168504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 48), 'self')
        # Obtaining the member 'maxdist' of a type (line 2318)
        maxdist_168505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2318, 48), self_168504, 'maxdist')
        # Applying the binary operator '>' (line 2318)
        result_gt_168506 = python_operator(stypy.reporting.localization.Localization(__file__, 2318, 39), '>', e_dist_168503, maxdist_168505)
        
        # Applying the binary operator 'and' (line 2318)
        result_and_keyword_168507 = python_operator(stypy.reporting.localization.Localization(__file__, 2318, 13), 'and', result_gt_168502, result_gt_168506)
        
        # Testing the type of an if condition (line 2318)
        if_condition_168508 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2318, 13), result_and_keyword_168507)
        # Assigning a type to the variable 'if_condition_168508' (line 2318)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2318, 13), 'if_condition_168508', if_condition_168508)
        # SSA begins for if statement (line 2318)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 2319):
        
        # Assigning a Name to a Attribute (line 2319):
        # Getting the type of 'None' (line 2319)
        None_168509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2319, 33), 'None')
        # Getting the type of 'self' (line 2319)
        self_168510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2319, 12), 'self')
        # Setting the type of the member 'active_handle' of a type (line 2319)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2319, 12), self_168510, 'active_handle', None_168509)
        # Assigning a type to the variable 'stypy_return_type' (line 2320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2320, 12), 'stypy_return_type', types.NoneType)
        # SSA branch for the else part of an if statement (line 2318)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'c_dist' (line 2321)
        c_dist_168511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2321, 13), 'c_dist')
        # Getting the type of 'e_dist' (line 2321)
        e_dist_168512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2321, 22), 'e_dist')
        # Applying the binary operator '<' (line 2321)
        result_lt_168513 = python_operator(stypy.reporting.localization.Localization(__file__, 2321, 13), '<', c_dist_168511, e_dist_168512)
        
        # Testing the type of an if condition (line 2321)
        if_condition_168514 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2321, 13), result_lt_168513)
        # Assigning a type to the variable 'if_condition_168514' (line 2321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2321, 13), 'if_condition_168514', if_condition_168514)
        # SSA begins for if statement (line 2321)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Attribute (line 2322):
        
        # Assigning a Subscript to a Attribute (line 2322):
        
        # Obtaining the type of the subscript
        # Getting the type of 'c_idx' (line 2322)
        c_idx_168515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 52), 'c_idx')
        # Getting the type of 'self' (line 2322)
        self_168516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 33), 'self')
        # Obtaining the member '_corner_order' of a type (line 2322)
        _corner_order_168517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2322, 33), self_168516, '_corner_order')
        # Obtaining the member '__getitem__' of a type (line 2322)
        getitem___168518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2322, 33), _corner_order_168517, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2322)
        subscript_call_result_168519 = invoke(stypy.reporting.localization.Localization(__file__, 2322, 33), getitem___168518, c_idx_168515)
        
        # Getting the type of 'self' (line 2322)
        self_168520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 12), 'self')
        # Setting the type of the member 'active_handle' of a type (line 2322)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2322, 12), self_168520, 'active_handle', subscript_call_result_168519)
        # SSA branch for the else part of an if statement (line 2321)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Attribute (line 2324):
        
        # Assigning a Subscript to a Attribute (line 2324):
        
        # Obtaining the type of the subscript
        # Getting the type of 'e_idx' (line 2324)
        e_idx_168521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2324, 50), 'e_idx')
        # Getting the type of 'self' (line 2324)
        self_168522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2324, 33), 'self')
        # Obtaining the member '_edge_order' of a type (line 2324)
        _edge_order_168523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2324, 33), self_168522, '_edge_order')
        # Obtaining the member '__getitem__' of a type (line 2324)
        getitem___168524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2324, 33), _edge_order_168523, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2324)
        subscript_call_result_168525 = invoke(stypy.reporting.localization.Localization(__file__, 2324, 33), getitem___168524, e_idx_168521)
        
        # Getting the type of 'self' (line 2324)
        self_168526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2324, 12), 'self')
        # Setting the type of the member 'active_handle' of a type (line 2324)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2324, 12), self_168526, 'active_handle', subscript_call_result_168525)
        # SSA join for if statement (line 2321)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2318)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2316)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2311)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Tuple (line 2327):
        
        # Assigning a Subscript to a Name (line 2327):
        
        # Obtaining the type of the subscript
        int_168527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2327, 8), 'int')
        # Getting the type of 'self' (line 2327)
        self_168528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 25), 'self')
        # Obtaining the member 'extents' of a type (line 2327)
        extents_168529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2327, 25), self_168528, 'extents')
        # Obtaining the member '__getitem__' of a type (line 2327)
        getitem___168530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2327, 8), extents_168529, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2327)
        subscript_call_result_168531 = invoke(stypy.reporting.localization.Localization(__file__, 2327, 8), getitem___168530, int_168527)
        
        # Assigning a type to the variable 'tuple_var_assignment_162400' (line 2327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2327, 8), 'tuple_var_assignment_162400', subscript_call_result_168531)
        
        # Assigning a Subscript to a Name (line 2327):
        
        # Obtaining the type of the subscript
        int_168532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2327, 8), 'int')
        # Getting the type of 'self' (line 2327)
        self_168533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 25), 'self')
        # Obtaining the member 'extents' of a type (line 2327)
        extents_168534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2327, 25), self_168533, 'extents')
        # Obtaining the member '__getitem__' of a type (line 2327)
        getitem___168535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2327, 8), extents_168534, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2327)
        subscript_call_result_168536 = invoke(stypy.reporting.localization.Localization(__file__, 2327, 8), getitem___168535, int_168532)
        
        # Assigning a type to the variable 'tuple_var_assignment_162401' (line 2327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2327, 8), 'tuple_var_assignment_162401', subscript_call_result_168536)
        
        # Assigning a Subscript to a Name (line 2327):
        
        # Obtaining the type of the subscript
        int_168537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2327, 8), 'int')
        # Getting the type of 'self' (line 2327)
        self_168538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 25), 'self')
        # Obtaining the member 'extents' of a type (line 2327)
        extents_168539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2327, 25), self_168538, 'extents')
        # Obtaining the member '__getitem__' of a type (line 2327)
        getitem___168540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2327, 8), extents_168539, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2327)
        subscript_call_result_168541 = invoke(stypy.reporting.localization.Localization(__file__, 2327, 8), getitem___168540, int_168537)
        
        # Assigning a type to the variable 'tuple_var_assignment_162402' (line 2327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2327, 8), 'tuple_var_assignment_162402', subscript_call_result_168541)
        
        # Assigning a Subscript to a Name (line 2327):
        
        # Obtaining the type of the subscript
        int_168542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2327, 8), 'int')
        # Getting the type of 'self' (line 2327)
        self_168543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 25), 'self')
        # Obtaining the member 'extents' of a type (line 2327)
        extents_168544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2327, 25), self_168543, 'extents')
        # Obtaining the member '__getitem__' of a type (line 2327)
        getitem___168545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2327, 8), extents_168544, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2327)
        subscript_call_result_168546 = invoke(stypy.reporting.localization.Localization(__file__, 2327, 8), getitem___168545, int_168542)
        
        # Assigning a type to the variable 'tuple_var_assignment_162403' (line 2327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2327, 8), 'tuple_var_assignment_162403', subscript_call_result_168546)
        
        # Assigning a Name to a Name (line 2327):
        # Getting the type of 'tuple_var_assignment_162400' (line 2327)
        tuple_var_assignment_162400_168547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 8), 'tuple_var_assignment_162400')
        # Assigning a type to the variable 'x1' (line 2327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2327, 8), 'x1', tuple_var_assignment_162400_168547)
        
        # Assigning a Name to a Name (line 2327):
        # Getting the type of 'tuple_var_assignment_162401' (line 2327)
        tuple_var_assignment_162401_168548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 8), 'tuple_var_assignment_162401')
        # Assigning a type to the variable 'x2' (line 2327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2327, 12), 'x2', tuple_var_assignment_162401_168548)
        
        # Assigning a Name to a Name (line 2327):
        # Getting the type of 'tuple_var_assignment_162402' (line 2327)
        tuple_var_assignment_162402_168549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 8), 'tuple_var_assignment_162402')
        # Assigning a type to the variable 'y1' (line 2327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2327, 16), 'y1', tuple_var_assignment_162402_168549)
        
        # Assigning a Name to a Name (line 2327):
        # Getting the type of 'tuple_var_assignment_162403' (line 2327)
        tuple_var_assignment_162403_168550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 8), 'tuple_var_assignment_162403')
        # Assigning a type to the variable 'y2' (line 2327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2327, 20), 'y2', tuple_var_assignment_162403_168550)
        
        
        # Getting the type of 'self' (line 2329)
        self_168551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2329, 11), 'self')
        # Obtaining the member 'active_handle' of a type (line 2329)
        active_handle_168552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2329, 11), self_168551, 'active_handle')
        
        # Obtaining an instance of the builtin type 'list' (line 2329)
        list_168553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2329, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2329)
        # Adding element type (line 2329)
        unicode_168554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2329, 34), 'unicode', u'W')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2329, 33), list_168553, unicode_168554)
        # Adding element type (line 2329)
        unicode_168555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2329, 39), 'unicode', u'SW')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2329, 33), list_168553, unicode_168555)
        # Adding element type (line 2329)
        unicode_168556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2329, 45), 'unicode', u'NW')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2329, 33), list_168553, unicode_168556)
        
        # Applying the binary operator 'in' (line 2329)
        result_contains_168557 = python_operator(stypy.reporting.localization.Localization(__file__, 2329, 11), 'in', active_handle_168552, list_168553)
        
        # Testing the type of an if condition (line 2329)
        if_condition_168558 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2329, 8), result_contains_168557)
        # Assigning a type to the variable 'if_condition_168558' (line 2329)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2329, 8), 'if_condition_168558', if_condition_168558)
        # SSA begins for if statement (line 2329)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 2330):
        
        # Assigning a Name to a Name (line 2330):
        # Getting the type of 'x2' (line 2330)
        x2_168559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 21), 'x2')
        # Assigning a type to the variable 'tuple_assignment_162404' (line 2330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2330, 12), 'tuple_assignment_162404', x2_168559)
        
        # Assigning a Attribute to a Name (line 2330):
        # Getting the type of 'event' (line 2330)
        event_168560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 25), 'event')
        # Obtaining the member 'xdata' of a type (line 2330)
        xdata_168561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2330, 25), event_168560, 'xdata')
        # Assigning a type to the variable 'tuple_assignment_162405' (line 2330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2330, 12), 'tuple_assignment_162405', xdata_168561)
        
        # Assigning a Name to a Name (line 2330):
        # Getting the type of 'tuple_assignment_162404' (line 2330)
        tuple_assignment_162404_168562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 12), 'tuple_assignment_162404')
        # Assigning a type to the variable 'x1' (line 2330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2330, 12), 'x1', tuple_assignment_162404_168562)
        
        # Assigning a Name to a Name (line 2330):
        # Getting the type of 'tuple_assignment_162405' (line 2330)
        tuple_assignment_162405_168563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 12), 'tuple_assignment_162405')
        # Assigning a type to the variable 'x2' (line 2330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2330, 16), 'x2', tuple_assignment_162405_168563)
        # SSA join for if statement (line 2329)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 2331)
        self_168564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2331, 11), 'self')
        # Obtaining the member 'active_handle' of a type (line 2331)
        active_handle_168565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2331, 11), self_168564, 'active_handle')
        
        # Obtaining an instance of the builtin type 'list' (line 2331)
        list_168566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2331, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2331)
        # Adding element type (line 2331)
        unicode_168567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2331, 34), 'unicode', u'N')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2331, 33), list_168566, unicode_168567)
        # Adding element type (line 2331)
        unicode_168568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2331, 39), 'unicode', u'NW')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2331, 33), list_168566, unicode_168568)
        # Adding element type (line 2331)
        unicode_168569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2331, 45), 'unicode', u'NE')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2331, 33), list_168566, unicode_168569)
        
        # Applying the binary operator 'in' (line 2331)
        result_contains_168570 = python_operator(stypy.reporting.localization.Localization(__file__, 2331, 11), 'in', active_handle_168565, list_168566)
        
        # Testing the type of an if condition (line 2331)
        if_condition_168571 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2331, 8), result_contains_168570)
        # Assigning a type to the variable 'if_condition_168571' (line 2331)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2331, 8), 'if_condition_168571', if_condition_168571)
        # SSA begins for if statement (line 2331)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 2332):
        
        # Assigning a Name to a Name (line 2332):
        # Getting the type of 'y2' (line 2332)
        y2_168572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 21), 'y2')
        # Assigning a type to the variable 'tuple_assignment_162406' (line 2332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2332, 12), 'tuple_assignment_162406', y2_168572)
        
        # Assigning a Attribute to a Name (line 2332):
        # Getting the type of 'event' (line 2332)
        event_168573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 25), 'event')
        # Obtaining the member 'ydata' of a type (line 2332)
        ydata_168574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2332, 25), event_168573, 'ydata')
        # Assigning a type to the variable 'tuple_assignment_162407' (line 2332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2332, 12), 'tuple_assignment_162407', ydata_168574)
        
        # Assigning a Name to a Name (line 2332):
        # Getting the type of 'tuple_assignment_162406' (line 2332)
        tuple_assignment_162406_168575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 12), 'tuple_assignment_162406')
        # Assigning a type to the variable 'y1' (line 2332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2332, 12), 'y1', tuple_assignment_162406_168575)
        
        # Assigning a Name to a Name (line 2332):
        # Getting the type of 'tuple_assignment_162407' (line 2332)
        tuple_assignment_162407_168576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 12), 'tuple_assignment_162407')
        # Assigning a type to the variable 'y2' (line 2332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2332, 16), 'y2', tuple_assignment_162407_168576)
        # SSA join for if statement (line 2331)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Attribute (line 2333):
        
        # Assigning a Tuple to a Attribute (line 2333):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2333)
        tuple_168577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2333, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2333)
        # Adding element type (line 2333)
        # Getting the type of 'x1' (line 2333)
        x1_168578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 33), 'x1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2333, 33), tuple_168577, x1_168578)
        # Adding element type (line 2333)
        # Getting the type of 'x2' (line 2333)
        x2_168579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 37), 'x2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2333, 33), tuple_168577, x2_168579)
        # Adding element type (line 2333)
        # Getting the type of 'y1' (line 2333)
        y1_168580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 41), 'y1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2333, 33), tuple_168577, y1_168580)
        # Adding element type (line 2333)
        # Getting the type of 'y2' (line 2333)
        y2_168581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 45), 'y2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2333, 33), tuple_168577, y2_168581)
        
        # Getting the type of 'self' (line 2333)
        self_168582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 8), 'self')
        # Setting the type of the member '_extents_on_press' of a type (line 2333)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2333, 8), self_168582, '_extents_on_press', tuple_168577)
        
        # ################# End of '_set_active_handle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_active_handle' in the type store
        # Getting the type of 'stypy_return_type' (line 2304)
        stypy_return_type_168583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168583)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_active_handle'
        return stypy_return_type_168583


    @norecursion
    def geometry(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'geometry'
        module_type_store = module_type_store.open_function_context('geometry', 2335, 4, False)
        # Assigning a type to the variable 'self' (line 2336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2336, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RectangleSelector.geometry.__dict__.__setitem__('stypy_localization', localization)
        RectangleSelector.geometry.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RectangleSelector.geometry.__dict__.__setitem__('stypy_type_store', module_type_store)
        RectangleSelector.geometry.__dict__.__setitem__('stypy_function_name', 'RectangleSelector.geometry')
        RectangleSelector.geometry.__dict__.__setitem__('stypy_param_names_list', [])
        RectangleSelector.geometry.__dict__.__setitem__('stypy_varargs_param_name', None)
        RectangleSelector.geometry.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RectangleSelector.geometry.__dict__.__setitem__('stypy_call_defaults', defaults)
        RectangleSelector.geometry.__dict__.__setitem__('stypy_call_varargs', varargs)
        RectangleSelector.geometry.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RectangleSelector.geometry.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RectangleSelector.geometry', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'geometry', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'geometry(...)' code ##################

        unicode_168584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2343, (-1)), 'unicode', u'\n        Returns numpy.ndarray of shape (2,5) containing\n        x (``RectangleSelector.geometry[1,:]``) and\n        y (``RectangleSelector.geometry[0,:]``)\n        coordinates of the four corners of the rectangle starting\n        and ending in the top left corner.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 2344)
        unicode_168585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2344, 33), 'unicode', u'get_verts')
        # Getting the type of 'self' (line 2344)
        self_168586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2344, 19), 'self')
        # Obtaining the member 'to_draw' of a type (line 2344)
        to_draw_168587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2344, 19), self_168586, 'to_draw')
        
        (may_be_168588, more_types_in_union_168589) = may_provide_member(unicode_168585, to_draw_168587)

        if may_be_168588:

            if more_types_in_union_168589:
                # Runtime conditional SSA (line 2344)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'self' (line 2344)
            self_168590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2344, 8), 'self')
            # Obtaining the member 'to_draw' of a type (line 2344)
            to_draw_168591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2344, 8), self_168590, 'to_draw')
            # Setting the type of the member 'to_draw' of a type (line 2344)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2344, 8), self_168590, 'to_draw', remove_not_member_provider_from_union(to_draw_168587, u'get_verts'))
            
            # Assigning a Call to a Name (line 2345):
            
            # Assigning a Call to a Name (line 2345):
            
            # Call to inverted(...): (line 2345)
            # Processing the call keyword arguments (line 2345)
            kwargs_168596 = {}
            # Getting the type of 'self' (line 2345)
            self_168592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2345, 18), 'self', False)
            # Obtaining the member 'ax' of a type (line 2345)
            ax_168593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2345, 18), self_168592, 'ax')
            # Obtaining the member 'transData' of a type (line 2345)
            transData_168594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2345, 18), ax_168593, 'transData')
            # Obtaining the member 'inverted' of a type (line 2345)
            inverted_168595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2345, 18), transData_168594, 'inverted')
            # Calling inverted(args, kwargs) (line 2345)
            inverted_call_result_168597 = invoke(stypy.reporting.localization.Localization(__file__, 2345, 18), inverted_168595, *[], **kwargs_168596)
            
            # Assigning a type to the variable 'xfm' (line 2345)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2345, 12), 'xfm', inverted_call_result_168597)
            
            # Assigning a Attribute to a Tuple (line 2346):
            
            # Assigning a Subscript to a Name (line 2346):
            
            # Obtaining the type of the subscript
            int_168598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2346, 12), 'int')
            
            # Call to transform(...): (line 2346)
            # Processing the call arguments (line 2346)
            
            # Call to get_verts(...): (line 2346)
            # Processing the call keyword arguments (line 2346)
            kwargs_168604 = {}
            # Getting the type of 'self' (line 2346)
            self_168601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 33), 'self', False)
            # Obtaining the member 'to_draw' of a type (line 2346)
            to_draw_168602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2346, 33), self_168601, 'to_draw')
            # Obtaining the member 'get_verts' of a type (line 2346)
            get_verts_168603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2346, 33), to_draw_168602, 'get_verts')
            # Calling get_verts(args, kwargs) (line 2346)
            get_verts_call_result_168605 = invoke(stypy.reporting.localization.Localization(__file__, 2346, 33), get_verts_168603, *[], **kwargs_168604)
            
            # Processing the call keyword arguments (line 2346)
            kwargs_168606 = {}
            # Getting the type of 'xfm' (line 2346)
            xfm_168599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 19), 'xfm', False)
            # Obtaining the member 'transform' of a type (line 2346)
            transform_168600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2346, 19), xfm_168599, 'transform')
            # Calling transform(args, kwargs) (line 2346)
            transform_call_result_168607 = invoke(stypy.reporting.localization.Localization(__file__, 2346, 19), transform_168600, *[get_verts_call_result_168605], **kwargs_168606)
            
            # Obtaining the member 'T' of a type (line 2346)
            T_168608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2346, 19), transform_call_result_168607, 'T')
            # Obtaining the member '__getitem__' of a type (line 2346)
            getitem___168609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2346, 12), T_168608, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2346)
            subscript_call_result_168610 = invoke(stypy.reporting.localization.Localization(__file__, 2346, 12), getitem___168609, int_168598)
            
            # Assigning a type to the variable 'tuple_var_assignment_162408' (line 2346)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2346, 12), 'tuple_var_assignment_162408', subscript_call_result_168610)
            
            # Assigning a Subscript to a Name (line 2346):
            
            # Obtaining the type of the subscript
            int_168611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2346, 12), 'int')
            
            # Call to transform(...): (line 2346)
            # Processing the call arguments (line 2346)
            
            # Call to get_verts(...): (line 2346)
            # Processing the call keyword arguments (line 2346)
            kwargs_168617 = {}
            # Getting the type of 'self' (line 2346)
            self_168614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 33), 'self', False)
            # Obtaining the member 'to_draw' of a type (line 2346)
            to_draw_168615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2346, 33), self_168614, 'to_draw')
            # Obtaining the member 'get_verts' of a type (line 2346)
            get_verts_168616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2346, 33), to_draw_168615, 'get_verts')
            # Calling get_verts(args, kwargs) (line 2346)
            get_verts_call_result_168618 = invoke(stypy.reporting.localization.Localization(__file__, 2346, 33), get_verts_168616, *[], **kwargs_168617)
            
            # Processing the call keyword arguments (line 2346)
            kwargs_168619 = {}
            # Getting the type of 'xfm' (line 2346)
            xfm_168612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 19), 'xfm', False)
            # Obtaining the member 'transform' of a type (line 2346)
            transform_168613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2346, 19), xfm_168612, 'transform')
            # Calling transform(args, kwargs) (line 2346)
            transform_call_result_168620 = invoke(stypy.reporting.localization.Localization(__file__, 2346, 19), transform_168613, *[get_verts_call_result_168618], **kwargs_168619)
            
            # Obtaining the member 'T' of a type (line 2346)
            T_168621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2346, 19), transform_call_result_168620, 'T')
            # Obtaining the member '__getitem__' of a type (line 2346)
            getitem___168622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2346, 12), T_168621, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2346)
            subscript_call_result_168623 = invoke(stypy.reporting.localization.Localization(__file__, 2346, 12), getitem___168622, int_168611)
            
            # Assigning a type to the variable 'tuple_var_assignment_162409' (line 2346)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2346, 12), 'tuple_var_assignment_162409', subscript_call_result_168623)
            
            # Assigning a Name to a Name (line 2346):
            # Getting the type of 'tuple_var_assignment_162408' (line 2346)
            tuple_var_assignment_162408_168624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 12), 'tuple_var_assignment_162408')
            # Assigning a type to the variable 'y' (line 2346)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2346, 12), 'y', tuple_var_assignment_162408_168624)
            
            # Assigning a Name to a Name (line 2346):
            # Getting the type of 'tuple_var_assignment_162409' (line 2346)
            tuple_var_assignment_162409_168625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 12), 'tuple_var_assignment_162409')
            # Assigning a type to the variable 'x' (line 2346)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2346, 15), 'x', tuple_var_assignment_162409_168625)
            
            # Call to array(...): (line 2347)
            # Processing the call arguments (line 2347)
            
            # Obtaining an instance of the builtin type 'list' (line 2347)
            list_168628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2347, 28), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2347)
            # Adding element type (line 2347)
            # Getting the type of 'x' (line 2347)
            x_168629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2347, 29), 'x', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2347, 28), list_168628, x_168629)
            # Adding element type (line 2347)
            # Getting the type of 'y' (line 2347)
            y_168630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2347, 32), 'y', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2347, 28), list_168628, y_168630)
            
            # Processing the call keyword arguments (line 2347)
            kwargs_168631 = {}
            # Getting the type of 'np' (line 2347)
            np_168626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2347, 19), 'np', False)
            # Obtaining the member 'array' of a type (line 2347)
            array_168627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2347, 19), np_168626, 'array')
            # Calling array(args, kwargs) (line 2347)
            array_call_result_168632 = invoke(stypy.reporting.localization.Localization(__file__, 2347, 19), array_168627, *[list_168628], **kwargs_168631)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2347)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2347, 12), 'stypy_return_type', array_call_result_168632)

            if more_types_in_union_168589:
                # Runtime conditional SSA for else branch (line 2344)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_168588) or more_types_in_union_168589):
            # Getting the type of 'self' (line 2344)
            self_168633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2344, 8), 'self')
            # Obtaining the member 'to_draw' of a type (line 2344)
            to_draw_168634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2344, 8), self_168633, 'to_draw')
            # Setting the type of the member 'to_draw' of a type (line 2344)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2344, 8), self_168633, 'to_draw', remove_member_provider_from_union(to_draw_168587, u'get_verts'))
            
            # Call to array(...): (line 2349)
            # Processing the call arguments (line 2349)
            
            # Call to get_data(...): (line 2349)
            # Processing the call keyword arguments (line 2349)
            kwargs_168640 = {}
            # Getting the type of 'self' (line 2349)
            self_168637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2349, 28), 'self', False)
            # Obtaining the member 'to_draw' of a type (line 2349)
            to_draw_168638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2349, 28), self_168637, 'to_draw')
            # Obtaining the member 'get_data' of a type (line 2349)
            get_data_168639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2349, 28), to_draw_168638, 'get_data')
            # Calling get_data(args, kwargs) (line 2349)
            get_data_call_result_168641 = invoke(stypy.reporting.localization.Localization(__file__, 2349, 28), get_data_168639, *[], **kwargs_168640)
            
            # Processing the call keyword arguments (line 2349)
            kwargs_168642 = {}
            # Getting the type of 'np' (line 2349)
            np_168635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2349, 19), 'np', False)
            # Obtaining the member 'array' of a type (line 2349)
            array_168636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2349, 19), np_168635, 'array')
            # Calling array(args, kwargs) (line 2349)
            array_call_result_168643 = invoke(stypy.reporting.localization.Localization(__file__, 2349, 19), array_168636, *[get_data_call_result_168641], **kwargs_168642)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2349)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2349, 12), 'stypy_return_type', array_call_result_168643)

            if (may_be_168588 and more_types_in_union_168589):
                # SSA join for if statement (line 2344)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'geometry(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'geometry' in the type store
        # Getting the type of 'stypy_return_type' (line 2335)
        stypy_return_type_168644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2335, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168644)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'geometry'
        return stypy_return_type_168644


# Assigning a type to the variable 'RectangleSelector' (line 1927)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1927, 0), 'RectangleSelector', RectangleSelector)

# Assigning a Name to a Name (line 1965):
# Getting the type of 'Rectangle' (line 1965)
Rectangle_168645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 19), 'Rectangle')
# Getting the type of 'RectangleSelector'
RectangleSelector_168646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RectangleSelector')
# Setting the type of the member '_shape_klass' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RectangleSelector_168646, '_shape_klass', Rectangle_168645)
# Declaration of the 'EllipseSelector' class
# Getting the type of 'RectangleSelector' (line 2352)
RectangleSelector_168647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 22), 'RectangleSelector')

class EllipseSelector(RectangleSelector_168647, ):
    unicode_168648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2388, (-1)), 'unicode', u"\n    Select an elliptical region of an axes.\n\n    For the cursor to remain responsive you must keep a reference to\n    it.\n\n    Example usage::\n\n        from matplotlib.widgets import  EllipseSelector\n        from pylab import *\n\n        def onselect(eclick, erelease):\n          'eclick and erelease are matplotlib events at press and release'\n          print(' startposition : (%f, %f)' % (eclick.xdata, eclick.ydata))\n          print(' endposition   : (%f, %f)' % (erelease.xdata, erelease.ydata))\n          print(' used button   : ', eclick.button)\n\n        def toggle_selector(event):\n            print(' Key pressed.')\n            if event.key in ['Q', 'q'] and toggle_selector.ES.active:\n                print(' EllipseSelector deactivated.')\n                toggle_selector.RS.set_active(False)\n            if event.key in ['A', 'a'] and not toggle_selector.ES.active:\n                print(' EllipseSelector activated.')\n                toggle_selector.ES.set_active(True)\n\n        x = arange(100)/(99.0)\n        y = sin(x)\n        fig = figure\n        ax = subplot(111)\n        ax.plot(x,y)\n\n        toggle_selector.ES = EllipseSelector(ax, onselect, drawtype='line')\n        connect('key_press_event', toggle_selector)\n        show()\n    ")
    
    # Assigning a Name to a Name (line 2389):

    @norecursion
    def draw_shape(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_shape'
        module_type_store = module_type_store.open_function_context('draw_shape', 2391, 4, False)
        # Assigning a type to the variable 'self' (line 2392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2392, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EllipseSelector.draw_shape.__dict__.__setitem__('stypy_localization', localization)
        EllipseSelector.draw_shape.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EllipseSelector.draw_shape.__dict__.__setitem__('stypy_type_store', module_type_store)
        EllipseSelector.draw_shape.__dict__.__setitem__('stypy_function_name', 'EllipseSelector.draw_shape')
        EllipseSelector.draw_shape.__dict__.__setitem__('stypy_param_names_list', ['extents'])
        EllipseSelector.draw_shape.__dict__.__setitem__('stypy_varargs_param_name', None)
        EllipseSelector.draw_shape.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EllipseSelector.draw_shape.__dict__.__setitem__('stypy_call_defaults', defaults)
        EllipseSelector.draw_shape.__dict__.__setitem__('stypy_call_varargs', varargs)
        EllipseSelector.draw_shape.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EllipseSelector.draw_shape.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EllipseSelector.draw_shape', ['extents'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_shape', localization, ['extents'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_shape(...)' code ##################

        
        # Assigning a Name to a Tuple (line 2392):
        
        # Assigning a Subscript to a Name (line 2392):
        
        # Obtaining the type of the subscript
        int_168649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2392, 8), 'int')
        # Getting the type of 'extents' (line 2392)
        extents_168650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 25), 'extents')
        # Obtaining the member '__getitem__' of a type (line 2392)
        getitem___168651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2392, 8), extents_168650, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2392)
        subscript_call_result_168652 = invoke(stypy.reporting.localization.Localization(__file__, 2392, 8), getitem___168651, int_168649)
        
        # Assigning a type to the variable 'tuple_var_assignment_162410' (line 2392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2392, 8), 'tuple_var_assignment_162410', subscript_call_result_168652)
        
        # Assigning a Subscript to a Name (line 2392):
        
        # Obtaining the type of the subscript
        int_168653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2392, 8), 'int')
        # Getting the type of 'extents' (line 2392)
        extents_168654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 25), 'extents')
        # Obtaining the member '__getitem__' of a type (line 2392)
        getitem___168655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2392, 8), extents_168654, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2392)
        subscript_call_result_168656 = invoke(stypy.reporting.localization.Localization(__file__, 2392, 8), getitem___168655, int_168653)
        
        # Assigning a type to the variable 'tuple_var_assignment_162411' (line 2392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2392, 8), 'tuple_var_assignment_162411', subscript_call_result_168656)
        
        # Assigning a Subscript to a Name (line 2392):
        
        # Obtaining the type of the subscript
        int_168657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2392, 8), 'int')
        # Getting the type of 'extents' (line 2392)
        extents_168658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 25), 'extents')
        # Obtaining the member '__getitem__' of a type (line 2392)
        getitem___168659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2392, 8), extents_168658, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2392)
        subscript_call_result_168660 = invoke(stypy.reporting.localization.Localization(__file__, 2392, 8), getitem___168659, int_168657)
        
        # Assigning a type to the variable 'tuple_var_assignment_162412' (line 2392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2392, 8), 'tuple_var_assignment_162412', subscript_call_result_168660)
        
        # Assigning a Subscript to a Name (line 2392):
        
        # Obtaining the type of the subscript
        int_168661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2392, 8), 'int')
        # Getting the type of 'extents' (line 2392)
        extents_168662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 25), 'extents')
        # Obtaining the member '__getitem__' of a type (line 2392)
        getitem___168663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2392, 8), extents_168662, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2392)
        subscript_call_result_168664 = invoke(stypy.reporting.localization.Localization(__file__, 2392, 8), getitem___168663, int_168661)
        
        # Assigning a type to the variable 'tuple_var_assignment_162413' (line 2392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2392, 8), 'tuple_var_assignment_162413', subscript_call_result_168664)
        
        # Assigning a Name to a Name (line 2392):
        # Getting the type of 'tuple_var_assignment_162410' (line 2392)
        tuple_var_assignment_162410_168665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 8), 'tuple_var_assignment_162410')
        # Assigning a type to the variable 'x1' (line 2392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2392, 8), 'x1', tuple_var_assignment_162410_168665)
        
        # Assigning a Name to a Name (line 2392):
        # Getting the type of 'tuple_var_assignment_162411' (line 2392)
        tuple_var_assignment_162411_168666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 8), 'tuple_var_assignment_162411')
        # Assigning a type to the variable 'x2' (line 2392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2392, 12), 'x2', tuple_var_assignment_162411_168666)
        
        # Assigning a Name to a Name (line 2392):
        # Getting the type of 'tuple_var_assignment_162412' (line 2392)
        tuple_var_assignment_162412_168667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 8), 'tuple_var_assignment_162412')
        # Assigning a type to the variable 'y1' (line 2392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2392, 16), 'y1', tuple_var_assignment_162412_168667)
        
        # Assigning a Name to a Name (line 2392):
        # Getting the type of 'tuple_var_assignment_162413' (line 2392)
        tuple_var_assignment_162413_168668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 8), 'tuple_var_assignment_162413')
        # Assigning a type to the variable 'y2' (line 2392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2392, 20), 'y2', tuple_var_assignment_162413_168668)
        
        # Assigning a Call to a Tuple (line 2393):
        
        # Assigning a Call to a Name:
        
        # Call to sorted(...): (line 2393)
        # Processing the call arguments (line 2393)
        
        # Obtaining an instance of the builtin type 'list' (line 2393)
        list_168670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2393, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2393)
        # Adding element type (line 2393)
        # Getting the type of 'x1' (line 2393)
        x1_168671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 29), 'x1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2393, 28), list_168670, x1_168671)
        # Adding element type (line 2393)
        # Getting the type of 'x2' (line 2393)
        x2_168672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 33), 'x2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2393, 28), list_168670, x2_168672)
        
        # Processing the call keyword arguments (line 2393)
        kwargs_168673 = {}
        # Getting the type of 'sorted' (line 2393)
        sorted_168669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 21), 'sorted', False)
        # Calling sorted(args, kwargs) (line 2393)
        sorted_call_result_168674 = invoke(stypy.reporting.localization.Localization(__file__, 2393, 21), sorted_168669, *[list_168670], **kwargs_168673)
        
        # Assigning a type to the variable 'call_assignment_162414' (line 2393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2393, 8), 'call_assignment_162414', sorted_call_result_168674)
        
        # Assigning a Call to a Name (line 2393):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2393, 8), 'int')
        # Processing the call keyword arguments
        kwargs_168678 = {}
        # Getting the type of 'call_assignment_162414' (line 2393)
        call_assignment_162414_168675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 8), 'call_assignment_162414', False)
        # Obtaining the member '__getitem__' of a type (line 2393)
        getitem___168676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2393, 8), call_assignment_162414_168675, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168679 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168676, *[int_168677], **kwargs_168678)
        
        # Assigning a type to the variable 'call_assignment_162415' (line 2393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2393, 8), 'call_assignment_162415', getitem___call_result_168679)
        
        # Assigning a Name to a Name (line 2393):
        # Getting the type of 'call_assignment_162415' (line 2393)
        call_assignment_162415_168680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 8), 'call_assignment_162415')
        # Assigning a type to the variable 'xmin' (line 2393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2393, 8), 'xmin', call_assignment_162415_168680)
        
        # Assigning a Call to a Name (line 2393):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2393, 8), 'int')
        # Processing the call keyword arguments
        kwargs_168684 = {}
        # Getting the type of 'call_assignment_162414' (line 2393)
        call_assignment_162414_168681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 8), 'call_assignment_162414', False)
        # Obtaining the member '__getitem__' of a type (line 2393)
        getitem___168682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2393, 8), call_assignment_162414_168681, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168685 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168682, *[int_168683], **kwargs_168684)
        
        # Assigning a type to the variable 'call_assignment_162416' (line 2393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2393, 8), 'call_assignment_162416', getitem___call_result_168685)
        
        # Assigning a Name to a Name (line 2393):
        # Getting the type of 'call_assignment_162416' (line 2393)
        call_assignment_162416_168686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 8), 'call_assignment_162416')
        # Assigning a type to the variable 'xmax' (line 2393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2393, 14), 'xmax', call_assignment_162416_168686)
        
        # Assigning a Call to a Tuple (line 2394):
        
        # Assigning a Call to a Name:
        
        # Call to sorted(...): (line 2394)
        # Processing the call arguments (line 2394)
        
        # Obtaining an instance of the builtin type 'list' (line 2394)
        list_168688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2394, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2394)
        # Adding element type (line 2394)
        # Getting the type of 'y1' (line 2394)
        y1_168689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 29), 'y1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2394, 28), list_168688, y1_168689)
        # Adding element type (line 2394)
        # Getting the type of 'y2' (line 2394)
        y2_168690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 33), 'y2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2394, 28), list_168688, y2_168690)
        
        # Processing the call keyword arguments (line 2394)
        kwargs_168691 = {}
        # Getting the type of 'sorted' (line 2394)
        sorted_168687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 21), 'sorted', False)
        # Calling sorted(args, kwargs) (line 2394)
        sorted_call_result_168692 = invoke(stypy.reporting.localization.Localization(__file__, 2394, 21), sorted_168687, *[list_168688], **kwargs_168691)
        
        # Assigning a type to the variable 'call_assignment_162417' (line 2394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2394, 8), 'call_assignment_162417', sorted_call_result_168692)
        
        # Assigning a Call to a Name (line 2394):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2394, 8), 'int')
        # Processing the call keyword arguments
        kwargs_168696 = {}
        # Getting the type of 'call_assignment_162417' (line 2394)
        call_assignment_162417_168693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 8), 'call_assignment_162417', False)
        # Obtaining the member '__getitem__' of a type (line 2394)
        getitem___168694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2394, 8), call_assignment_162417_168693, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168697 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168694, *[int_168695], **kwargs_168696)
        
        # Assigning a type to the variable 'call_assignment_162418' (line 2394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2394, 8), 'call_assignment_162418', getitem___call_result_168697)
        
        # Assigning a Name to a Name (line 2394):
        # Getting the type of 'call_assignment_162418' (line 2394)
        call_assignment_162418_168698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 8), 'call_assignment_162418')
        # Assigning a type to the variable 'ymin' (line 2394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2394, 8), 'ymin', call_assignment_162418_168698)
        
        # Assigning a Call to a Name (line 2394):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2394, 8), 'int')
        # Processing the call keyword arguments
        kwargs_168702 = {}
        # Getting the type of 'call_assignment_162417' (line 2394)
        call_assignment_162417_168699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 8), 'call_assignment_162417', False)
        # Obtaining the member '__getitem__' of a type (line 2394)
        getitem___168700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2394, 8), call_assignment_162417_168699, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168703 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168700, *[int_168701], **kwargs_168702)
        
        # Assigning a type to the variable 'call_assignment_162419' (line 2394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2394, 8), 'call_assignment_162419', getitem___call_result_168703)
        
        # Assigning a Name to a Name (line 2394):
        # Getting the type of 'call_assignment_162419' (line 2394)
        call_assignment_162419_168704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 8), 'call_assignment_162419')
        # Assigning a type to the variable 'ymax' (line 2394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2394, 14), 'ymax', call_assignment_162419_168704)
        
        # Assigning a List to a Name (line 2395):
        
        # Assigning a List to a Name (line 2395):
        
        # Obtaining an instance of the builtin type 'list' (line 2395)
        list_168705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2395, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2395)
        # Adding element type (line 2395)
        # Getting the type of 'x1' (line 2395)
        x1_168706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 18), 'x1')
        # Getting the type of 'x2' (line 2395)
        x2_168707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 24), 'x2')
        # Getting the type of 'x1' (line 2395)
        x1_168708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 29), 'x1')
        # Applying the binary operator '-' (line 2395)
        result_sub_168709 = python_operator(stypy.reporting.localization.Localization(__file__, 2395, 24), '-', x2_168707, x1_168708)
        
        float_168710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2395, 35), 'float')
        # Applying the binary operator 'div' (line 2395)
        result_div_168711 = python_operator(stypy.reporting.localization.Localization(__file__, 2395, 23), 'div', result_sub_168709, float_168710)
        
        # Applying the binary operator '+' (line 2395)
        result_add_168712 = python_operator(stypy.reporting.localization.Localization(__file__, 2395, 18), '+', x1_168706, result_div_168711)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2395, 17), list_168705, result_add_168712)
        # Adding element type (line 2395)
        # Getting the type of 'y1' (line 2395)
        y1_168713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 39), 'y1')
        # Getting the type of 'y2' (line 2395)
        y2_168714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 45), 'y2')
        # Getting the type of 'y1' (line 2395)
        y1_168715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 50), 'y1')
        # Applying the binary operator '-' (line 2395)
        result_sub_168716 = python_operator(stypy.reporting.localization.Localization(__file__, 2395, 45), '-', y2_168714, y1_168715)
        
        float_168717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2395, 56), 'float')
        # Applying the binary operator 'div' (line 2395)
        result_div_168718 = python_operator(stypy.reporting.localization.Localization(__file__, 2395, 44), 'div', result_sub_168716, float_168717)
        
        # Applying the binary operator '+' (line 2395)
        result_add_168719 = python_operator(stypy.reporting.localization.Localization(__file__, 2395, 39), '+', y1_168713, result_div_168718)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2395, 17), list_168705, result_add_168719)
        
        # Assigning a type to the variable 'center' (line 2395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2395, 8), 'center', list_168705)
        
        # Assigning a BinOp to a Name (line 2396):
        
        # Assigning a BinOp to a Name (line 2396):
        # Getting the type of 'xmax' (line 2396)
        xmax_168720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 13), 'xmax')
        # Getting the type of 'xmin' (line 2396)
        xmin_168721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 20), 'xmin')
        # Applying the binary operator '-' (line 2396)
        result_sub_168722 = python_operator(stypy.reporting.localization.Localization(__file__, 2396, 13), '-', xmax_168720, xmin_168721)
        
        float_168723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2396, 28), 'float')
        # Applying the binary operator 'div' (line 2396)
        result_div_168724 = python_operator(stypy.reporting.localization.Localization(__file__, 2396, 12), 'div', result_sub_168722, float_168723)
        
        # Assigning a type to the variable 'a' (line 2396)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2396, 8), 'a', result_div_168724)
        
        # Assigning a BinOp to a Name (line 2397):
        
        # Assigning a BinOp to a Name (line 2397):
        # Getting the type of 'ymax' (line 2397)
        ymax_168725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 13), 'ymax')
        # Getting the type of 'ymin' (line 2397)
        ymin_168726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 20), 'ymin')
        # Applying the binary operator '-' (line 2397)
        result_sub_168727 = python_operator(stypy.reporting.localization.Localization(__file__, 2397, 13), '-', ymax_168725, ymin_168726)
        
        float_168728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2397, 28), 'float')
        # Applying the binary operator 'div' (line 2397)
        result_div_168729 = python_operator(stypy.reporting.localization.Localization(__file__, 2397, 12), 'div', result_sub_168727, float_168728)
        
        # Assigning a type to the variable 'b' (line 2397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2397, 8), 'b', result_div_168729)
        
        
        # Getting the type of 'self' (line 2399)
        self_168730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2399, 11), 'self')
        # Obtaining the member 'drawtype' of a type (line 2399)
        drawtype_168731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2399, 11), self_168730, 'drawtype')
        unicode_168732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2399, 28), 'unicode', u'box')
        # Applying the binary operator '==' (line 2399)
        result_eq_168733 = python_operator(stypy.reporting.localization.Localization(__file__, 2399, 11), '==', drawtype_168731, unicode_168732)
        
        # Testing the type of an if condition (line 2399)
        if_condition_168734 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2399, 8), result_eq_168733)
        # Assigning a type to the variable 'if_condition_168734' (line 2399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2399, 8), 'if_condition_168734', if_condition_168734)
        # SSA begins for if statement (line 2399)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 2400):
        
        # Assigning a Name to a Attribute (line 2400):
        # Getting the type of 'center' (line 2400)
        center_168735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2400, 34), 'center')
        # Getting the type of 'self' (line 2400)
        self_168736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2400, 12), 'self')
        # Obtaining the member 'to_draw' of a type (line 2400)
        to_draw_168737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2400, 12), self_168736, 'to_draw')
        # Setting the type of the member 'center' of a type (line 2400)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2400, 12), to_draw_168737, 'center', center_168735)
        
        # Assigning a BinOp to a Attribute (line 2401):
        
        # Assigning a BinOp to a Attribute (line 2401):
        int_168738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2401, 33), 'int')
        # Getting the type of 'a' (line 2401)
        a_168739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 37), 'a')
        # Applying the binary operator '*' (line 2401)
        result_mul_168740 = python_operator(stypy.reporting.localization.Localization(__file__, 2401, 33), '*', int_168738, a_168739)
        
        # Getting the type of 'self' (line 2401)
        self_168741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 12), 'self')
        # Obtaining the member 'to_draw' of a type (line 2401)
        to_draw_168742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2401, 12), self_168741, 'to_draw')
        # Setting the type of the member 'width' of a type (line 2401)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2401, 12), to_draw_168742, 'width', result_mul_168740)
        
        # Assigning a BinOp to a Attribute (line 2402):
        
        # Assigning a BinOp to a Attribute (line 2402):
        int_168743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2402, 34), 'int')
        # Getting the type of 'b' (line 2402)
        b_168744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2402, 38), 'b')
        # Applying the binary operator '*' (line 2402)
        result_mul_168745 = python_operator(stypy.reporting.localization.Localization(__file__, 2402, 34), '*', int_168743, b_168744)
        
        # Getting the type of 'self' (line 2402)
        self_168746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2402, 12), 'self')
        # Obtaining the member 'to_draw' of a type (line 2402)
        to_draw_168747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2402, 12), self_168746, 'to_draw')
        # Setting the type of the member 'height' of a type (line 2402)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2402, 12), to_draw_168747, 'height', result_mul_168745)
        # SSA branch for the else part of an if statement (line 2399)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 2404):
        
        # Assigning a BinOp to a Name (line 2404):
        
        # Call to arange(...): (line 2404)
        # Processing the call arguments (line 2404)
        int_168750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2404, 28), 'int')
        # Processing the call keyword arguments (line 2404)
        kwargs_168751 = {}
        # Getting the type of 'np' (line 2404)
        np_168748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2404, 18), 'np', False)
        # Obtaining the member 'arange' of a type (line 2404)
        arange_168749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2404, 18), np_168748, 'arange')
        # Calling arange(args, kwargs) (line 2404)
        arange_call_result_168752 = invoke(stypy.reporting.localization.Localization(__file__, 2404, 18), arange_168749, *[int_168750], **kwargs_168751)
        
        int_168753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2404, 34), 'int')
        # Applying the binary operator '*' (line 2404)
        result_mul_168754 = python_operator(stypy.reporting.localization.Localization(__file__, 2404, 18), '*', arange_call_result_168752, int_168753)
        
        # Getting the type of 'np' (line 2404)
        np_168755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2404, 39), 'np')
        # Obtaining the member 'pi' of a type (line 2404)
        pi_168756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2404, 39), np_168755, 'pi')
        # Applying the binary operator '*' (line 2404)
        result_mul_168757 = python_operator(stypy.reporting.localization.Localization(__file__, 2404, 37), '*', result_mul_168754, pi_168756)
        
        int_168758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2404, 47), 'int')
        # Applying the binary operator 'div' (line 2404)
        result_div_168759 = python_operator(stypy.reporting.localization.Localization(__file__, 2404, 45), 'div', result_mul_168757, int_168758)
        
        # Assigning a type to the variable 'rad' (line 2404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2404, 12), 'rad', result_div_168759)
        
        # Assigning a BinOp to a Name (line 2405):
        
        # Assigning a BinOp to a Name (line 2405):
        # Getting the type of 'a' (line 2405)
        a_168760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2405, 16), 'a')
        
        # Call to cos(...): (line 2405)
        # Processing the call arguments (line 2405)
        # Getting the type of 'rad' (line 2405)
        rad_168763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2405, 27), 'rad', False)
        # Processing the call keyword arguments (line 2405)
        kwargs_168764 = {}
        # Getting the type of 'np' (line 2405)
        np_168761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2405, 20), 'np', False)
        # Obtaining the member 'cos' of a type (line 2405)
        cos_168762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2405, 20), np_168761, 'cos')
        # Calling cos(args, kwargs) (line 2405)
        cos_call_result_168765 = invoke(stypy.reporting.localization.Localization(__file__, 2405, 20), cos_168762, *[rad_168763], **kwargs_168764)
        
        # Applying the binary operator '*' (line 2405)
        result_mul_168766 = python_operator(stypy.reporting.localization.Localization(__file__, 2405, 16), '*', a_168760, cos_call_result_168765)
        
        
        # Obtaining the type of the subscript
        int_168767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2405, 41), 'int')
        # Getting the type of 'center' (line 2405)
        center_168768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2405, 34), 'center')
        # Obtaining the member '__getitem__' of a type (line 2405)
        getitem___168769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2405, 34), center_168768, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2405)
        subscript_call_result_168770 = invoke(stypy.reporting.localization.Localization(__file__, 2405, 34), getitem___168769, int_168767)
        
        # Applying the binary operator '+' (line 2405)
        result_add_168771 = python_operator(stypy.reporting.localization.Localization(__file__, 2405, 16), '+', result_mul_168766, subscript_call_result_168770)
        
        # Assigning a type to the variable 'x' (line 2405)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2405, 12), 'x', result_add_168771)
        
        # Assigning a BinOp to a Name (line 2406):
        
        # Assigning a BinOp to a Name (line 2406):
        # Getting the type of 'b' (line 2406)
        b_168772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 16), 'b')
        
        # Call to sin(...): (line 2406)
        # Processing the call arguments (line 2406)
        # Getting the type of 'rad' (line 2406)
        rad_168775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 27), 'rad', False)
        # Processing the call keyword arguments (line 2406)
        kwargs_168776 = {}
        # Getting the type of 'np' (line 2406)
        np_168773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 20), 'np', False)
        # Obtaining the member 'sin' of a type (line 2406)
        sin_168774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2406, 20), np_168773, 'sin')
        # Calling sin(args, kwargs) (line 2406)
        sin_call_result_168777 = invoke(stypy.reporting.localization.Localization(__file__, 2406, 20), sin_168774, *[rad_168775], **kwargs_168776)
        
        # Applying the binary operator '*' (line 2406)
        result_mul_168778 = python_operator(stypy.reporting.localization.Localization(__file__, 2406, 16), '*', b_168772, sin_call_result_168777)
        
        
        # Obtaining the type of the subscript
        int_168779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2406, 41), 'int')
        # Getting the type of 'center' (line 2406)
        center_168780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 34), 'center')
        # Obtaining the member '__getitem__' of a type (line 2406)
        getitem___168781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2406, 34), center_168780, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2406)
        subscript_call_result_168782 = invoke(stypy.reporting.localization.Localization(__file__, 2406, 34), getitem___168781, int_168779)
        
        # Applying the binary operator '+' (line 2406)
        result_add_168783 = python_operator(stypy.reporting.localization.Localization(__file__, 2406, 16), '+', result_mul_168778, subscript_call_result_168782)
        
        # Assigning a type to the variable 'y' (line 2406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2406, 12), 'y', result_add_168783)
        
        # Call to set_data(...): (line 2407)
        # Processing the call arguments (line 2407)
        # Getting the type of 'x' (line 2407)
        x_168787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2407, 34), 'x', False)
        # Getting the type of 'y' (line 2407)
        y_168788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2407, 37), 'y', False)
        # Processing the call keyword arguments (line 2407)
        kwargs_168789 = {}
        # Getting the type of 'self' (line 2407)
        self_168784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2407, 12), 'self', False)
        # Obtaining the member 'to_draw' of a type (line 2407)
        to_draw_168785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2407, 12), self_168784, 'to_draw')
        # Obtaining the member 'set_data' of a type (line 2407)
        set_data_168786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2407, 12), to_draw_168785, 'set_data')
        # Calling set_data(args, kwargs) (line 2407)
        set_data_call_result_168790 = invoke(stypy.reporting.localization.Localization(__file__, 2407, 12), set_data_168786, *[x_168787, y_168788], **kwargs_168789)
        
        # SSA join for if statement (line 2399)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'draw_shape(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_shape' in the type store
        # Getting the type of 'stypy_return_type' (line 2391)
        stypy_return_type_168791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168791)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_shape'
        return stypy_return_type_168791


    @norecursion
    def _rect_bbox(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_rect_bbox'
        module_type_store = module_type_store.open_function_context('_rect_bbox', 2409, 4, False)
        # Assigning a type to the variable 'self' (line 2410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2410, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EllipseSelector._rect_bbox.__dict__.__setitem__('stypy_localization', localization)
        EllipseSelector._rect_bbox.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EllipseSelector._rect_bbox.__dict__.__setitem__('stypy_type_store', module_type_store)
        EllipseSelector._rect_bbox.__dict__.__setitem__('stypy_function_name', 'EllipseSelector._rect_bbox')
        EllipseSelector._rect_bbox.__dict__.__setitem__('stypy_param_names_list', [])
        EllipseSelector._rect_bbox.__dict__.__setitem__('stypy_varargs_param_name', None)
        EllipseSelector._rect_bbox.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EllipseSelector._rect_bbox.__dict__.__setitem__('stypy_call_defaults', defaults)
        EllipseSelector._rect_bbox.__dict__.__setitem__('stypy_call_varargs', varargs)
        EllipseSelector._rect_bbox.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EllipseSelector._rect_bbox.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EllipseSelector._rect_bbox', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_rect_bbox', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_rect_bbox(...)' code ##################

        
        
        # Getting the type of 'self' (line 2411)
        self_168792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 11), 'self')
        # Obtaining the member 'drawtype' of a type (line 2411)
        drawtype_168793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2411, 11), self_168792, 'drawtype')
        unicode_168794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2411, 28), 'unicode', u'box')
        # Applying the binary operator '==' (line 2411)
        result_eq_168795 = python_operator(stypy.reporting.localization.Localization(__file__, 2411, 11), '==', drawtype_168793, unicode_168794)
        
        # Testing the type of an if condition (line 2411)
        if_condition_168796 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2411, 8), result_eq_168795)
        # Assigning a type to the variable 'if_condition_168796' (line 2411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2411, 8), 'if_condition_168796', if_condition_168796)
        # SSA begins for if statement (line 2411)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 2412):
        
        # Assigning a Subscript to a Name (line 2412):
        
        # Obtaining the type of the subscript
        int_168797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2412, 12), 'int')
        # Getting the type of 'self' (line 2412)
        self_168798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 19), 'self')
        # Obtaining the member 'to_draw' of a type (line 2412)
        to_draw_168799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2412, 19), self_168798, 'to_draw')
        # Obtaining the member 'center' of a type (line 2412)
        center_168800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2412, 19), to_draw_168799, 'center')
        # Obtaining the member '__getitem__' of a type (line 2412)
        getitem___168801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2412, 12), center_168800, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2412)
        subscript_call_result_168802 = invoke(stypy.reporting.localization.Localization(__file__, 2412, 12), getitem___168801, int_168797)
        
        # Assigning a type to the variable 'tuple_var_assignment_162420' (line 2412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2412, 12), 'tuple_var_assignment_162420', subscript_call_result_168802)
        
        # Assigning a Subscript to a Name (line 2412):
        
        # Obtaining the type of the subscript
        int_168803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2412, 12), 'int')
        # Getting the type of 'self' (line 2412)
        self_168804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 19), 'self')
        # Obtaining the member 'to_draw' of a type (line 2412)
        to_draw_168805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2412, 19), self_168804, 'to_draw')
        # Obtaining the member 'center' of a type (line 2412)
        center_168806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2412, 19), to_draw_168805, 'center')
        # Obtaining the member '__getitem__' of a type (line 2412)
        getitem___168807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2412, 12), center_168806, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2412)
        subscript_call_result_168808 = invoke(stypy.reporting.localization.Localization(__file__, 2412, 12), getitem___168807, int_168803)
        
        # Assigning a type to the variable 'tuple_var_assignment_162421' (line 2412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2412, 12), 'tuple_var_assignment_162421', subscript_call_result_168808)
        
        # Assigning a Name to a Name (line 2412):
        # Getting the type of 'tuple_var_assignment_162420' (line 2412)
        tuple_var_assignment_162420_168809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 12), 'tuple_var_assignment_162420')
        # Assigning a type to the variable 'x' (line 2412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2412, 12), 'x', tuple_var_assignment_162420_168809)
        
        # Assigning a Name to a Name (line 2412):
        # Getting the type of 'tuple_var_assignment_162421' (line 2412)
        tuple_var_assignment_162421_168810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 12), 'tuple_var_assignment_162421')
        # Assigning a type to the variable 'y' (line 2412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2412, 15), 'y', tuple_var_assignment_162421_168810)
        
        # Assigning a Attribute to a Name (line 2413):
        
        # Assigning a Attribute to a Name (line 2413):
        # Getting the type of 'self' (line 2413)
        self_168811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2413, 20), 'self')
        # Obtaining the member 'to_draw' of a type (line 2413)
        to_draw_168812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2413, 20), self_168811, 'to_draw')
        # Obtaining the member 'width' of a type (line 2413)
        width_168813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2413, 20), to_draw_168812, 'width')
        # Assigning a type to the variable 'width' (line 2413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2413, 12), 'width', width_168813)
        
        # Assigning a Attribute to a Name (line 2414):
        
        # Assigning a Attribute to a Name (line 2414):
        # Getting the type of 'self' (line 2414)
        self_168814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2414, 21), 'self')
        # Obtaining the member 'to_draw' of a type (line 2414)
        to_draw_168815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2414, 21), self_168814, 'to_draw')
        # Obtaining the member 'height' of a type (line 2414)
        height_168816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2414, 21), to_draw_168815, 'height')
        # Assigning a type to the variable 'height' (line 2414)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2414, 12), 'height', height_168816)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2415)
        tuple_168817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2415, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2415)
        # Adding element type (line 2415)
        # Getting the type of 'x' (line 2415)
        x_168818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 19), 'x')
        # Getting the type of 'width' (line 2415)
        width_168819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 23), 'width')
        float_168820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2415, 31), 'float')
        # Applying the binary operator 'div' (line 2415)
        result_div_168821 = python_operator(stypy.reporting.localization.Localization(__file__, 2415, 23), 'div', width_168819, float_168820)
        
        # Applying the binary operator '-' (line 2415)
        result_sub_168822 = python_operator(stypy.reporting.localization.Localization(__file__, 2415, 19), '-', x_168818, result_div_168821)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2415, 19), tuple_168817, result_sub_168822)
        # Adding element type (line 2415)
        # Getting the type of 'y' (line 2415)
        y_168823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 35), 'y')
        # Getting the type of 'height' (line 2415)
        height_168824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 39), 'height')
        float_168825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2415, 48), 'float')
        # Applying the binary operator 'div' (line 2415)
        result_div_168826 = python_operator(stypy.reporting.localization.Localization(__file__, 2415, 39), 'div', height_168824, float_168825)
        
        # Applying the binary operator '-' (line 2415)
        result_sub_168827 = python_operator(stypy.reporting.localization.Localization(__file__, 2415, 35), '-', y_168823, result_div_168826)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2415, 19), tuple_168817, result_sub_168827)
        # Adding element type (line 2415)
        # Getting the type of 'width' (line 2415)
        width_168828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 52), 'width')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2415, 19), tuple_168817, width_168828)
        # Adding element type (line 2415)
        # Getting the type of 'height' (line 2415)
        height_168829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 59), 'height')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2415, 19), tuple_168817, height_168829)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2415)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2415, 12), 'stypy_return_type', tuple_168817)
        # SSA branch for the else part of an if statement (line 2411)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 2417):
        
        # Assigning a Call to a Name:
        
        # Call to get_data(...): (line 2417)
        # Processing the call keyword arguments (line 2417)
        kwargs_168833 = {}
        # Getting the type of 'self' (line 2417)
        self_168830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2417, 19), 'self', False)
        # Obtaining the member 'to_draw' of a type (line 2417)
        to_draw_168831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2417, 19), self_168830, 'to_draw')
        # Obtaining the member 'get_data' of a type (line 2417)
        get_data_168832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2417, 19), to_draw_168831, 'get_data')
        # Calling get_data(args, kwargs) (line 2417)
        get_data_call_result_168834 = invoke(stypy.reporting.localization.Localization(__file__, 2417, 19), get_data_168832, *[], **kwargs_168833)
        
        # Assigning a type to the variable 'call_assignment_162422' (line 2417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2417, 12), 'call_assignment_162422', get_data_call_result_168834)
        
        # Assigning a Call to a Name (line 2417):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2417, 12), 'int')
        # Processing the call keyword arguments
        kwargs_168838 = {}
        # Getting the type of 'call_assignment_162422' (line 2417)
        call_assignment_162422_168835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2417, 12), 'call_assignment_162422', False)
        # Obtaining the member '__getitem__' of a type (line 2417)
        getitem___168836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2417, 12), call_assignment_162422_168835, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168839 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168836, *[int_168837], **kwargs_168838)
        
        # Assigning a type to the variable 'call_assignment_162423' (line 2417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2417, 12), 'call_assignment_162423', getitem___call_result_168839)
        
        # Assigning a Name to a Name (line 2417):
        # Getting the type of 'call_assignment_162423' (line 2417)
        call_assignment_162423_168840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2417, 12), 'call_assignment_162423')
        # Assigning a type to the variable 'x' (line 2417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2417, 12), 'x', call_assignment_162423_168840)
        
        # Assigning a Call to a Name (line 2417):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_168843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2417, 12), 'int')
        # Processing the call keyword arguments
        kwargs_168844 = {}
        # Getting the type of 'call_assignment_162422' (line 2417)
        call_assignment_162422_168841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2417, 12), 'call_assignment_162422', False)
        # Obtaining the member '__getitem__' of a type (line 2417)
        getitem___168842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2417, 12), call_assignment_162422_168841, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_168845 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___168842, *[int_168843], **kwargs_168844)
        
        # Assigning a type to the variable 'call_assignment_162424' (line 2417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2417, 12), 'call_assignment_162424', getitem___call_result_168845)
        
        # Assigning a Name to a Name (line 2417):
        # Getting the type of 'call_assignment_162424' (line 2417)
        call_assignment_162424_168846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2417, 12), 'call_assignment_162424')
        # Assigning a type to the variable 'y' (line 2417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2417, 15), 'y', call_assignment_162424_168846)
        
        # Assigning a Tuple to a Tuple (line 2418):
        
        # Assigning a Call to a Name (line 2418):
        
        # Call to min(...): (line 2418)
        # Processing the call arguments (line 2418)
        # Getting the type of 'x' (line 2418)
        x_168848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 25), 'x', False)
        # Processing the call keyword arguments (line 2418)
        kwargs_168849 = {}
        # Getting the type of 'min' (line 2418)
        min_168847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 21), 'min', False)
        # Calling min(args, kwargs) (line 2418)
        min_call_result_168850 = invoke(stypy.reporting.localization.Localization(__file__, 2418, 21), min_168847, *[x_168848], **kwargs_168849)
        
        # Assigning a type to the variable 'tuple_assignment_162425' (line 2418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2418, 12), 'tuple_assignment_162425', min_call_result_168850)
        
        # Assigning a Call to a Name (line 2418):
        
        # Call to max(...): (line 2418)
        # Processing the call arguments (line 2418)
        # Getting the type of 'x' (line 2418)
        x_168852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 33), 'x', False)
        # Processing the call keyword arguments (line 2418)
        kwargs_168853 = {}
        # Getting the type of 'max' (line 2418)
        max_168851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 29), 'max', False)
        # Calling max(args, kwargs) (line 2418)
        max_call_result_168854 = invoke(stypy.reporting.localization.Localization(__file__, 2418, 29), max_168851, *[x_168852], **kwargs_168853)
        
        # Assigning a type to the variable 'tuple_assignment_162426' (line 2418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2418, 12), 'tuple_assignment_162426', max_call_result_168854)
        
        # Assigning a Name to a Name (line 2418):
        # Getting the type of 'tuple_assignment_162425' (line 2418)
        tuple_assignment_162425_168855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 12), 'tuple_assignment_162425')
        # Assigning a type to the variable 'x0' (line 2418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2418, 12), 'x0', tuple_assignment_162425_168855)
        
        # Assigning a Name to a Name (line 2418):
        # Getting the type of 'tuple_assignment_162426' (line 2418)
        tuple_assignment_162426_168856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 12), 'tuple_assignment_162426')
        # Assigning a type to the variable 'x1' (line 2418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2418, 16), 'x1', tuple_assignment_162426_168856)
        
        # Assigning a Tuple to a Tuple (line 2419):
        
        # Assigning a Call to a Name (line 2419):
        
        # Call to min(...): (line 2419)
        # Processing the call arguments (line 2419)
        # Getting the type of 'y' (line 2419)
        y_168858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 25), 'y', False)
        # Processing the call keyword arguments (line 2419)
        kwargs_168859 = {}
        # Getting the type of 'min' (line 2419)
        min_168857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 21), 'min', False)
        # Calling min(args, kwargs) (line 2419)
        min_call_result_168860 = invoke(stypy.reporting.localization.Localization(__file__, 2419, 21), min_168857, *[y_168858], **kwargs_168859)
        
        # Assigning a type to the variable 'tuple_assignment_162427' (line 2419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2419, 12), 'tuple_assignment_162427', min_call_result_168860)
        
        # Assigning a Call to a Name (line 2419):
        
        # Call to max(...): (line 2419)
        # Processing the call arguments (line 2419)
        # Getting the type of 'y' (line 2419)
        y_168862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 33), 'y', False)
        # Processing the call keyword arguments (line 2419)
        kwargs_168863 = {}
        # Getting the type of 'max' (line 2419)
        max_168861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 29), 'max', False)
        # Calling max(args, kwargs) (line 2419)
        max_call_result_168864 = invoke(stypy.reporting.localization.Localization(__file__, 2419, 29), max_168861, *[y_168862], **kwargs_168863)
        
        # Assigning a type to the variable 'tuple_assignment_162428' (line 2419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2419, 12), 'tuple_assignment_162428', max_call_result_168864)
        
        # Assigning a Name to a Name (line 2419):
        # Getting the type of 'tuple_assignment_162427' (line 2419)
        tuple_assignment_162427_168865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 12), 'tuple_assignment_162427')
        # Assigning a type to the variable 'y0' (line 2419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2419, 12), 'y0', tuple_assignment_162427_168865)
        
        # Assigning a Name to a Name (line 2419):
        # Getting the type of 'tuple_assignment_162428' (line 2419)
        tuple_assignment_162428_168866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 12), 'tuple_assignment_162428')
        # Assigning a type to the variable 'y1' (line 2419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2419, 16), 'y1', tuple_assignment_162428_168866)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2420)
        tuple_168867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2420, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2420)
        # Adding element type (line 2420)
        # Getting the type of 'x0' (line 2420)
        x0_168868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 19), 'x0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2420, 19), tuple_168867, x0_168868)
        # Adding element type (line 2420)
        # Getting the type of 'y0' (line 2420)
        y0_168869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 23), 'y0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2420, 19), tuple_168867, y0_168869)
        # Adding element type (line 2420)
        # Getting the type of 'x1' (line 2420)
        x1_168870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 27), 'x1')
        # Getting the type of 'x0' (line 2420)
        x0_168871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 32), 'x0')
        # Applying the binary operator '-' (line 2420)
        result_sub_168872 = python_operator(stypy.reporting.localization.Localization(__file__, 2420, 27), '-', x1_168870, x0_168871)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2420, 19), tuple_168867, result_sub_168872)
        # Adding element type (line 2420)
        # Getting the type of 'y1' (line 2420)
        y1_168873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 36), 'y1')
        # Getting the type of 'y0' (line 2420)
        y0_168874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 41), 'y0')
        # Applying the binary operator '-' (line 2420)
        result_sub_168875 = python_operator(stypy.reporting.localization.Localization(__file__, 2420, 36), '-', y1_168873, y0_168874)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2420, 19), tuple_168867, result_sub_168875)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2420, 12), 'stypy_return_type', tuple_168867)
        # SSA join for if statement (line 2411)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_rect_bbox(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_rect_bbox' in the type store
        # Getting the type of 'stypy_return_type' (line 2409)
        stypy_return_type_168876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168876)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_rect_bbox'
        return stypy_return_type_168876


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2352, 0, False)
        # Assigning a type to the variable 'self' (line 2353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2353, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EllipseSelector.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'EllipseSelector' (line 2352)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2352, 0), 'EllipseSelector', EllipseSelector)

# Assigning a Name to a Name (line 2389):
# Getting the type of 'Ellipse' (line 2389)
Ellipse_168877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 19), 'Ellipse')
# Getting the type of 'EllipseSelector'
EllipseSelector_168878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'EllipseSelector')
# Setting the type of the member '_shape_klass' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), EllipseSelector_168878, '_shape_klass', Ellipse_168877)
# Declaration of the 'LassoSelector' class
# Getting the type of '_SelectorWidget' (line 2423)
_SelectorWidget_168879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2423, 20), '_SelectorWidget')

class LassoSelector(_SelectorWidget_168879, ):
    unicode_168880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2464, (-1)), 'unicode', u'Selection curve of an arbitrary shape.\n\n    For the selector to remain responsive you must keep a reference to\n    it.\n\n    The selected path can be used in conjunction with\n    :func:`~matplotlib.path.Path.contains_point` to select\n    data points from an image.\n\n    In contrast to :class:`Lasso`, `LassoSelector` is written with an interface\n    similar to :class:`RectangleSelector` and :class:`SpanSelector` and will\n    continue to interact with the axes until disconnected.\n\n    Parameters:\n\n    *ax* : :class:`~matplotlib.axes.Axes`\n        The parent axes for the widget.\n    *onselect* : function\n        Whenever the lasso is released, the `onselect` function is called and\n        passed the vertices of the selected path.\n\n    Example usage::\n\n        ax = subplot(111)\n        ax.plot(x,y)\n\n        def onselect(verts):\n            print(verts)\n        lasso = LassoSelector(ax, onselect)\n\n     *button* is a list of integers indicating which mouse buttons should\n        be used for rectangle selection.  You can also specify a single\n        integer if only a single button is desired.  Default is *None*,\n        which does not limit which button can be used.\n\n        Note, typically:\n         1 = left mouse button\n         2 = center mouse button (scroll wheel)\n         3 = right mouse button\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2466)
        None_168881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 36), 'None')
        # Getting the type of 'True' (line 2466)
        True_168882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 50), 'True')
        # Getting the type of 'None' (line 2466)
        None_168883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 66), 'None')
        # Getting the type of 'None' (line 2467)
        None_168884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 24), 'None')
        defaults = [None_168881, True_168882, None_168883, None_168884]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2466, 4, False)
        # Assigning a type to the variable 'self' (line 2467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2467, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LassoSelector.__init__', ['ax', 'onselect', 'useblit', 'lineprops', 'button'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'onselect', 'useblit', 'lineprops', 'button'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 2468)
        # Processing the call arguments (line 2468)
        # Getting the type of 'self' (line 2468)
        self_168887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 33), 'self', False)
        # Getting the type of 'ax' (line 2468)
        ax_168888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 39), 'ax', False)
        # Getting the type of 'onselect' (line 2468)
        onselect_168889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 43), 'onselect', False)
        # Processing the call keyword arguments (line 2468)
        # Getting the type of 'useblit' (line 2468)
        useblit_168890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 61), 'useblit', False)
        keyword_168891 = useblit_168890
        # Getting the type of 'button' (line 2469)
        button_168892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2469, 40), 'button', False)
        keyword_168893 = button_168892
        kwargs_168894 = {'button': keyword_168893, 'useblit': keyword_168891}
        # Getting the type of '_SelectorWidget' (line 2468)
        _SelectorWidget_168885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 8), '_SelectorWidget', False)
        # Obtaining the member '__init__' of a type (line 2468)
        init___168886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2468, 8), _SelectorWidget_168885, '__init__')
        # Calling __init__(args, kwargs) (line 2468)
        init___call_result_168895 = invoke(stypy.reporting.localization.Localization(__file__, 2468, 8), init___168886, *[self_168887, ax_168888, onselect_168889], **kwargs_168894)
        
        
        # Assigning a Name to a Attribute (line 2471):
        
        # Assigning a Name to a Attribute (line 2471):
        # Getting the type of 'None' (line 2471)
        None_168896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 21), 'None')
        # Getting the type of 'self' (line 2471)
        self_168897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 8), 'self')
        # Setting the type of the member 'verts' of a type (line 2471)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2471, 8), self_168897, 'verts', None_168896)
        
        # Type idiom detected: calculating its left and rigth part (line 2473)
        # Getting the type of 'lineprops' (line 2473)
        lineprops_168898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 11), 'lineprops')
        # Getting the type of 'None' (line 2473)
        None_168899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 24), 'None')
        
        (may_be_168900, more_types_in_union_168901) = may_be_none(lineprops_168898, None_168899)

        if may_be_168900:

            if more_types_in_union_168901:
                # Runtime conditional SSA (line 2473)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 2474):
            
            # Assigning a Call to a Name (line 2474):
            
            # Call to dict(...): (line 2474)
            # Processing the call keyword arguments (line 2474)
            kwargs_168903 = {}
            # Getting the type of 'dict' (line 2474)
            dict_168902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2474, 24), 'dict', False)
            # Calling dict(args, kwargs) (line 2474)
            dict_call_result_168904 = invoke(stypy.reporting.localization.Localization(__file__, 2474, 24), dict_168902, *[], **kwargs_168903)
            
            # Assigning a type to the variable 'lineprops' (line 2474)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2474, 12), 'lineprops', dict_call_result_168904)

            if more_types_in_union_168901:
                # SSA join for if statement (line 2473)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'useblit' (line 2475)
        useblit_168905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2475, 11), 'useblit')
        # Testing the type of an if condition (line 2475)
        if_condition_168906 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2475, 8), useblit_168905)
        # Assigning a type to the variable 'if_condition_168906' (line 2475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2475, 8), 'if_condition_168906', if_condition_168906)
        # SSA begins for if statement (line 2475)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 2476):
        
        # Assigning a Name to a Subscript (line 2476):
        # Getting the type of 'True' (line 2476)
        True_168907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 36), 'True')
        # Getting the type of 'lineprops' (line 2476)
        lineprops_168908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 12), 'lineprops')
        unicode_168909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2476, 22), 'unicode', u'animated')
        # Storing an element on a container (line 2476)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2476, 12), lineprops_168908, (unicode_168909, True_168907))
        # SSA join for if statement (line 2475)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 2477):
        
        # Assigning a Call to a Attribute (line 2477):
        
        # Call to Line2D(...): (line 2477)
        # Processing the call arguments (line 2477)
        
        # Obtaining an instance of the builtin type 'list' (line 2477)
        list_168911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2477, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2477)
        
        
        # Obtaining an instance of the builtin type 'list' (line 2477)
        list_168912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2477, 31), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2477)
        
        # Processing the call keyword arguments (line 2477)
        # Getting the type of 'lineprops' (line 2477)
        lineprops_168913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 37), 'lineprops', False)
        kwargs_168914 = {'lineprops_168913': lineprops_168913}
        # Getting the type of 'Line2D' (line 2477)
        Line2D_168910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 20), 'Line2D', False)
        # Calling Line2D(args, kwargs) (line 2477)
        Line2D_call_result_168915 = invoke(stypy.reporting.localization.Localization(__file__, 2477, 20), Line2D_168910, *[list_168911, list_168912], **kwargs_168914)
        
        # Getting the type of 'self' (line 2477)
        self_168916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 8), 'self')
        # Setting the type of the member 'line' of a type (line 2477)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 8), self_168916, 'line', Line2D_call_result_168915)
        
        # Call to set_visible(...): (line 2478)
        # Processing the call arguments (line 2478)
        # Getting the type of 'False' (line 2478)
        False_168920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2478, 30), 'False', False)
        # Processing the call keyword arguments (line 2478)
        kwargs_168921 = {}
        # Getting the type of 'self' (line 2478)
        self_168917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2478, 8), 'self', False)
        # Obtaining the member 'line' of a type (line 2478)
        line_168918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2478, 8), self_168917, 'line')
        # Obtaining the member 'set_visible' of a type (line 2478)
        set_visible_168919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2478, 8), line_168918, 'set_visible')
        # Calling set_visible(args, kwargs) (line 2478)
        set_visible_call_result_168922 = invoke(stypy.reporting.localization.Localization(__file__, 2478, 8), set_visible_168919, *[False_168920], **kwargs_168921)
        
        
        # Call to add_line(...): (line 2479)
        # Processing the call arguments (line 2479)
        # Getting the type of 'self' (line 2479)
        self_168926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 25), 'self', False)
        # Obtaining the member 'line' of a type (line 2479)
        line_168927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2479, 25), self_168926, 'line')
        # Processing the call keyword arguments (line 2479)
        kwargs_168928 = {}
        # Getting the type of 'self' (line 2479)
        self_168923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 8), 'self', False)
        # Obtaining the member 'ax' of a type (line 2479)
        ax_168924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2479, 8), self_168923, 'ax')
        # Obtaining the member 'add_line' of a type (line 2479)
        add_line_168925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2479, 8), ax_168924, 'add_line')
        # Calling add_line(args, kwargs) (line 2479)
        add_line_call_result_168929 = invoke(stypy.reporting.localization.Localization(__file__, 2479, 8), add_line_168925, *[line_168927], **kwargs_168928)
        
        
        # Assigning a List to a Attribute (line 2480):
        
        # Assigning a List to a Attribute (line 2480):
        
        # Obtaining an instance of the builtin type 'list' (line 2480)
        list_168930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2480, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2480)
        # Adding element type (line 2480)
        # Getting the type of 'self' (line 2480)
        self_168931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 24), 'self')
        # Obtaining the member 'line' of a type (line 2480)
        line_168932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2480, 24), self_168931, 'line')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2480, 23), list_168930, line_168932)
        
        # Getting the type of 'self' (line 2480)
        self_168933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 8), 'self')
        # Setting the type of the member 'artists' of a type (line 2480)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2480, 8), self_168933, 'artists', list_168930)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def onpress(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'onpress'
        module_type_store = module_type_store.open_function_context('onpress', 2482, 4, False)
        # Assigning a type to the variable 'self' (line 2483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2483, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LassoSelector.onpress.__dict__.__setitem__('stypy_localization', localization)
        LassoSelector.onpress.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LassoSelector.onpress.__dict__.__setitem__('stypy_type_store', module_type_store)
        LassoSelector.onpress.__dict__.__setitem__('stypy_function_name', 'LassoSelector.onpress')
        LassoSelector.onpress.__dict__.__setitem__('stypy_param_names_list', ['event'])
        LassoSelector.onpress.__dict__.__setitem__('stypy_varargs_param_name', None)
        LassoSelector.onpress.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LassoSelector.onpress.__dict__.__setitem__('stypy_call_defaults', defaults)
        LassoSelector.onpress.__dict__.__setitem__('stypy_call_varargs', varargs)
        LassoSelector.onpress.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LassoSelector.onpress.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LassoSelector.onpress', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'onpress', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'onpress(...)' code ##################

        
        # Call to press(...): (line 2483)
        # Processing the call arguments (line 2483)
        # Getting the type of 'event' (line 2483)
        event_168936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2483, 19), 'event', False)
        # Processing the call keyword arguments (line 2483)
        kwargs_168937 = {}
        # Getting the type of 'self' (line 2483)
        self_168934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2483, 8), 'self', False)
        # Obtaining the member 'press' of a type (line 2483)
        press_168935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2483, 8), self_168934, 'press')
        # Calling press(args, kwargs) (line 2483)
        press_call_result_168938 = invoke(stypy.reporting.localization.Localization(__file__, 2483, 8), press_168935, *[event_168936], **kwargs_168937)
        
        
        # ################# End of 'onpress(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'onpress' in the type store
        # Getting the type of 'stypy_return_type' (line 2482)
        stypy_return_type_168939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168939)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'onpress'
        return stypy_return_type_168939


    @norecursion
    def _press(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_press'
        module_type_store = module_type_store.open_function_context('_press', 2485, 4, False)
        # Assigning a type to the variable 'self' (line 2486)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2486, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LassoSelector._press.__dict__.__setitem__('stypy_localization', localization)
        LassoSelector._press.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LassoSelector._press.__dict__.__setitem__('stypy_type_store', module_type_store)
        LassoSelector._press.__dict__.__setitem__('stypy_function_name', 'LassoSelector._press')
        LassoSelector._press.__dict__.__setitem__('stypy_param_names_list', ['event'])
        LassoSelector._press.__dict__.__setitem__('stypy_varargs_param_name', None)
        LassoSelector._press.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LassoSelector._press.__dict__.__setitem__('stypy_call_defaults', defaults)
        LassoSelector._press.__dict__.__setitem__('stypy_call_varargs', varargs)
        LassoSelector._press.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LassoSelector._press.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LassoSelector._press', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_press', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_press(...)' code ##################

        
        # Assigning a List to a Attribute (line 2486):
        
        # Assigning a List to a Attribute (line 2486):
        
        # Obtaining an instance of the builtin type 'list' (line 2486)
        list_168940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2486, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2486)
        # Adding element type (line 2486)
        
        # Call to _get_data(...): (line 2486)
        # Processing the call arguments (line 2486)
        # Getting the type of 'event' (line 2486)
        event_168943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2486, 37), 'event', False)
        # Processing the call keyword arguments (line 2486)
        kwargs_168944 = {}
        # Getting the type of 'self' (line 2486)
        self_168941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2486, 22), 'self', False)
        # Obtaining the member '_get_data' of a type (line 2486)
        _get_data_168942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2486, 22), self_168941, '_get_data')
        # Calling _get_data(args, kwargs) (line 2486)
        _get_data_call_result_168945 = invoke(stypy.reporting.localization.Localization(__file__, 2486, 22), _get_data_168942, *[event_168943], **kwargs_168944)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2486, 21), list_168940, _get_data_call_result_168945)
        
        # Getting the type of 'self' (line 2486)
        self_168946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2486, 8), 'self')
        # Setting the type of the member 'verts' of a type (line 2486)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2486, 8), self_168946, 'verts', list_168940)
        
        # Call to set_visible(...): (line 2487)
        # Processing the call arguments (line 2487)
        # Getting the type of 'True' (line 2487)
        True_168950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 30), 'True', False)
        # Processing the call keyword arguments (line 2487)
        kwargs_168951 = {}
        # Getting the type of 'self' (line 2487)
        self_168947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 8), 'self', False)
        # Obtaining the member 'line' of a type (line 2487)
        line_168948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2487, 8), self_168947, 'line')
        # Obtaining the member 'set_visible' of a type (line 2487)
        set_visible_168949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2487, 8), line_168948, 'set_visible')
        # Calling set_visible(args, kwargs) (line 2487)
        set_visible_call_result_168952 = invoke(stypy.reporting.localization.Localization(__file__, 2487, 8), set_visible_168949, *[True_168950], **kwargs_168951)
        
        
        # ################# End of '_press(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_press' in the type store
        # Getting the type of 'stypy_return_type' (line 2485)
        stypy_return_type_168953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2485, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168953)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_press'
        return stypy_return_type_168953


    @norecursion
    def onrelease(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'onrelease'
        module_type_store = module_type_store.open_function_context('onrelease', 2489, 4, False)
        # Assigning a type to the variable 'self' (line 2490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2490, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LassoSelector.onrelease.__dict__.__setitem__('stypy_localization', localization)
        LassoSelector.onrelease.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LassoSelector.onrelease.__dict__.__setitem__('stypy_type_store', module_type_store)
        LassoSelector.onrelease.__dict__.__setitem__('stypy_function_name', 'LassoSelector.onrelease')
        LassoSelector.onrelease.__dict__.__setitem__('stypy_param_names_list', ['event'])
        LassoSelector.onrelease.__dict__.__setitem__('stypy_varargs_param_name', None)
        LassoSelector.onrelease.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LassoSelector.onrelease.__dict__.__setitem__('stypy_call_defaults', defaults)
        LassoSelector.onrelease.__dict__.__setitem__('stypy_call_varargs', varargs)
        LassoSelector.onrelease.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LassoSelector.onrelease.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LassoSelector.onrelease', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'onrelease', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'onrelease(...)' code ##################

        
        # Call to release(...): (line 2490)
        # Processing the call arguments (line 2490)
        # Getting the type of 'event' (line 2490)
        event_168956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 21), 'event', False)
        # Processing the call keyword arguments (line 2490)
        kwargs_168957 = {}
        # Getting the type of 'self' (line 2490)
        self_168954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 8), 'self', False)
        # Obtaining the member 'release' of a type (line 2490)
        release_168955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2490, 8), self_168954, 'release')
        # Calling release(args, kwargs) (line 2490)
        release_call_result_168958 = invoke(stypy.reporting.localization.Localization(__file__, 2490, 8), release_168955, *[event_168956], **kwargs_168957)
        
        
        # ################# End of 'onrelease(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'onrelease' in the type store
        # Getting the type of 'stypy_return_type' (line 2489)
        stypy_return_type_168959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2489, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168959)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'onrelease'
        return stypy_return_type_168959


    @norecursion
    def _release(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_release'
        module_type_store = module_type_store.open_function_context('_release', 2492, 4, False)
        # Assigning a type to the variable 'self' (line 2493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2493, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LassoSelector._release.__dict__.__setitem__('stypy_localization', localization)
        LassoSelector._release.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LassoSelector._release.__dict__.__setitem__('stypy_type_store', module_type_store)
        LassoSelector._release.__dict__.__setitem__('stypy_function_name', 'LassoSelector._release')
        LassoSelector._release.__dict__.__setitem__('stypy_param_names_list', ['event'])
        LassoSelector._release.__dict__.__setitem__('stypy_varargs_param_name', None)
        LassoSelector._release.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LassoSelector._release.__dict__.__setitem__('stypy_call_defaults', defaults)
        LassoSelector._release.__dict__.__setitem__('stypy_call_varargs', varargs)
        LassoSelector._release.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LassoSelector._release.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LassoSelector._release', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_release', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_release(...)' code ##################

        
        
        # Getting the type of 'self' (line 2493)
        self_168960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2493, 11), 'self')
        # Obtaining the member 'verts' of a type (line 2493)
        verts_168961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2493, 11), self_168960, 'verts')
        # Getting the type of 'None' (line 2493)
        None_168962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2493, 29), 'None')
        # Applying the binary operator 'isnot' (line 2493)
        result_is_not_168963 = python_operator(stypy.reporting.localization.Localization(__file__, 2493, 11), 'isnot', verts_168961, None_168962)
        
        # Testing the type of an if condition (line 2493)
        if_condition_168964 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2493, 8), result_is_not_168963)
        # Assigning a type to the variable 'if_condition_168964' (line 2493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2493, 8), 'if_condition_168964', if_condition_168964)
        # SSA begins for if statement (line 2493)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2494)
        # Processing the call arguments (line 2494)
        
        # Call to _get_data(...): (line 2494)
        # Processing the call arguments (line 2494)
        # Getting the type of 'event' (line 2494)
        event_168970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 45), 'event', False)
        # Processing the call keyword arguments (line 2494)
        kwargs_168971 = {}
        # Getting the type of 'self' (line 2494)
        self_168968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 30), 'self', False)
        # Obtaining the member '_get_data' of a type (line 2494)
        _get_data_168969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2494, 30), self_168968, '_get_data')
        # Calling _get_data(args, kwargs) (line 2494)
        _get_data_call_result_168972 = invoke(stypy.reporting.localization.Localization(__file__, 2494, 30), _get_data_168969, *[event_168970], **kwargs_168971)
        
        # Processing the call keyword arguments (line 2494)
        kwargs_168973 = {}
        # Getting the type of 'self' (line 2494)
        self_168965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 12), 'self', False)
        # Obtaining the member 'verts' of a type (line 2494)
        verts_168966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2494, 12), self_168965, 'verts')
        # Obtaining the member 'append' of a type (line 2494)
        append_168967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2494, 12), verts_168966, 'append')
        # Calling append(args, kwargs) (line 2494)
        append_call_result_168974 = invoke(stypy.reporting.localization.Localization(__file__, 2494, 12), append_168967, *[_get_data_call_result_168972], **kwargs_168973)
        
        
        # Call to onselect(...): (line 2495)
        # Processing the call arguments (line 2495)
        # Getting the type of 'self' (line 2495)
        self_168977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 26), 'self', False)
        # Obtaining the member 'verts' of a type (line 2495)
        verts_168978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2495, 26), self_168977, 'verts')
        # Processing the call keyword arguments (line 2495)
        kwargs_168979 = {}
        # Getting the type of 'self' (line 2495)
        self_168975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 12), 'self', False)
        # Obtaining the member 'onselect' of a type (line 2495)
        onselect_168976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2495, 12), self_168975, 'onselect')
        # Calling onselect(args, kwargs) (line 2495)
        onselect_call_result_168980 = invoke(stypy.reporting.localization.Localization(__file__, 2495, 12), onselect_168976, *[verts_168978], **kwargs_168979)
        
        # SSA join for if statement (line 2493)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_data(...): (line 2496)
        # Processing the call arguments (line 2496)
        
        # Obtaining an instance of the builtin type 'list' (line 2496)
        list_168984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2496, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2496)
        # Adding element type (line 2496)
        
        # Obtaining an instance of the builtin type 'list' (line 2496)
        list_168985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2496, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2496)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2496, 27), list_168984, list_168985)
        # Adding element type (line 2496)
        
        # Obtaining an instance of the builtin type 'list' (line 2496)
        list_168986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2496, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2496)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2496, 27), list_168984, list_168986)
        
        # Processing the call keyword arguments (line 2496)
        kwargs_168987 = {}
        # Getting the type of 'self' (line 2496)
        self_168981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2496, 8), 'self', False)
        # Obtaining the member 'line' of a type (line 2496)
        line_168982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2496, 8), self_168981, 'line')
        # Obtaining the member 'set_data' of a type (line 2496)
        set_data_168983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2496, 8), line_168982, 'set_data')
        # Calling set_data(args, kwargs) (line 2496)
        set_data_call_result_168988 = invoke(stypy.reporting.localization.Localization(__file__, 2496, 8), set_data_168983, *[list_168984], **kwargs_168987)
        
        
        # Call to set_visible(...): (line 2497)
        # Processing the call arguments (line 2497)
        # Getting the type of 'False' (line 2497)
        False_168992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2497, 30), 'False', False)
        # Processing the call keyword arguments (line 2497)
        kwargs_168993 = {}
        # Getting the type of 'self' (line 2497)
        self_168989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2497, 8), 'self', False)
        # Obtaining the member 'line' of a type (line 2497)
        line_168990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2497, 8), self_168989, 'line')
        # Obtaining the member 'set_visible' of a type (line 2497)
        set_visible_168991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2497, 8), line_168990, 'set_visible')
        # Calling set_visible(args, kwargs) (line 2497)
        set_visible_call_result_168994 = invoke(stypy.reporting.localization.Localization(__file__, 2497, 8), set_visible_168991, *[False_168992], **kwargs_168993)
        
        
        # Assigning a Name to a Attribute (line 2498):
        
        # Assigning a Name to a Attribute (line 2498):
        # Getting the type of 'None' (line 2498)
        None_168995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2498, 21), 'None')
        # Getting the type of 'self' (line 2498)
        self_168996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2498, 8), 'self')
        # Setting the type of the member 'verts' of a type (line 2498)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2498, 8), self_168996, 'verts', None_168995)
        
        # ################# End of '_release(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_release' in the type store
        # Getting the type of 'stypy_return_type' (line 2492)
        stypy_return_type_168997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2492, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168997)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_release'
        return stypy_return_type_168997


    @norecursion
    def _onmove(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onmove'
        module_type_store = module_type_store.open_function_context('_onmove', 2500, 4, False)
        # Assigning a type to the variable 'self' (line 2501)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2501, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LassoSelector._onmove.__dict__.__setitem__('stypy_localization', localization)
        LassoSelector._onmove.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LassoSelector._onmove.__dict__.__setitem__('stypy_type_store', module_type_store)
        LassoSelector._onmove.__dict__.__setitem__('stypy_function_name', 'LassoSelector._onmove')
        LassoSelector._onmove.__dict__.__setitem__('stypy_param_names_list', ['event'])
        LassoSelector._onmove.__dict__.__setitem__('stypy_varargs_param_name', None)
        LassoSelector._onmove.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LassoSelector._onmove.__dict__.__setitem__('stypy_call_defaults', defaults)
        LassoSelector._onmove.__dict__.__setitem__('stypy_call_varargs', varargs)
        LassoSelector._onmove.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LassoSelector._onmove.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LassoSelector._onmove', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onmove', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onmove(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 2501)
        # Getting the type of 'self' (line 2501)
        self_168998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2501, 11), 'self')
        # Obtaining the member 'verts' of a type (line 2501)
        verts_168999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2501, 11), self_168998, 'verts')
        # Getting the type of 'None' (line 2501)
        None_169000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2501, 25), 'None')
        
        (may_be_169001, more_types_in_union_169002) = may_be_none(verts_168999, None_169000)

        if may_be_169001:

            if more_types_in_union_169002:
                # Runtime conditional SSA (line 2501)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 2502)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2502, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_169002:
                # SSA join for if statement (line 2501)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to append(...): (line 2503)
        # Processing the call arguments (line 2503)
        
        # Call to _get_data(...): (line 2503)
        # Processing the call arguments (line 2503)
        # Getting the type of 'event' (line 2503)
        event_169008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 41), 'event', False)
        # Processing the call keyword arguments (line 2503)
        kwargs_169009 = {}
        # Getting the type of 'self' (line 2503)
        self_169006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 26), 'self', False)
        # Obtaining the member '_get_data' of a type (line 2503)
        _get_data_169007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2503, 26), self_169006, '_get_data')
        # Calling _get_data(args, kwargs) (line 2503)
        _get_data_call_result_169010 = invoke(stypy.reporting.localization.Localization(__file__, 2503, 26), _get_data_169007, *[event_169008], **kwargs_169009)
        
        # Processing the call keyword arguments (line 2503)
        kwargs_169011 = {}
        # Getting the type of 'self' (line 2503)
        self_169003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 8), 'self', False)
        # Obtaining the member 'verts' of a type (line 2503)
        verts_169004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2503, 8), self_169003, 'verts')
        # Obtaining the member 'append' of a type (line 2503)
        append_169005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2503, 8), verts_169004, 'append')
        # Calling append(args, kwargs) (line 2503)
        append_call_result_169012 = invoke(stypy.reporting.localization.Localization(__file__, 2503, 8), append_169005, *[_get_data_call_result_169010], **kwargs_169011)
        
        
        # Call to set_data(...): (line 2505)
        # Processing the call arguments (line 2505)
        
        # Call to list(...): (line 2505)
        # Processing the call arguments (line 2505)
        
        # Call to zip(...): (line 2505)
        # Getting the type of 'self' (line 2505)
        self_169018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 37), 'self', False)
        # Obtaining the member 'verts' of a type (line 2505)
        verts_169019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2505, 37), self_169018, 'verts')
        # Processing the call keyword arguments (line 2505)
        kwargs_169020 = {}
        # Getting the type of 'zip' (line 2505)
        zip_169017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 32), 'zip', False)
        # Calling zip(args, kwargs) (line 2505)
        zip_call_result_169021 = invoke(stypy.reporting.localization.Localization(__file__, 2505, 32), zip_169017, *[verts_169019], **kwargs_169020)
        
        # Processing the call keyword arguments (line 2505)
        kwargs_169022 = {}
        # Getting the type of 'list' (line 2505)
        list_169016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 27), 'list', False)
        # Calling list(args, kwargs) (line 2505)
        list_call_result_169023 = invoke(stypy.reporting.localization.Localization(__file__, 2505, 27), list_169016, *[zip_call_result_169021], **kwargs_169022)
        
        # Processing the call keyword arguments (line 2505)
        kwargs_169024 = {}
        # Getting the type of 'self' (line 2505)
        self_169013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 8), 'self', False)
        # Obtaining the member 'line' of a type (line 2505)
        line_169014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2505, 8), self_169013, 'line')
        # Obtaining the member 'set_data' of a type (line 2505)
        set_data_169015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2505, 8), line_169014, 'set_data')
        # Calling set_data(args, kwargs) (line 2505)
        set_data_call_result_169025 = invoke(stypy.reporting.localization.Localization(__file__, 2505, 8), set_data_169015, *[list_call_result_169023], **kwargs_169024)
        
        
        # Call to update(...): (line 2507)
        # Processing the call keyword arguments (line 2507)
        kwargs_169028 = {}
        # Getting the type of 'self' (line 2507)
        self_169026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2507, 8), 'self', False)
        # Obtaining the member 'update' of a type (line 2507)
        update_169027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2507, 8), self_169026, 'update')
        # Calling update(args, kwargs) (line 2507)
        update_call_result_169029 = invoke(stypy.reporting.localization.Localization(__file__, 2507, 8), update_169027, *[], **kwargs_169028)
        
        
        # ################# End of '_onmove(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onmove' in the type store
        # Getting the type of 'stypy_return_type' (line 2500)
        stypy_return_type_169030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_169030)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onmove'
        return stypy_return_type_169030


# Assigning a type to the variable 'LassoSelector' (line 2423)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2423, 0), 'LassoSelector', LassoSelector)
# Declaration of the 'PolygonSelector' class
# Getting the type of '_SelectorWidget' (line 2510)
_SelectorWidget_169031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2510, 22), '_SelectorWidget')

class PolygonSelector(_SelectorWidget_169031, ):
    unicode_169032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2548, (-1)), 'unicode', u"Select a polygon region of an axes.\n\n    Place vertices with each mouse click, and make the selection by completing\n    the polygon (clicking on the first vertex). Hold the *ctrl* key and click\n    and drag a vertex to reposition it (the *ctrl* key is not necessary if the\n    polygon has already been completed). Hold the *shift* key and click and\n    drag anywhere in the axes to move all vertices. Press the *esc* key to\n    start a new polygon.\n\n    For the selector to remain responsive you must keep a reference to\n    it.\n\n    Parameters\n    ----------\n    ax : :class:`~matplotlib.axes.Axes`\n        The parent axes for the widget.\n    onselect : function\n        When a polygon is completed or modified after completion,\n        the `onselect` function is called and passed a list of the vertices as\n        ``(xdata, ydata)`` tuples.\n    useblit : bool, optional\n    lineprops : dict, optional\n        The line for the sides of the polygon is drawn with the properties\n        given by `lineprops`. The default is ``dict(color='k', linestyle='-',\n        linewidth=2, alpha=0.5)``.\n    markerprops : dict, optional\n        The markers for the vertices of the polygon are drawn with the\n        properties given by `markerprops`. The default is ``dict(marker='o',\n        markersize=7, mec='k', mfc='k', alpha=0.5)``.\n    vertex_select_radius : float, optional\n        A vertex is selected (to complete the polygon or to move a vertex)\n        if the mouse click is within `vertex_select_radius` pixels of the\n        vertex. The default radius is 15 pixels.\n\n    See Also\n    --------\n    :ref:`sphx_glr_gallery_widgets_polygon_selector_demo.py`\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 2550)
        False_169033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 45), 'False')
        # Getting the type of 'None' (line 2551)
        None_169034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 27), 'None')
        # Getting the type of 'None' (line 2551)
        None_169035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 45), 'None')
        int_169036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2551, 72), 'int')
        defaults = [False_169033, None_169034, None_169035, int_169036]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2550, 4, False)
        # Assigning a type to the variable 'self' (line 2551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2551, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolygonSelector.__init__', ['ax', 'onselect', 'useblit', 'lineprops', 'markerprops', 'vertex_select_radius'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'onselect', 'useblit', 'lineprops', 'markerprops', 'vertex_select_radius'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Name (line 2557):
        
        # Assigning a Call to a Name (line 2557):
        
        # Call to dict(...): (line 2557)
        # Processing the call keyword arguments (line 2557)
        unicode_169038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2557, 41), 'unicode', u'escape')
        keyword_169039 = unicode_169038
        unicode_169040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2557, 63), 'unicode', u'control')
        keyword_169041 = unicode_169040
        unicode_169042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2558, 44), 'unicode', u'shift')
        keyword_169043 = unicode_169042
        unicode_169044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2558, 58), 'unicode', u'not-applicable')
        keyword_169045 = unicode_169044
        unicode_169046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2559, 42), 'unicode', u'not-applicable')
        keyword_169047 = unicode_169046
        unicode_169048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2560, 42), 'unicode', u'not-applicable')
        keyword_169049 = unicode_169048
        kwargs_169050 = {'square': keyword_169047, 'center': keyword_169049, 'clear': keyword_169039, 'move': keyword_169045, 'move_vertex': keyword_169041, 'move_all': keyword_169043}
        # Getting the type of 'dict' (line 2557)
        dict_169037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 30), 'dict', False)
        # Calling dict(args, kwargs) (line 2557)
        dict_call_result_169051 = invoke(stypy.reporting.localization.Localization(__file__, 2557, 30), dict_169037, *[], **kwargs_169050)
        
        # Assigning a type to the variable 'state_modifier_keys' (line 2557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2557, 8), 'state_modifier_keys', dict_call_result_169051)
        
        # Call to __init__(...): (line 2561)
        # Processing the call arguments (line 2561)
        # Getting the type of 'self' (line 2561)
        self_169054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 33), 'self', False)
        # Getting the type of 'ax' (line 2561)
        ax_169055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 39), 'ax', False)
        # Getting the type of 'onselect' (line 2561)
        onselect_169056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 43), 'onselect', False)
        # Processing the call keyword arguments (line 2561)
        # Getting the type of 'useblit' (line 2561)
        useblit_169057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 61), 'useblit', False)
        keyword_169058 = useblit_169057
        # Getting the type of 'state_modifier_keys' (line 2562)
        state_modifier_keys_169059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2562, 53), 'state_modifier_keys', False)
        keyword_169060 = state_modifier_keys_169059
        kwargs_169061 = {'state_modifier_keys': keyword_169060, 'useblit': keyword_169058}
        # Getting the type of '_SelectorWidget' (line 2561)
        _SelectorWidget_169052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 8), '_SelectorWidget', False)
        # Obtaining the member '__init__' of a type (line 2561)
        init___169053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2561, 8), _SelectorWidget_169052, '__init__')
        # Calling __init__(args, kwargs) (line 2561)
        init___call_result_169062 = invoke(stypy.reporting.localization.Localization(__file__, 2561, 8), init___169053, *[self_169054, ax_169055, onselect_169056], **kwargs_169061)
        
        
        # Assigning a Tuple to a Tuple (line 2564):
        
        # Assigning a List to a Name (line 2564):
        
        # Obtaining an instance of the builtin type 'list' (line 2564)
        list_169063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2564, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2564)
        # Adding element type (line 2564)
        int_169064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2564, 30), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2564, 29), list_169063, int_169064)
        
        # Assigning a type to the variable 'tuple_assignment_162429' (line 2564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2564, 8), 'tuple_assignment_162429', list_169063)
        
        # Assigning a List to a Name (line 2564):
        
        # Obtaining an instance of the builtin type 'list' (line 2564)
        list_169065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2564, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2564)
        # Adding element type (line 2564)
        int_169066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2564, 35), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2564, 34), list_169065, int_169066)
        
        # Assigning a type to the variable 'tuple_assignment_162430' (line 2564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2564, 8), 'tuple_assignment_162430', list_169065)
        
        # Assigning a Name to a Attribute (line 2564):
        # Getting the type of 'tuple_assignment_162429' (line 2564)
        tuple_assignment_162429_169067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 8), 'tuple_assignment_162429')
        # Getting the type of 'self' (line 2564)
        self_169068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 8), 'self')
        # Setting the type of the member '_xs' of a type (line 2564)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2564, 8), self_169068, '_xs', tuple_assignment_162429_169067)
        
        # Assigning a Name to a Attribute (line 2564):
        # Getting the type of 'tuple_assignment_162430' (line 2564)
        tuple_assignment_162430_169069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 8), 'tuple_assignment_162430')
        # Getting the type of 'self' (line 2564)
        self_169070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 18), 'self')
        # Setting the type of the member '_ys' of a type (line 2564)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2564, 18), self_169070, '_ys', tuple_assignment_162430_169069)
        
        # Assigning a Name to a Attribute (line 2565):
        
        # Assigning a Name to a Attribute (line 2565):
        # Getting the type of 'False' (line 2565)
        False_169071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2565, 34), 'False')
        # Getting the type of 'self' (line 2565)
        self_169072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2565, 8), 'self')
        # Setting the type of the member '_polygon_completed' of a type (line 2565)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2565, 8), self_169072, '_polygon_completed', False_169071)
        
        # Type idiom detected: calculating its left and rigth part (line 2567)
        # Getting the type of 'lineprops' (line 2567)
        lineprops_169073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2567, 11), 'lineprops')
        # Getting the type of 'None' (line 2567)
        None_169074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2567, 24), 'None')
        
        (may_be_169075, more_types_in_union_169076) = may_be_none(lineprops_169073, None_169074)

        if may_be_169075:

            if more_types_in_union_169076:
                # Runtime conditional SSA (line 2567)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 2568):
            
            # Assigning a Call to a Name (line 2568):
            
            # Call to dict(...): (line 2568)
            # Processing the call keyword arguments (line 2568)
            unicode_169078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2568, 35), 'unicode', u'k')
            keyword_169079 = unicode_169078
            unicode_169080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2568, 50), 'unicode', u'-')
            keyword_169081 = unicode_169080
            int_169082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2568, 65), 'int')
            keyword_169083 = int_169082
            float_169084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2568, 74), 'float')
            keyword_169085 = float_169084
            kwargs_169086 = {'color': keyword_169079, 'alpha': keyword_169085, 'linewidth': keyword_169083, 'linestyle': keyword_169081}
            # Getting the type of 'dict' (line 2568)
            dict_169077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2568, 24), 'dict', False)
            # Calling dict(args, kwargs) (line 2568)
            dict_call_result_169087 = invoke(stypy.reporting.localization.Localization(__file__, 2568, 24), dict_169077, *[], **kwargs_169086)
            
            # Assigning a type to the variable 'lineprops' (line 2568)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2568, 12), 'lineprops', dict_call_result_169087)

            if more_types_in_union_169076:
                # SSA join for if statement (line 2567)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Subscript (line 2569):
        
        # Assigning a Attribute to a Subscript (line 2569):
        # Getting the type of 'self' (line 2569)
        self_169088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2569, 32), 'self')
        # Obtaining the member 'useblit' of a type (line 2569)
        useblit_169089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2569, 32), self_169088, 'useblit')
        # Getting the type of 'lineprops' (line 2569)
        lineprops_169090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2569, 8), 'lineprops')
        unicode_169091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2569, 18), 'unicode', u'animated')
        # Storing an element on a container (line 2569)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2569, 8), lineprops_169090, (unicode_169091, useblit_169089))
        
        # Assigning a Call to a Attribute (line 2570):
        
        # Assigning a Call to a Attribute (line 2570):
        
        # Call to Line2D(...): (line 2570)
        # Processing the call arguments (line 2570)
        # Getting the type of 'self' (line 2570)
        self_169093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 27), 'self', False)
        # Obtaining the member '_xs' of a type (line 2570)
        _xs_169094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2570, 27), self_169093, '_xs')
        # Getting the type of 'self' (line 2570)
        self_169095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 37), 'self', False)
        # Obtaining the member '_ys' of a type (line 2570)
        _ys_169096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2570, 37), self_169095, '_ys')
        # Processing the call keyword arguments (line 2570)
        # Getting the type of 'lineprops' (line 2570)
        lineprops_169097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 49), 'lineprops', False)
        kwargs_169098 = {'lineprops_169097': lineprops_169097}
        # Getting the type of 'Line2D' (line 2570)
        Line2D_169092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 20), 'Line2D', False)
        # Calling Line2D(args, kwargs) (line 2570)
        Line2D_call_result_169099 = invoke(stypy.reporting.localization.Localization(__file__, 2570, 20), Line2D_169092, *[_xs_169094, _ys_169096], **kwargs_169098)
        
        # Getting the type of 'self' (line 2570)
        self_169100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 8), 'self')
        # Setting the type of the member 'line' of a type (line 2570)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2570, 8), self_169100, 'line', Line2D_call_result_169099)
        
        # Call to add_line(...): (line 2571)
        # Processing the call arguments (line 2571)
        # Getting the type of 'self' (line 2571)
        self_169104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 25), 'self', False)
        # Obtaining the member 'line' of a type (line 2571)
        line_169105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2571, 25), self_169104, 'line')
        # Processing the call keyword arguments (line 2571)
        kwargs_169106 = {}
        # Getting the type of 'self' (line 2571)
        self_169101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 8), 'self', False)
        # Obtaining the member 'ax' of a type (line 2571)
        ax_169102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2571, 8), self_169101, 'ax')
        # Obtaining the member 'add_line' of a type (line 2571)
        add_line_169103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2571, 8), ax_169102, 'add_line')
        # Calling add_line(args, kwargs) (line 2571)
        add_line_call_result_169107 = invoke(stypy.reporting.localization.Localization(__file__, 2571, 8), add_line_169103, *[line_169105], **kwargs_169106)
        
        
        # Type idiom detected: calculating its left and rigth part (line 2573)
        # Getting the type of 'markerprops' (line 2573)
        markerprops_169108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 11), 'markerprops')
        # Getting the type of 'None' (line 2573)
        None_169109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 26), 'None')
        
        (may_be_169110, more_types_in_union_169111) = may_be_none(markerprops_169108, None_169109)

        if may_be_169110:

            if more_types_in_union_169111:
                # Runtime conditional SSA (line 2573)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 2574):
            
            # Assigning a Call to a Name (line 2574):
            
            # Call to dict(...): (line 2574)
            # Processing the call keyword arguments (line 2574)
            unicode_169113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2574, 35), 'unicode', u'k')
            keyword_169114 = unicode_169113
            
            # Call to get(...): (line 2574)
            # Processing the call arguments (line 2574)
            unicode_169117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2574, 58), 'unicode', u'color')
            unicode_169118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2574, 67), 'unicode', u'k')
            # Processing the call keyword arguments (line 2574)
            kwargs_169119 = {}
            # Getting the type of 'lineprops' (line 2574)
            lineprops_169115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 44), 'lineprops', False)
            # Obtaining the member 'get' of a type (line 2574)
            get_169116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2574, 44), lineprops_169115, 'get')
            # Calling get(args, kwargs) (line 2574)
            get_call_result_169120 = invoke(stypy.reporting.localization.Localization(__file__, 2574, 44), get_169116, *[unicode_169117, unicode_169118], **kwargs_169119)
            
            keyword_169121 = get_call_result_169120
            kwargs_169122 = {'mfc': keyword_169121, 'mec': keyword_169114}
            # Getting the type of 'dict' (line 2574)
            dict_169112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 26), 'dict', False)
            # Calling dict(args, kwargs) (line 2574)
            dict_call_result_169123 = invoke(stypy.reporting.localization.Localization(__file__, 2574, 26), dict_169112, *[], **kwargs_169122)
            
            # Assigning a type to the variable 'markerprops' (line 2574)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2574, 12), 'markerprops', dict_call_result_169123)

            if more_types_in_union_169111:
                # SSA join for if statement (line 2573)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 2575):
        
        # Assigning a Call to a Attribute (line 2575):
        
        # Call to ToolHandles(...): (line 2575)
        # Processing the call arguments (line 2575)
        # Getting the type of 'self' (line 2575)
        self_169125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2575, 44), 'self', False)
        # Obtaining the member 'ax' of a type (line 2575)
        ax_169126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2575, 44), self_169125, 'ax')
        # Getting the type of 'self' (line 2575)
        self_169127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2575, 53), 'self', False)
        # Obtaining the member '_xs' of a type (line 2575)
        _xs_169128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2575, 53), self_169127, '_xs')
        # Getting the type of 'self' (line 2575)
        self_169129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2575, 63), 'self', False)
        # Obtaining the member '_ys' of a type (line 2575)
        _ys_169130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2575, 63), self_169129, '_ys')
        # Processing the call keyword arguments (line 2575)
        # Getting the type of 'self' (line 2576)
        self_169131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 52), 'self', False)
        # Obtaining the member 'useblit' of a type (line 2576)
        useblit_169132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2576, 52), self_169131, 'useblit')
        keyword_169133 = useblit_169132
        # Getting the type of 'markerprops' (line 2577)
        markerprops_169134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2577, 57), 'markerprops', False)
        keyword_169135 = markerprops_169134
        kwargs_169136 = {'marker_props': keyword_169135, 'useblit': keyword_169133}
        # Getting the type of 'ToolHandles' (line 2575)
        ToolHandles_169124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2575, 32), 'ToolHandles', False)
        # Calling ToolHandles(args, kwargs) (line 2575)
        ToolHandles_call_result_169137 = invoke(stypy.reporting.localization.Localization(__file__, 2575, 32), ToolHandles_169124, *[ax_169126, _xs_169128, _ys_169130], **kwargs_169136)
        
        # Getting the type of 'self' (line 2575)
        self_169138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2575, 8), 'self')
        # Setting the type of the member '_polygon_handles' of a type (line 2575)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2575, 8), self_169138, '_polygon_handles', ToolHandles_call_result_169137)
        
        # Assigning a Num to a Attribute (line 2579):
        
        # Assigning a Num to a Attribute (line 2579):
        int_169139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2579, 34), 'int')
        # Getting the type of 'self' (line 2579)
        self_169140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 8), 'self')
        # Setting the type of the member '_active_handle_idx' of a type (line 2579)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2579, 8), self_169140, '_active_handle_idx', int_169139)
        
        # Assigning a Name to a Attribute (line 2580):
        
        # Assigning a Name to a Attribute (line 2580):
        # Getting the type of 'vertex_select_radius' (line 2580)
        vertex_select_radius_169141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2580, 36), 'vertex_select_radius')
        # Getting the type of 'self' (line 2580)
        self_169142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2580, 8), 'self')
        # Setting the type of the member 'vertex_select_radius' of a type (line 2580)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2580, 8), self_169142, 'vertex_select_radius', vertex_select_radius_169141)
        
        # Assigning a List to a Attribute (line 2582):
        
        # Assigning a List to a Attribute (line 2582):
        
        # Obtaining an instance of the builtin type 'list' (line 2582)
        list_169143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2582, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2582)
        # Adding element type (line 2582)
        # Getting the type of 'self' (line 2582)
        self_169144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 24), 'self')
        # Obtaining the member 'line' of a type (line 2582)
        line_169145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2582, 24), self_169144, 'line')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2582, 23), list_169143, line_169145)
        # Adding element type (line 2582)
        # Getting the type of 'self' (line 2582)
        self_169146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 35), 'self')
        # Obtaining the member '_polygon_handles' of a type (line 2582)
        _polygon_handles_169147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2582, 35), self_169146, '_polygon_handles')
        # Obtaining the member 'artist' of a type (line 2582)
        artist_169148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2582, 35), _polygon_handles_169147, 'artist')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2582, 23), list_169143, artist_169148)
        
        # Getting the type of 'self' (line 2582)
        self_169149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 8), 'self')
        # Setting the type of the member 'artists' of a type (line 2582)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2582, 8), self_169149, 'artists', list_169143)
        
        # Call to set_visible(...): (line 2583)
        # Processing the call arguments (line 2583)
        # Getting the type of 'True' (line 2583)
        True_169152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2583, 25), 'True', False)
        # Processing the call keyword arguments (line 2583)
        kwargs_169153 = {}
        # Getting the type of 'self' (line 2583)
        self_169150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2583, 8), 'self', False)
        # Obtaining the member 'set_visible' of a type (line 2583)
        set_visible_169151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2583, 8), self_169150, 'set_visible')
        # Calling set_visible(args, kwargs) (line 2583)
        set_visible_call_result_169154 = invoke(stypy.reporting.localization.Localization(__file__, 2583, 8), set_visible_169151, *[True_169152], **kwargs_169153)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _press(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_press'
        module_type_store = module_type_store.open_function_context('_press', 2585, 4, False)
        # Assigning a type to the variable 'self' (line 2586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2586, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolygonSelector._press.__dict__.__setitem__('stypy_localization', localization)
        PolygonSelector._press.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolygonSelector._press.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolygonSelector._press.__dict__.__setitem__('stypy_function_name', 'PolygonSelector._press')
        PolygonSelector._press.__dict__.__setitem__('stypy_param_names_list', ['event'])
        PolygonSelector._press.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolygonSelector._press.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolygonSelector._press.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolygonSelector._press.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolygonSelector._press.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolygonSelector._press.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolygonSelector._press', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_press', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_press(...)' code ##################

        unicode_169155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2586, 8), 'unicode', u'Button press event handler')
        
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2588)
        self_169156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 13), 'self')
        # Obtaining the member '_polygon_completed' of a type (line 2588)
        _polygon_completed_169157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2588, 13), self_169156, '_polygon_completed')
        
        unicode_169158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2588, 40), 'unicode', u'move_vertex')
        # Getting the type of 'self' (line 2588)
        self_169159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 57), 'self')
        # Obtaining the member 'state' of a type (line 2588)
        state_169160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2588, 57), self_169159, 'state')
        # Applying the binary operator 'in' (line 2588)
        result_contains_169161 = python_operator(stypy.reporting.localization.Localization(__file__, 2588, 40), 'in', unicode_169158, state_169160)
        
        # Applying the binary operator 'or' (line 2588)
        result_or_keyword_169162 = python_operator(stypy.reporting.localization.Localization(__file__, 2588, 13), 'or', _polygon_completed_169157, result_contains_169161)
        
        
        
        # Call to len(...): (line 2589)
        # Processing the call arguments (line 2589)
        # Getting the type of 'self' (line 2589)
        self_169164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 24), 'self', False)
        # Obtaining the member '_xs' of a type (line 2589)
        _xs_169165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2589, 24), self_169164, '_xs')
        # Processing the call keyword arguments (line 2589)
        kwargs_169166 = {}
        # Getting the type of 'len' (line 2589)
        len_169163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 20), 'len', False)
        # Calling len(args, kwargs) (line 2589)
        len_call_result_169167 = invoke(stypy.reporting.localization.Localization(__file__, 2589, 20), len_169163, *[_xs_169165], **kwargs_169166)
        
        int_169168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2589, 36), 'int')
        # Applying the binary operator '>' (line 2589)
        result_gt_169169 = python_operator(stypy.reporting.localization.Localization(__file__, 2589, 20), '>', len_call_result_169167, int_169168)
        
        # Applying the binary operator 'and' (line 2588)
        result_and_keyword_169170 = python_operator(stypy.reporting.localization.Localization(__file__, 2588, 12), 'and', result_or_keyword_169162, result_gt_169169)
        
        # Testing the type of an if condition (line 2588)
        if_condition_169171 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2588, 8), result_and_keyword_169170)
        # Assigning a type to the variable 'if_condition_169171' (line 2588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2588, 8), 'if_condition_169171', if_condition_169171)
        # SSA begins for if statement (line 2588)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 2590):
        
        # Assigning a Call to a Name:
        
        # Call to closest(...): (line 2590)
        # Processing the call arguments (line 2590)
        # Getting the type of 'event' (line 2590)
        event_169175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 58), 'event', False)
        # Obtaining the member 'x' of a type (line 2590)
        x_169176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2590, 58), event_169175, 'x')
        # Getting the type of 'event' (line 2590)
        event_169177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 67), 'event', False)
        # Obtaining the member 'y' of a type (line 2590)
        y_169178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2590, 67), event_169177, 'y')
        # Processing the call keyword arguments (line 2590)
        kwargs_169179 = {}
        # Getting the type of 'self' (line 2590)
        self_169172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 28), 'self', False)
        # Obtaining the member '_polygon_handles' of a type (line 2590)
        _polygon_handles_169173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2590, 28), self_169172, '_polygon_handles')
        # Obtaining the member 'closest' of a type (line 2590)
        closest_169174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2590, 28), _polygon_handles_169173, 'closest')
        # Calling closest(args, kwargs) (line 2590)
        closest_call_result_169180 = invoke(stypy.reporting.localization.Localization(__file__, 2590, 28), closest_169174, *[x_169176, y_169178], **kwargs_169179)
        
        # Assigning a type to the variable 'call_assignment_162431' (line 2590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2590, 12), 'call_assignment_162431', closest_call_result_169180)
        
        # Assigning a Call to a Name (line 2590):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_169183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2590, 12), 'int')
        # Processing the call keyword arguments
        kwargs_169184 = {}
        # Getting the type of 'call_assignment_162431' (line 2590)
        call_assignment_162431_169181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 12), 'call_assignment_162431', False)
        # Obtaining the member '__getitem__' of a type (line 2590)
        getitem___169182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2590, 12), call_assignment_162431_169181, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_169185 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___169182, *[int_169183], **kwargs_169184)
        
        # Assigning a type to the variable 'call_assignment_162432' (line 2590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2590, 12), 'call_assignment_162432', getitem___call_result_169185)
        
        # Assigning a Name to a Name (line 2590):
        # Getting the type of 'call_assignment_162432' (line 2590)
        call_assignment_162432_169186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 12), 'call_assignment_162432')
        # Assigning a type to the variable 'h_idx' (line 2590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2590, 12), 'h_idx', call_assignment_162432_169186)
        
        # Assigning a Call to a Name (line 2590):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_169189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2590, 12), 'int')
        # Processing the call keyword arguments
        kwargs_169190 = {}
        # Getting the type of 'call_assignment_162431' (line 2590)
        call_assignment_162431_169187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 12), 'call_assignment_162431', False)
        # Obtaining the member '__getitem__' of a type (line 2590)
        getitem___169188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2590, 12), call_assignment_162431_169187, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_169191 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___169188, *[int_169189], **kwargs_169190)
        
        # Assigning a type to the variable 'call_assignment_162433' (line 2590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2590, 12), 'call_assignment_162433', getitem___call_result_169191)
        
        # Assigning a Name to a Name (line 2590):
        # Getting the type of 'call_assignment_162433' (line 2590)
        call_assignment_162433_169192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 12), 'call_assignment_162433')
        # Assigning a type to the variable 'h_dist' (line 2590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2590, 19), 'h_dist', call_assignment_162433_169192)
        
        
        # Getting the type of 'h_dist' (line 2591)
        h_dist_169193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2591, 15), 'h_dist')
        # Getting the type of 'self' (line 2591)
        self_169194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2591, 24), 'self')
        # Obtaining the member 'vertex_select_radius' of a type (line 2591)
        vertex_select_radius_169195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2591, 24), self_169194, 'vertex_select_radius')
        # Applying the binary operator '<' (line 2591)
        result_lt_169196 = python_operator(stypy.reporting.localization.Localization(__file__, 2591, 15), '<', h_dist_169193, vertex_select_radius_169195)
        
        # Testing the type of an if condition (line 2591)
        if_condition_169197 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2591, 12), result_lt_169196)
        # Assigning a type to the variable 'if_condition_169197' (line 2591)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2591, 12), 'if_condition_169197', if_condition_169197)
        # SSA begins for if statement (line 2591)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 2592):
        
        # Assigning a Name to a Attribute (line 2592):
        # Getting the type of 'h_idx' (line 2592)
        h_idx_169198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 42), 'h_idx')
        # Getting the type of 'self' (line 2592)
        self_169199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 16), 'self')
        # Setting the type of the member '_active_handle_idx' of a type (line 2592)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2592, 16), self_169199, '_active_handle_idx', h_idx_169198)
        # SSA join for if statement (line 2591)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2588)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 2595):
        
        # Assigning a Subscript to a Name (line 2595):
        
        # Obtaining the type of the subscript
        slice_169200 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2595, 47), None, None, None)
        # Getting the type of 'self' (line 2595)
        self_169201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 47), 'self')
        # Obtaining the member '_xs' of a type (line 2595)
        _xs_169202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2595, 47), self_169201, '_xs')
        # Obtaining the member '__getitem__' of a type (line 2595)
        getitem___169203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2595, 47), _xs_169202, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2595)
        subscript_call_result_169204 = invoke(stypy.reporting.localization.Localization(__file__, 2595, 47), getitem___169203, slice_169200)
        
        # Assigning a type to the variable 'tuple_assignment_162434' (line 2595)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2595, 8), 'tuple_assignment_162434', subscript_call_result_169204)
        
        # Assigning a Subscript to a Name (line 2595):
        
        # Obtaining the type of the subscript
        slice_169205 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2595, 60), None, None, None)
        # Getting the type of 'self' (line 2595)
        self_169206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 60), 'self')
        # Obtaining the member '_ys' of a type (line 2595)
        _ys_169207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2595, 60), self_169206, '_ys')
        # Obtaining the member '__getitem__' of a type (line 2595)
        getitem___169208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2595, 60), _ys_169207, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2595)
        subscript_call_result_169209 = invoke(stypy.reporting.localization.Localization(__file__, 2595, 60), getitem___169208, slice_169205)
        
        # Assigning a type to the variable 'tuple_assignment_162435' (line 2595)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2595, 8), 'tuple_assignment_162435', subscript_call_result_169209)
        
        # Assigning a Name to a Attribute (line 2595):
        # Getting the type of 'tuple_assignment_162434' (line 2595)
        tuple_assignment_162434_169210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 8), 'tuple_assignment_162434')
        # Getting the type of 'self' (line 2595)
        self_169211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 8), 'self')
        # Setting the type of the member '_xs_at_press' of a type (line 2595)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2595, 8), self_169211, '_xs_at_press', tuple_assignment_162434_169210)
        
        # Assigning a Name to a Attribute (line 2595):
        # Getting the type of 'tuple_assignment_162435' (line 2595)
        tuple_assignment_162435_169212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 8), 'tuple_assignment_162435')
        # Getting the type of 'self' (line 2595)
        self_169213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 27), 'self')
        # Setting the type of the member '_ys_at_press' of a type (line 2595)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2595, 27), self_169213, '_ys_at_press', tuple_assignment_162435_169212)
        
        # ################# End of '_press(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_press' in the type store
        # Getting the type of 'stypy_return_type' (line 2585)
        stypy_return_type_169214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2585, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_169214)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_press'
        return stypy_return_type_169214


    @norecursion
    def _release(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_release'
        module_type_store = module_type_store.open_function_context('_release', 2597, 4, False)
        # Assigning a type to the variable 'self' (line 2598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2598, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolygonSelector._release.__dict__.__setitem__('stypy_localization', localization)
        PolygonSelector._release.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolygonSelector._release.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolygonSelector._release.__dict__.__setitem__('stypy_function_name', 'PolygonSelector._release')
        PolygonSelector._release.__dict__.__setitem__('stypy_param_names_list', ['event'])
        PolygonSelector._release.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolygonSelector._release.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolygonSelector._release.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolygonSelector._release.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolygonSelector._release.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolygonSelector._release.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolygonSelector._release', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_release', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_release(...)' code ##################

        unicode_169215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2598, 8), 'unicode', u'Button release event handler')
        
        
        # Getting the type of 'self' (line 2600)
        self_169216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 11), 'self')
        # Obtaining the member '_active_handle_idx' of a type (line 2600)
        _active_handle_idx_169217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2600, 11), self_169216, '_active_handle_idx')
        int_169218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2600, 38), 'int')
        # Applying the binary operator '>=' (line 2600)
        result_ge_169219 = python_operator(stypy.reporting.localization.Localization(__file__, 2600, 11), '>=', _active_handle_idx_169217, int_169218)
        
        # Testing the type of an if condition (line 2600)
        if_condition_169220 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2600, 8), result_ge_169219)
        # Assigning a type to the variable 'if_condition_169220' (line 2600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2600, 8), 'if_condition_169220', if_condition_169220)
        # SSA begins for if statement (line 2600)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 2601):
        
        # Assigning a Num to a Attribute (line 2601):
        int_169221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2601, 38), 'int')
        # Getting the type of 'self' (line 2601)
        self_169222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 12), 'self')
        # Setting the type of the member '_active_handle_idx' of a type (line 2601)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2601, 12), self_169222, '_active_handle_idx', int_169221)
        # SSA branch for the else part of an if statement (line 2600)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 2604)
        # Processing the call arguments (line 2604)
        # Getting the type of 'self' (line 2604)
        self_169224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 18), 'self', False)
        # Obtaining the member '_xs' of a type (line 2604)
        _xs_169225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2604, 18), self_169224, '_xs')
        # Processing the call keyword arguments (line 2604)
        kwargs_169226 = {}
        # Getting the type of 'len' (line 2604)
        len_169223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 14), 'len', False)
        # Calling len(args, kwargs) (line 2604)
        len_call_result_169227 = invoke(stypy.reporting.localization.Localization(__file__, 2604, 14), len_169223, *[_xs_169225], **kwargs_169226)
        
        int_169228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2604, 30), 'int')
        # Applying the binary operator '>' (line 2604)
        result_gt_169229 = python_operator(stypy.reporting.localization.Localization(__file__, 2604, 14), '>', len_call_result_169227, int_169228)
        
        
        
        # Obtaining the type of the subscript
        int_169230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2605, 27), 'int')
        # Getting the type of 'self' (line 2605)
        self_169231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 18), 'self')
        # Obtaining the member '_xs' of a type (line 2605)
        _xs_169232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2605, 18), self_169231, '_xs')
        # Obtaining the member '__getitem__' of a type (line 2605)
        getitem___169233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2605, 18), _xs_169232, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2605)
        subscript_call_result_169234 = invoke(stypy.reporting.localization.Localization(__file__, 2605, 18), getitem___169233, int_169230)
        
        
        # Obtaining the type of the subscript
        int_169235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2605, 43), 'int')
        # Getting the type of 'self' (line 2605)
        self_169236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 34), 'self')
        # Obtaining the member '_xs' of a type (line 2605)
        _xs_169237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2605, 34), self_169236, '_xs')
        # Obtaining the member '__getitem__' of a type (line 2605)
        getitem___169238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2605, 34), _xs_169237, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2605)
        subscript_call_result_169239 = invoke(stypy.reporting.localization.Localization(__file__, 2605, 34), getitem___169238, int_169235)
        
        # Applying the binary operator '==' (line 2605)
        result_eq_169240 = python_operator(stypy.reporting.localization.Localization(__file__, 2605, 18), '==', subscript_call_result_169234, subscript_call_result_169239)
        
        # Applying the binary operator 'and' (line 2604)
        result_and_keyword_169241 = python_operator(stypy.reporting.localization.Localization(__file__, 2604, 14), 'and', result_gt_169229, result_eq_169240)
        
        
        # Obtaining the type of the subscript
        int_169242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2606, 27), 'int')
        # Getting the type of 'self' (line 2606)
        self_169243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 18), 'self')
        # Obtaining the member '_ys' of a type (line 2606)
        _ys_169244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2606, 18), self_169243, '_ys')
        # Obtaining the member '__getitem__' of a type (line 2606)
        getitem___169245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2606, 18), _ys_169244, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2606)
        subscript_call_result_169246 = invoke(stypy.reporting.localization.Localization(__file__, 2606, 18), getitem___169245, int_169242)
        
        
        # Obtaining the type of the subscript
        int_169247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2606, 43), 'int')
        # Getting the type of 'self' (line 2606)
        self_169248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 34), 'self')
        # Obtaining the member '_ys' of a type (line 2606)
        _ys_169249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2606, 34), self_169248, '_ys')
        # Obtaining the member '__getitem__' of a type (line 2606)
        getitem___169250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2606, 34), _ys_169249, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2606)
        subscript_call_result_169251 = invoke(stypy.reporting.localization.Localization(__file__, 2606, 34), getitem___169250, int_169247)
        
        # Applying the binary operator '==' (line 2606)
        result_eq_169252 = python_operator(stypy.reporting.localization.Localization(__file__, 2606, 18), '==', subscript_call_result_169246, subscript_call_result_169251)
        
        # Applying the binary operator 'and' (line 2604)
        result_and_keyword_169253 = python_operator(stypy.reporting.localization.Localization(__file__, 2604, 14), 'and', result_and_keyword_169241, result_eq_169252)
        
        # Testing the type of an if condition (line 2604)
        if_condition_169254 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2604, 13), result_and_keyword_169253)
        # Assigning a type to the variable 'if_condition_169254' (line 2604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2604, 13), 'if_condition_169254', if_condition_169254)
        # SSA begins for if statement (line 2604)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 2607):
        
        # Assigning a Name to a Attribute (line 2607):
        # Getting the type of 'True' (line 2607)
        True_169255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 38), 'True')
        # Getting the type of 'self' (line 2607)
        self_169256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 12), 'self')
        # Setting the type of the member '_polygon_completed' of a type (line 2607)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2607, 12), self_169256, '_polygon_completed', True_169255)
        # SSA branch for the else part of an if statement (line 2604)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2610)
        self_169257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 18), 'self')
        # Obtaining the member '_polygon_completed' of a type (line 2610)
        _polygon_completed_169258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2610, 18), self_169257, '_polygon_completed')
        # Applying the 'not' unary operator (line 2610)
        result_not__169259 = python_operator(stypy.reporting.localization.Localization(__file__, 2610, 14), 'not', _polygon_completed_169258)
        
        
        unicode_169260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2611, 18), 'unicode', u'move_all')
        # Getting the type of 'self' (line 2611)
        self_169261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2611, 36), 'self')
        # Obtaining the member 'state' of a type (line 2611)
        state_169262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2611, 36), self_169261, 'state')
        # Applying the binary operator 'notin' (line 2611)
        result_contains_169263 = python_operator(stypy.reporting.localization.Localization(__file__, 2611, 18), 'notin', unicode_169260, state_169262)
        
        # Applying the binary operator 'and' (line 2610)
        result_and_keyword_169264 = python_operator(stypy.reporting.localization.Localization(__file__, 2610, 14), 'and', result_not__169259, result_contains_169263)
        
        unicode_169265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2612, 18), 'unicode', u'move_vertex')
        # Getting the type of 'self' (line 2612)
        self_169266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2612, 39), 'self')
        # Obtaining the member 'state' of a type (line 2612)
        state_169267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2612, 39), self_169266, 'state')
        # Applying the binary operator 'notin' (line 2612)
        result_contains_169268 = python_operator(stypy.reporting.localization.Localization(__file__, 2612, 18), 'notin', unicode_169265, state_169267)
        
        # Applying the binary operator 'and' (line 2610)
        result_and_keyword_169269 = python_operator(stypy.reporting.localization.Localization(__file__, 2610, 14), 'and', result_and_keyword_169264, result_contains_169268)
        
        # Testing the type of an if condition (line 2610)
        if_condition_169270 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2610, 13), result_and_keyword_169269)
        # Assigning a type to the variable 'if_condition_169270' (line 2610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2610, 13), 'if_condition_169270', if_condition_169270)
        # SSA begins for if statement (line 2610)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to insert(...): (line 2613)
        # Processing the call arguments (line 2613)
        int_169274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2613, 28), 'int')
        # Getting the type of 'event' (line 2613)
        event_169275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2613, 32), 'event', False)
        # Obtaining the member 'xdata' of a type (line 2613)
        xdata_169276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2613, 32), event_169275, 'xdata')
        # Processing the call keyword arguments (line 2613)
        kwargs_169277 = {}
        # Getting the type of 'self' (line 2613)
        self_169271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2613, 12), 'self', False)
        # Obtaining the member '_xs' of a type (line 2613)
        _xs_169272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2613, 12), self_169271, '_xs')
        # Obtaining the member 'insert' of a type (line 2613)
        insert_169273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2613, 12), _xs_169272, 'insert')
        # Calling insert(args, kwargs) (line 2613)
        insert_call_result_169278 = invoke(stypy.reporting.localization.Localization(__file__, 2613, 12), insert_169273, *[int_169274, xdata_169276], **kwargs_169277)
        
        
        # Call to insert(...): (line 2614)
        # Processing the call arguments (line 2614)
        int_169282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2614, 28), 'int')
        # Getting the type of 'event' (line 2614)
        event_169283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2614, 32), 'event', False)
        # Obtaining the member 'ydata' of a type (line 2614)
        ydata_169284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2614, 32), event_169283, 'ydata')
        # Processing the call keyword arguments (line 2614)
        kwargs_169285 = {}
        # Getting the type of 'self' (line 2614)
        self_169279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2614, 12), 'self', False)
        # Obtaining the member '_ys' of a type (line 2614)
        _ys_169280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2614, 12), self_169279, '_ys')
        # Obtaining the member 'insert' of a type (line 2614)
        insert_169281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2614, 12), _ys_169280, 'insert')
        # Calling insert(args, kwargs) (line 2614)
        insert_call_result_169286 = invoke(stypy.reporting.localization.Localization(__file__, 2614, 12), insert_169281, *[int_169282, ydata_169284], **kwargs_169285)
        
        # SSA join for if statement (line 2610)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2604)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2600)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 2616)
        self_169287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2616, 11), 'self')
        # Obtaining the member '_polygon_completed' of a type (line 2616)
        _polygon_completed_169288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2616, 11), self_169287, '_polygon_completed')
        # Testing the type of an if condition (line 2616)
        if_condition_169289 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2616, 8), _polygon_completed_169288)
        # Assigning a type to the variable 'if_condition_169289' (line 2616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2616, 8), 'if_condition_169289', if_condition_169289)
        # SSA begins for if statement (line 2616)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to onselect(...): (line 2617)
        # Processing the call arguments (line 2617)
        # Getting the type of 'self' (line 2617)
        self_169292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2617, 26), 'self', False)
        # Obtaining the member 'verts' of a type (line 2617)
        verts_169293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2617, 26), self_169292, 'verts')
        # Processing the call keyword arguments (line 2617)
        kwargs_169294 = {}
        # Getting the type of 'self' (line 2617)
        self_169290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2617, 12), 'self', False)
        # Obtaining the member 'onselect' of a type (line 2617)
        onselect_169291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2617, 12), self_169290, 'onselect')
        # Calling onselect(args, kwargs) (line 2617)
        onselect_call_result_169295 = invoke(stypy.reporting.localization.Localization(__file__, 2617, 12), onselect_169291, *[verts_169293], **kwargs_169294)
        
        # SSA join for if statement (line 2616)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_release(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_release' in the type store
        # Getting the type of 'stypy_return_type' (line 2597)
        stypy_return_type_169296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_169296)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_release'
        return stypy_return_type_169296


    @norecursion
    def onmove(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'onmove'
        module_type_store = module_type_store.open_function_context('onmove', 2619, 4, False)
        # Assigning a type to the variable 'self' (line 2620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2620, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolygonSelector.onmove.__dict__.__setitem__('stypy_localization', localization)
        PolygonSelector.onmove.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolygonSelector.onmove.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolygonSelector.onmove.__dict__.__setitem__('stypy_function_name', 'PolygonSelector.onmove')
        PolygonSelector.onmove.__dict__.__setitem__('stypy_param_names_list', ['event'])
        PolygonSelector.onmove.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolygonSelector.onmove.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolygonSelector.onmove.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolygonSelector.onmove.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolygonSelector.onmove.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolygonSelector.onmove.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolygonSelector.onmove', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'onmove', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'onmove(...)' code ##################

        unicode_169297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2620, 8), 'unicode', u'Cursor move event handler and validator')
        
        
        
        # Call to ignore(...): (line 2625)
        # Processing the call arguments (line 2625)
        # Getting the type of 'event' (line 2625)
        event_169300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2625, 27), 'event', False)
        # Processing the call keyword arguments (line 2625)
        kwargs_169301 = {}
        # Getting the type of 'self' (line 2625)
        self_169298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2625, 15), 'self', False)
        # Obtaining the member 'ignore' of a type (line 2625)
        ignore_169299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2625, 15), self_169298, 'ignore')
        # Calling ignore(args, kwargs) (line 2625)
        ignore_call_result_169302 = invoke(stypy.reporting.localization.Localization(__file__, 2625, 15), ignore_169299, *[event_169300], **kwargs_169301)
        
        # Applying the 'not' unary operator (line 2625)
        result_not__169303 = python_operator(stypy.reporting.localization.Localization(__file__, 2625, 11), 'not', ignore_call_result_169302)
        
        # Testing the type of an if condition (line 2625)
        if_condition_169304 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2625, 8), result_not__169303)
        # Assigning a type to the variable 'if_condition_169304' (line 2625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2625, 8), 'if_condition_169304', if_condition_169304)
        # SSA begins for if statement (line 2625)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2626):
        
        # Assigning a Call to a Name (line 2626):
        
        # Call to _clean_event(...): (line 2626)
        # Processing the call arguments (line 2626)
        # Getting the type of 'event' (line 2626)
        event_169307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2626, 38), 'event', False)
        # Processing the call keyword arguments (line 2626)
        kwargs_169308 = {}
        # Getting the type of 'self' (line 2626)
        self_169305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2626, 20), 'self', False)
        # Obtaining the member '_clean_event' of a type (line 2626)
        _clean_event_169306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2626, 20), self_169305, '_clean_event')
        # Calling _clean_event(args, kwargs) (line 2626)
        _clean_event_call_result_169309 = invoke(stypy.reporting.localization.Localization(__file__, 2626, 20), _clean_event_169306, *[event_169307], **kwargs_169308)
        
        # Assigning a type to the variable 'event' (line 2626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2626, 12), 'event', _clean_event_call_result_169309)
        
        # Call to _onmove(...): (line 2627)
        # Processing the call arguments (line 2627)
        # Getting the type of 'event' (line 2627)
        event_169312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2627, 25), 'event', False)
        # Processing the call keyword arguments (line 2627)
        kwargs_169313 = {}
        # Getting the type of 'self' (line 2627)
        self_169310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2627, 12), 'self', False)
        # Obtaining the member '_onmove' of a type (line 2627)
        _onmove_169311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2627, 12), self_169310, '_onmove')
        # Calling _onmove(args, kwargs) (line 2627)
        _onmove_call_result_169314 = invoke(stypy.reporting.localization.Localization(__file__, 2627, 12), _onmove_169311, *[event_169312], **kwargs_169313)
        
        # Getting the type of 'True' (line 2628)
        True_169315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 19), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 2628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2628, 12), 'stypy_return_type', True_169315)
        # SSA join for if statement (line 2625)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'False' (line 2629)
        False_169316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 2629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2629, 8), 'stypy_return_type', False_169316)
        
        # ################# End of 'onmove(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'onmove' in the type store
        # Getting the type of 'stypy_return_type' (line 2619)
        stypy_return_type_169317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2619, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_169317)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'onmove'
        return stypy_return_type_169317


    @norecursion
    def _onmove(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_onmove'
        module_type_store = module_type_store.open_function_context('_onmove', 2631, 4, False)
        # Assigning a type to the variable 'self' (line 2632)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2632, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolygonSelector._onmove.__dict__.__setitem__('stypy_localization', localization)
        PolygonSelector._onmove.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolygonSelector._onmove.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolygonSelector._onmove.__dict__.__setitem__('stypy_function_name', 'PolygonSelector._onmove')
        PolygonSelector._onmove.__dict__.__setitem__('stypy_param_names_list', ['event'])
        PolygonSelector._onmove.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolygonSelector._onmove.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolygonSelector._onmove.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolygonSelector._onmove.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolygonSelector._onmove.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolygonSelector._onmove.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolygonSelector._onmove', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_onmove', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_onmove(...)' code ##################

        unicode_169318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2632, 8), 'unicode', u'Cursor move event handler')
        
        
        # Getting the type of 'self' (line 2634)
        self_169319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 11), 'self')
        # Obtaining the member '_active_handle_idx' of a type (line 2634)
        _active_handle_idx_169320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2634, 11), self_169319, '_active_handle_idx')
        int_169321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2634, 38), 'int')
        # Applying the binary operator '>=' (line 2634)
        result_ge_169322 = python_operator(stypy.reporting.localization.Localization(__file__, 2634, 11), '>=', _active_handle_idx_169320, int_169321)
        
        # Testing the type of an if condition (line 2634)
        if_condition_169323 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2634, 8), result_ge_169322)
        # Assigning a type to the variable 'if_condition_169323' (line 2634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2634, 8), 'if_condition_169323', if_condition_169323)
        # SSA begins for if statement (line 2634)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 2635):
        
        # Assigning a Attribute to a Name (line 2635):
        # Getting the type of 'self' (line 2635)
        self_169324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2635, 18), 'self')
        # Obtaining the member '_active_handle_idx' of a type (line 2635)
        _active_handle_idx_169325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2635, 18), self_169324, '_active_handle_idx')
        # Assigning a type to the variable 'idx' (line 2635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2635, 12), 'idx', _active_handle_idx_169325)
        
        # Assigning a Tuple to a Tuple (line 2636):
        
        # Assigning a Attribute to a Name (line 2636):
        # Getting the type of 'event' (line 2636)
        event_169326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 43), 'event')
        # Obtaining the member 'xdata' of a type (line 2636)
        xdata_169327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2636, 43), event_169326, 'xdata')
        # Assigning a type to the variable 'tuple_assignment_162436' (line 2636)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 12), 'tuple_assignment_162436', xdata_169327)
        
        # Assigning a Attribute to a Name (line 2636):
        # Getting the type of 'event' (line 2636)
        event_169328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 56), 'event')
        # Obtaining the member 'ydata' of a type (line 2636)
        ydata_169329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2636, 56), event_169328, 'ydata')
        # Assigning a type to the variable 'tuple_assignment_162437' (line 2636)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 12), 'tuple_assignment_162437', ydata_169329)
        
        # Assigning a Name to a Subscript (line 2636):
        # Getting the type of 'tuple_assignment_162436' (line 2636)
        tuple_assignment_162436_169330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 12), 'tuple_assignment_162436')
        # Getting the type of 'self' (line 2636)
        self_169331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 12), 'self')
        # Obtaining the member '_xs' of a type (line 2636)
        _xs_169332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2636, 12), self_169331, '_xs')
        # Getting the type of 'idx' (line 2636)
        idx_169333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 21), 'idx')
        # Storing an element on a container (line 2636)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2636, 12), _xs_169332, (idx_169333, tuple_assignment_162436_169330))
        
        # Assigning a Name to a Subscript (line 2636):
        # Getting the type of 'tuple_assignment_162437' (line 2636)
        tuple_assignment_162437_169334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 12), 'tuple_assignment_162437')
        # Getting the type of 'self' (line 2636)
        self_169335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 27), 'self')
        # Obtaining the member '_ys' of a type (line 2636)
        _ys_169336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2636, 27), self_169335, '_ys')
        # Getting the type of 'idx' (line 2636)
        idx_169337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 36), 'idx')
        # Storing an element on a container (line 2636)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2636, 27), _ys_169336, (idx_169337, tuple_assignment_162437_169334))
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'idx' (line 2639)
        idx_169338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 15), 'idx')
        int_169339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2639, 22), 'int')
        # Applying the binary operator '==' (line 2639)
        result_eq_169340 = python_operator(stypy.reporting.localization.Localization(__file__, 2639, 15), '==', idx_169338, int_169339)
        
        # Getting the type of 'self' (line 2639)
        self_169341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 28), 'self')
        # Obtaining the member '_polygon_completed' of a type (line 2639)
        _polygon_completed_169342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2639, 28), self_169341, '_polygon_completed')
        # Applying the binary operator 'and' (line 2639)
        result_and_keyword_169343 = python_operator(stypy.reporting.localization.Localization(__file__, 2639, 15), 'and', result_eq_169340, _polygon_completed_169342)
        
        # Testing the type of an if condition (line 2639)
        if_condition_169344 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2639, 12), result_and_keyword_169343)
        # Assigning a type to the variable 'if_condition_169344' (line 2639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2639, 12), 'if_condition_169344', if_condition_169344)
        # SSA begins for if statement (line 2639)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 2640):
        
        # Assigning a Attribute to a Name (line 2640):
        # Getting the type of 'event' (line 2640)
        event_169345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 45), 'event')
        # Obtaining the member 'xdata' of a type (line 2640)
        xdata_169346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2640, 45), event_169345, 'xdata')
        # Assigning a type to the variable 'tuple_assignment_162438' (line 2640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2640, 16), 'tuple_assignment_162438', xdata_169346)
        
        # Assigning a Attribute to a Name (line 2640):
        # Getting the type of 'event' (line 2640)
        event_169347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 58), 'event')
        # Obtaining the member 'ydata' of a type (line 2640)
        ydata_169348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2640, 58), event_169347, 'ydata')
        # Assigning a type to the variable 'tuple_assignment_162439' (line 2640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2640, 16), 'tuple_assignment_162439', ydata_169348)
        
        # Assigning a Name to a Subscript (line 2640):
        # Getting the type of 'tuple_assignment_162438' (line 2640)
        tuple_assignment_162438_169349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 16), 'tuple_assignment_162438')
        # Getting the type of 'self' (line 2640)
        self_169350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 16), 'self')
        # Obtaining the member '_xs' of a type (line 2640)
        _xs_169351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2640, 16), self_169350, '_xs')
        int_169352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2640, 25), 'int')
        # Storing an element on a container (line 2640)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2640, 16), _xs_169351, (int_169352, tuple_assignment_162438_169349))
        
        # Assigning a Name to a Subscript (line 2640):
        # Getting the type of 'tuple_assignment_162439' (line 2640)
        tuple_assignment_162439_169353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 16), 'tuple_assignment_162439')
        # Getting the type of 'self' (line 2640)
        self_169354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 30), 'self')
        # Obtaining the member '_ys' of a type (line 2640)
        _ys_169355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2640, 30), self_169354, '_ys')
        int_169356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2640, 39), 'int')
        # Storing an element on a container (line 2640)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2640, 30), _ys_169355, (int_169356, tuple_assignment_162439_169353))
        # SSA join for if statement (line 2639)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2634)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        unicode_169357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2643, 13), 'unicode', u'move_all')
        # Getting the type of 'self' (line 2643)
        self_169358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 27), 'self')
        # Obtaining the member 'state' of a type (line 2643)
        state_169359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2643, 27), self_169358, 'state')
        # Applying the binary operator 'in' (line 2643)
        result_contains_169360 = python_operator(stypy.reporting.localization.Localization(__file__, 2643, 13), 'in', unicode_169357, state_169359)
        
        # Getting the type of 'self' (line 2643)
        self_169361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 42), 'self')
        # Obtaining the member 'eventpress' of a type (line 2643)
        eventpress_169362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2643, 42), self_169361, 'eventpress')
        # Applying the binary operator 'and' (line 2643)
        result_and_keyword_169363 = python_operator(stypy.reporting.localization.Localization(__file__, 2643, 13), 'and', result_contains_169360, eventpress_169362)
        
        # Testing the type of an if condition (line 2643)
        if_condition_169364 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2643, 13), result_and_keyword_169363)
        # Assigning a type to the variable 'if_condition_169364' (line 2643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2643, 13), 'if_condition_169364', if_condition_169364)
        # SSA begins for if statement (line 2643)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 2644):
        
        # Assigning a BinOp to a Name (line 2644):
        # Getting the type of 'event' (line 2644)
        event_169365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2644, 17), 'event')
        # Obtaining the member 'xdata' of a type (line 2644)
        xdata_169366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2644, 17), event_169365, 'xdata')
        # Getting the type of 'self' (line 2644)
        self_169367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2644, 31), 'self')
        # Obtaining the member 'eventpress' of a type (line 2644)
        eventpress_169368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2644, 31), self_169367, 'eventpress')
        # Obtaining the member 'xdata' of a type (line 2644)
        xdata_169369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2644, 31), eventpress_169368, 'xdata')
        # Applying the binary operator '-' (line 2644)
        result_sub_169370 = python_operator(stypy.reporting.localization.Localization(__file__, 2644, 17), '-', xdata_169366, xdata_169369)
        
        # Assigning a type to the variable 'dx' (line 2644)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2644, 12), 'dx', result_sub_169370)
        
        # Assigning a BinOp to a Name (line 2645):
        
        # Assigning a BinOp to a Name (line 2645):
        # Getting the type of 'event' (line 2645)
        event_169371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 17), 'event')
        # Obtaining the member 'ydata' of a type (line 2645)
        ydata_169372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2645, 17), event_169371, 'ydata')
        # Getting the type of 'self' (line 2645)
        self_169373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 31), 'self')
        # Obtaining the member 'eventpress' of a type (line 2645)
        eventpress_169374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2645, 31), self_169373, 'eventpress')
        # Obtaining the member 'ydata' of a type (line 2645)
        ydata_169375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2645, 31), eventpress_169374, 'ydata')
        # Applying the binary operator '-' (line 2645)
        result_sub_169376 = python_operator(stypy.reporting.localization.Localization(__file__, 2645, 17), '-', ydata_169372, ydata_169375)
        
        # Assigning a type to the variable 'dy' (line 2645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2645, 12), 'dy', result_sub_169376)
        
        
        # Call to range(...): (line 2646)
        # Processing the call arguments (line 2646)
        
        # Call to len(...): (line 2646)
        # Processing the call arguments (line 2646)
        # Getting the type of 'self' (line 2646)
        self_169379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 31), 'self', False)
        # Obtaining the member '_xs' of a type (line 2646)
        _xs_169380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2646, 31), self_169379, '_xs')
        # Processing the call keyword arguments (line 2646)
        kwargs_169381 = {}
        # Getting the type of 'len' (line 2646)
        len_169378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 27), 'len', False)
        # Calling len(args, kwargs) (line 2646)
        len_call_result_169382 = invoke(stypy.reporting.localization.Localization(__file__, 2646, 27), len_169378, *[_xs_169380], **kwargs_169381)
        
        # Processing the call keyword arguments (line 2646)
        kwargs_169383 = {}
        # Getting the type of 'range' (line 2646)
        range_169377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 21), 'range', False)
        # Calling range(args, kwargs) (line 2646)
        range_call_result_169384 = invoke(stypy.reporting.localization.Localization(__file__, 2646, 21), range_169377, *[len_call_result_169382], **kwargs_169383)
        
        # Testing the type of a for loop iterable (line 2646)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2646, 12), range_call_result_169384)
        # Getting the type of the for loop variable (line 2646)
        for_loop_var_169385 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2646, 12), range_call_result_169384)
        # Assigning a type to the variable 'k' (line 2646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2646, 12), 'k', for_loop_var_169385)
        # SSA begins for a for statement (line 2646)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Subscript (line 2647):
        
        # Assigning a BinOp to a Subscript (line 2647):
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 2647)
        k_169386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 48), 'k')
        # Getting the type of 'self' (line 2647)
        self_169387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 30), 'self')
        # Obtaining the member '_xs_at_press' of a type (line 2647)
        _xs_at_press_169388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2647, 30), self_169387, '_xs_at_press')
        # Obtaining the member '__getitem__' of a type (line 2647)
        getitem___169389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2647, 30), _xs_at_press_169388, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2647)
        subscript_call_result_169390 = invoke(stypy.reporting.localization.Localization(__file__, 2647, 30), getitem___169389, k_169386)
        
        # Getting the type of 'dx' (line 2647)
        dx_169391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 53), 'dx')
        # Applying the binary operator '+' (line 2647)
        result_add_169392 = python_operator(stypy.reporting.localization.Localization(__file__, 2647, 30), '+', subscript_call_result_169390, dx_169391)
        
        # Getting the type of 'self' (line 2647)
        self_169393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 16), 'self')
        # Obtaining the member '_xs' of a type (line 2647)
        _xs_169394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2647, 16), self_169393, '_xs')
        # Getting the type of 'k' (line 2647)
        k_169395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 25), 'k')
        # Storing an element on a container (line 2647)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2647, 16), _xs_169394, (k_169395, result_add_169392))
        
        # Assigning a BinOp to a Subscript (line 2648):
        
        # Assigning a BinOp to a Subscript (line 2648):
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 2648)
        k_169396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 48), 'k')
        # Getting the type of 'self' (line 2648)
        self_169397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 30), 'self')
        # Obtaining the member '_ys_at_press' of a type (line 2648)
        _ys_at_press_169398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2648, 30), self_169397, '_ys_at_press')
        # Obtaining the member '__getitem__' of a type (line 2648)
        getitem___169399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2648, 30), _ys_at_press_169398, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2648)
        subscript_call_result_169400 = invoke(stypy.reporting.localization.Localization(__file__, 2648, 30), getitem___169399, k_169396)
        
        # Getting the type of 'dy' (line 2648)
        dy_169401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 53), 'dy')
        # Applying the binary operator '+' (line 2648)
        result_add_169402 = python_operator(stypy.reporting.localization.Localization(__file__, 2648, 30), '+', subscript_call_result_169400, dy_169401)
        
        # Getting the type of 'self' (line 2648)
        self_169403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 16), 'self')
        # Obtaining the member '_ys' of a type (line 2648)
        _ys_169404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2648, 16), self_169403, '_ys')
        # Getting the type of 'k' (line 2648)
        k_169405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 25), 'k')
        # Storing an element on a container (line 2648)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2648, 16), _ys_169404, (k_169405, result_add_169402))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2643)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2651)
        self_169406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 14), 'self')
        # Obtaining the member '_polygon_completed' of a type (line 2651)
        _polygon_completed_169407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2651, 14), self_169406, '_polygon_completed')
        
        unicode_169408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2652, 17), 'unicode', u'move_vertex')
        # Getting the type of 'self' (line 2652)
        self_169409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2652, 34), 'self')
        # Obtaining the member 'state' of a type (line 2652)
        state_169410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2652, 34), self_169409, 'state')
        # Applying the binary operator 'in' (line 2652)
        result_contains_169411 = python_operator(stypy.reporting.localization.Localization(__file__, 2652, 17), 'in', unicode_169408, state_169410)
        
        # Applying the binary operator 'or' (line 2651)
        result_or_keyword_169412 = python_operator(stypy.reporting.localization.Localization(__file__, 2651, 14), 'or', _polygon_completed_169407, result_contains_169411)
        
        unicode_169413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2652, 48), 'unicode', u'move_all')
        # Getting the type of 'self' (line 2652)
        self_169414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2652, 62), 'self')
        # Obtaining the member 'state' of a type (line 2652)
        state_169415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2652, 62), self_169414, 'state')
        # Applying the binary operator 'in' (line 2652)
        result_contains_169416 = python_operator(stypy.reporting.localization.Localization(__file__, 2652, 48), 'in', unicode_169413, state_169415)
        
        # Applying the binary operator 'or' (line 2651)
        result_or_keyword_169417 = python_operator(stypy.reporting.localization.Localization(__file__, 2651, 14), 'or', result_or_keyword_169412, result_contains_169416)
        
        # Testing the type of an if condition (line 2651)
        if_condition_169418 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2651, 13), result_or_keyword_169417)
        # Assigning a type to the variable 'if_condition_169418' (line 2651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2651, 13), 'if_condition_169418', if_condition_169418)
        # SSA begins for if statement (line 2651)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 2653)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2653, 12), 'stypy_return_type', types.NoneType)
        # SSA branch for the else part of an if statement (line 2651)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 2658):
        
        # Assigning a Call to a Name:
        
        # Call to transform(...): (line 2658)
        # Processing the call arguments (line 2658)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2658)
        tuple_169425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2658, 58), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2658)
        # Adding element type (line 2658)
        
        # Obtaining the type of the subscript
        int_169426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2658, 67), 'int')
        # Getting the type of 'self' (line 2658)
        self_169427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2658, 58), 'self', False)
        # Obtaining the member '_xs' of a type (line 2658)
        _xs_169428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2658, 58), self_169427, '_xs')
        # Obtaining the member '__getitem__' of a type (line 2658)
        getitem___169429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2658, 58), _xs_169428, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2658)
        subscript_call_result_169430 = invoke(stypy.reporting.localization.Localization(__file__, 2658, 58), getitem___169429, int_169426)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2658, 58), tuple_169425, subscript_call_result_169430)
        # Adding element type (line 2658)
        
        # Obtaining the type of the subscript
        int_169431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2659, 67), 'int')
        # Getting the type of 'self' (line 2659)
        self_169432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2659, 58), 'self', False)
        # Obtaining the member '_ys' of a type (line 2659)
        _ys_169433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2659, 58), self_169432, '_ys')
        # Obtaining the member '__getitem__' of a type (line 2659)
        getitem___169434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2659, 58), _ys_169433, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2659)
        subscript_call_result_169435 = invoke(stypy.reporting.localization.Localization(__file__, 2659, 58), getitem___169434, int_169431)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2658, 58), tuple_169425, subscript_call_result_169435)
        
        # Processing the call keyword arguments (line 2658)
        kwargs_169436 = {}
        
        # Call to get_transform(...): (line 2658)
        # Processing the call keyword arguments (line 2658)
        kwargs_169422 = {}
        # Getting the type of 'self' (line 2658)
        self_169419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2658, 21), 'self', False)
        # Obtaining the member 'line' of a type (line 2658)
        line_169420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2658, 21), self_169419, 'line')
        # Obtaining the member 'get_transform' of a type (line 2658)
        get_transform_169421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2658, 21), line_169420, 'get_transform')
        # Calling get_transform(args, kwargs) (line 2658)
        get_transform_call_result_169423 = invoke(stypy.reporting.localization.Localization(__file__, 2658, 21), get_transform_169421, *[], **kwargs_169422)
        
        # Obtaining the member 'transform' of a type (line 2658)
        transform_169424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2658, 21), get_transform_call_result_169423, 'transform')
        # Calling transform(args, kwargs) (line 2658)
        transform_call_result_169437 = invoke(stypy.reporting.localization.Localization(__file__, 2658, 21), transform_169424, *[tuple_169425], **kwargs_169436)
        
        # Assigning a type to the variable 'call_assignment_162440' (line 2658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2658, 12), 'call_assignment_162440', transform_call_result_169437)
        
        # Assigning a Call to a Name (line 2658):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_169440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2658, 12), 'int')
        # Processing the call keyword arguments
        kwargs_169441 = {}
        # Getting the type of 'call_assignment_162440' (line 2658)
        call_assignment_162440_169438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2658, 12), 'call_assignment_162440', False)
        # Obtaining the member '__getitem__' of a type (line 2658)
        getitem___169439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2658, 12), call_assignment_162440_169438, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_169442 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___169439, *[int_169440], **kwargs_169441)
        
        # Assigning a type to the variable 'call_assignment_162441' (line 2658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2658, 12), 'call_assignment_162441', getitem___call_result_169442)
        
        # Assigning a Name to a Name (line 2658):
        # Getting the type of 'call_assignment_162441' (line 2658)
        call_assignment_162441_169443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2658, 12), 'call_assignment_162441')
        # Assigning a type to the variable 'x0' (line 2658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2658, 12), 'x0', call_assignment_162441_169443)
        
        # Assigning a Call to a Name (line 2658):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_169446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2658, 12), 'int')
        # Processing the call keyword arguments
        kwargs_169447 = {}
        # Getting the type of 'call_assignment_162440' (line 2658)
        call_assignment_162440_169444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2658, 12), 'call_assignment_162440', False)
        # Obtaining the member '__getitem__' of a type (line 2658)
        getitem___169445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2658, 12), call_assignment_162440_169444, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_169448 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___169445, *[int_169446], **kwargs_169447)
        
        # Assigning a type to the variable 'call_assignment_162442' (line 2658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2658, 12), 'call_assignment_162442', getitem___call_result_169448)
        
        # Assigning a Name to a Name (line 2658):
        # Getting the type of 'call_assignment_162442' (line 2658)
        call_assignment_162442_169449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2658, 12), 'call_assignment_162442')
        # Assigning a type to the variable 'y0' (line 2658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2658, 16), 'y0', call_assignment_162442_169449)
        
        # Assigning a Call to a Name (line 2660):
        
        # Assigning a Call to a Name (line 2660):
        
        # Call to sqrt(...): (line 2660)
        # Processing the call arguments (line 2660)
        # Getting the type of 'x0' (line 2660)
        x0_169452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 31), 'x0', False)
        # Getting the type of 'event' (line 2660)
        event_169453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 36), 'event', False)
        # Obtaining the member 'x' of a type (line 2660)
        x_169454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2660, 36), event_169453, 'x')
        # Applying the binary operator '-' (line 2660)
        result_sub_169455 = python_operator(stypy.reporting.localization.Localization(__file__, 2660, 31), '-', x0_169452, x_169454)
        
        int_169456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2660, 48), 'int')
        # Applying the binary operator '**' (line 2660)
        result_pow_169457 = python_operator(stypy.reporting.localization.Localization(__file__, 2660, 30), '**', result_sub_169455, int_169456)
        
        # Getting the type of 'y0' (line 2660)
        y0_169458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 53), 'y0', False)
        # Getting the type of 'event' (line 2660)
        event_169459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 58), 'event', False)
        # Obtaining the member 'y' of a type (line 2660)
        y_169460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2660, 58), event_169459, 'y')
        # Applying the binary operator '-' (line 2660)
        result_sub_169461 = python_operator(stypy.reporting.localization.Localization(__file__, 2660, 53), '-', y0_169458, y_169460)
        
        int_169462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2660, 70), 'int')
        # Applying the binary operator '**' (line 2660)
        result_pow_169463 = python_operator(stypy.reporting.localization.Localization(__file__, 2660, 52), '**', result_sub_169461, int_169462)
        
        # Applying the binary operator '+' (line 2660)
        result_add_169464 = python_operator(stypy.reporting.localization.Localization(__file__, 2660, 30), '+', result_pow_169457, result_pow_169463)
        
        # Processing the call keyword arguments (line 2660)
        kwargs_169465 = {}
        # Getting the type of 'np' (line 2660)
        np_169450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 22), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 2660)
        sqrt_169451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2660, 22), np_169450, 'sqrt')
        # Calling sqrt(args, kwargs) (line 2660)
        sqrt_call_result_169466 = invoke(stypy.reporting.localization.Localization(__file__, 2660, 22), sqrt_169451, *[result_add_169464], **kwargs_169465)
        
        # Assigning a type to the variable 'v0_dist' (line 2660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2660, 12), 'v0_dist', sqrt_call_result_169466)
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 2662)
        # Processing the call arguments (line 2662)
        # Getting the type of 'self' (line 2662)
        self_169468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 19), 'self', False)
        # Obtaining the member '_xs' of a type (line 2662)
        _xs_169469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2662, 19), self_169468, '_xs')
        # Processing the call keyword arguments (line 2662)
        kwargs_169470 = {}
        # Getting the type of 'len' (line 2662)
        len_169467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 15), 'len', False)
        # Calling len(args, kwargs) (line 2662)
        len_call_result_169471 = invoke(stypy.reporting.localization.Localization(__file__, 2662, 15), len_169467, *[_xs_169469], **kwargs_169470)
        
        int_169472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2662, 31), 'int')
        # Applying the binary operator '>' (line 2662)
        result_gt_169473 = python_operator(stypy.reporting.localization.Localization(__file__, 2662, 15), '>', len_call_result_169471, int_169472)
        
        
        # Getting the type of 'v0_dist' (line 2662)
        v0_dist_169474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 37), 'v0_dist')
        # Getting the type of 'self' (line 2662)
        self_169475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 47), 'self')
        # Obtaining the member 'vertex_select_radius' of a type (line 2662)
        vertex_select_radius_169476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2662, 47), self_169475, 'vertex_select_radius')
        # Applying the binary operator '<' (line 2662)
        result_lt_169477 = python_operator(stypy.reporting.localization.Localization(__file__, 2662, 37), '<', v0_dist_169474, vertex_select_radius_169476)
        
        # Applying the binary operator 'and' (line 2662)
        result_and_keyword_169478 = python_operator(stypy.reporting.localization.Localization(__file__, 2662, 15), 'and', result_gt_169473, result_lt_169477)
        
        # Testing the type of an if condition (line 2662)
        if_condition_169479 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2662, 12), result_and_keyword_169478)
        # Assigning a type to the variable 'if_condition_169479' (line 2662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2662, 12), 'if_condition_169479', if_condition_169479)
        # SSA begins for if statement (line 2662)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 2663):
        
        # Assigning a Subscript to a Name (line 2663):
        
        # Obtaining the type of the subscript
        int_169480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2663, 54), 'int')
        # Getting the type of 'self' (line 2663)
        self_169481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 45), 'self')
        # Obtaining the member '_xs' of a type (line 2663)
        _xs_169482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2663, 45), self_169481, '_xs')
        # Obtaining the member '__getitem__' of a type (line 2663)
        getitem___169483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2663, 45), _xs_169482, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2663)
        subscript_call_result_169484 = invoke(stypy.reporting.localization.Localization(__file__, 2663, 45), getitem___169483, int_169480)
        
        # Assigning a type to the variable 'tuple_assignment_162443' (line 2663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2663, 16), 'tuple_assignment_162443', subscript_call_result_169484)
        
        # Assigning a Subscript to a Name (line 2663):
        
        # Obtaining the type of the subscript
        int_169485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2663, 67), 'int')
        # Getting the type of 'self' (line 2663)
        self_169486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 58), 'self')
        # Obtaining the member '_ys' of a type (line 2663)
        _ys_169487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2663, 58), self_169486, '_ys')
        # Obtaining the member '__getitem__' of a type (line 2663)
        getitem___169488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2663, 58), _ys_169487, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2663)
        subscript_call_result_169489 = invoke(stypy.reporting.localization.Localization(__file__, 2663, 58), getitem___169488, int_169485)
        
        # Assigning a type to the variable 'tuple_assignment_162444' (line 2663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2663, 16), 'tuple_assignment_162444', subscript_call_result_169489)
        
        # Assigning a Name to a Subscript (line 2663):
        # Getting the type of 'tuple_assignment_162443' (line 2663)
        tuple_assignment_162443_169490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 16), 'tuple_assignment_162443')
        # Getting the type of 'self' (line 2663)
        self_169491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 16), 'self')
        # Obtaining the member '_xs' of a type (line 2663)
        _xs_169492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2663, 16), self_169491, '_xs')
        int_169493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2663, 25), 'int')
        # Storing an element on a container (line 2663)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2663, 16), _xs_169492, (int_169493, tuple_assignment_162443_169490))
        
        # Assigning a Name to a Subscript (line 2663):
        # Getting the type of 'tuple_assignment_162444' (line 2663)
        tuple_assignment_162444_169494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 16), 'tuple_assignment_162444')
        # Getting the type of 'self' (line 2663)
        self_169495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 30), 'self')
        # Obtaining the member '_ys' of a type (line 2663)
        _ys_169496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2663, 30), self_169495, '_ys')
        int_169497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2663, 39), 'int')
        # Storing an element on a container (line 2663)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2663, 30), _ys_169496, (int_169497, tuple_assignment_162444_169494))
        # SSA branch for the else part of an if statement (line 2662)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Tuple (line 2665):
        
        # Assigning a Attribute to a Name (line 2665):
        # Getting the type of 'event' (line 2665)
        event_169498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 45), 'event')
        # Obtaining the member 'xdata' of a type (line 2665)
        xdata_169499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2665, 45), event_169498, 'xdata')
        # Assigning a type to the variable 'tuple_assignment_162445' (line 2665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2665, 16), 'tuple_assignment_162445', xdata_169499)
        
        # Assigning a Attribute to a Name (line 2665):
        # Getting the type of 'event' (line 2665)
        event_169500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 58), 'event')
        # Obtaining the member 'ydata' of a type (line 2665)
        ydata_169501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2665, 58), event_169500, 'ydata')
        # Assigning a type to the variable 'tuple_assignment_162446' (line 2665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2665, 16), 'tuple_assignment_162446', ydata_169501)
        
        # Assigning a Name to a Subscript (line 2665):
        # Getting the type of 'tuple_assignment_162445' (line 2665)
        tuple_assignment_162445_169502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 16), 'tuple_assignment_162445')
        # Getting the type of 'self' (line 2665)
        self_169503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 16), 'self')
        # Obtaining the member '_xs' of a type (line 2665)
        _xs_169504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2665, 16), self_169503, '_xs')
        int_169505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2665, 25), 'int')
        # Storing an element on a container (line 2665)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2665, 16), _xs_169504, (int_169505, tuple_assignment_162445_169502))
        
        # Assigning a Name to a Subscript (line 2665):
        # Getting the type of 'tuple_assignment_162446' (line 2665)
        tuple_assignment_162446_169506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 16), 'tuple_assignment_162446')
        # Getting the type of 'self' (line 2665)
        self_169507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 30), 'self')
        # Obtaining the member '_ys' of a type (line 2665)
        _ys_169508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2665, 30), self_169507, '_ys')
        int_169509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2665, 39), 'int')
        # Storing an element on a container (line 2665)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2665, 30), _ys_169508, (int_169509, tuple_assignment_162446_169506))
        # SSA join for if statement (line 2662)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2651)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2643)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2634)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _draw_polygon(...): (line 2667)
        # Processing the call keyword arguments (line 2667)
        kwargs_169512 = {}
        # Getting the type of 'self' (line 2667)
        self_169510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 8), 'self', False)
        # Obtaining the member '_draw_polygon' of a type (line 2667)
        _draw_polygon_169511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2667, 8), self_169510, '_draw_polygon')
        # Calling _draw_polygon(args, kwargs) (line 2667)
        _draw_polygon_call_result_169513 = invoke(stypy.reporting.localization.Localization(__file__, 2667, 8), _draw_polygon_169511, *[], **kwargs_169512)
        
        
        # ################# End of '_onmove(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_onmove' in the type store
        # Getting the type of 'stypy_return_type' (line 2631)
        stypy_return_type_169514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2631, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_169514)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_onmove'
        return stypy_return_type_169514


    @norecursion
    def _on_key_press(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_on_key_press'
        module_type_store = module_type_store.open_function_context('_on_key_press', 2669, 4, False)
        # Assigning a type to the variable 'self' (line 2670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2670, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolygonSelector._on_key_press.__dict__.__setitem__('stypy_localization', localization)
        PolygonSelector._on_key_press.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolygonSelector._on_key_press.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolygonSelector._on_key_press.__dict__.__setitem__('stypy_function_name', 'PolygonSelector._on_key_press')
        PolygonSelector._on_key_press.__dict__.__setitem__('stypy_param_names_list', ['event'])
        PolygonSelector._on_key_press.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolygonSelector._on_key_press.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolygonSelector._on_key_press.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolygonSelector._on_key_press.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolygonSelector._on_key_press.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolygonSelector._on_key_press.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolygonSelector._on_key_press', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_on_key_press', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_on_key_press(...)' code ##################

        unicode_169515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2670, 8), 'unicode', u'Key press event handler')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2673)
        self_169516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2673, 16), 'self')
        # Obtaining the member '_polygon_completed' of a type (line 2673)
        _polygon_completed_169517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2673, 16), self_169516, '_polygon_completed')
        # Applying the 'not' unary operator (line 2673)
        result_not__169518 = python_operator(stypy.reporting.localization.Localization(__file__, 2673, 12), 'not', _polygon_completed_169517)
        
        
        # Evaluating a boolean operation
        
        unicode_169519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2674, 21), 'unicode', u'move_vertex')
        # Getting the type of 'self' (line 2674)
        self_169520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 38), 'self')
        # Obtaining the member 'state' of a type (line 2674)
        state_169521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2674, 38), self_169520, 'state')
        # Applying the binary operator 'in' (line 2674)
        result_contains_169522 = python_operator(stypy.reporting.localization.Localization(__file__, 2674, 21), 'in', unicode_169519, state_169521)
        
        
        unicode_169523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2674, 52), 'unicode', u'move_all')
        # Getting the type of 'self' (line 2674)
        self_169524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 66), 'self')
        # Obtaining the member 'state' of a type (line 2674)
        state_169525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2674, 66), self_169524, 'state')
        # Applying the binary operator 'in' (line 2674)
        result_contains_169526 = python_operator(stypy.reporting.localization.Localization(__file__, 2674, 52), 'in', unicode_169523, state_169525)
        
        # Applying the binary operator 'or' (line 2674)
        result_or_keyword_169527 = python_operator(stypy.reporting.localization.Localization(__file__, 2674, 21), 'or', result_contains_169522, result_contains_169526)
        
        # Applying the binary operator 'and' (line 2673)
        result_and_keyword_169528 = python_operator(stypy.reporting.localization.Localization(__file__, 2673, 12), 'and', result_not__169518, result_or_keyword_169527)
        
        # Testing the type of an if condition (line 2673)
        if_condition_169529 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2673, 8), result_and_keyword_169528)
        # Assigning a type to the variable 'if_condition_169529' (line 2673)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2673, 8), 'if_condition_169529', if_condition_169529)
        # SSA begins for if statement (line 2673)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 2675):
        
        # Assigning a Subscript to a Name (line 2675):
        
        # Obtaining the type of the subscript
        int_169530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2675, 43), 'int')
        slice_169531 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2675, 33), None, int_169530, None)
        # Getting the type of 'self' (line 2675)
        self_169532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2675, 33), 'self')
        # Obtaining the member '_xs' of a type (line 2675)
        _xs_169533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2675, 33), self_169532, '_xs')
        # Obtaining the member '__getitem__' of a type (line 2675)
        getitem___169534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2675, 33), _xs_169533, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2675)
        subscript_call_result_169535 = invoke(stypy.reporting.localization.Localization(__file__, 2675, 33), getitem___169534, slice_169531)
        
        # Assigning a type to the variable 'tuple_assignment_162447' (line 2675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2675, 12), 'tuple_assignment_162447', subscript_call_result_169535)
        
        # Assigning a Subscript to a Name (line 2675):
        
        # Obtaining the type of the subscript
        int_169536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2675, 58), 'int')
        slice_169537 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2675, 48), None, int_169536, None)
        # Getting the type of 'self' (line 2675)
        self_169538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2675, 48), 'self')
        # Obtaining the member '_ys' of a type (line 2675)
        _ys_169539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2675, 48), self_169538, '_ys')
        # Obtaining the member '__getitem__' of a type (line 2675)
        getitem___169540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2675, 48), _ys_169539, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2675)
        subscript_call_result_169541 = invoke(stypy.reporting.localization.Localization(__file__, 2675, 48), getitem___169540, slice_169537)
        
        # Assigning a type to the variable 'tuple_assignment_162448' (line 2675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2675, 12), 'tuple_assignment_162448', subscript_call_result_169541)
        
        # Assigning a Name to a Attribute (line 2675):
        # Getting the type of 'tuple_assignment_162447' (line 2675)
        tuple_assignment_162447_169542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2675, 12), 'tuple_assignment_162447')
        # Getting the type of 'self' (line 2675)
        self_169543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2675, 12), 'self')
        # Setting the type of the member '_xs' of a type (line 2675)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2675, 12), self_169543, '_xs', tuple_assignment_162447_169542)
        
        # Assigning a Name to a Attribute (line 2675):
        # Getting the type of 'tuple_assignment_162448' (line 2675)
        tuple_assignment_162448_169544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2675, 12), 'tuple_assignment_162448')
        # Getting the type of 'self' (line 2675)
        self_169545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2675, 22), 'self')
        # Setting the type of the member '_ys' of a type (line 2675)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2675, 22), self_169545, '_ys', tuple_assignment_162448_169544)
        
        # Call to _draw_polygon(...): (line 2676)
        # Processing the call keyword arguments (line 2676)
        kwargs_169548 = {}
        # Getting the type of 'self' (line 2676)
        self_169546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2676, 12), 'self', False)
        # Obtaining the member '_draw_polygon' of a type (line 2676)
        _draw_polygon_169547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2676, 12), self_169546, '_draw_polygon')
        # Calling _draw_polygon(args, kwargs) (line 2676)
        _draw_polygon_call_result_169549 = invoke(stypy.reporting.localization.Localization(__file__, 2676, 12), _draw_polygon_169547, *[], **kwargs_169548)
        
        # SSA join for if statement (line 2673)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_on_key_press(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_on_key_press' in the type store
        # Getting the type of 'stypy_return_type' (line 2669)
        stypy_return_type_169550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_169550)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_on_key_press'
        return stypy_return_type_169550


    @norecursion
    def _on_key_release(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_on_key_release'
        module_type_store = module_type_store.open_function_context('_on_key_release', 2678, 4, False)
        # Assigning a type to the variable 'self' (line 2679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2679, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolygonSelector._on_key_release.__dict__.__setitem__('stypy_localization', localization)
        PolygonSelector._on_key_release.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolygonSelector._on_key_release.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolygonSelector._on_key_release.__dict__.__setitem__('stypy_function_name', 'PolygonSelector._on_key_release')
        PolygonSelector._on_key_release.__dict__.__setitem__('stypy_param_names_list', ['event'])
        PolygonSelector._on_key_release.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolygonSelector._on_key_release.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolygonSelector._on_key_release.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolygonSelector._on_key_release.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolygonSelector._on_key_release.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolygonSelector._on_key_release.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolygonSelector._on_key_release', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_on_key_release', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_on_key_release(...)' code ##################

        unicode_169551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2679, 8), 'unicode', u'Key release event handler')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2682)
        self_169552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2682, 16), 'self')
        # Obtaining the member '_polygon_completed' of a type (line 2682)
        _polygon_completed_169553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2682, 16), self_169552, '_polygon_completed')
        # Applying the 'not' unary operator (line 2682)
        result_not__169554 = python_operator(stypy.reporting.localization.Localization(__file__, 2682, 12), 'not', _polygon_completed_169553)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'event' (line 2684)
        event_169555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 17), 'event')
        # Obtaining the member 'key' of a type (line 2684)
        key_169556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2684, 17), event_169555, 'key')
        
        # Call to get(...): (line 2684)
        # Processing the call arguments (line 2684)
        unicode_169560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2684, 59), 'unicode', u'move_vertex')
        # Processing the call keyword arguments (line 2684)
        kwargs_169561 = {}
        # Getting the type of 'self' (line 2684)
        self_169557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 30), 'self', False)
        # Obtaining the member 'state_modifier_keys' of a type (line 2684)
        state_modifier_keys_169558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2684, 30), self_169557, 'state_modifier_keys')
        # Obtaining the member 'get' of a type (line 2684)
        get_169559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2684, 30), state_modifier_keys_169558, 'get')
        # Calling get(args, kwargs) (line 2684)
        get_call_result_169562 = invoke(stypy.reporting.localization.Localization(__file__, 2684, 30), get_169559, *[unicode_169560], **kwargs_169561)
        
        # Applying the binary operator '==' (line 2684)
        result_eq_169563 = python_operator(stypy.reporting.localization.Localization(__file__, 2684, 17), '==', key_169556, get_call_result_169562)
        
        
        # Getting the type of 'event' (line 2685)
        event_169564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2685, 20), 'event')
        # Obtaining the member 'key' of a type (line 2685)
        key_169565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2685, 20), event_169564, 'key')
        
        # Call to get(...): (line 2685)
        # Processing the call arguments (line 2685)
        unicode_169569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2685, 62), 'unicode', u'move_all')
        # Processing the call keyword arguments (line 2685)
        kwargs_169570 = {}
        # Getting the type of 'self' (line 2685)
        self_169566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2685, 33), 'self', False)
        # Obtaining the member 'state_modifier_keys' of a type (line 2685)
        state_modifier_keys_169567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2685, 33), self_169566, 'state_modifier_keys')
        # Obtaining the member 'get' of a type (line 2685)
        get_169568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2685, 33), state_modifier_keys_169567, 'get')
        # Calling get(args, kwargs) (line 2685)
        get_call_result_169571 = invoke(stypy.reporting.localization.Localization(__file__, 2685, 33), get_169568, *[unicode_169569], **kwargs_169570)
        
        # Applying the binary operator '==' (line 2685)
        result_eq_169572 = python_operator(stypy.reporting.localization.Localization(__file__, 2685, 20), '==', key_169565, get_call_result_169571)
        
        # Applying the binary operator 'or' (line 2684)
        result_or_keyword_169573 = python_operator(stypy.reporting.localization.Localization(__file__, 2684, 17), 'or', result_eq_169563, result_eq_169572)
        
        # Applying the binary operator 'and' (line 2682)
        result_and_keyword_169574 = python_operator(stypy.reporting.localization.Localization(__file__, 2682, 12), 'and', result_not__169554, result_or_keyword_169573)
        
        # Testing the type of an if condition (line 2682)
        if_condition_169575 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2682, 8), result_and_keyword_169574)
        # Assigning a type to the variable 'if_condition_169575' (line 2682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2682, 8), 'if_condition_169575', if_condition_169575)
        # SSA begins for if statement (line 2682)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2686)
        # Processing the call arguments (line 2686)
        # Getting the type of 'event' (line 2686)
        event_169579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2686, 28), 'event', False)
        # Obtaining the member 'xdata' of a type (line 2686)
        xdata_169580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2686, 28), event_169579, 'xdata')
        # Processing the call keyword arguments (line 2686)
        kwargs_169581 = {}
        # Getting the type of 'self' (line 2686)
        self_169576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2686, 12), 'self', False)
        # Obtaining the member '_xs' of a type (line 2686)
        _xs_169577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2686, 12), self_169576, '_xs')
        # Obtaining the member 'append' of a type (line 2686)
        append_169578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2686, 12), _xs_169577, 'append')
        # Calling append(args, kwargs) (line 2686)
        append_call_result_169582 = invoke(stypy.reporting.localization.Localization(__file__, 2686, 12), append_169578, *[xdata_169580], **kwargs_169581)
        
        
        # Call to append(...): (line 2687)
        # Processing the call arguments (line 2687)
        # Getting the type of 'event' (line 2687)
        event_169586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2687, 28), 'event', False)
        # Obtaining the member 'ydata' of a type (line 2687)
        ydata_169587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2687, 28), event_169586, 'ydata')
        # Processing the call keyword arguments (line 2687)
        kwargs_169588 = {}
        # Getting the type of 'self' (line 2687)
        self_169583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2687, 12), 'self', False)
        # Obtaining the member '_ys' of a type (line 2687)
        _ys_169584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2687, 12), self_169583, '_ys')
        # Obtaining the member 'append' of a type (line 2687)
        append_169585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2687, 12), _ys_169584, 'append')
        # Calling append(args, kwargs) (line 2687)
        append_call_result_169589 = invoke(stypy.reporting.localization.Localization(__file__, 2687, 12), append_169585, *[ydata_169587], **kwargs_169588)
        
        
        # Call to _draw_polygon(...): (line 2688)
        # Processing the call keyword arguments (line 2688)
        kwargs_169592 = {}
        # Getting the type of 'self' (line 2688)
        self_169590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2688, 12), 'self', False)
        # Obtaining the member '_draw_polygon' of a type (line 2688)
        _draw_polygon_169591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2688, 12), self_169590, '_draw_polygon')
        # Calling _draw_polygon(args, kwargs) (line 2688)
        _draw_polygon_call_result_169593 = invoke(stypy.reporting.localization.Localization(__file__, 2688, 12), _draw_polygon_169591, *[], **kwargs_169592)
        
        # SSA branch for the else part of an if statement (line 2682)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'event' (line 2690)
        event_169594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2690, 13), 'event')
        # Obtaining the member 'key' of a type (line 2690)
        key_169595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2690, 13), event_169594, 'key')
        
        # Call to get(...): (line 2690)
        # Processing the call arguments (line 2690)
        unicode_169599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2690, 55), 'unicode', u'clear')
        # Processing the call keyword arguments (line 2690)
        kwargs_169600 = {}
        # Getting the type of 'self' (line 2690)
        self_169596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2690, 26), 'self', False)
        # Obtaining the member 'state_modifier_keys' of a type (line 2690)
        state_modifier_keys_169597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2690, 26), self_169596, 'state_modifier_keys')
        # Obtaining the member 'get' of a type (line 2690)
        get_169598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2690, 26), state_modifier_keys_169597, 'get')
        # Calling get(args, kwargs) (line 2690)
        get_call_result_169601 = invoke(stypy.reporting.localization.Localization(__file__, 2690, 26), get_169598, *[unicode_169599], **kwargs_169600)
        
        # Applying the binary operator '==' (line 2690)
        result_eq_169602 = python_operator(stypy.reporting.localization.Localization(__file__, 2690, 13), '==', key_169595, get_call_result_169601)
        
        # Testing the type of an if condition (line 2690)
        if_condition_169603 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2690, 13), result_eq_169602)
        # Assigning a type to the variable 'if_condition_169603' (line 2690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2690, 13), 'if_condition_169603', if_condition_169603)
        # SSA begins for if statement (line 2690)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2691):
        
        # Assigning a Call to a Name (line 2691):
        
        # Call to _clean_event(...): (line 2691)
        # Processing the call arguments (line 2691)
        # Getting the type of 'event' (line 2691)
        event_169606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2691, 38), 'event', False)
        # Processing the call keyword arguments (line 2691)
        kwargs_169607 = {}
        # Getting the type of 'self' (line 2691)
        self_169604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2691, 20), 'self', False)
        # Obtaining the member '_clean_event' of a type (line 2691)
        _clean_event_169605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2691, 20), self_169604, '_clean_event')
        # Calling _clean_event(args, kwargs) (line 2691)
        _clean_event_call_result_169608 = invoke(stypy.reporting.localization.Localization(__file__, 2691, 20), _clean_event_169605, *[event_169606], **kwargs_169607)
        
        # Assigning a type to the variable 'event' (line 2691)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2691, 12), 'event', _clean_event_call_result_169608)
        
        # Assigning a Tuple to a Tuple (line 2692):
        
        # Assigning a List to a Name (line 2692):
        
        # Obtaining an instance of the builtin type 'list' (line 2692)
        list_169609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2692, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2692)
        # Adding element type (line 2692)
        # Getting the type of 'event' (line 2692)
        event_169610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2692, 34), 'event')
        # Obtaining the member 'xdata' of a type (line 2692)
        xdata_169611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2692, 34), event_169610, 'xdata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2692, 33), list_169609, xdata_169611)
        
        # Assigning a type to the variable 'tuple_assignment_162449' (line 2692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2692, 12), 'tuple_assignment_162449', list_169609)
        
        # Assigning a List to a Name (line 2692):
        
        # Obtaining an instance of the builtin type 'list' (line 2692)
        list_169612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2692, 48), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2692)
        # Adding element type (line 2692)
        # Getting the type of 'event' (line 2692)
        event_169613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2692, 49), 'event')
        # Obtaining the member 'ydata' of a type (line 2692)
        ydata_169614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2692, 49), event_169613, 'ydata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2692, 48), list_169612, ydata_169614)
        
        # Assigning a type to the variable 'tuple_assignment_162450' (line 2692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2692, 12), 'tuple_assignment_162450', list_169612)
        
        # Assigning a Name to a Attribute (line 2692):
        # Getting the type of 'tuple_assignment_162449' (line 2692)
        tuple_assignment_162449_169615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2692, 12), 'tuple_assignment_162449')
        # Getting the type of 'self' (line 2692)
        self_169616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2692, 12), 'self')
        # Setting the type of the member '_xs' of a type (line 2692)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2692, 12), self_169616, '_xs', tuple_assignment_162449_169615)
        
        # Assigning a Name to a Attribute (line 2692):
        # Getting the type of 'tuple_assignment_162450' (line 2692)
        tuple_assignment_162450_169617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2692, 12), 'tuple_assignment_162450')
        # Getting the type of 'self' (line 2692)
        self_169618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2692, 22), 'self')
        # Setting the type of the member '_ys' of a type (line 2692)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2692, 22), self_169618, '_ys', tuple_assignment_162450_169617)
        
        # Assigning a Name to a Attribute (line 2693):
        
        # Assigning a Name to a Attribute (line 2693):
        # Getting the type of 'False' (line 2693)
        False_169619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2693, 38), 'False')
        # Getting the type of 'self' (line 2693)
        self_169620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2693, 12), 'self')
        # Setting the type of the member '_polygon_completed' of a type (line 2693)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2693, 12), self_169620, '_polygon_completed', False_169619)
        
        # Call to set_visible(...): (line 2694)
        # Processing the call arguments (line 2694)
        # Getting the type of 'True' (line 2694)
        True_169623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2694, 29), 'True', False)
        # Processing the call keyword arguments (line 2694)
        kwargs_169624 = {}
        # Getting the type of 'self' (line 2694)
        self_169621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2694, 12), 'self', False)
        # Obtaining the member 'set_visible' of a type (line 2694)
        set_visible_169622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2694, 12), self_169621, 'set_visible')
        # Calling set_visible(args, kwargs) (line 2694)
        set_visible_call_result_169625 = invoke(stypy.reporting.localization.Localization(__file__, 2694, 12), set_visible_169622, *[True_169623], **kwargs_169624)
        
        # SSA join for if statement (line 2690)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2682)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_on_key_release(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_on_key_release' in the type store
        # Getting the type of 'stypy_return_type' (line 2678)
        stypy_return_type_169626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2678, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_169626)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_on_key_release'
        return stypy_return_type_169626


    @norecursion
    def _draw_polygon(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_draw_polygon'
        module_type_store = module_type_store.open_function_context('_draw_polygon', 2696, 4, False)
        # Assigning a type to the variable 'self' (line 2697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2697, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolygonSelector._draw_polygon.__dict__.__setitem__('stypy_localization', localization)
        PolygonSelector._draw_polygon.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolygonSelector._draw_polygon.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolygonSelector._draw_polygon.__dict__.__setitem__('stypy_function_name', 'PolygonSelector._draw_polygon')
        PolygonSelector._draw_polygon.__dict__.__setitem__('stypy_param_names_list', [])
        PolygonSelector._draw_polygon.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolygonSelector._draw_polygon.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolygonSelector._draw_polygon.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolygonSelector._draw_polygon.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolygonSelector._draw_polygon.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolygonSelector._draw_polygon.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolygonSelector._draw_polygon', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_draw_polygon', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_draw_polygon(...)' code ##################

        unicode_169627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2697, 8), 'unicode', u'Redraw the polygon based on the new vertex positions.')
        
        # Call to set_data(...): (line 2698)
        # Processing the call arguments (line 2698)
        # Getting the type of 'self' (line 2698)
        self_169631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 27), 'self', False)
        # Obtaining the member '_xs' of a type (line 2698)
        _xs_169632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2698, 27), self_169631, '_xs')
        # Getting the type of 'self' (line 2698)
        self_169633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 37), 'self', False)
        # Obtaining the member '_ys' of a type (line 2698)
        _ys_169634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2698, 37), self_169633, '_ys')
        # Processing the call keyword arguments (line 2698)
        kwargs_169635 = {}
        # Getting the type of 'self' (line 2698)
        self_169628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 8), 'self', False)
        # Obtaining the member 'line' of a type (line 2698)
        line_169629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2698, 8), self_169628, 'line')
        # Obtaining the member 'set_data' of a type (line 2698)
        set_data_169630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2698, 8), line_169629, 'set_data')
        # Calling set_data(args, kwargs) (line 2698)
        set_data_call_result_169636 = invoke(stypy.reporting.localization.Localization(__file__, 2698, 8), set_data_169630, *[_xs_169632, _ys_169634], **kwargs_169635)
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 2702)
        self_169637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2702, 12), 'self')
        # Obtaining the member '_polygon_completed' of a type (line 2702)
        _polygon_completed_169638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2702, 12), self_169637, '_polygon_completed')
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 2703)
        # Processing the call arguments (line 2703)
        # Getting the type of 'self' (line 2703)
        self_169640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2703, 24), 'self', False)
        # Obtaining the member '_xs' of a type (line 2703)
        _xs_169641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2703, 24), self_169640, '_xs')
        # Processing the call keyword arguments (line 2703)
        kwargs_169642 = {}
        # Getting the type of 'len' (line 2703)
        len_169639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2703, 20), 'len', False)
        # Calling len(args, kwargs) (line 2703)
        len_call_result_169643 = invoke(stypy.reporting.localization.Localization(__file__, 2703, 20), len_169639, *[_xs_169641], **kwargs_169642)
        
        int_169644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2703, 36), 'int')
        # Applying the binary operator '>' (line 2703)
        result_gt_169645 = python_operator(stypy.reporting.localization.Localization(__file__, 2703, 20), '>', len_call_result_169643, int_169644)
        
        
        
        # Obtaining the type of the subscript
        int_169646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2704, 33), 'int')
        # Getting the type of 'self' (line 2704)
        self_169647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2704, 24), 'self')
        # Obtaining the member '_xs' of a type (line 2704)
        _xs_169648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2704, 24), self_169647, '_xs')
        # Obtaining the member '__getitem__' of a type (line 2704)
        getitem___169649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2704, 24), _xs_169648, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2704)
        subscript_call_result_169650 = invoke(stypy.reporting.localization.Localization(__file__, 2704, 24), getitem___169649, int_169646)
        
        
        # Obtaining the type of the subscript
        int_169651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2704, 49), 'int')
        # Getting the type of 'self' (line 2704)
        self_169652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2704, 40), 'self')
        # Obtaining the member '_xs' of a type (line 2704)
        _xs_169653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2704, 40), self_169652, '_xs')
        # Obtaining the member '__getitem__' of a type (line 2704)
        getitem___169654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2704, 40), _xs_169653, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2704)
        subscript_call_result_169655 = invoke(stypy.reporting.localization.Localization(__file__, 2704, 40), getitem___169654, int_169651)
        
        # Applying the binary operator '==' (line 2704)
        result_eq_169656 = python_operator(stypy.reporting.localization.Localization(__file__, 2704, 24), '==', subscript_call_result_169650, subscript_call_result_169655)
        
        # Applying the binary operator 'and' (line 2703)
        result_and_keyword_169657 = python_operator(stypy.reporting.localization.Localization(__file__, 2703, 20), 'and', result_gt_169645, result_eq_169656)
        
        
        # Obtaining the type of the subscript
        int_169658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2705, 33), 'int')
        # Getting the type of 'self' (line 2705)
        self_169659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2705, 24), 'self')
        # Obtaining the member '_ys' of a type (line 2705)
        _ys_169660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2705, 24), self_169659, '_ys')
        # Obtaining the member '__getitem__' of a type (line 2705)
        getitem___169661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2705, 24), _ys_169660, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2705)
        subscript_call_result_169662 = invoke(stypy.reporting.localization.Localization(__file__, 2705, 24), getitem___169661, int_169658)
        
        
        # Obtaining the type of the subscript
        int_169663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2705, 49), 'int')
        # Getting the type of 'self' (line 2705)
        self_169664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2705, 40), 'self')
        # Obtaining the member '_ys' of a type (line 2705)
        _ys_169665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2705, 40), self_169664, '_ys')
        # Obtaining the member '__getitem__' of a type (line 2705)
        getitem___169666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2705, 40), _ys_169665, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2705)
        subscript_call_result_169667 = invoke(stypy.reporting.localization.Localization(__file__, 2705, 40), getitem___169666, int_169663)
        
        # Applying the binary operator '==' (line 2705)
        result_eq_169668 = python_operator(stypy.reporting.localization.Localization(__file__, 2705, 24), '==', subscript_call_result_169662, subscript_call_result_169667)
        
        # Applying the binary operator 'and' (line 2703)
        result_and_keyword_169669 = python_operator(stypy.reporting.localization.Localization(__file__, 2703, 20), 'and', result_and_keyword_169657, result_eq_169668)
        
        # Applying the binary operator 'or' (line 2702)
        result_or_keyword_169670 = python_operator(stypy.reporting.localization.Localization(__file__, 2702, 12), 'or', _polygon_completed_169638, result_and_keyword_169669)
        
        # Testing the type of an if condition (line 2702)
        if_condition_169671 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2702, 8), result_or_keyword_169670)
        # Assigning a type to the variable 'if_condition_169671' (line 2702)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2702, 8), 'if_condition_169671', if_condition_169671)
        # SSA begins for if statement (line 2702)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_data(...): (line 2706)
        # Processing the call arguments (line 2706)
        
        # Obtaining the type of the subscript
        int_169675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2706, 53), 'int')
        slice_169676 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2706, 43), None, int_169675, None)
        # Getting the type of 'self' (line 2706)
        self_169677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2706, 43), 'self', False)
        # Obtaining the member '_xs' of a type (line 2706)
        _xs_169678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2706, 43), self_169677, '_xs')
        # Obtaining the member '__getitem__' of a type (line 2706)
        getitem___169679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2706, 43), _xs_169678, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2706)
        subscript_call_result_169680 = invoke(stypy.reporting.localization.Localization(__file__, 2706, 43), getitem___169679, slice_169676)
        
        
        # Obtaining the type of the subscript
        int_169681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2706, 68), 'int')
        slice_169682 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2706, 58), None, int_169681, None)
        # Getting the type of 'self' (line 2706)
        self_169683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2706, 58), 'self', False)
        # Obtaining the member '_ys' of a type (line 2706)
        _ys_169684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2706, 58), self_169683, '_ys')
        # Obtaining the member '__getitem__' of a type (line 2706)
        getitem___169685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2706, 58), _ys_169684, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2706)
        subscript_call_result_169686 = invoke(stypy.reporting.localization.Localization(__file__, 2706, 58), getitem___169685, slice_169682)
        
        # Processing the call keyword arguments (line 2706)
        kwargs_169687 = {}
        # Getting the type of 'self' (line 2706)
        self_169672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2706, 12), 'self', False)
        # Obtaining the member '_polygon_handles' of a type (line 2706)
        _polygon_handles_169673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2706, 12), self_169672, '_polygon_handles')
        # Obtaining the member 'set_data' of a type (line 2706)
        set_data_169674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2706, 12), _polygon_handles_169673, 'set_data')
        # Calling set_data(args, kwargs) (line 2706)
        set_data_call_result_169688 = invoke(stypy.reporting.localization.Localization(__file__, 2706, 12), set_data_169674, *[subscript_call_result_169680, subscript_call_result_169686], **kwargs_169687)
        
        # SSA branch for the else part of an if statement (line 2702)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_data(...): (line 2708)
        # Processing the call arguments (line 2708)
        # Getting the type of 'self' (line 2708)
        self_169692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2708, 43), 'self', False)
        # Obtaining the member '_xs' of a type (line 2708)
        _xs_169693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2708, 43), self_169692, '_xs')
        # Getting the type of 'self' (line 2708)
        self_169694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2708, 53), 'self', False)
        # Obtaining the member '_ys' of a type (line 2708)
        _ys_169695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2708, 53), self_169694, '_ys')
        # Processing the call keyword arguments (line 2708)
        kwargs_169696 = {}
        # Getting the type of 'self' (line 2708)
        self_169689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2708, 12), 'self', False)
        # Obtaining the member '_polygon_handles' of a type (line 2708)
        _polygon_handles_169690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2708, 12), self_169689, '_polygon_handles')
        # Obtaining the member 'set_data' of a type (line 2708)
        set_data_169691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2708, 12), _polygon_handles_169690, 'set_data')
        # Calling set_data(args, kwargs) (line 2708)
        set_data_call_result_169697 = invoke(stypy.reporting.localization.Localization(__file__, 2708, 12), set_data_169691, *[_xs_169693, _ys_169695], **kwargs_169696)
        
        # SSA join for if statement (line 2702)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to update(...): (line 2709)
        # Processing the call keyword arguments (line 2709)
        kwargs_169700 = {}
        # Getting the type of 'self' (line 2709)
        self_169698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2709, 8), 'self', False)
        # Obtaining the member 'update' of a type (line 2709)
        update_169699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2709, 8), self_169698, 'update')
        # Calling update(args, kwargs) (line 2709)
        update_call_result_169701 = invoke(stypy.reporting.localization.Localization(__file__, 2709, 8), update_169699, *[], **kwargs_169700)
        
        
        # ################# End of '_draw_polygon(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_draw_polygon' in the type store
        # Getting the type of 'stypy_return_type' (line 2696)
        stypy_return_type_169702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_169702)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_draw_polygon'
        return stypy_return_type_169702


    @norecursion
    def verts(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'verts'
        module_type_store = module_type_store.open_function_context('verts', 2711, 4, False)
        # Assigning a type to the variable 'self' (line 2712)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2712, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolygonSelector.verts.__dict__.__setitem__('stypy_localization', localization)
        PolygonSelector.verts.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolygonSelector.verts.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolygonSelector.verts.__dict__.__setitem__('stypy_function_name', 'PolygonSelector.verts')
        PolygonSelector.verts.__dict__.__setitem__('stypy_param_names_list', [])
        PolygonSelector.verts.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolygonSelector.verts.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolygonSelector.verts.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolygonSelector.verts.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolygonSelector.verts.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolygonSelector.verts.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolygonSelector.verts', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'verts', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'verts(...)' code ##################

        unicode_169703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2719, (-1)), 'unicode', u'Get the polygon vertices.\n\n        Returns\n        -------\n        list\n            A list of the vertices of the polygon as ``(xdata, ydata)`` tuples.\n        ')
        
        # Call to list(...): (line 2720)
        # Processing the call arguments (line 2720)
        
        # Call to zip(...): (line 2720)
        # Processing the call arguments (line 2720)
        
        # Obtaining the type of the subscript
        int_169706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2720, 34), 'int')
        slice_169707 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2720, 24), None, int_169706, None)
        # Getting the type of 'self' (line 2720)
        self_169708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2720, 24), 'self', False)
        # Obtaining the member '_xs' of a type (line 2720)
        _xs_169709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2720, 24), self_169708, '_xs')
        # Obtaining the member '__getitem__' of a type (line 2720)
        getitem___169710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2720, 24), _xs_169709, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2720)
        subscript_call_result_169711 = invoke(stypy.reporting.localization.Localization(__file__, 2720, 24), getitem___169710, slice_169707)
        
        
        # Obtaining the type of the subscript
        int_169712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2720, 49), 'int')
        slice_169713 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2720, 39), None, int_169712, None)
        # Getting the type of 'self' (line 2720)
        self_169714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2720, 39), 'self', False)
        # Obtaining the member '_ys' of a type (line 2720)
        _ys_169715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2720, 39), self_169714, '_ys')
        # Obtaining the member '__getitem__' of a type (line 2720)
        getitem___169716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2720, 39), _ys_169715, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2720)
        subscript_call_result_169717 = invoke(stypy.reporting.localization.Localization(__file__, 2720, 39), getitem___169716, slice_169713)
        
        # Processing the call keyword arguments (line 2720)
        kwargs_169718 = {}
        # Getting the type of 'zip' (line 2720)
        zip_169705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2720, 20), 'zip', False)
        # Calling zip(args, kwargs) (line 2720)
        zip_call_result_169719 = invoke(stypy.reporting.localization.Localization(__file__, 2720, 20), zip_169705, *[subscript_call_result_169711, subscript_call_result_169717], **kwargs_169718)
        
        # Processing the call keyword arguments (line 2720)
        kwargs_169720 = {}
        # Getting the type of 'list' (line 2720)
        list_169704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2720, 15), 'list', False)
        # Calling list(args, kwargs) (line 2720)
        list_call_result_169721 = invoke(stypy.reporting.localization.Localization(__file__, 2720, 15), list_169704, *[zip_call_result_169719], **kwargs_169720)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2720)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2720, 8), 'stypy_return_type', list_call_result_169721)
        
        # ################# End of 'verts(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'verts' in the type store
        # Getting the type of 'stypy_return_type' (line 2711)
        stypy_return_type_169722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2711, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_169722)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'verts'
        return stypy_return_type_169722


# Assigning a type to the variable 'PolygonSelector' (line 2510)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2510, 0), 'PolygonSelector', PolygonSelector)
# Declaration of the 'Lasso' class
# Getting the type of 'AxesWidget' (line 2723)
AxesWidget_169723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2723, 12), 'AxesWidget')

class Lasso(AxesWidget_169723, ):
    unicode_169724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2743, (-1)), 'unicode', u'Selection curve of an arbitrary shape.\n\n    The selected path can be used in conjunction with\n    :func:`~matplotlib.path.Path.contains_point` to select data points\n    from an image.\n\n    Unlike :class:`LassoSelector`, this must be initialized with a starting\n    point `xy`, and the `Lasso` events are destroyed upon release.\n\n    Parameters:\n\n    *ax* : :class:`~matplotlib.axes.Axes`\n        The parent axes for the widget.\n    *xy* : array\n        Coordinates of the start of the lasso.\n    *callback* : function\n        Whenever the lasso is released, the `callback` function is called and\n        passed the vertices of the selected path.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2745)
        None_169725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2745, 40), 'None')
        # Getting the type of 'True' (line 2745)
        True_169726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2745, 54), 'True')
        defaults = [None_169725, True_169726]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2745, 4, False)
        # Assigning a type to the variable 'self' (line 2746)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2746, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Lasso.__init__', ['ax', 'xy', 'callback', 'useblit'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'xy', 'callback', 'useblit'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 2746)
        # Processing the call arguments (line 2746)
        # Getting the type of 'self' (line 2746)
        self_169729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 28), 'self', False)
        # Getting the type of 'ax' (line 2746)
        ax_169730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 34), 'ax', False)
        # Processing the call keyword arguments (line 2746)
        kwargs_169731 = {}
        # Getting the type of 'AxesWidget' (line 2746)
        AxesWidget_169727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 8), 'AxesWidget', False)
        # Obtaining the member '__init__' of a type (line 2746)
        init___169728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2746, 8), AxesWidget_169727, '__init__')
        # Calling __init__(args, kwargs) (line 2746)
        init___call_result_169732 = invoke(stypy.reporting.localization.Localization(__file__, 2746, 8), init___169728, *[self_169729, ax_169730], **kwargs_169731)
        
        
        # Assigning a BoolOp to a Attribute (line 2748):
        
        # Assigning a BoolOp to a Attribute (line 2748):
        
        # Evaluating a boolean operation
        # Getting the type of 'useblit' (line 2748)
        useblit_169733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2748, 23), 'useblit')
        # Getting the type of 'self' (line 2748)
        self_169734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2748, 35), 'self')
        # Obtaining the member 'canvas' of a type (line 2748)
        canvas_169735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2748, 35), self_169734, 'canvas')
        # Obtaining the member 'supports_blit' of a type (line 2748)
        supports_blit_169736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2748, 35), canvas_169735, 'supports_blit')
        # Applying the binary operator 'and' (line 2748)
        result_and_keyword_169737 = python_operator(stypy.reporting.localization.Localization(__file__, 2748, 23), 'and', useblit_169733, supports_blit_169736)
        
        # Getting the type of 'self' (line 2748)
        self_169738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2748, 8), 'self')
        # Setting the type of the member 'useblit' of a type (line 2748)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2748, 8), self_169738, 'useblit', result_and_keyword_169737)
        
        # Getting the type of 'self' (line 2749)
        self_169739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 11), 'self')
        # Obtaining the member 'useblit' of a type (line 2749)
        useblit_169740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2749, 11), self_169739, 'useblit')
        # Testing the type of an if condition (line 2749)
        if_condition_169741 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2749, 8), useblit_169740)
        # Assigning a type to the variable 'if_condition_169741' (line 2749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2749, 8), 'if_condition_169741', if_condition_169741)
        # SSA begins for if statement (line 2749)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 2750):
        
        # Assigning a Call to a Attribute (line 2750):
        
        # Call to copy_from_bbox(...): (line 2750)
        # Processing the call arguments (line 2750)
        # Getting the type of 'self' (line 2750)
        self_169745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 57), 'self', False)
        # Obtaining the member 'ax' of a type (line 2750)
        ax_169746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2750, 57), self_169745, 'ax')
        # Obtaining the member 'bbox' of a type (line 2750)
        bbox_169747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2750, 57), ax_169746, 'bbox')
        # Processing the call keyword arguments (line 2750)
        kwargs_169748 = {}
        # Getting the type of 'self' (line 2750)
        self_169742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 30), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2750)
        canvas_169743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2750, 30), self_169742, 'canvas')
        # Obtaining the member 'copy_from_bbox' of a type (line 2750)
        copy_from_bbox_169744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2750, 30), canvas_169743, 'copy_from_bbox')
        # Calling copy_from_bbox(args, kwargs) (line 2750)
        copy_from_bbox_call_result_169749 = invoke(stypy.reporting.localization.Localization(__file__, 2750, 30), copy_from_bbox_169744, *[bbox_169747], **kwargs_169748)
        
        # Getting the type of 'self' (line 2750)
        self_169750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 12), 'self')
        # Setting the type of the member 'background' of a type (line 2750)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2750, 12), self_169750, 'background', copy_from_bbox_call_result_169749)
        # SSA join for if statement (line 2749)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Tuple (line 2752):
        
        # Assigning a Subscript to a Name (line 2752):
        
        # Obtaining the type of the subscript
        int_169751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2752, 8), 'int')
        # Getting the type of 'xy' (line 2752)
        xy_169752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 15), 'xy')
        # Obtaining the member '__getitem__' of a type (line 2752)
        getitem___169753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2752, 8), xy_169752, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2752)
        subscript_call_result_169754 = invoke(stypy.reporting.localization.Localization(__file__, 2752, 8), getitem___169753, int_169751)
        
        # Assigning a type to the variable 'tuple_var_assignment_162451' (line 2752)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2752, 8), 'tuple_var_assignment_162451', subscript_call_result_169754)
        
        # Assigning a Subscript to a Name (line 2752):
        
        # Obtaining the type of the subscript
        int_169755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2752, 8), 'int')
        # Getting the type of 'xy' (line 2752)
        xy_169756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 15), 'xy')
        # Obtaining the member '__getitem__' of a type (line 2752)
        getitem___169757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2752, 8), xy_169756, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2752)
        subscript_call_result_169758 = invoke(stypy.reporting.localization.Localization(__file__, 2752, 8), getitem___169757, int_169755)
        
        # Assigning a type to the variable 'tuple_var_assignment_162452' (line 2752)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2752, 8), 'tuple_var_assignment_162452', subscript_call_result_169758)
        
        # Assigning a Name to a Name (line 2752):
        # Getting the type of 'tuple_var_assignment_162451' (line 2752)
        tuple_var_assignment_162451_169759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 8), 'tuple_var_assignment_162451')
        # Assigning a type to the variable 'x' (line 2752)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2752, 8), 'x', tuple_var_assignment_162451_169759)
        
        # Assigning a Name to a Name (line 2752):
        # Getting the type of 'tuple_var_assignment_162452' (line 2752)
        tuple_var_assignment_162452_169760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 8), 'tuple_var_assignment_162452')
        # Assigning a type to the variable 'y' (line 2752)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2752, 11), 'y', tuple_var_assignment_162452_169760)
        
        # Assigning a List to a Attribute (line 2753):
        
        # Assigning a List to a Attribute (line 2753):
        
        # Obtaining an instance of the builtin type 'list' (line 2753)
        list_169761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2753, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2753)
        # Adding element type (line 2753)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2753)
        tuple_169762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2753, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2753)
        # Adding element type (line 2753)
        # Getting the type of 'x' (line 2753)
        x_169763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 23), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2753, 23), tuple_169762, x_169763)
        # Adding element type (line 2753)
        # Getting the type of 'y' (line 2753)
        y_169764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 26), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2753, 23), tuple_169762, y_169764)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2753, 21), list_169761, tuple_169762)
        
        # Getting the type of 'self' (line 2753)
        self_169765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 8), 'self')
        # Setting the type of the member 'verts' of a type (line 2753)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2753, 8), self_169765, 'verts', list_169761)
        
        # Assigning a Call to a Attribute (line 2754):
        
        # Assigning a Call to a Attribute (line 2754):
        
        # Call to Line2D(...): (line 2754)
        # Processing the call arguments (line 2754)
        
        # Obtaining an instance of the builtin type 'list' (line 2754)
        list_169767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2754, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2754)
        # Adding element type (line 2754)
        # Getting the type of 'x' (line 2754)
        x_169768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2754, 28), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2754, 27), list_169767, x_169768)
        
        
        # Obtaining an instance of the builtin type 'list' (line 2754)
        list_169769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2754, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2754)
        # Adding element type (line 2754)
        # Getting the type of 'y' (line 2754)
        y_169770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2754, 33), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2754, 32), list_169769, y_169770)
        
        # Processing the call keyword arguments (line 2754)
        unicode_169771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2754, 47), 'unicode', u'-')
        keyword_169772 = unicode_169771
        unicode_169773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2754, 58), 'unicode', u'black')
        keyword_169774 = unicode_169773
        int_169775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2754, 70), 'int')
        keyword_169776 = int_169775
        kwargs_169777 = {'color': keyword_169774, 'lw': keyword_169776, 'linestyle': keyword_169772}
        # Getting the type of 'Line2D' (line 2754)
        Line2D_169766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2754, 20), 'Line2D', False)
        # Calling Line2D(args, kwargs) (line 2754)
        Line2D_call_result_169778 = invoke(stypy.reporting.localization.Localization(__file__, 2754, 20), Line2D_169766, *[list_169767, list_169769], **kwargs_169777)
        
        # Getting the type of 'self' (line 2754)
        self_169779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2754, 8), 'self')
        # Setting the type of the member 'line' of a type (line 2754)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2754, 8), self_169779, 'line', Line2D_call_result_169778)
        
        # Call to add_line(...): (line 2755)
        # Processing the call arguments (line 2755)
        # Getting the type of 'self' (line 2755)
        self_169783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 25), 'self', False)
        # Obtaining the member 'line' of a type (line 2755)
        line_169784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2755, 25), self_169783, 'line')
        # Processing the call keyword arguments (line 2755)
        kwargs_169785 = {}
        # Getting the type of 'self' (line 2755)
        self_169780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 8), 'self', False)
        # Obtaining the member 'ax' of a type (line 2755)
        ax_169781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2755, 8), self_169780, 'ax')
        # Obtaining the member 'add_line' of a type (line 2755)
        add_line_169782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2755, 8), ax_169781, 'add_line')
        # Calling add_line(args, kwargs) (line 2755)
        add_line_call_result_169786 = invoke(stypy.reporting.localization.Localization(__file__, 2755, 8), add_line_169782, *[line_169784], **kwargs_169785)
        
        
        # Assigning a Name to a Attribute (line 2756):
        
        # Assigning a Name to a Attribute (line 2756):
        # Getting the type of 'callback' (line 2756)
        callback_169787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2756, 24), 'callback')
        # Getting the type of 'self' (line 2756)
        self_169788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2756, 8), 'self')
        # Setting the type of the member 'callback' of a type (line 2756)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2756, 8), self_169788, 'callback', callback_169787)
        
        # Call to connect_event(...): (line 2757)
        # Processing the call arguments (line 2757)
        unicode_169791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2757, 27), 'unicode', u'button_release_event')
        # Getting the type of 'self' (line 2757)
        self_169792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2757, 51), 'self', False)
        # Obtaining the member 'onrelease' of a type (line 2757)
        onrelease_169793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2757, 51), self_169792, 'onrelease')
        # Processing the call keyword arguments (line 2757)
        kwargs_169794 = {}
        # Getting the type of 'self' (line 2757)
        self_169789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2757, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 2757)
        connect_event_169790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2757, 8), self_169789, 'connect_event')
        # Calling connect_event(args, kwargs) (line 2757)
        connect_event_call_result_169795 = invoke(stypy.reporting.localization.Localization(__file__, 2757, 8), connect_event_169790, *[unicode_169791, onrelease_169793], **kwargs_169794)
        
        
        # Call to connect_event(...): (line 2758)
        # Processing the call arguments (line 2758)
        unicode_169798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2758, 27), 'unicode', u'motion_notify_event')
        # Getting the type of 'self' (line 2758)
        self_169799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2758, 50), 'self', False)
        # Obtaining the member 'onmove' of a type (line 2758)
        onmove_169800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2758, 50), self_169799, 'onmove')
        # Processing the call keyword arguments (line 2758)
        kwargs_169801 = {}
        # Getting the type of 'self' (line 2758)
        self_169796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2758, 8), 'self', False)
        # Obtaining the member 'connect_event' of a type (line 2758)
        connect_event_169797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2758, 8), self_169796, 'connect_event')
        # Calling connect_event(args, kwargs) (line 2758)
        connect_event_call_result_169802 = invoke(stypy.reporting.localization.Localization(__file__, 2758, 8), connect_event_169797, *[unicode_169798, onmove_169800], **kwargs_169801)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def onrelease(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'onrelease'
        module_type_store = module_type_store.open_function_context('onrelease', 2760, 4, False)
        # Assigning a type to the variable 'self' (line 2761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2761, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Lasso.onrelease.__dict__.__setitem__('stypy_localization', localization)
        Lasso.onrelease.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Lasso.onrelease.__dict__.__setitem__('stypy_type_store', module_type_store)
        Lasso.onrelease.__dict__.__setitem__('stypy_function_name', 'Lasso.onrelease')
        Lasso.onrelease.__dict__.__setitem__('stypy_param_names_list', ['event'])
        Lasso.onrelease.__dict__.__setitem__('stypy_varargs_param_name', None)
        Lasso.onrelease.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Lasso.onrelease.__dict__.__setitem__('stypy_call_defaults', defaults)
        Lasso.onrelease.__dict__.__setitem__('stypy_call_varargs', varargs)
        Lasso.onrelease.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Lasso.onrelease.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Lasso.onrelease', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'onrelease', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'onrelease(...)' code ##################

        
        
        # Call to ignore(...): (line 2761)
        # Processing the call arguments (line 2761)
        # Getting the type of 'event' (line 2761)
        event_169805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2761, 23), 'event', False)
        # Processing the call keyword arguments (line 2761)
        kwargs_169806 = {}
        # Getting the type of 'self' (line 2761)
        self_169803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2761, 11), 'self', False)
        # Obtaining the member 'ignore' of a type (line 2761)
        ignore_169804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2761, 11), self_169803, 'ignore')
        # Calling ignore(args, kwargs) (line 2761)
        ignore_call_result_169807 = invoke(stypy.reporting.localization.Localization(__file__, 2761, 11), ignore_169804, *[event_169805], **kwargs_169806)
        
        # Testing the type of an if condition (line 2761)
        if_condition_169808 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2761, 8), ignore_call_result_169807)
        # Assigning a type to the variable 'if_condition_169808' (line 2761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2761, 8), 'if_condition_169808', if_condition_169808)
        # SSA begins for if statement (line 2761)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 2762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2762, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 2761)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 2763)
        self_169809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2763, 11), 'self')
        # Obtaining the member 'verts' of a type (line 2763)
        verts_169810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2763, 11), self_169809, 'verts')
        # Getting the type of 'None' (line 2763)
        None_169811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2763, 29), 'None')
        # Applying the binary operator 'isnot' (line 2763)
        result_is_not_169812 = python_operator(stypy.reporting.localization.Localization(__file__, 2763, 11), 'isnot', verts_169810, None_169811)
        
        # Testing the type of an if condition (line 2763)
        if_condition_169813 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2763, 8), result_is_not_169812)
        # Assigning a type to the variable 'if_condition_169813' (line 2763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2763, 8), 'if_condition_169813', if_condition_169813)
        # SSA begins for if statement (line 2763)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2764)
        # Processing the call arguments (line 2764)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2764)
        tuple_169817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2764, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2764)
        # Adding element type (line 2764)
        # Getting the type of 'event' (line 2764)
        event_169818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2764, 31), 'event', False)
        # Obtaining the member 'xdata' of a type (line 2764)
        xdata_169819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2764, 31), event_169818, 'xdata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2764, 31), tuple_169817, xdata_169819)
        # Adding element type (line 2764)
        # Getting the type of 'event' (line 2764)
        event_169820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2764, 44), 'event', False)
        # Obtaining the member 'ydata' of a type (line 2764)
        ydata_169821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2764, 44), event_169820, 'ydata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2764, 31), tuple_169817, ydata_169821)
        
        # Processing the call keyword arguments (line 2764)
        kwargs_169822 = {}
        # Getting the type of 'self' (line 2764)
        self_169814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2764, 12), 'self', False)
        # Obtaining the member 'verts' of a type (line 2764)
        verts_169815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2764, 12), self_169814, 'verts')
        # Obtaining the member 'append' of a type (line 2764)
        append_169816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2764, 12), verts_169815, 'append')
        # Calling append(args, kwargs) (line 2764)
        append_call_result_169823 = invoke(stypy.reporting.localization.Localization(__file__, 2764, 12), append_169816, *[tuple_169817], **kwargs_169822)
        
        
        
        
        # Call to len(...): (line 2765)
        # Processing the call arguments (line 2765)
        # Getting the type of 'self' (line 2765)
        self_169825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2765, 19), 'self', False)
        # Obtaining the member 'verts' of a type (line 2765)
        verts_169826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2765, 19), self_169825, 'verts')
        # Processing the call keyword arguments (line 2765)
        kwargs_169827 = {}
        # Getting the type of 'len' (line 2765)
        len_169824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2765, 15), 'len', False)
        # Calling len(args, kwargs) (line 2765)
        len_call_result_169828 = invoke(stypy.reporting.localization.Localization(__file__, 2765, 15), len_169824, *[verts_169826], **kwargs_169827)
        
        int_169829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2765, 33), 'int')
        # Applying the binary operator '>' (line 2765)
        result_gt_169830 = python_operator(stypy.reporting.localization.Localization(__file__, 2765, 15), '>', len_call_result_169828, int_169829)
        
        # Testing the type of an if condition (line 2765)
        if_condition_169831 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2765, 12), result_gt_169830)
        # Assigning a type to the variable 'if_condition_169831' (line 2765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2765, 12), 'if_condition_169831', if_condition_169831)
        # SSA begins for if statement (line 2765)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to callback(...): (line 2766)
        # Processing the call arguments (line 2766)
        # Getting the type of 'self' (line 2766)
        self_169834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2766, 30), 'self', False)
        # Obtaining the member 'verts' of a type (line 2766)
        verts_169835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2766, 30), self_169834, 'verts')
        # Processing the call keyword arguments (line 2766)
        kwargs_169836 = {}
        # Getting the type of 'self' (line 2766)
        self_169832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2766, 16), 'self', False)
        # Obtaining the member 'callback' of a type (line 2766)
        callback_169833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2766, 16), self_169832, 'callback')
        # Calling callback(args, kwargs) (line 2766)
        callback_call_result_169837 = invoke(stypy.reporting.localization.Localization(__file__, 2766, 16), callback_169833, *[verts_169835], **kwargs_169836)
        
        # SSA join for if statement (line 2765)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to remove(...): (line 2767)
        # Processing the call arguments (line 2767)
        # Getting the type of 'self' (line 2767)
        self_169842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 33), 'self', False)
        # Obtaining the member 'line' of a type (line 2767)
        line_169843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2767, 33), self_169842, 'line')
        # Processing the call keyword arguments (line 2767)
        kwargs_169844 = {}
        # Getting the type of 'self' (line 2767)
        self_169838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 2767)
        ax_169839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2767, 12), self_169838, 'ax')
        # Obtaining the member 'lines' of a type (line 2767)
        lines_169840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2767, 12), ax_169839, 'lines')
        # Obtaining the member 'remove' of a type (line 2767)
        remove_169841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2767, 12), lines_169840, 'remove')
        # Calling remove(args, kwargs) (line 2767)
        remove_call_result_169845 = invoke(stypy.reporting.localization.Localization(__file__, 2767, 12), remove_169841, *[line_169843], **kwargs_169844)
        
        # SSA join for if statement (line 2763)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2768):
        
        # Assigning a Name to a Attribute (line 2768):
        # Getting the type of 'None' (line 2768)
        None_169846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2768, 21), 'None')
        # Getting the type of 'self' (line 2768)
        self_169847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2768, 8), 'self')
        # Setting the type of the member 'verts' of a type (line 2768)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2768, 8), self_169847, 'verts', None_169846)
        
        # Call to disconnect_events(...): (line 2769)
        # Processing the call keyword arguments (line 2769)
        kwargs_169850 = {}
        # Getting the type of 'self' (line 2769)
        self_169848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 8), 'self', False)
        # Obtaining the member 'disconnect_events' of a type (line 2769)
        disconnect_events_169849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2769, 8), self_169848, 'disconnect_events')
        # Calling disconnect_events(args, kwargs) (line 2769)
        disconnect_events_call_result_169851 = invoke(stypy.reporting.localization.Localization(__file__, 2769, 8), disconnect_events_169849, *[], **kwargs_169850)
        
        
        # ################# End of 'onrelease(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'onrelease' in the type store
        # Getting the type of 'stypy_return_type' (line 2760)
        stypy_return_type_169852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2760, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_169852)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'onrelease'
        return stypy_return_type_169852


    @norecursion
    def onmove(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'onmove'
        module_type_store = module_type_store.open_function_context('onmove', 2771, 4, False)
        # Assigning a type to the variable 'self' (line 2772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2772, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Lasso.onmove.__dict__.__setitem__('stypy_localization', localization)
        Lasso.onmove.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Lasso.onmove.__dict__.__setitem__('stypy_type_store', module_type_store)
        Lasso.onmove.__dict__.__setitem__('stypy_function_name', 'Lasso.onmove')
        Lasso.onmove.__dict__.__setitem__('stypy_param_names_list', ['event'])
        Lasso.onmove.__dict__.__setitem__('stypy_varargs_param_name', None)
        Lasso.onmove.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Lasso.onmove.__dict__.__setitem__('stypy_call_defaults', defaults)
        Lasso.onmove.__dict__.__setitem__('stypy_call_varargs', varargs)
        Lasso.onmove.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Lasso.onmove.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Lasso.onmove', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'onmove', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'onmove(...)' code ##################

        
        
        # Call to ignore(...): (line 2772)
        # Processing the call arguments (line 2772)
        # Getting the type of 'event' (line 2772)
        event_169855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 23), 'event', False)
        # Processing the call keyword arguments (line 2772)
        kwargs_169856 = {}
        # Getting the type of 'self' (line 2772)
        self_169853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 11), 'self', False)
        # Obtaining the member 'ignore' of a type (line 2772)
        ignore_169854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2772, 11), self_169853, 'ignore')
        # Calling ignore(args, kwargs) (line 2772)
        ignore_call_result_169857 = invoke(stypy.reporting.localization.Localization(__file__, 2772, 11), ignore_169854, *[event_169855], **kwargs_169856)
        
        # Testing the type of an if condition (line 2772)
        if_condition_169858 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2772, 8), ignore_call_result_169857)
        # Assigning a type to the variable 'if_condition_169858' (line 2772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2772, 8), 'if_condition_169858', if_condition_169858)
        # SSA begins for if statement (line 2772)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 2773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2773, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 2772)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 2774)
        # Getting the type of 'self' (line 2774)
        self_169859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2774, 11), 'self')
        # Obtaining the member 'verts' of a type (line 2774)
        verts_169860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2774, 11), self_169859, 'verts')
        # Getting the type of 'None' (line 2774)
        None_169861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2774, 25), 'None')
        
        (may_be_169862, more_types_in_union_169863) = may_be_none(verts_169860, None_169861)

        if may_be_169862:

            if more_types_in_union_169863:
                # Runtime conditional SSA (line 2774)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 2775)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2775, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_169863:
                # SSA join for if statement (line 2774)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'event' (line 2776)
        event_169864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 11), 'event')
        # Obtaining the member 'inaxes' of a type (line 2776)
        inaxes_169865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2776, 11), event_169864, 'inaxes')
        # Getting the type of 'self' (line 2776)
        self_169866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 27), 'self')
        # Obtaining the member 'ax' of a type (line 2776)
        ax_169867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2776, 27), self_169866, 'ax')
        # Applying the binary operator '!=' (line 2776)
        result_ne_169868 = python_operator(stypy.reporting.localization.Localization(__file__, 2776, 11), '!=', inaxes_169865, ax_169867)
        
        # Testing the type of an if condition (line 2776)
        if_condition_169869 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2776, 8), result_ne_169868)
        # Assigning a type to the variable 'if_condition_169869' (line 2776)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2776, 8), 'if_condition_169869', if_condition_169869)
        # SSA begins for if statement (line 2776)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 2777)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2777, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 2776)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'event' (line 2778)
        event_169870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2778, 11), 'event')
        # Obtaining the member 'button' of a type (line 2778)
        button_169871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2778, 11), event_169870, 'button')
        int_169872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2778, 27), 'int')
        # Applying the binary operator '!=' (line 2778)
        result_ne_169873 = python_operator(stypy.reporting.localization.Localization(__file__, 2778, 11), '!=', button_169871, int_169872)
        
        # Testing the type of an if condition (line 2778)
        if_condition_169874 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2778, 8), result_ne_169873)
        # Assigning a type to the variable 'if_condition_169874' (line 2778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2778, 8), 'if_condition_169874', if_condition_169874)
        # SSA begins for if statement (line 2778)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 2779)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2779, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 2778)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 2780)
        # Processing the call arguments (line 2780)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2780)
        tuple_169878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2780, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2780)
        # Adding element type (line 2780)
        # Getting the type of 'event' (line 2780)
        event_169879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 27), 'event', False)
        # Obtaining the member 'xdata' of a type (line 2780)
        xdata_169880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2780, 27), event_169879, 'xdata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2780, 27), tuple_169878, xdata_169880)
        # Adding element type (line 2780)
        # Getting the type of 'event' (line 2780)
        event_169881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 40), 'event', False)
        # Obtaining the member 'ydata' of a type (line 2780)
        ydata_169882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2780, 40), event_169881, 'ydata')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2780, 27), tuple_169878, ydata_169882)
        
        # Processing the call keyword arguments (line 2780)
        kwargs_169883 = {}
        # Getting the type of 'self' (line 2780)
        self_169875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 8), 'self', False)
        # Obtaining the member 'verts' of a type (line 2780)
        verts_169876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2780, 8), self_169875, 'verts')
        # Obtaining the member 'append' of a type (line 2780)
        append_169877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2780, 8), verts_169876, 'append')
        # Calling append(args, kwargs) (line 2780)
        append_call_result_169884 = invoke(stypy.reporting.localization.Localization(__file__, 2780, 8), append_169877, *[tuple_169878], **kwargs_169883)
        
        
        # Call to set_data(...): (line 2782)
        # Processing the call arguments (line 2782)
        
        # Call to list(...): (line 2782)
        # Processing the call arguments (line 2782)
        
        # Call to zip(...): (line 2782)
        # Getting the type of 'self' (line 2782)
        self_169890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2782, 37), 'self', False)
        # Obtaining the member 'verts' of a type (line 2782)
        verts_169891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2782, 37), self_169890, 'verts')
        # Processing the call keyword arguments (line 2782)
        kwargs_169892 = {}
        # Getting the type of 'zip' (line 2782)
        zip_169889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2782, 32), 'zip', False)
        # Calling zip(args, kwargs) (line 2782)
        zip_call_result_169893 = invoke(stypy.reporting.localization.Localization(__file__, 2782, 32), zip_169889, *[verts_169891], **kwargs_169892)
        
        # Processing the call keyword arguments (line 2782)
        kwargs_169894 = {}
        # Getting the type of 'list' (line 2782)
        list_169888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2782, 27), 'list', False)
        # Calling list(args, kwargs) (line 2782)
        list_call_result_169895 = invoke(stypy.reporting.localization.Localization(__file__, 2782, 27), list_169888, *[zip_call_result_169893], **kwargs_169894)
        
        # Processing the call keyword arguments (line 2782)
        kwargs_169896 = {}
        # Getting the type of 'self' (line 2782)
        self_169885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2782, 8), 'self', False)
        # Obtaining the member 'line' of a type (line 2782)
        line_169886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2782, 8), self_169885, 'line')
        # Obtaining the member 'set_data' of a type (line 2782)
        set_data_169887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2782, 8), line_169886, 'set_data')
        # Calling set_data(args, kwargs) (line 2782)
        set_data_call_result_169897 = invoke(stypy.reporting.localization.Localization(__file__, 2782, 8), set_data_169887, *[list_call_result_169895], **kwargs_169896)
        
        
        # Getting the type of 'self' (line 2784)
        self_169898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 11), 'self')
        # Obtaining the member 'useblit' of a type (line 2784)
        useblit_169899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2784, 11), self_169898, 'useblit')
        # Testing the type of an if condition (line 2784)
        if_condition_169900 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2784, 8), useblit_169899)
        # Assigning a type to the variable 'if_condition_169900' (line 2784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2784, 8), 'if_condition_169900', if_condition_169900)
        # SSA begins for if statement (line 2784)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to restore_region(...): (line 2785)
        # Processing the call arguments (line 2785)
        # Getting the type of 'self' (line 2785)
        self_169904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2785, 39), 'self', False)
        # Obtaining the member 'background' of a type (line 2785)
        background_169905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2785, 39), self_169904, 'background')
        # Processing the call keyword arguments (line 2785)
        kwargs_169906 = {}
        # Getting the type of 'self' (line 2785)
        self_169901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2785, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2785)
        canvas_169902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2785, 12), self_169901, 'canvas')
        # Obtaining the member 'restore_region' of a type (line 2785)
        restore_region_169903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2785, 12), canvas_169902, 'restore_region')
        # Calling restore_region(args, kwargs) (line 2785)
        restore_region_call_result_169907 = invoke(stypy.reporting.localization.Localization(__file__, 2785, 12), restore_region_169903, *[background_169905], **kwargs_169906)
        
        
        # Call to draw_artist(...): (line 2786)
        # Processing the call arguments (line 2786)
        # Getting the type of 'self' (line 2786)
        self_169911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 32), 'self', False)
        # Obtaining the member 'line' of a type (line 2786)
        line_169912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2786, 32), self_169911, 'line')
        # Processing the call keyword arguments (line 2786)
        kwargs_169913 = {}
        # Getting the type of 'self' (line 2786)
        self_169908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 2786)
        ax_169909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2786, 12), self_169908, 'ax')
        # Obtaining the member 'draw_artist' of a type (line 2786)
        draw_artist_169910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2786, 12), ax_169909, 'draw_artist')
        # Calling draw_artist(args, kwargs) (line 2786)
        draw_artist_call_result_169914 = invoke(stypy.reporting.localization.Localization(__file__, 2786, 12), draw_artist_169910, *[line_169912], **kwargs_169913)
        
        
        # Call to blit(...): (line 2787)
        # Processing the call arguments (line 2787)
        # Getting the type of 'self' (line 2787)
        self_169918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2787, 29), 'self', False)
        # Obtaining the member 'ax' of a type (line 2787)
        ax_169919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2787, 29), self_169918, 'ax')
        # Obtaining the member 'bbox' of a type (line 2787)
        bbox_169920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2787, 29), ax_169919, 'bbox')
        # Processing the call keyword arguments (line 2787)
        kwargs_169921 = {}
        # Getting the type of 'self' (line 2787)
        self_169915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2787, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2787)
        canvas_169916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2787, 12), self_169915, 'canvas')
        # Obtaining the member 'blit' of a type (line 2787)
        blit_169917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2787, 12), canvas_169916, 'blit')
        # Calling blit(args, kwargs) (line 2787)
        blit_call_result_169922 = invoke(stypy.reporting.localization.Localization(__file__, 2787, 12), blit_169917, *[bbox_169920], **kwargs_169921)
        
        # SSA branch for the else part of an if statement (line 2784)
        module_type_store.open_ssa_branch('else')
        
        # Call to draw_idle(...): (line 2789)
        # Processing the call keyword arguments (line 2789)
        kwargs_169926 = {}
        # Getting the type of 'self' (line 2789)
        self_169923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2789, 12), 'self', False)
        # Obtaining the member 'canvas' of a type (line 2789)
        canvas_169924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2789, 12), self_169923, 'canvas')
        # Obtaining the member 'draw_idle' of a type (line 2789)
        draw_idle_169925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2789, 12), canvas_169924, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 2789)
        draw_idle_call_result_169927 = invoke(stypy.reporting.localization.Localization(__file__, 2789, 12), draw_idle_169925, *[], **kwargs_169926)
        
        # SSA join for if statement (line 2784)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'onmove(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'onmove' in the type store
        # Getting the type of 'stypy_return_type' (line 2771)
        stypy_return_type_169928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_169928)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'onmove'
        return stypy_return_type_169928


# Assigning a type to the variable 'Lasso' (line 2723)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2723, 0), 'Lasso', Lasso)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
