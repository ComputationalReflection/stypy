
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: This module contains all the 2D line class which can draw with a
3: variety of line styles, markers and colors.
4: '''
5: 
6: # TODO: expose cap and join style attrs
7: from __future__ import (absolute_import, division, print_function,
8:                         unicode_literals)
9: 
10: import six
11: 
12: import warnings
13: 
14: import numpy as np
15: 
16: from . import artist, colors as mcolors, docstring, rcParams
17: from .artist import Artist, allow_rasterization
18: from .cbook import (
19:     _to_unmasked_float_array, iterable, is_numlike, ls_mapper, ls_mapper_r,
20:     STEP_LOOKUP_MAP)
21: from .markers import MarkerStyle
22: from .path import Path
23: from .transforms import Bbox, TransformedPath, IdentityTransform
24: 
25: # Imported here for backward compatibility, even though they don't
26: # really belong.
27: from numpy import ma
28: from . import _path
29: from .markers import (
30:     CARETLEFT, CARETRIGHT, CARETUP, CARETDOWN,
31:     CARETLEFTBASE, CARETRIGHTBASE, CARETUPBASE, CARETDOWNBASE,
32:     TICKLEFT, TICKRIGHT, TICKUP, TICKDOWN)
33: 
34: 
35: def _get_dash_pattern(style):
36:     '''Convert linestyle -> dash pattern
37:     '''
38:     # go from short hand -> full strings
39:     if isinstance(style, six.string_types):
40:         style = ls_mapper.get(style, style)
41:     # un-dashed styles
42:     if style in ['solid', 'None']:
43:         offset, dashes = None, None
44:     # dashed styles
45:     elif style in ['dashed', 'dashdot', 'dotted']:
46:         offset = 0
47:         dashes = tuple(rcParams['lines.{}_pattern'.format(style)])
48:     #
49:     elif isinstance(style, tuple):
50:         offset, dashes = style
51:     else:
52:         raise ValueError('Unrecognized linestyle: %s' % str(style))
53: 
54:     # normalize offset to be positive and shorter than the dash cycle
55:     if dashes is not None and offset is not None:
56:         dsum = sum(dashes)
57:         if dsum:
58:             offset %= dsum
59: 
60:     return offset, dashes
61: 
62: 
63: def _scale_dashes(offset, dashes, lw):
64:     if not rcParams['lines.scale_dashes']:
65:         return offset, dashes
66: 
67:     scaled_offset = scaled_dashes = None
68:     if offset is not None:
69:         scaled_offset = offset * lw
70:     if dashes is not None:
71:         scaled_dashes = [x * lw if x is not None else None
72:                          for x in dashes]
73: 
74:     return scaled_offset, scaled_dashes
75: 
76: 
77: def segment_hits(cx, cy, x, y, radius):
78:     '''
79:     Determine if any line segments are within radius of a
80:     point. Returns the list of line segments that are within that
81:     radius.
82:     '''
83:     # Process single points specially
84:     if len(x) < 2:
85:         res, = np.nonzero((cx - x) ** 2 + (cy - y) ** 2 <= radius ** 2)
86:         return res
87: 
88:     # We need to lop the last element off a lot.
89:     xr, yr = x[:-1], y[:-1]
90: 
91:     # Only look at line segments whose nearest point to C on the line
92:     # lies within the segment.
93:     dx, dy = x[1:] - xr, y[1:] - yr
94:     Lnorm_sq = dx ** 2 + dy ** 2  # Possibly want to eliminate Lnorm==0
95:     u = ((cx - xr) * dx + (cy - yr) * dy) / Lnorm_sq
96:     candidates = (u >= 0) & (u <= 1)
97:     #if any(candidates): print "candidates",xr[candidates]
98: 
99:     # Note that there is a little area near one side of each point
100:     # which will be near neither segment, and another which will
101:     # be near both, depending on the angle of the lines.  The
102:     # following radius test eliminates these ambiguities.
103:     point_hits = (cx - x) ** 2 + (cy - y) ** 2 <= radius ** 2
104:     #if any(point_hits): print "points",xr[candidates]
105:     candidates = candidates & ~(point_hits[:-1] | point_hits[1:])
106: 
107:     # For those candidates which remain, determine how far they lie away
108:     # from the line.
109:     px, py = xr + u * dx, yr + u * dy
110:     line_hits = (cx - px) ** 2 + (cy - py) ** 2 <= radius ** 2
111:     #if any(line_hits): print "lines",xr[candidates]
112:     line_hits = line_hits & candidates
113:     points, = point_hits.ravel().nonzero()
114:     lines, = line_hits.ravel().nonzero()
115:     #print points,lines
116:     return np.concatenate((points, lines))
117: 
118: 
119: def _mark_every_path(markevery, tpath, affine, ax_transform):
120:     '''
121:     Helper function that sorts out how to deal the input
122:     `markevery` and returns the points where markers should be drawn.
123: 
124:     Takes in the `markevery` value and the line path and returns the
125:     sub-sampled path.
126:     '''
127:     # pull out the two bits of data we want from the path
128:     codes, verts = tpath.codes, tpath.vertices
129: 
130:     def _slice_or_none(in_v, slc):
131:         '''
132:         Helper function to cope with `codes` being an
133:         ndarray or `None`
134:         '''
135:         if in_v is None:
136:             return None
137:         return in_v[slc]
138: 
139:     # if just a float, assume starting at 0.0 and make a tuple
140:     if isinstance(markevery, float):
141:         markevery = (0.0, markevery)
142:     # if just an int, assume starting at 0 and make a tuple
143:     elif isinstance(markevery, int):
144:         markevery = (0, markevery)
145:     # if just an numpy int, assume starting at 0 and make a tuple
146:     elif isinstance(markevery, np.integer):
147:         markevery = (0, markevery.item())
148: 
149:     if isinstance(markevery, tuple):
150:         if len(markevery) != 2:
151:             raise ValueError('`markevery` is a tuple but its '
152:                 'len is not 2; '
153:                 'markevery=%s' % (markevery,))
154:         start, step = markevery
155:         # if step is an int, old behavior
156:         if isinstance(step, int):
157:             #tuple of 2 int is for backwards compatibility,
158:             if not(isinstance(start, int)):
159:                 raise ValueError('`markevery` is a tuple with '
160:                     'len 2 and second element is an int, but '
161:                     'the first element is not an int; '
162:                     'markevery=%s' % (markevery,))
163:             # just return, we are done here
164: 
165:             return Path(verts[slice(start, None, step)],
166:                         _slice_or_none(codes, slice(start, None, step)))
167: 
168:         elif isinstance(step, float):
169:             if not (isinstance(start, int) or
170:                     isinstance(start, float)):
171:                 raise ValueError('`markevery` is a tuple with '
172:                     'len 2 and second element is a float, but '
173:                     'the first element is not a float or an '
174:                     'int; '
175:                     'markevery=%s' % (markevery,))
176:             #calc cumulative distance along path (in display
177:             # coords):
178:             disp_coords = affine.transform(tpath.vertices)
179:             delta = np.empty((len(disp_coords), 2),
180:                              dtype=float)
181:             delta[0, :] = 0.0
182:             delta[1:, :] = (disp_coords[1:, :] -
183:                                 disp_coords[:-1, :])
184:             delta = np.sum(delta**2, axis=1)
185:             delta = np.sqrt(delta)
186:             delta = np.cumsum(delta)
187:             #calc distance between markers along path based on
188:             # the axes bounding box diagonal being a distance
189:             # of unity:
190:             scale = ax_transform.transform(
191:                 np.array([[0, 0], [1, 1]]))
192:             scale = np.diff(scale, axis=0)
193:             scale = np.sum(scale**2)
194:             scale = np.sqrt(scale)
195:             marker_delta = np.arange(start * scale,
196:                                      delta[-1],
197:                                      step * scale)
198:             #find closest actual data point that is closest to
199:             # the theoretical distance along the path:
200:             inds = np.abs(delta[np.newaxis, :] -
201:                             marker_delta[:, np.newaxis])
202:             inds = inds.argmin(axis=1)
203:             inds = np.unique(inds)
204:             # return, we are done here
205:             return Path(verts[inds],
206:                         _slice_or_none(codes, inds))
207:         else:
208:             raise ValueError('`markevery` is a tuple with '
209:                 'len 2, but its second element is not an int '
210:                 'or a float; '
211:                 'markevery=%s' % (markevery,))
212: 
213:     elif isinstance(markevery, slice):
214:         # mazol tov, it's already a slice, just return
215:         return Path(verts[markevery],
216:                     _slice_or_none(codes, markevery))
217: 
218:     elif iterable(markevery):
219:         #fancy indexing
220:         try:
221:             return Path(verts[markevery],
222:                     _slice_or_none(codes, markevery))
223: 
224:         except (ValueError, IndexError):
225:             raise ValueError('`markevery` is iterable but '
226:                 'not a valid form of numpy fancy indexing; '
227:                 'markevery=%s' % (markevery,))
228:     else:
229:         raise ValueError('Value of `markevery` is not '
230:             'recognized; '
231:             'markevery=%s' % (markevery,))
232: 
233: 
234: class Line2D(Artist):
235:     '''
236:     A line - the line can have both a solid linestyle connecting all
237:     the vertices, and a marker at each vertex.  Additionally, the
238:     drawing of the solid line is influenced by the drawstyle, e.g., one
239:     can create "stepped" lines in various styles.
240: 
241: 
242:     '''
243:     lineStyles = _lineStyles = {  # hidden names deprecated
244:         '-':    '_draw_solid',
245:         '--':   '_draw_dashed',
246:         '-.':   '_draw_dash_dot',
247:         ':':    '_draw_dotted',
248:         'None': '_draw_nothing',
249:         ' ':    '_draw_nothing',
250:         '':     '_draw_nothing',
251:     }
252: 
253:     _drawStyles_l = {
254:         'default':    '_draw_lines',
255:         'steps-mid':  '_draw_steps_mid',
256:         'steps-pre':  '_draw_steps_pre',
257:         'steps-post': '_draw_steps_post',
258:     }
259: 
260:     _drawStyles_s = {
261:         'steps': '_draw_steps_pre',
262:     }
263: 
264:     # drawStyles should now be deprecated.
265:     drawStyles = {}
266:     drawStyles.update(_drawStyles_l)
267:     drawStyles.update(_drawStyles_s)
268:     # Need a list ordered with long names first:
269:     drawStyleKeys = list(_drawStyles_l) + list(_drawStyles_s)
270: 
271:     # Referenced here to maintain API.  These are defined in
272:     # MarkerStyle
273:     markers = MarkerStyle.markers
274:     filled_markers = MarkerStyle.filled_markers
275:     fillStyles = MarkerStyle.fillstyles
276: 
277:     zorder = 2
278:     validCap = ('butt', 'round', 'projecting')
279:     validJoin = ('miter', 'round', 'bevel')
280: 
281:     def __str__(self):
282:         if self._label != "":
283:             return "Line2D(%s)" % (self._label)
284:         elif self._x is None:
285:             return "Line2D()"
286:         elif len(self._x) > 3:
287:             return "Line2D((%g,%g),(%g,%g),...,(%g,%g))"\
288:                 % (self._x[0], self._y[0], self._x[0],
289:                    self._y[0], self._x[-1], self._y[-1])
290:         else:
291:             return "Line2D(%s)"\
292:                 % (",".join(["(%g,%g)" % (x, y) for x, y
293:                              in zip(self._x, self._y)]))
294: 
295:     def __init__(self, xdata, ydata,
296:                  linewidth=None,  # all Nones default to rc
297:                  linestyle=None,
298:                  color=None,
299:                  marker=None,
300:                  markersize=None,
301:                  markeredgewidth=None,
302:                  markeredgecolor=None,
303:                  markerfacecolor=None,
304:                  markerfacecoloralt='none',
305:                  fillstyle=None,
306:                  antialiased=None,
307:                  dash_capstyle=None,
308:                  solid_capstyle=None,
309:                  dash_joinstyle=None,
310:                  solid_joinstyle=None,
311:                  pickradius=5,
312:                  drawstyle=None,
313:                  markevery=None,
314:                  **kwargs
315:                  ):
316:         '''
317:         Create a :class:`~matplotlib.lines.Line2D` instance with *x*
318:         and *y* data in sequences *xdata*, *ydata*.
319: 
320:         The kwargs are :class:`~matplotlib.lines.Line2D` properties:
321: 
322:         %(Line2D)s
323: 
324:         See :meth:`set_linestyle` for a decription of the line styles,
325:         :meth:`set_marker` for a description of the markers, and
326:         :meth:`set_drawstyle` for a description of the draw styles.
327: 
328:         '''
329:         Artist.__init__(self)
330: 
331:         #convert sequences to numpy arrays
332:         if not iterable(xdata):
333:             raise RuntimeError('xdata must be a sequence')
334:         if not iterable(ydata):
335:             raise RuntimeError('ydata must be a sequence')
336: 
337:         if linewidth is None:
338:             linewidth = rcParams['lines.linewidth']
339: 
340:         if linestyle is None:
341:             linestyle = rcParams['lines.linestyle']
342:         if marker is None:
343:             marker = rcParams['lines.marker']
344:         if color is None:
345:             color = rcParams['lines.color']
346: 
347:         if markersize is None:
348:             markersize = rcParams['lines.markersize']
349:         if antialiased is None:
350:             antialiased = rcParams['lines.antialiased']
351:         if dash_capstyle is None:
352:             dash_capstyle = rcParams['lines.dash_capstyle']
353:         if dash_joinstyle is None:
354:             dash_joinstyle = rcParams['lines.dash_joinstyle']
355:         if solid_capstyle is None:
356:             solid_capstyle = rcParams['lines.solid_capstyle']
357:         if solid_joinstyle is None:
358:             solid_joinstyle = rcParams['lines.solid_joinstyle']
359: 
360:         if isinstance(linestyle, six.string_types):
361:             ds, ls = self._split_drawstyle_linestyle(linestyle)
362:             if ds is not None and drawstyle is not None and ds != drawstyle:
363:                 raise ValueError("Inconsistent drawstyle ({0!r}) and "
364:                                  "linestyle ({1!r})".format(drawstyle,
365:                                                             linestyle)
366:                                  )
367:             linestyle = ls
368: 
369:             if ds is not None:
370:                 drawstyle = ds
371: 
372:         if drawstyle is None:
373:             drawstyle = 'default'
374: 
375:         self._dashcapstyle = None
376:         self._dashjoinstyle = None
377:         self._solidjoinstyle = None
378:         self._solidcapstyle = None
379:         self.set_dash_capstyle(dash_capstyle)
380:         self.set_dash_joinstyle(dash_joinstyle)
381:         self.set_solid_capstyle(solid_capstyle)
382:         self.set_solid_joinstyle(solid_joinstyle)
383: 
384:         self._linestyles = None
385:         self._drawstyle = None
386:         self._linewidth = linewidth
387: 
388:         # scaled dash + offset
389:         self._dashSeq = None
390:         self._dashOffset = 0
391:         # unscaled dash + offset
392:         # this is needed scaling the dash pattern by linewidth
393:         self._us_dashSeq = None
394:         self._us_dashOffset = 0
395: 
396:         self.set_linestyle(linestyle)
397:         self.set_drawstyle(drawstyle)
398:         self.set_linewidth(linewidth)
399: 
400:         self._color = None
401:         self.set_color(color)
402:         self._marker = MarkerStyle(marker, fillstyle)
403: 
404:         self._markevery = None
405:         self._markersize = None
406:         self._antialiased = None
407: 
408:         self.set_markevery(markevery)
409:         self.set_antialiased(antialiased)
410:         self.set_markersize(markersize)
411: 
412:         self._markeredgecolor = None
413:         self._markeredgewidth = None
414:         self._markerfacecolor = None
415:         self._markerfacecoloralt = None
416: 
417:         self.set_markerfacecolor(markerfacecolor)
418:         self.set_markerfacecoloralt(markerfacecoloralt)
419:         self.set_markeredgecolor(markeredgecolor)
420:         self.set_markeredgewidth(markeredgewidth)
421: 
422:         self.verticalOffset = None
423: 
424:         # update kwargs before updating data to give the caller a
425:         # chance to init axes (and hence unit support)
426:         self.update(kwargs)
427:         self.pickradius = pickradius
428:         self.ind_offset = 0
429:         if is_numlike(self._picker):
430:             self.pickradius = self._picker
431: 
432:         self._xorig = np.asarray([])
433:         self._yorig = np.asarray([])
434:         self._invalidx = True
435:         self._invalidy = True
436:         self._x = None
437:         self._y = None
438:         self._xy = None
439:         self._path = None
440:         self._transformed_path = None
441:         self._subslice = False
442:         self._x_filled = None  # used in subslicing; only x is needed
443: 
444:         self.set_data(xdata, ydata)
445: 
446:     def contains(self, mouseevent):
447:         '''
448:         Test whether the mouse event occurred on the line.  The pick
449:         radius determines the precision of the location test (usually
450:         within five points of the value).  Use
451:         :meth:`~matplotlib.lines.Line2D.get_pickradius` or
452:         :meth:`~matplotlib.lines.Line2D.set_pickradius` to view or
453:         modify it.
454: 
455:         Returns *True* if any values are within the radius along with
456:         ``{'ind': pointlist}``, where *pointlist* is the set of points
457:         within the radius.
458: 
459:         TODO: sort returned indices by distance
460:         '''
461:         if callable(self._contains):
462:             return self._contains(self, mouseevent)
463: 
464:         if not is_numlike(self.pickradius):
465:             raise ValueError("pick radius should be a distance")
466: 
467:         # Make sure we have data to plot
468:         if self._invalidy or self._invalidx:
469:             self.recache()
470:         if len(self._xy) == 0:
471:             return False, {}
472: 
473:         # Convert points to pixels
474:         transformed_path = self._get_transformed_path()
475:         path, affine = transformed_path.get_transformed_path_and_affine()
476:         path = affine.transform_path(path)
477:         xy = path.vertices
478:         xt = xy[:, 0]
479:         yt = xy[:, 1]
480: 
481:         # Convert pick radius from points to pixels
482:         if self.figure is None:
483:             warnings.warn('no figure set when check if mouse is on line')
484:             pixels = self.pickradius
485:         else:
486:             pixels = self.figure.dpi / 72. * self.pickradius
487: 
488:         # the math involved in checking for containment (here and inside of
489:         # segment_hits) assumes that it is OK to overflow.  In case the
490:         # application has set the error flags such that an exception is raised
491:         # on overflow, we temporarily set the appropriate error flags here and
492:         # set them back when we are finished.
493:         with np.errstate(all='ignore'):
494:             # Check for collision
495:             if self._linestyle in ['None', None]:
496:                 # If no line, return the nearby point(s)
497:                 d = (xt - mouseevent.x) ** 2 + (yt - mouseevent.y) ** 2
498:                 ind, = np.nonzero(np.less_equal(d, pixels ** 2))
499:             else:
500:                 # If line, return the nearby segment(s)
501:                 ind = segment_hits(mouseevent.x, mouseevent.y, xt, yt, pixels)
502:                 if self._drawstyle.startswith("steps"):
503:                     ind //= 2
504: 
505:         ind += self.ind_offset
506: 
507:         # Return the point(s) within radius
508:         return len(ind) > 0, dict(ind=ind)
509: 
510:     def get_pickradius(self):
511:         '''return the pick radius used for containment tests'''
512:         return self.pickradius
513: 
514:     def set_pickradius(self, d):
515:         '''Sets the pick radius used for containment tests
516: 
517:         ACCEPTS: float distance in points
518:         '''
519:         self.pickradius = d
520: 
521:     def get_fillstyle(self):
522:         '''
523:         return the marker fillstyle
524:         '''
525:         return self._marker.get_fillstyle()
526: 
527:     def set_fillstyle(self, fs):
528:         '''
529:         Set the marker fill style; 'full' means fill the whole marker.
530:         'none' means no filling; other options are for half-filled markers.
531: 
532:         ACCEPTS: ['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']
533:         '''
534:         self._marker.set_fillstyle(fs)
535:         self.stale = True
536: 
537:     def set_markevery(self, every):
538:         '''Set the markevery property to subsample the plot when using markers.
539: 
540:         e.g., if `every=5`, every 5-th marker will be plotted.
541: 
542:         ACCEPTS: [None | int | length-2 tuple of int | slice |
543:         list/array of int | float | length-2 tuple of float]
544: 
545:         Parameters
546:         ----------
547:         every: None | int | length-2 tuple of int | slice | list/array of int |
548:         float | length-2 tuple of float
549:             Which markers to plot.
550: 
551:             - every=None, every point will be plotted.
552:             - every=N, every N-th marker will be plotted starting with
553:               marker 0.
554:             - every=(start, N), every N-th marker, starting at point
555:               start, will be plotted.
556:             - every=slice(start, end, N), every N-th marker, starting at
557:               point start, upto but not including point end, will be plotted.
558:             - every=[i, j, m, n], only markers at points i, j, m, and n
559:               will be plotted.
560:             - every=0.1, (i.e. a float) then markers will be spaced at
561:               approximately equal distances along the line; the distance
562:               along the line between markers is determined by multiplying the
563:               display-coordinate distance of the axes bounding-box diagonal
564:               by the value of every.
565:             - every=(0.5, 0.1) (i.e. a length-2 tuple of float), the
566:               same functionality as every=0.1 is exhibited but the first
567:               marker will be 0.5 multiplied by the
568:               display-cordinate-diagonal-distance along the line.
569: 
570:         Notes
571:         -----
572:         Setting the markevery property will only show markers at actual data
573:         points.  When using float arguments to set the markevery property
574:         on irregularly spaced data, the markers will likely not appear evenly
575:         spaced because the actual data points do not coincide with the
576:         theoretical spacing between markers.
577: 
578:         When using a start offset to specify the first marker, the offset will
579:         be from the first data point which may be different from the first
580:         the visible data point if the plot is zoomed in.
581: 
582:         If zooming in on a plot when using float arguments then the actual
583:         data points that have markers will change because the distance between
584:         markers is always determined from the display-coordinates
585:         axes-bounding-box-diagonal regardless of the actual axes data limits.
586: 
587:         '''
588:         if self._markevery != every:
589:             self.stale = True
590:         self._markevery = every
591: 
592:     def get_markevery(self):
593:         '''return the markevery setting'''
594:         return self._markevery
595: 
596:     def set_picker(self, p):
597:         '''Sets the event picker details for the line.
598: 
599:         ACCEPTS: float distance in points or callable pick function
600:         ``fn(artist, event)``
601:         '''
602:         if callable(p):
603:             self._contains = p
604:         else:
605:             self.pickradius = p
606:         self._picker = p
607: 
608:     def get_window_extent(self, renderer):
609:         bbox = Bbox([[0, 0], [0, 0]])
610:         trans_data_to_xy = self.get_transform().transform
611:         bbox.update_from_data_xy(trans_data_to_xy(self.get_xydata()),
612:                                  ignore=True)
613:         # correct for marker size, if any
614:         if self._marker:
615:             ms = (self._markersize / 72.0 * self.figure.dpi) * 0.5
616:             bbox = bbox.padded(ms)
617:         return bbox
618: 
619:     @Artist.axes.setter
620:     def axes(self, ax):
621:         # call the set method from the base-class property
622:         Artist.axes.fset(self, ax)
623:         if ax is not None:
624:             # connect unit-related callbacks
625:             if ax.xaxis is not None:
626:                 self._xcid = ax.xaxis.callbacks.connect('units',
627:                                                         self.recache_always)
628:             if ax.yaxis is not None:
629:                 self._ycid = ax.yaxis.callbacks.connect('units',
630:                                                         self.recache_always)
631: 
632:     def set_data(self, *args):
633:         '''
634:         Set the x and y data
635: 
636:         ACCEPTS: 2D array (rows are x, y) or two 1D arrays
637:         '''
638:         if len(args) == 1:
639:             x, y = args[0]
640:         else:
641:             x, y = args
642: 
643:         self.set_xdata(x)
644:         self.set_ydata(y)
645: 
646:     def recache_always(self):
647:         self.recache(always=True)
648: 
649:     def recache(self, always=False):
650:         if always or self._invalidx:
651:             xconv = self.convert_xunits(self._xorig)
652:             x = _to_unmasked_float_array(xconv).ravel()
653:         else:
654:             x = self._x
655:         if always or self._invalidy:
656:             yconv = self.convert_yunits(self._yorig)
657:             y = _to_unmasked_float_array(yconv).ravel()
658:         else:
659:             y = self._y
660: 
661:         self._xy = np.column_stack(np.broadcast_arrays(x, y)).astype(float)
662:         self._x, self._y = self._xy.T  # views
663: 
664:         self._subslice = False
665:         if (self.axes and len(x) > 1000 and self._is_sorted(x) and
666:                 self.axes.name == 'rectilinear' and
667:                 self.axes.get_xscale() == 'linear' and
668:                 self._markevery is None and
669:                 self.get_clip_on() is True):
670:             self._subslice = True
671:             nanmask = np.isnan(x)
672:             if nanmask.any():
673:                 self._x_filled = self._x.copy()
674:                 indices = np.arange(len(x))
675:                 self._x_filled[nanmask] = np.interp(indices[nanmask],
676:                         indices[~nanmask], self._x[~nanmask])
677:             else:
678:                 self._x_filled = self._x
679: 
680:         if self._path is not None:
681:             interpolation_steps = self._path._interpolation_steps
682:         else:
683:             interpolation_steps = 1
684:         xy = STEP_LOOKUP_MAP[self._drawstyle](*self._xy.T)
685:         self._path = Path(np.asarray(xy).T,
686:                           _interpolation_steps=interpolation_steps)
687:         self._transformed_path = None
688:         self._invalidx = False
689:         self._invalidy = False
690: 
691:     def _transform_path(self, subslice=None):
692:         '''
693:         Puts a TransformedPath instance at self._transformed_path;
694:         all invalidation of the transform is then handled by the
695:         TransformedPath instance.
696:         '''
697:         # Masked arrays are now handled by the Path class itself
698:         if subslice is not None:
699:             xy = STEP_LOOKUP_MAP[self._drawstyle](*self._xy[subslice, :].T)
700:             _path = Path(np.asarray(xy).T,
701:                          _interpolation_steps=self._path._interpolation_steps)
702:         else:
703:             _path = self._path
704:         self._transformed_path = TransformedPath(_path, self.get_transform())
705: 
706:     def _get_transformed_path(self):
707:         '''
708:         Return the :class:`~matplotlib.transforms.TransformedPath` instance
709:         of this line.
710:         '''
711:         if self._transformed_path is None:
712:             self._transform_path()
713:         return self._transformed_path
714: 
715:     def set_transform(self, t):
716:         '''
717:         set the Transformation instance used by this artist
718: 
719:         ACCEPTS: a :class:`matplotlib.transforms.Transform` instance
720:         '''
721:         Artist.set_transform(self, t)
722:         self._invalidx = True
723:         self._invalidy = True
724:         self.stale = True
725: 
726:     def _is_sorted(self, x):
727:         '''return True if x is sorted in ascending order'''
728:         # We don't handle the monotonically decreasing case.
729:         return _path.is_sorted(x)
730: 
731:     @allow_rasterization
732:     def draw(self, renderer):
733:         '''draw the Line with `renderer` unless visibility is False'''
734:         if not self.get_visible():
735:             return
736: 
737:         if self._invalidy or self._invalidx:
738:             self.recache()
739:         self.ind_offset = 0  # Needed for contains() method.
740:         if self._subslice and self.axes:
741:             x0, x1 = self.axes.get_xbound()
742:             i0, = self._x_filled.searchsorted([x0], 'left')
743:             i1, = self._x_filled.searchsorted([x1], 'right')
744:             subslice = slice(max(i0 - 1, 0), i1 + 1)
745:             self.ind_offset = subslice.start
746:             self._transform_path(subslice)
747: 
748:         transf_path = self._get_transformed_path()
749: 
750:         if self.get_path_effects():
751:             from matplotlib.patheffects import PathEffectRenderer
752:             renderer = PathEffectRenderer(self.get_path_effects(), renderer)
753: 
754:         renderer.open_group('line2d', self.get_gid())
755:         if self._lineStyles[self._linestyle] != '_draw_nothing':
756:             tpath, affine = transf_path.get_transformed_path_and_affine()
757:             if len(tpath.vertices):
758:                 gc = renderer.new_gc()
759:                 self._set_gc_clip(gc)
760: 
761:                 ln_color_rgba = self._get_rgba_ln_color()
762:                 gc.set_foreground(ln_color_rgba, isRGBA=True)
763:                 gc.set_alpha(ln_color_rgba[3])
764: 
765:                 gc.set_antialiased(self._antialiased)
766:                 gc.set_linewidth(self._linewidth)
767: 
768:                 if self.is_dashed():
769:                     cap = self._dashcapstyle
770:                     join = self._dashjoinstyle
771:                 else:
772:                     cap = self._solidcapstyle
773:                     join = self._solidjoinstyle
774:                 gc.set_joinstyle(join)
775:                 gc.set_capstyle(cap)
776:                 gc.set_snap(self.get_snap())
777:                 if self.get_sketch_params() is not None:
778:                     gc.set_sketch_params(*self.get_sketch_params())
779: 
780:                 gc.set_dashes(self._dashOffset, self._dashSeq)
781:                 renderer.draw_path(gc, tpath, affine.frozen())
782:                 gc.restore()
783: 
784:         if self._marker and self._markersize > 0:
785:             gc = renderer.new_gc()
786:             self._set_gc_clip(gc)
787:             rgbaFace = self._get_rgba_face()
788:             rgbaFaceAlt = self._get_rgba_face(alt=True)
789:             edgecolor = self.get_markeredgecolor()
790:             if (isinstance(edgecolor, six.string_types)
791:                     and edgecolor.lower() == 'none'):
792:                 gc.set_linewidth(0)
793:                 gc.set_foreground(rgbaFace, isRGBA=True)
794:             else:
795:                 gc.set_foreground(edgecolor)
796:                 gc.set_linewidth(self._markeredgewidth)
797:                 mec = self._markeredgecolor
798:                 if (isinstance(mec, six.string_types) and mec == 'auto' and
799:                         rgbaFace is not None):
800:                     gc.set_alpha(rgbaFace[3])
801:                 else:
802:                     gc.set_alpha(self.get_alpha())
803: 
804:             marker = self._marker
805:             tpath, affine = transf_path.get_transformed_points_and_affine()
806:             if len(tpath.vertices):
807:                 # subsample the markers if markevery is not None
808:                 markevery = self.get_markevery()
809:                 if markevery is not None:
810:                     subsampled = _mark_every_path(markevery, tpath,
811:                                                   affine, self.axes.transAxes)
812:                 else:
813:                     subsampled = tpath
814: 
815:                 snap = marker.get_snap_threshold()
816:                 if type(snap) == float:
817:                     snap = renderer.points_to_pixels(self._markersize) >= snap
818:                 gc.set_snap(snap)
819:                 gc.set_joinstyle(marker.get_joinstyle())
820:                 gc.set_capstyle(marker.get_capstyle())
821:                 marker_path = marker.get_path()
822:                 marker_trans = marker.get_transform()
823:                 w = renderer.points_to_pixels(self._markersize)
824: 
825:                 if (isinstance(marker.get_marker(), six.string_types) and
826:                         marker.get_marker() == ','):
827:                     gc.set_linewidth(0)
828:                 else:
829:                     # Don't scale for pixels, and don't stroke them
830:                     marker_trans = marker_trans.scale(w)
831: 
832:                 renderer.draw_markers(gc, marker_path, marker_trans,
833:                                       subsampled, affine.frozen(),
834:                                       rgbaFace)
835: 
836:                 alt_marker_path = marker.get_alt_path()
837:                 if alt_marker_path:
838:                     alt_marker_trans = marker.get_alt_transform()
839:                     alt_marker_trans = alt_marker_trans.scale(w)
840:                     if (isinstance(mec, six.string_types) and mec == 'auto' and
841:                             rgbaFaceAlt is not None):
842:                         gc.set_alpha(rgbaFaceAlt[3])
843:                     else:
844:                         gc.set_alpha(self.get_alpha())
845: 
846:                     renderer.draw_markers(
847:                             gc, alt_marker_path, alt_marker_trans, subsampled,
848:                             affine.frozen(), rgbaFaceAlt)
849: 
850:             gc.restore()
851: 
852:         renderer.close_group('line2d')
853:         self.stale = False
854: 
855:     def get_antialiased(self):
856:         return self._antialiased
857: 
858:     def get_color(self):
859:         return self._color
860: 
861:     def get_drawstyle(self):
862:         return self._drawstyle
863: 
864:     def get_linestyle(self):
865:         return self._linestyle
866: 
867:     def get_linewidth(self):
868:         return self._linewidth
869: 
870:     def get_marker(self):
871:         return self._marker.get_marker()
872: 
873:     def get_markeredgecolor(self):
874:         mec = self._markeredgecolor
875:         if isinstance(mec, six.string_types) and mec == 'auto':
876:             if rcParams['_internal.classic_mode']:
877:                 if self._marker.get_marker() in ('.', ','):
878:                     return self._color
879:                 if self._marker.is_filled() and self.get_fillstyle() != 'none':
880:                      return 'k'  # Bad hard-wired default...
881:             return self._color
882:         else:
883:             return mec
884: 
885:     def get_markeredgewidth(self):
886:         return self._markeredgewidth
887: 
888:     def _get_markerfacecolor(self, alt=False):
889:         if alt:
890:             fc = self._markerfacecoloralt
891:         else:
892:             fc = self._markerfacecolor
893: 
894:         if (isinstance(fc, six.string_types) and fc.lower() == 'auto'):
895:             if self.get_fillstyle() == 'none':
896:                 return 'none'
897:             else:
898:                 return self._color
899:         else:
900:             return fc
901: 
902:     def get_markerfacecolor(self):
903:         return self._get_markerfacecolor(alt=False)
904: 
905:     def get_markerfacecoloralt(self):
906:         return self._get_markerfacecolor(alt=True)
907: 
908:     def get_markersize(self):
909:         return self._markersize
910: 
911:     def get_data(self, orig=True):
912:         '''
913:         Return the xdata, ydata.
914: 
915:         If *orig* is *True*, return the original data.
916:         '''
917:         return self.get_xdata(orig=orig), self.get_ydata(orig=orig)
918: 
919:     def get_xdata(self, orig=True):
920:         '''
921:         Return the xdata.
922: 
923:         If *orig* is *True*, return the original data, else the
924:         processed data.
925:         '''
926:         if orig:
927:             return self._xorig
928:         if self._invalidx:
929:             self.recache()
930:         return self._x
931: 
932:     def get_ydata(self, orig=True):
933:         '''
934:         Return the ydata.
935: 
936:         If *orig* is *True*, return the original data, else the
937:         processed data.
938:         '''
939:         if orig:
940:             return self._yorig
941:         if self._invalidy:
942:             self.recache()
943:         return self._y
944: 
945:     def get_path(self):
946:         '''
947:         Return the :class:`~matplotlib.path.Path` object associated
948:         with this line.
949:         '''
950:         if self._invalidy or self._invalidx:
951:             self.recache()
952:         return self._path
953: 
954:     def get_xydata(self):
955:         '''
956:         Return the *xy* data as a Nx2 numpy array.
957:         '''
958:         if self._invalidy or self._invalidx:
959:             self.recache()
960:         return self._xy
961: 
962:     def set_antialiased(self, b):
963:         '''
964:         True if line should be drawin with antialiased rendering
965: 
966:         ACCEPTS: [True | False]
967:         '''
968:         if self._antialiased != b:
969:             self.stale = True
970:         self._antialiased = b
971: 
972:     def set_color(self, color):
973:         '''
974:         Set the color of the line
975: 
976:         ACCEPTS: any matplotlib color
977:         '''
978:         self._color = color
979:         self.stale = True
980: 
981:     def set_drawstyle(self, drawstyle):
982:         '''
983:         Set the drawstyle of the plot
984: 
985:         'default' connects the points with lines. The steps variants
986:         produce step-plots. 'steps' is equivalent to 'steps-pre' and
987:         is maintained for backward-compatibility.
988: 
989:         ACCEPTS: ['default' | 'steps' | 'steps-pre' | 'steps-mid' |
990:                   'steps-post']
991:         '''
992:         if drawstyle is None:
993:             drawstyle = 'default'
994:         if drawstyle not in self.drawStyles:
995:             raise ValueError('Unrecognized drawstyle {!r}'.format(drawstyle))
996:         if self._drawstyle != drawstyle:
997:             self.stale = True
998:         self._drawstyle = drawstyle
999: 
1000:     def set_linewidth(self, w):
1001:         '''
1002:         Set the line width in points
1003: 
1004:         ACCEPTS: float value in points
1005:         '''
1006:         w = float(w)
1007: 
1008:         if self._linewidth != w:
1009:             self.stale = True
1010:         self._linewidth = w
1011:         # rescale the dashes + offset
1012:         self._dashOffset, self._dashSeq = _scale_dashes(
1013:             self._us_dashOffset, self._us_dashSeq, self._linewidth)
1014: 
1015:     def _split_drawstyle_linestyle(self, ls):
1016:         '''Split drawstyle from linestyle string
1017: 
1018:         If `ls` is only a drawstyle default to returning a linestyle
1019:         of '-'.
1020: 
1021:         Parameters
1022:         ----------
1023:         ls : str
1024:             The linestyle to be processed
1025: 
1026:         Returns
1027:         -------
1028:         ret_ds : str or None
1029:             If the linestyle string does not contain a drawstyle prefix
1030:             return None, otherwise return it.
1031: 
1032:         ls : str
1033:             The linestyle with the drawstyle (if any) stripped.
1034:         '''
1035:         ret_ds = None
1036:         for ds in self.drawStyleKeys:  # long names are first in the list
1037:             if ls.startswith(ds):
1038:                 ret_ds = ds
1039:                 if len(ls) > len(ds):
1040:                     ls = ls[len(ds):]
1041:                 else:
1042:                     ls = '-'
1043:                 break
1044: 
1045:         return ret_ds, ls
1046: 
1047:     def set_linestyle(self, ls):
1048:         '''
1049:         Set the linestyle of the line (also accepts drawstyles,
1050:         e.g., ``'steps--'``)
1051: 
1052: 
1053:         ===========================   =================
1054:         linestyle                     description
1055:         ===========================   =================
1056:         ``'-'`` or ``'solid'``        solid line
1057:         ``'--'`` or  ``'dashed'``     dashed line
1058:         ``'-.'`` or  ``'dashdot'``    dash-dotted line
1059:         ``':'`` or ``'dotted'``       dotted line
1060:         ``'None'``                    draw nothing
1061:         ``' '``                       draw nothing
1062:         ``''``                        draw nothing
1063:         ===========================   =================
1064: 
1065:         'steps' is equivalent to 'steps-pre' and is maintained for
1066:         backward-compatibility.
1067: 
1068:         Alternatively a dash tuple of the following form can be provided::
1069: 
1070:             (offset, onoffseq),
1071: 
1072:         where ``onoffseq`` is an even length tuple of on and off ink
1073:         in points.
1074: 
1075: 
1076:         ACCEPTS: ['solid' | 'dashed', 'dashdot', 'dotted' |
1077:                    (offset, on-off-dash-seq) |
1078:                    ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` |
1079:                    ``' '`` | ``''``]
1080: 
1081:         .. seealso::
1082: 
1083:             :meth:`set_drawstyle`
1084:                To set the drawing style (stepping) of the plot.
1085: 
1086:         Parameters
1087:         ----------
1088:         ls : { ``'-'``,  ``'--'``, ``'-.'``, ``':'``} and more see description
1089:             The line style.
1090:         '''
1091:         if isinstance(ls, six.string_types):
1092:             ds, ls = self._split_drawstyle_linestyle(ls)
1093:             if ds is not None:
1094:                 self.set_drawstyle(ds)
1095: 
1096:             if ls in [' ', '', 'none']:
1097:                 ls = 'None'
1098: 
1099:             if ls not in self._lineStyles:
1100:                 try:
1101:                     ls = ls_mapper_r[ls]
1102:                 except KeyError:
1103:                     raise ValueError(("You passed in an invalid linestyle, "
1104:                                       "`{0}`.  See "
1105:                                       "docs of Line2D.set_linestyle for "
1106:                                       "valid values.").format(ls))
1107:             self._linestyle = ls
1108:         else:
1109:             self._linestyle = '--'
1110: 
1111:         # get the unscaled dashes
1112:         self._us_dashOffset, self._us_dashSeq = _get_dash_pattern(ls)
1113:         # compute the linewidth scaled dashes
1114:         self._dashOffset, self._dashSeq = _scale_dashes(
1115:             self._us_dashOffset, self._us_dashSeq, self._linewidth)
1116: 
1117:     @docstring.dedent_interpd
1118:     def set_marker(self, marker):
1119:         '''
1120:         Set the line marker
1121: 
1122:         ACCEPTS: :mod:`A valid marker style <matplotlib.markers>`
1123: 
1124:         Parameters
1125:         ----------
1126: 
1127:         marker: marker style
1128:             See `~matplotlib.markers` for full description of possible
1129:             argument
1130: 
1131:         '''
1132:         self._marker.set_marker(marker)
1133:         self.stale = True
1134: 
1135:     def set_markeredgecolor(self, ec):
1136:         '''
1137:         Set the marker edge color
1138: 
1139:         ACCEPTS: any matplotlib color
1140:         '''
1141:         if ec is None:
1142:             ec = 'auto'
1143:         if self._markeredgecolor is None or \
1144:            np.any(self._markeredgecolor != ec):
1145:             self.stale = True
1146:         self._markeredgecolor = ec
1147: 
1148:     def set_markeredgewidth(self, ew):
1149:         '''
1150:         Set the marker edge width in points
1151: 
1152:         ACCEPTS: float value in points
1153:         '''
1154:         if ew is None:
1155:             ew = rcParams['lines.markeredgewidth']
1156:         if self._markeredgewidth != ew:
1157:             self.stale = True
1158:         self._markeredgewidth = ew
1159: 
1160:     def set_markerfacecolor(self, fc):
1161:         '''
1162:         Set the marker face color.
1163: 
1164:         ACCEPTS: any matplotlib color
1165:         '''
1166:         if fc is None:
1167:             fc = 'auto'
1168:         if np.any(self._markerfacecolor != fc):
1169:             self.stale = True
1170:         self._markerfacecolor = fc
1171: 
1172:     def set_markerfacecoloralt(self, fc):
1173:         '''
1174:         Set the alternate marker face color.
1175: 
1176:         ACCEPTS: any matplotlib color
1177:         '''
1178:         if fc is None:
1179:             fc = 'auto'
1180:         if np.any(self._markerfacecoloralt != fc):
1181:             self.stale = True
1182:         self._markerfacecoloralt = fc
1183: 
1184:     def set_markersize(self, sz):
1185:         '''
1186:         Set the marker size in points
1187: 
1188:         ACCEPTS: float
1189:         '''
1190:         sz = float(sz)
1191:         if self._markersize != sz:
1192:             self.stale = True
1193:         self._markersize = sz
1194: 
1195:     def set_xdata(self, x):
1196:         '''
1197:         Set the data np.array for x
1198: 
1199:         ACCEPTS: 1D array
1200:         '''
1201:         self._xorig = x
1202:         self._invalidx = True
1203:         self.stale = True
1204: 
1205:     def set_ydata(self, y):
1206:         '''
1207:         Set the data np.array for y
1208: 
1209:         ACCEPTS: 1D array
1210:         '''
1211:         self._yorig = y
1212:         self._invalidy = True
1213:         self.stale = True
1214: 
1215:     def set_dashes(self, seq):
1216:         '''
1217:         Set the dash sequence, sequence of dashes with on off ink in
1218:         points.  If seq is empty or if seq = (None, None), the
1219:         linestyle will be set to solid.
1220: 
1221:         ACCEPTS: sequence of on/off ink in points
1222:         '''
1223:         if seq == (None, None) or len(seq) == 0:
1224:             self.set_linestyle('-')
1225:         else:
1226:             self.set_linestyle((0, seq))
1227: 
1228:     def update_from(self, other):
1229:         '''copy properties from other to self'''
1230:         Artist.update_from(self, other)
1231:         self._linestyle = other._linestyle
1232:         self._linewidth = other._linewidth
1233:         self._color = other._color
1234:         self._markersize = other._markersize
1235:         self._markerfacecolor = other._markerfacecolor
1236:         self._markerfacecoloralt = other._markerfacecoloralt
1237:         self._markeredgecolor = other._markeredgecolor
1238:         self._markeredgewidth = other._markeredgewidth
1239:         self._dashSeq = other._dashSeq
1240:         self._us_dashSeq = other._us_dashSeq
1241:         self._dashOffset = other._dashOffset
1242:         self._us_dashOffset = other._us_dashOffset
1243:         self._dashcapstyle = other._dashcapstyle
1244:         self._dashjoinstyle = other._dashjoinstyle
1245:         self._solidcapstyle = other._solidcapstyle
1246:         self._solidjoinstyle = other._solidjoinstyle
1247: 
1248:         self._linestyle = other._linestyle
1249:         self._marker = MarkerStyle(other._marker.get_marker(),
1250:                                    other._marker.get_fillstyle())
1251:         self._drawstyle = other._drawstyle
1252: 
1253:     def _get_rgba_face(self, alt=False):
1254:         facecolor = self._get_markerfacecolor(alt=alt)
1255:         if (isinstance(facecolor, six.string_types)
1256:                 and facecolor.lower() == 'none'):
1257:             rgbaFace = None
1258:         else:
1259:             rgbaFace = mcolors.to_rgba(facecolor, self._alpha)
1260:         return rgbaFace
1261: 
1262:     def _get_rgba_ln_color(self, alt=False):
1263:         return mcolors.to_rgba(self._color, self._alpha)
1264: 
1265:     # some aliases....
1266:     def set_aa(self, val):
1267:         'alias for set_antialiased'
1268:         self.set_antialiased(val)
1269: 
1270:     def set_c(self, val):
1271:         'alias for set_color'
1272:         self.set_color(val)
1273: 
1274:     def set_ls(self, val):
1275:         '''alias for set_linestyle'''
1276:         self.set_linestyle(val)
1277: 
1278:     def set_lw(self, val):
1279:         '''alias for set_linewidth'''
1280:         self.set_linewidth(val)
1281: 
1282:     def set_mec(self, val):
1283:         '''alias for set_markeredgecolor'''
1284:         self.set_markeredgecolor(val)
1285: 
1286:     def set_mew(self, val):
1287:         '''alias for set_markeredgewidth'''
1288:         self.set_markeredgewidth(val)
1289: 
1290:     def set_mfc(self, val):
1291:         '''alias for set_markerfacecolor'''
1292:         self.set_markerfacecolor(val)
1293: 
1294:     def set_mfcalt(self, val):
1295:         '''alias for set_markerfacecoloralt'''
1296:         self.set_markerfacecoloralt(val)
1297: 
1298:     def set_ms(self, val):
1299:         '''alias for set_markersize'''
1300:         self.set_markersize(val)
1301: 
1302:     def get_aa(self):
1303:         '''alias for get_antialiased'''
1304:         return self.get_antialiased()
1305: 
1306:     def get_c(self):
1307:         '''alias for get_color'''
1308:         return self.get_color()
1309: 
1310:     def get_ls(self):
1311:         '''alias for get_linestyle'''
1312:         return self.get_linestyle()
1313: 
1314:     def get_lw(self):
1315:         '''alias for get_linewidth'''
1316:         return self.get_linewidth()
1317: 
1318:     def get_mec(self):
1319:         '''alias for get_markeredgecolor'''
1320:         return self.get_markeredgecolor()
1321: 
1322:     def get_mew(self):
1323:         '''alias for get_markeredgewidth'''
1324:         return self.get_markeredgewidth()
1325: 
1326:     def get_mfc(self):
1327:         '''alias for get_markerfacecolor'''
1328:         return self.get_markerfacecolor()
1329: 
1330:     def get_mfcalt(self, alt=False):
1331:         '''alias for get_markerfacecoloralt'''
1332:         return self.get_markerfacecoloralt()
1333: 
1334:     def get_ms(self):
1335:         '''alias for get_markersize'''
1336:         return self.get_markersize()
1337: 
1338:     def set_dash_joinstyle(self, s):
1339:         '''
1340:         Set the join style for dashed linestyles
1341:         ACCEPTS: ['miter' | 'round' | 'bevel']
1342:         '''
1343:         s = s.lower()
1344:         if s not in self.validJoin:
1345:             raise ValueError('set_dash_joinstyle passed "%s";\n' % (s,)
1346:                              + 'valid joinstyles are %s' % (self.validJoin,))
1347:         if self._dashjoinstyle != s:
1348:             self.stale = True
1349:         self._dashjoinstyle = s
1350: 
1351:     def set_solid_joinstyle(self, s):
1352:         '''
1353:         Set the join style for solid linestyles
1354:         ACCEPTS: ['miter' | 'round' | 'bevel']
1355:         '''
1356:         s = s.lower()
1357:         if s not in self.validJoin:
1358:             raise ValueError('set_solid_joinstyle passed "%s";\n' % (s,)
1359:                              + 'valid joinstyles are %s' % (self.validJoin,))
1360: 
1361:         if self._solidjoinstyle != s:
1362:             self.stale = True
1363:         self._solidjoinstyle = s
1364: 
1365:     def get_dash_joinstyle(self):
1366:         '''
1367:         Get the join style for dashed linestyles
1368:         '''
1369:         return self._dashjoinstyle
1370: 
1371:     def get_solid_joinstyle(self):
1372:         '''
1373:         Get the join style for solid linestyles
1374:         '''
1375:         return self._solidjoinstyle
1376: 
1377:     def set_dash_capstyle(self, s):
1378:         '''
1379:         Set the cap style for dashed linestyles
1380: 
1381:         ACCEPTS: ['butt' | 'round' | 'projecting']
1382:         '''
1383:         s = s.lower()
1384:         if s not in self.validCap:
1385:             raise ValueError('set_dash_capstyle passed "%s";\n' % (s,)
1386:                              + 'valid capstyles are %s' % (self.validCap,))
1387:         if self._dashcapstyle != s:
1388:             self.stale = True
1389:         self._dashcapstyle = s
1390: 
1391:     def set_solid_capstyle(self, s):
1392:         '''
1393:         Set the cap style for solid linestyles
1394: 
1395:         ACCEPTS: ['butt' | 'round' |  'projecting']
1396:         '''
1397:         s = s.lower()
1398:         if s not in self.validCap:
1399:             raise ValueError('set_solid_capstyle passed "%s";\n' % (s,)
1400:                              + 'valid capstyles are %s' % (self.validCap,))
1401:         if self._solidcapstyle != s:
1402:             self.stale = True
1403:         self._solidcapstyle = s
1404: 
1405:     def get_dash_capstyle(self):
1406:         '''
1407:         Get the cap style for dashed linestyles
1408:         '''
1409:         return self._dashcapstyle
1410: 
1411:     def get_solid_capstyle(self):
1412:         '''
1413:         Get the cap style for solid linestyles
1414:         '''
1415:         return self._solidcapstyle
1416: 
1417:     def is_dashed(self):
1418:         'return True if line is dashstyle'
1419:         return self._linestyle in ('--', '-.', ':')
1420: 
1421: 
1422: class VertexSelector(object):
1423:     '''
1424:     Manage the callbacks to maintain a list of selected vertices for
1425:     :class:`matplotlib.lines.Line2D`. Derived classes should override
1426:     :meth:`~matplotlib.lines.VertexSelector.process_selected` to do
1427:     something with the picks.
1428: 
1429:     Here is an example which highlights the selected verts with red
1430:     circles::
1431: 
1432:         import numpy as np
1433:         import matplotlib.pyplot as plt
1434:         import matplotlib.lines as lines
1435: 
1436:         class HighlightSelected(lines.VertexSelector):
1437:             def __init__(self, line, fmt='ro', **kwargs):
1438:                 lines.VertexSelector.__init__(self, line)
1439:                 self.markers, = self.axes.plot([], [], fmt, **kwargs)
1440: 
1441:             def process_selected(self, ind, xs, ys):
1442:                 self.markers.set_data(xs, ys)
1443:                 self.canvas.draw()
1444: 
1445:         fig = plt.figure()
1446:         ax = fig.add_subplot(111)
1447:         x, y = np.random.rand(2, 30)
1448:         line, = ax.plot(x, y, 'bs-', picker=5)
1449: 
1450:         selector = HighlightSelected(line)
1451:         plt.show()
1452: 
1453:     '''
1454:     def __init__(self, line):
1455:         '''
1456:         Initialize the class with a :class:`matplotlib.lines.Line2D`
1457:         instance.  The line should already be added to some
1458:         :class:`matplotlib.axes.Axes` instance and should have the
1459:         picker property set.
1460:         '''
1461:         if line.axes is None:
1462:             raise RuntimeError('You must first add the line to the Axes')
1463: 
1464:         if line.get_picker() is None:
1465:             raise RuntimeError('You must first set the picker property '
1466:                                'of the line')
1467: 
1468:         self.axes = line.axes
1469:         self.line = line
1470:         self.canvas = self.axes.figure.canvas
1471:         self.cid = self.canvas.mpl_connect('pick_event', self.onpick)
1472: 
1473:         self.ind = set()
1474: 
1475:     def process_selected(self, ind, xs, ys):
1476:         '''
1477:         Default "do nothing" implementation of the
1478:         :meth:`process_selected` method.
1479: 
1480:         *ind* are the indices of the selected vertices.  *xs* and *ys*
1481:         are the coordinates of the selected vertices.
1482:         '''
1483:         pass
1484: 
1485:     def onpick(self, event):
1486:         '''When the line is picked, update the set of selected indicies.'''
1487:         if event.artist is not self.line:
1488:             return
1489:         self.ind ^= set(event.ind)
1490:         ind = sorted(self.ind)
1491:         xdata, ydata = self.line.get_data()
1492:         self.process_selected(ind, xdata[ind], ydata[ind])
1493: 
1494: 
1495: lineStyles = Line2D._lineStyles
1496: lineMarkers = MarkerStyle.markers
1497: drawStyles = Line2D.drawStyles
1498: fillStyles = MarkerStyle.fillstyles
1499: 
1500: docstring.interpd.update(Line2D=artist.kwdoc(Line2D))
1501: 
1502: # You can not set the docstring of an instancemethod,
1503: # but you can on the underlying function.  Go figure.
1504: docstring.dedent_interpd(Line2D.__init__)
1505: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_70647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4, (-1)), 'unicode', u'\nThis module contains all the 2D line class which can draw with a\nvariety of line styles, markers and colors.\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'import six' statement (line 10)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_70648 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'six')

if (type(import_70648) is not StypyTypeError):

    if (import_70648 != 'pyd_module'):
        __import__(import_70648)
        sys_modules_70649 = sys.modules[import_70648]
        import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'six', sys_modules_70649.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 10)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 10, 0), 'six', import_70648)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'import warnings' statement (line 12)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'import numpy' statement (line 14)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_70650 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy')

if (type(import_70650) is not StypyTypeError):

    if (import_70650 != 'pyd_module'):
        __import__(import_70650)
        sys_modules_70651 = sys.modules[import_70650]
        import_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'np', sys_modules_70651.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy', import_70650)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 0))

# 'from matplotlib import artist, mcolors, docstring, rcParams' statement (line 16)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_70652 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib')

if (type(import_70652) is not StypyTypeError):

    if (import_70652 != 'pyd_module'):
        __import__(import_70652)
        sys_modules_70653 = sys.modules[import_70652]
        import_from_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib', sys_modules_70653.module_type_store, module_type_store, ['artist', 'colors', 'docstring', 'rcParams'])
        nest_module(stypy.reporting.localization.Localization(__file__, 16, 0), __file__, sys_modules_70653, sys_modules_70653.module_type_store, module_type_store)
    else:
        from matplotlib import artist, colors as mcolors, docstring, rcParams

        import_from_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib', None, module_type_store, ['artist', 'colors', 'docstring', 'rcParams'], [artist, mcolors, docstring, rcParams])

else:
    # Assigning a type to the variable 'matplotlib' (line 16)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib', import_70652)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 0))

# 'from matplotlib.artist import Artist, allow_rasterization' statement (line 17)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_70654 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'matplotlib.artist')

if (type(import_70654) is not StypyTypeError):

    if (import_70654 != 'pyd_module'):
        __import__(import_70654)
        sys_modules_70655 = sys.modules[import_70654]
        import_from_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'matplotlib.artist', sys_modules_70655.module_type_store, module_type_store, ['Artist', 'allow_rasterization'])
        nest_module(stypy.reporting.localization.Localization(__file__, 17, 0), __file__, sys_modules_70655, sys_modules_70655.module_type_store, module_type_store)
    else:
        from matplotlib.artist import Artist, allow_rasterization

        import_from_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'matplotlib.artist', None, module_type_store, ['Artist', 'allow_rasterization'], [Artist, allow_rasterization])

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 17)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 17, 0), 'matplotlib.artist', import_70654)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'from matplotlib.cbook import _to_unmasked_float_array, iterable, is_numlike, ls_mapper, ls_mapper_r, STEP_LOOKUP_MAP' statement (line 18)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_70656 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib.cbook')

if (type(import_70656) is not StypyTypeError):

    if (import_70656 != 'pyd_module'):
        __import__(import_70656)
        sys_modules_70657 = sys.modules[import_70656]
        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib.cbook', sys_modules_70657.module_type_store, module_type_store, ['_to_unmasked_float_array', 'iterable', 'is_numlike', 'ls_mapper', 'ls_mapper_r', 'STEP_LOOKUP_MAP'])
        nest_module(stypy.reporting.localization.Localization(__file__, 18, 0), __file__, sys_modules_70657, sys_modules_70657.module_type_store, module_type_store)
    else:
        from matplotlib.cbook import _to_unmasked_float_array, iterable, is_numlike, ls_mapper, ls_mapper_r, STEP_LOOKUP_MAP

        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib.cbook', None, module_type_store, ['_to_unmasked_float_array', 'iterable', 'is_numlike', 'ls_mapper', 'ls_mapper_r', 'STEP_LOOKUP_MAP'], [_to_unmasked_float_array, iterable, is_numlike, ls_mapper, ls_mapper_r, STEP_LOOKUP_MAP])

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 18)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib.cbook', import_70656)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'from matplotlib.markers import MarkerStyle' statement (line 21)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_70658 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.markers')

if (type(import_70658) is not StypyTypeError):

    if (import_70658 != 'pyd_module'):
        __import__(import_70658)
        sys_modules_70659 = sys.modules[import_70658]
        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.markers', sys_modules_70659.module_type_store, module_type_store, ['MarkerStyle'])
        nest_module(stypy.reporting.localization.Localization(__file__, 21, 0), __file__, sys_modules_70659, sys_modules_70659.module_type_store, module_type_store)
    else:
        from matplotlib.markers import MarkerStyle

        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.markers', None, module_type_store, ['MarkerStyle'], [MarkerStyle])

else:
    # Assigning a type to the variable 'matplotlib.markers' (line 21)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.markers', import_70658)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 22, 0))

# 'from matplotlib.path import Path' statement (line 22)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_70660 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'matplotlib.path')

if (type(import_70660) is not StypyTypeError):

    if (import_70660 != 'pyd_module'):
        __import__(import_70660)
        sys_modules_70661 = sys.modules[import_70660]
        import_from_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'matplotlib.path', sys_modules_70661.module_type_store, module_type_store, ['Path'])
        nest_module(stypy.reporting.localization.Localization(__file__, 22, 0), __file__, sys_modules_70661, sys_modules_70661.module_type_store, module_type_store)
    else:
        from matplotlib.path import Path

        import_from_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'matplotlib.path', None, module_type_store, ['Path'], [Path])

else:
    # Assigning a type to the variable 'matplotlib.path' (line 22)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 22, 0), 'matplotlib.path', import_70660)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'from matplotlib.transforms import Bbox, TransformedPath, IdentityTransform' statement (line 23)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_70662 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.transforms')

if (type(import_70662) is not StypyTypeError):

    if (import_70662 != 'pyd_module'):
        __import__(import_70662)
        sys_modules_70663 = sys.modules[import_70662]
        import_from_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.transforms', sys_modules_70663.module_type_store, module_type_store, ['Bbox', 'TransformedPath', 'IdentityTransform'])
        nest_module(stypy.reporting.localization.Localization(__file__, 23, 0), __file__, sys_modules_70663, sys_modules_70663.module_type_store, module_type_store)
    else:
        from matplotlib.transforms import Bbox, TransformedPath, IdentityTransform

        import_from_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.transforms', None, module_type_store, ['Bbox', 'TransformedPath', 'IdentityTransform'], [Bbox, TransformedPath, IdentityTransform])

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 23)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.transforms', import_70662)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'from numpy import ma' statement (line 27)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_70664 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'numpy')

if (type(import_70664) is not StypyTypeError):

    if (import_70664 != 'pyd_module'):
        __import__(import_70664)
        sys_modules_70665 = sys.modules[import_70664]
        import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'numpy', sys_modules_70665.module_type_store, module_type_store, ['ma'])
        nest_module(stypy.reporting.localization.Localization(__file__, 27, 0), __file__, sys_modules_70665, sys_modules_70665.module_type_store, module_type_store)
    else:
        from numpy import ma

        import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'numpy', None, module_type_store, ['ma'], [ma])

else:
    # Assigning a type to the variable 'numpy' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), 'numpy', import_70664)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'from matplotlib import _path' statement (line 28)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_70666 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib')

if (type(import_70666) is not StypyTypeError):

    if (import_70666 != 'pyd_module'):
        __import__(import_70666)
        sys_modules_70667 = sys.modules[import_70666]
        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib', sys_modules_70667.module_type_store, module_type_store, ['_path'])
        nest_module(stypy.reporting.localization.Localization(__file__, 28, 0), __file__, sys_modules_70667, sys_modules_70667.module_type_store, module_type_store)
    else:
        from matplotlib import _path

        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib', None, module_type_store, ['_path'], [_path])

else:
    # Assigning a type to the variable 'matplotlib' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib', import_70666)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'from matplotlib.markers import CARETLEFT, CARETRIGHT, CARETUP, CARETDOWN, CARETLEFTBASE, CARETRIGHTBASE, CARETUPBASE, CARETDOWNBASE, TICKLEFT, TICKRIGHT, TICKUP, TICKDOWN' statement (line 29)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_70668 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.markers')

if (type(import_70668) is not StypyTypeError):

    if (import_70668 != 'pyd_module'):
        __import__(import_70668)
        sys_modules_70669 = sys.modules[import_70668]
        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.markers', sys_modules_70669.module_type_store, module_type_store, ['CARETLEFT', 'CARETRIGHT', 'CARETUP', 'CARETDOWN', 'CARETLEFTBASE', 'CARETRIGHTBASE', 'CARETUPBASE', 'CARETDOWNBASE', 'TICKLEFT', 'TICKRIGHT', 'TICKUP', 'TICKDOWN'])
        nest_module(stypy.reporting.localization.Localization(__file__, 29, 0), __file__, sys_modules_70669, sys_modules_70669.module_type_store, module_type_store)
    else:
        from matplotlib.markers import CARETLEFT, CARETRIGHT, CARETUP, CARETDOWN, CARETLEFTBASE, CARETRIGHTBASE, CARETUPBASE, CARETDOWNBASE, TICKLEFT, TICKRIGHT, TICKUP, TICKDOWN

        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.markers', None, module_type_store, ['CARETLEFT', 'CARETRIGHT', 'CARETUP', 'CARETDOWN', 'CARETLEFTBASE', 'CARETRIGHTBASE', 'CARETUPBASE', 'CARETDOWNBASE', 'TICKLEFT', 'TICKRIGHT', 'TICKUP', 'TICKDOWN'], [CARETLEFT, CARETRIGHT, CARETUP, CARETDOWN, CARETLEFTBASE, CARETRIGHTBASE, CARETUPBASE, CARETDOWNBASE, TICKLEFT, TICKRIGHT, TICKUP, TICKDOWN])

else:
    # Assigning a type to the variable 'matplotlib.markers' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.markers', import_70668)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')


@norecursion
def _get_dash_pattern(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_dash_pattern'
    module_type_store = module_type_store.open_function_context('_get_dash_pattern', 35, 0, False)
    
    # Passed parameters checking function
    _get_dash_pattern.stypy_localization = localization
    _get_dash_pattern.stypy_type_of_self = None
    _get_dash_pattern.stypy_type_store = module_type_store
    _get_dash_pattern.stypy_function_name = '_get_dash_pattern'
    _get_dash_pattern.stypy_param_names_list = ['style']
    _get_dash_pattern.stypy_varargs_param_name = None
    _get_dash_pattern.stypy_kwargs_param_name = None
    _get_dash_pattern.stypy_call_defaults = defaults
    _get_dash_pattern.stypy_call_varargs = varargs
    _get_dash_pattern.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_dash_pattern', ['style'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_dash_pattern', localization, ['style'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_dash_pattern(...)' code ##################

    unicode_70670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, (-1)), 'unicode', u'Convert linestyle -> dash pattern\n    ')
    
    
    # Call to isinstance(...): (line 39)
    # Processing the call arguments (line 39)
    # Getting the type of 'style' (line 39)
    style_70672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 18), 'style', False)
    # Getting the type of 'six' (line 39)
    six_70673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 25), 'six', False)
    # Obtaining the member 'string_types' of a type (line 39)
    string_types_70674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 39, 25), six_70673, 'string_types')
    # Processing the call keyword arguments (line 39)
    kwargs_70675 = {}
    # Getting the type of 'isinstance' (line 39)
    isinstance_70671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 39)
    isinstance_call_result_70676 = invoke(stypy.reporting.localization.Localization(__file__, 39, 7), isinstance_70671, *[style_70672, string_types_70674], **kwargs_70675)
    
    # Testing the type of an if condition (line 39)
    if_condition_70677 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 39, 4), isinstance_call_result_70676)
    # Assigning a type to the variable 'if_condition_70677' (line 39)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 4), 'if_condition_70677', if_condition_70677)
    # SSA begins for if statement (line 39)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 40):
    
    # Assigning a Call to a Name (line 40):
    
    # Call to get(...): (line 40)
    # Processing the call arguments (line 40)
    # Getting the type of 'style' (line 40)
    style_70680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 30), 'style', False)
    # Getting the type of 'style' (line 40)
    style_70681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 37), 'style', False)
    # Processing the call keyword arguments (line 40)
    kwargs_70682 = {}
    # Getting the type of 'ls_mapper' (line 40)
    ls_mapper_70678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 16), 'ls_mapper', False)
    # Obtaining the member 'get' of a type (line 40)
    get_70679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 40, 16), ls_mapper_70678, 'get')
    # Calling get(args, kwargs) (line 40)
    get_call_result_70683 = invoke(stypy.reporting.localization.Localization(__file__, 40, 16), get_70679, *[style_70680, style_70681], **kwargs_70682)
    
    # Assigning a type to the variable 'style' (line 40)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 8), 'style', get_call_result_70683)
    # SSA join for if statement (line 39)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'style' (line 42)
    style_70684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 42, 7), 'style')
    
    # Obtaining an instance of the builtin type 'list' (line 42)
    list_70685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 42)
    # Adding element type (line 42)
    unicode_70686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 17), 'unicode', u'solid')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 42, 16), list_70685, unicode_70686)
    # Adding element type (line 42)
    unicode_70687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 26), 'unicode', u'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 42, 16), list_70685, unicode_70687)
    
    # Applying the binary operator 'in' (line 42)
    result_contains_70688 = python_operator(stypy.reporting.localization.Localization(__file__, 42, 7), 'in', style_70684, list_70685)
    
    # Testing the type of an if condition (line 42)
    if_condition_70689 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 42, 4), result_contains_70688)
    # Assigning a type to the variable 'if_condition_70689' (line 42)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 42, 4), 'if_condition_70689', if_condition_70689)
    # SSA begins for if statement (line 42)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 43):
    
    # Assigning a Name to a Name (line 43):
    # Getting the type of 'None' (line 43)
    None_70690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 25), 'None')
    # Assigning a type to the variable 'tuple_assignment_70585' (line 43)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 8), 'tuple_assignment_70585', None_70690)
    
    # Assigning a Name to a Name (line 43):
    # Getting the type of 'None' (line 43)
    None_70691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 31), 'None')
    # Assigning a type to the variable 'tuple_assignment_70586' (line 43)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 8), 'tuple_assignment_70586', None_70691)
    
    # Assigning a Name to a Name (line 43):
    # Getting the type of 'tuple_assignment_70585' (line 43)
    tuple_assignment_70585_70692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 8), 'tuple_assignment_70585')
    # Assigning a type to the variable 'offset' (line 43)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 8), 'offset', tuple_assignment_70585_70692)
    
    # Assigning a Name to a Name (line 43):
    # Getting the type of 'tuple_assignment_70586' (line 43)
    tuple_assignment_70586_70693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 8), 'tuple_assignment_70586')
    # Assigning a type to the variable 'dashes' (line 43)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 16), 'dashes', tuple_assignment_70586_70693)
    # SSA branch for the else part of an if statement (line 42)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'style' (line 45)
    style_70694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 45, 9), 'style')
    
    # Obtaining an instance of the builtin type 'list' (line 45)
    list_70695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 45)
    # Adding element type (line 45)
    unicode_70696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 19), 'unicode', u'dashed')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 45, 18), list_70695, unicode_70696)
    # Adding element type (line 45)
    unicode_70697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 29), 'unicode', u'dashdot')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 45, 18), list_70695, unicode_70697)
    # Adding element type (line 45)
    unicode_70698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 40), 'unicode', u'dotted')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 45, 18), list_70695, unicode_70698)
    
    # Applying the binary operator 'in' (line 45)
    result_contains_70699 = python_operator(stypy.reporting.localization.Localization(__file__, 45, 9), 'in', style_70694, list_70695)
    
    # Testing the type of an if condition (line 45)
    if_condition_70700 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 45, 9), result_contains_70699)
    # Assigning a type to the variable 'if_condition_70700' (line 45)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 45, 9), 'if_condition_70700', if_condition_70700)
    # SSA begins for if statement (line 45)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 46):
    
    # Assigning a Num to a Name (line 46):
    int_70701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 17), 'int')
    # Assigning a type to the variable 'offset' (line 46)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 8), 'offset', int_70701)
    
    # Assigning a Call to a Name (line 47):
    
    # Assigning a Call to a Name (line 47):
    
    # Call to tuple(...): (line 47)
    # Processing the call arguments (line 47)
    
    # Obtaining the type of the subscript
    
    # Call to format(...): (line 47)
    # Processing the call arguments (line 47)
    # Getting the type of 'style' (line 47)
    style_70705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 58), 'style', False)
    # Processing the call keyword arguments (line 47)
    kwargs_70706 = {}
    unicode_70703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 32), 'unicode', u'lines.{}_pattern')
    # Obtaining the member 'format' of a type (line 47)
    format_70704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 47, 32), unicode_70703, 'format')
    # Calling format(args, kwargs) (line 47)
    format_call_result_70707 = invoke(stypy.reporting.localization.Localization(__file__, 47, 32), format_70704, *[style_70705], **kwargs_70706)
    
    # Getting the type of 'rcParams' (line 47)
    rcParams_70708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 23), 'rcParams', False)
    # Obtaining the member '__getitem__' of a type (line 47)
    getitem___70709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 47, 23), rcParams_70708, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 47)
    subscript_call_result_70710 = invoke(stypy.reporting.localization.Localization(__file__, 47, 23), getitem___70709, format_call_result_70707)
    
    # Processing the call keyword arguments (line 47)
    kwargs_70711 = {}
    # Getting the type of 'tuple' (line 47)
    tuple_70702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 17), 'tuple', False)
    # Calling tuple(args, kwargs) (line 47)
    tuple_call_result_70712 = invoke(stypy.reporting.localization.Localization(__file__, 47, 17), tuple_70702, *[subscript_call_result_70710], **kwargs_70711)
    
    # Assigning a type to the variable 'dashes' (line 47)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 47, 8), 'dashes', tuple_call_result_70712)
    # SSA branch for the else part of an if statement (line 45)
    module_type_store.open_ssa_branch('else')
    
    # Type idiom detected: calculating its left and rigth part (line 49)
    # Getting the type of 'tuple' (line 49)
    tuple_70713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 27), 'tuple')
    # Getting the type of 'style' (line 49)
    style_70714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 20), 'style')
    
    (may_be_70715, more_types_in_union_70716) = may_be_subtype(tuple_70713, style_70714)

    if may_be_70715:

        if more_types_in_union_70716:
            # Runtime conditional SSA (line 49)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'style' (line 49)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 9), 'style', remove_not_subtype_from_union(style_70714, tuple))
        
        # Assigning a Name to a Tuple (line 50):
        
        # Assigning a Subscript to a Name (line 50):
        
        # Obtaining the type of the subscript
        int_70717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 50, 8), 'int')
        # Getting the type of 'style' (line 50)
        style_70718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 50, 25), 'style')
        # Obtaining the member '__getitem__' of a type (line 50)
        getitem___70719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 50, 8), style_70718, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 50)
        subscript_call_result_70720 = invoke(stypy.reporting.localization.Localization(__file__, 50, 8), getitem___70719, int_70717)
        
        # Assigning a type to the variable 'tuple_var_assignment_70587' (line 50)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 50, 8), 'tuple_var_assignment_70587', subscript_call_result_70720)
        
        # Assigning a Subscript to a Name (line 50):
        
        # Obtaining the type of the subscript
        int_70721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 50, 8), 'int')
        # Getting the type of 'style' (line 50)
        style_70722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 50, 25), 'style')
        # Obtaining the member '__getitem__' of a type (line 50)
        getitem___70723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 50, 8), style_70722, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 50)
        subscript_call_result_70724 = invoke(stypy.reporting.localization.Localization(__file__, 50, 8), getitem___70723, int_70721)
        
        # Assigning a type to the variable 'tuple_var_assignment_70588' (line 50)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 50, 8), 'tuple_var_assignment_70588', subscript_call_result_70724)
        
        # Assigning a Name to a Name (line 50):
        # Getting the type of 'tuple_var_assignment_70587' (line 50)
        tuple_var_assignment_70587_70725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 50, 8), 'tuple_var_assignment_70587')
        # Assigning a type to the variable 'offset' (line 50)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 50, 8), 'offset', tuple_var_assignment_70587_70725)
        
        # Assigning a Name to a Name (line 50):
        # Getting the type of 'tuple_var_assignment_70588' (line 50)
        tuple_var_assignment_70588_70726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 50, 8), 'tuple_var_assignment_70588')
        # Assigning a type to the variable 'dashes' (line 50)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 50, 16), 'dashes', tuple_var_assignment_70588_70726)

        if more_types_in_union_70716:
            # Runtime conditional SSA for else branch (line 49)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_70715) or more_types_in_union_70716):
        # Assigning a type to the variable 'style' (line 49)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 9), 'style', remove_subtype_from_union(style_70714, tuple))
        
        # Call to ValueError(...): (line 52)
        # Processing the call arguments (line 52)
        unicode_70728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 25), 'unicode', u'Unrecognized linestyle: %s')
        
        # Call to str(...): (line 52)
        # Processing the call arguments (line 52)
        # Getting the type of 'style' (line 52)
        style_70730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 60), 'style', False)
        # Processing the call keyword arguments (line 52)
        kwargs_70731 = {}
        # Getting the type of 'str' (line 52)
        str_70729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 56), 'str', False)
        # Calling str(args, kwargs) (line 52)
        str_call_result_70732 = invoke(stypy.reporting.localization.Localization(__file__, 52, 56), str_70729, *[style_70730], **kwargs_70731)
        
        # Applying the binary operator '%' (line 52)
        result_mod_70733 = python_operator(stypy.reporting.localization.Localization(__file__, 52, 25), '%', unicode_70728, str_call_result_70732)
        
        # Processing the call keyword arguments (line 52)
        kwargs_70734 = {}
        # Getting the type of 'ValueError' (line 52)
        ValueError_70727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 14), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 52)
        ValueError_call_result_70735 = invoke(stypy.reporting.localization.Localization(__file__, 52, 14), ValueError_70727, *[result_mod_70733], **kwargs_70734)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 52, 8), ValueError_call_result_70735, 'raise parameter', BaseException)

        if (may_be_70715 and more_types_in_union_70716):
            # SSA join for if statement (line 49)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 45)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 42)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'dashes' (line 55)
    dashes_70736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 7), 'dashes')
    # Getting the type of 'None' (line 55)
    None_70737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 21), 'None')
    # Applying the binary operator 'isnot' (line 55)
    result_is_not_70738 = python_operator(stypy.reporting.localization.Localization(__file__, 55, 7), 'isnot', dashes_70736, None_70737)
    
    
    # Getting the type of 'offset' (line 55)
    offset_70739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 30), 'offset')
    # Getting the type of 'None' (line 55)
    None_70740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 44), 'None')
    # Applying the binary operator 'isnot' (line 55)
    result_is_not_70741 = python_operator(stypy.reporting.localization.Localization(__file__, 55, 30), 'isnot', offset_70739, None_70740)
    
    # Applying the binary operator 'and' (line 55)
    result_and_keyword_70742 = python_operator(stypy.reporting.localization.Localization(__file__, 55, 7), 'and', result_is_not_70738, result_is_not_70741)
    
    # Testing the type of an if condition (line 55)
    if_condition_70743 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 55, 4), result_and_keyword_70742)
    # Assigning a type to the variable 'if_condition_70743' (line 55)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 55, 4), 'if_condition_70743', if_condition_70743)
    # SSA begins for if statement (line 55)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 56):
    
    # Assigning a Call to a Name (line 56):
    
    # Call to sum(...): (line 56)
    # Processing the call arguments (line 56)
    # Getting the type of 'dashes' (line 56)
    dashes_70745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 19), 'dashes', False)
    # Processing the call keyword arguments (line 56)
    kwargs_70746 = {}
    # Getting the type of 'sum' (line 56)
    sum_70744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 15), 'sum', False)
    # Calling sum(args, kwargs) (line 56)
    sum_call_result_70747 = invoke(stypy.reporting.localization.Localization(__file__, 56, 15), sum_70744, *[dashes_70745], **kwargs_70746)
    
    # Assigning a type to the variable 'dsum' (line 56)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 56, 8), 'dsum', sum_call_result_70747)
    
    # Getting the type of 'dsum' (line 57)
    dsum_70748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 11), 'dsum')
    # Testing the type of an if condition (line 57)
    if_condition_70749 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 57, 8), dsum_70748)
    # Assigning a type to the variable 'if_condition_70749' (line 57)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 57, 8), 'if_condition_70749', if_condition_70749)
    # SSA begins for if statement (line 57)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'offset' (line 58)
    offset_70750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 58, 12), 'offset')
    # Getting the type of 'dsum' (line 58)
    dsum_70751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 58, 22), 'dsum')
    # Applying the binary operator '%=' (line 58)
    result_imod_70752 = python_operator(stypy.reporting.localization.Localization(__file__, 58, 12), '%=', offset_70750, dsum_70751)
    # Assigning a type to the variable 'offset' (line 58)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 58, 12), 'offset', result_imod_70752)
    
    # SSA join for if statement (line 57)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 55)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 60)
    tuple_70753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 60)
    # Adding element type (line 60)
    # Getting the type of 'offset' (line 60)
    offset_70754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 11), 'offset')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 11), tuple_70753, offset_70754)
    # Adding element type (line 60)
    # Getting the type of 'dashes' (line 60)
    dashes_70755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 19), 'dashes')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 11), tuple_70753, dashes_70755)
    
    # Assigning a type to the variable 'stypy_return_type' (line 60)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 60, 4), 'stypy_return_type', tuple_70753)
    
    # ################# End of '_get_dash_pattern(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_dash_pattern' in the type store
    # Getting the type of 'stypy_return_type' (line 35)
    stypy_return_type_70756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 35, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_70756)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_dash_pattern'
    return stypy_return_type_70756

# Assigning a type to the variable '_get_dash_pattern' (line 35)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 35, 0), '_get_dash_pattern', _get_dash_pattern)

@norecursion
def _scale_dashes(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_scale_dashes'
    module_type_store = module_type_store.open_function_context('_scale_dashes', 63, 0, False)
    
    # Passed parameters checking function
    _scale_dashes.stypy_localization = localization
    _scale_dashes.stypy_type_of_self = None
    _scale_dashes.stypy_type_store = module_type_store
    _scale_dashes.stypy_function_name = '_scale_dashes'
    _scale_dashes.stypy_param_names_list = ['offset', 'dashes', 'lw']
    _scale_dashes.stypy_varargs_param_name = None
    _scale_dashes.stypy_kwargs_param_name = None
    _scale_dashes.stypy_call_defaults = defaults
    _scale_dashes.stypy_call_varargs = varargs
    _scale_dashes.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_scale_dashes', ['offset', 'dashes', 'lw'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_scale_dashes', localization, ['offset', 'dashes', 'lw'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_scale_dashes(...)' code ##################

    
    
    
    # Obtaining the type of the subscript
    unicode_70757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 20), 'unicode', u'lines.scale_dashes')
    # Getting the type of 'rcParams' (line 64)
    rcParams_70758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 64, 11), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 64)
    getitem___70759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 64, 11), rcParams_70758, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 64)
    subscript_call_result_70760 = invoke(stypy.reporting.localization.Localization(__file__, 64, 11), getitem___70759, unicode_70757)
    
    # Applying the 'not' unary operator (line 64)
    result_not__70761 = python_operator(stypy.reporting.localization.Localization(__file__, 64, 7), 'not', subscript_call_result_70760)
    
    # Testing the type of an if condition (line 64)
    if_condition_70762 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 64, 4), result_not__70761)
    # Assigning a type to the variable 'if_condition_70762' (line 64)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 64, 4), 'if_condition_70762', if_condition_70762)
    # SSA begins for if statement (line 64)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 65)
    tuple_70763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 65, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 65)
    # Adding element type (line 65)
    # Getting the type of 'offset' (line 65)
    offset_70764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 15), 'offset')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 65, 15), tuple_70763, offset_70764)
    # Adding element type (line 65)
    # Getting the type of 'dashes' (line 65)
    dashes_70765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 23), 'dashes')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 65, 15), tuple_70763, dashes_70765)
    
    # Assigning a type to the variable 'stypy_return_type' (line 65)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 65, 8), 'stypy_return_type', tuple_70763)
    # SSA join for if statement (line 64)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Multiple assignment of 2 elements.
    
    # Assigning a Name to a Name (line 67):
    # Getting the type of 'None' (line 67)
    None_70766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 36), 'None')
    # Assigning a type to the variable 'scaled_dashes' (line 67)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 67, 20), 'scaled_dashes', None_70766)
    
    # Assigning a Name to a Name (line 67):
    # Getting the type of 'scaled_dashes' (line 67)
    scaled_dashes_70767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 20), 'scaled_dashes')
    # Assigning a type to the variable 'scaled_offset' (line 67)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 67, 4), 'scaled_offset', scaled_dashes_70767)
    
    # Type idiom detected: calculating its left and rigth part (line 68)
    # Getting the type of 'offset' (line 68)
    offset_70768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 4), 'offset')
    # Getting the type of 'None' (line 68)
    None_70769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 21), 'None')
    
    (may_be_70770, more_types_in_union_70771) = may_not_be_none(offset_70768, None_70769)

    if may_be_70770:

        if more_types_in_union_70771:
            # Runtime conditional SSA (line 68)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 69):
        
        # Assigning a BinOp to a Name (line 69):
        # Getting the type of 'offset' (line 69)
        offset_70772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 24), 'offset')
        # Getting the type of 'lw' (line 69)
        lw_70773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 33), 'lw')
        # Applying the binary operator '*' (line 69)
        result_mul_70774 = python_operator(stypy.reporting.localization.Localization(__file__, 69, 24), '*', offset_70772, lw_70773)
        
        # Assigning a type to the variable 'scaled_offset' (line 69)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 69, 8), 'scaled_offset', result_mul_70774)

        if more_types_in_union_70771:
            # SSA join for if statement (line 68)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 70)
    # Getting the type of 'dashes' (line 70)
    dashes_70775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 4), 'dashes')
    # Getting the type of 'None' (line 70)
    None_70776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 21), 'None')
    
    (may_be_70777, more_types_in_union_70778) = may_not_be_none(dashes_70775, None_70776)

    if may_be_70777:

        if more_types_in_union_70778:
            # Runtime conditional SSA (line 70)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a ListComp to a Name (line 71):
        
        # Assigning a ListComp to a Name (line 71):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'dashes' (line 72)
        dashes_70787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 34), 'dashes')
        comprehension_70788 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 71, 25), dashes_70787)
        # Assigning a type to the variable 'x' (line 71)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 71, 25), 'x', comprehension_70788)
        
        
        # Getting the type of 'x' (line 71)
        x_70779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 35), 'x')
        # Getting the type of 'None' (line 71)
        None_70780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 44), 'None')
        # Applying the binary operator 'isnot' (line 71)
        result_is_not_70781 = python_operator(stypy.reporting.localization.Localization(__file__, 71, 35), 'isnot', x_70779, None_70780)
        
        # Testing the type of an if expression (line 71)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 71, 25), result_is_not_70781)
        # SSA begins for if expression (line 71)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        # Getting the type of 'x' (line 71)
        x_70782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 25), 'x')
        # Getting the type of 'lw' (line 71)
        lw_70783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 29), 'lw')
        # Applying the binary operator '*' (line 71)
        result_mul_70784 = python_operator(stypy.reporting.localization.Localization(__file__, 71, 25), '*', x_70782, lw_70783)
        
        # SSA branch for the else part of an if expression (line 71)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of 'None' (line 71)
        None_70785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 54), 'None')
        # SSA join for if expression (line 71)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_70786 = union_type.UnionType.add(result_mul_70784, None_70785)
        
        list_70789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 71, 25), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 71, 25), list_70789, if_exp_70786)
        # Assigning a type to the variable 'scaled_dashes' (line 71)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 71, 8), 'scaled_dashes', list_70789)

        if more_types_in_union_70778:
            # SSA join for if statement (line 70)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Obtaining an instance of the builtin type 'tuple' (line 74)
    tuple_70790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 74, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 74)
    # Adding element type (line 74)
    # Getting the type of 'scaled_offset' (line 74)
    scaled_offset_70791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 11), 'scaled_offset')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 74, 11), tuple_70790, scaled_offset_70791)
    # Adding element type (line 74)
    # Getting the type of 'scaled_dashes' (line 74)
    scaled_dashes_70792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 26), 'scaled_dashes')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 74, 11), tuple_70790, scaled_dashes_70792)
    
    # Assigning a type to the variable 'stypy_return_type' (line 74)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 74, 4), 'stypy_return_type', tuple_70790)
    
    # ################# End of '_scale_dashes(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_scale_dashes' in the type store
    # Getting the type of 'stypy_return_type' (line 63)
    stypy_return_type_70793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 63, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_70793)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_scale_dashes'
    return stypy_return_type_70793

# Assigning a type to the variable '_scale_dashes' (line 63)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 63, 0), '_scale_dashes', _scale_dashes)

@norecursion
def segment_hits(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'segment_hits'
    module_type_store = module_type_store.open_function_context('segment_hits', 77, 0, False)
    
    # Passed parameters checking function
    segment_hits.stypy_localization = localization
    segment_hits.stypy_type_of_self = None
    segment_hits.stypy_type_store = module_type_store
    segment_hits.stypy_function_name = 'segment_hits'
    segment_hits.stypy_param_names_list = ['cx', 'cy', 'x', 'y', 'radius']
    segment_hits.stypy_varargs_param_name = None
    segment_hits.stypy_kwargs_param_name = None
    segment_hits.stypy_call_defaults = defaults
    segment_hits.stypy_call_varargs = varargs
    segment_hits.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'segment_hits', ['cx', 'cy', 'x', 'y', 'radius'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'segment_hits', localization, ['cx', 'cy', 'x', 'y', 'radius'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'segment_hits(...)' code ##################

    unicode_70794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 82, (-1)), 'unicode', u'\n    Determine if any line segments are within radius of a\n    point. Returns the list of line segments that are within that\n    radius.\n    ')
    
    
    
    # Call to len(...): (line 84)
    # Processing the call arguments (line 84)
    # Getting the type of 'x' (line 84)
    x_70796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 11), 'x', False)
    # Processing the call keyword arguments (line 84)
    kwargs_70797 = {}
    # Getting the type of 'len' (line 84)
    len_70795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 7), 'len', False)
    # Calling len(args, kwargs) (line 84)
    len_call_result_70798 = invoke(stypy.reporting.localization.Localization(__file__, 84, 7), len_70795, *[x_70796], **kwargs_70797)
    
    int_70799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 16), 'int')
    # Applying the binary operator '<' (line 84)
    result_lt_70800 = python_operator(stypy.reporting.localization.Localization(__file__, 84, 7), '<', len_call_result_70798, int_70799)
    
    # Testing the type of an if condition (line 84)
    if_condition_70801 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 84, 4), result_lt_70800)
    # Assigning a type to the variable 'if_condition_70801' (line 84)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 4), 'if_condition_70801', if_condition_70801)
    # SSA begins for if statement (line 84)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 85):
    
    # Assigning a Call to a Name:
    
    # Call to nonzero(...): (line 85)
    # Processing the call arguments (line 85)
    
    # Getting the type of 'cx' (line 85)
    cx_70804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 27), 'cx', False)
    # Getting the type of 'x' (line 85)
    x_70805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 32), 'x', False)
    # Applying the binary operator '-' (line 85)
    result_sub_70806 = python_operator(stypy.reporting.localization.Localization(__file__, 85, 27), '-', cx_70804, x_70805)
    
    int_70807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 38), 'int')
    # Applying the binary operator '**' (line 85)
    result_pow_70808 = python_operator(stypy.reporting.localization.Localization(__file__, 85, 26), '**', result_sub_70806, int_70807)
    
    # Getting the type of 'cy' (line 85)
    cy_70809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 43), 'cy', False)
    # Getting the type of 'y' (line 85)
    y_70810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 48), 'y', False)
    # Applying the binary operator '-' (line 85)
    result_sub_70811 = python_operator(stypy.reporting.localization.Localization(__file__, 85, 43), '-', cy_70809, y_70810)
    
    int_70812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 54), 'int')
    # Applying the binary operator '**' (line 85)
    result_pow_70813 = python_operator(stypy.reporting.localization.Localization(__file__, 85, 42), '**', result_sub_70811, int_70812)
    
    # Applying the binary operator '+' (line 85)
    result_add_70814 = python_operator(stypy.reporting.localization.Localization(__file__, 85, 26), '+', result_pow_70808, result_pow_70813)
    
    # Getting the type of 'radius' (line 85)
    radius_70815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 59), 'radius', False)
    int_70816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 69), 'int')
    # Applying the binary operator '**' (line 85)
    result_pow_70817 = python_operator(stypy.reporting.localization.Localization(__file__, 85, 59), '**', radius_70815, int_70816)
    
    # Applying the binary operator '<=' (line 85)
    result_le_70818 = python_operator(stypy.reporting.localization.Localization(__file__, 85, 26), '<=', result_add_70814, result_pow_70817)
    
    # Processing the call keyword arguments (line 85)
    kwargs_70819 = {}
    # Getting the type of 'np' (line 85)
    np_70802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 15), 'np', False)
    # Obtaining the member 'nonzero' of a type (line 85)
    nonzero_70803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 85, 15), np_70802, 'nonzero')
    # Calling nonzero(args, kwargs) (line 85)
    nonzero_call_result_70820 = invoke(stypy.reporting.localization.Localization(__file__, 85, 15), nonzero_70803, *[result_le_70818], **kwargs_70819)
    
    # Assigning a type to the variable 'call_assignment_70589' (line 85)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 8), 'call_assignment_70589', nonzero_call_result_70820)
    
    # Assigning a Call to a Name (line 85):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_70823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 8), 'int')
    # Processing the call keyword arguments
    kwargs_70824 = {}
    # Getting the type of 'call_assignment_70589' (line 85)
    call_assignment_70589_70821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 8), 'call_assignment_70589', False)
    # Obtaining the member '__getitem__' of a type (line 85)
    getitem___70822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 85, 8), call_assignment_70589_70821, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_70825 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___70822, *[int_70823], **kwargs_70824)
    
    # Assigning a type to the variable 'call_assignment_70590' (line 85)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 8), 'call_assignment_70590', getitem___call_result_70825)
    
    # Assigning a Name to a Name (line 85):
    # Getting the type of 'call_assignment_70590' (line 85)
    call_assignment_70590_70826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 8), 'call_assignment_70590')
    # Assigning a type to the variable 'res' (line 85)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 8), 'res', call_assignment_70590_70826)
    # Getting the type of 'res' (line 86)
    res_70827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 15), 'res')
    # Assigning a type to the variable 'stypy_return_type' (line 86)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 86, 8), 'stypy_return_type', res_70827)
    # SSA join for if statement (line 84)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Tuple to a Tuple (line 89):
    
    # Assigning a Subscript to a Name (line 89):
    
    # Obtaining the type of the subscript
    int_70828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, 16), 'int')
    slice_70829 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 89, 13), None, int_70828, None)
    # Getting the type of 'x' (line 89)
    x_70830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 13), 'x')
    # Obtaining the member '__getitem__' of a type (line 89)
    getitem___70831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 89, 13), x_70830, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 89)
    subscript_call_result_70832 = invoke(stypy.reporting.localization.Localization(__file__, 89, 13), getitem___70831, slice_70829)
    
    # Assigning a type to the variable 'tuple_assignment_70591' (line 89)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 89, 4), 'tuple_assignment_70591', subscript_call_result_70832)
    
    # Assigning a Subscript to a Name (line 89):
    
    # Obtaining the type of the subscript
    int_70833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, 24), 'int')
    slice_70834 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 89, 21), None, int_70833, None)
    # Getting the type of 'y' (line 89)
    y_70835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 21), 'y')
    # Obtaining the member '__getitem__' of a type (line 89)
    getitem___70836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 89, 21), y_70835, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 89)
    subscript_call_result_70837 = invoke(stypy.reporting.localization.Localization(__file__, 89, 21), getitem___70836, slice_70834)
    
    # Assigning a type to the variable 'tuple_assignment_70592' (line 89)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 89, 4), 'tuple_assignment_70592', subscript_call_result_70837)
    
    # Assigning a Name to a Name (line 89):
    # Getting the type of 'tuple_assignment_70591' (line 89)
    tuple_assignment_70591_70838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 4), 'tuple_assignment_70591')
    # Assigning a type to the variable 'xr' (line 89)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 89, 4), 'xr', tuple_assignment_70591_70838)
    
    # Assigning a Name to a Name (line 89):
    # Getting the type of 'tuple_assignment_70592' (line 89)
    tuple_assignment_70592_70839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 4), 'tuple_assignment_70592')
    # Assigning a type to the variable 'yr' (line 89)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 89, 8), 'yr', tuple_assignment_70592_70839)
    
    # Assigning a Tuple to a Tuple (line 93):
    
    # Assigning a BinOp to a Name (line 93):
    
    # Obtaining the type of the subscript
    int_70840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, 15), 'int')
    slice_70841 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 93, 13), int_70840, None, None)
    # Getting the type of 'x' (line 93)
    x_70842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 13), 'x')
    # Obtaining the member '__getitem__' of a type (line 93)
    getitem___70843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 93, 13), x_70842, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 93)
    subscript_call_result_70844 = invoke(stypy.reporting.localization.Localization(__file__, 93, 13), getitem___70843, slice_70841)
    
    # Getting the type of 'xr' (line 93)
    xr_70845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 21), 'xr')
    # Applying the binary operator '-' (line 93)
    result_sub_70846 = python_operator(stypy.reporting.localization.Localization(__file__, 93, 13), '-', subscript_call_result_70844, xr_70845)
    
    # Assigning a type to the variable 'tuple_assignment_70593' (line 93)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 93, 4), 'tuple_assignment_70593', result_sub_70846)
    
    # Assigning a BinOp to a Name (line 93):
    
    # Obtaining the type of the subscript
    int_70847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, 27), 'int')
    slice_70848 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 93, 25), int_70847, None, None)
    # Getting the type of 'y' (line 93)
    y_70849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 25), 'y')
    # Obtaining the member '__getitem__' of a type (line 93)
    getitem___70850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 93, 25), y_70849, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 93)
    subscript_call_result_70851 = invoke(stypy.reporting.localization.Localization(__file__, 93, 25), getitem___70850, slice_70848)
    
    # Getting the type of 'yr' (line 93)
    yr_70852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 33), 'yr')
    # Applying the binary operator '-' (line 93)
    result_sub_70853 = python_operator(stypy.reporting.localization.Localization(__file__, 93, 25), '-', subscript_call_result_70851, yr_70852)
    
    # Assigning a type to the variable 'tuple_assignment_70594' (line 93)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 93, 4), 'tuple_assignment_70594', result_sub_70853)
    
    # Assigning a Name to a Name (line 93):
    # Getting the type of 'tuple_assignment_70593' (line 93)
    tuple_assignment_70593_70854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 4), 'tuple_assignment_70593')
    # Assigning a type to the variable 'dx' (line 93)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 93, 4), 'dx', tuple_assignment_70593_70854)
    
    # Assigning a Name to a Name (line 93):
    # Getting the type of 'tuple_assignment_70594' (line 93)
    tuple_assignment_70594_70855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 4), 'tuple_assignment_70594')
    # Assigning a type to the variable 'dy' (line 93)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 93, 8), 'dy', tuple_assignment_70594_70855)
    
    # Assigning a BinOp to a Name (line 94):
    
    # Assigning a BinOp to a Name (line 94):
    # Getting the type of 'dx' (line 94)
    dx_70856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 15), 'dx')
    int_70857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 21), 'int')
    # Applying the binary operator '**' (line 94)
    result_pow_70858 = python_operator(stypy.reporting.localization.Localization(__file__, 94, 15), '**', dx_70856, int_70857)
    
    # Getting the type of 'dy' (line 94)
    dy_70859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 25), 'dy')
    int_70860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 31), 'int')
    # Applying the binary operator '**' (line 94)
    result_pow_70861 = python_operator(stypy.reporting.localization.Localization(__file__, 94, 25), '**', dy_70859, int_70860)
    
    # Applying the binary operator '+' (line 94)
    result_add_70862 = python_operator(stypy.reporting.localization.Localization(__file__, 94, 15), '+', result_pow_70858, result_pow_70861)
    
    # Assigning a type to the variable 'Lnorm_sq' (line 94)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 94, 4), 'Lnorm_sq', result_add_70862)
    
    # Assigning a BinOp to a Name (line 95):
    
    # Assigning a BinOp to a Name (line 95):
    # Getting the type of 'cx' (line 95)
    cx_70863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 10), 'cx')
    # Getting the type of 'xr' (line 95)
    xr_70864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 15), 'xr')
    # Applying the binary operator '-' (line 95)
    result_sub_70865 = python_operator(stypy.reporting.localization.Localization(__file__, 95, 10), '-', cx_70863, xr_70864)
    
    # Getting the type of 'dx' (line 95)
    dx_70866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 21), 'dx')
    # Applying the binary operator '*' (line 95)
    result_mul_70867 = python_operator(stypy.reporting.localization.Localization(__file__, 95, 9), '*', result_sub_70865, dx_70866)
    
    # Getting the type of 'cy' (line 95)
    cy_70868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 27), 'cy')
    # Getting the type of 'yr' (line 95)
    yr_70869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 32), 'yr')
    # Applying the binary operator '-' (line 95)
    result_sub_70870 = python_operator(stypy.reporting.localization.Localization(__file__, 95, 27), '-', cy_70868, yr_70869)
    
    # Getting the type of 'dy' (line 95)
    dy_70871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 38), 'dy')
    # Applying the binary operator '*' (line 95)
    result_mul_70872 = python_operator(stypy.reporting.localization.Localization(__file__, 95, 26), '*', result_sub_70870, dy_70871)
    
    # Applying the binary operator '+' (line 95)
    result_add_70873 = python_operator(stypy.reporting.localization.Localization(__file__, 95, 9), '+', result_mul_70867, result_mul_70872)
    
    # Getting the type of 'Lnorm_sq' (line 95)
    Lnorm_sq_70874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 44), 'Lnorm_sq')
    # Applying the binary operator 'div' (line 95)
    result_div_70875 = python_operator(stypy.reporting.localization.Localization(__file__, 95, 8), 'div', result_add_70873, Lnorm_sq_70874)
    
    # Assigning a type to the variable 'u' (line 95)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 4), 'u', result_div_70875)
    
    # Assigning a BinOp to a Name (line 96):
    
    # Assigning a BinOp to a Name (line 96):
    
    # Getting the type of 'u' (line 96)
    u_70876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 18), 'u')
    int_70877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 23), 'int')
    # Applying the binary operator '>=' (line 96)
    result_ge_70878 = python_operator(stypy.reporting.localization.Localization(__file__, 96, 18), '>=', u_70876, int_70877)
    
    
    # Getting the type of 'u' (line 96)
    u_70879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 29), 'u')
    int_70880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 34), 'int')
    # Applying the binary operator '<=' (line 96)
    result_le_70881 = python_operator(stypy.reporting.localization.Localization(__file__, 96, 29), '<=', u_70879, int_70880)
    
    # Applying the binary operator '&' (line 96)
    result_and__70882 = python_operator(stypy.reporting.localization.Localization(__file__, 96, 17), '&', result_ge_70878, result_le_70881)
    
    # Assigning a type to the variable 'candidates' (line 96)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 4), 'candidates', result_and__70882)
    
    # Assigning a Compare to a Name (line 103):
    
    # Assigning a Compare to a Name (line 103):
    
    # Getting the type of 'cx' (line 103)
    cx_70883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 18), 'cx')
    # Getting the type of 'x' (line 103)
    x_70884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 23), 'x')
    # Applying the binary operator '-' (line 103)
    result_sub_70885 = python_operator(stypy.reporting.localization.Localization(__file__, 103, 18), '-', cx_70883, x_70884)
    
    int_70886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 29), 'int')
    # Applying the binary operator '**' (line 103)
    result_pow_70887 = python_operator(stypy.reporting.localization.Localization(__file__, 103, 17), '**', result_sub_70885, int_70886)
    
    # Getting the type of 'cy' (line 103)
    cy_70888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 34), 'cy')
    # Getting the type of 'y' (line 103)
    y_70889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 39), 'y')
    # Applying the binary operator '-' (line 103)
    result_sub_70890 = python_operator(stypy.reporting.localization.Localization(__file__, 103, 34), '-', cy_70888, y_70889)
    
    int_70891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 45), 'int')
    # Applying the binary operator '**' (line 103)
    result_pow_70892 = python_operator(stypy.reporting.localization.Localization(__file__, 103, 33), '**', result_sub_70890, int_70891)
    
    # Applying the binary operator '+' (line 103)
    result_add_70893 = python_operator(stypy.reporting.localization.Localization(__file__, 103, 17), '+', result_pow_70887, result_pow_70892)
    
    # Getting the type of 'radius' (line 103)
    radius_70894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 50), 'radius')
    int_70895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 60), 'int')
    # Applying the binary operator '**' (line 103)
    result_pow_70896 = python_operator(stypy.reporting.localization.Localization(__file__, 103, 50), '**', radius_70894, int_70895)
    
    # Applying the binary operator '<=' (line 103)
    result_le_70897 = python_operator(stypy.reporting.localization.Localization(__file__, 103, 17), '<=', result_add_70893, result_pow_70896)
    
    # Assigning a type to the variable 'point_hits' (line 103)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 103, 4), 'point_hits', result_le_70897)
    
    # Assigning a BinOp to a Name (line 105):
    
    # Assigning a BinOp to a Name (line 105):
    # Getting the type of 'candidates' (line 105)
    candidates_70898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 17), 'candidates')
    
    
    # Obtaining the type of the subscript
    int_70899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 44), 'int')
    slice_70900 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 105, 32), None, int_70899, None)
    # Getting the type of 'point_hits' (line 105)
    point_hits_70901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 32), 'point_hits')
    # Obtaining the member '__getitem__' of a type (line 105)
    getitem___70902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 32), point_hits_70901, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 105)
    subscript_call_result_70903 = invoke(stypy.reporting.localization.Localization(__file__, 105, 32), getitem___70902, slice_70900)
    
    
    # Obtaining the type of the subscript
    int_70904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 61), 'int')
    slice_70905 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 105, 50), int_70904, None, None)
    # Getting the type of 'point_hits' (line 105)
    point_hits_70906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 50), 'point_hits')
    # Obtaining the member '__getitem__' of a type (line 105)
    getitem___70907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 50), point_hits_70906, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 105)
    subscript_call_result_70908 = invoke(stypy.reporting.localization.Localization(__file__, 105, 50), getitem___70907, slice_70905)
    
    # Applying the binary operator '|' (line 105)
    result_or__70909 = python_operator(stypy.reporting.localization.Localization(__file__, 105, 32), '|', subscript_call_result_70903, subscript_call_result_70908)
    
    # Applying the '~' unary operator (line 105)
    result_inv_70910 = python_operator(stypy.reporting.localization.Localization(__file__, 105, 30), '~', result_or__70909)
    
    # Applying the binary operator '&' (line 105)
    result_and__70911 = python_operator(stypy.reporting.localization.Localization(__file__, 105, 17), '&', candidates_70898, result_inv_70910)
    
    # Assigning a type to the variable 'candidates' (line 105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 105, 4), 'candidates', result_and__70911)
    
    # Assigning a Tuple to a Tuple (line 109):
    
    # Assigning a BinOp to a Name (line 109):
    # Getting the type of 'xr' (line 109)
    xr_70912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 13), 'xr')
    # Getting the type of 'u' (line 109)
    u_70913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 18), 'u')
    # Getting the type of 'dx' (line 109)
    dx_70914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 22), 'dx')
    # Applying the binary operator '*' (line 109)
    result_mul_70915 = python_operator(stypy.reporting.localization.Localization(__file__, 109, 18), '*', u_70913, dx_70914)
    
    # Applying the binary operator '+' (line 109)
    result_add_70916 = python_operator(stypy.reporting.localization.Localization(__file__, 109, 13), '+', xr_70912, result_mul_70915)
    
    # Assigning a type to the variable 'tuple_assignment_70595' (line 109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 109, 4), 'tuple_assignment_70595', result_add_70916)
    
    # Assigning a BinOp to a Name (line 109):
    # Getting the type of 'yr' (line 109)
    yr_70917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 26), 'yr')
    # Getting the type of 'u' (line 109)
    u_70918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 31), 'u')
    # Getting the type of 'dy' (line 109)
    dy_70919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 35), 'dy')
    # Applying the binary operator '*' (line 109)
    result_mul_70920 = python_operator(stypy.reporting.localization.Localization(__file__, 109, 31), '*', u_70918, dy_70919)
    
    # Applying the binary operator '+' (line 109)
    result_add_70921 = python_operator(stypy.reporting.localization.Localization(__file__, 109, 26), '+', yr_70917, result_mul_70920)
    
    # Assigning a type to the variable 'tuple_assignment_70596' (line 109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 109, 4), 'tuple_assignment_70596', result_add_70921)
    
    # Assigning a Name to a Name (line 109):
    # Getting the type of 'tuple_assignment_70595' (line 109)
    tuple_assignment_70595_70922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 4), 'tuple_assignment_70595')
    # Assigning a type to the variable 'px' (line 109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 109, 4), 'px', tuple_assignment_70595_70922)
    
    # Assigning a Name to a Name (line 109):
    # Getting the type of 'tuple_assignment_70596' (line 109)
    tuple_assignment_70596_70923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 4), 'tuple_assignment_70596')
    # Assigning a type to the variable 'py' (line 109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 109, 8), 'py', tuple_assignment_70596_70923)
    
    # Assigning a Compare to a Name (line 110):
    
    # Assigning a Compare to a Name (line 110):
    
    # Getting the type of 'cx' (line 110)
    cx_70924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 17), 'cx')
    # Getting the type of 'px' (line 110)
    px_70925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 22), 'px')
    # Applying the binary operator '-' (line 110)
    result_sub_70926 = python_operator(stypy.reporting.localization.Localization(__file__, 110, 17), '-', cx_70924, px_70925)
    
    int_70927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 110, 29), 'int')
    # Applying the binary operator '**' (line 110)
    result_pow_70928 = python_operator(stypy.reporting.localization.Localization(__file__, 110, 16), '**', result_sub_70926, int_70927)
    
    # Getting the type of 'cy' (line 110)
    cy_70929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 34), 'cy')
    # Getting the type of 'py' (line 110)
    py_70930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 39), 'py')
    # Applying the binary operator '-' (line 110)
    result_sub_70931 = python_operator(stypy.reporting.localization.Localization(__file__, 110, 34), '-', cy_70929, py_70930)
    
    int_70932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 110, 46), 'int')
    # Applying the binary operator '**' (line 110)
    result_pow_70933 = python_operator(stypy.reporting.localization.Localization(__file__, 110, 33), '**', result_sub_70931, int_70932)
    
    # Applying the binary operator '+' (line 110)
    result_add_70934 = python_operator(stypy.reporting.localization.Localization(__file__, 110, 16), '+', result_pow_70928, result_pow_70933)
    
    # Getting the type of 'radius' (line 110)
    radius_70935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 51), 'radius')
    int_70936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 110, 61), 'int')
    # Applying the binary operator '**' (line 110)
    result_pow_70937 = python_operator(stypy.reporting.localization.Localization(__file__, 110, 51), '**', radius_70935, int_70936)
    
    # Applying the binary operator '<=' (line 110)
    result_le_70938 = python_operator(stypy.reporting.localization.Localization(__file__, 110, 16), '<=', result_add_70934, result_pow_70937)
    
    # Assigning a type to the variable 'line_hits' (line 110)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 110, 4), 'line_hits', result_le_70938)
    
    # Assigning a BinOp to a Name (line 112):
    
    # Assigning a BinOp to a Name (line 112):
    # Getting the type of 'line_hits' (line 112)
    line_hits_70939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 16), 'line_hits')
    # Getting the type of 'candidates' (line 112)
    candidates_70940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 28), 'candidates')
    # Applying the binary operator '&' (line 112)
    result_and__70941 = python_operator(stypy.reporting.localization.Localization(__file__, 112, 16), '&', line_hits_70939, candidates_70940)
    
    # Assigning a type to the variable 'line_hits' (line 112)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 112, 4), 'line_hits', result_and__70941)
    
    # Assigning a Call to a Tuple (line 113):
    
    # Assigning a Call to a Name:
    
    # Call to nonzero(...): (line 113)
    # Processing the call keyword arguments (line 113)
    kwargs_70947 = {}
    
    # Call to ravel(...): (line 113)
    # Processing the call keyword arguments (line 113)
    kwargs_70944 = {}
    # Getting the type of 'point_hits' (line 113)
    point_hits_70942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 14), 'point_hits', False)
    # Obtaining the member 'ravel' of a type (line 113)
    ravel_70943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 14), point_hits_70942, 'ravel')
    # Calling ravel(args, kwargs) (line 113)
    ravel_call_result_70945 = invoke(stypy.reporting.localization.Localization(__file__, 113, 14), ravel_70943, *[], **kwargs_70944)
    
    # Obtaining the member 'nonzero' of a type (line 113)
    nonzero_70946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 14), ravel_call_result_70945, 'nonzero')
    # Calling nonzero(args, kwargs) (line 113)
    nonzero_call_result_70948 = invoke(stypy.reporting.localization.Localization(__file__, 113, 14), nonzero_70946, *[], **kwargs_70947)
    
    # Assigning a type to the variable 'call_assignment_70597' (line 113)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 4), 'call_assignment_70597', nonzero_call_result_70948)
    
    # Assigning a Call to a Name (line 113):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_70951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 4), 'int')
    # Processing the call keyword arguments
    kwargs_70952 = {}
    # Getting the type of 'call_assignment_70597' (line 113)
    call_assignment_70597_70949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 4), 'call_assignment_70597', False)
    # Obtaining the member '__getitem__' of a type (line 113)
    getitem___70950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 4), call_assignment_70597_70949, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_70953 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___70950, *[int_70951], **kwargs_70952)
    
    # Assigning a type to the variable 'call_assignment_70598' (line 113)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 4), 'call_assignment_70598', getitem___call_result_70953)
    
    # Assigning a Name to a Name (line 113):
    # Getting the type of 'call_assignment_70598' (line 113)
    call_assignment_70598_70954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 4), 'call_assignment_70598')
    # Assigning a type to the variable 'points' (line 113)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 4), 'points', call_assignment_70598_70954)
    
    # Assigning a Call to a Tuple (line 114):
    
    # Assigning a Call to a Name:
    
    # Call to nonzero(...): (line 114)
    # Processing the call keyword arguments (line 114)
    kwargs_70960 = {}
    
    # Call to ravel(...): (line 114)
    # Processing the call keyword arguments (line 114)
    kwargs_70957 = {}
    # Getting the type of 'line_hits' (line 114)
    line_hits_70955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 13), 'line_hits', False)
    # Obtaining the member 'ravel' of a type (line 114)
    ravel_70956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 114, 13), line_hits_70955, 'ravel')
    # Calling ravel(args, kwargs) (line 114)
    ravel_call_result_70958 = invoke(stypy.reporting.localization.Localization(__file__, 114, 13), ravel_70956, *[], **kwargs_70957)
    
    # Obtaining the member 'nonzero' of a type (line 114)
    nonzero_70959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 114, 13), ravel_call_result_70958, 'nonzero')
    # Calling nonzero(args, kwargs) (line 114)
    nonzero_call_result_70961 = invoke(stypy.reporting.localization.Localization(__file__, 114, 13), nonzero_70959, *[], **kwargs_70960)
    
    # Assigning a type to the variable 'call_assignment_70599' (line 114)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 114, 4), 'call_assignment_70599', nonzero_call_result_70961)
    
    # Assigning a Call to a Name (line 114):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_70964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 114, 4), 'int')
    # Processing the call keyword arguments
    kwargs_70965 = {}
    # Getting the type of 'call_assignment_70599' (line 114)
    call_assignment_70599_70962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 4), 'call_assignment_70599', False)
    # Obtaining the member '__getitem__' of a type (line 114)
    getitem___70963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 114, 4), call_assignment_70599_70962, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_70966 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___70963, *[int_70964], **kwargs_70965)
    
    # Assigning a type to the variable 'call_assignment_70600' (line 114)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 114, 4), 'call_assignment_70600', getitem___call_result_70966)
    
    # Assigning a Name to a Name (line 114):
    # Getting the type of 'call_assignment_70600' (line 114)
    call_assignment_70600_70967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 4), 'call_assignment_70600')
    # Assigning a type to the variable 'lines' (line 114)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 114, 4), 'lines', call_assignment_70600_70967)
    
    # Call to concatenate(...): (line 116)
    # Processing the call arguments (line 116)
    
    # Obtaining an instance of the builtin type 'tuple' (line 116)
    tuple_70970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 116, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 116)
    # Adding element type (line 116)
    # Getting the type of 'points' (line 116)
    points_70971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 27), 'points', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 27), tuple_70970, points_70971)
    # Adding element type (line 116)
    # Getting the type of 'lines' (line 116)
    lines_70972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 35), 'lines', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 116, 27), tuple_70970, lines_70972)
    
    # Processing the call keyword arguments (line 116)
    kwargs_70973 = {}
    # Getting the type of 'np' (line 116)
    np_70968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 11), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 116)
    concatenate_70969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 116, 11), np_70968, 'concatenate')
    # Calling concatenate(args, kwargs) (line 116)
    concatenate_call_result_70974 = invoke(stypy.reporting.localization.Localization(__file__, 116, 11), concatenate_70969, *[tuple_70970], **kwargs_70973)
    
    # Assigning a type to the variable 'stypy_return_type' (line 116)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 116, 4), 'stypy_return_type', concatenate_call_result_70974)
    
    # ################# End of 'segment_hits(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'segment_hits' in the type store
    # Getting the type of 'stypy_return_type' (line 77)
    stypy_return_type_70975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_70975)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'segment_hits'
    return stypy_return_type_70975

# Assigning a type to the variable 'segment_hits' (line 77)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 77, 0), 'segment_hits', segment_hits)

@norecursion
def _mark_every_path(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_mark_every_path'
    module_type_store = module_type_store.open_function_context('_mark_every_path', 119, 0, False)
    
    # Passed parameters checking function
    _mark_every_path.stypy_localization = localization
    _mark_every_path.stypy_type_of_self = None
    _mark_every_path.stypy_type_store = module_type_store
    _mark_every_path.stypy_function_name = '_mark_every_path'
    _mark_every_path.stypy_param_names_list = ['markevery', 'tpath', 'affine', 'ax_transform']
    _mark_every_path.stypy_varargs_param_name = None
    _mark_every_path.stypy_kwargs_param_name = None
    _mark_every_path.stypy_call_defaults = defaults
    _mark_every_path.stypy_call_varargs = varargs
    _mark_every_path.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_mark_every_path', ['markevery', 'tpath', 'affine', 'ax_transform'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_mark_every_path', localization, ['markevery', 'tpath', 'affine', 'ax_transform'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_mark_every_path(...)' code ##################

    unicode_70976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, (-1)), 'unicode', u'\n    Helper function that sorts out how to deal the input\n    `markevery` and returns the points where markers should be drawn.\n\n    Takes in the `markevery` value and the line path and returns the\n    sub-sampled path.\n    ')
    
    # Assigning a Tuple to a Tuple (line 128):
    
    # Assigning a Attribute to a Name (line 128):
    # Getting the type of 'tpath' (line 128)
    tpath_70977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 19), 'tpath')
    # Obtaining the member 'codes' of a type (line 128)
    codes_70978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 128, 19), tpath_70977, 'codes')
    # Assigning a type to the variable 'tuple_assignment_70601' (line 128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 128, 4), 'tuple_assignment_70601', codes_70978)
    
    # Assigning a Attribute to a Name (line 128):
    # Getting the type of 'tpath' (line 128)
    tpath_70979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 32), 'tpath')
    # Obtaining the member 'vertices' of a type (line 128)
    vertices_70980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 128, 32), tpath_70979, 'vertices')
    # Assigning a type to the variable 'tuple_assignment_70602' (line 128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 128, 4), 'tuple_assignment_70602', vertices_70980)
    
    # Assigning a Name to a Name (line 128):
    # Getting the type of 'tuple_assignment_70601' (line 128)
    tuple_assignment_70601_70981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 4), 'tuple_assignment_70601')
    # Assigning a type to the variable 'codes' (line 128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 128, 4), 'codes', tuple_assignment_70601_70981)
    
    # Assigning a Name to a Name (line 128):
    # Getting the type of 'tuple_assignment_70602' (line 128)
    tuple_assignment_70602_70982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 4), 'tuple_assignment_70602')
    # Assigning a type to the variable 'verts' (line 128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 128, 11), 'verts', tuple_assignment_70602_70982)

    @norecursion
    def _slice_or_none(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_slice_or_none'
        module_type_store = module_type_store.open_function_context('_slice_or_none', 130, 4, False)
        
        # Passed parameters checking function
        _slice_or_none.stypy_localization = localization
        _slice_or_none.stypy_type_of_self = None
        _slice_or_none.stypy_type_store = module_type_store
        _slice_or_none.stypy_function_name = '_slice_or_none'
        _slice_or_none.stypy_param_names_list = ['in_v', 'slc']
        _slice_or_none.stypy_varargs_param_name = None
        _slice_or_none.stypy_kwargs_param_name = None
        _slice_or_none.stypy_call_defaults = defaults
        _slice_or_none.stypy_call_varargs = varargs
        _slice_or_none.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_slice_or_none', ['in_v', 'slc'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_slice_or_none', localization, ['in_v', 'slc'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_slice_or_none(...)' code ##################

        unicode_70983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 134, (-1)), 'unicode', u'\n        Helper function to cope with `codes` being an\n        ndarray or `None`\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 135)
        # Getting the type of 'in_v' (line 135)
        in_v_70984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 11), 'in_v')
        # Getting the type of 'None' (line 135)
        None_70985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 19), 'None')
        
        (may_be_70986, more_types_in_union_70987) = may_be_none(in_v_70984, None_70985)

        if may_be_70986:

            if more_types_in_union_70987:
                # Runtime conditional SSA (line 135)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'None' (line 136)
            None_70988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 19), 'None')
            # Assigning a type to the variable 'stypy_return_type' (line 136)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 12), 'stypy_return_type', None_70988)

            if more_types_in_union_70987:
                # SSA join for if statement (line 135)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Obtaining the type of the subscript
        # Getting the type of 'slc' (line 137)
        slc_70989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 20), 'slc')
        # Getting the type of 'in_v' (line 137)
        in_v_70990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 15), 'in_v')
        # Obtaining the member '__getitem__' of a type (line 137)
        getitem___70991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 137, 15), in_v_70990, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 137)
        subscript_call_result_70992 = invoke(stypy.reporting.localization.Localization(__file__, 137, 15), getitem___70991, slc_70989)
        
        # Assigning a type to the variable 'stypy_return_type' (line 137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 8), 'stypy_return_type', subscript_call_result_70992)
        
        # ################# End of '_slice_or_none(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_slice_or_none' in the type store
        # Getting the type of 'stypy_return_type' (line 130)
        stypy_return_type_70993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_70993)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_slice_or_none'
        return stypy_return_type_70993

    # Assigning a type to the variable '_slice_or_none' (line 130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 4), '_slice_or_none', _slice_or_none)
    
    # Type idiom detected: calculating its left and rigth part (line 140)
    # Getting the type of 'float' (line 140)
    float_70994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 29), 'float')
    # Getting the type of 'markevery' (line 140)
    markevery_70995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 18), 'markevery')
    
    (may_be_70996, more_types_in_union_70997) = may_be_subtype(float_70994, markevery_70995)

    if may_be_70996:

        if more_types_in_union_70997:
            # Runtime conditional SSA (line 140)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'markevery' (line 140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 140, 4), 'markevery', remove_not_subtype_from_union(markevery_70995, float))
        
        # Assigning a Tuple to a Name (line 141):
        
        # Assigning a Tuple to a Name (line 141):
        
        # Obtaining an instance of the builtin type 'tuple' (line 141)
        tuple_70998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 141)
        # Adding element type (line 141)
        float_70999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, 21), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 141, 21), tuple_70998, float_70999)
        # Adding element type (line 141)
        # Getting the type of 'markevery' (line 141)
        markevery_71000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 26), 'markevery')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 141, 21), tuple_70998, markevery_71000)
        
        # Assigning a type to the variable 'markevery' (line 141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 141, 8), 'markevery', tuple_70998)

        if more_types_in_union_70997:
            # Runtime conditional SSA for else branch (line 140)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_70996) or more_types_in_union_70997):
        # Assigning a type to the variable 'markevery' (line 140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 140, 4), 'markevery', remove_subtype_from_union(markevery_70995, float))
        
        # Type idiom detected: calculating its left and rigth part (line 143)
        # Getting the type of 'int' (line 143)
        int_71001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 31), 'int')
        # Getting the type of 'markevery' (line 143)
        markevery_71002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 20), 'markevery')
        
        (may_be_71003, more_types_in_union_71004) = may_be_subtype(int_71001, markevery_71002)

        if may_be_71003:

            if more_types_in_union_71004:
                # Runtime conditional SSA (line 143)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'markevery' (line 143)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 143, 9), 'markevery', remove_not_subtype_from_union(markevery_71002, int))
            
            # Assigning a Tuple to a Name (line 144):
            
            # Assigning a Tuple to a Name (line 144):
            
            # Obtaining an instance of the builtin type 'tuple' (line 144)
            tuple_71005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 144, 21), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 144)
            # Adding element type (line 144)
            int_71006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 144, 21), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 144, 21), tuple_71005, int_71006)
            # Adding element type (line 144)
            # Getting the type of 'markevery' (line 144)
            markevery_71007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 24), 'markevery')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 144, 21), tuple_71005, markevery_71007)
            
            # Assigning a type to the variable 'markevery' (line 144)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 144, 8), 'markevery', tuple_71005)

            if more_types_in_union_71004:
                # Runtime conditional SSA for else branch (line 143)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_71003) or more_types_in_union_71004):
            # Assigning a type to the variable 'markevery' (line 143)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 143, 9), 'markevery', remove_subtype_from_union(markevery_71002, int))
            
            
            # Call to isinstance(...): (line 146)
            # Processing the call arguments (line 146)
            # Getting the type of 'markevery' (line 146)
            markevery_71009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 20), 'markevery', False)
            # Getting the type of 'np' (line 146)
            np_71010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 31), 'np', False)
            # Obtaining the member 'integer' of a type (line 146)
            integer_71011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 31), np_71010, 'integer')
            # Processing the call keyword arguments (line 146)
            kwargs_71012 = {}
            # Getting the type of 'isinstance' (line 146)
            isinstance_71008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 9), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 146)
            isinstance_call_result_71013 = invoke(stypy.reporting.localization.Localization(__file__, 146, 9), isinstance_71008, *[markevery_71009, integer_71011], **kwargs_71012)
            
            # Testing the type of an if condition (line 146)
            if_condition_71014 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 146, 9), isinstance_call_result_71013)
            # Assigning a type to the variable 'if_condition_71014' (line 146)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 146, 9), 'if_condition_71014', if_condition_71014)
            # SSA begins for if statement (line 146)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Name (line 147):
            
            # Assigning a Tuple to a Name (line 147):
            
            # Obtaining an instance of the builtin type 'tuple' (line 147)
            tuple_71015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 21), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 147)
            # Adding element type (line 147)
            int_71016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 21), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 147, 21), tuple_71015, int_71016)
            # Adding element type (line 147)
            
            # Call to item(...): (line 147)
            # Processing the call keyword arguments (line 147)
            kwargs_71019 = {}
            # Getting the type of 'markevery' (line 147)
            markevery_71017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 24), 'markevery', False)
            # Obtaining the member 'item' of a type (line 147)
            item_71018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 147, 24), markevery_71017, 'item')
            # Calling item(args, kwargs) (line 147)
            item_call_result_71020 = invoke(stypy.reporting.localization.Localization(__file__, 147, 24), item_71018, *[], **kwargs_71019)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 147, 21), tuple_71015, item_call_result_71020)
            
            # Assigning a type to the variable 'markevery' (line 147)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 147, 8), 'markevery', tuple_71015)
            # SSA join for if statement (line 146)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_71003 and more_types_in_union_71004):
                # SSA join for if statement (line 143)
                module_type_store = module_type_store.join_ssa_context()


        

        if (may_be_70996 and more_types_in_union_70997):
            # SSA join for if statement (line 140)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 149)
    # Getting the type of 'tuple' (line 149)
    tuple_71021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 29), 'tuple')
    # Getting the type of 'markevery' (line 149)
    markevery_71022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 18), 'markevery')
    
    (may_be_71023, more_types_in_union_71024) = may_be_subtype(tuple_71021, markevery_71022)

    if may_be_71023:

        if more_types_in_union_71024:
            # Runtime conditional SSA (line 149)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'markevery' (line 149)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 149, 4), 'markevery', remove_not_subtype_from_union(markevery_71022, tuple))
        
        
        
        # Call to len(...): (line 150)
        # Processing the call arguments (line 150)
        # Getting the type of 'markevery' (line 150)
        markevery_71026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 15), 'markevery', False)
        # Processing the call keyword arguments (line 150)
        kwargs_71027 = {}
        # Getting the type of 'len' (line 150)
        len_71025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 11), 'len', False)
        # Calling len(args, kwargs) (line 150)
        len_call_result_71028 = invoke(stypy.reporting.localization.Localization(__file__, 150, 11), len_71025, *[markevery_71026], **kwargs_71027)
        
        int_71029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 29), 'int')
        # Applying the binary operator '!=' (line 150)
        result_ne_71030 = python_operator(stypy.reporting.localization.Localization(__file__, 150, 11), '!=', len_call_result_71028, int_71029)
        
        # Testing the type of an if condition (line 150)
        if_condition_71031 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 150, 8), result_ne_71030)
        # Assigning a type to the variable 'if_condition_71031' (line 150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 150, 8), 'if_condition_71031', if_condition_71031)
        # SSA begins for if statement (line 150)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 151)
        # Processing the call arguments (line 151)
        unicode_71033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 29), 'unicode', u'`markevery` is a tuple but its len is not 2; markevery=%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 153)
        tuple_71034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 153, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 153)
        # Adding element type (line 153)
        # Getting the type of 'markevery' (line 153)
        markevery_71035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 34), 'markevery', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 153, 34), tuple_71034, markevery_71035)
        
        # Applying the binary operator '%' (line 151)
        result_mod_71036 = python_operator(stypy.reporting.localization.Localization(__file__, 151, 29), '%', unicode_71033, tuple_71034)
        
        # Processing the call keyword arguments (line 151)
        kwargs_71037 = {}
        # Getting the type of 'ValueError' (line 151)
        ValueError_71032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 151)
        ValueError_call_result_71038 = invoke(stypy.reporting.localization.Localization(__file__, 151, 18), ValueError_71032, *[result_mod_71036], **kwargs_71037)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 151, 12), ValueError_call_result_71038, 'raise parameter', BaseException)
        # SSA join for if statement (line 150)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Tuple (line 154):
        
        # Assigning a Subscript to a Name (line 154):
        
        # Obtaining the type of the subscript
        int_71039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 8), 'int')
        # Getting the type of 'markevery' (line 154)
        markevery_71040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 22), 'markevery')
        # Obtaining the member '__getitem__' of a type (line 154)
        getitem___71041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 8), markevery_71040, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 154)
        subscript_call_result_71042 = invoke(stypy.reporting.localization.Localization(__file__, 154, 8), getitem___71041, int_71039)
        
        # Assigning a type to the variable 'tuple_var_assignment_70603' (line 154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 154, 8), 'tuple_var_assignment_70603', subscript_call_result_71042)
        
        # Assigning a Subscript to a Name (line 154):
        
        # Obtaining the type of the subscript
        int_71043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 8), 'int')
        # Getting the type of 'markevery' (line 154)
        markevery_71044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 22), 'markevery')
        # Obtaining the member '__getitem__' of a type (line 154)
        getitem___71045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 8), markevery_71044, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 154)
        subscript_call_result_71046 = invoke(stypy.reporting.localization.Localization(__file__, 154, 8), getitem___71045, int_71043)
        
        # Assigning a type to the variable 'tuple_var_assignment_70604' (line 154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 154, 8), 'tuple_var_assignment_70604', subscript_call_result_71046)
        
        # Assigning a Name to a Name (line 154):
        # Getting the type of 'tuple_var_assignment_70603' (line 154)
        tuple_var_assignment_70603_71047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 8), 'tuple_var_assignment_70603')
        # Assigning a type to the variable 'start' (line 154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 154, 8), 'start', tuple_var_assignment_70603_71047)
        
        # Assigning a Name to a Name (line 154):
        # Getting the type of 'tuple_var_assignment_70604' (line 154)
        tuple_var_assignment_70604_71048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 8), 'tuple_var_assignment_70604')
        # Assigning a type to the variable 'step' (line 154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 154, 15), 'step', tuple_var_assignment_70604_71048)
        
        # Type idiom detected: calculating its left and rigth part (line 156)
        # Getting the type of 'int' (line 156)
        int_71049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 28), 'int')
        # Getting the type of 'step' (line 156)
        step_71050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 22), 'step')
        
        (may_be_71051, more_types_in_union_71052) = may_be_subtype(int_71049, step_71050)

        if may_be_71051:

            if more_types_in_union_71052:
                # Runtime conditional SSA (line 156)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'step' (line 156)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 8), 'step', remove_not_subtype_from_union(step_71050, int))
            
            # Type idiom detected: calculating its left and rigth part (line 158)
            # Getting the type of 'int' (line 158)
            int_71053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 37), 'int')
            # Getting the type of 'start' (line 158)
            start_71054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 30), 'start')
            
            (may_be_71055, more_types_in_union_71056) = may_not_be_subtype(int_71053, start_71054)

            if may_be_71055:

                if more_types_in_union_71056:
                    # Runtime conditional SSA (line 158)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Assigning a type to the variable 'start' (line 158)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 12), 'start', remove_subtype_from_union(start_71054, int))
                
                # Call to ValueError(...): (line 159)
                # Processing the call arguments (line 159)
                unicode_71058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 33), 'unicode', u'`markevery` is a tuple with len 2 and second element is an int, but the first element is not an int; markevery=%s')
                
                # Obtaining an instance of the builtin type 'tuple' (line 162)
                tuple_71059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 38), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 162)
                # Adding element type (line 162)
                # Getting the type of 'markevery' (line 162)
                markevery_71060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 38), 'markevery', False)
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 162, 38), tuple_71059, markevery_71060)
                
                # Applying the binary operator '%' (line 159)
                result_mod_71061 = python_operator(stypy.reporting.localization.Localization(__file__, 159, 33), '%', unicode_71058, tuple_71059)
                
                # Processing the call keyword arguments (line 159)
                kwargs_71062 = {}
                # Getting the type of 'ValueError' (line 159)
                ValueError_71057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 22), 'ValueError', False)
                # Calling ValueError(args, kwargs) (line 159)
                ValueError_call_result_71063 = invoke(stypy.reporting.localization.Localization(__file__, 159, 22), ValueError_71057, *[result_mod_71061], **kwargs_71062)
                
                ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 159, 16), ValueError_call_result_71063, 'raise parameter', BaseException)

                if more_types_in_union_71056:
                    # SSA join for if statement (line 158)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Call to Path(...): (line 165)
            # Processing the call arguments (line 165)
            
            # Obtaining the type of the subscript
            
            # Call to slice(...): (line 165)
            # Processing the call arguments (line 165)
            # Getting the type of 'start' (line 165)
            start_71066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 36), 'start', False)
            # Getting the type of 'None' (line 165)
            None_71067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 43), 'None', False)
            # Getting the type of 'step' (line 165)
            step_71068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 49), 'step', False)
            # Processing the call keyword arguments (line 165)
            kwargs_71069 = {}
            # Getting the type of 'slice' (line 165)
            slice_71065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 30), 'slice', False)
            # Calling slice(args, kwargs) (line 165)
            slice_call_result_71070 = invoke(stypy.reporting.localization.Localization(__file__, 165, 30), slice_71065, *[start_71066, None_71067, step_71068], **kwargs_71069)
            
            # Getting the type of 'verts' (line 165)
            verts_71071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 24), 'verts', False)
            # Obtaining the member '__getitem__' of a type (line 165)
            getitem___71072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 24), verts_71071, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 165)
            subscript_call_result_71073 = invoke(stypy.reporting.localization.Localization(__file__, 165, 24), getitem___71072, slice_call_result_71070)
            
            
            # Call to _slice_or_none(...): (line 166)
            # Processing the call arguments (line 166)
            # Getting the type of 'codes' (line 166)
            codes_71075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 39), 'codes', False)
            
            # Call to slice(...): (line 166)
            # Processing the call arguments (line 166)
            # Getting the type of 'start' (line 166)
            start_71077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 52), 'start', False)
            # Getting the type of 'None' (line 166)
            None_71078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 59), 'None', False)
            # Getting the type of 'step' (line 166)
            step_71079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 65), 'step', False)
            # Processing the call keyword arguments (line 166)
            kwargs_71080 = {}
            # Getting the type of 'slice' (line 166)
            slice_71076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 46), 'slice', False)
            # Calling slice(args, kwargs) (line 166)
            slice_call_result_71081 = invoke(stypy.reporting.localization.Localization(__file__, 166, 46), slice_71076, *[start_71077, None_71078, step_71079], **kwargs_71080)
            
            # Processing the call keyword arguments (line 166)
            kwargs_71082 = {}
            # Getting the type of '_slice_or_none' (line 166)
            _slice_or_none_71074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 24), '_slice_or_none', False)
            # Calling _slice_or_none(args, kwargs) (line 166)
            _slice_or_none_call_result_71083 = invoke(stypy.reporting.localization.Localization(__file__, 166, 24), _slice_or_none_71074, *[codes_71075, slice_call_result_71081], **kwargs_71082)
            
            # Processing the call keyword arguments (line 165)
            kwargs_71084 = {}
            # Getting the type of 'Path' (line 165)
            Path_71064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 19), 'Path', False)
            # Calling Path(args, kwargs) (line 165)
            Path_call_result_71085 = invoke(stypy.reporting.localization.Localization(__file__, 165, 19), Path_71064, *[subscript_call_result_71073, _slice_or_none_call_result_71083], **kwargs_71084)
            
            # Assigning a type to the variable 'stypy_return_type' (line 165)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 165, 12), 'stypy_return_type', Path_call_result_71085)

            if more_types_in_union_71052:
                # Runtime conditional SSA for else branch (line 156)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_71051) or more_types_in_union_71052):
            # Assigning a type to the variable 'step' (line 156)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 8), 'step', remove_subtype_from_union(step_71050, int))
            
            # Type idiom detected: calculating its left and rigth part (line 168)
            # Getting the type of 'float' (line 168)
            float_71086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 30), 'float')
            # Getting the type of 'step' (line 168)
            step_71087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 24), 'step')
            
            (may_be_71088, more_types_in_union_71089) = may_be_subtype(float_71086, step_71087)

            if may_be_71088:

                if more_types_in_union_71089:
                    # Runtime conditional SSA (line 168)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Assigning a type to the variable 'step' (line 168)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 13), 'step', remove_not_subtype_from_union(step_71087, float))
                
                
                
                # Evaluating a boolean operation
                
                # Call to isinstance(...): (line 169)
                # Processing the call arguments (line 169)
                # Getting the type of 'start' (line 169)
                start_71091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 31), 'start', False)
                # Getting the type of 'int' (line 169)
                int_71092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 38), 'int', False)
                # Processing the call keyword arguments (line 169)
                kwargs_71093 = {}
                # Getting the type of 'isinstance' (line 169)
                isinstance_71090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 20), 'isinstance', False)
                # Calling isinstance(args, kwargs) (line 169)
                isinstance_call_result_71094 = invoke(stypy.reporting.localization.Localization(__file__, 169, 20), isinstance_71090, *[start_71091, int_71092], **kwargs_71093)
                
                
                # Call to isinstance(...): (line 170)
                # Processing the call arguments (line 170)
                # Getting the type of 'start' (line 170)
                start_71096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 31), 'start', False)
                # Getting the type of 'float' (line 170)
                float_71097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 38), 'float', False)
                # Processing the call keyword arguments (line 170)
                kwargs_71098 = {}
                # Getting the type of 'isinstance' (line 170)
                isinstance_71095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 20), 'isinstance', False)
                # Calling isinstance(args, kwargs) (line 170)
                isinstance_call_result_71099 = invoke(stypy.reporting.localization.Localization(__file__, 170, 20), isinstance_71095, *[start_71096, float_71097], **kwargs_71098)
                
                # Applying the binary operator 'or' (line 169)
                result_or_keyword_71100 = python_operator(stypy.reporting.localization.Localization(__file__, 169, 20), 'or', isinstance_call_result_71094, isinstance_call_result_71099)
                
                # Applying the 'not' unary operator (line 169)
                result_not__71101 = python_operator(stypy.reporting.localization.Localization(__file__, 169, 15), 'not', result_or_keyword_71100)
                
                # Testing the type of an if condition (line 169)
                if_condition_71102 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 169, 12), result_not__71101)
                # Assigning a type to the variable 'if_condition_71102' (line 169)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 12), 'if_condition_71102', if_condition_71102)
                # SSA begins for if statement (line 169)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Call to ValueError(...): (line 171)
                # Processing the call arguments (line 171)
                unicode_71104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 171, 33), 'unicode', u'`markevery` is a tuple with len 2 and second element is a float, but the first element is not a float or an int; markevery=%s')
                
                # Obtaining an instance of the builtin type 'tuple' (line 175)
                tuple_71105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 175, 38), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 175)
                # Adding element type (line 175)
                # Getting the type of 'markevery' (line 175)
                markevery_71106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 38), 'markevery', False)
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 175, 38), tuple_71105, markevery_71106)
                
                # Applying the binary operator '%' (line 171)
                result_mod_71107 = python_operator(stypy.reporting.localization.Localization(__file__, 171, 33), '%', unicode_71104, tuple_71105)
                
                # Processing the call keyword arguments (line 171)
                kwargs_71108 = {}
                # Getting the type of 'ValueError' (line 171)
                ValueError_71103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 22), 'ValueError', False)
                # Calling ValueError(args, kwargs) (line 171)
                ValueError_call_result_71109 = invoke(stypy.reporting.localization.Localization(__file__, 171, 22), ValueError_71103, *[result_mod_71107], **kwargs_71108)
                
                ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 171, 16), ValueError_call_result_71109, 'raise parameter', BaseException)
                # SSA join for if statement (line 169)
                module_type_store = module_type_store.join_ssa_context()
                
                
                # Assigning a Call to a Name (line 178):
                
                # Assigning a Call to a Name (line 178):
                
                # Call to transform(...): (line 178)
                # Processing the call arguments (line 178)
                # Getting the type of 'tpath' (line 178)
                tpath_71112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 43), 'tpath', False)
                # Obtaining the member 'vertices' of a type (line 178)
                vertices_71113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 178, 43), tpath_71112, 'vertices')
                # Processing the call keyword arguments (line 178)
                kwargs_71114 = {}
                # Getting the type of 'affine' (line 178)
                affine_71110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 26), 'affine', False)
                # Obtaining the member 'transform' of a type (line 178)
                transform_71111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 178, 26), affine_71110, 'transform')
                # Calling transform(args, kwargs) (line 178)
                transform_call_result_71115 = invoke(stypy.reporting.localization.Localization(__file__, 178, 26), transform_71111, *[vertices_71113], **kwargs_71114)
                
                # Assigning a type to the variable 'disp_coords' (line 178)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 12), 'disp_coords', transform_call_result_71115)
                
                # Assigning a Call to a Name (line 179):
                
                # Assigning a Call to a Name (line 179):
                
                # Call to empty(...): (line 179)
                # Processing the call arguments (line 179)
                
                # Obtaining an instance of the builtin type 'tuple' (line 179)
                tuple_71118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 179, 30), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 179)
                # Adding element type (line 179)
                
                # Call to len(...): (line 179)
                # Processing the call arguments (line 179)
                # Getting the type of 'disp_coords' (line 179)
                disp_coords_71120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 34), 'disp_coords', False)
                # Processing the call keyword arguments (line 179)
                kwargs_71121 = {}
                # Getting the type of 'len' (line 179)
                len_71119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 30), 'len', False)
                # Calling len(args, kwargs) (line 179)
                len_call_result_71122 = invoke(stypy.reporting.localization.Localization(__file__, 179, 30), len_71119, *[disp_coords_71120], **kwargs_71121)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 179, 30), tuple_71118, len_call_result_71122)
                # Adding element type (line 179)
                int_71123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 179, 48), 'int')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 179, 30), tuple_71118, int_71123)
                
                # Processing the call keyword arguments (line 179)
                # Getting the type of 'float' (line 180)
                float_71124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 35), 'float', False)
                keyword_71125 = float_71124
                kwargs_71126 = {'dtype': keyword_71125}
                # Getting the type of 'np' (line 179)
                np_71116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 20), 'np', False)
                # Obtaining the member 'empty' of a type (line 179)
                empty_71117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 179, 20), np_71116, 'empty')
                # Calling empty(args, kwargs) (line 179)
                empty_call_result_71127 = invoke(stypy.reporting.localization.Localization(__file__, 179, 20), empty_71117, *[tuple_71118], **kwargs_71126)
                
                # Assigning a type to the variable 'delta' (line 179)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 179, 12), 'delta', empty_call_result_71127)
                
                # Assigning a Num to a Subscript (line 181):
                
                # Assigning a Num to a Subscript (line 181):
                float_71128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 181, 26), 'float')
                # Getting the type of 'delta' (line 181)
                delta_71129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 12), 'delta')
                int_71130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 181, 18), 'int')
                slice_71131 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 181, 12), None, None, None)
                # Storing an element on a container (line 181)
                set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 181, 12), delta_71129, ((int_71130, slice_71131), float_71128))
                
                # Assigning a BinOp to a Subscript (line 182):
                
                # Assigning a BinOp to a Subscript (line 182):
                
                # Obtaining the type of the subscript
                int_71132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 182, 40), 'int')
                slice_71133 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 182, 28), int_71132, None, None)
                slice_71134 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 182, 28), None, None, None)
                # Getting the type of 'disp_coords' (line 182)
                disp_coords_71135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 28), 'disp_coords')
                # Obtaining the member '__getitem__' of a type (line 182)
                getitem___71136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 182, 28), disp_coords_71135, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 182)
                subscript_call_result_71137 = invoke(stypy.reporting.localization.Localization(__file__, 182, 28), getitem___71136, (slice_71133, slice_71134))
                
                
                # Obtaining the type of the subscript
                int_71138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 183, 45), 'int')
                slice_71139 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 183, 32), None, int_71138, None)
                slice_71140 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 183, 32), None, None, None)
                # Getting the type of 'disp_coords' (line 183)
                disp_coords_71141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 32), 'disp_coords')
                # Obtaining the member '__getitem__' of a type (line 183)
                getitem___71142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 32), disp_coords_71141, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 183)
                subscript_call_result_71143 = invoke(stypy.reporting.localization.Localization(__file__, 183, 32), getitem___71142, (slice_71139, slice_71140))
                
                # Applying the binary operator '-' (line 182)
                result_sub_71144 = python_operator(stypy.reporting.localization.Localization(__file__, 182, 28), '-', subscript_call_result_71137, subscript_call_result_71143)
                
                # Getting the type of 'delta' (line 182)
                delta_71145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 12), 'delta')
                int_71146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 182, 18), 'int')
                slice_71147 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 182, 12), int_71146, None, None)
                slice_71148 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 182, 12), None, None, None)
                # Storing an element on a container (line 182)
                set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 182, 12), delta_71145, ((slice_71147, slice_71148), result_sub_71144))
                
                # Assigning a Call to a Name (line 184):
                
                # Assigning a Call to a Name (line 184):
                
                # Call to sum(...): (line 184)
                # Processing the call arguments (line 184)
                # Getting the type of 'delta' (line 184)
                delta_71151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 27), 'delta', False)
                int_71152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 34), 'int')
                # Applying the binary operator '**' (line 184)
                result_pow_71153 = python_operator(stypy.reporting.localization.Localization(__file__, 184, 27), '**', delta_71151, int_71152)
                
                # Processing the call keyword arguments (line 184)
                int_71154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 42), 'int')
                keyword_71155 = int_71154
                kwargs_71156 = {'axis': keyword_71155}
                # Getting the type of 'np' (line 184)
                np_71149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 20), 'np', False)
                # Obtaining the member 'sum' of a type (line 184)
                sum_71150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 20), np_71149, 'sum')
                # Calling sum(args, kwargs) (line 184)
                sum_call_result_71157 = invoke(stypy.reporting.localization.Localization(__file__, 184, 20), sum_71150, *[result_pow_71153], **kwargs_71156)
                
                # Assigning a type to the variable 'delta' (line 184)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 184, 12), 'delta', sum_call_result_71157)
                
                # Assigning a Call to a Name (line 185):
                
                # Assigning a Call to a Name (line 185):
                
                # Call to sqrt(...): (line 185)
                # Processing the call arguments (line 185)
                # Getting the type of 'delta' (line 185)
                delta_71160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 28), 'delta', False)
                # Processing the call keyword arguments (line 185)
                kwargs_71161 = {}
                # Getting the type of 'np' (line 185)
                np_71158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 20), 'np', False)
                # Obtaining the member 'sqrt' of a type (line 185)
                sqrt_71159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 20), np_71158, 'sqrt')
                # Calling sqrt(args, kwargs) (line 185)
                sqrt_call_result_71162 = invoke(stypy.reporting.localization.Localization(__file__, 185, 20), sqrt_71159, *[delta_71160], **kwargs_71161)
                
                # Assigning a type to the variable 'delta' (line 185)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 185, 12), 'delta', sqrt_call_result_71162)
                
                # Assigning a Call to a Name (line 186):
                
                # Assigning a Call to a Name (line 186):
                
                # Call to cumsum(...): (line 186)
                # Processing the call arguments (line 186)
                # Getting the type of 'delta' (line 186)
                delta_71165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 30), 'delta', False)
                # Processing the call keyword arguments (line 186)
                kwargs_71166 = {}
                # Getting the type of 'np' (line 186)
                np_71163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 20), 'np', False)
                # Obtaining the member 'cumsum' of a type (line 186)
                cumsum_71164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 186, 20), np_71163, 'cumsum')
                # Calling cumsum(args, kwargs) (line 186)
                cumsum_call_result_71167 = invoke(stypy.reporting.localization.Localization(__file__, 186, 20), cumsum_71164, *[delta_71165], **kwargs_71166)
                
                # Assigning a type to the variable 'delta' (line 186)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 12), 'delta', cumsum_call_result_71167)
                
                # Assigning a Call to a Name (line 190):
                
                # Assigning a Call to a Name (line 190):
                
                # Call to transform(...): (line 190)
                # Processing the call arguments (line 190)
                
                # Call to array(...): (line 191)
                # Processing the call arguments (line 191)
                
                # Obtaining an instance of the builtin type 'list' (line 191)
                list_71172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 25), 'list')
                # Adding type elements to the builtin type 'list' instance (line 191)
                # Adding element type (line 191)
                
                # Obtaining an instance of the builtin type 'list' (line 191)
                list_71173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 26), 'list')
                # Adding type elements to the builtin type 'list' instance (line 191)
                # Adding element type (line 191)
                int_71174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 27), 'int')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 191, 26), list_71173, int_71174)
                # Adding element type (line 191)
                int_71175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 30), 'int')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 191, 26), list_71173, int_71175)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 191, 25), list_71172, list_71173)
                # Adding element type (line 191)
                
                # Obtaining an instance of the builtin type 'list' (line 191)
                list_71176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 34), 'list')
                # Adding type elements to the builtin type 'list' instance (line 191)
                # Adding element type (line 191)
                int_71177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 35), 'int')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 191, 34), list_71176, int_71177)
                # Adding element type (line 191)
                int_71178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 38), 'int')
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 191, 34), list_71176, int_71178)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 191, 25), list_71172, list_71176)
                
                # Processing the call keyword arguments (line 191)
                kwargs_71179 = {}
                # Getting the type of 'np' (line 191)
                np_71170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 16), 'np', False)
                # Obtaining the member 'array' of a type (line 191)
                array_71171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 191, 16), np_71170, 'array')
                # Calling array(args, kwargs) (line 191)
                array_call_result_71180 = invoke(stypy.reporting.localization.Localization(__file__, 191, 16), array_71171, *[list_71172], **kwargs_71179)
                
                # Processing the call keyword arguments (line 190)
                kwargs_71181 = {}
                # Getting the type of 'ax_transform' (line 190)
                ax_transform_71168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 20), 'ax_transform', False)
                # Obtaining the member 'transform' of a type (line 190)
                transform_71169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 190, 20), ax_transform_71168, 'transform')
                # Calling transform(args, kwargs) (line 190)
                transform_call_result_71182 = invoke(stypy.reporting.localization.Localization(__file__, 190, 20), transform_71169, *[array_call_result_71180], **kwargs_71181)
                
                # Assigning a type to the variable 'scale' (line 190)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 12), 'scale', transform_call_result_71182)
                
                # Assigning a Call to a Name (line 192):
                
                # Assigning a Call to a Name (line 192):
                
                # Call to diff(...): (line 192)
                # Processing the call arguments (line 192)
                # Getting the type of 'scale' (line 192)
                scale_71185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 28), 'scale', False)
                # Processing the call keyword arguments (line 192)
                int_71186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 40), 'int')
                keyword_71187 = int_71186
                kwargs_71188 = {'axis': keyword_71187}
                # Getting the type of 'np' (line 192)
                np_71183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 20), 'np', False)
                # Obtaining the member 'diff' of a type (line 192)
                diff_71184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 20), np_71183, 'diff')
                # Calling diff(args, kwargs) (line 192)
                diff_call_result_71189 = invoke(stypy.reporting.localization.Localization(__file__, 192, 20), diff_71184, *[scale_71185], **kwargs_71188)
                
                # Assigning a type to the variable 'scale' (line 192)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 192, 12), 'scale', diff_call_result_71189)
                
                # Assigning a Call to a Name (line 193):
                
                # Assigning a Call to a Name (line 193):
                
                # Call to sum(...): (line 193)
                # Processing the call arguments (line 193)
                # Getting the type of 'scale' (line 193)
                scale_71192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 27), 'scale', False)
                int_71193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 34), 'int')
                # Applying the binary operator '**' (line 193)
                result_pow_71194 = python_operator(stypy.reporting.localization.Localization(__file__, 193, 27), '**', scale_71192, int_71193)
                
                # Processing the call keyword arguments (line 193)
                kwargs_71195 = {}
                # Getting the type of 'np' (line 193)
                np_71190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 20), 'np', False)
                # Obtaining the member 'sum' of a type (line 193)
                sum_71191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 20), np_71190, 'sum')
                # Calling sum(args, kwargs) (line 193)
                sum_call_result_71196 = invoke(stypy.reporting.localization.Localization(__file__, 193, 20), sum_71191, *[result_pow_71194], **kwargs_71195)
                
                # Assigning a type to the variable 'scale' (line 193)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 12), 'scale', sum_call_result_71196)
                
                # Assigning a Call to a Name (line 194):
                
                # Assigning a Call to a Name (line 194):
                
                # Call to sqrt(...): (line 194)
                # Processing the call arguments (line 194)
                # Getting the type of 'scale' (line 194)
                scale_71199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 28), 'scale', False)
                # Processing the call keyword arguments (line 194)
                kwargs_71200 = {}
                # Getting the type of 'np' (line 194)
                np_71197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 20), 'np', False)
                # Obtaining the member 'sqrt' of a type (line 194)
                sqrt_71198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 20), np_71197, 'sqrt')
                # Calling sqrt(args, kwargs) (line 194)
                sqrt_call_result_71201 = invoke(stypy.reporting.localization.Localization(__file__, 194, 20), sqrt_71198, *[scale_71199], **kwargs_71200)
                
                # Assigning a type to the variable 'scale' (line 194)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 12), 'scale', sqrt_call_result_71201)
                
                # Assigning a Call to a Name (line 195):
                
                # Assigning a Call to a Name (line 195):
                
                # Call to arange(...): (line 195)
                # Processing the call arguments (line 195)
                # Getting the type of 'start' (line 195)
                start_71204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 37), 'start', False)
                # Getting the type of 'scale' (line 195)
                scale_71205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 45), 'scale', False)
                # Applying the binary operator '*' (line 195)
                result_mul_71206 = python_operator(stypy.reporting.localization.Localization(__file__, 195, 37), '*', start_71204, scale_71205)
                
                
                # Obtaining the type of the subscript
                int_71207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 196, 43), 'int')
                # Getting the type of 'delta' (line 196)
                delta_71208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 37), 'delta', False)
                # Obtaining the member '__getitem__' of a type (line 196)
                getitem___71209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 37), delta_71208, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 196)
                subscript_call_result_71210 = invoke(stypy.reporting.localization.Localization(__file__, 196, 37), getitem___71209, int_71207)
                
                # Getting the type of 'step' (line 197)
                step_71211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 37), 'step', False)
                # Getting the type of 'scale' (line 197)
                scale_71212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 44), 'scale', False)
                # Applying the binary operator '*' (line 197)
                result_mul_71213 = python_operator(stypy.reporting.localization.Localization(__file__, 197, 37), '*', step_71211, scale_71212)
                
                # Processing the call keyword arguments (line 195)
                kwargs_71214 = {}
                # Getting the type of 'np' (line 195)
                np_71202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 27), 'np', False)
                # Obtaining the member 'arange' of a type (line 195)
                arange_71203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 27), np_71202, 'arange')
                # Calling arange(args, kwargs) (line 195)
                arange_call_result_71215 = invoke(stypy.reporting.localization.Localization(__file__, 195, 27), arange_71203, *[result_mul_71206, subscript_call_result_71210, result_mul_71213], **kwargs_71214)
                
                # Assigning a type to the variable 'marker_delta' (line 195)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 12), 'marker_delta', arange_call_result_71215)
                
                # Assigning a Call to a Name (line 200):
                
                # Assigning a Call to a Name (line 200):
                
                # Call to abs(...): (line 200)
                # Processing the call arguments (line 200)
                
                # Obtaining the type of the subscript
                # Getting the type of 'np' (line 200)
                np_71218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 32), 'np', False)
                # Obtaining the member 'newaxis' of a type (line 200)
                newaxis_71219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 32), np_71218, 'newaxis')
                slice_71220 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 200, 26), None, None, None)
                # Getting the type of 'delta' (line 200)
                delta_71221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 26), 'delta', False)
                # Obtaining the member '__getitem__' of a type (line 200)
                getitem___71222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 26), delta_71221, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 200)
                subscript_call_result_71223 = invoke(stypy.reporting.localization.Localization(__file__, 200, 26), getitem___71222, (newaxis_71219, slice_71220))
                
                
                # Obtaining the type of the subscript
                slice_71224 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 201, 28), None, None, None)
                # Getting the type of 'np' (line 201)
                np_71225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 44), 'np', False)
                # Obtaining the member 'newaxis' of a type (line 201)
                newaxis_71226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 44), np_71225, 'newaxis')
                # Getting the type of 'marker_delta' (line 201)
                marker_delta_71227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 28), 'marker_delta', False)
                # Obtaining the member '__getitem__' of a type (line 201)
                getitem___71228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 28), marker_delta_71227, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 201)
                subscript_call_result_71229 = invoke(stypy.reporting.localization.Localization(__file__, 201, 28), getitem___71228, (slice_71224, newaxis_71226))
                
                # Applying the binary operator '-' (line 200)
                result_sub_71230 = python_operator(stypy.reporting.localization.Localization(__file__, 200, 26), '-', subscript_call_result_71223, subscript_call_result_71229)
                
                # Processing the call keyword arguments (line 200)
                kwargs_71231 = {}
                # Getting the type of 'np' (line 200)
                np_71216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 19), 'np', False)
                # Obtaining the member 'abs' of a type (line 200)
                abs_71217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 19), np_71216, 'abs')
                # Calling abs(args, kwargs) (line 200)
                abs_call_result_71232 = invoke(stypy.reporting.localization.Localization(__file__, 200, 19), abs_71217, *[result_sub_71230], **kwargs_71231)
                
                # Assigning a type to the variable 'inds' (line 200)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 200, 12), 'inds', abs_call_result_71232)
                
                # Assigning a Call to a Name (line 202):
                
                # Assigning a Call to a Name (line 202):
                
                # Call to argmin(...): (line 202)
                # Processing the call keyword arguments (line 202)
                int_71235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 202, 36), 'int')
                keyword_71236 = int_71235
                kwargs_71237 = {'axis': keyword_71236}
                # Getting the type of 'inds' (line 202)
                inds_71233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 19), 'inds', False)
                # Obtaining the member 'argmin' of a type (line 202)
                argmin_71234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 19), inds_71233, 'argmin')
                # Calling argmin(args, kwargs) (line 202)
                argmin_call_result_71238 = invoke(stypy.reporting.localization.Localization(__file__, 202, 19), argmin_71234, *[], **kwargs_71237)
                
                # Assigning a type to the variable 'inds' (line 202)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 202, 12), 'inds', argmin_call_result_71238)
                
                # Assigning a Call to a Name (line 203):
                
                # Assigning a Call to a Name (line 203):
                
                # Call to unique(...): (line 203)
                # Processing the call arguments (line 203)
                # Getting the type of 'inds' (line 203)
                inds_71241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 29), 'inds', False)
                # Processing the call keyword arguments (line 203)
                kwargs_71242 = {}
                # Getting the type of 'np' (line 203)
                np_71239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 19), 'np', False)
                # Obtaining the member 'unique' of a type (line 203)
                unique_71240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 203, 19), np_71239, 'unique')
                # Calling unique(args, kwargs) (line 203)
                unique_call_result_71243 = invoke(stypy.reporting.localization.Localization(__file__, 203, 19), unique_71240, *[inds_71241], **kwargs_71242)
                
                # Assigning a type to the variable 'inds' (line 203)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 203, 12), 'inds', unique_call_result_71243)
                
                # Call to Path(...): (line 205)
                # Processing the call arguments (line 205)
                
                # Obtaining the type of the subscript
                # Getting the type of 'inds' (line 205)
                inds_71245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 30), 'inds', False)
                # Getting the type of 'verts' (line 205)
                verts_71246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 24), 'verts', False)
                # Obtaining the member '__getitem__' of a type (line 205)
                getitem___71247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 205, 24), verts_71246, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 205)
                subscript_call_result_71248 = invoke(stypy.reporting.localization.Localization(__file__, 205, 24), getitem___71247, inds_71245)
                
                
                # Call to _slice_or_none(...): (line 206)
                # Processing the call arguments (line 206)
                # Getting the type of 'codes' (line 206)
                codes_71250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 39), 'codes', False)
                # Getting the type of 'inds' (line 206)
                inds_71251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 46), 'inds', False)
                # Processing the call keyword arguments (line 206)
                kwargs_71252 = {}
                # Getting the type of '_slice_or_none' (line 206)
                _slice_or_none_71249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 24), '_slice_or_none', False)
                # Calling _slice_or_none(args, kwargs) (line 206)
                _slice_or_none_call_result_71253 = invoke(stypy.reporting.localization.Localization(__file__, 206, 24), _slice_or_none_71249, *[codes_71250, inds_71251], **kwargs_71252)
                
                # Processing the call keyword arguments (line 205)
                kwargs_71254 = {}
                # Getting the type of 'Path' (line 205)
                Path_71244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 19), 'Path', False)
                # Calling Path(args, kwargs) (line 205)
                Path_call_result_71255 = invoke(stypy.reporting.localization.Localization(__file__, 205, 19), Path_71244, *[subscript_call_result_71248, _slice_or_none_call_result_71253], **kwargs_71254)
                
                # Assigning a type to the variable 'stypy_return_type' (line 205)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 12), 'stypy_return_type', Path_call_result_71255)

                if more_types_in_union_71089:
                    # Runtime conditional SSA for else branch (line 168)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_71088) or more_types_in_union_71089):
                # Assigning a type to the variable 'step' (line 168)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 13), 'step', remove_subtype_from_union(step_71087, float))
                
                # Call to ValueError(...): (line 208)
                # Processing the call arguments (line 208)
                unicode_71257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 208, 29), 'unicode', u'`markevery` is a tuple with len 2, but its second element is not an int or a float; markevery=%s')
                
                # Obtaining an instance of the builtin type 'tuple' (line 211)
                tuple_71258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 34), 'tuple')
                # Adding type elements to the builtin type 'tuple' instance (line 211)
                # Adding element type (line 211)
                # Getting the type of 'markevery' (line 211)
                markevery_71259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 34), 'markevery', False)
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 211, 34), tuple_71258, markevery_71259)
                
                # Applying the binary operator '%' (line 208)
                result_mod_71260 = python_operator(stypy.reporting.localization.Localization(__file__, 208, 29), '%', unicode_71257, tuple_71258)
                
                # Processing the call keyword arguments (line 208)
                kwargs_71261 = {}
                # Getting the type of 'ValueError' (line 208)
                ValueError_71256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 18), 'ValueError', False)
                # Calling ValueError(args, kwargs) (line 208)
                ValueError_call_result_71262 = invoke(stypy.reporting.localization.Localization(__file__, 208, 18), ValueError_71256, *[result_mod_71260], **kwargs_71261)
                
                ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 208, 12), ValueError_call_result_71262, 'raise parameter', BaseException)

                if (may_be_71088 and more_types_in_union_71089):
                    # SSA join for if statement (line 168)
                    module_type_store = module_type_store.join_ssa_context()


            

            if (may_be_71051 and more_types_in_union_71052):
                # SSA join for if statement (line 156)
                module_type_store = module_type_store.join_ssa_context()


        

        if more_types_in_union_71024:
            # Runtime conditional SSA for else branch (line 149)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_71023) or more_types_in_union_71024):
        # Assigning a type to the variable 'markevery' (line 149)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 149, 4), 'markevery', remove_subtype_from_union(markevery_71022, tuple))
        
        # Type idiom detected: calculating its left and rigth part (line 213)
        # Getting the type of 'slice' (line 213)
        slice_71263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 31), 'slice')
        # Getting the type of 'markevery' (line 213)
        markevery_71264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 20), 'markevery')
        
        (may_be_71265, more_types_in_union_71266) = may_be_subtype(slice_71263, markevery_71264)

        if may_be_71265:

            if more_types_in_union_71266:
                # Runtime conditional SSA (line 213)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'markevery' (line 213)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 9), 'markevery', remove_not_subtype_from_union(markevery_71264, slice))
            
            # Call to Path(...): (line 215)
            # Processing the call arguments (line 215)
            
            # Obtaining the type of the subscript
            # Getting the type of 'markevery' (line 215)
            markevery_71268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 26), 'markevery', False)
            # Getting the type of 'verts' (line 215)
            verts_71269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 20), 'verts', False)
            # Obtaining the member '__getitem__' of a type (line 215)
            getitem___71270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 215, 20), verts_71269, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 215)
            subscript_call_result_71271 = invoke(stypy.reporting.localization.Localization(__file__, 215, 20), getitem___71270, markevery_71268)
            
            
            # Call to _slice_or_none(...): (line 216)
            # Processing the call arguments (line 216)
            # Getting the type of 'codes' (line 216)
            codes_71273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 35), 'codes', False)
            # Getting the type of 'markevery' (line 216)
            markevery_71274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 42), 'markevery', False)
            # Processing the call keyword arguments (line 216)
            kwargs_71275 = {}
            # Getting the type of '_slice_or_none' (line 216)
            _slice_or_none_71272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 20), '_slice_or_none', False)
            # Calling _slice_or_none(args, kwargs) (line 216)
            _slice_or_none_call_result_71276 = invoke(stypy.reporting.localization.Localization(__file__, 216, 20), _slice_or_none_71272, *[codes_71273, markevery_71274], **kwargs_71275)
            
            # Processing the call keyword arguments (line 215)
            kwargs_71277 = {}
            # Getting the type of 'Path' (line 215)
            Path_71267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 15), 'Path', False)
            # Calling Path(args, kwargs) (line 215)
            Path_call_result_71278 = invoke(stypy.reporting.localization.Localization(__file__, 215, 15), Path_71267, *[subscript_call_result_71271, _slice_or_none_call_result_71276], **kwargs_71277)
            
            # Assigning a type to the variable 'stypy_return_type' (line 215)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 8), 'stypy_return_type', Path_call_result_71278)

            if more_types_in_union_71266:
                # Runtime conditional SSA for else branch (line 213)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_71265) or more_types_in_union_71266):
            # Assigning a type to the variable 'markevery' (line 213)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 9), 'markevery', remove_subtype_from_union(markevery_71264, slice))
            
            
            # Call to iterable(...): (line 218)
            # Processing the call arguments (line 218)
            # Getting the type of 'markevery' (line 218)
            markevery_71280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 18), 'markevery', False)
            # Processing the call keyword arguments (line 218)
            kwargs_71281 = {}
            # Getting the type of 'iterable' (line 218)
            iterable_71279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 9), 'iterable', False)
            # Calling iterable(args, kwargs) (line 218)
            iterable_call_result_71282 = invoke(stypy.reporting.localization.Localization(__file__, 218, 9), iterable_71279, *[markevery_71280], **kwargs_71281)
            
            # Testing the type of an if condition (line 218)
            if_condition_71283 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 218, 9), iterable_call_result_71282)
            # Assigning a type to the variable 'if_condition_71283' (line 218)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 9), 'if_condition_71283', if_condition_71283)
            # SSA begins for if statement (line 218)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            # SSA begins for try-except statement (line 220)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Call to Path(...): (line 221)
            # Processing the call arguments (line 221)
            
            # Obtaining the type of the subscript
            # Getting the type of 'markevery' (line 221)
            markevery_71285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 30), 'markevery', False)
            # Getting the type of 'verts' (line 221)
            verts_71286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 24), 'verts', False)
            # Obtaining the member '__getitem__' of a type (line 221)
            getitem___71287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 24), verts_71286, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 221)
            subscript_call_result_71288 = invoke(stypy.reporting.localization.Localization(__file__, 221, 24), getitem___71287, markevery_71285)
            
            
            # Call to _slice_or_none(...): (line 222)
            # Processing the call arguments (line 222)
            # Getting the type of 'codes' (line 222)
            codes_71290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 35), 'codes', False)
            # Getting the type of 'markevery' (line 222)
            markevery_71291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 42), 'markevery', False)
            # Processing the call keyword arguments (line 222)
            kwargs_71292 = {}
            # Getting the type of '_slice_or_none' (line 222)
            _slice_or_none_71289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 20), '_slice_or_none', False)
            # Calling _slice_or_none(args, kwargs) (line 222)
            _slice_or_none_call_result_71293 = invoke(stypy.reporting.localization.Localization(__file__, 222, 20), _slice_or_none_71289, *[codes_71290, markevery_71291], **kwargs_71292)
            
            # Processing the call keyword arguments (line 221)
            kwargs_71294 = {}
            # Getting the type of 'Path' (line 221)
            Path_71284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 19), 'Path', False)
            # Calling Path(args, kwargs) (line 221)
            Path_call_result_71295 = invoke(stypy.reporting.localization.Localization(__file__, 221, 19), Path_71284, *[subscript_call_result_71288, _slice_or_none_call_result_71293], **kwargs_71294)
            
            # Assigning a type to the variable 'stypy_return_type' (line 221)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 12), 'stypy_return_type', Path_call_result_71295)
            # SSA branch for the except part of a try statement (line 220)
            # SSA branch for the except 'Tuple' branch of a try statement (line 220)
            module_type_store.open_ssa_branch('except')
            
            # Call to ValueError(...): (line 225)
            # Processing the call arguments (line 225)
            unicode_71297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 29), 'unicode', u'`markevery` is iterable but not a valid form of numpy fancy indexing; markevery=%s')
            
            # Obtaining an instance of the builtin type 'tuple' (line 227)
            tuple_71298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 34), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 227)
            # Adding element type (line 227)
            # Getting the type of 'markevery' (line 227)
            markevery_71299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 34), 'markevery', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 227, 34), tuple_71298, markevery_71299)
            
            # Applying the binary operator '%' (line 225)
            result_mod_71300 = python_operator(stypy.reporting.localization.Localization(__file__, 225, 29), '%', unicode_71297, tuple_71298)
            
            # Processing the call keyword arguments (line 225)
            kwargs_71301 = {}
            # Getting the type of 'ValueError' (line 225)
            ValueError_71296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 18), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 225)
            ValueError_call_result_71302 = invoke(stypy.reporting.localization.Localization(__file__, 225, 18), ValueError_71296, *[result_mod_71300], **kwargs_71301)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 225, 12), ValueError_call_result_71302, 'raise parameter', BaseException)
            # SSA join for try-except statement (line 220)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 218)
            module_type_store.open_ssa_branch('else')
            
            # Call to ValueError(...): (line 229)
            # Processing the call arguments (line 229)
            unicode_71304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 229, 25), 'unicode', u'Value of `markevery` is not recognized; markevery=%s')
            
            # Obtaining an instance of the builtin type 'tuple' (line 231)
            tuple_71305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 30), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 231)
            # Adding element type (line 231)
            # Getting the type of 'markevery' (line 231)
            markevery_71306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 30), 'markevery', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 231, 30), tuple_71305, markevery_71306)
            
            # Applying the binary operator '%' (line 229)
            result_mod_71307 = python_operator(stypy.reporting.localization.Localization(__file__, 229, 25), '%', unicode_71304, tuple_71305)
            
            # Processing the call keyword arguments (line 229)
            kwargs_71308 = {}
            # Getting the type of 'ValueError' (line 229)
            ValueError_71303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 14), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 229)
            ValueError_call_result_71309 = invoke(stypy.reporting.localization.Localization(__file__, 229, 14), ValueError_71303, *[result_mod_71307], **kwargs_71308)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 229, 8), ValueError_call_result_71309, 'raise parameter', BaseException)
            # SSA join for if statement (line 218)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_71265 and more_types_in_union_71266):
                # SSA join for if statement (line 213)
                module_type_store = module_type_store.join_ssa_context()


        

        if (may_be_71023 and more_types_in_union_71024):
            # SSA join for if statement (line 149)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of '_mark_every_path(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_mark_every_path' in the type store
    # Getting the type of 'stypy_return_type' (line 119)
    stypy_return_type_71310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_71310)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_mark_every_path'
    return stypy_return_type_71310

# Assigning a type to the variable '_mark_every_path' (line 119)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 119, 0), '_mark_every_path', _mark_every_path)
# Declaration of the 'Line2D' class
# Getting the type of 'Artist' (line 234)
Artist_71311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 13), 'Artist')

class Line2D(Artist_71311, ):
    unicode_71312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 242, (-1)), 'unicode', u'\n    A line - the line can have both a solid linestyle connecting all\n    the vertices, and a marker at each vertex.  Additionally, the\n    drawing of the solid line is influenced by the drawstyle, e.g., one\n    can create "stepped" lines in various styles.\n\n\n    ')
    
    # Multiple assignment of 2 elements.
    
    # Assigning a Dict to a Name (line 253):
    
    # Assigning a BinOp to a Name (line 269):
    
    # Assigning a Attribute to a Name (line 273):
    
    # Assigning a Attribute to a Name (line 274):
    
    # Assigning a Attribute to a Name (line 275):
    
    # Assigning a Num to a Name (line 277):
    
    # Assigning a Tuple to a Name (line 278):
    
    # Assigning a Tuple to a Name (line 279):

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 281, 4, False)
        # Assigning a type to the variable 'self' (line 282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 282, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        Line2D.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.stypy__str__.__dict__.__setitem__('stypy_function_name', 'Line2D.stypy__str__')
        Line2D.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        
        
        # Getting the type of 'self' (line 282)
        self_71313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 11), 'self')
        # Obtaining the member '_label' of a type (line 282)
        _label_71314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 282, 11), self_71313, '_label')
        unicode_71315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 282, 26), 'unicode', u'')
        # Applying the binary operator '!=' (line 282)
        result_ne_71316 = python_operator(stypy.reporting.localization.Localization(__file__, 282, 11), '!=', _label_71314, unicode_71315)
        
        # Testing the type of an if condition (line 282)
        if_condition_71317 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 282, 8), result_ne_71316)
        # Assigning a type to the variable 'if_condition_71317' (line 282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 282, 8), 'if_condition_71317', if_condition_71317)
        # SSA begins for if statement (line 282)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_71318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 283, 19), 'unicode', u'Line2D(%s)')
        # Getting the type of 'self' (line 283)
        self_71319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 35), 'self')
        # Obtaining the member '_label' of a type (line 283)
        _label_71320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 283, 35), self_71319, '_label')
        # Applying the binary operator '%' (line 283)
        result_mod_71321 = python_operator(stypy.reporting.localization.Localization(__file__, 283, 19), '%', unicode_71318, _label_71320)
        
        # Assigning a type to the variable 'stypy_return_type' (line 283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 283, 12), 'stypy_return_type', result_mod_71321)
        # SSA branch for the else part of an if statement (line 282)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 284)
        # Getting the type of 'self' (line 284)
        self_71322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 13), 'self')
        # Obtaining the member '_x' of a type (line 284)
        _x_71323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 13), self_71322, '_x')
        # Getting the type of 'None' (line 284)
        None_71324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 24), 'None')
        
        (may_be_71325, more_types_in_union_71326) = may_be_none(_x_71323, None_71324)

        if may_be_71325:

            if more_types_in_union_71326:
                # Runtime conditional SSA (line 284)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            unicode_71327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 285, 19), 'unicode', u'Line2D()')
            # Assigning a type to the variable 'stypy_return_type' (line 285)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 285, 12), 'stypy_return_type', unicode_71327)

            if more_types_in_union_71326:
                # Runtime conditional SSA for else branch (line 284)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_71325) or more_types_in_union_71326):
            
            
            
            # Call to len(...): (line 286)
            # Processing the call arguments (line 286)
            # Getting the type of 'self' (line 286)
            self_71329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 17), 'self', False)
            # Obtaining the member '_x' of a type (line 286)
            _x_71330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 17), self_71329, '_x')
            # Processing the call keyword arguments (line 286)
            kwargs_71331 = {}
            # Getting the type of 'len' (line 286)
            len_71328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 13), 'len', False)
            # Calling len(args, kwargs) (line 286)
            len_call_result_71332 = invoke(stypy.reporting.localization.Localization(__file__, 286, 13), len_71328, *[_x_71330], **kwargs_71331)
            
            int_71333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, 28), 'int')
            # Applying the binary operator '>' (line 286)
            result_gt_71334 = python_operator(stypy.reporting.localization.Localization(__file__, 286, 13), '>', len_call_result_71332, int_71333)
            
            # Testing the type of an if condition (line 286)
            if_condition_71335 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 286, 13), result_gt_71334)
            # Assigning a type to the variable 'if_condition_71335' (line 286)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 13), 'if_condition_71335', if_condition_71335)
            # SSA begins for if statement (line 286)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            unicode_71336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 287, 19), 'unicode', u'Line2D((%g,%g),(%g,%g),...,(%g,%g))')
            
            # Obtaining an instance of the builtin type 'tuple' (line 288)
            tuple_71337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 288, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 288)
            # Adding element type (line 288)
            
            # Obtaining the type of the subscript
            int_71338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 288, 27), 'int')
            # Getting the type of 'self' (line 288)
            self_71339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 19), 'self')
            # Obtaining the member '_x' of a type (line 288)
            _x_71340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 19), self_71339, '_x')
            # Obtaining the member '__getitem__' of a type (line 288)
            getitem___71341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 19), _x_71340, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 288)
            subscript_call_result_71342 = invoke(stypy.reporting.localization.Localization(__file__, 288, 19), getitem___71341, int_71338)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 288, 19), tuple_71337, subscript_call_result_71342)
            # Adding element type (line 288)
            
            # Obtaining the type of the subscript
            int_71343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 288, 39), 'int')
            # Getting the type of 'self' (line 288)
            self_71344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 31), 'self')
            # Obtaining the member '_y' of a type (line 288)
            _y_71345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 31), self_71344, '_y')
            # Obtaining the member '__getitem__' of a type (line 288)
            getitem___71346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 31), _y_71345, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 288)
            subscript_call_result_71347 = invoke(stypy.reporting.localization.Localization(__file__, 288, 31), getitem___71346, int_71343)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 288, 19), tuple_71337, subscript_call_result_71347)
            # Adding element type (line 288)
            
            # Obtaining the type of the subscript
            int_71348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 288, 51), 'int')
            # Getting the type of 'self' (line 288)
            self_71349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 43), 'self')
            # Obtaining the member '_x' of a type (line 288)
            _x_71350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 43), self_71349, '_x')
            # Obtaining the member '__getitem__' of a type (line 288)
            getitem___71351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 43), _x_71350, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 288)
            subscript_call_result_71352 = invoke(stypy.reporting.localization.Localization(__file__, 288, 43), getitem___71351, int_71348)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 288, 19), tuple_71337, subscript_call_result_71352)
            # Adding element type (line 288)
            
            # Obtaining the type of the subscript
            int_71353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 27), 'int')
            # Getting the type of 'self' (line 289)
            self_71354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 19), 'self')
            # Obtaining the member '_y' of a type (line 289)
            _y_71355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 19), self_71354, '_y')
            # Obtaining the member '__getitem__' of a type (line 289)
            getitem___71356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 19), _y_71355, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 289)
            subscript_call_result_71357 = invoke(stypy.reporting.localization.Localization(__file__, 289, 19), getitem___71356, int_71353)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 288, 19), tuple_71337, subscript_call_result_71357)
            # Adding element type (line 288)
            
            # Obtaining the type of the subscript
            int_71358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 39), 'int')
            # Getting the type of 'self' (line 289)
            self_71359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 31), 'self')
            # Obtaining the member '_x' of a type (line 289)
            _x_71360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 31), self_71359, '_x')
            # Obtaining the member '__getitem__' of a type (line 289)
            getitem___71361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 31), _x_71360, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 289)
            subscript_call_result_71362 = invoke(stypy.reporting.localization.Localization(__file__, 289, 31), getitem___71361, int_71358)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 288, 19), tuple_71337, subscript_call_result_71362)
            # Adding element type (line 288)
            
            # Obtaining the type of the subscript
            int_71363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 52), 'int')
            # Getting the type of 'self' (line 289)
            self_71364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 44), 'self')
            # Obtaining the member '_y' of a type (line 289)
            _y_71365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 44), self_71364, '_y')
            # Obtaining the member '__getitem__' of a type (line 289)
            getitem___71366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 44), _y_71365, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 289)
            subscript_call_result_71367 = invoke(stypy.reporting.localization.Localization(__file__, 289, 44), getitem___71366, int_71363)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 288, 19), tuple_71337, subscript_call_result_71367)
            
            # Applying the binary operator '%' (line 287)
            result_mod_71368 = python_operator(stypy.reporting.localization.Localization(__file__, 287, 19), '%', unicode_71336, tuple_71337)
            
            # Assigning a type to the variable 'stypy_return_type' (line 287)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 287, 12), 'stypy_return_type', result_mod_71368)
            # SSA branch for the else part of an if statement (line 286)
            module_type_store.open_ssa_branch('else')
            unicode_71369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 291, 19), 'unicode', u'Line2D(%s)')
            
            # Call to join(...): (line 292)
            # Processing the call arguments (line 292)
            # Calculating list comprehension
            # Calculating comprehension expression
            
            # Call to zip(...): (line 293)
            # Processing the call arguments (line 293)
            # Getting the type of 'self' (line 293)
            self_71378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 36), 'self', False)
            # Obtaining the member '_x' of a type (line 293)
            _x_71379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 36), self_71378, '_x')
            # Getting the type of 'self' (line 293)
            self_71380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 45), 'self', False)
            # Obtaining the member '_y' of a type (line 293)
            _y_71381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 45), self_71380, '_y')
            # Processing the call keyword arguments (line 293)
            kwargs_71382 = {}
            # Getting the type of 'zip' (line 293)
            zip_71377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 32), 'zip', False)
            # Calling zip(args, kwargs) (line 293)
            zip_call_result_71383 = invoke(stypy.reporting.localization.Localization(__file__, 293, 32), zip_71377, *[_x_71379, _y_71381], **kwargs_71382)
            
            comprehension_71384 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 29), zip_call_result_71383)
            # Assigning a type to the variable 'x' (line 292)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 29), 'x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 29), comprehension_71384))
            # Assigning a type to the variable 'y' (line 292)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 29), 'y', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 29), comprehension_71384))
            unicode_71372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 29), 'unicode', u'(%g,%g)')
            
            # Obtaining an instance of the builtin type 'tuple' (line 292)
            tuple_71373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 42), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 292)
            # Adding element type (line 292)
            # Getting the type of 'x' (line 292)
            x_71374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 42), 'x', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 42), tuple_71373, x_71374)
            # Adding element type (line 292)
            # Getting the type of 'y' (line 292)
            y_71375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 45), 'y', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 42), tuple_71373, y_71375)
            
            # Applying the binary operator '%' (line 292)
            result_mod_71376 = python_operator(stypy.reporting.localization.Localization(__file__, 292, 29), '%', unicode_71372, tuple_71373)
            
            list_71385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 29), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 29), list_71385, result_mod_71376)
            # Processing the call keyword arguments (line 292)
            kwargs_71386 = {}
            unicode_71370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 19), 'unicode', u',')
            # Obtaining the member 'join' of a type (line 292)
            join_71371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 19), unicode_71370, 'join')
            # Calling join(args, kwargs) (line 292)
            join_call_result_71387 = invoke(stypy.reporting.localization.Localization(__file__, 292, 19), join_71371, *[list_71385], **kwargs_71386)
            
            # Applying the binary operator '%' (line 291)
            result_mod_71388 = python_operator(stypy.reporting.localization.Localization(__file__, 291, 19), '%', unicode_71369, join_call_result_71387)
            
            # Assigning a type to the variable 'stypy_return_type' (line 291)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 291, 12), 'stypy_return_type', result_mod_71388)
            # SSA join for if statement (line 286)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_71325 and more_types_in_union_71326):
                # SSA join for if statement (line 284)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 282)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 281)
        stypy_return_type_71389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_71389)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_71389


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 296)
        None_71390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 27), 'None')
        # Getting the type of 'None' (line 297)
        None_71391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 27), 'None')
        # Getting the type of 'None' (line 298)
        None_71392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 23), 'None')
        # Getting the type of 'None' (line 299)
        None_71393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 24), 'None')
        # Getting the type of 'None' (line 300)
        None_71394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 28), 'None')
        # Getting the type of 'None' (line 301)
        None_71395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 33), 'None')
        # Getting the type of 'None' (line 302)
        None_71396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 33), 'None')
        # Getting the type of 'None' (line 303)
        None_71397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 33), 'None')
        unicode_71398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 304, 36), 'unicode', u'none')
        # Getting the type of 'None' (line 305)
        None_71399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 27), 'None')
        # Getting the type of 'None' (line 306)
        None_71400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 29), 'None')
        # Getting the type of 'None' (line 307)
        None_71401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 31), 'None')
        # Getting the type of 'None' (line 308)
        None_71402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 32), 'None')
        # Getting the type of 'None' (line 309)
        None_71403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 32), 'None')
        # Getting the type of 'None' (line 310)
        None_71404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 33), 'None')
        int_71405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 311, 28), 'int')
        # Getting the type of 'None' (line 312)
        None_71406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 27), 'None')
        # Getting the type of 'None' (line 313)
        None_71407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 27), 'None')
        defaults = [None_71390, None_71391, None_71392, None_71393, None_71394, None_71395, None_71396, None_71397, unicode_71398, None_71399, None_71400, None_71401, None_71402, None_71403, None_71404, int_71405, None_71406, None_71407]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 295, 4, False)
        # Assigning a type to the variable 'self' (line 296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 296, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.__init__', ['xdata', 'ydata', 'linewidth', 'linestyle', 'color', 'marker', 'markersize', 'markeredgewidth', 'markeredgecolor', 'markerfacecolor', 'markerfacecoloralt', 'fillstyle', 'antialiased', 'dash_capstyle', 'solid_capstyle', 'dash_joinstyle', 'solid_joinstyle', 'pickradius', 'drawstyle', 'markevery'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['xdata', 'ydata', 'linewidth', 'linestyle', 'color', 'marker', 'markersize', 'markeredgewidth', 'markeredgecolor', 'markerfacecolor', 'markerfacecoloralt', 'fillstyle', 'antialiased', 'dash_capstyle', 'solid_capstyle', 'dash_joinstyle', 'solid_joinstyle', 'pickradius', 'drawstyle', 'markevery'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_71408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 328, (-1)), 'unicode', u'\n        Create a :class:`~matplotlib.lines.Line2D` instance with *x*\n        and *y* data in sequences *xdata*, *ydata*.\n\n        The kwargs are :class:`~matplotlib.lines.Line2D` properties:\n\n        %(Line2D)s\n\n        See :meth:`set_linestyle` for a decription of the line styles,\n        :meth:`set_marker` for a description of the markers, and\n        :meth:`set_drawstyle` for a description of the draw styles.\n\n        ')
        
        # Call to __init__(...): (line 329)
        # Processing the call arguments (line 329)
        # Getting the type of 'self' (line 329)
        self_71411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 24), 'self', False)
        # Processing the call keyword arguments (line 329)
        kwargs_71412 = {}
        # Getting the type of 'Artist' (line 329)
        Artist_71409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 8), 'Artist', False)
        # Obtaining the member '__init__' of a type (line 329)
        init___71410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 329, 8), Artist_71409, '__init__')
        # Calling __init__(args, kwargs) (line 329)
        init___call_result_71413 = invoke(stypy.reporting.localization.Localization(__file__, 329, 8), init___71410, *[self_71411], **kwargs_71412)
        
        
        
        
        # Call to iterable(...): (line 332)
        # Processing the call arguments (line 332)
        # Getting the type of 'xdata' (line 332)
        xdata_71415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 24), 'xdata', False)
        # Processing the call keyword arguments (line 332)
        kwargs_71416 = {}
        # Getting the type of 'iterable' (line 332)
        iterable_71414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 15), 'iterable', False)
        # Calling iterable(args, kwargs) (line 332)
        iterable_call_result_71417 = invoke(stypy.reporting.localization.Localization(__file__, 332, 15), iterable_71414, *[xdata_71415], **kwargs_71416)
        
        # Applying the 'not' unary operator (line 332)
        result_not__71418 = python_operator(stypy.reporting.localization.Localization(__file__, 332, 11), 'not', iterable_call_result_71417)
        
        # Testing the type of an if condition (line 332)
        if_condition_71419 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 332, 8), result_not__71418)
        # Assigning a type to the variable 'if_condition_71419' (line 332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 8), 'if_condition_71419', if_condition_71419)
        # SSA begins for if statement (line 332)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to RuntimeError(...): (line 333)
        # Processing the call arguments (line 333)
        unicode_71421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 333, 31), 'unicode', u'xdata must be a sequence')
        # Processing the call keyword arguments (line 333)
        kwargs_71422 = {}
        # Getting the type of 'RuntimeError' (line 333)
        RuntimeError_71420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 18), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 333)
        RuntimeError_call_result_71423 = invoke(stypy.reporting.localization.Localization(__file__, 333, 18), RuntimeError_71420, *[unicode_71421], **kwargs_71422)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 333, 12), RuntimeError_call_result_71423, 'raise parameter', BaseException)
        # SSA join for if statement (line 332)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to iterable(...): (line 334)
        # Processing the call arguments (line 334)
        # Getting the type of 'ydata' (line 334)
        ydata_71425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 24), 'ydata', False)
        # Processing the call keyword arguments (line 334)
        kwargs_71426 = {}
        # Getting the type of 'iterable' (line 334)
        iterable_71424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 15), 'iterable', False)
        # Calling iterable(args, kwargs) (line 334)
        iterable_call_result_71427 = invoke(stypy.reporting.localization.Localization(__file__, 334, 15), iterable_71424, *[ydata_71425], **kwargs_71426)
        
        # Applying the 'not' unary operator (line 334)
        result_not__71428 = python_operator(stypy.reporting.localization.Localization(__file__, 334, 11), 'not', iterable_call_result_71427)
        
        # Testing the type of an if condition (line 334)
        if_condition_71429 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 334, 8), result_not__71428)
        # Assigning a type to the variable 'if_condition_71429' (line 334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 8), 'if_condition_71429', if_condition_71429)
        # SSA begins for if statement (line 334)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to RuntimeError(...): (line 335)
        # Processing the call arguments (line 335)
        unicode_71431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 335, 31), 'unicode', u'ydata must be a sequence')
        # Processing the call keyword arguments (line 335)
        kwargs_71432 = {}
        # Getting the type of 'RuntimeError' (line 335)
        RuntimeError_71430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 18), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 335)
        RuntimeError_call_result_71433 = invoke(stypy.reporting.localization.Localization(__file__, 335, 18), RuntimeError_71430, *[unicode_71431], **kwargs_71432)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 335, 12), RuntimeError_call_result_71433, 'raise parameter', BaseException)
        # SSA join for if statement (line 334)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 337)
        # Getting the type of 'linewidth' (line 337)
        linewidth_71434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 11), 'linewidth')
        # Getting the type of 'None' (line 337)
        None_71435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 24), 'None')
        
        (may_be_71436, more_types_in_union_71437) = may_be_none(linewidth_71434, None_71435)

        if may_be_71436:

            if more_types_in_union_71437:
                # Runtime conditional SSA (line 337)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 338):
            
            # Assigning a Subscript to a Name (line 338):
            
            # Obtaining the type of the subscript
            unicode_71438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 338, 33), 'unicode', u'lines.linewidth')
            # Getting the type of 'rcParams' (line 338)
            rcParams_71439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 24), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 338)
            getitem___71440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 338, 24), rcParams_71439, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 338)
            subscript_call_result_71441 = invoke(stypy.reporting.localization.Localization(__file__, 338, 24), getitem___71440, unicode_71438)
            
            # Assigning a type to the variable 'linewidth' (line 338)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 338, 12), 'linewidth', subscript_call_result_71441)

            if more_types_in_union_71437:
                # SSA join for if statement (line 337)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 340)
        # Getting the type of 'linestyle' (line 340)
        linestyle_71442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 11), 'linestyle')
        # Getting the type of 'None' (line 340)
        None_71443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 24), 'None')
        
        (may_be_71444, more_types_in_union_71445) = may_be_none(linestyle_71442, None_71443)

        if may_be_71444:

            if more_types_in_union_71445:
                # Runtime conditional SSA (line 340)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 341):
            
            # Assigning a Subscript to a Name (line 341):
            
            # Obtaining the type of the subscript
            unicode_71446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 341, 33), 'unicode', u'lines.linestyle')
            # Getting the type of 'rcParams' (line 341)
            rcParams_71447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 24), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 341)
            getitem___71448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 341, 24), rcParams_71447, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 341)
            subscript_call_result_71449 = invoke(stypy.reporting.localization.Localization(__file__, 341, 24), getitem___71448, unicode_71446)
            
            # Assigning a type to the variable 'linestyle' (line 341)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 341, 12), 'linestyle', subscript_call_result_71449)

            if more_types_in_union_71445:
                # SSA join for if statement (line 340)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 342)
        # Getting the type of 'marker' (line 342)
        marker_71450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 11), 'marker')
        # Getting the type of 'None' (line 342)
        None_71451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 21), 'None')
        
        (may_be_71452, more_types_in_union_71453) = may_be_none(marker_71450, None_71451)

        if may_be_71452:

            if more_types_in_union_71453:
                # Runtime conditional SSA (line 342)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 343):
            
            # Assigning a Subscript to a Name (line 343):
            
            # Obtaining the type of the subscript
            unicode_71454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 30), 'unicode', u'lines.marker')
            # Getting the type of 'rcParams' (line 343)
            rcParams_71455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 21), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 343)
            getitem___71456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 21), rcParams_71455, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 343)
            subscript_call_result_71457 = invoke(stypy.reporting.localization.Localization(__file__, 343, 21), getitem___71456, unicode_71454)
            
            # Assigning a type to the variable 'marker' (line 343)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 12), 'marker', subscript_call_result_71457)

            if more_types_in_union_71453:
                # SSA join for if statement (line 342)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 344)
        # Getting the type of 'color' (line 344)
        color_71458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 11), 'color')
        # Getting the type of 'None' (line 344)
        None_71459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 20), 'None')
        
        (may_be_71460, more_types_in_union_71461) = may_be_none(color_71458, None_71459)

        if may_be_71460:

            if more_types_in_union_71461:
                # Runtime conditional SSA (line 344)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 345):
            
            # Assigning a Subscript to a Name (line 345):
            
            # Obtaining the type of the subscript
            unicode_71462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 345, 29), 'unicode', u'lines.color')
            # Getting the type of 'rcParams' (line 345)
            rcParams_71463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 20), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 345)
            getitem___71464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 20), rcParams_71463, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 345)
            subscript_call_result_71465 = invoke(stypy.reporting.localization.Localization(__file__, 345, 20), getitem___71464, unicode_71462)
            
            # Assigning a type to the variable 'color' (line 345)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 345, 12), 'color', subscript_call_result_71465)

            if more_types_in_union_71461:
                # SSA join for if statement (line 344)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 347)
        # Getting the type of 'markersize' (line 347)
        markersize_71466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 11), 'markersize')
        # Getting the type of 'None' (line 347)
        None_71467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 25), 'None')
        
        (may_be_71468, more_types_in_union_71469) = may_be_none(markersize_71466, None_71467)

        if may_be_71468:

            if more_types_in_union_71469:
                # Runtime conditional SSA (line 347)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 348):
            
            # Assigning a Subscript to a Name (line 348):
            
            # Obtaining the type of the subscript
            unicode_71470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 348, 34), 'unicode', u'lines.markersize')
            # Getting the type of 'rcParams' (line 348)
            rcParams_71471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 25), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 348)
            getitem___71472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 348, 25), rcParams_71471, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 348)
            subscript_call_result_71473 = invoke(stypy.reporting.localization.Localization(__file__, 348, 25), getitem___71472, unicode_71470)
            
            # Assigning a type to the variable 'markersize' (line 348)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 348, 12), 'markersize', subscript_call_result_71473)

            if more_types_in_union_71469:
                # SSA join for if statement (line 347)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 349)
        # Getting the type of 'antialiased' (line 349)
        antialiased_71474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 11), 'antialiased')
        # Getting the type of 'None' (line 349)
        None_71475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 26), 'None')
        
        (may_be_71476, more_types_in_union_71477) = may_be_none(antialiased_71474, None_71475)

        if may_be_71476:

            if more_types_in_union_71477:
                # Runtime conditional SSA (line 349)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 350):
            
            # Assigning a Subscript to a Name (line 350):
            
            # Obtaining the type of the subscript
            unicode_71478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, 35), 'unicode', u'lines.antialiased')
            # Getting the type of 'rcParams' (line 350)
            rcParams_71479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 26), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 350)
            getitem___71480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 350, 26), rcParams_71479, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 350)
            subscript_call_result_71481 = invoke(stypy.reporting.localization.Localization(__file__, 350, 26), getitem___71480, unicode_71478)
            
            # Assigning a type to the variable 'antialiased' (line 350)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 350, 12), 'antialiased', subscript_call_result_71481)

            if more_types_in_union_71477:
                # SSA join for if statement (line 349)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 351)
        # Getting the type of 'dash_capstyle' (line 351)
        dash_capstyle_71482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 11), 'dash_capstyle')
        # Getting the type of 'None' (line 351)
        None_71483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 28), 'None')
        
        (may_be_71484, more_types_in_union_71485) = may_be_none(dash_capstyle_71482, None_71483)

        if may_be_71484:

            if more_types_in_union_71485:
                # Runtime conditional SSA (line 351)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 352):
            
            # Assigning a Subscript to a Name (line 352):
            
            # Obtaining the type of the subscript
            unicode_71486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 37), 'unicode', u'lines.dash_capstyle')
            # Getting the type of 'rcParams' (line 352)
            rcParams_71487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 28), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 352)
            getitem___71488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 28), rcParams_71487, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 352)
            subscript_call_result_71489 = invoke(stypy.reporting.localization.Localization(__file__, 352, 28), getitem___71488, unicode_71486)
            
            # Assigning a type to the variable 'dash_capstyle' (line 352)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 12), 'dash_capstyle', subscript_call_result_71489)

            if more_types_in_union_71485:
                # SSA join for if statement (line 351)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 353)
        # Getting the type of 'dash_joinstyle' (line 353)
        dash_joinstyle_71490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 11), 'dash_joinstyle')
        # Getting the type of 'None' (line 353)
        None_71491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 29), 'None')
        
        (may_be_71492, more_types_in_union_71493) = may_be_none(dash_joinstyle_71490, None_71491)

        if may_be_71492:

            if more_types_in_union_71493:
                # Runtime conditional SSA (line 353)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 354):
            
            # Assigning a Subscript to a Name (line 354):
            
            # Obtaining the type of the subscript
            unicode_71494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 354, 38), 'unicode', u'lines.dash_joinstyle')
            # Getting the type of 'rcParams' (line 354)
            rcParams_71495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 29), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 354)
            getitem___71496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 354, 29), rcParams_71495, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 354)
            subscript_call_result_71497 = invoke(stypy.reporting.localization.Localization(__file__, 354, 29), getitem___71496, unicode_71494)
            
            # Assigning a type to the variable 'dash_joinstyle' (line 354)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 12), 'dash_joinstyle', subscript_call_result_71497)

            if more_types_in_union_71493:
                # SSA join for if statement (line 353)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 355)
        # Getting the type of 'solid_capstyle' (line 355)
        solid_capstyle_71498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 11), 'solid_capstyle')
        # Getting the type of 'None' (line 355)
        None_71499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 29), 'None')
        
        (may_be_71500, more_types_in_union_71501) = may_be_none(solid_capstyle_71498, None_71499)

        if may_be_71500:

            if more_types_in_union_71501:
                # Runtime conditional SSA (line 355)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 356):
            
            # Assigning a Subscript to a Name (line 356):
            
            # Obtaining the type of the subscript
            unicode_71502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 38), 'unicode', u'lines.solid_capstyle')
            # Getting the type of 'rcParams' (line 356)
            rcParams_71503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 29), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 356)
            getitem___71504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 29), rcParams_71503, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 356)
            subscript_call_result_71505 = invoke(stypy.reporting.localization.Localization(__file__, 356, 29), getitem___71504, unicode_71502)
            
            # Assigning a type to the variable 'solid_capstyle' (line 356)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 12), 'solid_capstyle', subscript_call_result_71505)

            if more_types_in_union_71501:
                # SSA join for if statement (line 355)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 357)
        # Getting the type of 'solid_joinstyle' (line 357)
        solid_joinstyle_71506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 11), 'solid_joinstyle')
        # Getting the type of 'None' (line 357)
        None_71507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 30), 'None')
        
        (may_be_71508, more_types_in_union_71509) = may_be_none(solid_joinstyle_71506, None_71507)

        if may_be_71508:

            if more_types_in_union_71509:
                # Runtime conditional SSA (line 357)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 358):
            
            # Assigning a Subscript to a Name (line 358):
            
            # Obtaining the type of the subscript
            unicode_71510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 358, 39), 'unicode', u'lines.solid_joinstyle')
            # Getting the type of 'rcParams' (line 358)
            rcParams_71511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 30), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 358)
            getitem___71512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 358, 30), rcParams_71511, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 358)
            subscript_call_result_71513 = invoke(stypy.reporting.localization.Localization(__file__, 358, 30), getitem___71512, unicode_71510)
            
            # Assigning a type to the variable 'solid_joinstyle' (line 358)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 358, 12), 'solid_joinstyle', subscript_call_result_71513)

            if more_types_in_union_71509:
                # SSA join for if statement (line 357)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Call to isinstance(...): (line 360)
        # Processing the call arguments (line 360)
        # Getting the type of 'linestyle' (line 360)
        linestyle_71515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 22), 'linestyle', False)
        # Getting the type of 'six' (line 360)
        six_71516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 33), 'six', False)
        # Obtaining the member 'string_types' of a type (line 360)
        string_types_71517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 360, 33), six_71516, 'string_types')
        # Processing the call keyword arguments (line 360)
        kwargs_71518 = {}
        # Getting the type of 'isinstance' (line 360)
        isinstance_71514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 360)
        isinstance_call_result_71519 = invoke(stypy.reporting.localization.Localization(__file__, 360, 11), isinstance_71514, *[linestyle_71515, string_types_71517], **kwargs_71518)
        
        # Testing the type of an if condition (line 360)
        if_condition_71520 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 360, 8), isinstance_call_result_71519)
        # Assigning a type to the variable 'if_condition_71520' (line 360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 8), 'if_condition_71520', if_condition_71520)
        # SSA begins for if statement (line 360)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 361):
        
        # Assigning a Call to a Name:
        
        # Call to _split_drawstyle_linestyle(...): (line 361)
        # Processing the call arguments (line 361)
        # Getting the type of 'linestyle' (line 361)
        linestyle_71523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 53), 'linestyle', False)
        # Processing the call keyword arguments (line 361)
        kwargs_71524 = {}
        # Getting the type of 'self' (line 361)
        self_71521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 21), 'self', False)
        # Obtaining the member '_split_drawstyle_linestyle' of a type (line 361)
        _split_drawstyle_linestyle_71522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 21), self_71521, '_split_drawstyle_linestyle')
        # Calling _split_drawstyle_linestyle(args, kwargs) (line 361)
        _split_drawstyle_linestyle_call_result_71525 = invoke(stypy.reporting.localization.Localization(__file__, 361, 21), _split_drawstyle_linestyle_71522, *[linestyle_71523], **kwargs_71524)
        
        # Assigning a type to the variable 'call_assignment_70605' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'call_assignment_70605', _split_drawstyle_linestyle_call_result_71525)
        
        # Assigning a Call to a Name (line 361):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_71528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 12), 'int')
        # Processing the call keyword arguments
        kwargs_71529 = {}
        # Getting the type of 'call_assignment_70605' (line 361)
        call_assignment_70605_71526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'call_assignment_70605', False)
        # Obtaining the member '__getitem__' of a type (line 361)
        getitem___71527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 12), call_assignment_70605_71526, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_71530 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___71527, *[int_71528], **kwargs_71529)
        
        # Assigning a type to the variable 'call_assignment_70606' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'call_assignment_70606', getitem___call_result_71530)
        
        # Assigning a Name to a Name (line 361):
        # Getting the type of 'call_assignment_70606' (line 361)
        call_assignment_70606_71531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'call_assignment_70606')
        # Assigning a type to the variable 'ds' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'ds', call_assignment_70606_71531)
        
        # Assigning a Call to a Name (line 361):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_71534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 12), 'int')
        # Processing the call keyword arguments
        kwargs_71535 = {}
        # Getting the type of 'call_assignment_70605' (line 361)
        call_assignment_70605_71532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'call_assignment_70605', False)
        # Obtaining the member '__getitem__' of a type (line 361)
        getitem___71533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 12), call_assignment_70605_71532, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_71536 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___71533, *[int_71534], **kwargs_71535)
        
        # Assigning a type to the variable 'call_assignment_70607' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'call_assignment_70607', getitem___call_result_71536)
        
        # Assigning a Name to a Name (line 361):
        # Getting the type of 'call_assignment_70607' (line 361)
        call_assignment_70607_71537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'call_assignment_70607')
        # Assigning a type to the variable 'ls' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 16), 'ls', call_assignment_70607_71537)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'ds' (line 362)
        ds_71538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 15), 'ds')
        # Getting the type of 'None' (line 362)
        None_71539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 25), 'None')
        # Applying the binary operator 'isnot' (line 362)
        result_is_not_71540 = python_operator(stypy.reporting.localization.Localization(__file__, 362, 15), 'isnot', ds_71538, None_71539)
        
        
        # Getting the type of 'drawstyle' (line 362)
        drawstyle_71541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 34), 'drawstyle')
        # Getting the type of 'None' (line 362)
        None_71542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 51), 'None')
        # Applying the binary operator 'isnot' (line 362)
        result_is_not_71543 = python_operator(stypy.reporting.localization.Localization(__file__, 362, 34), 'isnot', drawstyle_71541, None_71542)
        
        # Applying the binary operator 'and' (line 362)
        result_and_keyword_71544 = python_operator(stypy.reporting.localization.Localization(__file__, 362, 15), 'and', result_is_not_71540, result_is_not_71543)
        
        # Getting the type of 'ds' (line 362)
        ds_71545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 60), 'ds')
        # Getting the type of 'drawstyle' (line 362)
        drawstyle_71546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 66), 'drawstyle')
        # Applying the binary operator '!=' (line 362)
        result_ne_71547 = python_operator(stypy.reporting.localization.Localization(__file__, 362, 60), '!=', ds_71545, drawstyle_71546)
        
        # Applying the binary operator 'and' (line 362)
        result_and_keyword_71548 = python_operator(stypy.reporting.localization.Localization(__file__, 362, 15), 'and', result_and_keyword_71544, result_ne_71547)
        
        # Testing the type of an if condition (line 362)
        if_condition_71549 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 362, 12), result_and_keyword_71548)
        # Assigning a type to the variable 'if_condition_71549' (line 362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 12), 'if_condition_71549', if_condition_71549)
        # SSA begins for if statement (line 362)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 363)
        # Processing the call arguments (line 363)
        
        # Call to format(...): (line 363)
        # Processing the call arguments (line 363)
        # Getting the type of 'drawstyle' (line 364)
        drawstyle_71553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 60), 'drawstyle', False)
        # Getting the type of 'linestyle' (line 365)
        linestyle_71554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 60), 'linestyle', False)
        # Processing the call keyword arguments (line 363)
        kwargs_71555 = {}
        unicode_71551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 363, 33), 'unicode', u'Inconsistent drawstyle ({0!r}) and linestyle ({1!r})')
        # Obtaining the member 'format' of a type (line 363)
        format_71552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 33), unicode_71551, 'format')
        # Calling format(args, kwargs) (line 363)
        format_call_result_71556 = invoke(stypy.reporting.localization.Localization(__file__, 363, 33), format_71552, *[drawstyle_71553, linestyle_71554], **kwargs_71555)
        
        # Processing the call keyword arguments (line 363)
        kwargs_71557 = {}
        # Getting the type of 'ValueError' (line 363)
        ValueError_71550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 363)
        ValueError_call_result_71558 = invoke(stypy.reporting.localization.Localization(__file__, 363, 22), ValueError_71550, *[format_call_result_71556], **kwargs_71557)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 363, 16), ValueError_call_result_71558, 'raise parameter', BaseException)
        # SSA join for if statement (line 362)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 367):
        
        # Assigning a Name to a Name (line 367):
        # Getting the type of 'ls' (line 367)
        ls_71559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 24), 'ls')
        # Assigning a type to the variable 'linestyle' (line 367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 367, 12), 'linestyle', ls_71559)
        
        # Type idiom detected: calculating its left and rigth part (line 369)
        # Getting the type of 'ds' (line 369)
        ds_71560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 12), 'ds')
        # Getting the type of 'None' (line 369)
        None_71561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 25), 'None')
        
        (may_be_71562, more_types_in_union_71563) = may_not_be_none(ds_71560, None_71561)

        if may_be_71562:

            if more_types_in_union_71563:
                # Runtime conditional SSA (line 369)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 370):
            
            # Assigning a Name to a Name (line 370):
            # Getting the type of 'ds' (line 370)
            ds_71564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 28), 'ds')
            # Assigning a type to the variable 'drawstyle' (line 370)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 16), 'drawstyle', ds_71564)

            if more_types_in_union_71563:
                # SSA join for if statement (line 369)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 360)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 372)
        # Getting the type of 'drawstyle' (line 372)
        drawstyle_71565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 11), 'drawstyle')
        # Getting the type of 'None' (line 372)
        None_71566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 24), 'None')
        
        (may_be_71567, more_types_in_union_71568) = may_be_none(drawstyle_71565, None_71566)

        if may_be_71567:

            if more_types_in_union_71568:
                # Runtime conditional SSA (line 372)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Name (line 373):
            
            # Assigning a Str to a Name (line 373):
            unicode_71569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, 24), 'unicode', u'default')
            # Assigning a type to the variable 'drawstyle' (line 373)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 12), 'drawstyle', unicode_71569)

            if more_types_in_union_71568:
                # SSA join for if statement (line 372)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 375):
        
        # Assigning a Name to a Attribute (line 375):
        # Getting the type of 'None' (line 375)
        None_71570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 29), 'None')
        # Getting the type of 'self' (line 375)
        self_71571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 8), 'self')
        # Setting the type of the member '_dashcapstyle' of a type (line 375)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 8), self_71571, '_dashcapstyle', None_71570)
        
        # Assigning a Name to a Attribute (line 376):
        
        # Assigning a Name to a Attribute (line 376):
        # Getting the type of 'None' (line 376)
        None_71572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 30), 'None')
        # Getting the type of 'self' (line 376)
        self_71573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 8), 'self')
        # Setting the type of the member '_dashjoinstyle' of a type (line 376)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 8), self_71573, '_dashjoinstyle', None_71572)
        
        # Assigning a Name to a Attribute (line 377):
        
        # Assigning a Name to a Attribute (line 377):
        # Getting the type of 'None' (line 377)
        None_71574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 31), 'None')
        # Getting the type of 'self' (line 377)
        self_71575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'self')
        # Setting the type of the member '_solidjoinstyle' of a type (line 377)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 8), self_71575, '_solidjoinstyle', None_71574)
        
        # Assigning a Name to a Attribute (line 378):
        
        # Assigning a Name to a Attribute (line 378):
        # Getting the type of 'None' (line 378)
        None_71576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 30), 'None')
        # Getting the type of 'self' (line 378)
        self_71577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 8), 'self')
        # Setting the type of the member '_solidcapstyle' of a type (line 378)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 378, 8), self_71577, '_solidcapstyle', None_71576)
        
        # Call to set_dash_capstyle(...): (line 379)
        # Processing the call arguments (line 379)
        # Getting the type of 'dash_capstyle' (line 379)
        dash_capstyle_71580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 31), 'dash_capstyle', False)
        # Processing the call keyword arguments (line 379)
        kwargs_71581 = {}
        # Getting the type of 'self' (line 379)
        self_71578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 8), 'self', False)
        # Obtaining the member 'set_dash_capstyle' of a type (line 379)
        set_dash_capstyle_71579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 8), self_71578, 'set_dash_capstyle')
        # Calling set_dash_capstyle(args, kwargs) (line 379)
        set_dash_capstyle_call_result_71582 = invoke(stypy.reporting.localization.Localization(__file__, 379, 8), set_dash_capstyle_71579, *[dash_capstyle_71580], **kwargs_71581)
        
        
        # Call to set_dash_joinstyle(...): (line 380)
        # Processing the call arguments (line 380)
        # Getting the type of 'dash_joinstyle' (line 380)
        dash_joinstyle_71585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 32), 'dash_joinstyle', False)
        # Processing the call keyword arguments (line 380)
        kwargs_71586 = {}
        # Getting the type of 'self' (line 380)
        self_71583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 8), 'self', False)
        # Obtaining the member 'set_dash_joinstyle' of a type (line 380)
        set_dash_joinstyle_71584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 380, 8), self_71583, 'set_dash_joinstyle')
        # Calling set_dash_joinstyle(args, kwargs) (line 380)
        set_dash_joinstyle_call_result_71587 = invoke(stypy.reporting.localization.Localization(__file__, 380, 8), set_dash_joinstyle_71584, *[dash_joinstyle_71585], **kwargs_71586)
        
        
        # Call to set_solid_capstyle(...): (line 381)
        # Processing the call arguments (line 381)
        # Getting the type of 'solid_capstyle' (line 381)
        solid_capstyle_71590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 32), 'solid_capstyle', False)
        # Processing the call keyword arguments (line 381)
        kwargs_71591 = {}
        # Getting the type of 'self' (line 381)
        self_71588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 8), 'self', False)
        # Obtaining the member 'set_solid_capstyle' of a type (line 381)
        set_solid_capstyle_71589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 381, 8), self_71588, 'set_solid_capstyle')
        # Calling set_solid_capstyle(args, kwargs) (line 381)
        set_solid_capstyle_call_result_71592 = invoke(stypy.reporting.localization.Localization(__file__, 381, 8), set_solid_capstyle_71589, *[solid_capstyle_71590], **kwargs_71591)
        
        
        # Call to set_solid_joinstyle(...): (line 382)
        # Processing the call arguments (line 382)
        # Getting the type of 'solid_joinstyle' (line 382)
        solid_joinstyle_71595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 33), 'solid_joinstyle', False)
        # Processing the call keyword arguments (line 382)
        kwargs_71596 = {}
        # Getting the type of 'self' (line 382)
        self_71593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 8), 'self', False)
        # Obtaining the member 'set_solid_joinstyle' of a type (line 382)
        set_solid_joinstyle_71594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 382, 8), self_71593, 'set_solid_joinstyle')
        # Calling set_solid_joinstyle(args, kwargs) (line 382)
        set_solid_joinstyle_call_result_71597 = invoke(stypy.reporting.localization.Localization(__file__, 382, 8), set_solid_joinstyle_71594, *[solid_joinstyle_71595], **kwargs_71596)
        
        
        # Assigning a Name to a Attribute (line 384):
        
        # Assigning a Name to a Attribute (line 384):
        # Getting the type of 'None' (line 384)
        None_71598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 27), 'None')
        # Getting the type of 'self' (line 384)
        self_71599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'self')
        # Setting the type of the member '_linestyles' of a type (line 384)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 8), self_71599, '_linestyles', None_71598)
        
        # Assigning a Name to a Attribute (line 385):
        
        # Assigning a Name to a Attribute (line 385):
        # Getting the type of 'None' (line 385)
        None_71600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 26), 'None')
        # Getting the type of 'self' (line 385)
        self_71601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 8), 'self')
        # Setting the type of the member '_drawstyle' of a type (line 385)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 8), self_71601, '_drawstyle', None_71600)
        
        # Assigning a Name to a Attribute (line 386):
        
        # Assigning a Name to a Attribute (line 386):
        # Getting the type of 'linewidth' (line 386)
        linewidth_71602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 26), 'linewidth')
        # Getting the type of 'self' (line 386)
        self_71603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 8), 'self')
        # Setting the type of the member '_linewidth' of a type (line 386)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 8), self_71603, '_linewidth', linewidth_71602)
        
        # Assigning a Name to a Attribute (line 389):
        
        # Assigning a Name to a Attribute (line 389):
        # Getting the type of 'None' (line 389)
        None_71604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 24), 'None')
        # Getting the type of 'self' (line 389)
        self_71605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'self')
        # Setting the type of the member '_dashSeq' of a type (line 389)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 8), self_71605, '_dashSeq', None_71604)
        
        # Assigning a Num to a Attribute (line 390):
        
        # Assigning a Num to a Attribute (line 390):
        int_71606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 390, 27), 'int')
        # Getting the type of 'self' (line 390)
        self_71607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 8), 'self')
        # Setting the type of the member '_dashOffset' of a type (line 390)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 8), self_71607, '_dashOffset', int_71606)
        
        # Assigning a Name to a Attribute (line 393):
        
        # Assigning a Name to a Attribute (line 393):
        # Getting the type of 'None' (line 393)
        None_71608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 27), 'None')
        # Getting the type of 'self' (line 393)
        self_71609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 8), 'self')
        # Setting the type of the member '_us_dashSeq' of a type (line 393)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 8), self_71609, '_us_dashSeq', None_71608)
        
        # Assigning a Num to a Attribute (line 394):
        
        # Assigning a Num to a Attribute (line 394):
        int_71610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 30), 'int')
        # Getting the type of 'self' (line 394)
        self_71611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 8), 'self')
        # Setting the type of the member '_us_dashOffset' of a type (line 394)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 8), self_71611, '_us_dashOffset', int_71610)
        
        # Call to set_linestyle(...): (line 396)
        # Processing the call arguments (line 396)
        # Getting the type of 'linestyle' (line 396)
        linestyle_71614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 27), 'linestyle', False)
        # Processing the call keyword arguments (line 396)
        kwargs_71615 = {}
        # Getting the type of 'self' (line 396)
        self_71612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 8), 'self', False)
        # Obtaining the member 'set_linestyle' of a type (line 396)
        set_linestyle_71613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 8), self_71612, 'set_linestyle')
        # Calling set_linestyle(args, kwargs) (line 396)
        set_linestyle_call_result_71616 = invoke(stypy.reporting.localization.Localization(__file__, 396, 8), set_linestyle_71613, *[linestyle_71614], **kwargs_71615)
        
        
        # Call to set_drawstyle(...): (line 397)
        # Processing the call arguments (line 397)
        # Getting the type of 'drawstyle' (line 397)
        drawstyle_71619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 27), 'drawstyle', False)
        # Processing the call keyword arguments (line 397)
        kwargs_71620 = {}
        # Getting the type of 'self' (line 397)
        self_71617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 8), 'self', False)
        # Obtaining the member 'set_drawstyle' of a type (line 397)
        set_drawstyle_71618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 397, 8), self_71617, 'set_drawstyle')
        # Calling set_drawstyle(args, kwargs) (line 397)
        set_drawstyle_call_result_71621 = invoke(stypy.reporting.localization.Localization(__file__, 397, 8), set_drawstyle_71618, *[drawstyle_71619], **kwargs_71620)
        
        
        # Call to set_linewidth(...): (line 398)
        # Processing the call arguments (line 398)
        # Getting the type of 'linewidth' (line 398)
        linewidth_71624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 27), 'linewidth', False)
        # Processing the call keyword arguments (line 398)
        kwargs_71625 = {}
        # Getting the type of 'self' (line 398)
        self_71622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 8), 'self', False)
        # Obtaining the member 'set_linewidth' of a type (line 398)
        set_linewidth_71623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 398, 8), self_71622, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 398)
        set_linewidth_call_result_71626 = invoke(stypy.reporting.localization.Localization(__file__, 398, 8), set_linewidth_71623, *[linewidth_71624], **kwargs_71625)
        
        
        # Assigning a Name to a Attribute (line 400):
        
        # Assigning a Name to a Attribute (line 400):
        # Getting the type of 'None' (line 400)
        None_71627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 22), 'None')
        # Getting the type of 'self' (line 400)
        self_71628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 8), 'self')
        # Setting the type of the member '_color' of a type (line 400)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 400, 8), self_71628, '_color', None_71627)
        
        # Call to set_color(...): (line 401)
        # Processing the call arguments (line 401)
        # Getting the type of 'color' (line 401)
        color_71631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 23), 'color', False)
        # Processing the call keyword arguments (line 401)
        kwargs_71632 = {}
        # Getting the type of 'self' (line 401)
        self_71629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 8), 'self', False)
        # Obtaining the member 'set_color' of a type (line 401)
        set_color_71630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 401, 8), self_71629, 'set_color')
        # Calling set_color(args, kwargs) (line 401)
        set_color_call_result_71633 = invoke(stypy.reporting.localization.Localization(__file__, 401, 8), set_color_71630, *[color_71631], **kwargs_71632)
        
        
        # Assigning a Call to a Attribute (line 402):
        
        # Assigning a Call to a Attribute (line 402):
        
        # Call to MarkerStyle(...): (line 402)
        # Processing the call arguments (line 402)
        # Getting the type of 'marker' (line 402)
        marker_71635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 35), 'marker', False)
        # Getting the type of 'fillstyle' (line 402)
        fillstyle_71636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 43), 'fillstyle', False)
        # Processing the call keyword arguments (line 402)
        kwargs_71637 = {}
        # Getting the type of 'MarkerStyle' (line 402)
        MarkerStyle_71634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 23), 'MarkerStyle', False)
        # Calling MarkerStyle(args, kwargs) (line 402)
        MarkerStyle_call_result_71638 = invoke(stypy.reporting.localization.Localization(__file__, 402, 23), MarkerStyle_71634, *[marker_71635, fillstyle_71636], **kwargs_71637)
        
        # Getting the type of 'self' (line 402)
        self_71639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 8), 'self')
        # Setting the type of the member '_marker' of a type (line 402)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 8), self_71639, '_marker', MarkerStyle_call_result_71638)
        
        # Assigning a Name to a Attribute (line 404):
        
        # Assigning a Name to a Attribute (line 404):
        # Getting the type of 'None' (line 404)
        None_71640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 26), 'None')
        # Getting the type of 'self' (line 404)
        self_71641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 8), 'self')
        # Setting the type of the member '_markevery' of a type (line 404)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 8), self_71641, '_markevery', None_71640)
        
        # Assigning a Name to a Attribute (line 405):
        
        # Assigning a Name to a Attribute (line 405):
        # Getting the type of 'None' (line 405)
        None_71642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 27), 'None')
        # Getting the type of 'self' (line 405)
        self_71643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 8), 'self')
        # Setting the type of the member '_markersize' of a type (line 405)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 405, 8), self_71643, '_markersize', None_71642)
        
        # Assigning a Name to a Attribute (line 406):
        
        # Assigning a Name to a Attribute (line 406):
        # Getting the type of 'None' (line 406)
        None_71644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 28), 'None')
        # Getting the type of 'self' (line 406)
        self_71645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 8), 'self')
        # Setting the type of the member '_antialiased' of a type (line 406)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 406, 8), self_71645, '_antialiased', None_71644)
        
        # Call to set_markevery(...): (line 408)
        # Processing the call arguments (line 408)
        # Getting the type of 'markevery' (line 408)
        markevery_71648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 27), 'markevery', False)
        # Processing the call keyword arguments (line 408)
        kwargs_71649 = {}
        # Getting the type of 'self' (line 408)
        self_71646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'self', False)
        # Obtaining the member 'set_markevery' of a type (line 408)
        set_markevery_71647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 8), self_71646, 'set_markevery')
        # Calling set_markevery(args, kwargs) (line 408)
        set_markevery_call_result_71650 = invoke(stypy.reporting.localization.Localization(__file__, 408, 8), set_markevery_71647, *[markevery_71648], **kwargs_71649)
        
        
        # Call to set_antialiased(...): (line 409)
        # Processing the call arguments (line 409)
        # Getting the type of 'antialiased' (line 409)
        antialiased_71653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 29), 'antialiased', False)
        # Processing the call keyword arguments (line 409)
        kwargs_71654 = {}
        # Getting the type of 'self' (line 409)
        self_71651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 8), 'self', False)
        # Obtaining the member 'set_antialiased' of a type (line 409)
        set_antialiased_71652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 409, 8), self_71651, 'set_antialiased')
        # Calling set_antialiased(args, kwargs) (line 409)
        set_antialiased_call_result_71655 = invoke(stypy.reporting.localization.Localization(__file__, 409, 8), set_antialiased_71652, *[antialiased_71653], **kwargs_71654)
        
        
        # Call to set_markersize(...): (line 410)
        # Processing the call arguments (line 410)
        # Getting the type of 'markersize' (line 410)
        markersize_71658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 28), 'markersize', False)
        # Processing the call keyword arguments (line 410)
        kwargs_71659 = {}
        # Getting the type of 'self' (line 410)
        self_71656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'self', False)
        # Obtaining the member 'set_markersize' of a type (line 410)
        set_markersize_71657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 8), self_71656, 'set_markersize')
        # Calling set_markersize(args, kwargs) (line 410)
        set_markersize_call_result_71660 = invoke(stypy.reporting.localization.Localization(__file__, 410, 8), set_markersize_71657, *[markersize_71658], **kwargs_71659)
        
        
        # Assigning a Name to a Attribute (line 412):
        
        # Assigning a Name to a Attribute (line 412):
        # Getting the type of 'None' (line 412)
        None_71661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 32), 'None')
        # Getting the type of 'self' (line 412)
        self_71662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 8), 'self')
        # Setting the type of the member '_markeredgecolor' of a type (line 412)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 8), self_71662, '_markeredgecolor', None_71661)
        
        # Assigning a Name to a Attribute (line 413):
        
        # Assigning a Name to a Attribute (line 413):
        # Getting the type of 'None' (line 413)
        None_71663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 32), 'None')
        # Getting the type of 'self' (line 413)
        self_71664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'self')
        # Setting the type of the member '_markeredgewidth' of a type (line 413)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 8), self_71664, '_markeredgewidth', None_71663)
        
        # Assigning a Name to a Attribute (line 414):
        
        # Assigning a Name to a Attribute (line 414):
        # Getting the type of 'None' (line 414)
        None_71665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 32), 'None')
        # Getting the type of 'self' (line 414)
        self_71666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 8), 'self')
        # Setting the type of the member '_markerfacecolor' of a type (line 414)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 8), self_71666, '_markerfacecolor', None_71665)
        
        # Assigning a Name to a Attribute (line 415):
        
        # Assigning a Name to a Attribute (line 415):
        # Getting the type of 'None' (line 415)
        None_71667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 35), 'None')
        # Getting the type of 'self' (line 415)
        self_71668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 8), 'self')
        # Setting the type of the member '_markerfacecoloralt' of a type (line 415)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 415, 8), self_71668, '_markerfacecoloralt', None_71667)
        
        # Call to set_markerfacecolor(...): (line 417)
        # Processing the call arguments (line 417)
        # Getting the type of 'markerfacecolor' (line 417)
        markerfacecolor_71671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 33), 'markerfacecolor', False)
        # Processing the call keyword arguments (line 417)
        kwargs_71672 = {}
        # Getting the type of 'self' (line 417)
        self_71669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 8), 'self', False)
        # Obtaining the member 'set_markerfacecolor' of a type (line 417)
        set_markerfacecolor_71670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 417, 8), self_71669, 'set_markerfacecolor')
        # Calling set_markerfacecolor(args, kwargs) (line 417)
        set_markerfacecolor_call_result_71673 = invoke(stypy.reporting.localization.Localization(__file__, 417, 8), set_markerfacecolor_71670, *[markerfacecolor_71671], **kwargs_71672)
        
        
        # Call to set_markerfacecoloralt(...): (line 418)
        # Processing the call arguments (line 418)
        # Getting the type of 'markerfacecoloralt' (line 418)
        markerfacecoloralt_71676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 36), 'markerfacecoloralt', False)
        # Processing the call keyword arguments (line 418)
        kwargs_71677 = {}
        # Getting the type of 'self' (line 418)
        self_71674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 8), 'self', False)
        # Obtaining the member 'set_markerfacecoloralt' of a type (line 418)
        set_markerfacecoloralt_71675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 8), self_71674, 'set_markerfacecoloralt')
        # Calling set_markerfacecoloralt(args, kwargs) (line 418)
        set_markerfacecoloralt_call_result_71678 = invoke(stypy.reporting.localization.Localization(__file__, 418, 8), set_markerfacecoloralt_71675, *[markerfacecoloralt_71676], **kwargs_71677)
        
        
        # Call to set_markeredgecolor(...): (line 419)
        # Processing the call arguments (line 419)
        # Getting the type of 'markeredgecolor' (line 419)
        markeredgecolor_71681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 33), 'markeredgecolor', False)
        # Processing the call keyword arguments (line 419)
        kwargs_71682 = {}
        # Getting the type of 'self' (line 419)
        self_71679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 8), 'self', False)
        # Obtaining the member 'set_markeredgecolor' of a type (line 419)
        set_markeredgecolor_71680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 419, 8), self_71679, 'set_markeredgecolor')
        # Calling set_markeredgecolor(args, kwargs) (line 419)
        set_markeredgecolor_call_result_71683 = invoke(stypy.reporting.localization.Localization(__file__, 419, 8), set_markeredgecolor_71680, *[markeredgecolor_71681], **kwargs_71682)
        
        
        # Call to set_markeredgewidth(...): (line 420)
        # Processing the call arguments (line 420)
        # Getting the type of 'markeredgewidth' (line 420)
        markeredgewidth_71686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 33), 'markeredgewidth', False)
        # Processing the call keyword arguments (line 420)
        kwargs_71687 = {}
        # Getting the type of 'self' (line 420)
        self_71684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 8), 'self', False)
        # Obtaining the member 'set_markeredgewidth' of a type (line 420)
        set_markeredgewidth_71685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 8), self_71684, 'set_markeredgewidth')
        # Calling set_markeredgewidth(args, kwargs) (line 420)
        set_markeredgewidth_call_result_71688 = invoke(stypy.reporting.localization.Localization(__file__, 420, 8), set_markeredgewidth_71685, *[markeredgewidth_71686], **kwargs_71687)
        
        
        # Assigning a Name to a Attribute (line 422):
        
        # Assigning a Name to a Attribute (line 422):
        # Getting the type of 'None' (line 422)
        None_71689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 30), 'None')
        # Getting the type of 'self' (line 422)
        self_71690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 8), 'self')
        # Setting the type of the member 'verticalOffset' of a type (line 422)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 8), self_71690, 'verticalOffset', None_71689)
        
        # Call to update(...): (line 426)
        # Processing the call arguments (line 426)
        # Getting the type of 'kwargs' (line 426)
        kwargs_71693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 20), 'kwargs', False)
        # Processing the call keyword arguments (line 426)
        kwargs_71694 = {}
        # Getting the type of 'self' (line 426)
        self_71691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'self', False)
        # Obtaining the member 'update' of a type (line 426)
        update_71692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 8), self_71691, 'update')
        # Calling update(args, kwargs) (line 426)
        update_call_result_71695 = invoke(stypy.reporting.localization.Localization(__file__, 426, 8), update_71692, *[kwargs_71693], **kwargs_71694)
        
        
        # Assigning a Name to a Attribute (line 427):
        
        # Assigning a Name to a Attribute (line 427):
        # Getting the type of 'pickradius' (line 427)
        pickradius_71696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 26), 'pickradius')
        # Getting the type of 'self' (line 427)
        self_71697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 8), 'self')
        # Setting the type of the member 'pickradius' of a type (line 427)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 8), self_71697, 'pickradius', pickradius_71696)
        
        # Assigning a Num to a Attribute (line 428):
        
        # Assigning a Num to a Attribute (line 428):
        int_71698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 26), 'int')
        # Getting the type of 'self' (line 428)
        self_71699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 8), 'self')
        # Setting the type of the member 'ind_offset' of a type (line 428)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 8), self_71699, 'ind_offset', int_71698)
        
        
        # Call to is_numlike(...): (line 429)
        # Processing the call arguments (line 429)
        # Getting the type of 'self' (line 429)
        self_71701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 22), 'self', False)
        # Obtaining the member '_picker' of a type (line 429)
        _picker_71702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 429, 22), self_71701, '_picker')
        # Processing the call keyword arguments (line 429)
        kwargs_71703 = {}
        # Getting the type of 'is_numlike' (line 429)
        is_numlike_71700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 11), 'is_numlike', False)
        # Calling is_numlike(args, kwargs) (line 429)
        is_numlike_call_result_71704 = invoke(stypy.reporting.localization.Localization(__file__, 429, 11), is_numlike_71700, *[_picker_71702], **kwargs_71703)
        
        # Testing the type of an if condition (line 429)
        if_condition_71705 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 429, 8), is_numlike_call_result_71704)
        # Assigning a type to the variable 'if_condition_71705' (line 429)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 429, 8), 'if_condition_71705', if_condition_71705)
        # SSA begins for if statement (line 429)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 430):
        
        # Assigning a Attribute to a Attribute (line 430):
        # Getting the type of 'self' (line 430)
        self_71706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 30), 'self')
        # Obtaining the member '_picker' of a type (line 430)
        _picker_71707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 30), self_71706, '_picker')
        # Getting the type of 'self' (line 430)
        self_71708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 12), 'self')
        # Setting the type of the member 'pickradius' of a type (line 430)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 12), self_71708, 'pickradius', _picker_71707)
        # SSA join for if statement (line 429)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 432):
        
        # Assigning a Call to a Attribute (line 432):
        
        # Call to asarray(...): (line 432)
        # Processing the call arguments (line 432)
        
        # Obtaining an instance of the builtin type 'list' (line 432)
        list_71711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 432, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 432)
        
        # Processing the call keyword arguments (line 432)
        kwargs_71712 = {}
        # Getting the type of 'np' (line 432)
        np_71709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 22), 'np', False)
        # Obtaining the member 'asarray' of a type (line 432)
        asarray_71710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 432, 22), np_71709, 'asarray')
        # Calling asarray(args, kwargs) (line 432)
        asarray_call_result_71713 = invoke(stypy.reporting.localization.Localization(__file__, 432, 22), asarray_71710, *[list_71711], **kwargs_71712)
        
        # Getting the type of 'self' (line 432)
        self_71714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 8), 'self')
        # Setting the type of the member '_xorig' of a type (line 432)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 432, 8), self_71714, '_xorig', asarray_call_result_71713)
        
        # Assigning a Call to a Attribute (line 433):
        
        # Assigning a Call to a Attribute (line 433):
        
        # Call to asarray(...): (line 433)
        # Processing the call arguments (line 433)
        
        # Obtaining an instance of the builtin type 'list' (line 433)
        list_71717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 433, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 433)
        
        # Processing the call keyword arguments (line 433)
        kwargs_71718 = {}
        # Getting the type of 'np' (line 433)
        np_71715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 22), 'np', False)
        # Obtaining the member 'asarray' of a type (line 433)
        asarray_71716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 22), np_71715, 'asarray')
        # Calling asarray(args, kwargs) (line 433)
        asarray_call_result_71719 = invoke(stypy.reporting.localization.Localization(__file__, 433, 22), asarray_71716, *[list_71717], **kwargs_71718)
        
        # Getting the type of 'self' (line 433)
        self_71720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 8), 'self')
        # Setting the type of the member '_yorig' of a type (line 433)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 8), self_71720, '_yorig', asarray_call_result_71719)
        
        # Assigning a Name to a Attribute (line 434):
        
        # Assigning a Name to a Attribute (line 434):
        # Getting the type of 'True' (line 434)
        True_71721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 25), 'True')
        # Getting the type of 'self' (line 434)
        self_71722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 8), 'self')
        # Setting the type of the member '_invalidx' of a type (line 434)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 8), self_71722, '_invalidx', True_71721)
        
        # Assigning a Name to a Attribute (line 435):
        
        # Assigning a Name to a Attribute (line 435):
        # Getting the type of 'True' (line 435)
        True_71723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 25), 'True')
        # Getting the type of 'self' (line 435)
        self_71724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'self')
        # Setting the type of the member '_invalidy' of a type (line 435)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 8), self_71724, '_invalidy', True_71723)
        
        # Assigning a Name to a Attribute (line 436):
        
        # Assigning a Name to a Attribute (line 436):
        # Getting the type of 'None' (line 436)
        None_71725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 18), 'None')
        # Getting the type of 'self' (line 436)
        self_71726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 8), 'self')
        # Setting the type of the member '_x' of a type (line 436)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 436, 8), self_71726, '_x', None_71725)
        
        # Assigning a Name to a Attribute (line 437):
        
        # Assigning a Name to a Attribute (line 437):
        # Getting the type of 'None' (line 437)
        None_71727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 18), 'None')
        # Getting the type of 'self' (line 437)
        self_71728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 8), 'self')
        # Setting the type of the member '_y' of a type (line 437)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 437, 8), self_71728, '_y', None_71727)
        
        # Assigning a Name to a Attribute (line 438):
        
        # Assigning a Name to a Attribute (line 438):
        # Getting the type of 'None' (line 438)
        None_71729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 19), 'None')
        # Getting the type of 'self' (line 438)
        self_71730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 8), 'self')
        # Setting the type of the member '_xy' of a type (line 438)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 438, 8), self_71730, '_xy', None_71729)
        
        # Assigning a Name to a Attribute (line 439):
        
        # Assigning a Name to a Attribute (line 439):
        # Getting the type of 'None' (line 439)
        None_71731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 21), 'None')
        # Getting the type of 'self' (line 439)
        self_71732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 8), 'self')
        # Setting the type of the member '_path' of a type (line 439)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 439, 8), self_71732, '_path', None_71731)
        
        # Assigning a Name to a Attribute (line 440):
        
        # Assigning a Name to a Attribute (line 440):
        # Getting the type of 'None' (line 440)
        None_71733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 33), 'None')
        # Getting the type of 'self' (line 440)
        self_71734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 8), 'self')
        # Setting the type of the member '_transformed_path' of a type (line 440)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 440, 8), self_71734, '_transformed_path', None_71733)
        
        # Assigning a Name to a Attribute (line 441):
        
        # Assigning a Name to a Attribute (line 441):
        # Getting the type of 'False' (line 441)
        False_71735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 25), 'False')
        # Getting the type of 'self' (line 441)
        self_71736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 8), 'self')
        # Setting the type of the member '_subslice' of a type (line 441)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 441, 8), self_71736, '_subslice', False_71735)
        
        # Assigning a Name to a Attribute (line 442):
        
        # Assigning a Name to a Attribute (line 442):
        # Getting the type of 'None' (line 442)
        None_71737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 25), 'None')
        # Getting the type of 'self' (line 442)
        self_71738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 8), 'self')
        # Setting the type of the member '_x_filled' of a type (line 442)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 442, 8), self_71738, '_x_filled', None_71737)
        
        # Call to set_data(...): (line 444)
        # Processing the call arguments (line 444)
        # Getting the type of 'xdata' (line 444)
        xdata_71741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 22), 'xdata', False)
        # Getting the type of 'ydata' (line 444)
        ydata_71742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 29), 'ydata', False)
        # Processing the call keyword arguments (line 444)
        kwargs_71743 = {}
        # Getting the type of 'self' (line 444)
        self_71739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 8), 'self', False)
        # Obtaining the member 'set_data' of a type (line 444)
        set_data_71740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 8), self_71739, 'set_data')
        # Calling set_data(args, kwargs) (line 444)
        set_data_call_result_71744 = invoke(stypy.reporting.localization.Localization(__file__, 444, 8), set_data_71740, *[xdata_71741, ydata_71742], **kwargs_71743)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def contains(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains'
        module_type_store = module_type_store.open_function_context('contains', 446, 4, False)
        # Assigning a type to the variable 'self' (line 447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.contains.__dict__.__setitem__('stypy_localization', localization)
        Line2D.contains.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.contains.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.contains.__dict__.__setitem__('stypy_function_name', 'Line2D.contains')
        Line2D.contains.__dict__.__setitem__('stypy_param_names_list', ['mouseevent'])
        Line2D.contains.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.contains.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.contains.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.contains.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.contains.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.contains.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.contains', ['mouseevent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains', localization, ['mouseevent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains(...)' code ##################

        unicode_71745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 460, (-1)), 'unicode', u"\n        Test whether the mouse event occurred on the line.  The pick\n        radius determines the precision of the location test (usually\n        within five points of the value).  Use\n        :meth:`~matplotlib.lines.Line2D.get_pickradius` or\n        :meth:`~matplotlib.lines.Line2D.set_pickradius` to view or\n        modify it.\n\n        Returns *True* if any values are within the radius along with\n        ``{'ind': pointlist}``, where *pointlist* is the set of points\n        within the radius.\n\n        TODO: sort returned indices by distance\n        ")
        
        
        # Call to callable(...): (line 461)
        # Processing the call arguments (line 461)
        # Getting the type of 'self' (line 461)
        self_71747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 20), 'self', False)
        # Obtaining the member '_contains' of a type (line 461)
        _contains_71748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 20), self_71747, '_contains')
        # Processing the call keyword arguments (line 461)
        kwargs_71749 = {}
        # Getting the type of 'callable' (line 461)
        callable_71746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 11), 'callable', False)
        # Calling callable(args, kwargs) (line 461)
        callable_call_result_71750 = invoke(stypy.reporting.localization.Localization(__file__, 461, 11), callable_71746, *[_contains_71748], **kwargs_71749)
        
        # Testing the type of an if condition (line 461)
        if_condition_71751 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 461, 8), callable_call_result_71750)
        # Assigning a type to the variable 'if_condition_71751' (line 461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 461, 8), 'if_condition_71751', if_condition_71751)
        # SSA begins for if statement (line 461)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _contains(...): (line 462)
        # Processing the call arguments (line 462)
        # Getting the type of 'self' (line 462)
        self_71754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 34), 'self', False)
        # Getting the type of 'mouseevent' (line 462)
        mouseevent_71755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 40), 'mouseevent', False)
        # Processing the call keyword arguments (line 462)
        kwargs_71756 = {}
        # Getting the type of 'self' (line 462)
        self_71752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 19), 'self', False)
        # Obtaining the member '_contains' of a type (line 462)
        _contains_71753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 462, 19), self_71752, '_contains')
        # Calling _contains(args, kwargs) (line 462)
        _contains_call_result_71757 = invoke(stypy.reporting.localization.Localization(__file__, 462, 19), _contains_71753, *[self_71754, mouseevent_71755], **kwargs_71756)
        
        # Assigning a type to the variable 'stypy_return_type' (line 462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 12), 'stypy_return_type', _contains_call_result_71757)
        # SSA join for if statement (line 461)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to is_numlike(...): (line 464)
        # Processing the call arguments (line 464)
        # Getting the type of 'self' (line 464)
        self_71759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 26), 'self', False)
        # Obtaining the member 'pickradius' of a type (line 464)
        pickradius_71760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 26), self_71759, 'pickradius')
        # Processing the call keyword arguments (line 464)
        kwargs_71761 = {}
        # Getting the type of 'is_numlike' (line 464)
        is_numlike_71758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 15), 'is_numlike', False)
        # Calling is_numlike(args, kwargs) (line 464)
        is_numlike_call_result_71762 = invoke(stypy.reporting.localization.Localization(__file__, 464, 15), is_numlike_71758, *[pickradius_71760], **kwargs_71761)
        
        # Applying the 'not' unary operator (line 464)
        result_not__71763 = python_operator(stypy.reporting.localization.Localization(__file__, 464, 11), 'not', is_numlike_call_result_71762)
        
        # Testing the type of an if condition (line 464)
        if_condition_71764 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 464, 8), result_not__71763)
        # Assigning a type to the variable 'if_condition_71764' (line 464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 8), 'if_condition_71764', if_condition_71764)
        # SSA begins for if statement (line 464)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 465)
        # Processing the call arguments (line 465)
        unicode_71766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 465, 29), 'unicode', u'pick radius should be a distance')
        # Processing the call keyword arguments (line 465)
        kwargs_71767 = {}
        # Getting the type of 'ValueError' (line 465)
        ValueError_71765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 465)
        ValueError_call_result_71768 = invoke(stypy.reporting.localization.Localization(__file__, 465, 18), ValueError_71765, *[unicode_71766], **kwargs_71767)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 465, 12), ValueError_call_result_71768, 'raise parameter', BaseException)
        # SSA join for if statement (line 464)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 468)
        self_71769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 11), 'self')
        # Obtaining the member '_invalidy' of a type (line 468)
        _invalidy_71770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 11), self_71769, '_invalidy')
        # Getting the type of 'self' (line 468)
        self_71771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 29), 'self')
        # Obtaining the member '_invalidx' of a type (line 468)
        _invalidx_71772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 29), self_71771, '_invalidx')
        # Applying the binary operator 'or' (line 468)
        result_or_keyword_71773 = python_operator(stypy.reporting.localization.Localization(__file__, 468, 11), 'or', _invalidy_71770, _invalidx_71772)
        
        # Testing the type of an if condition (line 468)
        if_condition_71774 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 468, 8), result_or_keyword_71773)
        # Assigning a type to the variable 'if_condition_71774' (line 468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 8), 'if_condition_71774', if_condition_71774)
        # SSA begins for if statement (line 468)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to recache(...): (line 469)
        # Processing the call keyword arguments (line 469)
        kwargs_71777 = {}
        # Getting the type of 'self' (line 469)
        self_71775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 12), 'self', False)
        # Obtaining the member 'recache' of a type (line 469)
        recache_71776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 12), self_71775, 'recache')
        # Calling recache(args, kwargs) (line 469)
        recache_call_result_71778 = invoke(stypy.reporting.localization.Localization(__file__, 469, 12), recache_71776, *[], **kwargs_71777)
        
        # SSA join for if statement (line 468)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to len(...): (line 470)
        # Processing the call arguments (line 470)
        # Getting the type of 'self' (line 470)
        self_71780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 15), 'self', False)
        # Obtaining the member '_xy' of a type (line 470)
        _xy_71781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 15), self_71780, '_xy')
        # Processing the call keyword arguments (line 470)
        kwargs_71782 = {}
        # Getting the type of 'len' (line 470)
        len_71779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 11), 'len', False)
        # Calling len(args, kwargs) (line 470)
        len_call_result_71783 = invoke(stypy.reporting.localization.Localization(__file__, 470, 11), len_71779, *[_xy_71781], **kwargs_71782)
        
        int_71784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 28), 'int')
        # Applying the binary operator '==' (line 470)
        result_eq_71785 = python_operator(stypy.reporting.localization.Localization(__file__, 470, 11), '==', len_call_result_71783, int_71784)
        
        # Testing the type of an if condition (line 470)
        if_condition_71786 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 470, 8), result_eq_71785)
        # Assigning a type to the variable 'if_condition_71786' (line 470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 8), 'if_condition_71786', if_condition_71786)
        # SSA begins for if statement (line 470)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 471)
        tuple_71787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 471, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 471)
        # Adding element type (line 471)
        # Getting the type of 'False' (line 471)
        False_71788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 19), 'False')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 471, 19), tuple_71787, False_71788)
        # Adding element type (line 471)
        
        # Obtaining an instance of the builtin type 'dict' (line 471)
        dict_71789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 471, 26), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 471)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 471, 19), tuple_71787, dict_71789)
        
        # Assigning a type to the variable 'stypy_return_type' (line 471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 471, 12), 'stypy_return_type', tuple_71787)
        # SSA join for if statement (line 470)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 474):
        
        # Assigning a Call to a Name (line 474):
        
        # Call to _get_transformed_path(...): (line 474)
        # Processing the call keyword arguments (line 474)
        kwargs_71792 = {}
        # Getting the type of 'self' (line 474)
        self_71790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 27), 'self', False)
        # Obtaining the member '_get_transformed_path' of a type (line 474)
        _get_transformed_path_71791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 27), self_71790, '_get_transformed_path')
        # Calling _get_transformed_path(args, kwargs) (line 474)
        _get_transformed_path_call_result_71793 = invoke(stypy.reporting.localization.Localization(__file__, 474, 27), _get_transformed_path_71791, *[], **kwargs_71792)
        
        # Assigning a type to the variable 'transformed_path' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'transformed_path', _get_transformed_path_call_result_71793)
        
        # Assigning a Call to a Tuple (line 475):
        
        # Assigning a Call to a Name:
        
        # Call to get_transformed_path_and_affine(...): (line 475)
        # Processing the call keyword arguments (line 475)
        kwargs_71796 = {}
        # Getting the type of 'transformed_path' (line 475)
        transformed_path_71794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 23), 'transformed_path', False)
        # Obtaining the member 'get_transformed_path_and_affine' of a type (line 475)
        get_transformed_path_and_affine_71795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 23), transformed_path_71794, 'get_transformed_path_and_affine')
        # Calling get_transformed_path_and_affine(args, kwargs) (line 475)
        get_transformed_path_and_affine_call_result_71797 = invoke(stypy.reporting.localization.Localization(__file__, 475, 23), get_transformed_path_and_affine_71795, *[], **kwargs_71796)
        
        # Assigning a type to the variable 'call_assignment_70608' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'call_assignment_70608', get_transformed_path_and_affine_call_result_71797)
        
        # Assigning a Call to a Name (line 475):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_71800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 8), 'int')
        # Processing the call keyword arguments
        kwargs_71801 = {}
        # Getting the type of 'call_assignment_70608' (line 475)
        call_assignment_70608_71798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'call_assignment_70608', False)
        # Obtaining the member '__getitem__' of a type (line 475)
        getitem___71799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 8), call_assignment_70608_71798, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_71802 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___71799, *[int_71800], **kwargs_71801)
        
        # Assigning a type to the variable 'call_assignment_70609' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'call_assignment_70609', getitem___call_result_71802)
        
        # Assigning a Name to a Name (line 475):
        # Getting the type of 'call_assignment_70609' (line 475)
        call_assignment_70609_71803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'call_assignment_70609')
        # Assigning a type to the variable 'path' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'path', call_assignment_70609_71803)
        
        # Assigning a Call to a Name (line 475):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_71806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 8), 'int')
        # Processing the call keyword arguments
        kwargs_71807 = {}
        # Getting the type of 'call_assignment_70608' (line 475)
        call_assignment_70608_71804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'call_assignment_70608', False)
        # Obtaining the member '__getitem__' of a type (line 475)
        getitem___71805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 8), call_assignment_70608_71804, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_71808 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___71805, *[int_71806], **kwargs_71807)
        
        # Assigning a type to the variable 'call_assignment_70610' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'call_assignment_70610', getitem___call_result_71808)
        
        # Assigning a Name to a Name (line 475):
        # Getting the type of 'call_assignment_70610' (line 475)
        call_assignment_70610_71809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'call_assignment_70610')
        # Assigning a type to the variable 'affine' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 14), 'affine', call_assignment_70610_71809)
        
        # Assigning a Call to a Name (line 476):
        
        # Assigning a Call to a Name (line 476):
        
        # Call to transform_path(...): (line 476)
        # Processing the call arguments (line 476)
        # Getting the type of 'path' (line 476)
        path_71812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 37), 'path', False)
        # Processing the call keyword arguments (line 476)
        kwargs_71813 = {}
        # Getting the type of 'affine' (line 476)
        affine_71810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 15), 'affine', False)
        # Obtaining the member 'transform_path' of a type (line 476)
        transform_path_71811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 476, 15), affine_71810, 'transform_path')
        # Calling transform_path(args, kwargs) (line 476)
        transform_path_call_result_71814 = invoke(stypy.reporting.localization.Localization(__file__, 476, 15), transform_path_71811, *[path_71812], **kwargs_71813)
        
        # Assigning a type to the variable 'path' (line 476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 476, 8), 'path', transform_path_call_result_71814)
        
        # Assigning a Attribute to a Name (line 477):
        
        # Assigning a Attribute to a Name (line 477):
        # Getting the type of 'path' (line 477)
        path_71815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 13), 'path')
        # Obtaining the member 'vertices' of a type (line 477)
        vertices_71816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 13), path_71815, 'vertices')
        # Assigning a type to the variable 'xy' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 8), 'xy', vertices_71816)
        
        # Assigning a Subscript to a Name (line 478):
        
        # Assigning a Subscript to a Name (line 478):
        
        # Obtaining the type of the subscript
        slice_71817 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 478, 13), None, None, None)
        int_71818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, 19), 'int')
        # Getting the type of 'xy' (line 478)
        xy_71819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 13), 'xy')
        # Obtaining the member '__getitem__' of a type (line 478)
        getitem___71820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 478, 13), xy_71819, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 478)
        subscript_call_result_71821 = invoke(stypy.reporting.localization.Localization(__file__, 478, 13), getitem___71820, (slice_71817, int_71818))
        
        # Assigning a type to the variable 'xt' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 8), 'xt', subscript_call_result_71821)
        
        # Assigning a Subscript to a Name (line 479):
        
        # Assigning a Subscript to a Name (line 479):
        
        # Obtaining the type of the subscript
        slice_71822 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 479, 13), None, None, None)
        int_71823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 479, 19), 'int')
        # Getting the type of 'xy' (line 479)
        xy_71824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 13), 'xy')
        # Obtaining the member '__getitem__' of a type (line 479)
        getitem___71825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 479, 13), xy_71824, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 479)
        subscript_call_result_71826 = invoke(stypy.reporting.localization.Localization(__file__, 479, 13), getitem___71825, (slice_71822, int_71823))
        
        # Assigning a type to the variable 'yt' (line 479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 479, 8), 'yt', subscript_call_result_71826)
        
        # Type idiom detected: calculating its left and rigth part (line 482)
        # Getting the type of 'self' (line 482)
        self_71827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 11), 'self')
        # Obtaining the member 'figure' of a type (line 482)
        figure_71828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 11), self_71827, 'figure')
        # Getting the type of 'None' (line 482)
        None_71829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 26), 'None')
        
        (may_be_71830, more_types_in_union_71831) = may_be_none(figure_71828, None_71829)

        if may_be_71830:

            if more_types_in_union_71831:
                # Runtime conditional SSA (line 482)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to warn(...): (line 483)
            # Processing the call arguments (line 483)
            unicode_71834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 26), 'unicode', u'no figure set when check if mouse is on line')
            # Processing the call keyword arguments (line 483)
            kwargs_71835 = {}
            # Getting the type of 'warnings' (line 483)
            warnings_71832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 12), 'warnings', False)
            # Obtaining the member 'warn' of a type (line 483)
            warn_71833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 12), warnings_71832, 'warn')
            # Calling warn(args, kwargs) (line 483)
            warn_call_result_71836 = invoke(stypy.reporting.localization.Localization(__file__, 483, 12), warn_71833, *[unicode_71834], **kwargs_71835)
            
            
            # Assigning a Attribute to a Name (line 484):
            
            # Assigning a Attribute to a Name (line 484):
            # Getting the type of 'self' (line 484)
            self_71837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 21), 'self')
            # Obtaining the member 'pickradius' of a type (line 484)
            pickradius_71838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 21), self_71837, 'pickradius')
            # Assigning a type to the variable 'pixels' (line 484)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 12), 'pixels', pickradius_71838)

            if more_types_in_union_71831:
                # Runtime conditional SSA for else branch (line 482)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_71830) or more_types_in_union_71831):
            
            # Assigning a BinOp to a Name (line 486):
            
            # Assigning a BinOp to a Name (line 486):
            # Getting the type of 'self' (line 486)
            self_71839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 21), 'self')
            # Obtaining the member 'figure' of a type (line 486)
            figure_71840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 21), self_71839, 'figure')
            # Obtaining the member 'dpi' of a type (line 486)
            dpi_71841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 21), figure_71840, 'dpi')
            float_71842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 486, 39), 'float')
            # Applying the binary operator 'div' (line 486)
            result_div_71843 = python_operator(stypy.reporting.localization.Localization(__file__, 486, 21), 'div', dpi_71841, float_71842)
            
            # Getting the type of 'self' (line 486)
            self_71844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 45), 'self')
            # Obtaining the member 'pickradius' of a type (line 486)
            pickradius_71845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 45), self_71844, 'pickradius')
            # Applying the binary operator '*' (line 486)
            result_mul_71846 = python_operator(stypy.reporting.localization.Localization(__file__, 486, 43), '*', result_div_71843, pickradius_71845)
            
            # Assigning a type to the variable 'pixels' (line 486)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 486, 12), 'pixels', result_mul_71846)

            if (may_be_71830 and more_types_in_union_71831):
                # SSA join for if statement (line 482)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to errstate(...): (line 493)
        # Processing the call keyword arguments (line 493)
        unicode_71849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 493, 29), 'unicode', u'ignore')
        keyword_71850 = unicode_71849
        kwargs_71851 = {'all': keyword_71850}
        # Getting the type of 'np' (line 493)
        np_71847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 13), 'np', False)
        # Obtaining the member 'errstate' of a type (line 493)
        errstate_71848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 13), np_71847, 'errstate')
        # Calling errstate(args, kwargs) (line 493)
        errstate_call_result_71852 = invoke(stypy.reporting.localization.Localization(__file__, 493, 13), errstate_71848, *[], **kwargs_71851)
        
        with_71853 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 493, 13), errstate_call_result_71852, 'with parameter', '__enter__', '__exit__')

        if with_71853:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 493)
            enter___71854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 13), errstate_call_result_71852, '__enter__')
            with_enter_71855 = invoke(stypy.reporting.localization.Localization(__file__, 493, 13), enter___71854)
            
            
            # Getting the type of 'self' (line 495)
            self_71856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 15), 'self')
            # Obtaining the member '_linestyle' of a type (line 495)
            _linestyle_71857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 15), self_71856, '_linestyle')
            
            # Obtaining an instance of the builtin type 'list' (line 495)
            list_71858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, 34), 'list')
            # Adding type elements to the builtin type 'list' instance (line 495)
            # Adding element type (line 495)
            unicode_71859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, 35), 'unicode', u'None')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 495, 34), list_71858, unicode_71859)
            # Adding element type (line 495)
            # Getting the type of 'None' (line 495)
            None_71860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 43), 'None')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 495, 34), list_71858, None_71860)
            
            # Applying the binary operator 'in' (line 495)
            result_contains_71861 = python_operator(stypy.reporting.localization.Localization(__file__, 495, 15), 'in', _linestyle_71857, list_71858)
            
            # Testing the type of an if condition (line 495)
            if_condition_71862 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 495, 12), result_contains_71861)
            # Assigning a type to the variable 'if_condition_71862' (line 495)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 12), 'if_condition_71862', if_condition_71862)
            # SSA begins for if statement (line 495)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 497):
            
            # Assigning a BinOp to a Name (line 497):
            # Getting the type of 'xt' (line 497)
            xt_71863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 21), 'xt')
            # Getting the type of 'mouseevent' (line 497)
            mouseevent_71864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 26), 'mouseevent')
            # Obtaining the member 'x' of a type (line 497)
            x_71865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 26), mouseevent_71864, 'x')
            # Applying the binary operator '-' (line 497)
            result_sub_71866 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 21), '-', xt_71863, x_71865)
            
            int_71867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 497, 43), 'int')
            # Applying the binary operator '**' (line 497)
            result_pow_71868 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 20), '**', result_sub_71866, int_71867)
            
            # Getting the type of 'yt' (line 497)
            yt_71869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 48), 'yt')
            # Getting the type of 'mouseevent' (line 497)
            mouseevent_71870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 53), 'mouseevent')
            # Obtaining the member 'y' of a type (line 497)
            y_71871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 53), mouseevent_71870, 'y')
            # Applying the binary operator '-' (line 497)
            result_sub_71872 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 48), '-', yt_71869, y_71871)
            
            int_71873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 497, 70), 'int')
            # Applying the binary operator '**' (line 497)
            result_pow_71874 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 47), '**', result_sub_71872, int_71873)
            
            # Applying the binary operator '+' (line 497)
            result_add_71875 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 20), '+', result_pow_71868, result_pow_71874)
            
            # Assigning a type to the variable 'd' (line 497)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 16), 'd', result_add_71875)
            
            # Assigning a Call to a Tuple (line 498):
            
            # Assigning a Call to a Name:
            
            # Call to nonzero(...): (line 498)
            # Processing the call arguments (line 498)
            
            # Call to less_equal(...): (line 498)
            # Processing the call arguments (line 498)
            # Getting the type of 'd' (line 498)
            d_71880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 48), 'd', False)
            # Getting the type of 'pixels' (line 498)
            pixels_71881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 51), 'pixels', False)
            int_71882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 498, 61), 'int')
            # Applying the binary operator '**' (line 498)
            result_pow_71883 = python_operator(stypy.reporting.localization.Localization(__file__, 498, 51), '**', pixels_71881, int_71882)
            
            # Processing the call keyword arguments (line 498)
            kwargs_71884 = {}
            # Getting the type of 'np' (line 498)
            np_71878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 34), 'np', False)
            # Obtaining the member 'less_equal' of a type (line 498)
            less_equal_71879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 498, 34), np_71878, 'less_equal')
            # Calling less_equal(args, kwargs) (line 498)
            less_equal_call_result_71885 = invoke(stypy.reporting.localization.Localization(__file__, 498, 34), less_equal_71879, *[d_71880, result_pow_71883], **kwargs_71884)
            
            # Processing the call keyword arguments (line 498)
            kwargs_71886 = {}
            # Getting the type of 'np' (line 498)
            np_71876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 23), 'np', False)
            # Obtaining the member 'nonzero' of a type (line 498)
            nonzero_71877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 498, 23), np_71876, 'nonzero')
            # Calling nonzero(args, kwargs) (line 498)
            nonzero_call_result_71887 = invoke(stypy.reporting.localization.Localization(__file__, 498, 23), nonzero_71877, *[less_equal_call_result_71885], **kwargs_71886)
            
            # Assigning a type to the variable 'call_assignment_70611' (line 498)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 16), 'call_assignment_70611', nonzero_call_result_71887)
            
            # Assigning a Call to a Name (line 498):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_71890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 498, 16), 'int')
            # Processing the call keyword arguments
            kwargs_71891 = {}
            # Getting the type of 'call_assignment_70611' (line 498)
            call_assignment_70611_71888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 16), 'call_assignment_70611', False)
            # Obtaining the member '__getitem__' of a type (line 498)
            getitem___71889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 498, 16), call_assignment_70611_71888, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_71892 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___71889, *[int_71890], **kwargs_71891)
            
            # Assigning a type to the variable 'call_assignment_70612' (line 498)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 16), 'call_assignment_70612', getitem___call_result_71892)
            
            # Assigning a Name to a Name (line 498):
            # Getting the type of 'call_assignment_70612' (line 498)
            call_assignment_70612_71893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 16), 'call_assignment_70612')
            # Assigning a type to the variable 'ind' (line 498)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 16), 'ind', call_assignment_70612_71893)
            # SSA branch for the else part of an if statement (line 495)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Name (line 501):
            
            # Assigning a Call to a Name (line 501):
            
            # Call to segment_hits(...): (line 501)
            # Processing the call arguments (line 501)
            # Getting the type of 'mouseevent' (line 501)
            mouseevent_71895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 35), 'mouseevent', False)
            # Obtaining the member 'x' of a type (line 501)
            x_71896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 501, 35), mouseevent_71895, 'x')
            # Getting the type of 'mouseevent' (line 501)
            mouseevent_71897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 49), 'mouseevent', False)
            # Obtaining the member 'y' of a type (line 501)
            y_71898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 501, 49), mouseevent_71897, 'y')
            # Getting the type of 'xt' (line 501)
            xt_71899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 63), 'xt', False)
            # Getting the type of 'yt' (line 501)
            yt_71900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 67), 'yt', False)
            # Getting the type of 'pixels' (line 501)
            pixels_71901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 71), 'pixels', False)
            # Processing the call keyword arguments (line 501)
            kwargs_71902 = {}
            # Getting the type of 'segment_hits' (line 501)
            segment_hits_71894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 22), 'segment_hits', False)
            # Calling segment_hits(args, kwargs) (line 501)
            segment_hits_call_result_71903 = invoke(stypy.reporting.localization.Localization(__file__, 501, 22), segment_hits_71894, *[x_71896, y_71898, xt_71899, yt_71900, pixels_71901], **kwargs_71902)
            
            # Assigning a type to the variable 'ind' (line 501)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 501, 16), 'ind', segment_hits_call_result_71903)
            
            
            # Call to startswith(...): (line 502)
            # Processing the call arguments (line 502)
            unicode_71907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 46), 'unicode', u'steps')
            # Processing the call keyword arguments (line 502)
            kwargs_71908 = {}
            # Getting the type of 'self' (line 502)
            self_71904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 19), 'self', False)
            # Obtaining the member '_drawstyle' of a type (line 502)
            _drawstyle_71905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 502, 19), self_71904, '_drawstyle')
            # Obtaining the member 'startswith' of a type (line 502)
            startswith_71906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 502, 19), _drawstyle_71905, 'startswith')
            # Calling startswith(args, kwargs) (line 502)
            startswith_call_result_71909 = invoke(stypy.reporting.localization.Localization(__file__, 502, 19), startswith_71906, *[unicode_71907], **kwargs_71908)
            
            # Testing the type of an if condition (line 502)
            if_condition_71910 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 502, 16), startswith_call_result_71909)
            # Assigning a type to the variable 'if_condition_71910' (line 502)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 502, 16), 'if_condition_71910', if_condition_71910)
            # SSA begins for if statement (line 502)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Getting the type of 'ind' (line 503)
            ind_71911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 20), 'ind')
            int_71912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, 28), 'int')
            # Applying the binary operator '//=' (line 503)
            result_ifloordiv_71913 = python_operator(stypy.reporting.localization.Localization(__file__, 503, 20), '//=', ind_71911, int_71912)
            # Assigning a type to the variable 'ind' (line 503)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 20), 'ind', result_ifloordiv_71913)
            
            # SSA join for if statement (line 502)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 495)
            module_type_store = module_type_store.join_ssa_context()
            
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 493)
            exit___71914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 13), errstate_call_result_71852, '__exit__')
            with_exit_71915 = invoke(stypy.reporting.localization.Localization(__file__, 493, 13), exit___71914, None, None, None)

        
        # Getting the type of 'ind' (line 505)
        ind_71916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 8), 'ind')
        # Getting the type of 'self' (line 505)
        self_71917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 15), 'self')
        # Obtaining the member 'ind_offset' of a type (line 505)
        ind_offset_71918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 505, 15), self_71917, 'ind_offset')
        # Applying the binary operator '+=' (line 505)
        result_iadd_71919 = python_operator(stypy.reporting.localization.Localization(__file__, 505, 8), '+=', ind_71916, ind_offset_71918)
        # Assigning a type to the variable 'ind' (line 505)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 505, 8), 'ind', result_iadd_71919)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 508)
        tuple_71920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 508, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 508)
        # Adding element type (line 508)
        
        
        # Call to len(...): (line 508)
        # Processing the call arguments (line 508)
        # Getting the type of 'ind' (line 508)
        ind_71922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 19), 'ind', False)
        # Processing the call keyword arguments (line 508)
        kwargs_71923 = {}
        # Getting the type of 'len' (line 508)
        len_71921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 15), 'len', False)
        # Calling len(args, kwargs) (line 508)
        len_call_result_71924 = invoke(stypy.reporting.localization.Localization(__file__, 508, 15), len_71921, *[ind_71922], **kwargs_71923)
        
        int_71925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 508, 26), 'int')
        # Applying the binary operator '>' (line 508)
        result_gt_71926 = python_operator(stypy.reporting.localization.Localization(__file__, 508, 15), '>', len_call_result_71924, int_71925)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 508, 15), tuple_71920, result_gt_71926)
        # Adding element type (line 508)
        
        # Call to dict(...): (line 508)
        # Processing the call keyword arguments (line 508)
        # Getting the type of 'ind' (line 508)
        ind_71928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 38), 'ind', False)
        keyword_71929 = ind_71928
        kwargs_71930 = {'ind': keyword_71929}
        # Getting the type of 'dict' (line 508)
        dict_71927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 29), 'dict', False)
        # Calling dict(args, kwargs) (line 508)
        dict_call_result_71931 = invoke(stypy.reporting.localization.Localization(__file__, 508, 29), dict_71927, *[], **kwargs_71930)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 508, 15), tuple_71920, dict_call_result_71931)
        
        # Assigning a type to the variable 'stypy_return_type' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'stypy_return_type', tuple_71920)
        
        # ################# End of 'contains(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains' in the type store
        # Getting the type of 'stypy_return_type' (line 446)
        stypy_return_type_71932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_71932)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains'
        return stypy_return_type_71932


    @norecursion
    def get_pickradius(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_pickradius'
        module_type_store = module_type_store.open_function_context('get_pickradius', 510, 4, False)
        # Assigning a type to the variable 'self' (line 511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_pickradius.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_pickradius.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_pickradius.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_pickradius.__dict__.__setitem__('stypy_function_name', 'Line2D.get_pickradius')
        Line2D.get_pickradius.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_pickradius.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_pickradius.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_pickradius.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_pickradius.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_pickradius.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_pickradius.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_pickradius', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_pickradius', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_pickradius(...)' code ##################

        unicode_71933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 511, 8), 'unicode', u'return the pick radius used for containment tests')
        # Getting the type of 'self' (line 512)
        self_71934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 15), 'self')
        # Obtaining the member 'pickradius' of a type (line 512)
        pickradius_71935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 15), self_71934, 'pickradius')
        # Assigning a type to the variable 'stypy_return_type' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 8), 'stypy_return_type', pickradius_71935)
        
        # ################# End of 'get_pickradius(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_pickradius' in the type store
        # Getting the type of 'stypy_return_type' (line 510)
        stypy_return_type_71936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_71936)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_pickradius'
        return stypy_return_type_71936


    @norecursion
    def set_pickradius(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_pickradius'
        module_type_store = module_type_store.open_function_context('set_pickradius', 514, 4, False)
        # Assigning a type to the variable 'self' (line 515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_pickradius.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_pickradius.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_pickradius.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_pickradius.__dict__.__setitem__('stypy_function_name', 'Line2D.set_pickradius')
        Line2D.set_pickradius.__dict__.__setitem__('stypy_param_names_list', ['d'])
        Line2D.set_pickradius.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_pickradius.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_pickradius.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_pickradius.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_pickradius.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_pickradius.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_pickradius', ['d'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_pickradius', localization, ['d'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_pickradius(...)' code ##################

        unicode_71937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 518, (-1)), 'unicode', u'Sets the pick radius used for containment tests\n\n        ACCEPTS: float distance in points\n        ')
        
        # Assigning a Name to a Attribute (line 519):
        
        # Assigning a Name to a Attribute (line 519):
        # Getting the type of 'd' (line 519)
        d_71938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 26), 'd')
        # Getting the type of 'self' (line 519)
        self_71939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 8), 'self')
        # Setting the type of the member 'pickradius' of a type (line 519)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 8), self_71939, 'pickradius', d_71938)
        
        # ################# End of 'set_pickradius(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_pickradius' in the type store
        # Getting the type of 'stypy_return_type' (line 514)
        stypy_return_type_71940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_71940)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_pickradius'
        return stypy_return_type_71940


    @norecursion
    def get_fillstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_fillstyle'
        module_type_store = module_type_store.open_function_context('get_fillstyle', 521, 4, False)
        # Assigning a type to the variable 'self' (line 522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_fillstyle.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_fillstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_fillstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_fillstyle.__dict__.__setitem__('stypy_function_name', 'Line2D.get_fillstyle')
        Line2D.get_fillstyle.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_fillstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_fillstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_fillstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_fillstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_fillstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_fillstyle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_fillstyle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_fillstyle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_fillstyle(...)' code ##################

        unicode_71941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, (-1)), 'unicode', u'\n        return the marker fillstyle\n        ')
        
        # Call to get_fillstyle(...): (line 525)
        # Processing the call keyword arguments (line 525)
        kwargs_71945 = {}
        # Getting the type of 'self' (line 525)
        self_71942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 15), 'self', False)
        # Obtaining the member '_marker' of a type (line 525)
        _marker_71943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 525, 15), self_71942, '_marker')
        # Obtaining the member 'get_fillstyle' of a type (line 525)
        get_fillstyle_71944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 525, 15), _marker_71943, 'get_fillstyle')
        # Calling get_fillstyle(args, kwargs) (line 525)
        get_fillstyle_call_result_71946 = invoke(stypy.reporting.localization.Localization(__file__, 525, 15), get_fillstyle_71944, *[], **kwargs_71945)
        
        # Assigning a type to the variable 'stypy_return_type' (line 525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 525, 8), 'stypy_return_type', get_fillstyle_call_result_71946)
        
        # ################# End of 'get_fillstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_fillstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 521)
        stypy_return_type_71947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_71947)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_fillstyle'
        return stypy_return_type_71947


    @norecursion
    def set_fillstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_fillstyle'
        module_type_store = module_type_store.open_function_context('set_fillstyle', 527, 4, False)
        # Assigning a type to the variable 'self' (line 528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_fillstyle.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_fillstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_fillstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_fillstyle.__dict__.__setitem__('stypy_function_name', 'Line2D.set_fillstyle')
        Line2D.set_fillstyle.__dict__.__setitem__('stypy_param_names_list', ['fs'])
        Line2D.set_fillstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_fillstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_fillstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_fillstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_fillstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_fillstyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_fillstyle', ['fs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_fillstyle', localization, ['fs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_fillstyle(...)' code ##################

        unicode_71948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, (-1)), 'unicode', u"\n        Set the marker fill style; 'full' means fill the whole marker.\n        'none' means no filling; other options are for half-filled markers.\n\n        ACCEPTS: ['full' | 'left' | 'right' | 'bottom' | 'top' | 'none']\n        ")
        
        # Call to set_fillstyle(...): (line 534)
        # Processing the call arguments (line 534)
        # Getting the type of 'fs' (line 534)
        fs_71952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 35), 'fs', False)
        # Processing the call keyword arguments (line 534)
        kwargs_71953 = {}
        # Getting the type of 'self' (line 534)
        self_71949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 8), 'self', False)
        # Obtaining the member '_marker' of a type (line 534)
        _marker_71950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 8), self_71949, '_marker')
        # Obtaining the member 'set_fillstyle' of a type (line 534)
        set_fillstyle_71951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 8), _marker_71950, 'set_fillstyle')
        # Calling set_fillstyle(args, kwargs) (line 534)
        set_fillstyle_call_result_71954 = invoke(stypy.reporting.localization.Localization(__file__, 534, 8), set_fillstyle_71951, *[fs_71952], **kwargs_71953)
        
        
        # Assigning a Name to a Attribute (line 535):
        
        # Assigning a Name to a Attribute (line 535):
        # Getting the type of 'True' (line 535)
        True_71955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 21), 'True')
        # Getting the type of 'self' (line 535)
        self_71956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 535)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 8), self_71956, 'stale', True_71955)
        
        # ################# End of 'set_fillstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_fillstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 527)
        stypy_return_type_71957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_71957)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_fillstyle'
        return stypy_return_type_71957


    @norecursion
    def set_markevery(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_markevery'
        module_type_store = module_type_store.open_function_context('set_markevery', 537, 4, False)
        # Assigning a type to the variable 'self' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_markevery.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_markevery.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_markevery.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_markevery.__dict__.__setitem__('stypy_function_name', 'Line2D.set_markevery')
        Line2D.set_markevery.__dict__.__setitem__('stypy_param_names_list', ['every'])
        Line2D.set_markevery.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_markevery.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_markevery.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_markevery.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_markevery.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_markevery.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_markevery', ['every'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_markevery', localization, ['every'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_markevery(...)' code ##################

        unicode_71958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 587, (-1)), 'unicode', u'Set the markevery property to subsample the plot when using markers.\n\n        e.g., if `every=5`, every 5-th marker will be plotted.\n\n        ACCEPTS: [None | int | length-2 tuple of int | slice |\n        list/array of int | float | length-2 tuple of float]\n\n        Parameters\n        ----------\n        every: None | int | length-2 tuple of int | slice | list/array of int |\n        float | length-2 tuple of float\n            Which markers to plot.\n\n            - every=None, every point will be plotted.\n            - every=N, every N-th marker will be plotted starting with\n              marker 0.\n            - every=(start, N), every N-th marker, starting at point\n              start, will be plotted.\n            - every=slice(start, end, N), every N-th marker, starting at\n              point start, upto but not including point end, will be plotted.\n            - every=[i, j, m, n], only markers at points i, j, m, and n\n              will be plotted.\n            - every=0.1, (i.e. a float) then markers will be spaced at\n              approximately equal distances along the line; the distance\n              along the line between markers is determined by multiplying the\n              display-coordinate distance of the axes bounding-box diagonal\n              by the value of every.\n            - every=(0.5, 0.1) (i.e. a length-2 tuple of float), the\n              same functionality as every=0.1 is exhibited but the first\n              marker will be 0.5 multiplied by the\n              display-cordinate-diagonal-distance along the line.\n\n        Notes\n        -----\n        Setting the markevery property will only show markers at actual data\n        points.  When using float arguments to set the markevery property\n        on irregularly spaced data, the markers will likely not appear evenly\n        spaced because the actual data points do not coincide with the\n        theoretical spacing between markers.\n\n        When using a start offset to specify the first marker, the offset will\n        be from the first data point which may be different from the first\n        the visible data point if the plot is zoomed in.\n\n        If zooming in on a plot when using float arguments then the actual\n        data points that have markers will change because the distance between\n        markers is always determined from the display-coordinates\n        axes-bounding-box-diagonal regardless of the actual axes data limits.\n\n        ')
        
        
        # Getting the type of 'self' (line 588)
        self_71959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 11), 'self')
        # Obtaining the member '_markevery' of a type (line 588)
        _markevery_71960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 11), self_71959, '_markevery')
        # Getting the type of 'every' (line 588)
        every_71961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 30), 'every')
        # Applying the binary operator '!=' (line 588)
        result_ne_71962 = python_operator(stypy.reporting.localization.Localization(__file__, 588, 11), '!=', _markevery_71960, every_71961)
        
        # Testing the type of an if condition (line 588)
        if_condition_71963 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 588, 8), result_ne_71962)
        # Assigning a type to the variable 'if_condition_71963' (line 588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 8), 'if_condition_71963', if_condition_71963)
        # SSA begins for if statement (line 588)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 589):
        
        # Assigning a Name to a Attribute (line 589):
        # Getting the type of 'True' (line 589)
        True_71964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 25), 'True')
        # Getting the type of 'self' (line 589)
        self_71965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 12), 'self')
        # Setting the type of the member 'stale' of a type (line 589)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 12), self_71965, 'stale', True_71964)
        # SSA join for if statement (line 588)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 590):
        
        # Assigning a Name to a Attribute (line 590):
        # Getting the type of 'every' (line 590)
        every_71966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 26), 'every')
        # Getting the type of 'self' (line 590)
        self_71967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 8), 'self')
        # Setting the type of the member '_markevery' of a type (line 590)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 8), self_71967, '_markevery', every_71966)
        
        # ################# End of 'set_markevery(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_markevery' in the type store
        # Getting the type of 'stypy_return_type' (line 537)
        stypy_return_type_71968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_71968)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_markevery'
        return stypy_return_type_71968


    @norecursion
    def get_markevery(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_markevery'
        module_type_store = module_type_store.open_function_context('get_markevery', 592, 4, False)
        # Assigning a type to the variable 'self' (line 593)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_markevery.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_markevery.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_markevery.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_markevery.__dict__.__setitem__('stypy_function_name', 'Line2D.get_markevery')
        Line2D.get_markevery.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_markevery.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_markevery.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_markevery.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_markevery.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_markevery.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_markevery.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_markevery', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_markevery', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_markevery(...)' code ##################

        unicode_71969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 593, 8), 'unicode', u'return the markevery setting')
        # Getting the type of 'self' (line 594)
        self_71970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 15), 'self')
        # Obtaining the member '_markevery' of a type (line 594)
        _markevery_71971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 15), self_71970, '_markevery')
        # Assigning a type to the variable 'stypy_return_type' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 8), 'stypy_return_type', _markevery_71971)
        
        # ################# End of 'get_markevery(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_markevery' in the type store
        # Getting the type of 'stypy_return_type' (line 592)
        stypy_return_type_71972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_71972)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_markevery'
        return stypy_return_type_71972


    @norecursion
    def set_picker(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_picker'
        module_type_store = module_type_store.open_function_context('set_picker', 596, 4, False)
        # Assigning a type to the variable 'self' (line 597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_picker.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_picker.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_picker.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_picker.__dict__.__setitem__('stypy_function_name', 'Line2D.set_picker')
        Line2D.set_picker.__dict__.__setitem__('stypy_param_names_list', ['p'])
        Line2D.set_picker.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_picker.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_picker.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_picker.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_picker.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_picker.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_picker', ['p'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_picker', localization, ['p'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_picker(...)' code ##################

        unicode_71973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, (-1)), 'unicode', u'Sets the event picker details for the line.\n\n        ACCEPTS: float distance in points or callable pick function\n        ``fn(artist, event)``\n        ')
        
        
        # Call to callable(...): (line 602)
        # Processing the call arguments (line 602)
        # Getting the type of 'p' (line 602)
        p_71975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 20), 'p', False)
        # Processing the call keyword arguments (line 602)
        kwargs_71976 = {}
        # Getting the type of 'callable' (line 602)
        callable_71974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 11), 'callable', False)
        # Calling callable(args, kwargs) (line 602)
        callable_call_result_71977 = invoke(stypy.reporting.localization.Localization(__file__, 602, 11), callable_71974, *[p_71975], **kwargs_71976)
        
        # Testing the type of an if condition (line 602)
        if_condition_71978 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 602, 8), callable_call_result_71977)
        # Assigning a type to the variable 'if_condition_71978' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 8), 'if_condition_71978', if_condition_71978)
        # SSA begins for if statement (line 602)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 603):
        
        # Assigning a Name to a Attribute (line 603):
        # Getting the type of 'p' (line 603)
        p_71979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 29), 'p')
        # Getting the type of 'self' (line 603)
        self_71980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 12), 'self')
        # Setting the type of the member '_contains' of a type (line 603)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 12), self_71980, '_contains', p_71979)
        # SSA branch for the else part of an if statement (line 602)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 605):
        
        # Assigning a Name to a Attribute (line 605):
        # Getting the type of 'p' (line 605)
        p_71981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 30), 'p')
        # Getting the type of 'self' (line 605)
        self_71982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 12), 'self')
        # Setting the type of the member 'pickradius' of a type (line 605)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 12), self_71982, 'pickradius', p_71981)
        # SSA join for if statement (line 602)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 606):
        
        # Assigning a Name to a Attribute (line 606):
        # Getting the type of 'p' (line 606)
        p_71983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 23), 'p')
        # Getting the type of 'self' (line 606)
        self_71984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 8), 'self')
        # Setting the type of the member '_picker' of a type (line 606)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 8), self_71984, '_picker', p_71983)
        
        # ################# End of 'set_picker(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_picker' in the type store
        # Getting the type of 'stypy_return_type' (line 596)
        stypy_return_type_71985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_71985)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_picker'
        return stypy_return_type_71985


    @norecursion
    def get_window_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_window_extent'
        module_type_store = module_type_store.open_function_context('get_window_extent', 608, 4, False)
        # Assigning a type to the variable 'self' (line 609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_window_extent.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_window_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_window_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_window_extent.__dict__.__setitem__('stypy_function_name', 'Line2D.get_window_extent')
        Line2D.get_window_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Line2D.get_window_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_window_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_window_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_window_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_window_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_window_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_window_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_extent(...)' code ##################

        
        # Assigning a Call to a Name (line 609):
        
        # Assigning a Call to a Name (line 609):
        
        # Call to Bbox(...): (line 609)
        # Processing the call arguments (line 609)
        
        # Obtaining an instance of the builtin type 'list' (line 609)
        list_71987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 609)
        # Adding element type (line 609)
        
        # Obtaining an instance of the builtin type 'list' (line 609)
        list_71988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 609)
        # Adding element type (line 609)
        int_71989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 609, 21), list_71988, int_71989)
        # Adding element type (line 609)
        int_71990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 25), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 609, 21), list_71988, int_71990)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 609, 20), list_71987, list_71988)
        # Adding element type (line 609)
        
        # Obtaining an instance of the builtin type 'list' (line 609)
        list_71991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 609)
        # Adding element type (line 609)
        int_71992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 30), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 609, 29), list_71991, int_71992)
        # Adding element type (line 609)
        int_71993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 609, 29), list_71991, int_71993)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 609, 20), list_71987, list_71991)
        
        # Processing the call keyword arguments (line 609)
        kwargs_71994 = {}
        # Getting the type of 'Bbox' (line 609)
        Bbox_71986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 609)
        Bbox_call_result_71995 = invoke(stypy.reporting.localization.Localization(__file__, 609, 15), Bbox_71986, *[list_71987], **kwargs_71994)
        
        # Assigning a type to the variable 'bbox' (line 609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 8), 'bbox', Bbox_call_result_71995)
        
        # Assigning a Attribute to a Name (line 610):
        
        # Assigning a Attribute to a Name (line 610):
        
        # Call to get_transform(...): (line 610)
        # Processing the call keyword arguments (line 610)
        kwargs_71998 = {}
        # Getting the type of 'self' (line 610)
        self_71996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 27), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 610)
        get_transform_71997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 27), self_71996, 'get_transform')
        # Calling get_transform(args, kwargs) (line 610)
        get_transform_call_result_71999 = invoke(stypy.reporting.localization.Localization(__file__, 610, 27), get_transform_71997, *[], **kwargs_71998)
        
        # Obtaining the member 'transform' of a type (line 610)
        transform_72000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 27), get_transform_call_result_71999, 'transform')
        # Assigning a type to the variable 'trans_data_to_xy' (line 610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 8), 'trans_data_to_xy', transform_72000)
        
        # Call to update_from_data_xy(...): (line 611)
        # Processing the call arguments (line 611)
        
        # Call to trans_data_to_xy(...): (line 611)
        # Processing the call arguments (line 611)
        
        # Call to get_xydata(...): (line 611)
        # Processing the call keyword arguments (line 611)
        kwargs_72006 = {}
        # Getting the type of 'self' (line 611)
        self_72004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 50), 'self', False)
        # Obtaining the member 'get_xydata' of a type (line 611)
        get_xydata_72005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 50), self_72004, 'get_xydata')
        # Calling get_xydata(args, kwargs) (line 611)
        get_xydata_call_result_72007 = invoke(stypy.reporting.localization.Localization(__file__, 611, 50), get_xydata_72005, *[], **kwargs_72006)
        
        # Processing the call keyword arguments (line 611)
        kwargs_72008 = {}
        # Getting the type of 'trans_data_to_xy' (line 611)
        trans_data_to_xy_72003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 33), 'trans_data_to_xy', False)
        # Calling trans_data_to_xy(args, kwargs) (line 611)
        trans_data_to_xy_call_result_72009 = invoke(stypy.reporting.localization.Localization(__file__, 611, 33), trans_data_to_xy_72003, *[get_xydata_call_result_72007], **kwargs_72008)
        
        # Processing the call keyword arguments (line 611)
        # Getting the type of 'True' (line 612)
        True_72010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 40), 'True', False)
        keyword_72011 = True_72010
        kwargs_72012 = {'ignore': keyword_72011}
        # Getting the type of 'bbox' (line 611)
        bbox_72001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 8), 'bbox', False)
        # Obtaining the member 'update_from_data_xy' of a type (line 611)
        update_from_data_xy_72002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 8), bbox_72001, 'update_from_data_xy')
        # Calling update_from_data_xy(args, kwargs) (line 611)
        update_from_data_xy_call_result_72013 = invoke(stypy.reporting.localization.Localization(__file__, 611, 8), update_from_data_xy_72002, *[trans_data_to_xy_call_result_72009], **kwargs_72012)
        
        
        # Getting the type of 'self' (line 614)
        self_72014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 11), 'self')
        # Obtaining the member '_marker' of a type (line 614)
        _marker_72015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 11), self_72014, '_marker')
        # Testing the type of an if condition (line 614)
        if_condition_72016 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 614, 8), _marker_72015)
        # Assigning a type to the variable 'if_condition_72016' (line 614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 614, 8), 'if_condition_72016', if_condition_72016)
        # SSA begins for if statement (line 614)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 615):
        
        # Assigning a BinOp to a Name (line 615):
        # Getting the type of 'self' (line 615)
        self_72017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 18), 'self')
        # Obtaining the member '_markersize' of a type (line 615)
        _markersize_72018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 18), self_72017, '_markersize')
        float_72019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 37), 'float')
        # Applying the binary operator 'div' (line 615)
        result_div_72020 = python_operator(stypy.reporting.localization.Localization(__file__, 615, 18), 'div', _markersize_72018, float_72019)
        
        # Getting the type of 'self' (line 615)
        self_72021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 44), 'self')
        # Obtaining the member 'figure' of a type (line 615)
        figure_72022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 44), self_72021, 'figure')
        # Obtaining the member 'dpi' of a type (line 615)
        dpi_72023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 44), figure_72022, 'dpi')
        # Applying the binary operator '*' (line 615)
        result_mul_72024 = python_operator(stypy.reporting.localization.Localization(__file__, 615, 42), '*', result_div_72020, dpi_72023)
        
        float_72025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 63), 'float')
        # Applying the binary operator '*' (line 615)
        result_mul_72026 = python_operator(stypy.reporting.localization.Localization(__file__, 615, 17), '*', result_mul_72024, float_72025)
        
        # Assigning a type to the variable 'ms' (line 615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 12), 'ms', result_mul_72026)
        
        # Assigning a Call to a Name (line 616):
        
        # Assigning a Call to a Name (line 616):
        
        # Call to padded(...): (line 616)
        # Processing the call arguments (line 616)
        # Getting the type of 'ms' (line 616)
        ms_72029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 31), 'ms', False)
        # Processing the call keyword arguments (line 616)
        kwargs_72030 = {}
        # Getting the type of 'bbox' (line 616)
        bbox_72027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 19), 'bbox', False)
        # Obtaining the member 'padded' of a type (line 616)
        padded_72028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 19), bbox_72027, 'padded')
        # Calling padded(args, kwargs) (line 616)
        padded_call_result_72031 = invoke(stypy.reporting.localization.Localization(__file__, 616, 19), padded_72028, *[ms_72029], **kwargs_72030)
        
        # Assigning a type to the variable 'bbox' (line 616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 12), 'bbox', padded_call_result_72031)
        # SSA join for if statement (line 614)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'bbox' (line 617)
        bbox_72032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 15), 'bbox')
        # Assigning a type to the variable 'stypy_return_type' (line 617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 8), 'stypy_return_type', bbox_72032)
        
        # ################# End of 'get_window_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 608)
        stypy_return_type_72033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_72033)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_extent'
        return stypy_return_type_72033


    @norecursion
    def axes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'axes'
        module_type_store = module_type_store.open_function_context('axes', 619, 4, False)
        # Assigning a type to the variable 'self' (line 620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.axes.__dict__.__setitem__('stypy_localization', localization)
        Line2D.axes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.axes.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.axes.__dict__.__setitem__('stypy_function_name', 'Line2D.axes')
        Line2D.axes.__dict__.__setitem__('stypy_param_names_list', ['ax'])
        Line2D.axes.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.axes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.axes.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.axes.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.axes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.axes.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.axes', ['ax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'axes', localization, ['ax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'axes(...)' code ##################

        
        # Call to fset(...): (line 622)
        # Processing the call arguments (line 622)
        # Getting the type of 'self' (line 622)
        self_72037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 25), 'self', False)
        # Getting the type of 'ax' (line 622)
        ax_72038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 31), 'ax', False)
        # Processing the call keyword arguments (line 622)
        kwargs_72039 = {}
        # Getting the type of 'Artist' (line 622)
        Artist_72034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 8), 'Artist', False)
        # Obtaining the member 'axes' of a type (line 622)
        axes_72035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 8), Artist_72034, 'axes')
        # Obtaining the member 'fset' of a type (line 622)
        fset_72036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 8), axes_72035, 'fset')
        # Calling fset(args, kwargs) (line 622)
        fset_call_result_72040 = invoke(stypy.reporting.localization.Localization(__file__, 622, 8), fset_72036, *[self_72037, ax_72038], **kwargs_72039)
        
        
        # Type idiom detected: calculating its left and rigth part (line 623)
        # Getting the type of 'ax' (line 623)
        ax_72041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 8), 'ax')
        # Getting the type of 'None' (line 623)
        None_72042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 21), 'None')
        
        (may_be_72043, more_types_in_union_72044) = may_not_be_none(ax_72041, None_72042)

        if may_be_72043:

            if more_types_in_union_72044:
                # Runtime conditional SSA (line 623)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Getting the type of 'ax' (line 625)
            ax_72045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 15), 'ax')
            # Obtaining the member 'xaxis' of a type (line 625)
            xaxis_72046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 15), ax_72045, 'xaxis')
            # Getting the type of 'None' (line 625)
            None_72047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 31), 'None')
            # Applying the binary operator 'isnot' (line 625)
            result_is_not_72048 = python_operator(stypy.reporting.localization.Localization(__file__, 625, 15), 'isnot', xaxis_72046, None_72047)
            
            # Testing the type of an if condition (line 625)
            if_condition_72049 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 625, 12), result_is_not_72048)
            # Assigning a type to the variable 'if_condition_72049' (line 625)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 12), 'if_condition_72049', if_condition_72049)
            # SSA begins for if statement (line 625)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 626):
            
            # Assigning a Call to a Attribute (line 626):
            
            # Call to connect(...): (line 626)
            # Processing the call arguments (line 626)
            unicode_72054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 56), 'unicode', u'units')
            # Getting the type of 'self' (line 627)
            self_72055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 56), 'self', False)
            # Obtaining the member 'recache_always' of a type (line 627)
            recache_always_72056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 56), self_72055, 'recache_always')
            # Processing the call keyword arguments (line 626)
            kwargs_72057 = {}
            # Getting the type of 'ax' (line 626)
            ax_72050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 29), 'ax', False)
            # Obtaining the member 'xaxis' of a type (line 626)
            xaxis_72051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 29), ax_72050, 'xaxis')
            # Obtaining the member 'callbacks' of a type (line 626)
            callbacks_72052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 29), xaxis_72051, 'callbacks')
            # Obtaining the member 'connect' of a type (line 626)
            connect_72053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 29), callbacks_72052, 'connect')
            # Calling connect(args, kwargs) (line 626)
            connect_call_result_72058 = invoke(stypy.reporting.localization.Localization(__file__, 626, 29), connect_72053, *[unicode_72054, recache_always_72056], **kwargs_72057)
            
            # Getting the type of 'self' (line 626)
            self_72059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 16), 'self')
            # Setting the type of the member '_xcid' of a type (line 626)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 16), self_72059, '_xcid', connect_call_result_72058)
            # SSA join for if statement (line 625)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Getting the type of 'ax' (line 628)
            ax_72060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 15), 'ax')
            # Obtaining the member 'yaxis' of a type (line 628)
            yaxis_72061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 15), ax_72060, 'yaxis')
            # Getting the type of 'None' (line 628)
            None_72062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 31), 'None')
            # Applying the binary operator 'isnot' (line 628)
            result_is_not_72063 = python_operator(stypy.reporting.localization.Localization(__file__, 628, 15), 'isnot', yaxis_72061, None_72062)
            
            # Testing the type of an if condition (line 628)
            if_condition_72064 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 628, 12), result_is_not_72063)
            # Assigning a type to the variable 'if_condition_72064' (line 628)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 12), 'if_condition_72064', if_condition_72064)
            # SSA begins for if statement (line 628)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 629):
            
            # Assigning a Call to a Attribute (line 629):
            
            # Call to connect(...): (line 629)
            # Processing the call arguments (line 629)
            unicode_72069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 56), 'unicode', u'units')
            # Getting the type of 'self' (line 630)
            self_72070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 56), 'self', False)
            # Obtaining the member 'recache_always' of a type (line 630)
            recache_always_72071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 56), self_72070, 'recache_always')
            # Processing the call keyword arguments (line 629)
            kwargs_72072 = {}
            # Getting the type of 'ax' (line 629)
            ax_72065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 29), 'ax', False)
            # Obtaining the member 'yaxis' of a type (line 629)
            yaxis_72066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 29), ax_72065, 'yaxis')
            # Obtaining the member 'callbacks' of a type (line 629)
            callbacks_72067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 29), yaxis_72066, 'callbacks')
            # Obtaining the member 'connect' of a type (line 629)
            connect_72068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 29), callbacks_72067, 'connect')
            # Calling connect(args, kwargs) (line 629)
            connect_call_result_72073 = invoke(stypy.reporting.localization.Localization(__file__, 629, 29), connect_72068, *[unicode_72069, recache_always_72071], **kwargs_72072)
            
            # Getting the type of 'self' (line 629)
            self_72074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 16), 'self')
            # Setting the type of the member '_ycid' of a type (line 629)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 16), self_72074, '_ycid', connect_call_result_72073)
            # SSA join for if statement (line 628)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_72044:
                # SSA join for if statement (line 623)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'axes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'axes' in the type store
        # Getting the type of 'stypy_return_type' (line 619)
        stypy_return_type_72075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_72075)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'axes'
        return stypy_return_type_72075


    @norecursion
    def set_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_data'
        module_type_store = module_type_store.open_function_context('set_data', 632, 4, False)
        # Assigning a type to the variable 'self' (line 633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 633, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_data.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_data.__dict__.__setitem__('stypy_function_name', 'Line2D.set_data')
        Line2D.set_data.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.set_data.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Line2D.set_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_data.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_data', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_data', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_data(...)' code ##################

        unicode_72076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, (-1)), 'unicode', u'\n        Set the x and y data\n\n        ACCEPTS: 2D array (rows are x, y) or two 1D arrays\n        ')
        
        
        
        # Call to len(...): (line 638)
        # Processing the call arguments (line 638)
        # Getting the type of 'args' (line 638)
        args_72078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 15), 'args', False)
        # Processing the call keyword arguments (line 638)
        kwargs_72079 = {}
        # Getting the type of 'len' (line 638)
        len_72077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 11), 'len', False)
        # Calling len(args, kwargs) (line 638)
        len_call_result_72080 = invoke(stypy.reporting.localization.Localization(__file__, 638, 11), len_72077, *[args_72078], **kwargs_72079)
        
        int_72081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 24), 'int')
        # Applying the binary operator '==' (line 638)
        result_eq_72082 = python_operator(stypy.reporting.localization.Localization(__file__, 638, 11), '==', len_call_result_72080, int_72081)
        
        # Testing the type of an if condition (line 638)
        if_condition_72083 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 638, 8), result_eq_72082)
        # Assigning a type to the variable 'if_condition_72083' (line 638)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 8), 'if_condition_72083', if_condition_72083)
        # SSA begins for if statement (line 638)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Tuple (line 639):
        
        # Assigning a Subscript to a Name (line 639):
        
        # Obtaining the type of the subscript
        int_72084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 12), 'int')
        
        # Obtaining the type of the subscript
        int_72085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 24), 'int')
        # Getting the type of 'args' (line 639)
        args_72086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 19), 'args')
        # Obtaining the member '__getitem__' of a type (line 639)
        getitem___72087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 19), args_72086, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 639)
        subscript_call_result_72088 = invoke(stypy.reporting.localization.Localization(__file__, 639, 19), getitem___72087, int_72085)
        
        # Obtaining the member '__getitem__' of a type (line 639)
        getitem___72089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 12), subscript_call_result_72088, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 639)
        subscript_call_result_72090 = invoke(stypy.reporting.localization.Localization(__file__, 639, 12), getitem___72089, int_72084)
        
        # Assigning a type to the variable 'tuple_var_assignment_70613' (line 639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 12), 'tuple_var_assignment_70613', subscript_call_result_72090)
        
        # Assigning a Subscript to a Name (line 639):
        
        # Obtaining the type of the subscript
        int_72091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 12), 'int')
        
        # Obtaining the type of the subscript
        int_72092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 24), 'int')
        # Getting the type of 'args' (line 639)
        args_72093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 19), 'args')
        # Obtaining the member '__getitem__' of a type (line 639)
        getitem___72094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 19), args_72093, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 639)
        subscript_call_result_72095 = invoke(stypy.reporting.localization.Localization(__file__, 639, 19), getitem___72094, int_72092)
        
        # Obtaining the member '__getitem__' of a type (line 639)
        getitem___72096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 12), subscript_call_result_72095, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 639)
        subscript_call_result_72097 = invoke(stypy.reporting.localization.Localization(__file__, 639, 12), getitem___72096, int_72091)
        
        # Assigning a type to the variable 'tuple_var_assignment_70614' (line 639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 12), 'tuple_var_assignment_70614', subscript_call_result_72097)
        
        # Assigning a Name to a Name (line 639):
        # Getting the type of 'tuple_var_assignment_70613' (line 639)
        tuple_var_assignment_70613_72098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 12), 'tuple_var_assignment_70613')
        # Assigning a type to the variable 'x' (line 639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 12), 'x', tuple_var_assignment_70613_72098)
        
        # Assigning a Name to a Name (line 639):
        # Getting the type of 'tuple_var_assignment_70614' (line 639)
        tuple_var_assignment_70614_72099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 12), 'tuple_var_assignment_70614')
        # Assigning a type to the variable 'y' (line 639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 15), 'y', tuple_var_assignment_70614_72099)
        # SSA branch for the else part of an if statement (line 638)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Tuple (line 641):
        
        # Assigning a Subscript to a Name (line 641):
        
        # Obtaining the type of the subscript
        int_72100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 641, 12), 'int')
        # Getting the type of 'args' (line 641)
        args_72101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 19), 'args')
        # Obtaining the member '__getitem__' of a type (line 641)
        getitem___72102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 641, 12), args_72101, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 641)
        subscript_call_result_72103 = invoke(stypy.reporting.localization.Localization(__file__, 641, 12), getitem___72102, int_72100)
        
        # Assigning a type to the variable 'tuple_var_assignment_70615' (line 641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 12), 'tuple_var_assignment_70615', subscript_call_result_72103)
        
        # Assigning a Subscript to a Name (line 641):
        
        # Obtaining the type of the subscript
        int_72104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 641, 12), 'int')
        # Getting the type of 'args' (line 641)
        args_72105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 19), 'args')
        # Obtaining the member '__getitem__' of a type (line 641)
        getitem___72106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 641, 12), args_72105, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 641)
        subscript_call_result_72107 = invoke(stypy.reporting.localization.Localization(__file__, 641, 12), getitem___72106, int_72104)
        
        # Assigning a type to the variable 'tuple_var_assignment_70616' (line 641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 12), 'tuple_var_assignment_70616', subscript_call_result_72107)
        
        # Assigning a Name to a Name (line 641):
        # Getting the type of 'tuple_var_assignment_70615' (line 641)
        tuple_var_assignment_70615_72108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 12), 'tuple_var_assignment_70615')
        # Assigning a type to the variable 'x' (line 641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 12), 'x', tuple_var_assignment_70615_72108)
        
        # Assigning a Name to a Name (line 641):
        # Getting the type of 'tuple_var_assignment_70616' (line 641)
        tuple_var_assignment_70616_72109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 12), 'tuple_var_assignment_70616')
        # Assigning a type to the variable 'y' (line 641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 15), 'y', tuple_var_assignment_70616_72109)
        # SSA join for if statement (line 638)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_xdata(...): (line 643)
        # Processing the call arguments (line 643)
        # Getting the type of 'x' (line 643)
        x_72112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 23), 'x', False)
        # Processing the call keyword arguments (line 643)
        kwargs_72113 = {}
        # Getting the type of 'self' (line 643)
        self_72110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 8), 'self', False)
        # Obtaining the member 'set_xdata' of a type (line 643)
        set_xdata_72111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 8), self_72110, 'set_xdata')
        # Calling set_xdata(args, kwargs) (line 643)
        set_xdata_call_result_72114 = invoke(stypy.reporting.localization.Localization(__file__, 643, 8), set_xdata_72111, *[x_72112], **kwargs_72113)
        
        
        # Call to set_ydata(...): (line 644)
        # Processing the call arguments (line 644)
        # Getting the type of 'y' (line 644)
        y_72117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 23), 'y', False)
        # Processing the call keyword arguments (line 644)
        kwargs_72118 = {}
        # Getting the type of 'self' (line 644)
        self_72115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 8), 'self', False)
        # Obtaining the member 'set_ydata' of a type (line 644)
        set_ydata_72116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 8), self_72115, 'set_ydata')
        # Calling set_ydata(args, kwargs) (line 644)
        set_ydata_call_result_72119 = invoke(stypy.reporting.localization.Localization(__file__, 644, 8), set_ydata_72116, *[y_72117], **kwargs_72118)
        
        
        # ################# End of 'set_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_data' in the type store
        # Getting the type of 'stypy_return_type' (line 632)
        stypy_return_type_72120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_72120)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_data'
        return stypy_return_type_72120


    @norecursion
    def recache_always(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'recache_always'
        module_type_store = module_type_store.open_function_context('recache_always', 646, 4, False)
        # Assigning a type to the variable 'self' (line 647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 647, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.recache_always.__dict__.__setitem__('stypy_localization', localization)
        Line2D.recache_always.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.recache_always.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.recache_always.__dict__.__setitem__('stypy_function_name', 'Line2D.recache_always')
        Line2D.recache_always.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.recache_always.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.recache_always.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.recache_always.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.recache_always.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.recache_always.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.recache_always.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.recache_always', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'recache_always', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'recache_always(...)' code ##################

        
        # Call to recache(...): (line 647)
        # Processing the call keyword arguments (line 647)
        # Getting the type of 'True' (line 647)
        True_72123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 28), 'True', False)
        keyword_72124 = True_72123
        kwargs_72125 = {'always': keyword_72124}
        # Getting the type of 'self' (line 647)
        self_72121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 8), 'self', False)
        # Obtaining the member 'recache' of a type (line 647)
        recache_72122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 8), self_72121, 'recache')
        # Calling recache(args, kwargs) (line 647)
        recache_call_result_72126 = invoke(stypy.reporting.localization.Localization(__file__, 647, 8), recache_72122, *[], **kwargs_72125)
        
        
        # ################# End of 'recache_always(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'recache_always' in the type store
        # Getting the type of 'stypy_return_type' (line 646)
        stypy_return_type_72127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_72127)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'recache_always'
        return stypy_return_type_72127


    @norecursion
    def recache(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 649)
        False_72128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 29), 'False')
        defaults = [False_72128]
        # Create a new context for function 'recache'
        module_type_store = module_type_store.open_function_context('recache', 649, 4, False)
        # Assigning a type to the variable 'self' (line 650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.recache.__dict__.__setitem__('stypy_localization', localization)
        Line2D.recache.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.recache.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.recache.__dict__.__setitem__('stypy_function_name', 'Line2D.recache')
        Line2D.recache.__dict__.__setitem__('stypy_param_names_list', ['always'])
        Line2D.recache.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.recache.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.recache.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.recache.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.recache.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.recache.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.recache', ['always'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'recache', localization, ['always'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'recache(...)' code ##################

        
        
        # Evaluating a boolean operation
        # Getting the type of 'always' (line 650)
        always_72129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 11), 'always')
        # Getting the type of 'self' (line 650)
        self_72130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 21), 'self')
        # Obtaining the member '_invalidx' of a type (line 650)
        _invalidx_72131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 21), self_72130, '_invalidx')
        # Applying the binary operator 'or' (line 650)
        result_or_keyword_72132 = python_operator(stypy.reporting.localization.Localization(__file__, 650, 11), 'or', always_72129, _invalidx_72131)
        
        # Testing the type of an if condition (line 650)
        if_condition_72133 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 650, 8), result_or_keyword_72132)
        # Assigning a type to the variable 'if_condition_72133' (line 650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 8), 'if_condition_72133', if_condition_72133)
        # SSA begins for if statement (line 650)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 651):
        
        # Assigning a Call to a Name (line 651):
        
        # Call to convert_xunits(...): (line 651)
        # Processing the call arguments (line 651)
        # Getting the type of 'self' (line 651)
        self_72136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 40), 'self', False)
        # Obtaining the member '_xorig' of a type (line 651)
        _xorig_72137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 651, 40), self_72136, '_xorig')
        # Processing the call keyword arguments (line 651)
        kwargs_72138 = {}
        # Getting the type of 'self' (line 651)
        self_72134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 20), 'self', False)
        # Obtaining the member 'convert_xunits' of a type (line 651)
        convert_xunits_72135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 651, 20), self_72134, 'convert_xunits')
        # Calling convert_xunits(args, kwargs) (line 651)
        convert_xunits_call_result_72139 = invoke(stypy.reporting.localization.Localization(__file__, 651, 20), convert_xunits_72135, *[_xorig_72137], **kwargs_72138)
        
        # Assigning a type to the variable 'xconv' (line 651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 651, 12), 'xconv', convert_xunits_call_result_72139)
        
        # Assigning a Call to a Name (line 652):
        
        # Assigning a Call to a Name (line 652):
        
        # Call to ravel(...): (line 652)
        # Processing the call keyword arguments (line 652)
        kwargs_72145 = {}
        
        # Call to _to_unmasked_float_array(...): (line 652)
        # Processing the call arguments (line 652)
        # Getting the type of 'xconv' (line 652)
        xconv_72141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 41), 'xconv', False)
        # Processing the call keyword arguments (line 652)
        kwargs_72142 = {}
        # Getting the type of '_to_unmasked_float_array' (line 652)
        _to_unmasked_float_array_72140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 16), '_to_unmasked_float_array', False)
        # Calling _to_unmasked_float_array(args, kwargs) (line 652)
        _to_unmasked_float_array_call_result_72143 = invoke(stypy.reporting.localization.Localization(__file__, 652, 16), _to_unmasked_float_array_72140, *[xconv_72141], **kwargs_72142)
        
        # Obtaining the member 'ravel' of a type (line 652)
        ravel_72144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 16), _to_unmasked_float_array_call_result_72143, 'ravel')
        # Calling ravel(args, kwargs) (line 652)
        ravel_call_result_72146 = invoke(stypy.reporting.localization.Localization(__file__, 652, 16), ravel_72144, *[], **kwargs_72145)
        
        # Assigning a type to the variable 'x' (line 652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 12), 'x', ravel_call_result_72146)
        # SSA branch for the else part of an if statement (line 650)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 654):
        
        # Assigning a Attribute to a Name (line 654):
        # Getting the type of 'self' (line 654)
        self_72147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 16), 'self')
        # Obtaining the member '_x' of a type (line 654)
        _x_72148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 16), self_72147, '_x')
        # Assigning a type to the variable 'x' (line 654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 12), 'x', _x_72148)
        # SSA join for if statement (line 650)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'always' (line 655)
        always_72149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 11), 'always')
        # Getting the type of 'self' (line 655)
        self_72150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 21), 'self')
        # Obtaining the member '_invalidy' of a type (line 655)
        _invalidy_72151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 21), self_72150, '_invalidy')
        # Applying the binary operator 'or' (line 655)
        result_or_keyword_72152 = python_operator(stypy.reporting.localization.Localization(__file__, 655, 11), 'or', always_72149, _invalidy_72151)
        
        # Testing the type of an if condition (line 655)
        if_condition_72153 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 655, 8), result_or_keyword_72152)
        # Assigning a type to the variable 'if_condition_72153' (line 655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 655, 8), 'if_condition_72153', if_condition_72153)
        # SSA begins for if statement (line 655)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 656):
        
        # Assigning a Call to a Name (line 656):
        
        # Call to convert_yunits(...): (line 656)
        # Processing the call arguments (line 656)
        # Getting the type of 'self' (line 656)
        self_72156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 40), 'self', False)
        # Obtaining the member '_yorig' of a type (line 656)
        _yorig_72157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 40), self_72156, '_yorig')
        # Processing the call keyword arguments (line 656)
        kwargs_72158 = {}
        # Getting the type of 'self' (line 656)
        self_72154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 20), 'self', False)
        # Obtaining the member 'convert_yunits' of a type (line 656)
        convert_yunits_72155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 20), self_72154, 'convert_yunits')
        # Calling convert_yunits(args, kwargs) (line 656)
        convert_yunits_call_result_72159 = invoke(stypy.reporting.localization.Localization(__file__, 656, 20), convert_yunits_72155, *[_yorig_72157], **kwargs_72158)
        
        # Assigning a type to the variable 'yconv' (line 656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 656, 12), 'yconv', convert_yunits_call_result_72159)
        
        # Assigning a Call to a Name (line 657):
        
        # Assigning a Call to a Name (line 657):
        
        # Call to ravel(...): (line 657)
        # Processing the call keyword arguments (line 657)
        kwargs_72165 = {}
        
        # Call to _to_unmasked_float_array(...): (line 657)
        # Processing the call arguments (line 657)
        # Getting the type of 'yconv' (line 657)
        yconv_72161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 41), 'yconv', False)
        # Processing the call keyword arguments (line 657)
        kwargs_72162 = {}
        # Getting the type of '_to_unmasked_float_array' (line 657)
        _to_unmasked_float_array_72160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 16), '_to_unmasked_float_array', False)
        # Calling _to_unmasked_float_array(args, kwargs) (line 657)
        _to_unmasked_float_array_call_result_72163 = invoke(stypy.reporting.localization.Localization(__file__, 657, 16), _to_unmasked_float_array_72160, *[yconv_72161], **kwargs_72162)
        
        # Obtaining the member 'ravel' of a type (line 657)
        ravel_72164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 657, 16), _to_unmasked_float_array_call_result_72163, 'ravel')
        # Calling ravel(args, kwargs) (line 657)
        ravel_call_result_72166 = invoke(stypy.reporting.localization.Localization(__file__, 657, 16), ravel_72164, *[], **kwargs_72165)
        
        # Assigning a type to the variable 'y' (line 657)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 657, 12), 'y', ravel_call_result_72166)
        # SSA branch for the else part of an if statement (line 655)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 659):
        
        # Assigning a Attribute to a Name (line 659):
        # Getting the type of 'self' (line 659)
        self_72167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 16), 'self')
        # Obtaining the member '_y' of a type (line 659)
        _y_72168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 659, 16), self_72167, '_y')
        # Assigning a type to the variable 'y' (line 659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 659, 12), 'y', _y_72168)
        # SSA join for if statement (line 655)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 661):
        
        # Assigning a Call to a Attribute (line 661):
        
        # Call to astype(...): (line 661)
        # Processing the call arguments (line 661)
        # Getting the type of 'float' (line 661)
        float_72180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 69), 'float', False)
        # Processing the call keyword arguments (line 661)
        kwargs_72181 = {}
        
        # Call to column_stack(...): (line 661)
        # Processing the call arguments (line 661)
        
        # Call to broadcast_arrays(...): (line 661)
        # Processing the call arguments (line 661)
        # Getting the type of 'x' (line 661)
        x_72173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 55), 'x', False)
        # Getting the type of 'y' (line 661)
        y_72174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 58), 'y', False)
        # Processing the call keyword arguments (line 661)
        kwargs_72175 = {}
        # Getting the type of 'np' (line 661)
        np_72171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 35), 'np', False)
        # Obtaining the member 'broadcast_arrays' of a type (line 661)
        broadcast_arrays_72172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 35), np_72171, 'broadcast_arrays')
        # Calling broadcast_arrays(args, kwargs) (line 661)
        broadcast_arrays_call_result_72176 = invoke(stypy.reporting.localization.Localization(__file__, 661, 35), broadcast_arrays_72172, *[x_72173, y_72174], **kwargs_72175)
        
        # Processing the call keyword arguments (line 661)
        kwargs_72177 = {}
        # Getting the type of 'np' (line 661)
        np_72169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 19), 'np', False)
        # Obtaining the member 'column_stack' of a type (line 661)
        column_stack_72170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 19), np_72169, 'column_stack')
        # Calling column_stack(args, kwargs) (line 661)
        column_stack_call_result_72178 = invoke(stypy.reporting.localization.Localization(__file__, 661, 19), column_stack_72170, *[broadcast_arrays_call_result_72176], **kwargs_72177)
        
        # Obtaining the member 'astype' of a type (line 661)
        astype_72179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 19), column_stack_call_result_72178, 'astype')
        # Calling astype(args, kwargs) (line 661)
        astype_call_result_72182 = invoke(stypy.reporting.localization.Localization(__file__, 661, 19), astype_72179, *[float_72180], **kwargs_72181)
        
        # Getting the type of 'self' (line 661)
        self_72183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 8), 'self')
        # Setting the type of the member '_xy' of a type (line 661)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 8), self_72183, '_xy', astype_call_result_72182)
        
        # Assigning a Attribute to a Tuple (line 662):
        
        # Assigning a Subscript to a Name (line 662):
        
        # Obtaining the type of the subscript
        int_72184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 662, 8), 'int')
        # Getting the type of 'self' (line 662)
        self_72185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 27), 'self')
        # Obtaining the member '_xy' of a type (line 662)
        _xy_72186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 27), self_72185, '_xy')
        # Obtaining the member 'T' of a type (line 662)
        T_72187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 27), _xy_72186, 'T')
        # Obtaining the member '__getitem__' of a type (line 662)
        getitem___72188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 8), T_72187, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 662)
        subscript_call_result_72189 = invoke(stypy.reporting.localization.Localization(__file__, 662, 8), getitem___72188, int_72184)
        
        # Assigning a type to the variable 'tuple_var_assignment_70617' (line 662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 662, 8), 'tuple_var_assignment_70617', subscript_call_result_72189)
        
        # Assigning a Subscript to a Name (line 662):
        
        # Obtaining the type of the subscript
        int_72190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 662, 8), 'int')
        # Getting the type of 'self' (line 662)
        self_72191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 27), 'self')
        # Obtaining the member '_xy' of a type (line 662)
        _xy_72192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 27), self_72191, '_xy')
        # Obtaining the member 'T' of a type (line 662)
        T_72193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 27), _xy_72192, 'T')
        # Obtaining the member '__getitem__' of a type (line 662)
        getitem___72194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 8), T_72193, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 662)
        subscript_call_result_72195 = invoke(stypy.reporting.localization.Localization(__file__, 662, 8), getitem___72194, int_72190)
        
        # Assigning a type to the variable 'tuple_var_assignment_70618' (line 662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 662, 8), 'tuple_var_assignment_70618', subscript_call_result_72195)
        
        # Assigning a Name to a Attribute (line 662):
        # Getting the type of 'tuple_var_assignment_70617' (line 662)
        tuple_var_assignment_70617_72196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 8), 'tuple_var_assignment_70617')
        # Getting the type of 'self' (line 662)
        self_72197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 8), 'self')
        # Setting the type of the member '_x' of a type (line 662)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 8), self_72197, '_x', tuple_var_assignment_70617_72196)
        
        # Assigning a Name to a Attribute (line 662):
        # Getting the type of 'tuple_var_assignment_70618' (line 662)
        tuple_var_assignment_70618_72198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 8), 'tuple_var_assignment_70618')
        # Getting the type of 'self' (line 662)
        self_72199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 17), 'self')
        # Setting the type of the member '_y' of a type (line 662)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 17), self_72199, '_y', tuple_var_assignment_70618_72198)
        
        # Assigning a Name to a Attribute (line 664):
        
        # Assigning a Name to a Attribute (line 664):
        # Getting the type of 'False' (line 664)
        False_72200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 25), 'False')
        # Getting the type of 'self' (line 664)
        self_72201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 8), 'self')
        # Setting the type of the member '_subslice' of a type (line 664)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 8), self_72201, '_subslice', False_72200)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 665)
        self_72202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 12), 'self')
        # Obtaining the member 'axes' of a type (line 665)
        axes_72203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 665, 12), self_72202, 'axes')
        
        
        # Call to len(...): (line 665)
        # Processing the call arguments (line 665)
        # Getting the type of 'x' (line 665)
        x_72205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 30), 'x', False)
        # Processing the call keyword arguments (line 665)
        kwargs_72206 = {}
        # Getting the type of 'len' (line 665)
        len_72204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 26), 'len', False)
        # Calling len(args, kwargs) (line 665)
        len_call_result_72207 = invoke(stypy.reporting.localization.Localization(__file__, 665, 26), len_72204, *[x_72205], **kwargs_72206)
        
        int_72208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 665, 35), 'int')
        # Applying the binary operator '>' (line 665)
        result_gt_72209 = python_operator(stypy.reporting.localization.Localization(__file__, 665, 26), '>', len_call_result_72207, int_72208)
        
        # Applying the binary operator 'and' (line 665)
        result_and_keyword_72210 = python_operator(stypy.reporting.localization.Localization(__file__, 665, 12), 'and', axes_72203, result_gt_72209)
        
        # Call to _is_sorted(...): (line 665)
        # Processing the call arguments (line 665)
        # Getting the type of 'x' (line 665)
        x_72213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 60), 'x', False)
        # Processing the call keyword arguments (line 665)
        kwargs_72214 = {}
        # Getting the type of 'self' (line 665)
        self_72211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 44), 'self', False)
        # Obtaining the member '_is_sorted' of a type (line 665)
        _is_sorted_72212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 665, 44), self_72211, '_is_sorted')
        # Calling _is_sorted(args, kwargs) (line 665)
        _is_sorted_call_result_72215 = invoke(stypy.reporting.localization.Localization(__file__, 665, 44), _is_sorted_72212, *[x_72213], **kwargs_72214)
        
        # Applying the binary operator 'and' (line 665)
        result_and_keyword_72216 = python_operator(stypy.reporting.localization.Localization(__file__, 665, 12), 'and', result_and_keyword_72210, _is_sorted_call_result_72215)
        
        # Getting the type of 'self' (line 666)
        self_72217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 16), 'self')
        # Obtaining the member 'axes' of a type (line 666)
        axes_72218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 16), self_72217, 'axes')
        # Obtaining the member 'name' of a type (line 666)
        name_72219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 16), axes_72218, 'name')
        unicode_72220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 34), 'unicode', u'rectilinear')
        # Applying the binary operator '==' (line 666)
        result_eq_72221 = python_operator(stypy.reporting.localization.Localization(__file__, 666, 16), '==', name_72219, unicode_72220)
        
        # Applying the binary operator 'and' (line 665)
        result_and_keyword_72222 = python_operator(stypy.reporting.localization.Localization(__file__, 665, 12), 'and', result_and_keyword_72216, result_eq_72221)
        
        
        # Call to get_xscale(...): (line 667)
        # Processing the call keyword arguments (line 667)
        kwargs_72226 = {}
        # Getting the type of 'self' (line 667)
        self_72223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 16), 'self', False)
        # Obtaining the member 'axes' of a type (line 667)
        axes_72224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 16), self_72223, 'axes')
        # Obtaining the member 'get_xscale' of a type (line 667)
        get_xscale_72225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 16), axes_72224, 'get_xscale')
        # Calling get_xscale(args, kwargs) (line 667)
        get_xscale_call_result_72227 = invoke(stypy.reporting.localization.Localization(__file__, 667, 16), get_xscale_72225, *[], **kwargs_72226)
        
        unicode_72228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 667, 42), 'unicode', u'linear')
        # Applying the binary operator '==' (line 667)
        result_eq_72229 = python_operator(stypy.reporting.localization.Localization(__file__, 667, 16), '==', get_xscale_call_result_72227, unicode_72228)
        
        # Applying the binary operator 'and' (line 665)
        result_and_keyword_72230 = python_operator(stypy.reporting.localization.Localization(__file__, 665, 12), 'and', result_and_keyword_72222, result_eq_72229)
        
        # Getting the type of 'self' (line 668)
        self_72231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 16), 'self')
        # Obtaining the member '_markevery' of a type (line 668)
        _markevery_72232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 16), self_72231, '_markevery')
        # Getting the type of 'None' (line 668)
        None_72233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 35), 'None')
        # Applying the binary operator 'is' (line 668)
        result_is__72234 = python_operator(stypy.reporting.localization.Localization(__file__, 668, 16), 'is', _markevery_72232, None_72233)
        
        # Applying the binary operator 'and' (line 665)
        result_and_keyword_72235 = python_operator(stypy.reporting.localization.Localization(__file__, 665, 12), 'and', result_and_keyword_72230, result_is__72234)
        
        
        # Call to get_clip_on(...): (line 669)
        # Processing the call keyword arguments (line 669)
        kwargs_72238 = {}
        # Getting the type of 'self' (line 669)
        self_72236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 16), 'self', False)
        # Obtaining the member 'get_clip_on' of a type (line 669)
        get_clip_on_72237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 16), self_72236, 'get_clip_on')
        # Calling get_clip_on(args, kwargs) (line 669)
        get_clip_on_call_result_72239 = invoke(stypy.reporting.localization.Localization(__file__, 669, 16), get_clip_on_72237, *[], **kwargs_72238)
        
        # Getting the type of 'True' (line 669)
        True_72240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 38), 'True')
        # Applying the binary operator 'is' (line 669)
        result_is__72241 = python_operator(stypy.reporting.localization.Localization(__file__, 669, 16), 'is', get_clip_on_call_result_72239, True_72240)
        
        # Applying the binary operator 'and' (line 665)
        result_and_keyword_72242 = python_operator(stypy.reporting.localization.Localization(__file__, 665, 12), 'and', result_and_keyword_72235, result_is__72241)
        
        # Testing the type of an if condition (line 665)
        if_condition_72243 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 665, 8), result_and_keyword_72242)
        # Assigning a type to the variable 'if_condition_72243' (line 665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 665, 8), 'if_condition_72243', if_condition_72243)
        # SSA begins for if statement (line 665)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 670):
        
        # Assigning a Name to a Attribute (line 670):
        # Getting the type of 'True' (line 670)
        True_72244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 29), 'True')
        # Getting the type of 'self' (line 670)
        self_72245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 12), 'self')
        # Setting the type of the member '_subslice' of a type (line 670)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 12), self_72245, '_subslice', True_72244)
        
        # Assigning a Call to a Name (line 671):
        
        # Assigning a Call to a Name (line 671):
        
        # Call to isnan(...): (line 671)
        # Processing the call arguments (line 671)
        # Getting the type of 'x' (line 671)
        x_72248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 31), 'x', False)
        # Processing the call keyword arguments (line 671)
        kwargs_72249 = {}
        # Getting the type of 'np' (line 671)
        np_72246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 22), 'np', False)
        # Obtaining the member 'isnan' of a type (line 671)
        isnan_72247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 22), np_72246, 'isnan')
        # Calling isnan(args, kwargs) (line 671)
        isnan_call_result_72250 = invoke(stypy.reporting.localization.Localization(__file__, 671, 22), isnan_72247, *[x_72248], **kwargs_72249)
        
        # Assigning a type to the variable 'nanmask' (line 671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 671, 12), 'nanmask', isnan_call_result_72250)
        
        
        # Call to any(...): (line 672)
        # Processing the call keyword arguments (line 672)
        kwargs_72253 = {}
        # Getting the type of 'nanmask' (line 672)
        nanmask_72251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 15), 'nanmask', False)
        # Obtaining the member 'any' of a type (line 672)
        any_72252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 15), nanmask_72251, 'any')
        # Calling any(args, kwargs) (line 672)
        any_call_result_72254 = invoke(stypy.reporting.localization.Localization(__file__, 672, 15), any_72252, *[], **kwargs_72253)
        
        # Testing the type of an if condition (line 672)
        if_condition_72255 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 672, 12), any_call_result_72254)
        # Assigning a type to the variable 'if_condition_72255' (line 672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 12), 'if_condition_72255', if_condition_72255)
        # SSA begins for if statement (line 672)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 673):
        
        # Assigning a Call to a Attribute (line 673):
        
        # Call to copy(...): (line 673)
        # Processing the call keyword arguments (line 673)
        kwargs_72259 = {}
        # Getting the type of 'self' (line 673)
        self_72256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 33), 'self', False)
        # Obtaining the member '_x' of a type (line 673)
        _x_72257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 33), self_72256, '_x')
        # Obtaining the member 'copy' of a type (line 673)
        copy_72258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 33), _x_72257, 'copy')
        # Calling copy(args, kwargs) (line 673)
        copy_call_result_72260 = invoke(stypy.reporting.localization.Localization(__file__, 673, 33), copy_72258, *[], **kwargs_72259)
        
        # Getting the type of 'self' (line 673)
        self_72261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 16), 'self')
        # Setting the type of the member '_x_filled' of a type (line 673)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 16), self_72261, '_x_filled', copy_call_result_72260)
        
        # Assigning a Call to a Name (line 674):
        
        # Assigning a Call to a Name (line 674):
        
        # Call to arange(...): (line 674)
        # Processing the call arguments (line 674)
        
        # Call to len(...): (line 674)
        # Processing the call arguments (line 674)
        # Getting the type of 'x' (line 674)
        x_72265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 40), 'x', False)
        # Processing the call keyword arguments (line 674)
        kwargs_72266 = {}
        # Getting the type of 'len' (line 674)
        len_72264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 36), 'len', False)
        # Calling len(args, kwargs) (line 674)
        len_call_result_72267 = invoke(stypy.reporting.localization.Localization(__file__, 674, 36), len_72264, *[x_72265], **kwargs_72266)
        
        # Processing the call keyword arguments (line 674)
        kwargs_72268 = {}
        # Getting the type of 'np' (line 674)
        np_72262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 26), 'np', False)
        # Obtaining the member 'arange' of a type (line 674)
        arange_72263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 26), np_72262, 'arange')
        # Calling arange(args, kwargs) (line 674)
        arange_call_result_72269 = invoke(stypy.reporting.localization.Localization(__file__, 674, 26), arange_72263, *[len_call_result_72267], **kwargs_72268)
        
        # Assigning a type to the variable 'indices' (line 674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 16), 'indices', arange_call_result_72269)
        
        # Assigning a Call to a Subscript (line 675):
        
        # Assigning a Call to a Subscript (line 675):
        
        # Call to interp(...): (line 675)
        # Processing the call arguments (line 675)
        
        # Obtaining the type of the subscript
        # Getting the type of 'nanmask' (line 675)
        nanmask_72272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 60), 'nanmask', False)
        # Getting the type of 'indices' (line 675)
        indices_72273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 52), 'indices', False)
        # Obtaining the member '__getitem__' of a type (line 675)
        getitem___72274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 52), indices_72273, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 675)
        subscript_call_result_72275 = invoke(stypy.reporting.localization.Localization(__file__, 675, 52), getitem___72274, nanmask_72272)
        
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'nanmask' (line 676)
        nanmask_72276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 33), 'nanmask', False)
        # Applying the '~' unary operator (line 676)
        result_inv_72277 = python_operator(stypy.reporting.localization.Localization(__file__, 676, 32), '~', nanmask_72276)
        
        # Getting the type of 'indices' (line 676)
        indices_72278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 24), 'indices', False)
        # Obtaining the member '__getitem__' of a type (line 676)
        getitem___72279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 24), indices_72278, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 676)
        subscript_call_result_72280 = invoke(stypy.reporting.localization.Localization(__file__, 676, 24), getitem___72279, result_inv_72277)
        
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'nanmask' (line 676)
        nanmask_72281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 52), 'nanmask', False)
        # Applying the '~' unary operator (line 676)
        result_inv_72282 = python_operator(stypy.reporting.localization.Localization(__file__, 676, 51), '~', nanmask_72281)
        
        # Getting the type of 'self' (line 676)
        self_72283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 43), 'self', False)
        # Obtaining the member '_x' of a type (line 676)
        _x_72284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 43), self_72283, '_x')
        # Obtaining the member '__getitem__' of a type (line 676)
        getitem___72285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 43), _x_72284, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 676)
        subscript_call_result_72286 = invoke(stypy.reporting.localization.Localization(__file__, 676, 43), getitem___72285, result_inv_72282)
        
        # Processing the call keyword arguments (line 675)
        kwargs_72287 = {}
        # Getting the type of 'np' (line 675)
        np_72270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 42), 'np', False)
        # Obtaining the member 'interp' of a type (line 675)
        interp_72271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 42), np_72270, 'interp')
        # Calling interp(args, kwargs) (line 675)
        interp_call_result_72288 = invoke(stypy.reporting.localization.Localization(__file__, 675, 42), interp_72271, *[subscript_call_result_72275, subscript_call_result_72280, subscript_call_result_72286], **kwargs_72287)
        
        # Getting the type of 'self' (line 675)
        self_72289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 16), 'self')
        # Obtaining the member '_x_filled' of a type (line 675)
        _x_filled_72290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 16), self_72289, '_x_filled')
        # Getting the type of 'nanmask' (line 675)
        nanmask_72291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 31), 'nanmask')
        # Storing an element on a container (line 675)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 675, 16), _x_filled_72290, (nanmask_72291, interp_call_result_72288))
        # SSA branch for the else part of an if statement (line 672)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Attribute (line 678):
        
        # Assigning a Attribute to a Attribute (line 678):
        # Getting the type of 'self' (line 678)
        self_72292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 33), 'self')
        # Obtaining the member '_x' of a type (line 678)
        _x_72293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 678, 33), self_72292, '_x')
        # Getting the type of 'self' (line 678)
        self_72294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 16), 'self')
        # Setting the type of the member '_x_filled' of a type (line 678)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 678, 16), self_72294, '_x_filled', _x_72293)
        # SSA join for if statement (line 672)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 665)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 680)
        self_72295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 11), 'self')
        # Obtaining the member '_path' of a type (line 680)
        _path_72296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 11), self_72295, '_path')
        # Getting the type of 'None' (line 680)
        None_72297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 29), 'None')
        # Applying the binary operator 'isnot' (line 680)
        result_is_not_72298 = python_operator(stypy.reporting.localization.Localization(__file__, 680, 11), 'isnot', _path_72296, None_72297)
        
        # Testing the type of an if condition (line 680)
        if_condition_72299 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 680, 8), result_is_not_72298)
        # Assigning a type to the variable 'if_condition_72299' (line 680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 8), 'if_condition_72299', if_condition_72299)
        # SSA begins for if statement (line 680)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 681):
        
        # Assigning a Attribute to a Name (line 681):
        # Getting the type of 'self' (line 681)
        self_72300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 34), 'self')
        # Obtaining the member '_path' of a type (line 681)
        _path_72301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 681, 34), self_72300, '_path')
        # Obtaining the member '_interpolation_steps' of a type (line 681)
        _interpolation_steps_72302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 681, 34), _path_72301, '_interpolation_steps')
        # Assigning a type to the variable 'interpolation_steps' (line 681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 681, 12), 'interpolation_steps', _interpolation_steps_72302)
        # SSA branch for the else part of an if statement (line 680)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 683):
        
        # Assigning a Num to a Name (line 683):
        int_72303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 683, 34), 'int')
        # Assigning a type to the variable 'interpolation_steps' (line 683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 683, 12), 'interpolation_steps', int_72303)
        # SSA join for if statement (line 680)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 684):
        
        # Assigning a Call to a Name (line 684):
        
        # Call to (...): (line 684)
        # Getting the type of 'self' (line 684)
        self_72309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 47), 'self', False)
        # Obtaining the member '_xy' of a type (line 684)
        _xy_72310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 47), self_72309, '_xy')
        # Obtaining the member 'T' of a type (line 684)
        T_72311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 47), _xy_72310, 'T')
        # Processing the call keyword arguments (line 684)
        kwargs_72312 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 684)
        self_72304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 29), 'self', False)
        # Obtaining the member '_drawstyle' of a type (line 684)
        _drawstyle_72305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 29), self_72304, '_drawstyle')
        # Getting the type of 'STEP_LOOKUP_MAP' (line 684)
        STEP_LOOKUP_MAP_72306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 13), 'STEP_LOOKUP_MAP', False)
        # Obtaining the member '__getitem__' of a type (line 684)
        getitem___72307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 13), STEP_LOOKUP_MAP_72306, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 684)
        subscript_call_result_72308 = invoke(stypy.reporting.localization.Localization(__file__, 684, 13), getitem___72307, _drawstyle_72305)
        
        # Calling (args, kwargs) (line 684)
        _call_result_72313 = invoke(stypy.reporting.localization.Localization(__file__, 684, 13), subscript_call_result_72308, *[T_72311], **kwargs_72312)
        
        # Assigning a type to the variable 'xy' (line 684)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 684, 8), 'xy', _call_result_72313)
        
        # Assigning a Call to a Attribute (line 685):
        
        # Assigning a Call to a Attribute (line 685):
        
        # Call to Path(...): (line 685)
        # Processing the call arguments (line 685)
        
        # Call to asarray(...): (line 685)
        # Processing the call arguments (line 685)
        # Getting the type of 'xy' (line 685)
        xy_72317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 37), 'xy', False)
        # Processing the call keyword arguments (line 685)
        kwargs_72318 = {}
        # Getting the type of 'np' (line 685)
        np_72315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 26), 'np', False)
        # Obtaining the member 'asarray' of a type (line 685)
        asarray_72316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 26), np_72315, 'asarray')
        # Calling asarray(args, kwargs) (line 685)
        asarray_call_result_72319 = invoke(stypy.reporting.localization.Localization(__file__, 685, 26), asarray_72316, *[xy_72317], **kwargs_72318)
        
        # Obtaining the member 'T' of a type (line 685)
        T_72320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 26), asarray_call_result_72319, 'T')
        # Processing the call keyword arguments (line 685)
        # Getting the type of 'interpolation_steps' (line 686)
        interpolation_steps_72321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 47), 'interpolation_steps', False)
        keyword_72322 = interpolation_steps_72321
        kwargs_72323 = {'_interpolation_steps': keyword_72322}
        # Getting the type of 'Path' (line 685)
        Path_72314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 21), 'Path', False)
        # Calling Path(args, kwargs) (line 685)
        Path_call_result_72324 = invoke(stypy.reporting.localization.Localization(__file__, 685, 21), Path_72314, *[T_72320], **kwargs_72323)
        
        # Getting the type of 'self' (line 685)
        self_72325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 8), 'self')
        # Setting the type of the member '_path' of a type (line 685)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 8), self_72325, '_path', Path_call_result_72324)
        
        # Assigning a Name to a Attribute (line 687):
        
        # Assigning a Name to a Attribute (line 687):
        # Getting the type of 'None' (line 687)
        None_72326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 33), 'None')
        # Getting the type of 'self' (line 687)
        self_72327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 8), 'self')
        # Setting the type of the member '_transformed_path' of a type (line 687)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 8), self_72327, '_transformed_path', None_72326)
        
        # Assigning a Name to a Attribute (line 688):
        
        # Assigning a Name to a Attribute (line 688):
        # Getting the type of 'False' (line 688)
        False_72328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 25), 'False')
        # Getting the type of 'self' (line 688)
        self_72329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 8), 'self')
        # Setting the type of the member '_invalidx' of a type (line 688)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 8), self_72329, '_invalidx', False_72328)
        
        # Assigning a Name to a Attribute (line 689):
        
        # Assigning a Name to a Attribute (line 689):
        # Getting the type of 'False' (line 689)
        False_72330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 25), 'False')
        # Getting the type of 'self' (line 689)
        self_72331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 8), 'self')
        # Setting the type of the member '_invalidy' of a type (line 689)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 8), self_72331, '_invalidy', False_72330)
        
        # ################# End of 'recache(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'recache' in the type store
        # Getting the type of 'stypy_return_type' (line 649)
        stypy_return_type_72332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_72332)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'recache'
        return stypy_return_type_72332


    @norecursion
    def _transform_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 691)
        None_72333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 39), 'None')
        defaults = [None_72333]
        # Create a new context for function '_transform_path'
        module_type_store = module_type_store.open_function_context('_transform_path', 691, 4, False)
        # Assigning a type to the variable 'self' (line 692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D._transform_path.__dict__.__setitem__('stypy_localization', localization)
        Line2D._transform_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D._transform_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D._transform_path.__dict__.__setitem__('stypy_function_name', 'Line2D._transform_path')
        Line2D._transform_path.__dict__.__setitem__('stypy_param_names_list', ['subslice'])
        Line2D._transform_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D._transform_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D._transform_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D._transform_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D._transform_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D._transform_path.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D._transform_path', ['subslice'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_transform_path', localization, ['subslice'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_transform_path(...)' code ##################

        unicode_72334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 696, (-1)), 'unicode', u'\n        Puts a TransformedPath instance at self._transformed_path;\n        all invalidation of the transform is then handled by the\n        TransformedPath instance.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 698)
        # Getting the type of 'subslice' (line 698)
        subslice_72335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 8), 'subslice')
        # Getting the type of 'None' (line 698)
        None_72336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 27), 'None')
        
        (may_be_72337, more_types_in_union_72338) = may_not_be_none(subslice_72335, None_72336)

        if may_be_72337:

            if more_types_in_union_72338:
                # Runtime conditional SSA (line 698)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 699):
            
            # Assigning a Call to a Name (line 699):
            
            # Call to (...): (line 699)
            
            # Obtaining the type of the subscript
            # Getting the type of 'subslice' (line 699)
            subslice_72344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 60), 'subslice', False)
            slice_72345 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 699, 51), None, None, None)
            # Getting the type of 'self' (line 699)
            self_72346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 51), 'self', False)
            # Obtaining the member '_xy' of a type (line 699)
            _xy_72347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 51), self_72346, '_xy')
            # Obtaining the member '__getitem__' of a type (line 699)
            getitem___72348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 51), _xy_72347, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 699)
            subscript_call_result_72349 = invoke(stypy.reporting.localization.Localization(__file__, 699, 51), getitem___72348, (subslice_72344, slice_72345))
            
            # Obtaining the member 'T' of a type (line 699)
            T_72350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 51), subscript_call_result_72349, 'T')
            # Processing the call keyword arguments (line 699)
            kwargs_72351 = {}
            
            # Obtaining the type of the subscript
            # Getting the type of 'self' (line 699)
            self_72339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 33), 'self', False)
            # Obtaining the member '_drawstyle' of a type (line 699)
            _drawstyle_72340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 33), self_72339, '_drawstyle')
            # Getting the type of 'STEP_LOOKUP_MAP' (line 699)
            STEP_LOOKUP_MAP_72341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 17), 'STEP_LOOKUP_MAP', False)
            # Obtaining the member '__getitem__' of a type (line 699)
            getitem___72342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 17), STEP_LOOKUP_MAP_72341, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 699)
            subscript_call_result_72343 = invoke(stypy.reporting.localization.Localization(__file__, 699, 17), getitem___72342, _drawstyle_72340)
            
            # Calling (args, kwargs) (line 699)
            _call_result_72352 = invoke(stypy.reporting.localization.Localization(__file__, 699, 17), subscript_call_result_72343, *[T_72350], **kwargs_72351)
            
            # Assigning a type to the variable 'xy' (line 699)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 699, 12), 'xy', _call_result_72352)
            
            # Assigning a Call to a Name (line 700):
            
            # Assigning a Call to a Name (line 700):
            
            # Call to Path(...): (line 700)
            # Processing the call arguments (line 700)
            
            # Call to asarray(...): (line 700)
            # Processing the call arguments (line 700)
            # Getting the type of 'xy' (line 700)
            xy_72356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 36), 'xy', False)
            # Processing the call keyword arguments (line 700)
            kwargs_72357 = {}
            # Getting the type of 'np' (line 700)
            np_72354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 25), 'np', False)
            # Obtaining the member 'asarray' of a type (line 700)
            asarray_72355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 700, 25), np_72354, 'asarray')
            # Calling asarray(args, kwargs) (line 700)
            asarray_call_result_72358 = invoke(stypy.reporting.localization.Localization(__file__, 700, 25), asarray_72355, *[xy_72356], **kwargs_72357)
            
            # Obtaining the member 'T' of a type (line 700)
            T_72359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 700, 25), asarray_call_result_72358, 'T')
            # Processing the call keyword arguments (line 700)
            # Getting the type of 'self' (line 701)
            self_72360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 46), 'self', False)
            # Obtaining the member '_path' of a type (line 701)
            _path_72361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 701, 46), self_72360, '_path')
            # Obtaining the member '_interpolation_steps' of a type (line 701)
            _interpolation_steps_72362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 701, 46), _path_72361, '_interpolation_steps')
            keyword_72363 = _interpolation_steps_72362
            kwargs_72364 = {'_interpolation_steps': keyword_72363}
            # Getting the type of 'Path' (line 700)
            Path_72353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 20), 'Path', False)
            # Calling Path(args, kwargs) (line 700)
            Path_call_result_72365 = invoke(stypy.reporting.localization.Localization(__file__, 700, 20), Path_72353, *[T_72359], **kwargs_72364)
            
            # Assigning a type to the variable '_path' (line 700)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 700, 12), '_path', Path_call_result_72365)

            if more_types_in_union_72338:
                # Runtime conditional SSA for else branch (line 698)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_72337) or more_types_in_union_72338):
            
            # Assigning a Attribute to a Name (line 703):
            
            # Assigning a Attribute to a Name (line 703):
            # Getting the type of 'self' (line 703)
            self_72366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 20), 'self')
            # Obtaining the member '_path' of a type (line 703)
            _path_72367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 20), self_72366, '_path')
            # Assigning a type to the variable '_path' (line 703)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 12), '_path', _path_72367)

            if (may_be_72337 and more_types_in_union_72338):
                # SSA join for if statement (line 698)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 704):
        
        # Assigning a Call to a Attribute (line 704):
        
        # Call to TransformedPath(...): (line 704)
        # Processing the call arguments (line 704)
        # Getting the type of '_path' (line 704)
        _path_72369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 49), '_path', False)
        
        # Call to get_transform(...): (line 704)
        # Processing the call keyword arguments (line 704)
        kwargs_72372 = {}
        # Getting the type of 'self' (line 704)
        self_72370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 56), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 704)
        get_transform_72371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 704, 56), self_72370, 'get_transform')
        # Calling get_transform(args, kwargs) (line 704)
        get_transform_call_result_72373 = invoke(stypy.reporting.localization.Localization(__file__, 704, 56), get_transform_72371, *[], **kwargs_72372)
        
        # Processing the call keyword arguments (line 704)
        kwargs_72374 = {}
        # Getting the type of 'TransformedPath' (line 704)
        TransformedPath_72368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 33), 'TransformedPath', False)
        # Calling TransformedPath(args, kwargs) (line 704)
        TransformedPath_call_result_72375 = invoke(stypy.reporting.localization.Localization(__file__, 704, 33), TransformedPath_72368, *[_path_72369, get_transform_call_result_72373], **kwargs_72374)
        
        # Getting the type of 'self' (line 704)
        self_72376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 8), 'self')
        # Setting the type of the member '_transformed_path' of a type (line 704)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 704, 8), self_72376, '_transformed_path', TransformedPath_call_result_72375)
        
        # ################# End of '_transform_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_transform_path' in the type store
        # Getting the type of 'stypy_return_type' (line 691)
        stypy_return_type_72377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_72377)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_transform_path'
        return stypy_return_type_72377


    @norecursion
    def _get_transformed_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_transformed_path'
        module_type_store = module_type_store.open_function_context('_get_transformed_path', 706, 4, False)
        # Assigning a type to the variable 'self' (line 707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D._get_transformed_path.__dict__.__setitem__('stypy_localization', localization)
        Line2D._get_transformed_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D._get_transformed_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D._get_transformed_path.__dict__.__setitem__('stypy_function_name', 'Line2D._get_transformed_path')
        Line2D._get_transformed_path.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D._get_transformed_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D._get_transformed_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D._get_transformed_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D._get_transformed_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D._get_transformed_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D._get_transformed_path.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D._get_transformed_path', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_transformed_path', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_transformed_path(...)' code ##################

        unicode_72378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, (-1)), 'unicode', u'\n        Return the :class:`~matplotlib.transforms.TransformedPath` instance\n        of this line.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 711)
        # Getting the type of 'self' (line 711)
        self_72379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 11), 'self')
        # Obtaining the member '_transformed_path' of a type (line 711)
        _transformed_path_72380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 11), self_72379, '_transformed_path')
        # Getting the type of 'None' (line 711)
        None_72381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 37), 'None')
        
        (may_be_72382, more_types_in_union_72383) = may_be_none(_transformed_path_72380, None_72381)

        if may_be_72382:

            if more_types_in_union_72383:
                # Runtime conditional SSA (line 711)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to _transform_path(...): (line 712)
            # Processing the call keyword arguments (line 712)
            kwargs_72386 = {}
            # Getting the type of 'self' (line 712)
            self_72384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 12), 'self', False)
            # Obtaining the member '_transform_path' of a type (line 712)
            _transform_path_72385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 12), self_72384, '_transform_path')
            # Calling _transform_path(args, kwargs) (line 712)
            _transform_path_call_result_72387 = invoke(stypy.reporting.localization.Localization(__file__, 712, 12), _transform_path_72385, *[], **kwargs_72386)
            

            if more_types_in_union_72383:
                # SSA join for if statement (line 711)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 713)
        self_72388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 15), 'self')
        # Obtaining the member '_transformed_path' of a type (line 713)
        _transformed_path_72389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 15), self_72388, '_transformed_path')
        # Assigning a type to the variable 'stypy_return_type' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 8), 'stypy_return_type', _transformed_path_72389)
        
        # ################# End of '_get_transformed_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_transformed_path' in the type store
        # Getting the type of 'stypy_return_type' (line 706)
        stypy_return_type_72390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_72390)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_transformed_path'
        return stypy_return_type_72390


    @norecursion
    def set_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_transform'
        module_type_store = module_type_store.open_function_context('set_transform', 715, 4, False)
        # Assigning a type to the variable 'self' (line 716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 716, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_transform.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_transform.__dict__.__setitem__('stypy_function_name', 'Line2D.set_transform')
        Line2D.set_transform.__dict__.__setitem__('stypy_param_names_list', ['t'])
        Line2D.set_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_transform.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_transform', ['t'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_transform', localization, ['t'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_transform(...)' code ##################

        unicode_72391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, (-1)), 'unicode', u'\n        set the Transformation instance used by this artist\n\n        ACCEPTS: a :class:`matplotlib.transforms.Transform` instance\n        ')
        
        # Call to set_transform(...): (line 721)
        # Processing the call arguments (line 721)
        # Getting the type of 'self' (line 721)
        self_72394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 29), 'self', False)
        # Getting the type of 't' (line 721)
        t_72395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 35), 't', False)
        # Processing the call keyword arguments (line 721)
        kwargs_72396 = {}
        # Getting the type of 'Artist' (line 721)
        Artist_72392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 8), 'Artist', False)
        # Obtaining the member 'set_transform' of a type (line 721)
        set_transform_72393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 721, 8), Artist_72392, 'set_transform')
        # Calling set_transform(args, kwargs) (line 721)
        set_transform_call_result_72397 = invoke(stypy.reporting.localization.Localization(__file__, 721, 8), set_transform_72393, *[self_72394, t_72395], **kwargs_72396)
        
        
        # Assigning a Name to a Attribute (line 722):
        
        # Assigning a Name to a Attribute (line 722):
        # Getting the type of 'True' (line 722)
        True_72398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 25), 'True')
        # Getting the type of 'self' (line 722)
        self_72399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 8), 'self')
        # Setting the type of the member '_invalidx' of a type (line 722)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 8), self_72399, '_invalidx', True_72398)
        
        # Assigning a Name to a Attribute (line 723):
        
        # Assigning a Name to a Attribute (line 723):
        # Getting the type of 'True' (line 723)
        True_72400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 25), 'True')
        # Getting the type of 'self' (line 723)
        self_72401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 8), 'self')
        # Setting the type of the member '_invalidy' of a type (line 723)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 8), self_72401, '_invalidy', True_72400)
        
        # Assigning a Name to a Attribute (line 724):
        
        # Assigning a Name to a Attribute (line 724):
        # Getting the type of 'True' (line 724)
        True_72402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 21), 'True')
        # Getting the type of 'self' (line 724)
        self_72403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 724)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 724, 8), self_72403, 'stale', True_72402)
        
        # ################# End of 'set_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 715)
        stypy_return_type_72404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_72404)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_transform'
        return stypy_return_type_72404


    @norecursion
    def _is_sorted(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_sorted'
        module_type_store = module_type_store.open_function_context('_is_sorted', 726, 4, False)
        # Assigning a type to the variable 'self' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D._is_sorted.__dict__.__setitem__('stypy_localization', localization)
        Line2D._is_sorted.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D._is_sorted.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D._is_sorted.__dict__.__setitem__('stypy_function_name', 'Line2D._is_sorted')
        Line2D._is_sorted.__dict__.__setitem__('stypy_param_names_list', ['x'])
        Line2D._is_sorted.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D._is_sorted.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D._is_sorted.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D._is_sorted.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D._is_sorted.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D._is_sorted.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D._is_sorted', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_sorted', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_sorted(...)' code ##################

        unicode_72405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 8), 'unicode', u'return True if x is sorted in ascending order')
        
        # Call to is_sorted(...): (line 729)
        # Processing the call arguments (line 729)
        # Getting the type of 'x' (line 729)
        x_72408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 31), 'x', False)
        # Processing the call keyword arguments (line 729)
        kwargs_72409 = {}
        # Getting the type of '_path' (line 729)
        _path_72406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 15), '_path', False)
        # Obtaining the member 'is_sorted' of a type (line 729)
        is_sorted_72407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 15), _path_72406, 'is_sorted')
        # Calling is_sorted(args, kwargs) (line 729)
        is_sorted_call_result_72410 = invoke(stypy.reporting.localization.Localization(__file__, 729, 15), is_sorted_72407, *[x_72408], **kwargs_72409)
        
        # Assigning a type to the variable 'stypy_return_type' (line 729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 8), 'stypy_return_type', is_sorted_call_result_72410)
        
        # ################# End of '_is_sorted(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_sorted' in the type store
        # Getting the type of 'stypy_return_type' (line 726)
        stypy_return_type_72411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_72411)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_sorted'
        return stypy_return_type_72411


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 731, 4, False)
        # Assigning a type to the variable 'self' (line 732)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.draw.__dict__.__setitem__('stypy_localization', localization)
        Line2D.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.draw.__dict__.__setitem__('stypy_function_name', 'Line2D.draw')
        Line2D.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Line2D.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_72412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 733, 8), 'unicode', u'draw the Line with `renderer` unless visibility is False')
        
        
        
        # Call to get_visible(...): (line 734)
        # Processing the call keyword arguments (line 734)
        kwargs_72415 = {}
        # Getting the type of 'self' (line 734)
        self_72413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 734)
        get_visible_72414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 15), self_72413, 'get_visible')
        # Calling get_visible(args, kwargs) (line 734)
        get_visible_call_result_72416 = invoke(stypy.reporting.localization.Localization(__file__, 734, 15), get_visible_72414, *[], **kwargs_72415)
        
        # Applying the 'not' unary operator (line 734)
        result_not__72417 = python_operator(stypy.reporting.localization.Localization(__file__, 734, 11), 'not', get_visible_call_result_72416)
        
        # Testing the type of an if condition (line 734)
        if_condition_72418 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 734, 8), result_not__72417)
        # Assigning a type to the variable 'if_condition_72418' (line 734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'if_condition_72418', if_condition_72418)
        # SSA begins for if statement (line 734)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 735, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 734)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 737)
        self_72419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 11), 'self')
        # Obtaining the member '_invalidy' of a type (line 737)
        _invalidy_72420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 11), self_72419, '_invalidy')
        # Getting the type of 'self' (line 737)
        self_72421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 29), 'self')
        # Obtaining the member '_invalidx' of a type (line 737)
        _invalidx_72422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 29), self_72421, '_invalidx')
        # Applying the binary operator 'or' (line 737)
        result_or_keyword_72423 = python_operator(stypy.reporting.localization.Localization(__file__, 737, 11), 'or', _invalidy_72420, _invalidx_72422)
        
        # Testing the type of an if condition (line 737)
        if_condition_72424 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 737, 8), result_or_keyword_72423)
        # Assigning a type to the variable 'if_condition_72424' (line 737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 8), 'if_condition_72424', if_condition_72424)
        # SSA begins for if statement (line 737)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to recache(...): (line 738)
        # Processing the call keyword arguments (line 738)
        kwargs_72427 = {}
        # Getting the type of 'self' (line 738)
        self_72425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 12), 'self', False)
        # Obtaining the member 'recache' of a type (line 738)
        recache_72426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 12), self_72425, 'recache')
        # Calling recache(args, kwargs) (line 738)
        recache_call_result_72428 = invoke(stypy.reporting.localization.Localization(__file__, 738, 12), recache_72426, *[], **kwargs_72427)
        
        # SSA join for if statement (line 737)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Attribute (line 739):
        
        # Assigning a Num to a Attribute (line 739):
        int_72429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 739, 26), 'int')
        # Getting the type of 'self' (line 739)
        self_72430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 8), 'self')
        # Setting the type of the member 'ind_offset' of a type (line 739)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 8), self_72430, 'ind_offset', int_72429)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 740)
        self_72431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 11), 'self')
        # Obtaining the member '_subslice' of a type (line 740)
        _subslice_72432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 11), self_72431, '_subslice')
        # Getting the type of 'self' (line 740)
        self_72433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 30), 'self')
        # Obtaining the member 'axes' of a type (line 740)
        axes_72434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 30), self_72433, 'axes')
        # Applying the binary operator 'and' (line 740)
        result_and_keyword_72435 = python_operator(stypy.reporting.localization.Localization(__file__, 740, 11), 'and', _subslice_72432, axes_72434)
        
        # Testing the type of an if condition (line 740)
        if_condition_72436 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 740, 8), result_and_keyword_72435)
        # Assigning a type to the variable 'if_condition_72436' (line 740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 740, 8), 'if_condition_72436', if_condition_72436)
        # SSA begins for if statement (line 740)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 741):
        
        # Assigning a Call to a Name:
        
        # Call to get_xbound(...): (line 741)
        # Processing the call keyword arguments (line 741)
        kwargs_72440 = {}
        # Getting the type of 'self' (line 741)
        self_72437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 21), 'self', False)
        # Obtaining the member 'axes' of a type (line 741)
        axes_72438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 21), self_72437, 'axes')
        # Obtaining the member 'get_xbound' of a type (line 741)
        get_xbound_72439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 21), axes_72438, 'get_xbound')
        # Calling get_xbound(args, kwargs) (line 741)
        get_xbound_call_result_72441 = invoke(stypy.reporting.localization.Localization(__file__, 741, 21), get_xbound_72439, *[], **kwargs_72440)
        
        # Assigning a type to the variable 'call_assignment_70619' (line 741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 12), 'call_assignment_70619', get_xbound_call_result_72441)
        
        # Assigning a Call to a Name (line 741):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_72444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 741, 12), 'int')
        # Processing the call keyword arguments
        kwargs_72445 = {}
        # Getting the type of 'call_assignment_70619' (line 741)
        call_assignment_70619_72442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 12), 'call_assignment_70619', False)
        # Obtaining the member '__getitem__' of a type (line 741)
        getitem___72443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 12), call_assignment_70619_72442, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_72446 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___72443, *[int_72444], **kwargs_72445)
        
        # Assigning a type to the variable 'call_assignment_70620' (line 741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 12), 'call_assignment_70620', getitem___call_result_72446)
        
        # Assigning a Name to a Name (line 741):
        # Getting the type of 'call_assignment_70620' (line 741)
        call_assignment_70620_72447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 12), 'call_assignment_70620')
        # Assigning a type to the variable 'x0' (line 741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 12), 'x0', call_assignment_70620_72447)
        
        # Assigning a Call to a Name (line 741):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_72450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 741, 12), 'int')
        # Processing the call keyword arguments
        kwargs_72451 = {}
        # Getting the type of 'call_assignment_70619' (line 741)
        call_assignment_70619_72448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 12), 'call_assignment_70619', False)
        # Obtaining the member '__getitem__' of a type (line 741)
        getitem___72449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 12), call_assignment_70619_72448, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_72452 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___72449, *[int_72450], **kwargs_72451)
        
        # Assigning a type to the variable 'call_assignment_70621' (line 741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 12), 'call_assignment_70621', getitem___call_result_72452)
        
        # Assigning a Name to a Name (line 741):
        # Getting the type of 'call_assignment_70621' (line 741)
        call_assignment_70621_72453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 12), 'call_assignment_70621')
        # Assigning a type to the variable 'x1' (line 741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 16), 'x1', call_assignment_70621_72453)
        
        # Assigning a Call to a Tuple (line 742):
        
        # Assigning a Call to a Name:
        
        # Call to searchsorted(...): (line 742)
        # Processing the call arguments (line 742)
        
        # Obtaining an instance of the builtin type 'list' (line 742)
        list_72457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 46), 'list')
        # Adding type elements to the builtin type 'list' instance (line 742)
        # Adding element type (line 742)
        # Getting the type of 'x0' (line 742)
        x0_72458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 47), 'x0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 742, 46), list_72457, x0_72458)
        
        unicode_72459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 52), 'unicode', u'left')
        # Processing the call keyword arguments (line 742)
        kwargs_72460 = {}
        # Getting the type of 'self' (line 742)
        self_72454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 18), 'self', False)
        # Obtaining the member '_x_filled' of a type (line 742)
        _x_filled_72455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 18), self_72454, '_x_filled')
        # Obtaining the member 'searchsorted' of a type (line 742)
        searchsorted_72456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 18), _x_filled_72455, 'searchsorted')
        # Calling searchsorted(args, kwargs) (line 742)
        searchsorted_call_result_72461 = invoke(stypy.reporting.localization.Localization(__file__, 742, 18), searchsorted_72456, *[list_72457, unicode_72459], **kwargs_72460)
        
        # Assigning a type to the variable 'call_assignment_70622' (line 742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 12), 'call_assignment_70622', searchsorted_call_result_72461)
        
        # Assigning a Call to a Name (line 742):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_72464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 12), 'int')
        # Processing the call keyword arguments
        kwargs_72465 = {}
        # Getting the type of 'call_assignment_70622' (line 742)
        call_assignment_70622_72462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 12), 'call_assignment_70622', False)
        # Obtaining the member '__getitem__' of a type (line 742)
        getitem___72463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 12), call_assignment_70622_72462, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_72466 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___72463, *[int_72464], **kwargs_72465)
        
        # Assigning a type to the variable 'call_assignment_70623' (line 742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 12), 'call_assignment_70623', getitem___call_result_72466)
        
        # Assigning a Name to a Name (line 742):
        # Getting the type of 'call_assignment_70623' (line 742)
        call_assignment_70623_72467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 12), 'call_assignment_70623')
        # Assigning a type to the variable 'i0' (line 742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 12), 'i0', call_assignment_70623_72467)
        
        # Assigning a Call to a Tuple (line 743):
        
        # Assigning a Call to a Name:
        
        # Call to searchsorted(...): (line 743)
        # Processing the call arguments (line 743)
        
        # Obtaining an instance of the builtin type 'list' (line 743)
        list_72471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 743, 46), 'list')
        # Adding type elements to the builtin type 'list' instance (line 743)
        # Adding element type (line 743)
        # Getting the type of 'x1' (line 743)
        x1_72472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 47), 'x1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 743, 46), list_72471, x1_72472)
        
        unicode_72473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 743, 52), 'unicode', u'right')
        # Processing the call keyword arguments (line 743)
        kwargs_72474 = {}
        # Getting the type of 'self' (line 743)
        self_72468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 18), 'self', False)
        # Obtaining the member '_x_filled' of a type (line 743)
        _x_filled_72469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 18), self_72468, '_x_filled')
        # Obtaining the member 'searchsorted' of a type (line 743)
        searchsorted_72470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 18), _x_filled_72469, 'searchsorted')
        # Calling searchsorted(args, kwargs) (line 743)
        searchsorted_call_result_72475 = invoke(stypy.reporting.localization.Localization(__file__, 743, 18), searchsorted_72470, *[list_72471, unicode_72473], **kwargs_72474)
        
        # Assigning a type to the variable 'call_assignment_70624' (line 743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 12), 'call_assignment_70624', searchsorted_call_result_72475)
        
        # Assigning a Call to a Name (line 743):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_72478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 743, 12), 'int')
        # Processing the call keyword arguments
        kwargs_72479 = {}
        # Getting the type of 'call_assignment_70624' (line 743)
        call_assignment_70624_72476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 12), 'call_assignment_70624', False)
        # Obtaining the member '__getitem__' of a type (line 743)
        getitem___72477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 12), call_assignment_70624_72476, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_72480 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___72477, *[int_72478], **kwargs_72479)
        
        # Assigning a type to the variable 'call_assignment_70625' (line 743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 12), 'call_assignment_70625', getitem___call_result_72480)
        
        # Assigning a Name to a Name (line 743):
        # Getting the type of 'call_assignment_70625' (line 743)
        call_assignment_70625_72481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 12), 'call_assignment_70625')
        # Assigning a type to the variable 'i1' (line 743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 12), 'i1', call_assignment_70625_72481)
        
        # Assigning a Call to a Name (line 744):
        
        # Assigning a Call to a Name (line 744):
        
        # Call to slice(...): (line 744)
        # Processing the call arguments (line 744)
        
        # Call to max(...): (line 744)
        # Processing the call arguments (line 744)
        # Getting the type of 'i0' (line 744)
        i0_72484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 33), 'i0', False)
        int_72485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 744, 38), 'int')
        # Applying the binary operator '-' (line 744)
        result_sub_72486 = python_operator(stypy.reporting.localization.Localization(__file__, 744, 33), '-', i0_72484, int_72485)
        
        int_72487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 744, 41), 'int')
        # Processing the call keyword arguments (line 744)
        kwargs_72488 = {}
        # Getting the type of 'max' (line 744)
        max_72483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 29), 'max', False)
        # Calling max(args, kwargs) (line 744)
        max_call_result_72489 = invoke(stypy.reporting.localization.Localization(__file__, 744, 29), max_72483, *[result_sub_72486, int_72487], **kwargs_72488)
        
        # Getting the type of 'i1' (line 744)
        i1_72490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 45), 'i1', False)
        int_72491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 744, 50), 'int')
        # Applying the binary operator '+' (line 744)
        result_add_72492 = python_operator(stypy.reporting.localization.Localization(__file__, 744, 45), '+', i1_72490, int_72491)
        
        # Processing the call keyword arguments (line 744)
        kwargs_72493 = {}
        # Getting the type of 'slice' (line 744)
        slice_72482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 23), 'slice', False)
        # Calling slice(args, kwargs) (line 744)
        slice_call_result_72494 = invoke(stypy.reporting.localization.Localization(__file__, 744, 23), slice_72482, *[max_call_result_72489, result_add_72492], **kwargs_72493)
        
        # Assigning a type to the variable 'subslice' (line 744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 744, 12), 'subslice', slice_call_result_72494)
        
        # Assigning a Attribute to a Attribute (line 745):
        
        # Assigning a Attribute to a Attribute (line 745):
        # Getting the type of 'subslice' (line 745)
        subslice_72495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 30), 'subslice')
        # Obtaining the member 'start' of a type (line 745)
        start_72496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 745, 30), subslice_72495, 'start')
        # Getting the type of 'self' (line 745)
        self_72497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 12), 'self')
        # Setting the type of the member 'ind_offset' of a type (line 745)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 745, 12), self_72497, 'ind_offset', start_72496)
        
        # Call to _transform_path(...): (line 746)
        # Processing the call arguments (line 746)
        # Getting the type of 'subslice' (line 746)
        subslice_72500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 33), 'subslice', False)
        # Processing the call keyword arguments (line 746)
        kwargs_72501 = {}
        # Getting the type of 'self' (line 746)
        self_72498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 12), 'self', False)
        # Obtaining the member '_transform_path' of a type (line 746)
        _transform_path_72499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 746, 12), self_72498, '_transform_path')
        # Calling _transform_path(args, kwargs) (line 746)
        _transform_path_call_result_72502 = invoke(stypy.reporting.localization.Localization(__file__, 746, 12), _transform_path_72499, *[subslice_72500], **kwargs_72501)
        
        # SSA join for if statement (line 740)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 748):
        
        # Assigning a Call to a Name (line 748):
        
        # Call to _get_transformed_path(...): (line 748)
        # Processing the call keyword arguments (line 748)
        kwargs_72505 = {}
        # Getting the type of 'self' (line 748)
        self_72503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 22), 'self', False)
        # Obtaining the member '_get_transformed_path' of a type (line 748)
        _get_transformed_path_72504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 22), self_72503, '_get_transformed_path')
        # Calling _get_transformed_path(args, kwargs) (line 748)
        _get_transformed_path_call_result_72506 = invoke(stypy.reporting.localization.Localization(__file__, 748, 22), _get_transformed_path_72504, *[], **kwargs_72505)
        
        # Assigning a type to the variable 'transf_path' (line 748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 8), 'transf_path', _get_transformed_path_call_result_72506)
        
        
        # Call to get_path_effects(...): (line 750)
        # Processing the call keyword arguments (line 750)
        kwargs_72509 = {}
        # Getting the type of 'self' (line 750)
        self_72507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 11), 'self', False)
        # Obtaining the member 'get_path_effects' of a type (line 750)
        get_path_effects_72508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 11), self_72507, 'get_path_effects')
        # Calling get_path_effects(args, kwargs) (line 750)
        get_path_effects_call_result_72510 = invoke(stypy.reporting.localization.Localization(__file__, 750, 11), get_path_effects_72508, *[], **kwargs_72509)
        
        # Testing the type of an if condition (line 750)
        if_condition_72511 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 750, 8), get_path_effects_call_result_72510)
        # Assigning a type to the variable 'if_condition_72511' (line 750)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 8), 'if_condition_72511', if_condition_72511)
        # SSA begins for if statement (line 750)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 751, 12))
        
        # 'from matplotlib.patheffects import PathEffectRenderer' statement (line 751)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_72512 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 751, 12), 'matplotlib.patheffects')

        if (type(import_72512) is not StypyTypeError):

            if (import_72512 != 'pyd_module'):
                __import__(import_72512)
                sys_modules_72513 = sys.modules[import_72512]
                import_from_module(stypy.reporting.localization.Localization(__file__, 751, 12), 'matplotlib.patheffects', sys_modules_72513.module_type_store, module_type_store, ['PathEffectRenderer'])
                nest_module(stypy.reporting.localization.Localization(__file__, 751, 12), __file__, sys_modules_72513, sys_modules_72513.module_type_store, module_type_store)
            else:
                from matplotlib.patheffects import PathEffectRenderer

                import_from_module(stypy.reporting.localization.Localization(__file__, 751, 12), 'matplotlib.patheffects', None, module_type_store, ['PathEffectRenderer'], [PathEffectRenderer])

        else:
            # Assigning a type to the variable 'matplotlib.patheffects' (line 751)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 12), 'matplotlib.patheffects', import_72512)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Assigning a Call to a Name (line 752):
        
        # Assigning a Call to a Name (line 752):
        
        # Call to PathEffectRenderer(...): (line 752)
        # Processing the call arguments (line 752)
        
        # Call to get_path_effects(...): (line 752)
        # Processing the call keyword arguments (line 752)
        kwargs_72517 = {}
        # Getting the type of 'self' (line 752)
        self_72515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 42), 'self', False)
        # Obtaining the member 'get_path_effects' of a type (line 752)
        get_path_effects_72516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 752, 42), self_72515, 'get_path_effects')
        # Calling get_path_effects(args, kwargs) (line 752)
        get_path_effects_call_result_72518 = invoke(stypy.reporting.localization.Localization(__file__, 752, 42), get_path_effects_72516, *[], **kwargs_72517)
        
        # Getting the type of 'renderer' (line 752)
        renderer_72519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 67), 'renderer', False)
        # Processing the call keyword arguments (line 752)
        kwargs_72520 = {}
        # Getting the type of 'PathEffectRenderer' (line 752)
        PathEffectRenderer_72514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 23), 'PathEffectRenderer', False)
        # Calling PathEffectRenderer(args, kwargs) (line 752)
        PathEffectRenderer_call_result_72521 = invoke(stypy.reporting.localization.Localization(__file__, 752, 23), PathEffectRenderer_72514, *[get_path_effects_call_result_72518, renderer_72519], **kwargs_72520)
        
        # Assigning a type to the variable 'renderer' (line 752)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 752, 12), 'renderer', PathEffectRenderer_call_result_72521)
        # SSA join for if statement (line 750)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to open_group(...): (line 754)
        # Processing the call arguments (line 754)
        unicode_72524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 754, 28), 'unicode', u'line2d')
        
        # Call to get_gid(...): (line 754)
        # Processing the call keyword arguments (line 754)
        kwargs_72527 = {}
        # Getting the type of 'self' (line 754)
        self_72525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 38), 'self', False)
        # Obtaining the member 'get_gid' of a type (line 754)
        get_gid_72526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 754, 38), self_72525, 'get_gid')
        # Calling get_gid(args, kwargs) (line 754)
        get_gid_call_result_72528 = invoke(stypy.reporting.localization.Localization(__file__, 754, 38), get_gid_72526, *[], **kwargs_72527)
        
        # Processing the call keyword arguments (line 754)
        kwargs_72529 = {}
        # Getting the type of 'renderer' (line 754)
        renderer_72522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 8), 'renderer', False)
        # Obtaining the member 'open_group' of a type (line 754)
        open_group_72523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 754, 8), renderer_72522, 'open_group')
        # Calling open_group(args, kwargs) (line 754)
        open_group_call_result_72530 = invoke(stypy.reporting.localization.Localization(__file__, 754, 8), open_group_72523, *[unicode_72524, get_gid_call_result_72528], **kwargs_72529)
        
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 755)
        self_72531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 28), 'self')
        # Obtaining the member '_linestyle' of a type (line 755)
        _linestyle_72532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 28), self_72531, '_linestyle')
        # Getting the type of 'self' (line 755)
        self_72533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 11), 'self')
        # Obtaining the member '_lineStyles' of a type (line 755)
        _lineStyles_72534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 11), self_72533, '_lineStyles')
        # Obtaining the member '__getitem__' of a type (line 755)
        getitem___72535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 11), _lineStyles_72534, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 755)
        subscript_call_result_72536 = invoke(stypy.reporting.localization.Localization(__file__, 755, 11), getitem___72535, _linestyle_72532)
        
        unicode_72537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 755, 48), 'unicode', u'_draw_nothing')
        # Applying the binary operator '!=' (line 755)
        result_ne_72538 = python_operator(stypy.reporting.localization.Localization(__file__, 755, 11), '!=', subscript_call_result_72536, unicode_72537)
        
        # Testing the type of an if condition (line 755)
        if_condition_72539 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 755, 8), result_ne_72538)
        # Assigning a type to the variable 'if_condition_72539' (line 755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 8), 'if_condition_72539', if_condition_72539)
        # SSA begins for if statement (line 755)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 756):
        
        # Assigning a Call to a Name:
        
        # Call to get_transformed_path_and_affine(...): (line 756)
        # Processing the call keyword arguments (line 756)
        kwargs_72542 = {}
        # Getting the type of 'transf_path' (line 756)
        transf_path_72540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 28), 'transf_path', False)
        # Obtaining the member 'get_transformed_path_and_affine' of a type (line 756)
        get_transformed_path_and_affine_72541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 28), transf_path_72540, 'get_transformed_path_and_affine')
        # Calling get_transformed_path_and_affine(args, kwargs) (line 756)
        get_transformed_path_and_affine_call_result_72543 = invoke(stypy.reporting.localization.Localization(__file__, 756, 28), get_transformed_path_and_affine_72541, *[], **kwargs_72542)
        
        # Assigning a type to the variable 'call_assignment_70626' (line 756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 12), 'call_assignment_70626', get_transformed_path_and_affine_call_result_72543)
        
        # Assigning a Call to a Name (line 756):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_72546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 12), 'int')
        # Processing the call keyword arguments
        kwargs_72547 = {}
        # Getting the type of 'call_assignment_70626' (line 756)
        call_assignment_70626_72544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 12), 'call_assignment_70626', False)
        # Obtaining the member '__getitem__' of a type (line 756)
        getitem___72545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 12), call_assignment_70626_72544, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_72548 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___72545, *[int_72546], **kwargs_72547)
        
        # Assigning a type to the variable 'call_assignment_70627' (line 756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 12), 'call_assignment_70627', getitem___call_result_72548)
        
        # Assigning a Name to a Name (line 756):
        # Getting the type of 'call_assignment_70627' (line 756)
        call_assignment_70627_72549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 12), 'call_assignment_70627')
        # Assigning a type to the variable 'tpath' (line 756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 12), 'tpath', call_assignment_70627_72549)
        
        # Assigning a Call to a Name (line 756):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_72552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 12), 'int')
        # Processing the call keyword arguments
        kwargs_72553 = {}
        # Getting the type of 'call_assignment_70626' (line 756)
        call_assignment_70626_72550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 12), 'call_assignment_70626', False)
        # Obtaining the member '__getitem__' of a type (line 756)
        getitem___72551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 12), call_assignment_70626_72550, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_72554 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___72551, *[int_72552], **kwargs_72553)
        
        # Assigning a type to the variable 'call_assignment_70628' (line 756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 12), 'call_assignment_70628', getitem___call_result_72554)
        
        # Assigning a Name to a Name (line 756):
        # Getting the type of 'call_assignment_70628' (line 756)
        call_assignment_70628_72555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 12), 'call_assignment_70628')
        # Assigning a type to the variable 'affine' (line 756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 19), 'affine', call_assignment_70628_72555)
        
        
        # Call to len(...): (line 757)
        # Processing the call arguments (line 757)
        # Getting the type of 'tpath' (line 757)
        tpath_72557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 19), 'tpath', False)
        # Obtaining the member 'vertices' of a type (line 757)
        vertices_72558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 19), tpath_72557, 'vertices')
        # Processing the call keyword arguments (line 757)
        kwargs_72559 = {}
        # Getting the type of 'len' (line 757)
        len_72556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 15), 'len', False)
        # Calling len(args, kwargs) (line 757)
        len_call_result_72560 = invoke(stypy.reporting.localization.Localization(__file__, 757, 15), len_72556, *[vertices_72558], **kwargs_72559)
        
        # Testing the type of an if condition (line 757)
        if_condition_72561 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 757, 12), len_call_result_72560)
        # Assigning a type to the variable 'if_condition_72561' (line 757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 12), 'if_condition_72561', if_condition_72561)
        # SSA begins for if statement (line 757)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 758):
        
        # Assigning a Call to a Name (line 758):
        
        # Call to new_gc(...): (line 758)
        # Processing the call keyword arguments (line 758)
        kwargs_72564 = {}
        # Getting the type of 'renderer' (line 758)
        renderer_72562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 21), 'renderer', False)
        # Obtaining the member 'new_gc' of a type (line 758)
        new_gc_72563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 21), renderer_72562, 'new_gc')
        # Calling new_gc(args, kwargs) (line 758)
        new_gc_call_result_72565 = invoke(stypy.reporting.localization.Localization(__file__, 758, 21), new_gc_72563, *[], **kwargs_72564)
        
        # Assigning a type to the variable 'gc' (line 758)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 758, 16), 'gc', new_gc_call_result_72565)
        
        # Call to _set_gc_clip(...): (line 759)
        # Processing the call arguments (line 759)
        # Getting the type of 'gc' (line 759)
        gc_72568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 34), 'gc', False)
        # Processing the call keyword arguments (line 759)
        kwargs_72569 = {}
        # Getting the type of 'self' (line 759)
        self_72566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 16), 'self', False)
        # Obtaining the member '_set_gc_clip' of a type (line 759)
        _set_gc_clip_72567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 16), self_72566, '_set_gc_clip')
        # Calling _set_gc_clip(args, kwargs) (line 759)
        _set_gc_clip_call_result_72570 = invoke(stypy.reporting.localization.Localization(__file__, 759, 16), _set_gc_clip_72567, *[gc_72568], **kwargs_72569)
        
        
        # Assigning a Call to a Name (line 761):
        
        # Assigning a Call to a Name (line 761):
        
        # Call to _get_rgba_ln_color(...): (line 761)
        # Processing the call keyword arguments (line 761)
        kwargs_72573 = {}
        # Getting the type of 'self' (line 761)
        self_72571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 32), 'self', False)
        # Obtaining the member '_get_rgba_ln_color' of a type (line 761)
        _get_rgba_ln_color_72572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 32), self_72571, '_get_rgba_ln_color')
        # Calling _get_rgba_ln_color(args, kwargs) (line 761)
        _get_rgba_ln_color_call_result_72574 = invoke(stypy.reporting.localization.Localization(__file__, 761, 32), _get_rgba_ln_color_72572, *[], **kwargs_72573)
        
        # Assigning a type to the variable 'ln_color_rgba' (line 761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 16), 'ln_color_rgba', _get_rgba_ln_color_call_result_72574)
        
        # Call to set_foreground(...): (line 762)
        # Processing the call arguments (line 762)
        # Getting the type of 'ln_color_rgba' (line 762)
        ln_color_rgba_72577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 34), 'ln_color_rgba', False)
        # Processing the call keyword arguments (line 762)
        # Getting the type of 'True' (line 762)
        True_72578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 56), 'True', False)
        keyword_72579 = True_72578
        kwargs_72580 = {'isRGBA': keyword_72579}
        # Getting the type of 'gc' (line 762)
        gc_72575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 16), 'gc', False)
        # Obtaining the member 'set_foreground' of a type (line 762)
        set_foreground_72576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 16), gc_72575, 'set_foreground')
        # Calling set_foreground(args, kwargs) (line 762)
        set_foreground_call_result_72581 = invoke(stypy.reporting.localization.Localization(__file__, 762, 16), set_foreground_72576, *[ln_color_rgba_72577], **kwargs_72580)
        
        
        # Call to set_alpha(...): (line 763)
        # Processing the call arguments (line 763)
        
        # Obtaining the type of the subscript
        int_72584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 43), 'int')
        # Getting the type of 'ln_color_rgba' (line 763)
        ln_color_rgba_72585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 29), 'ln_color_rgba', False)
        # Obtaining the member '__getitem__' of a type (line 763)
        getitem___72586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 29), ln_color_rgba_72585, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 763)
        subscript_call_result_72587 = invoke(stypy.reporting.localization.Localization(__file__, 763, 29), getitem___72586, int_72584)
        
        # Processing the call keyword arguments (line 763)
        kwargs_72588 = {}
        # Getting the type of 'gc' (line 763)
        gc_72582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 16), 'gc', False)
        # Obtaining the member 'set_alpha' of a type (line 763)
        set_alpha_72583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 16), gc_72582, 'set_alpha')
        # Calling set_alpha(args, kwargs) (line 763)
        set_alpha_call_result_72589 = invoke(stypy.reporting.localization.Localization(__file__, 763, 16), set_alpha_72583, *[subscript_call_result_72587], **kwargs_72588)
        
        
        # Call to set_antialiased(...): (line 765)
        # Processing the call arguments (line 765)
        # Getting the type of 'self' (line 765)
        self_72592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 35), 'self', False)
        # Obtaining the member '_antialiased' of a type (line 765)
        _antialiased_72593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 35), self_72592, '_antialiased')
        # Processing the call keyword arguments (line 765)
        kwargs_72594 = {}
        # Getting the type of 'gc' (line 765)
        gc_72590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 16), 'gc', False)
        # Obtaining the member 'set_antialiased' of a type (line 765)
        set_antialiased_72591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 16), gc_72590, 'set_antialiased')
        # Calling set_antialiased(args, kwargs) (line 765)
        set_antialiased_call_result_72595 = invoke(stypy.reporting.localization.Localization(__file__, 765, 16), set_antialiased_72591, *[_antialiased_72593], **kwargs_72594)
        
        
        # Call to set_linewidth(...): (line 766)
        # Processing the call arguments (line 766)
        # Getting the type of 'self' (line 766)
        self_72598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 33), 'self', False)
        # Obtaining the member '_linewidth' of a type (line 766)
        _linewidth_72599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 33), self_72598, '_linewidth')
        # Processing the call keyword arguments (line 766)
        kwargs_72600 = {}
        # Getting the type of 'gc' (line 766)
        gc_72596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 16), 'gc', False)
        # Obtaining the member 'set_linewidth' of a type (line 766)
        set_linewidth_72597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 16), gc_72596, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 766)
        set_linewidth_call_result_72601 = invoke(stypy.reporting.localization.Localization(__file__, 766, 16), set_linewidth_72597, *[_linewidth_72599], **kwargs_72600)
        
        
        
        # Call to is_dashed(...): (line 768)
        # Processing the call keyword arguments (line 768)
        kwargs_72604 = {}
        # Getting the type of 'self' (line 768)
        self_72602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 19), 'self', False)
        # Obtaining the member 'is_dashed' of a type (line 768)
        is_dashed_72603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 19), self_72602, 'is_dashed')
        # Calling is_dashed(args, kwargs) (line 768)
        is_dashed_call_result_72605 = invoke(stypy.reporting.localization.Localization(__file__, 768, 19), is_dashed_72603, *[], **kwargs_72604)
        
        # Testing the type of an if condition (line 768)
        if_condition_72606 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 768, 16), is_dashed_call_result_72605)
        # Assigning a type to the variable 'if_condition_72606' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 16), 'if_condition_72606', if_condition_72606)
        # SSA begins for if statement (line 768)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 769):
        
        # Assigning a Attribute to a Name (line 769):
        # Getting the type of 'self' (line 769)
        self_72607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 26), 'self')
        # Obtaining the member '_dashcapstyle' of a type (line 769)
        _dashcapstyle_72608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 26), self_72607, '_dashcapstyle')
        # Assigning a type to the variable 'cap' (line 769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 20), 'cap', _dashcapstyle_72608)
        
        # Assigning a Attribute to a Name (line 770):
        
        # Assigning a Attribute to a Name (line 770):
        # Getting the type of 'self' (line 770)
        self_72609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 27), 'self')
        # Obtaining the member '_dashjoinstyle' of a type (line 770)
        _dashjoinstyle_72610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 770, 27), self_72609, '_dashjoinstyle')
        # Assigning a type to the variable 'join' (line 770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 20), 'join', _dashjoinstyle_72610)
        # SSA branch for the else part of an if statement (line 768)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 772):
        
        # Assigning a Attribute to a Name (line 772):
        # Getting the type of 'self' (line 772)
        self_72611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 26), 'self')
        # Obtaining the member '_solidcapstyle' of a type (line 772)
        _solidcapstyle_72612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 772, 26), self_72611, '_solidcapstyle')
        # Assigning a type to the variable 'cap' (line 772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 772, 20), 'cap', _solidcapstyle_72612)
        
        # Assigning a Attribute to a Name (line 773):
        
        # Assigning a Attribute to a Name (line 773):
        # Getting the type of 'self' (line 773)
        self_72613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 27), 'self')
        # Obtaining the member '_solidjoinstyle' of a type (line 773)
        _solidjoinstyle_72614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 27), self_72613, '_solidjoinstyle')
        # Assigning a type to the variable 'join' (line 773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 773, 20), 'join', _solidjoinstyle_72614)
        # SSA join for if statement (line 768)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_joinstyle(...): (line 774)
        # Processing the call arguments (line 774)
        # Getting the type of 'join' (line 774)
        join_72617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 33), 'join', False)
        # Processing the call keyword arguments (line 774)
        kwargs_72618 = {}
        # Getting the type of 'gc' (line 774)
        gc_72615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 16), 'gc', False)
        # Obtaining the member 'set_joinstyle' of a type (line 774)
        set_joinstyle_72616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 16), gc_72615, 'set_joinstyle')
        # Calling set_joinstyle(args, kwargs) (line 774)
        set_joinstyle_call_result_72619 = invoke(stypy.reporting.localization.Localization(__file__, 774, 16), set_joinstyle_72616, *[join_72617], **kwargs_72618)
        
        
        # Call to set_capstyle(...): (line 775)
        # Processing the call arguments (line 775)
        # Getting the type of 'cap' (line 775)
        cap_72622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 32), 'cap', False)
        # Processing the call keyword arguments (line 775)
        kwargs_72623 = {}
        # Getting the type of 'gc' (line 775)
        gc_72620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 16), 'gc', False)
        # Obtaining the member 'set_capstyle' of a type (line 775)
        set_capstyle_72621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 16), gc_72620, 'set_capstyle')
        # Calling set_capstyle(args, kwargs) (line 775)
        set_capstyle_call_result_72624 = invoke(stypy.reporting.localization.Localization(__file__, 775, 16), set_capstyle_72621, *[cap_72622], **kwargs_72623)
        
        
        # Call to set_snap(...): (line 776)
        # Processing the call arguments (line 776)
        
        # Call to get_snap(...): (line 776)
        # Processing the call keyword arguments (line 776)
        kwargs_72629 = {}
        # Getting the type of 'self' (line 776)
        self_72627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 28), 'self', False)
        # Obtaining the member 'get_snap' of a type (line 776)
        get_snap_72628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 28), self_72627, 'get_snap')
        # Calling get_snap(args, kwargs) (line 776)
        get_snap_call_result_72630 = invoke(stypy.reporting.localization.Localization(__file__, 776, 28), get_snap_72628, *[], **kwargs_72629)
        
        # Processing the call keyword arguments (line 776)
        kwargs_72631 = {}
        # Getting the type of 'gc' (line 776)
        gc_72625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 16), 'gc', False)
        # Obtaining the member 'set_snap' of a type (line 776)
        set_snap_72626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 16), gc_72625, 'set_snap')
        # Calling set_snap(args, kwargs) (line 776)
        set_snap_call_result_72632 = invoke(stypy.reporting.localization.Localization(__file__, 776, 16), set_snap_72626, *[get_snap_call_result_72630], **kwargs_72631)
        
        
        
        
        # Call to get_sketch_params(...): (line 777)
        # Processing the call keyword arguments (line 777)
        kwargs_72635 = {}
        # Getting the type of 'self' (line 777)
        self_72633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 19), 'self', False)
        # Obtaining the member 'get_sketch_params' of a type (line 777)
        get_sketch_params_72634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 19), self_72633, 'get_sketch_params')
        # Calling get_sketch_params(args, kwargs) (line 777)
        get_sketch_params_call_result_72636 = invoke(stypy.reporting.localization.Localization(__file__, 777, 19), get_sketch_params_72634, *[], **kwargs_72635)
        
        # Getting the type of 'None' (line 777)
        None_72637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 51), 'None')
        # Applying the binary operator 'isnot' (line 777)
        result_is_not_72638 = python_operator(stypy.reporting.localization.Localization(__file__, 777, 19), 'isnot', get_sketch_params_call_result_72636, None_72637)
        
        # Testing the type of an if condition (line 777)
        if_condition_72639 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 777, 16), result_is_not_72638)
        # Assigning a type to the variable 'if_condition_72639' (line 777)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 16), 'if_condition_72639', if_condition_72639)
        # SSA begins for if statement (line 777)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_sketch_params(...): (line 778)
        
        # Call to get_sketch_params(...): (line 778)
        # Processing the call keyword arguments (line 778)
        kwargs_72644 = {}
        # Getting the type of 'self' (line 778)
        self_72642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 42), 'self', False)
        # Obtaining the member 'get_sketch_params' of a type (line 778)
        get_sketch_params_72643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 778, 42), self_72642, 'get_sketch_params')
        # Calling get_sketch_params(args, kwargs) (line 778)
        get_sketch_params_call_result_72645 = invoke(stypy.reporting.localization.Localization(__file__, 778, 42), get_sketch_params_72643, *[], **kwargs_72644)
        
        # Processing the call keyword arguments (line 778)
        kwargs_72646 = {}
        # Getting the type of 'gc' (line 778)
        gc_72640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 20), 'gc', False)
        # Obtaining the member 'set_sketch_params' of a type (line 778)
        set_sketch_params_72641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 778, 20), gc_72640, 'set_sketch_params')
        # Calling set_sketch_params(args, kwargs) (line 778)
        set_sketch_params_call_result_72647 = invoke(stypy.reporting.localization.Localization(__file__, 778, 20), set_sketch_params_72641, *[get_sketch_params_call_result_72645], **kwargs_72646)
        
        # SSA join for if statement (line 777)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_dashes(...): (line 780)
        # Processing the call arguments (line 780)
        # Getting the type of 'self' (line 780)
        self_72650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 30), 'self', False)
        # Obtaining the member '_dashOffset' of a type (line 780)
        _dashOffset_72651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 780, 30), self_72650, '_dashOffset')
        # Getting the type of 'self' (line 780)
        self_72652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 48), 'self', False)
        # Obtaining the member '_dashSeq' of a type (line 780)
        _dashSeq_72653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 780, 48), self_72652, '_dashSeq')
        # Processing the call keyword arguments (line 780)
        kwargs_72654 = {}
        # Getting the type of 'gc' (line 780)
        gc_72648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 16), 'gc', False)
        # Obtaining the member 'set_dashes' of a type (line 780)
        set_dashes_72649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 780, 16), gc_72648, 'set_dashes')
        # Calling set_dashes(args, kwargs) (line 780)
        set_dashes_call_result_72655 = invoke(stypy.reporting.localization.Localization(__file__, 780, 16), set_dashes_72649, *[_dashOffset_72651, _dashSeq_72653], **kwargs_72654)
        
        
        # Call to draw_path(...): (line 781)
        # Processing the call arguments (line 781)
        # Getting the type of 'gc' (line 781)
        gc_72658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 35), 'gc', False)
        # Getting the type of 'tpath' (line 781)
        tpath_72659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 39), 'tpath', False)
        
        # Call to frozen(...): (line 781)
        # Processing the call keyword arguments (line 781)
        kwargs_72662 = {}
        # Getting the type of 'affine' (line 781)
        affine_72660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 46), 'affine', False)
        # Obtaining the member 'frozen' of a type (line 781)
        frozen_72661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 781, 46), affine_72660, 'frozen')
        # Calling frozen(args, kwargs) (line 781)
        frozen_call_result_72663 = invoke(stypy.reporting.localization.Localization(__file__, 781, 46), frozen_72661, *[], **kwargs_72662)
        
        # Processing the call keyword arguments (line 781)
        kwargs_72664 = {}
        # Getting the type of 'renderer' (line 781)
        renderer_72656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 16), 'renderer', False)
        # Obtaining the member 'draw_path' of a type (line 781)
        draw_path_72657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 781, 16), renderer_72656, 'draw_path')
        # Calling draw_path(args, kwargs) (line 781)
        draw_path_call_result_72665 = invoke(stypy.reporting.localization.Localization(__file__, 781, 16), draw_path_72657, *[gc_72658, tpath_72659, frozen_call_result_72663], **kwargs_72664)
        
        
        # Call to restore(...): (line 782)
        # Processing the call keyword arguments (line 782)
        kwargs_72668 = {}
        # Getting the type of 'gc' (line 782)
        gc_72666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 16), 'gc', False)
        # Obtaining the member 'restore' of a type (line 782)
        restore_72667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 16), gc_72666, 'restore')
        # Calling restore(args, kwargs) (line 782)
        restore_call_result_72669 = invoke(stypy.reporting.localization.Localization(__file__, 782, 16), restore_72667, *[], **kwargs_72668)
        
        # SSA join for if statement (line 757)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 755)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 784)
        self_72670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 11), 'self')
        # Obtaining the member '_marker' of a type (line 784)
        _marker_72671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 784, 11), self_72670, '_marker')
        
        # Getting the type of 'self' (line 784)
        self_72672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 28), 'self')
        # Obtaining the member '_markersize' of a type (line 784)
        _markersize_72673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 784, 28), self_72672, '_markersize')
        int_72674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 784, 47), 'int')
        # Applying the binary operator '>' (line 784)
        result_gt_72675 = python_operator(stypy.reporting.localization.Localization(__file__, 784, 28), '>', _markersize_72673, int_72674)
        
        # Applying the binary operator 'and' (line 784)
        result_and_keyword_72676 = python_operator(stypy.reporting.localization.Localization(__file__, 784, 11), 'and', _marker_72671, result_gt_72675)
        
        # Testing the type of an if condition (line 784)
        if_condition_72677 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 784, 8), result_and_keyword_72676)
        # Assigning a type to the variable 'if_condition_72677' (line 784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 784, 8), 'if_condition_72677', if_condition_72677)
        # SSA begins for if statement (line 784)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 785):
        
        # Assigning a Call to a Name (line 785):
        
        # Call to new_gc(...): (line 785)
        # Processing the call keyword arguments (line 785)
        kwargs_72680 = {}
        # Getting the type of 'renderer' (line 785)
        renderer_72678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 17), 'renderer', False)
        # Obtaining the member 'new_gc' of a type (line 785)
        new_gc_72679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 785, 17), renderer_72678, 'new_gc')
        # Calling new_gc(args, kwargs) (line 785)
        new_gc_call_result_72681 = invoke(stypy.reporting.localization.Localization(__file__, 785, 17), new_gc_72679, *[], **kwargs_72680)
        
        # Assigning a type to the variable 'gc' (line 785)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 785, 12), 'gc', new_gc_call_result_72681)
        
        # Call to _set_gc_clip(...): (line 786)
        # Processing the call arguments (line 786)
        # Getting the type of 'gc' (line 786)
        gc_72684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 30), 'gc', False)
        # Processing the call keyword arguments (line 786)
        kwargs_72685 = {}
        # Getting the type of 'self' (line 786)
        self_72682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 12), 'self', False)
        # Obtaining the member '_set_gc_clip' of a type (line 786)
        _set_gc_clip_72683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 12), self_72682, '_set_gc_clip')
        # Calling _set_gc_clip(args, kwargs) (line 786)
        _set_gc_clip_call_result_72686 = invoke(stypy.reporting.localization.Localization(__file__, 786, 12), _set_gc_clip_72683, *[gc_72684], **kwargs_72685)
        
        
        # Assigning a Call to a Name (line 787):
        
        # Assigning a Call to a Name (line 787):
        
        # Call to _get_rgba_face(...): (line 787)
        # Processing the call keyword arguments (line 787)
        kwargs_72689 = {}
        # Getting the type of 'self' (line 787)
        self_72687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 23), 'self', False)
        # Obtaining the member '_get_rgba_face' of a type (line 787)
        _get_rgba_face_72688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 23), self_72687, '_get_rgba_face')
        # Calling _get_rgba_face(args, kwargs) (line 787)
        _get_rgba_face_call_result_72690 = invoke(stypy.reporting.localization.Localization(__file__, 787, 23), _get_rgba_face_72688, *[], **kwargs_72689)
        
        # Assigning a type to the variable 'rgbaFace' (line 787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 12), 'rgbaFace', _get_rgba_face_call_result_72690)
        
        # Assigning a Call to a Name (line 788):
        
        # Assigning a Call to a Name (line 788):
        
        # Call to _get_rgba_face(...): (line 788)
        # Processing the call keyword arguments (line 788)
        # Getting the type of 'True' (line 788)
        True_72693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 50), 'True', False)
        keyword_72694 = True_72693
        kwargs_72695 = {'alt': keyword_72694}
        # Getting the type of 'self' (line 788)
        self_72691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 26), 'self', False)
        # Obtaining the member '_get_rgba_face' of a type (line 788)
        _get_rgba_face_72692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 26), self_72691, '_get_rgba_face')
        # Calling _get_rgba_face(args, kwargs) (line 788)
        _get_rgba_face_call_result_72696 = invoke(stypy.reporting.localization.Localization(__file__, 788, 26), _get_rgba_face_72692, *[], **kwargs_72695)
        
        # Assigning a type to the variable 'rgbaFaceAlt' (line 788)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 788, 12), 'rgbaFaceAlt', _get_rgba_face_call_result_72696)
        
        # Assigning a Call to a Name (line 789):
        
        # Assigning a Call to a Name (line 789):
        
        # Call to get_markeredgecolor(...): (line 789)
        # Processing the call keyword arguments (line 789)
        kwargs_72699 = {}
        # Getting the type of 'self' (line 789)
        self_72697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 24), 'self', False)
        # Obtaining the member 'get_markeredgecolor' of a type (line 789)
        get_markeredgecolor_72698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 24), self_72697, 'get_markeredgecolor')
        # Calling get_markeredgecolor(args, kwargs) (line 789)
        get_markeredgecolor_call_result_72700 = invoke(stypy.reporting.localization.Localization(__file__, 789, 24), get_markeredgecolor_72698, *[], **kwargs_72699)
        
        # Assigning a type to the variable 'edgecolor' (line 789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 789, 12), 'edgecolor', get_markeredgecolor_call_result_72700)
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 790)
        # Processing the call arguments (line 790)
        # Getting the type of 'edgecolor' (line 790)
        edgecolor_72702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 27), 'edgecolor', False)
        # Getting the type of 'six' (line 790)
        six_72703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 38), 'six', False)
        # Obtaining the member 'string_types' of a type (line 790)
        string_types_72704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 790, 38), six_72703, 'string_types')
        # Processing the call keyword arguments (line 790)
        kwargs_72705 = {}
        # Getting the type of 'isinstance' (line 790)
        isinstance_72701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 16), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 790)
        isinstance_call_result_72706 = invoke(stypy.reporting.localization.Localization(__file__, 790, 16), isinstance_72701, *[edgecolor_72702, string_types_72704], **kwargs_72705)
        
        
        
        # Call to lower(...): (line 791)
        # Processing the call keyword arguments (line 791)
        kwargs_72709 = {}
        # Getting the type of 'edgecolor' (line 791)
        edgecolor_72707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 24), 'edgecolor', False)
        # Obtaining the member 'lower' of a type (line 791)
        lower_72708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 24), edgecolor_72707, 'lower')
        # Calling lower(args, kwargs) (line 791)
        lower_call_result_72710 = invoke(stypy.reporting.localization.Localization(__file__, 791, 24), lower_72708, *[], **kwargs_72709)
        
        unicode_72711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 791, 45), 'unicode', u'none')
        # Applying the binary operator '==' (line 791)
        result_eq_72712 = python_operator(stypy.reporting.localization.Localization(__file__, 791, 24), '==', lower_call_result_72710, unicode_72711)
        
        # Applying the binary operator 'and' (line 790)
        result_and_keyword_72713 = python_operator(stypy.reporting.localization.Localization(__file__, 790, 16), 'and', isinstance_call_result_72706, result_eq_72712)
        
        # Testing the type of an if condition (line 790)
        if_condition_72714 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 790, 12), result_and_keyword_72713)
        # Assigning a type to the variable 'if_condition_72714' (line 790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 790, 12), 'if_condition_72714', if_condition_72714)
        # SSA begins for if statement (line 790)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_linewidth(...): (line 792)
        # Processing the call arguments (line 792)
        int_72717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 33), 'int')
        # Processing the call keyword arguments (line 792)
        kwargs_72718 = {}
        # Getting the type of 'gc' (line 792)
        gc_72715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 16), 'gc', False)
        # Obtaining the member 'set_linewidth' of a type (line 792)
        set_linewidth_72716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 16), gc_72715, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 792)
        set_linewidth_call_result_72719 = invoke(stypy.reporting.localization.Localization(__file__, 792, 16), set_linewidth_72716, *[int_72717], **kwargs_72718)
        
        
        # Call to set_foreground(...): (line 793)
        # Processing the call arguments (line 793)
        # Getting the type of 'rgbaFace' (line 793)
        rgbaFace_72722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 34), 'rgbaFace', False)
        # Processing the call keyword arguments (line 793)
        # Getting the type of 'True' (line 793)
        True_72723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 51), 'True', False)
        keyword_72724 = True_72723
        kwargs_72725 = {'isRGBA': keyword_72724}
        # Getting the type of 'gc' (line 793)
        gc_72720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 16), 'gc', False)
        # Obtaining the member 'set_foreground' of a type (line 793)
        set_foreground_72721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 16), gc_72720, 'set_foreground')
        # Calling set_foreground(args, kwargs) (line 793)
        set_foreground_call_result_72726 = invoke(stypy.reporting.localization.Localization(__file__, 793, 16), set_foreground_72721, *[rgbaFace_72722], **kwargs_72725)
        
        # SSA branch for the else part of an if statement (line 790)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_foreground(...): (line 795)
        # Processing the call arguments (line 795)
        # Getting the type of 'edgecolor' (line 795)
        edgecolor_72729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 34), 'edgecolor', False)
        # Processing the call keyword arguments (line 795)
        kwargs_72730 = {}
        # Getting the type of 'gc' (line 795)
        gc_72727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 16), 'gc', False)
        # Obtaining the member 'set_foreground' of a type (line 795)
        set_foreground_72728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 16), gc_72727, 'set_foreground')
        # Calling set_foreground(args, kwargs) (line 795)
        set_foreground_call_result_72731 = invoke(stypy.reporting.localization.Localization(__file__, 795, 16), set_foreground_72728, *[edgecolor_72729], **kwargs_72730)
        
        
        # Call to set_linewidth(...): (line 796)
        # Processing the call arguments (line 796)
        # Getting the type of 'self' (line 796)
        self_72734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 33), 'self', False)
        # Obtaining the member '_markeredgewidth' of a type (line 796)
        _markeredgewidth_72735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 33), self_72734, '_markeredgewidth')
        # Processing the call keyword arguments (line 796)
        kwargs_72736 = {}
        # Getting the type of 'gc' (line 796)
        gc_72732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 16), 'gc', False)
        # Obtaining the member 'set_linewidth' of a type (line 796)
        set_linewidth_72733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 16), gc_72732, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 796)
        set_linewidth_call_result_72737 = invoke(stypy.reporting.localization.Localization(__file__, 796, 16), set_linewidth_72733, *[_markeredgewidth_72735], **kwargs_72736)
        
        
        # Assigning a Attribute to a Name (line 797):
        
        # Assigning a Attribute to a Name (line 797):
        # Getting the type of 'self' (line 797)
        self_72738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 22), 'self')
        # Obtaining the member '_markeredgecolor' of a type (line 797)
        _markeredgecolor_72739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 22), self_72738, '_markeredgecolor')
        # Assigning a type to the variable 'mec' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 16), 'mec', _markeredgecolor_72739)
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 798)
        # Processing the call arguments (line 798)
        # Getting the type of 'mec' (line 798)
        mec_72741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 31), 'mec', False)
        # Getting the type of 'six' (line 798)
        six_72742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 36), 'six', False)
        # Obtaining the member 'string_types' of a type (line 798)
        string_types_72743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 36), six_72742, 'string_types')
        # Processing the call keyword arguments (line 798)
        kwargs_72744 = {}
        # Getting the type of 'isinstance' (line 798)
        isinstance_72740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 20), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 798)
        isinstance_call_result_72745 = invoke(stypy.reporting.localization.Localization(__file__, 798, 20), isinstance_72740, *[mec_72741, string_types_72743], **kwargs_72744)
        
        
        # Getting the type of 'mec' (line 798)
        mec_72746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 58), 'mec')
        unicode_72747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 65), 'unicode', u'auto')
        # Applying the binary operator '==' (line 798)
        result_eq_72748 = python_operator(stypy.reporting.localization.Localization(__file__, 798, 58), '==', mec_72746, unicode_72747)
        
        # Applying the binary operator 'and' (line 798)
        result_and_keyword_72749 = python_operator(stypy.reporting.localization.Localization(__file__, 798, 20), 'and', isinstance_call_result_72745, result_eq_72748)
        
        # Getting the type of 'rgbaFace' (line 799)
        rgbaFace_72750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 24), 'rgbaFace')
        # Getting the type of 'None' (line 799)
        None_72751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 40), 'None')
        # Applying the binary operator 'isnot' (line 799)
        result_is_not_72752 = python_operator(stypy.reporting.localization.Localization(__file__, 799, 24), 'isnot', rgbaFace_72750, None_72751)
        
        # Applying the binary operator 'and' (line 798)
        result_and_keyword_72753 = python_operator(stypy.reporting.localization.Localization(__file__, 798, 20), 'and', result_and_keyword_72749, result_is_not_72752)
        
        # Testing the type of an if condition (line 798)
        if_condition_72754 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 798, 16), result_and_keyword_72753)
        # Assigning a type to the variable 'if_condition_72754' (line 798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 16), 'if_condition_72754', if_condition_72754)
        # SSA begins for if statement (line 798)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_alpha(...): (line 800)
        # Processing the call arguments (line 800)
        
        # Obtaining the type of the subscript
        int_72757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 800, 42), 'int')
        # Getting the type of 'rgbaFace' (line 800)
        rgbaFace_72758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 33), 'rgbaFace', False)
        # Obtaining the member '__getitem__' of a type (line 800)
        getitem___72759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 800, 33), rgbaFace_72758, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 800)
        subscript_call_result_72760 = invoke(stypy.reporting.localization.Localization(__file__, 800, 33), getitem___72759, int_72757)
        
        # Processing the call keyword arguments (line 800)
        kwargs_72761 = {}
        # Getting the type of 'gc' (line 800)
        gc_72755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 20), 'gc', False)
        # Obtaining the member 'set_alpha' of a type (line 800)
        set_alpha_72756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 800, 20), gc_72755, 'set_alpha')
        # Calling set_alpha(args, kwargs) (line 800)
        set_alpha_call_result_72762 = invoke(stypy.reporting.localization.Localization(__file__, 800, 20), set_alpha_72756, *[subscript_call_result_72760], **kwargs_72761)
        
        # SSA branch for the else part of an if statement (line 798)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_alpha(...): (line 802)
        # Processing the call arguments (line 802)
        
        # Call to get_alpha(...): (line 802)
        # Processing the call keyword arguments (line 802)
        kwargs_72767 = {}
        # Getting the type of 'self' (line 802)
        self_72765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 33), 'self', False)
        # Obtaining the member 'get_alpha' of a type (line 802)
        get_alpha_72766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 33), self_72765, 'get_alpha')
        # Calling get_alpha(args, kwargs) (line 802)
        get_alpha_call_result_72768 = invoke(stypy.reporting.localization.Localization(__file__, 802, 33), get_alpha_72766, *[], **kwargs_72767)
        
        # Processing the call keyword arguments (line 802)
        kwargs_72769 = {}
        # Getting the type of 'gc' (line 802)
        gc_72763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 20), 'gc', False)
        # Obtaining the member 'set_alpha' of a type (line 802)
        set_alpha_72764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 20), gc_72763, 'set_alpha')
        # Calling set_alpha(args, kwargs) (line 802)
        set_alpha_call_result_72770 = invoke(stypy.reporting.localization.Localization(__file__, 802, 20), set_alpha_72764, *[get_alpha_call_result_72768], **kwargs_72769)
        
        # SSA join for if statement (line 798)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 790)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 804):
        
        # Assigning a Attribute to a Name (line 804):
        # Getting the type of 'self' (line 804)
        self_72771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 21), 'self')
        # Obtaining the member '_marker' of a type (line 804)
        _marker_72772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 21), self_72771, '_marker')
        # Assigning a type to the variable 'marker' (line 804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 804, 12), 'marker', _marker_72772)
        
        # Assigning a Call to a Tuple (line 805):
        
        # Assigning a Call to a Name:
        
        # Call to get_transformed_points_and_affine(...): (line 805)
        # Processing the call keyword arguments (line 805)
        kwargs_72775 = {}
        # Getting the type of 'transf_path' (line 805)
        transf_path_72773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 28), 'transf_path', False)
        # Obtaining the member 'get_transformed_points_and_affine' of a type (line 805)
        get_transformed_points_and_affine_72774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 28), transf_path_72773, 'get_transformed_points_and_affine')
        # Calling get_transformed_points_and_affine(args, kwargs) (line 805)
        get_transformed_points_and_affine_call_result_72776 = invoke(stypy.reporting.localization.Localization(__file__, 805, 28), get_transformed_points_and_affine_72774, *[], **kwargs_72775)
        
        # Assigning a type to the variable 'call_assignment_70629' (line 805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 12), 'call_assignment_70629', get_transformed_points_and_affine_call_result_72776)
        
        # Assigning a Call to a Name (line 805):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_72779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 805, 12), 'int')
        # Processing the call keyword arguments
        kwargs_72780 = {}
        # Getting the type of 'call_assignment_70629' (line 805)
        call_assignment_70629_72777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 12), 'call_assignment_70629', False)
        # Obtaining the member '__getitem__' of a type (line 805)
        getitem___72778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 12), call_assignment_70629_72777, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_72781 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___72778, *[int_72779], **kwargs_72780)
        
        # Assigning a type to the variable 'call_assignment_70630' (line 805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 12), 'call_assignment_70630', getitem___call_result_72781)
        
        # Assigning a Name to a Name (line 805):
        # Getting the type of 'call_assignment_70630' (line 805)
        call_assignment_70630_72782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 12), 'call_assignment_70630')
        # Assigning a type to the variable 'tpath' (line 805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 12), 'tpath', call_assignment_70630_72782)
        
        # Assigning a Call to a Name (line 805):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_72785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 805, 12), 'int')
        # Processing the call keyword arguments
        kwargs_72786 = {}
        # Getting the type of 'call_assignment_70629' (line 805)
        call_assignment_70629_72783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 12), 'call_assignment_70629', False)
        # Obtaining the member '__getitem__' of a type (line 805)
        getitem___72784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 12), call_assignment_70629_72783, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_72787 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___72784, *[int_72785], **kwargs_72786)
        
        # Assigning a type to the variable 'call_assignment_70631' (line 805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 12), 'call_assignment_70631', getitem___call_result_72787)
        
        # Assigning a Name to a Name (line 805):
        # Getting the type of 'call_assignment_70631' (line 805)
        call_assignment_70631_72788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 12), 'call_assignment_70631')
        # Assigning a type to the variable 'affine' (line 805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 19), 'affine', call_assignment_70631_72788)
        
        
        # Call to len(...): (line 806)
        # Processing the call arguments (line 806)
        # Getting the type of 'tpath' (line 806)
        tpath_72790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 19), 'tpath', False)
        # Obtaining the member 'vertices' of a type (line 806)
        vertices_72791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 19), tpath_72790, 'vertices')
        # Processing the call keyword arguments (line 806)
        kwargs_72792 = {}
        # Getting the type of 'len' (line 806)
        len_72789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 15), 'len', False)
        # Calling len(args, kwargs) (line 806)
        len_call_result_72793 = invoke(stypy.reporting.localization.Localization(__file__, 806, 15), len_72789, *[vertices_72791], **kwargs_72792)
        
        # Testing the type of an if condition (line 806)
        if_condition_72794 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 806, 12), len_call_result_72793)
        # Assigning a type to the variable 'if_condition_72794' (line 806)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 12), 'if_condition_72794', if_condition_72794)
        # SSA begins for if statement (line 806)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 808):
        
        # Assigning a Call to a Name (line 808):
        
        # Call to get_markevery(...): (line 808)
        # Processing the call keyword arguments (line 808)
        kwargs_72797 = {}
        # Getting the type of 'self' (line 808)
        self_72795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 28), 'self', False)
        # Obtaining the member 'get_markevery' of a type (line 808)
        get_markevery_72796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 28), self_72795, 'get_markevery')
        # Calling get_markevery(args, kwargs) (line 808)
        get_markevery_call_result_72798 = invoke(stypy.reporting.localization.Localization(__file__, 808, 28), get_markevery_72796, *[], **kwargs_72797)
        
        # Assigning a type to the variable 'markevery' (line 808)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 808, 16), 'markevery', get_markevery_call_result_72798)
        
        # Type idiom detected: calculating its left and rigth part (line 809)
        # Getting the type of 'markevery' (line 809)
        markevery_72799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 16), 'markevery')
        # Getting the type of 'None' (line 809)
        None_72800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 36), 'None')
        
        (may_be_72801, more_types_in_union_72802) = may_not_be_none(markevery_72799, None_72800)

        if may_be_72801:

            if more_types_in_union_72802:
                # Runtime conditional SSA (line 809)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 810):
            
            # Assigning a Call to a Name (line 810):
            
            # Call to _mark_every_path(...): (line 810)
            # Processing the call arguments (line 810)
            # Getting the type of 'markevery' (line 810)
            markevery_72804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 50), 'markevery', False)
            # Getting the type of 'tpath' (line 810)
            tpath_72805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 61), 'tpath', False)
            # Getting the type of 'affine' (line 811)
            affine_72806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 50), 'affine', False)
            # Getting the type of 'self' (line 811)
            self_72807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 58), 'self', False)
            # Obtaining the member 'axes' of a type (line 811)
            axes_72808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 811, 58), self_72807, 'axes')
            # Obtaining the member 'transAxes' of a type (line 811)
            transAxes_72809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 811, 58), axes_72808, 'transAxes')
            # Processing the call keyword arguments (line 810)
            kwargs_72810 = {}
            # Getting the type of '_mark_every_path' (line 810)
            _mark_every_path_72803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 33), '_mark_every_path', False)
            # Calling _mark_every_path(args, kwargs) (line 810)
            _mark_every_path_call_result_72811 = invoke(stypy.reporting.localization.Localization(__file__, 810, 33), _mark_every_path_72803, *[markevery_72804, tpath_72805, affine_72806, transAxes_72809], **kwargs_72810)
            
            # Assigning a type to the variable 'subsampled' (line 810)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 810, 20), 'subsampled', _mark_every_path_call_result_72811)

            if more_types_in_union_72802:
                # Runtime conditional SSA for else branch (line 809)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_72801) or more_types_in_union_72802):
            
            # Assigning a Name to a Name (line 813):
            
            # Assigning a Name to a Name (line 813):
            # Getting the type of 'tpath' (line 813)
            tpath_72812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 33), 'tpath')
            # Assigning a type to the variable 'subsampled' (line 813)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 813, 20), 'subsampled', tpath_72812)

            if (may_be_72801 and more_types_in_union_72802):
                # SSA join for if statement (line 809)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 815):
        
        # Assigning a Call to a Name (line 815):
        
        # Call to get_snap_threshold(...): (line 815)
        # Processing the call keyword arguments (line 815)
        kwargs_72815 = {}
        # Getting the type of 'marker' (line 815)
        marker_72813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 23), 'marker', False)
        # Obtaining the member 'get_snap_threshold' of a type (line 815)
        get_snap_threshold_72814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 23), marker_72813, 'get_snap_threshold')
        # Calling get_snap_threshold(args, kwargs) (line 815)
        get_snap_threshold_call_result_72816 = invoke(stypy.reporting.localization.Localization(__file__, 815, 23), get_snap_threshold_72814, *[], **kwargs_72815)
        
        # Assigning a type to the variable 'snap' (line 815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 16), 'snap', get_snap_threshold_call_result_72816)
        
        # Type idiom detected: calculating its left and rigth part (line 816)
        # Getting the type of 'snap' (line 816)
        snap_72817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 24), 'snap')
        # Getting the type of 'float' (line 816)
        float_72818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 33), 'float')
        
        (may_be_72819, more_types_in_union_72820) = may_be_type(snap_72817, float_72818)

        if may_be_72819:

            if more_types_in_union_72820:
                # Runtime conditional SSA (line 816)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'snap' (line 816)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 816, 16), 'snap', float_72818())
            
            # Assigning a Compare to a Name (line 817):
            
            # Assigning a Compare to a Name (line 817):
            
            
            # Call to points_to_pixels(...): (line 817)
            # Processing the call arguments (line 817)
            # Getting the type of 'self' (line 817)
            self_72823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 53), 'self', False)
            # Obtaining the member '_markersize' of a type (line 817)
            _markersize_72824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 53), self_72823, '_markersize')
            # Processing the call keyword arguments (line 817)
            kwargs_72825 = {}
            # Getting the type of 'renderer' (line 817)
            renderer_72821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 27), 'renderer', False)
            # Obtaining the member 'points_to_pixels' of a type (line 817)
            points_to_pixels_72822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 27), renderer_72821, 'points_to_pixels')
            # Calling points_to_pixels(args, kwargs) (line 817)
            points_to_pixels_call_result_72826 = invoke(stypy.reporting.localization.Localization(__file__, 817, 27), points_to_pixels_72822, *[_markersize_72824], **kwargs_72825)
            
            # Getting the type of 'snap' (line 817)
            snap_72827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 74), 'snap')
            # Applying the binary operator '>=' (line 817)
            result_ge_72828 = python_operator(stypy.reporting.localization.Localization(__file__, 817, 27), '>=', points_to_pixels_call_result_72826, snap_72827)
            
            # Assigning a type to the variable 'snap' (line 817)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 20), 'snap', result_ge_72828)

            if more_types_in_union_72820:
                # SSA join for if statement (line 816)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to set_snap(...): (line 818)
        # Processing the call arguments (line 818)
        # Getting the type of 'snap' (line 818)
        snap_72831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 28), 'snap', False)
        # Processing the call keyword arguments (line 818)
        kwargs_72832 = {}
        # Getting the type of 'gc' (line 818)
        gc_72829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 16), 'gc', False)
        # Obtaining the member 'set_snap' of a type (line 818)
        set_snap_72830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 16), gc_72829, 'set_snap')
        # Calling set_snap(args, kwargs) (line 818)
        set_snap_call_result_72833 = invoke(stypy.reporting.localization.Localization(__file__, 818, 16), set_snap_72830, *[snap_72831], **kwargs_72832)
        
        
        # Call to set_joinstyle(...): (line 819)
        # Processing the call arguments (line 819)
        
        # Call to get_joinstyle(...): (line 819)
        # Processing the call keyword arguments (line 819)
        kwargs_72838 = {}
        # Getting the type of 'marker' (line 819)
        marker_72836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 33), 'marker', False)
        # Obtaining the member 'get_joinstyle' of a type (line 819)
        get_joinstyle_72837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 33), marker_72836, 'get_joinstyle')
        # Calling get_joinstyle(args, kwargs) (line 819)
        get_joinstyle_call_result_72839 = invoke(stypy.reporting.localization.Localization(__file__, 819, 33), get_joinstyle_72837, *[], **kwargs_72838)
        
        # Processing the call keyword arguments (line 819)
        kwargs_72840 = {}
        # Getting the type of 'gc' (line 819)
        gc_72834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 16), 'gc', False)
        # Obtaining the member 'set_joinstyle' of a type (line 819)
        set_joinstyle_72835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 16), gc_72834, 'set_joinstyle')
        # Calling set_joinstyle(args, kwargs) (line 819)
        set_joinstyle_call_result_72841 = invoke(stypy.reporting.localization.Localization(__file__, 819, 16), set_joinstyle_72835, *[get_joinstyle_call_result_72839], **kwargs_72840)
        
        
        # Call to set_capstyle(...): (line 820)
        # Processing the call arguments (line 820)
        
        # Call to get_capstyle(...): (line 820)
        # Processing the call keyword arguments (line 820)
        kwargs_72846 = {}
        # Getting the type of 'marker' (line 820)
        marker_72844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 32), 'marker', False)
        # Obtaining the member 'get_capstyle' of a type (line 820)
        get_capstyle_72845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 32), marker_72844, 'get_capstyle')
        # Calling get_capstyle(args, kwargs) (line 820)
        get_capstyle_call_result_72847 = invoke(stypy.reporting.localization.Localization(__file__, 820, 32), get_capstyle_72845, *[], **kwargs_72846)
        
        # Processing the call keyword arguments (line 820)
        kwargs_72848 = {}
        # Getting the type of 'gc' (line 820)
        gc_72842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 16), 'gc', False)
        # Obtaining the member 'set_capstyle' of a type (line 820)
        set_capstyle_72843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 16), gc_72842, 'set_capstyle')
        # Calling set_capstyle(args, kwargs) (line 820)
        set_capstyle_call_result_72849 = invoke(stypy.reporting.localization.Localization(__file__, 820, 16), set_capstyle_72843, *[get_capstyle_call_result_72847], **kwargs_72848)
        
        
        # Assigning a Call to a Name (line 821):
        
        # Assigning a Call to a Name (line 821):
        
        # Call to get_path(...): (line 821)
        # Processing the call keyword arguments (line 821)
        kwargs_72852 = {}
        # Getting the type of 'marker' (line 821)
        marker_72850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 30), 'marker', False)
        # Obtaining the member 'get_path' of a type (line 821)
        get_path_72851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 821, 30), marker_72850, 'get_path')
        # Calling get_path(args, kwargs) (line 821)
        get_path_call_result_72853 = invoke(stypy.reporting.localization.Localization(__file__, 821, 30), get_path_72851, *[], **kwargs_72852)
        
        # Assigning a type to the variable 'marker_path' (line 821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 16), 'marker_path', get_path_call_result_72853)
        
        # Assigning a Call to a Name (line 822):
        
        # Assigning a Call to a Name (line 822):
        
        # Call to get_transform(...): (line 822)
        # Processing the call keyword arguments (line 822)
        kwargs_72856 = {}
        # Getting the type of 'marker' (line 822)
        marker_72854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 31), 'marker', False)
        # Obtaining the member 'get_transform' of a type (line 822)
        get_transform_72855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 31), marker_72854, 'get_transform')
        # Calling get_transform(args, kwargs) (line 822)
        get_transform_call_result_72857 = invoke(stypy.reporting.localization.Localization(__file__, 822, 31), get_transform_72855, *[], **kwargs_72856)
        
        # Assigning a type to the variable 'marker_trans' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 16), 'marker_trans', get_transform_call_result_72857)
        
        # Assigning a Call to a Name (line 823):
        
        # Assigning a Call to a Name (line 823):
        
        # Call to points_to_pixels(...): (line 823)
        # Processing the call arguments (line 823)
        # Getting the type of 'self' (line 823)
        self_72860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 46), 'self', False)
        # Obtaining the member '_markersize' of a type (line 823)
        _markersize_72861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 46), self_72860, '_markersize')
        # Processing the call keyword arguments (line 823)
        kwargs_72862 = {}
        # Getting the type of 'renderer' (line 823)
        renderer_72858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 20), 'renderer', False)
        # Obtaining the member 'points_to_pixels' of a type (line 823)
        points_to_pixels_72859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 20), renderer_72858, 'points_to_pixels')
        # Calling points_to_pixels(args, kwargs) (line 823)
        points_to_pixels_call_result_72863 = invoke(stypy.reporting.localization.Localization(__file__, 823, 20), points_to_pixels_72859, *[_markersize_72861], **kwargs_72862)
        
        # Assigning a type to the variable 'w' (line 823)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 823, 16), 'w', points_to_pixels_call_result_72863)
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 825)
        # Processing the call arguments (line 825)
        
        # Call to get_marker(...): (line 825)
        # Processing the call keyword arguments (line 825)
        kwargs_72867 = {}
        # Getting the type of 'marker' (line 825)
        marker_72865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 31), 'marker', False)
        # Obtaining the member 'get_marker' of a type (line 825)
        get_marker_72866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 31), marker_72865, 'get_marker')
        # Calling get_marker(args, kwargs) (line 825)
        get_marker_call_result_72868 = invoke(stypy.reporting.localization.Localization(__file__, 825, 31), get_marker_72866, *[], **kwargs_72867)
        
        # Getting the type of 'six' (line 825)
        six_72869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 52), 'six', False)
        # Obtaining the member 'string_types' of a type (line 825)
        string_types_72870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 52), six_72869, 'string_types')
        # Processing the call keyword arguments (line 825)
        kwargs_72871 = {}
        # Getting the type of 'isinstance' (line 825)
        isinstance_72864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 20), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 825)
        isinstance_call_result_72872 = invoke(stypy.reporting.localization.Localization(__file__, 825, 20), isinstance_72864, *[get_marker_call_result_72868, string_types_72870], **kwargs_72871)
        
        
        
        # Call to get_marker(...): (line 826)
        # Processing the call keyword arguments (line 826)
        kwargs_72875 = {}
        # Getting the type of 'marker' (line 826)
        marker_72873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 24), 'marker', False)
        # Obtaining the member 'get_marker' of a type (line 826)
        get_marker_72874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 24), marker_72873, 'get_marker')
        # Calling get_marker(args, kwargs) (line 826)
        get_marker_call_result_72876 = invoke(stypy.reporting.localization.Localization(__file__, 826, 24), get_marker_72874, *[], **kwargs_72875)
        
        unicode_72877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 47), 'unicode', u',')
        # Applying the binary operator '==' (line 826)
        result_eq_72878 = python_operator(stypy.reporting.localization.Localization(__file__, 826, 24), '==', get_marker_call_result_72876, unicode_72877)
        
        # Applying the binary operator 'and' (line 825)
        result_and_keyword_72879 = python_operator(stypy.reporting.localization.Localization(__file__, 825, 20), 'and', isinstance_call_result_72872, result_eq_72878)
        
        # Testing the type of an if condition (line 825)
        if_condition_72880 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 825, 16), result_and_keyword_72879)
        # Assigning a type to the variable 'if_condition_72880' (line 825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 16), 'if_condition_72880', if_condition_72880)
        # SSA begins for if statement (line 825)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_linewidth(...): (line 827)
        # Processing the call arguments (line 827)
        int_72883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 37), 'int')
        # Processing the call keyword arguments (line 827)
        kwargs_72884 = {}
        # Getting the type of 'gc' (line 827)
        gc_72881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 20), 'gc', False)
        # Obtaining the member 'set_linewidth' of a type (line 827)
        set_linewidth_72882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 20), gc_72881, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 827)
        set_linewidth_call_result_72885 = invoke(stypy.reporting.localization.Localization(__file__, 827, 20), set_linewidth_72882, *[int_72883], **kwargs_72884)
        
        # SSA branch for the else part of an if statement (line 825)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 830):
        
        # Assigning a Call to a Name (line 830):
        
        # Call to scale(...): (line 830)
        # Processing the call arguments (line 830)
        # Getting the type of 'w' (line 830)
        w_72888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 54), 'w', False)
        # Processing the call keyword arguments (line 830)
        kwargs_72889 = {}
        # Getting the type of 'marker_trans' (line 830)
        marker_trans_72886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 35), 'marker_trans', False)
        # Obtaining the member 'scale' of a type (line 830)
        scale_72887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 35), marker_trans_72886, 'scale')
        # Calling scale(args, kwargs) (line 830)
        scale_call_result_72890 = invoke(stypy.reporting.localization.Localization(__file__, 830, 35), scale_72887, *[w_72888], **kwargs_72889)
        
        # Assigning a type to the variable 'marker_trans' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 20), 'marker_trans', scale_call_result_72890)
        # SSA join for if statement (line 825)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw_markers(...): (line 832)
        # Processing the call arguments (line 832)
        # Getting the type of 'gc' (line 832)
        gc_72893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 38), 'gc', False)
        # Getting the type of 'marker_path' (line 832)
        marker_path_72894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 42), 'marker_path', False)
        # Getting the type of 'marker_trans' (line 832)
        marker_trans_72895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 55), 'marker_trans', False)
        # Getting the type of 'subsampled' (line 833)
        subsampled_72896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 38), 'subsampled', False)
        
        # Call to frozen(...): (line 833)
        # Processing the call keyword arguments (line 833)
        kwargs_72899 = {}
        # Getting the type of 'affine' (line 833)
        affine_72897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 50), 'affine', False)
        # Obtaining the member 'frozen' of a type (line 833)
        frozen_72898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 50), affine_72897, 'frozen')
        # Calling frozen(args, kwargs) (line 833)
        frozen_call_result_72900 = invoke(stypy.reporting.localization.Localization(__file__, 833, 50), frozen_72898, *[], **kwargs_72899)
        
        # Getting the type of 'rgbaFace' (line 834)
        rgbaFace_72901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 38), 'rgbaFace', False)
        # Processing the call keyword arguments (line 832)
        kwargs_72902 = {}
        # Getting the type of 'renderer' (line 832)
        renderer_72891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 16), 'renderer', False)
        # Obtaining the member 'draw_markers' of a type (line 832)
        draw_markers_72892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 832, 16), renderer_72891, 'draw_markers')
        # Calling draw_markers(args, kwargs) (line 832)
        draw_markers_call_result_72903 = invoke(stypy.reporting.localization.Localization(__file__, 832, 16), draw_markers_72892, *[gc_72893, marker_path_72894, marker_trans_72895, subsampled_72896, frozen_call_result_72900, rgbaFace_72901], **kwargs_72902)
        
        
        # Assigning a Call to a Name (line 836):
        
        # Assigning a Call to a Name (line 836):
        
        # Call to get_alt_path(...): (line 836)
        # Processing the call keyword arguments (line 836)
        kwargs_72906 = {}
        # Getting the type of 'marker' (line 836)
        marker_72904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 34), 'marker', False)
        # Obtaining the member 'get_alt_path' of a type (line 836)
        get_alt_path_72905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 34), marker_72904, 'get_alt_path')
        # Calling get_alt_path(args, kwargs) (line 836)
        get_alt_path_call_result_72907 = invoke(stypy.reporting.localization.Localization(__file__, 836, 34), get_alt_path_72905, *[], **kwargs_72906)
        
        # Assigning a type to the variable 'alt_marker_path' (line 836)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 836, 16), 'alt_marker_path', get_alt_path_call_result_72907)
        
        # Getting the type of 'alt_marker_path' (line 837)
        alt_marker_path_72908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 19), 'alt_marker_path')
        # Testing the type of an if condition (line 837)
        if_condition_72909 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 837, 16), alt_marker_path_72908)
        # Assigning a type to the variable 'if_condition_72909' (line 837)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 837, 16), 'if_condition_72909', if_condition_72909)
        # SSA begins for if statement (line 837)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 838):
        
        # Assigning a Call to a Name (line 838):
        
        # Call to get_alt_transform(...): (line 838)
        # Processing the call keyword arguments (line 838)
        kwargs_72912 = {}
        # Getting the type of 'marker' (line 838)
        marker_72910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 39), 'marker', False)
        # Obtaining the member 'get_alt_transform' of a type (line 838)
        get_alt_transform_72911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 39), marker_72910, 'get_alt_transform')
        # Calling get_alt_transform(args, kwargs) (line 838)
        get_alt_transform_call_result_72913 = invoke(stypy.reporting.localization.Localization(__file__, 838, 39), get_alt_transform_72911, *[], **kwargs_72912)
        
        # Assigning a type to the variable 'alt_marker_trans' (line 838)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 838, 20), 'alt_marker_trans', get_alt_transform_call_result_72913)
        
        # Assigning a Call to a Name (line 839):
        
        # Assigning a Call to a Name (line 839):
        
        # Call to scale(...): (line 839)
        # Processing the call arguments (line 839)
        # Getting the type of 'w' (line 839)
        w_72916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 62), 'w', False)
        # Processing the call keyword arguments (line 839)
        kwargs_72917 = {}
        # Getting the type of 'alt_marker_trans' (line 839)
        alt_marker_trans_72914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 39), 'alt_marker_trans', False)
        # Obtaining the member 'scale' of a type (line 839)
        scale_72915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 39), alt_marker_trans_72914, 'scale')
        # Calling scale(args, kwargs) (line 839)
        scale_call_result_72918 = invoke(stypy.reporting.localization.Localization(__file__, 839, 39), scale_72915, *[w_72916], **kwargs_72917)
        
        # Assigning a type to the variable 'alt_marker_trans' (line 839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 20), 'alt_marker_trans', scale_call_result_72918)
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 840)
        # Processing the call arguments (line 840)
        # Getting the type of 'mec' (line 840)
        mec_72920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 35), 'mec', False)
        # Getting the type of 'six' (line 840)
        six_72921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 40), 'six', False)
        # Obtaining the member 'string_types' of a type (line 840)
        string_types_72922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 840, 40), six_72921, 'string_types')
        # Processing the call keyword arguments (line 840)
        kwargs_72923 = {}
        # Getting the type of 'isinstance' (line 840)
        isinstance_72919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 24), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 840)
        isinstance_call_result_72924 = invoke(stypy.reporting.localization.Localization(__file__, 840, 24), isinstance_72919, *[mec_72920, string_types_72922], **kwargs_72923)
        
        
        # Getting the type of 'mec' (line 840)
        mec_72925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 62), 'mec')
        unicode_72926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 69), 'unicode', u'auto')
        # Applying the binary operator '==' (line 840)
        result_eq_72927 = python_operator(stypy.reporting.localization.Localization(__file__, 840, 62), '==', mec_72925, unicode_72926)
        
        # Applying the binary operator 'and' (line 840)
        result_and_keyword_72928 = python_operator(stypy.reporting.localization.Localization(__file__, 840, 24), 'and', isinstance_call_result_72924, result_eq_72927)
        
        # Getting the type of 'rgbaFaceAlt' (line 841)
        rgbaFaceAlt_72929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 28), 'rgbaFaceAlt')
        # Getting the type of 'None' (line 841)
        None_72930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 47), 'None')
        # Applying the binary operator 'isnot' (line 841)
        result_is_not_72931 = python_operator(stypy.reporting.localization.Localization(__file__, 841, 28), 'isnot', rgbaFaceAlt_72929, None_72930)
        
        # Applying the binary operator 'and' (line 840)
        result_and_keyword_72932 = python_operator(stypy.reporting.localization.Localization(__file__, 840, 24), 'and', result_and_keyword_72928, result_is_not_72931)
        
        # Testing the type of an if condition (line 840)
        if_condition_72933 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 840, 20), result_and_keyword_72932)
        # Assigning a type to the variable 'if_condition_72933' (line 840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 840, 20), 'if_condition_72933', if_condition_72933)
        # SSA begins for if statement (line 840)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_alpha(...): (line 842)
        # Processing the call arguments (line 842)
        
        # Obtaining the type of the subscript
        int_72936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 842, 49), 'int')
        # Getting the type of 'rgbaFaceAlt' (line 842)
        rgbaFaceAlt_72937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 37), 'rgbaFaceAlt', False)
        # Obtaining the member '__getitem__' of a type (line 842)
        getitem___72938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 842, 37), rgbaFaceAlt_72937, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 842)
        subscript_call_result_72939 = invoke(stypy.reporting.localization.Localization(__file__, 842, 37), getitem___72938, int_72936)
        
        # Processing the call keyword arguments (line 842)
        kwargs_72940 = {}
        # Getting the type of 'gc' (line 842)
        gc_72934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 24), 'gc', False)
        # Obtaining the member 'set_alpha' of a type (line 842)
        set_alpha_72935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 842, 24), gc_72934, 'set_alpha')
        # Calling set_alpha(args, kwargs) (line 842)
        set_alpha_call_result_72941 = invoke(stypy.reporting.localization.Localization(__file__, 842, 24), set_alpha_72935, *[subscript_call_result_72939], **kwargs_72940)
        
        # SSA branch for the else part of an if statement (line 840)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_alpha(...): (line 844)
        # Processing the call arguments (line 844)
        
        # Call to get_alpha(...): (line 844)
        # Processing the call keyword arguments (line 844)
        kwargs_72946 = {}
        # Getting the type of 'self' (line 844)
        self_72944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 37), 'self', False)
        # Obtaining the member 'get_alpha' of a type (line 844)
        get_alpha_72945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 844, 37), self_72944, 'get_alpha')
        # Calling get_alpha(args, kwargs) (line 844)
        get_alpha_call_result_72947 = invoke(stypy.reporting.localization.Localization(__file__, 844, 37), get_alpha_72945, *[], **kwargs_72946)
        
        # Processing the call keyword arguments (line 844)
        kwargs_72948 = {}
        # Getting the type of 'gc' (line 844)
        gc_72942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 24), 'gc', False)
        # Obtaining the member 'set_alpha' of a type (line 844)
        set_alpha_72943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 844, 24), gc_72942, 'set_alpha')
        # Calling set_alpha(args, kwargs) (line 844)
        set_alpha_call_result_72949 = invoke(stypy.reporting.localization.Localization(__file__, 844, 24), set_alpha_72943, *[get_alpha_call_result_72947], **kwargs_72948)
        
        # SSA join for if statement (line 840)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to draw_markers(...): (line 846)
        # Processing the call arguments (line 846)
        # Getting the type of 'gc' (line 847)
        gc_72952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 28), 'gc', False)
        # Getting the type of 'alt_marker_path' (line 847)
        alt_marker_path_72953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 32), 'alt_marker_path', False)
        # Getting the type of 'alt_marker_trans' (line 847)
        alt_marker_trans_72954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 49), 'alt_marker_trans', False)
        # Getting the type of 'subsampled' (line 847)
        subsampled_72955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 67), 'subsampled', False)
        
        # Call to frozen(...): (line 848)
        # Processing the call keyword arguments (line 848)
        kwargs_72958 = {}
        # Getting the type of 'affine' (line 848)
        affine_72956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 28), 'affine', False)
        # Obtaining the member 'frozen' of a type (line 848)
        frozen_72957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 848, 28), affine_72956, 'frozen')
        # Calling frozen(args, kwargs) (line 848)
        frozen_call_result_72959 = invoke(stypy.reporting.localization.Localization(__file__, 848, 28), frozen_72957, *[], **kwargs_72958)
        
        # Getting the type of 'rgbaFaceAlt' (line 848)
        rgbaFaceAlt_72960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 45), 'rgbaFaceAlt', False)
        # Processing the call keyword arguments (line 846)
        kwargs_72961 = {}
        # Getting the type of 'renderer' (line 846)
        renderer_72950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 20), 'renderer', False)
        # Obtaining the member 'draw_markers' of a type (line 846)
        draw_markers_72951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 846, 20), renderer_72950, 'draw_markers')
        # Calling draw_markers(args, kwargs) (line 846)
        draw_markers_call_result_72962 = invoke(stypy.reporting.localization.Localization(__file__, 846, 20), draw_markers_72951, *[gc_72952, alt_marker_path_72953, alt_marker_trans_72954, subsampled_72955, frozen_call_result_72959, rgbaFaceAlt_72960], **kwargs_72961)
        
        # SSA join for if statement (line 837)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 806)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to restore(...): (line 850)
        # Processing the call keyword arguments (line 850)
        kwargs_72965 = {}
        # Getting the type of 'gc' (line 850)
        gc_72963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 12), 'gc', False)
        # Obtaining the member 'restore' of a type (line 850)
        restore_72964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 850, 12), gc_72963, 'restore')
        # Calling restore(args, kwargs) (line 850)
        restore_call_result_72966 = invoke(stypy.reporting.localization.Localization(__file__, 850, 12), restore_72964, *[], **kwargs_72965)
        
        # SSA join for if statement (line 784)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to close_group(...): (line 852)
        # Processing the call arguments (line 852)
        unicode_72969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 852, 29), 'unicode', u'line2d')
        # Processing the call keyword arguments (line 852)
        kwargs_72970 = {}
        # Getting the type of 'renderer' (line 852)
        renderer_72967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 8), 'renderer', False)
        # Obtaining the member 'close_group' of a type (line 852)
        close_group_72968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 8), renderer_72967, 'close_group')
        # Calling close_group(args, kwargs) (line 852)
        close_group_call_result_72971 = invoke(stypy.reporting.localization.Localization(__file__, 852, 8), close_group_72968, *[unicode_72969], **kwargs_72970)
        
        
        # Assigning a Name to a Attribute (line 853):
        
        # Assigning a Name to a Attribute (line 853):
        # Getting the type of 'False' (line 853)
        False_72972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 21), 'False')
        # Getting the type of 'self' (line 853)
        self_72973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 853)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 853, 8), self_72973, 'stale', False_72972)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 731)
        stypy_return_type_72974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_72974)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_72974


    @norecursion
    def get_antialiased(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_antialiased'
        module_type_store = module_type_store.open_function_context('get_antialiased', 855, 4, False)
        # Assigning a type to the variable 'self' (line 856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 856, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_antialiased.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_antialiased.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_antialiased.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_antialiased.__dict__.__setitem__('stypy_function_name', 'Line2D.get_antialiased')
        Line2D.get_antialiased.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_antialiased.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_antialiased.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_antialiased.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_antialiased.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_antialiased.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_antialiased.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_antialiased', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_antialiased', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_antialiased(...)' code ##################

        # Getting the type of 'self' (line 856)
        self_72975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 15), 'self')
        # Obtaining the member '_antialiased' of a type (line 856)
        _antialiased_72976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 856, 15), self_72975, '_antialiased')
        # Assigning a type to the variable 'stypy_return_type' (line 856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 856, 8), 'stypy_return_type', _antialiased_72976)
        
        # ################# End of 'get_antialiased(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_antialiased' in the type store
        # Getting the type of 'stypy_return_type' (line 855)
        stypy_return_type_72977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_72977)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_antialiased'
        return stypy_return_type_72977


    @norecursion
    def get_color(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_color'
        module_type_store = module_type_store.open_function_context('get_color', 858, 4, False)
        # Assigning a type to the variable 'self' (line 859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 859, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_color.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_color.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_color.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_color.__dict__.__setitem__('stypy_function_name', 'Line2D.get_color')
        Line2D.get_color.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_color.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_color.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_color.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_color.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_color.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_color.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_color', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_color', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_color(...)' code ##################

        # Getting the type of 'self' (line 859)
        self_72978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 15), 'self')
        # Obtaining the member '_color' of a type (line 859)
        _color_72979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 859, 15), self_72978, '_color')
        # Assigning a type to the variable 'stypy_return_type' (line 859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 859, 8), 'stypy_return_type', _color_72979)
        
        # ################# End of 'get_color(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_color' in the type store
        # Getting the type of 'stypy_return_type' (line 858)
        stypy_return_type_72980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_72980)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_color'
        return stypy_return_type_72980


    @norecursion
    def get_drawstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_drawstyle'
        module_type_store = module_type_store.open_function_context('get_drawstyle', 861, 4, False)
        # Assigning a type to the variable 'self' (line 862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 862, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_drawstyle.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_drawstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_drawstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_drawstyle.__dict__.__setitem__('stypy_function_name', 'Line2D.get_drawstyle')
        Line2D.get_drawstyle.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_drawstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_drawstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_drawstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_drawstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_drawstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_drawstyle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_drawstyle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_drawstyle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_drawstyle(...)' code ##################

        # Getting the type of 'self' (line 862)
        self_72981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 15), 'self')
        # Obtaining the member '_drawstyle' of a type (line 862)
        _drawstyle_72982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 862, 15), self_72981, '_drawstyle')
        # Assigning a type to the variable 'stypy_return_type' (line 862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 862, 8), 'stypy_return_type', _drawstyle_72982)
        
        # ################# End of 'get_drawstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_drawstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 861)
        stypy_return_type_72983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_72983)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_drawstyle'
        return stypy_return_type_72983


    @norecursion
    def get_linestyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_linestyle'
        module_type_store = module_type_store.open_function_context('get_linestyle', 864, 4, False)
        # Assigning a type to the variable 'self' (line 865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 865, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_linestyle.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_linestyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_linestyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_linestyle.__dict__.__setitem__('stypy_function_name', 'Line2D.get_linestyle')
        Line2D.get_linestyle.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_linestyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_linestyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_linestyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_linestyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_linestyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_linestyle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_linestyle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_linestyle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_linestyle(...)' code ##################

        # Getting the type of 'self' (line 865)
        self_72984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 15), 'self')
        # Obtaining the member '_linestyle' of a type (line 865)
        _linestyle_72985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 865, 15), self_72984, '_linestyle')
        # Assigning a type to the variable 'stypy_return_type' (line 865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 865, 8), 'stypy_return_type', _linestyle_72985)
        
        # ################# End of 'get_linestyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_linestyle' in the type store
        # Getting the type of 'stypy_return_type' (line 864)
        stypy_return_type_72986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_72986)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_linestyle'
        return stypy_return_type_72986


    @norecursion
    def get_linewidth(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_linewidth'
        module_type_store = module_type_store.open_function_context('get_linewidth', 867, 4, False)
        # Assigning a type to the variable 'self' (line 868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 868, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_linewidth.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_linewidth.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_linewidth.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_linewidth.__dict__.__setitem__('stypy_function_name', 'Line2D.get_linewidth')
        Line2D.get_linewidth.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_linewidth.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_linewidth.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_linewidth.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_linewidth.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_linewidth.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_linewidth.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_linewidth', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_linewidth', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_linewidth(...)' code ##################

        # Getting the type of 'self' (line 868)
        self_72987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 15), 'self')
        # Obtaining the member '_linewidth' of a type (line 868)
        _linewidth_72988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 15), self_72987, '_linewidth')
        # Assigning a type to the variable 'stypy_return_type' (line 868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 868, 8), 'stypy_return_type', _linewidth_72988)
        
        # ################# End of 'get_linewidth(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_linewidth' in the type store
        # Getting the type of 'stypy_return_type' (line 867)
        stypy_return_type_72989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_72989)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_linewidth'
        return stypy_return_type_72989


    @norecursion
    def get_marker(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_marker'
        module_type_store = module_type_store.open_function_context('get_marker', 870, 4, False)
        # Assigning a type to the variable 'self' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_marker.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_marker.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_marker.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_marker.__dict__.__setitem__('stypy_function_name', 'Line2D.get_marker')
        Line2D.get_marker.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_marker.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_marker.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_marker.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_marker.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_marker.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_marker.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_marker', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_marker', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_marker(...)' code ##################

        
        # Call to get_marker(...): (line 871)
        # Processing the call keyword arguments (line 871)
        kwargs_72993 = {}
        # Getting the type of 'self' (line 871)
        self_72990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 15), 'self', False)
        # Obtaining the member '_marker' of a type (line 871)
        _marker_72991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 15), self_72990, '_marker')
        # Obtaining the member 'get_marker' of a type (line 871)
        get_marker_72992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 15), _marker_72991, 'get_marker')
        # Calling get_marker(args, kwargs) (line 871)
        get_marker_call_result_72994 = invoke(stypy.reporting.localization.Localization(__file__, 871, 15), get_marker_72992, *[], **kwargs_72993)
        
        # Assigning a type to the variable 'stypy_return_type' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 8), 'stypy_return_type', get_marker_call_result_72994)
        
        # ################# End of 'get_marker(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_marker' in the type store
        # Getting the type of 'stypy_return_type' (line 870)
        stypy_return_type_72995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_72995)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_marker'
        return stypy_return_type_72995


    @norecursion
    def get_markeredgecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_markeredgecolor'
        module_type_store = module_type_store.open_function_context('get_markeredgecolor', 873, 4, False)
        # Assigning a type to the variable 'self' (line 874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_markeredgecolor.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_markeredgecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_markeredgecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_markeredgecolor.__dict__.__setitem__('stypy_function_name', 'Line2D.get_markeredgecolor')
        Line2D.get_markeredgecolor.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_markeredgecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_markeredgecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_markeredgecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_markeredgecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_markeredgecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_markeredgecolor.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_markeredgecolor', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_markeredgecolor', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_markeredgecolor(...)' code ##################

        
        # Assigning a Attribute to a Name (line 874):
        
        # Assigning a Attribute to a Name (line 874):
        # Getting the type of 'self' (line 874)
        self_72996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 14), 'self')
        # Obtaining the member '_markeredgecolor' of a type (line 874)
        _markeredgecolor_72997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 874, 14), self_72996, '_markeredgecolor')
        # Assigning a type to the variable 'mec' (line 874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 8), 'mec', _markeredgecolor_72997)
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 875)
        # Processing the call arguments (line 875)
        # Getting the type of 'mec' (line 875)
        mec_72999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 22), 'mec', False)
        # Getting the type of 'six' (line 875)
        six_73000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 27), 'six', False)
        # Obtaining the member 'string_types' of a type (line 875)
        string_types_73001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 875, 27), six_73000, 'string_types')
        # Processing the call keyword arguments (line 875)
        kwargs_73002 = {}
        # Getting the type of 'isinstance' (line 875)
        isinstance_72998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 875)
        isinstance_call_result_73003 = invoke(stypy.reporting.localization.Localization(__file__, 875, 11), isinstance_72998, *[mec_72999, string_types_73001], **kwargs_73002)
        
        
        # Getting the type of 'mec' (line 875)
        mec_73004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 49), 'mec')
        unicode_73005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 875, 56), 'unicode', u'auto')
        # Applying the binary operator '==' (line 875)
        result_eq_73006 = python_operator(stypy.reporting.localization.Localization(__file__, 875, 49), '==', mec_73004, unicode_73005)
        
        # Applying the binary operator 'and' (line 875)
        result_and_keyword_73007 = python_operator(stypy.reporting.localization.Localization(__file__, 875, 11), 'and', isinstance_call_result_73003, result_eq_73006)
        
        # Testing the type of an if condition (line 875)
        if_condition_73008 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 875, 8), result_and_keyword_73007)
        # Assigning a type to the variable 'if_condition_73008' (line 875)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 875, 8), 'if_condition_73008', if_condition_73008)
        # SSA begins for if statement (line 875)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Obtaining the type of the subscript
        unicode_73009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 876, 24), 'unicode', u'_internal.classic_mode')
        # Getting the type of 'rcParams' (line 876)
        rcParams_73010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 15), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 876)
        getitem___73011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 15), rcParams_73010, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 876)
        subscript_call_result_73012 = invoke(stypy.reporting.localization.Localization(__file__, 876, 15), getitem___73011, unicode_73009)
        
        # Testing the type of an if condition (line 876)
        if_condition_73013 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 876, 12), subscript_call_result_73012)
        # Assigning a type to the variable 'if_condition_73013' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 12), 'if_condition_73013', if_condition_73013)
        # SSA begins for if statement (line 876)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Call to get_marker(...): (line 877)
        # Processing the call keyword arguments (line 877)
        kwargs_73017 = {}
        # Getting the type of 'self' (line 877)
        self_73014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 19), 'self', False)
        # Obtaining the member '_marker' of a type (line 877)
        _marker_73015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 19), self_73014, '_marker')
        # Obtaining the member 'get_marker' of a type (line 877)
        get_marker_73016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 19), _marker_73015, 'get_marker')
        # Calling get_marker(args, kwargs) (line 877)
        get_marker_call_result_73018 = invoke(stypy.reporting.localization.Localization(__file__, 877, 19), get_marker_73016, *[], **kwargs_73017)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 877)
        tuple_73019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 49), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 877)
        # Adding element type (line 877)
        unicode_73020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 49), 'unicode', u'.')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 877, 49), tuple_73019, unicode_73020)
        # Adding element type (line 877)
        unicode_73021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 54), 'unicode', u',')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 877, 49), tuple_73019, unicode_73021)
        
        # Applying the binary operator 'in' (line 877)
        result_contains_73022 = python_operator(stypy.reporting.localization.Localization(__file__, 877, 19), 'in', get_marker_call_result_73018, tuple_73019)
        
        # Testing the type of an if condition (line 877)
        if_condition_73023 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 877, 16), result_contains_73022)
        # Assigning a type to the variable 'if_condition_73023' (line 877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 877, 16), 'if_condition_73023', if_condition_73023)
        # SSA begins for if statement (line 877)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 878)
        self_73024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 27), 'self')
        # Obtaining the member '_color' of a type (line 878)
        _color_73025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 878, 27), self_73024, '_color')
        # Assigning a type to the variable 'stypy_return_type' (line 878)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 878, 20), 'stypy_return_type', _color_73025)
        # SSA join for if statement (line 877)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Call to is_filled(...): (line 879)
        # Processing the call keyword arguments (line 879)
        kwargs_73029 = {}
        # Getting the type of 'self' (line 879)
        self_73026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 19), 'self', False)
        # Obtaining the member '_marker' of a type (line 879)
        _marker_73027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 19), self_73026, '_marker')
        # Obtaining the member 'is_filled' of a type (line 879)
        is_filled_73028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 19), _marker_73027, 'is_filled')
        # Calling is_filled(args, kwargs) (line 879)
        is_filled_call_result_73030 = invoke(stypy.reporting.localization.Localization(__file__, 879, 19), is_filled_73028, *[], **kwargs_73029)
        
        
        
        # Call to get_fillstyle(...): (line 879)
        # Processing the call keyword arguments (line 879)
        kwargs_73033 = {}
        # Getting the type of 'self' (line 879)
        self_73031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 48), 'self', False)
        # Obtaining the member 'get_fillstyle' of a type (line 879)
        get_fillstyle_73032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 48), self_73031, 'get_fillstyle')
        # Calling get_fillstyle(args, kwargs) (line 879)
        get_fillstyle_call_result_73034 = invoke(stypy.reporting.localization.Localization(__file__, 879, 48), get_fillstyle_73032, *[], **kwargs_73033)
        
        unicode_73035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 879, 72), 'unicode', u'none')
        # Applying the binary operator '!=' (line 879)
        result_ne_73036 = python_operator(stypy.reporting.localization.Localization(__file__, 879, 48), '!=', get_fillstyle_call_result_73034, unicode_73035)
        
        # Applying the binary operator 'and' (line 879)
        result_and_keyword_73037 = python_operator(stypy.reporting.localization.Localization(__file__, 879, 19), 'and', is_filled_call_result_73030, result_ne_73036)
        
        # Testing the type of an if condition (line 879)
        if_condition_73038 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 879, 16), result_and_keyword_73037)
        # Assigning a type to the variable 'if_condition_73038' (line 879)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 879, 16), 'if_condition_73038', if_condition_73038)
        # SSA begins for if statement (line 879)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_73039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 880, 28), 'unicode', u'k')
        # Assigning a type to the variable 'stypy_return_type' (line 880)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 880, 21), 'stypy_return_type', unicode_73039)
        # SSA join for if statement (line 879)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 876)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 881)
        self_73040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 19), 'self')
        # Obtaining the member '_color' of a type (line 881)
        _color_73041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 19), self_73040, '_color')
        # Assigning a type to the variable 'stypy_return_type' (line 881)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 881, 12), 'stypy_return_type', _color_73041)
        # SSA branch for the else part of an if statement (line 875)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'mec' (line 883)
        mec_73042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 19), 'mec')
        # Assigning a type to the variable 'stypy_return_type' (line 883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 12), 'stypy_return_type', mec_73042)
        # SSA join for if statement (line 875)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_markeredgecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_markeredgecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 873)
        stypy_return_type_73043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73043)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_markeredgecolor'
        return stypy_return_type_73043


    @norecursion
    def get_markeredgewidth(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_markeredgewidth'
        module_type_store = module_type_store.open_function_context('get_markeredgewidth', 885, 4, False)
        # Assigning a type to the variable 'self' (line 886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 886, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_markeredgewidth.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_markeredgewidth.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_markeredgewidth.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_markeredgewidth.__dict__.__setitem__('stypy_function_name', 'Line2D.get_markeredgewidth')
        Line2D.get_markeredgewidth.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_markeredgewidth.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_markeredgewidth.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_markeredgewidth.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_markeredgewidth.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_markeredgewidth.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_markeredgewidth.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_markeredgewidth', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_markeredgewidth', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_markeredgewidth(...)' code ##################

        # Getting the type of 'self' (line 886)
        self_73044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 15), 'self')
        # Obtaining the member '_markeredgewidth' of a type (line 886)
        _markeredgewidth_73045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 15), self_73044, '_markeredgewidth')
        # Assigning a type to the variable 'stypy_return_type' (line 886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 886, 8), 'stypy_return_type', _markeredgewidth_73045)
        
        # ################# End of 'get_markeredgewidth(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_markeredgewidth' in the type store
        # Getting the type of 'stypy_return_type' (line 885)
        stypy_return_type_73046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73046)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_markeredgewidth'
        return stypy_return_type_73046


    @norecursion
    def _get_markerfacecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 888)
        False_73047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 39), 'False')
        defaults = [False_73047]
        # Create a new context for function '_get_markerfacecolor'
        module_type_store = module_type_store.open_function_context('_get_markerfacecolor', 888, 4, False)
        # Assigning a type to the variable 'self' (line 889)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 889, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D._get_markerfacecolor.__dict__.__setitem__('stypy_localization', localization)
        Line2D._get_markerfacecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D._get_markerfacecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D._get_markerfacecolor.__dict__.__setitem__('stypy_function_name', 'Line2D._get_markerfacecolor')
        Line2D._get_markerfacecolor.__dict__.__setitem__('stypy_param_names_list', ['alt'])
        Line2D._get_markerfacecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D._get_markerfacecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D._get_markerfacecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D._get_markerfacecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D._get_markerfacecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D._get_markerfacecolor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D._get_markerfacecolor', ['alt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_markerfacecolor', localization, ['alt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_markerfacecolor(...)' code ##################

        
        # Getting the type of 'alt' (line 889)
        alt_73048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 11), 'alt')
        # Testing the type of an if condition (line 889)
        if_condition_73049 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 889, 8), alt_73048)
        # Assigning a type to the variable 'if_condition_73049' (line 889)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 889, 8), 'if_condition_73049', if_condition_73049)
        # SSA begins for if statement (line 889)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 890):
        
        # Assigning a Attribute to a Name (line 890):
        # Getting the type of 'self' (line 890)
        self_73050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 17), 'self')
        # Obtaining the member '_markerfacecoloralt' of a type (line 890)
        _markerfacecoloralt_73051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 890, 17), self_73050, '_markerfacecoloralt')
        # Assigning a type to the variable 'fc' (line 890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 12), 'fc', _markerfacecoloralt_73051)
        # SSA branch for the else part of an if statement (line 889)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 892):
        
        # Assigning a Attribute to a Name (line 892):
        # Getting the type of 'self' (line 892)
        self_73052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 17), 'self')
        # Obtaining the member '_markerfacecolor' of a type (line 892)
        _markerfacecolor_73053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 17), self_73052, '_markerfacecolor')
        # Assigning a type to the variable 'fc' (line 892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 12), 'fc', _markerfacecolor_73053)
        # SSA join for if statement (line 889)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 894)
        # Processing the call arguments (line 894)
        # Getting the type of 'fc' (line 894)
        fc_73055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 23), 'fc', False)
        # Getting the type of 'six' (line 894)
        six_73056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 27), 'six', False)
        # Obtaining the member 'string_types' of a type (line 894)
        string_types_73057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 894, 27), six_73056, 'string_types')
        # Processing the call keyword arguments (line 894)
        kwargs_73058 = {}
        # Getting the type of 'isinstance' (line 894)
        isinstance_73054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 12), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 894)
        isinstance_call_result_73059 = invoke(stypy.reporting.localization.Localization(__file__, 894, 12), isinstance_73054, *[fc_73055, string_types_73057], **kwargs_73058)
        
        
        
        # Call to lower(...): (line 894)
        # Processing the call keyword arguments (line 894)
        kwargs_73062 = {}
        # Getting the type of 'fc' (line 894)
        fc_73060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 49), 'fc', False)
        # Obtaining the member 'lower' of a type (line 894)
        lower_73061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 894, 49), fc_73060, 'lower')
        # Calling lower(args, kwargs) (line 894)
        lower_call_result_73063 = invoke(stypy.reporting.localization.Localization(__file__, 894, 49), lower_73061, *[], **kwargs_73062)
        
        unicode_73064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 894, 63), 'unicode', u'auto')
        # Applying the binary operator '==' (line 894)
        result_eq_73065 = python_operator(stypy.reporting.localization.Localization(__file__, 894, 49), '==', lower_call_result_73063, unicode_73064)
        
        # Applying the binary operator 'and' (line 894)
        result_and_keyword_73066 = python_operator(stypy.reporting.localization.Localization(__file__, 894, 12), 'and', isinstance_call_result_73059, result_eq_73065)
        
        # Testing the type of an if condition (line 894)
        if_condition_73067 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 894, 8), result_and_keyword_73066)
        # Assigning a type to the variable 'if_condition_73067' (line 894)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 894, 8), 'if_condition_73067', if_condition_73067)
        # SSA begins for if statement (line 894)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Call to get_fillstyle(...): (line 895)
        # Processing the call keyword arguments (line 895)
        kwargs_73070 = {}
        # Getting the type of 'self' (line 895)
        self_73068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 15), 'self', False)
        # Obtaining the member 'get_fillstyle' of a type (line 895)
        get_fillstyle_73069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 895, 15), self_73068, 'get_fillstyle')
        # Calling get_fillstyle(args, kwargs) (line 895)
        get_fillstyle_call_result_73071 = invoke(stypy.reporting.localization.Localization(__file__, 895, 15), get_fillstyle_73069, *[], **kwargs_73070)
        
        unicode_73072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 895, 39), 'unicode', u'none')
        # Applying the binary operator '==' (line 895)
        result_eq_73073 = python_operator(stypy.reporting.localization.Localization(__file__, 895, 15), '==', get_fillstyle_call_result_73071, unicode_73072)
        
        # Testing the type of an if condition (line 895)
        if_condition_73074 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 895, 12), result_eq_73073)
        # Assigning a type to the variable 'if_condition_73074' (line 895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 12), 'if_condition_73074', if_condition_73074)
        # SSA begins for if statement (line 895)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_73075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 23), 'unicode', u'none')
        # Assigning a type to the variable 'stypy_return_type' (line 896)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 16), 'stypy_return_type', unicode_73075)
        # SSA branch for the else part of an if statement (line 895)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'self' (line 898)
        self_73076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 23), 'self')
        # Obtaining the member '_color' of a type (line 898)
        _color_73077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 23), self_73076, '_color')
        # Assigning a type to the variable 'stypy_return_type' (line 898)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 898, 16), 'stypy_return_type', _color_73077)
        # SSA join for if statement (line 895)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 894)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'fc' (line 900)
        fc_73078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 19), 'fc')
        # Assigning a type to the variable 'stypy_return_type' (line 900)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 900, 12), 'stypy_return_type', fc_73078)
        # SSA join for if statement (line 894)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_get_markerfacecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_markerfacecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 888)
        stypy_return_type_73079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73079)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_markerfacecolor'
        return stypy_return_type_73079


    @norecursion
    def get_markerfacecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_markerfacecolor'
        module_type_store = module_type_store.open_function_context('get_markerfacecolor', 902, 4, False)
        # Assigning a type to the variable 'self' (line 903)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 903, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_markerfacecolor.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_markerfacecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_markerfacecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_markerfacecolor.__dict__.__setitem__('stypy_function_name', 'Line2D.get_markerfacecolor')
        Line2D.get_markerfacecolor.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_markerfacecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_markerfacecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_markerfacecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_markerfacecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_markerfacecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_markerfacecolor.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_markerfacecolor', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_markerfacecolor', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_markerfacecolor(...)' code ##################

        
        # Call to _get_markerfacecolor(...): (line 903)
        # Processing the call keyword arguments (line 903)
        # Getting the type of 'False' (line 903)
        False_73082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 45), 'False', False)
        keyword_73083 = False_73082
        kwargs_73084 = {'alt': keyword_73083}
        # Getting the type of 'self' (line 903)
        self_73080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 15), 'self', False)
        # Obtaining the member '_get_markerfacecolor' of a type (line 903)
        _get_markerfacecolor_73081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 15), self_73080, '_get_markerfacecolor')
        # Calling _get_markerfacecolor(args, kwargs) (line 903)
        _get_markerfacecolor_call_result_73085 = invoke(stypy.reporting.localization.Localization(__file__, 903, 15), _get_markerfacecolor_73081, *[], **kwargs_73084)
        
        # Assigning a type to the variable 'stypy_return_type' (line 903)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 903, 8), 'stypy_return_type', _get_markerfacecolor_call_result_73085)
        
        # ################# End of 'get_markerfacecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_markerfacecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 902)
        stypy_return_type_73086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73086)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_markerfacecolor'
        return stypy_return_type_73086


    @norecursion
    def get_markerfacecoloralt(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_markerfacecoloralt'
        module_type_store = module_type_store.open_function_context('get_markerfacecoloralt', 905, 4, False)
        # Assigning a type to the variable 'self' (line 906)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 906, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_markerfacecoloralt.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_markerfacecoloralt.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_markerfacecoloralt.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_markerfacecoloralt.__dict__.__setitem__('stypy_function_name', 'Line2D.get_markerfacecoloralt')
        Line2D.get_markerfacecoloralt.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_markerfacecoloralt.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_markerfacecoloralt.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_markerfacecoloralt.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_markerfacecoloralt.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_markerfacecoloralt.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_markerfacecoloralt.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_markerfacecoloralt', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_markerfacecoloralt', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_markerfacecoloralt(...)' code ##################

        
        # Call to _get_markerfacecolor(...): (line 906)
        # Processing the call keyword arguments (line 906)
        # Getting the type of 'True' (line 906)
        True_73089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 45), 'True', False)
        keyword_73090 = True_73089
        kwargs_73091 = {'alt': keyword_73090}
        # Getting the type of 'self' (line 906)
        self_73087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 15), 'self', False)
        # Obtaining the member '_get_markerfacecolor' of a type (line 906)
        _get_markerfacecolor_73088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 906, 15), self_73087, '_get_markerfacecolor')
        # Calling _get_markerfacecolor(args, kwargs) (line 906)
        _get_markerfacecolor_call_result_73092 = invoke(stypy.reporting.localization.Localization(__file__, 906, 15), _get_markerfacecolor_73088, *[], **kwargs_73091)
        
        # Assigning a type to the variable 'stypy_return_type' (line 906)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 906, 8), 'stypy_return_type', _get_markerfacecolor_call_result_73092)
        
        # ################# End of 'get_markerfacecoloralt(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_markerfacecoloralt' in the type store
        # Getting the type of 'stypy_return_type' (line 905)
        stypy_return_type_73093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73093)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_markerfacecoloralt'
        return stypy_return_type_73093


    @norecursion
    def get_markersize(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_markersize'
        module_type_store = module_type_store.open_function_context('get_markersize', 908, 4, False)
        # Assigning a type to the variable 'self' (line 909)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_markersize.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_markersize.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_markersize.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_markersize.__dict__.__setitem__('stypy_function_name', 'Line2D.get_markersize')
        Line2D.get_markersize.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_markersize.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_markersize.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_markersize.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_markersize.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_markersize.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_markersize.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_markersize', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_markersize', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_markersize(...)' code ##################

        # Getting the type of 'self' (line 909)
        self_73094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 15), 'self')
        # Obtaining the member '_markersize' of a type (line 909)
        _markersize_73095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 909, 15), self_73094, '_markersize')
        # Assigning a type to the variable 'stypy_return_type' (line 909)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 8), 'stypy_return_type', _markersize_73095)
        
        # ################# End of 'get_markersize(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_markersize' in the type store
        # Getting the type of 'stypy_return_type' (line 908)
        stypy_return_type_73096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73096)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_markersize'
        return stypy_return_type_73096


    @norecursion
    def get_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 911)
        True_73097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 28), 'True')
        defaults = [True_73097]
        # Create a new context for function 'get_data'
        module_type_store = module_type_store.open_function_context('get_data', 911, 4, False)
        # Assigning a type to the variable 'self' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_data.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_data.__dict__.__setitem__('stypy_function_name', 'Line2D.get_data')
        Line2D.get_data.__dict__.__setitem__('stypy_param_names_list', ['orig'])
        Line2D.get_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_data.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_data', ['orig'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_data', localization, ['orig'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_data(...)' code ##################

        unicode_73098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, (-1)), 'unicode', u'\n        Return the xdata, ydata.\n\n        If *orig* is *True*, return the original data.\n        ')
        
        # Obtaining an instance of the builtin type 'tuple' (line 917)
        tuple_73099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 917, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 917)
        # Adding element type (line 917)
        
        # Call to get_xdata(...): (line 917)
        # Processing the call keyword arguments (line 917)
        # Getting the type of 'orig' (line 917)
        orig_73102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 35), 'orig', False)
        keyword_73103 = orig_73102
        kwargs_73104 = {'orig': keyword_73103}
        # Getting the type of 'self' (line 917)
        self_73100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 15), 'self', False)
        # Obtaining the member 'get_xdata' of a type (line 917)
        get_xdata_73101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 15), self_73100, 'get_xdata')
        # Calling get_xdata(args, kwargs) (line 917)
        get_xdata_call_result_73105 = invoke(stypy.reporting.localization.Localization(__file__, 917, 15), get_xdata_73101, *[], **kwargs_73104)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 917, 15), tuple_73099, get_xdata_call_result_73105)
        # Adding element type (line 917)
        
        # Call to get_ydata(...): (line 917)
        # Processing the call keyword arguments (line 917)
        # Getting the type of 'orig' (line 917)
        orig_73108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 62), 'orig', False)
        keyword_73109 = orig_73108
        kwargs_73110 = {'orig': keyword_73109}
        # Getting the type of 'self' (line 917)
        self_73106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 42), 'self', False)
        # Obtaining the member 'get_ydata' of a type (line 917)
        get_ydata_73107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 42), self_73106, 'get_ydata')
        # Calling get_ydata(args, kwargs) (line 917)
        get_ydata_call_result_73111 = invoke(stypy.reporting.localization.Localization(__file__, 917, 42), get_ydata_73107, *[], **kwargs_73110)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 917, 15), tuple_73099, get_ydata_call_result_73111)
        
        # Assigning a type to the variable 'stypy_return_type' (line 917)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 917, 8), 'stypy_return_type', tuple_73099)
        
        # ################# End of 'get_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_data' in the type store
        # Getting the type of 'stypy_return_type' (line 911)
        stypy_return_type_73112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73112)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_data'
        return stypy_return_type_73112


    @norecursion
    def get_xdata(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 919)
        True_73113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 29), 'True')
        defaults = [True_73113]
        # Create a new context for function 'get_xdata'
        module_type_store = module_type_store.open_function_context('get_xdata', 919, 4, False)
        # Assigning a type to the variable 'self' (line 920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_xdata.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_xdata.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_xdata.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_xdata.__dict__.__setitem__('stypy_function_name', 'Line2D.get_xdata')
        Line2D.get_xdata.__dict__.__setitem__('stypy_param_names_list', ['orig'])
        Line2D.get_xdata.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_xdata.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_xdata.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_xdata.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_xdata.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_xdata.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_xdata', ['orig'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xdata', localization, ['orig'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xdata(...)' code ##################

        unicode_73114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 925, (-1)), 'unicode', u'\n        Return the xdata.\n\n        If *orig* is *True*, return the original data, else the\n        processed data.\n        ')
        
        # Getting the type of 'orig' (line 926)
        orig_73115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 11), 'orig')
        # Testing the type of an if condition (line 926)
        if_condition_73116 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 926, 8), orig_73115)
        # Assigning a type to the variable 'if_condition_73116' (line 926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 926, 8), 'if_condition_73116', if_condition_73116)
        # SSA begins for if statement (line 926)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 927)
        self_73117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 19), 'self')
        # Obtaining the member '_xorig' of a type (line 927)
        _xorig_73118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 927, 19), self_73117, '_xorig')
        # Assigning a type to the variable 'stypy_return_type' (line 927)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 927, 12), 'stypy_return_type', _xorig_73118)
        # SSA join for if statement (line 926)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 928)
        self_73119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 11), 'self')
        # Obtaining the member '_invalidx' of a type (line 928)
        _invalidx_73120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 928, 11), self_73119, '_invalidx')
        # Testing the type of an if condition (line 928)
        if_condition_73121 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 928, 8), _invalidx_73120)
        # Assigning a type to the variable 'if_condition_73121' (line 928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 928, 8), 'if_condition_73121', if_condition_73121)
        # SSA begins for if statement (line 928)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to recache(...): (line 929)
        # Processing the call keyword arguments (line 929)
        kwargs_73124 = {}
        # Getting the type of 'self' (line 929)
        self_73122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 12), 'self', False)
        # Obtaining the member 'recache' of a type (line 929)
        recache_73123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 929, 12), self_73122, 'recache')
        # Calling recache(args, kwargs) (line 929)
        recache_call_result_73125 = invoke(stypy.reporting.localization.Localization(__file__, 929, 12), recache_73123, *[], **kwargs_73124)
        
        # SSA join for if statement (line 928)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 930)
        self_73126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 15), 'self')
        # Obtaining the member '_x' of a type (line 930)
        _x_73127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 930, 15), self_73126, '_x')
        # Assigning a type to the variable 'stypy_return_type' (line 930)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 8), 'stypy_return_type', _x_73127)
        
        # ################# End of 'get_xdata(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xdata' in the type store
        # Getting the type of 'stypy_return_type' (line 919)
        stypy_return_type_73128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73128)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xdata'
        return stypy_return_type_73128


    @norecursion
    def get_ydata(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 932)
        True_73129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 29), 'True')
        defaults = [True_73129]
        # Create a new context for function 'get_ydata'
        module_type_store = module_type_store.open_function_context('get_ydata', 932, 4, False)
        # Assigning a type to the variable 'self' (line 933)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_ydata.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_ydata.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_ydata.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_ydata.__dict__.__setitem__('stypy_function_name', 'Line2D.get_ydata')
        Line2D.get_ydata.__dict__.__setitem__('stypy_param_names_list', ['orig'])
        Line2D.get_ydata.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_ydata.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_ydata.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_ydata.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_ydata.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_ydata.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_ydata', ['orig'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_ydata', localization, ['orig'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_ydata(...)' code ##################

        unicode_73130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, (-1)), 'unicode', u'\n        Return the ydata.\n\n        If *orig* is *True*, return the original data, else the\n        processed data.\n        ')
        
        # Getting the type of 'orig' (line 939)
        orig_73131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 11), 'orig')
        # Testing the type of an if condition (line 939)
        if_condition_73132 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 939, 8), orig_73131)
        # Assigning a type to the variable 'if_condition_73132' (line 939)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 939, 8), 'if_condition_73132', if_condition_73132)
        # SSA begins for if statement (line 939)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 940)
        self_73133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 19), 'self')
        # Obtaining the member '_yorig' of a type (line 940)
        _yorig_73134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 19), self_73133, '_yorig')
        # Assigning a type to the variable 'stypy_return_type' (line 940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 12), 'stypy_return_type', _yorig_73134)
        # SSA join for if statement (line 939)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 941)
        self_73135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 11), 'self')
        # Obtaining the member '_invalidy' of a type (line 941)
        _invalidy_73136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 941, 11), self_73135, '_invalidy')
        # Testing the type of an if condition (line 941)
        if_condition_73137 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 941, 8), _invalidy_73136)
        # Assigning a type to the variable 'if_condition_73137' (line 941)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 941, 8), 'if_condition_73137', if_condition_73137)
        # SSA begins for if statement (line 941)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to recache(...): (line 942)
        # Processing the call keyword arguments (line 942)
        kwargs_73140 = {}
        # Getting the type of 'self' (line 942)
        self_73138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 12), 'self', False)
        # Obtaining the member 'recache' of a type (line 942)
        recache_73139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 12), self_73138, 'recache')
        # Calling recache(args, kwargs) (line 942)
        recache_call_result_73141 = invoke(stypy.reporting.localization.Localization(__file__, 942, 12), recache_73139, *[], **kwargs_73140)
        
        # SSA join for if statement (line 941)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 943)
        self_73142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 15), 'self')
        # Obtaining the member '_y' of a type (line 943)
        _y_73143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 15), self_73142, '_y')
        # Assigning a type to the variable 'stypy_return_type' (line 943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 8), 'stypy_return_type', _y_73143)
        
        # ################# End of 'get_ydata(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_ydata' in the type store
        # Getting the type of 'stypy_return_type' (line 932)
        stypy_return_type_73144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73144)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_ydata'
        return stypy_return_type_73144


    @norecursion
    def get_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_path'
        module_type_store = module_type_store.open_function_context('get_path', 945, 4, False)
        # Assigning a type to the variable 'self' (line 946)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 946, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_path.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_path.__dict__.__setitem__('stypy_function_name', 'Line2D.get_path')
        Line2D.get_path.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_path.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_path', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_path', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_path(...)' code ##################

        unicode_73145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, (-1)), 'unicode', u'\n        Return the :class:`~matplotlib.path.Path` object associated\n        with this line.\n        ')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 950)
        self_73146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 11), 'self')
        # Obtaining the member '_invalidy' of a type (line 950)
        _invalidy_73147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 11), self_73146, '_invalidy')
        # Getting the type of 'self' (line 950)
        self_73148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 29), 'self')
        # Obtaining the member '_invalidx' of a type (line 950)
        _invalidx_73149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 29), self_73148, '_invalidx')
        # Applying the binary operator 'or' (line 950)
        result_or_keyword_73150 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 11), 'or', _invalidy_73147, _invalidx_73149)
        
        # Testing the type of an if condition (line 950)
        if_condition_73151 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 950, 8), result_or_keyword_73150)
        # Assigning a type to the variable 'if_condition_73151' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 8), 'if_condition_73151', if_condition_73151)
        # SSA begins for if statement (line 950)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to recache(...): (line 951)
        # Processing the call keyword arguments (line 951)
        kwargs_73154 = {}
        # Getting the type of 'self' (line 951)
        self_73152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 12), 'self', False)
        # Obtaining the member 'recache' of a type (line 951)
        recache_73153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 12), self_73152, 'recache')
        # Calling recache(args, kwargs) (line 951)
        recache_call_result_73155 = invoke(stypy.reporting.localization.Localization(__file__, 951, 12), recache_73153, *[], **kwargs_73154)
        
        # SSA join for if statement (line 950)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 952)
        self_73156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 15), 'self')
        # Obtaining the member '_path' of a type (line 952)
        _path_73157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 15), self_73156, '_path')
        # Assigning a type to the variable 'stypy_return_type' (line 952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'stypy_return_type', _path_73157)
        
        # ################# End of 'get_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_path' in the type store
        # Getting the type of 'stypy_return_type' (line 945)
        stypy_return_type_73158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73158)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_path'
        return stypy_return_type_73158


    @norecursion
    def get_xydata(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_xydata'
        module_type_store = module_type_store.open_function_context('get_xydata', 954, 4, False)
        # Assigning a type to the variable 'self' (line 955)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 955, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_xydata.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_xydata.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_xydata.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_xydata.__dict__.__setitem__('stypy_function_name', 'Line2D.get_xydata')
        Line2D.get_xydata.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_xydata.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_xydata.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_xydata.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_xydata.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_xydata.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_xydata.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_xydata', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_xydata', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_xydata(...)' code ##################

        unicode_73159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, (-1)), 'unicode', u'\n        Return the *xy* data as a Nx2 numpy array.\n        ')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 958)
        self_73160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 11), 'self')
        # Obtaining the member '_invalidy' of a type (line 958)
        _invalidy_73161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 11), self_73160, '_invalidy')
        # Getting the type of 'self' (line 958)
        self_73162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 29), 'self')
        # Obtaining the member '_invalidx' of a type (line 958)
        _invalidx_73163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 29), self_73162, '_invalidx')
        # Applying the binary operator 'or' (line 958)
        result_or_keyword_73164 = python_operator(stypy.reporting.localization.Localization(__file__, 958, 11), 'or', _invalidy_73161, _invalidx_73163)
        
        # Testing the type of an if condition (line 958)
        if_condition_73165 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 958, 8), result_or_keyword_73164)
        # Assigning a type to the variable 'if_condition_73165' (line 958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 8), 'if_condition_73165', if_condition_73165)
        # SSA begins for if statement (line 958)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to recache(...): (line 959)
        # Processing the call keyword arguments (line 959)
        kwargs_73168 = {}
        # Getting the type of 'self' (line 959)
        self_73166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 12), 'self', False)
        # Obtaining the member 'recache' of a type (line 959)
        recache_73167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 12), self_73166, 'recache')
        # Calling recache(args, kwargs) (line 959)
        recache_call_result_73169 = invoke(stypy.reporting.localization.Localization(__file__, 959, 12), recache_73167, *[], **kwargs_73168)
        
        # SSA join for if statement (line 958)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 960)
        self_73170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 15), 'self')
        # Obtaining the member '_xy' of a type (line 960)
        _xy_73171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 15), self_73170, '_xy')
        # Assigning a type to the variable 'stypy_return_type' (line 960)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 960, 8), 'stypy_return_type', _xy_73171)
        
        # ################# End of 'get_xydata(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_xydata' in the type store
        # Getting the type of 'stypy_return_type' (line 954)
        stypy_return_type_73172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73172)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_xydata'
        return stypy_return_type_73172


    @norecursion
    def set_antialiased(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_antialiased'
        module_type_store = module_type_store.open_function_context('set_antialiased', 962, 4, False)
        # Assigning a type to the variable 'self' (line 963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_antialiased.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_antialiased.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_antialiased.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_antialiased.__dict__.__setitem__('stypy_function_name', 'Line2D.set_antialiased')
        Line2D.set_antialiased.__dict__.__setitem__('stypy_param_names_list', ['b'])
        Line2D.set_antialiased.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_antialiased.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_antialiased.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_antialiased.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_antialiased.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_antialiased.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_antialiased', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_antialiased', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_antialiased(...)' code ##################

        unicode_73173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 967, (-1)), 'unicode', u'\n        True if line should be drawin with antialiased rendering\n\n        ACCEPTS: [True | False]\n        ')
        
        
        # Getting the type of 'self' (line 968)
        self_73174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 11), 'self')
        # Obtaining the member '_antialiased' of a type (line 968)
        _antialiased_73175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 11), self_73174, '_antialiased')
        # Getting the type of 'b' (line 968)
        b_73176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 32), 'b')
        # Applying the binary operator '!=' (line 968)
        result_ne_73177 = python_operator(stypy.reporting.localization.Localization(__file__, 968, 11), '!=', _antialiased_73175, b_73176)
        
        # Testing the type of an if condition (line 968)
        if_condition_73178 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 968, 8), result_ne_73177)
        # Assigning a type to the variable 'if_condition_73178' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 8), 'if_condition_73178', if_condition_73178)
        # SSA begins for if statement (line 968)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 969):
        
        # Assigning a Name to a Attribute (line 969):
        # Getting the type of 'True' (line 969)
        True_73179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 25), 'True')
        # Getting the type of 'self' (line 969)
        self_73180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 12), 'self')
        # Setting the type of the member 'stale' of a type (line 969)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 969, 12), self_73180, 'stale', True_73179)
        # SSA join for if statement (line 968)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 970):
        
        # Assigning a Name to a Attribute (line 970):
        # Getting the type of 'b' (line 970)
        b_73181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 28), 'b')
        # Getting the type of 'self' (line 970)
        self_73182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'self')
        # Setting the type of the member '_antialiased' of a type (line 970)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 8), self_73182, '_antialiased', b_73181)
        
        # ################# End of 'set_antialiased(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_antialiased' in the type store
        # Getting the type of 'stypy_return_type' (line 962)
        stypy_return_type_73183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73183)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_antialiased'
        return stypy_return_type_73183


    @norecursion
    def set_color(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_color'
        module_type_store = module_type_store.open_function_context('set_color', 972, 4, False)
        # Assigning a type to the variable 'self' (line 973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 973, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_color.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_color.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_color.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_color.__dict__.__setitem__('stypy_function_name', 'Line2D.set_color')
        Line2D.set_color.__dict__.__setitem__('stypy_param_names_list', ['color'])
        Line2D.set_color.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_color.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_color.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_color.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_color.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_color.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_color', ['color'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_color', localization, ['color'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_color(...)' code ##################

        unicode_73184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 977, (-1)), 'unicode', u'\n        Set the color of the line\n\n        ACCEPTS: any matplotlib color\n        ')
        
        # Assigning a Name to a Attribute (line 978):
        
        # Assigning a Name to a Attribute (line 978):
        # Getting the type of 'color' (line 978)
        color_73185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 22), 'color')
        # Getting the type of 'self' (line 978)
        self_73186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 8), 'self')
        # Setting the type of the member '_color' of a type (line 978)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 8), self_73186, '_color', color_73185)
        
        # Assigning a Name to a Attribute (line 979):
        
        # Assigning a Name to a Attribute (line 979):
        # Getting the type of 'True' (line 979)
        True_73187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 21), 'True')
        # Getting the type of 'self' (line 979)
        self_73188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 979)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 979, 8), self_73188, 'stale', True_73187)
        
        # ################# End of 'set_color(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_color' in the type store
        # Getting the type of 'stypy_return_type' (line 972)
        stypy_return_type_73189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73189)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_color'
        return stypy_return_type_73189


    @norecursion
    def set_drawstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_drawstyle'
        module_type_store = module_type_store.open_function_context('set_drawstyle', 981, 4, False)
        # Assigning a type to the variable 'self' (line 982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_drawstyle.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_drawstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_drawstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_drawstyle.__dict__.__setitem__('stypy_function_name', 'Line2D.set_drawstyle')
        Line2D.set_drawstyle.__dict__.__setitem__('stypy_param_names_list', ['drawstyle'])
        Line2D.set_drawstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_drawstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_drawstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_drawstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_drawstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_drawstyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_drawstyle', ['drawstyle'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_drawstyle', localization, ['drawstyle'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_drawstyle(...)' code ##################

        unicode_73190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 991, (-1)), 'unicode', u"\n        Set the drawstyle of the plot\n\n        'default' connects the points with lines. The steps variants\n        produce step-plots. 'steps' is equivalent to 'steps-pre' and\n        is maintained for backward-compatibility.\n\n        ACCEPTS: ['default' | 'steps' | 'steps-pre' | 'steps-mid' |\n                  'steps-post']\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 992)
        # Getting the type of 'drawstyle' (line 992)
        drawstyle_73191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 11), 'drawstyle')
        # Getting the type of 'None' (line 992)
        None_73192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 24), 'None')
        
        (may_be_73193, more_types_in_union_73194) = may_be_none(drawstyle_73191, None_73192)

        if may_be_73193:

            if more_types_in_union_73194:
                # Runtime conditional SSA (line 992)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Name (line 993):
            
            # Assigning a Str to a Name (line 993):
            unicode_73195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 993, 24), 'unicode', u'default')
            # Assigning a type to the variable 'drawstyle' (line 993)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 993, 12), 'drawstyle', unicode_73195)

            if more_types_in_union_73194:
                # SSA join for if statement (line 992)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'drawstyle' (line 994)
        drawstyle_73196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 11), 'drawstyle')
        # Getting the type of 'self' (line 994)
        self_73197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 28), 'self')
        # Obtaining the member 'drawStyles' of a type (line 994)
        drawStyles_73198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 28), self_73197, 'drawStyles')
        # Applying the binary operator 'notin' (line 994)
        result_contains_73199 = python_operator(stypy.reporting.localization.Localization(__file__, 994, 11), 'notin', drawstyle_73196, drawStyles_73198)
        
        # Testing the type of an if condition (line 994)
        if_condition_73200 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 994, 8), result_contains_73199)
        # Assigning a type to the variable 'if_condition_73200' (line 994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 8), 'if_condition_73200', if_condition_73200)
        # SSA begins for if statement (line 994)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 995)
        # Processing the call arguments (line 995)
        
        # Call to format(...): (line 995)
        # Processing the call arguments (line 995)
        # Getting the type of 'drawstyle' (line 995)
        drawstyle_73204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 66), 'drawstyle', False)
        # Processing the call keyword arguments (line 995)
        kwargs_73205 = {}
        unicode_73202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 995, 29), 'unicode', u'Unrecognized drawstyle {!r}')
        # Obtaining the member 'format' of a type (line 995)
        format_73203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 29), unicode_73202, 'format')
        # Calling format(args, kwargs) (line 995)
        format_call_result_73206 = invoke(stypy.reporting.localization.Localization(__file__, 995, 29), format_73203, *[drawstyle_73204], **kwargs_73205)
        
        # Processing the call keyword arguments (line 995)
        kwargs_73207 = {}
        # Getting the type of 'ValueError' (line 995)
        ValueError_73201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 995)
        ValueError_call_result_73208 = invoke(stypy.reporting.localization.Localization(__file__, 995, 18), ValueError_73201, *[format_call_result_73206], **kwargs_73207)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 995, 12), ValueError_call_result_73208, 'raise parameter', BaseException)
        # SSA join for if statement (line 994)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 996)
        self_73209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 11), 'self')
        # Obtaining the member '_drawstyle' of a type (line 996)
        _drawstyle_73210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 11), self_73209, '_drawstyle')
        # Getting the type of 'drawstyle' (line 996)
        drawstyle_73211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 30), 'drawstyle')
        # Applying the binary operator '!=' (line 996)
        result_ne_73212 = python_operator(stypy.reporting.localization.Localization(__file__, 996, 11), '!=', _drawstyle_73210, drawstyle_73211)
        
        # Testing the type of an if condition (line 996)
        if_condition_73213 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 996, 8), result_ne_73212)
        # Assigning a type to the variable 'if_condition_73213' (line 996)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 8), 'if_condition_73213', if_condition_73213)
        # SSA begins for if statement (line 996)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 997):
        
        # Assigning a Name to a Attribute (line 997):
        # Getting the type of 'True' (line 997)
        True_73214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 25), 'True')
        # Getting the type of 'self' (line 997)
        self_73215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 12), 'self')
        # Setting the type of the member 'stale' of a type (line 997)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 997, 12), self_73215, 'stale', True_73214)
        # SSA join for if statement (line 996)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 998):
        
        # Assigning a Name to a Attribute (line 998):
        # Getting the type of 'drawstyle' (line 998)
        drawstyle_73216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 26), 'drawstyle')
        # Getting the type of 'self' (line 998)
        self_73217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 8), 'self')
        # Setting the type of the member '_drawstyle' of a type (line 998)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 8), self_73217, '_drawstyle', drawstyle_73216)
        
        # ################# End of 'set_drawstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_drawstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 981)
        stypy_return_type_73218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73218)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_drawstyle'
        return stypy_return_type_73218


    @norecursion
    def set_linewidth(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_linewidth'
        module_type_store = module_type_store.open_function_context('set_linewidth', 1000, 4, False)
        # Assigning a type to the variable 'self' (line 1001)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1001, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_linewidth.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_linewidth.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_linewidth.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_linewidth.__dict__.__setitem__('stypy_function_name', 'Line2D.set_linewidth')
        Line2D.set_linewidth.__dict__.__setitem__('stypy_param_names_list', ['w'])
        Line2D.set_linewidth.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_linewidth.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_linewidth.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_linewidth.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_linewidth.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_linewidth.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_linewidth', ['w'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_linewidth', localization, ['w'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_linewidth(...)' code ##################

        unicode_73219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1005, (-1)), 'unicode', u'\n        Set the line width in points\n\n        ACCEPTS: float value in points\n        ')
        
        # Assigning a Call to a Name (line 1006):
        
        # Assigning a Call to a Name (line 1006):
        
        # Call to float(...): (line 1006)
        # Processing the call arguments (line 1006)
        # Getting the type of 'w' (line 1006)
        w_73221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 18), 'w', False)
        # Processing the call keyword arguments (line 1006)
        kwargs_73222 = {}
        # Getting the type of 'float' (line 1006)
        float_73220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 12), 'float', False)
        # Calling float(args, kwargs) (line 1006)
        float_call_result_73223 = invoke(stypy.reporting.localization.Localization(__file__, 1006, 12), float_73220, *[w_73221], **kwargs_73222)
        
        # Assigning a type to the variable 'w' (line 1006)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1006, 8), 'w', float_call_result_73223)
        
        
        # Getting the type of 'self' (line 1008)
        self_73224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 11), 'self')
        # Obtaining the member '_linewidth' of a type (line 1008)
        _linewidth_73225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1008, 11), self_73224, '_linewidth')
        # Getting the type of 'w' (line 1008)
        w_73226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 30), 'w')
        # Applying the binary operator '!=' (line 1008)
        result_ne_73227 = python_operator(stypy.reporting.localization.Localization(__file__, 1008, 11), '!=', _linewidth_73225, w_73226)
        
        # Testing the type of an if condition (line 1008)
        if_condition_73228 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1008, 8), result_ne_73227)
        # Assigning a type to the variable 'if_condition_73228' (line 1008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 8), 'if_condition_73228', if_condition_73228)
        # SSA begins for if statement (line 1008)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1009):
        
        # Assigning a Name to a Attribute (line 1009):
        # Getting the type of 'True' (line 1009)
        True_73229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 25), 'True')
        # Getting the type of 'self' (line 1009)
        self_73230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 12), 'self')
        # Setting the type of the member 'stale' of a type (line 1009)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 12), self_73230, 'stale', True_73229)
        # SSA join for if statement (line 1008)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1010):
        
        # Assigning a Name to a Attribute (line 1010):
        # Getting the type of 'w' (line 1010)
        w_73231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 26), 'w')
        # Getting the type of 'self' (line 1010)
        self_73232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 8), 'self')
        # Setting the type of the member '_linewidth' of a type (line 1010)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1010, 8), self_73232, '_linewidth', w_73231)
        
        # Assigning a Call to a Tuple (line 1012):
        
        # Assigning a Call to a Name:
        
        # Call to _scale_dashes(...): (line 1012)
        # Processing the call arguments (line 1012)
        # Getting the type of 'self' (line 1013)
        self_73234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 12), 'self', False)
        # Obtaining the member '_us_dashOffset' of a type (line 1013)
        _us_dashOffset_73235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 12), self_73234, '_us_dashOffset')
        # Getting the type of 'self' (line 1013)
        self_73236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 33), 'self', False)
        # Obtaining the member '_us_dashSeq' of a type (line 1013)
        _us_dashSeq_73237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 33), self_73236, '_us_dashSeq')
        # Getting the type of 'self' (line 1013)
        self_73238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 51), 'self', False)
        # Obtaining the member '_linewidth' of a type (line 1013)
        _linewidth_73239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 51), self_73238, '_linewidth')
        # Processing the call keyword arguments (line 1012)
        kwargs_73240 = {}
        # Getting the type of '_scale_dashes' (line 1012)
        _scale_dashes_73233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 42), '_scale_dashes', False)
        # Calling _scale_dashes(args, kwargs) (line 1012)
        _scale_dashes_call_result_73241 = invoke(stypy.reporting.localization.Localization(__file__, 1012, 42), _scale_dashes_73233, *[_us_dashOffset_73235, _us_dashSeq_73237, _linewidth_73239], **kwargs_73240)
        
        # Assigning a type to the variable 'call_assignment_70632' (line 1012)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1012, 8), 'call_assignment_70632', _scale_dashes_call_result_73241)
        
        # Assigning a Call to a Name (line 1012):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_73244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1012, 8), 'int')
        # Processing the call keyword arguments
        kwargs_73245 = {}
        # Getting the type of 'call_assignment_70632' (line 1012)
        call_assignment_70632_73242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 8), 'call_assignment_70632', False)
        # Obtaining the member '__getitem__' of a type (line 1012)
        getitem___73243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1012, 8), call_assignment_70632_73242, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_73246 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___73243, *[int_73244], **kwargs_73245)
        
        # Assigning a type to the variable 'call_assignment_70633' (line 1012)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1012, 8), 'call_assignment_70633', getitem___call_result_73246)
        
        # Assigning a Name to a Attribute (line 1012):
        # Getting the type of 'call_assignment_70633' (line 1012)
        call_assignment_70633_73247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 8), 'call_assignment_70633')
        # Getting the type of 'self' (line 1012)
        self_73248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 8), 'self')
        # Setting the type of the member '_dashOffset' of a type (line 1012)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1012, 8), self_73248, '_dashOffset', call_assignment_70633_73247)
        
        # Assigning a Call to a Name (line 1012):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_73251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1012, 8), 'int')
        # Processing the call keyword arguments
        kwargs_73252 = {}
        # Getting the type of 'call_assignment_70632' (line 1012)
        call_assignment_70632_73249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 8), 'call_assignment_70632', False)
        # Obtaining the member '__getitem__' of a type (line 1012)
        getitem___73250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1012, 8), call_assignment_70632_73249, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_73253 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___73250, *[int_73251], **kwargs_73252)
        
        # Assigning a type to the variable 'call_assignment_70634' (line 1012)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1012, 8), 'call_assignment_70634', getitem___call_result_73253)
        
        # Assigning a Name to a Attribute (line 1012):
        # Getting the type of 'call_assignment_70634' (line 1012)
        call_assignment_70634_73254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 8), 'call_assignment_70634')
        # Getting the type of 'self' (line 1012)
        self_73255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 26), 'self')
        # Setting the type of the member '_dashSeq' of a type (line 1012)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1012, 26), self_73255, '_dashSeq', call_assignment_70634_73254)
        
        # ################# End of 'set_linewidth(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_linewidth' in the type store
        # Getting the type of 'stypy_return_type' (line 1000)
        stypy_return_type_73256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73256)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_linewidth'
        return stypy_return_type_73256


    @norecursion
    def _split_drawstyle_linestyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_split_drawstyle_linestyle'
        module_type_store = module_type_store.open_function_context('_split_drawstyle_linestyle', 1015, 4, False)
        # Assigning a type to the variable 'self' (line 1016)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1016, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D._split_drawstyle_linestyle.__dict__.__setitem__('stypy_localization', localization)
        Line2D._split_drawstyle_linestyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D._split_drawstyle_linestyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D._split_drawstyle_linestyle.__dict__.__setitem__('stypy_function_name', 'Line2D._split_drawstyle_linestyle')
        Line2D._split_drawstyle_linestyle.__dict__.__setitem__('stypy_param_names_list', ['ls'])
        Line2D._split_drawstyle_linestyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D._split_drawstyle_linestyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D._split_drawstyle_linestyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D._split_drawstyle_linestyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D._split_drawstyle_linestyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D._split_drawstyle_linestyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D._split_drawstyle_linestyle', ['ls'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_split_drawstyle_linestyle', localization, ['ls'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_split_drawstyle_linestyle(...)' code ##################

        unicode_73257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1034, (-1)), 'unicode', u"Split drawstyle from linestyle string\n\n        If `ls` is only a drawstyle default to returning a linestyle\n        of '-'.\n\n        Parameters\n        ----------\n        ls : str\n            The linestyle to be processed\n\n        Returns\n        -------\n        ret_ds : str or None\n            If the linestyle string does not contain a drawstyle prefix\n            return None, otherwise return it.\n\n        ls : str\n            The linestyle with the drawstyle (if any) stripped.\n        ")
        
        # Assigning a Name to a Name (line 1035):
        
        # Assigning a Name to a Name (line 1035):
        # Getting the type of 'None' (line 1035)
        None_73258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 17), 'None')
        # Assigning a type to the variable 'ret_ds' (line 1035)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1035, 8), 'ret_ds', None_73258)
        
        # Getting the type of 'self' (line 1036)
        self_73259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 18), 'self')
        # Obtaining the member 'drawStyleKeys' of a type (line 1036)
        drawStyleKeys_73260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1036, 18), self_73259, 'drawStyleKeys')
        # Testing the type of a for loop iterable (line 1036)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1036, 8), drawStyleKeys_73260)
        # Getting the type of the for loop variable (line 1036)
        for_loop_var_73261 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1036, 8), drawStyleKeys_73260)
        # Assigning a type to the variable 'ds' (line 1036)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1036, 8), 'ds', for_loop_var_73261)
        # SSA begins for a for statement (line 1036)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to startswith(...): (line 1037)
        # Processing the call arguments (line 1037)
        # Getting the type of 'ds' (line 1037)
        ds_73264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 29), 'ds', False)
        # Processing the call keyword arguments (line 1037)
        kwargs_73265 = {}
        # Getting the type of 'ls' (line 1037)
        ls_73262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 15), 'ls', False)
        # Obtaining the member 'startswith' of a type (line 1037)
        startswith_73263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 15), ls_73262, 'startswith')
        # Calling startswith(args, kwargs) (line 1037)
        startswith_call_result_73266 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 15), startswith_73263, *[ds_73264], **kwargs_73265)
        
        # Testing the type of an if condition (line 1037)
        if_condition_73267 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1037, 12), startswith_call_result_73266)
        # Assigning a type to the variable 'if_condition_73267' (line 1037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1037, 12), 'if_condition_73267', if_condition_73267)
        # SSA begins for if statement (line 1037)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1038):
        
        # Assigning a Name to a Name (line 1038):
        # Getting the type of 'ds' (line 1038)
        ds_73268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 25), 'ds')
        # Assigning a type to the variable 'ret_ds' (line 1038)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1038, 16), 'ret_ds', ds_73268)
        
        
        
        # Call to len(...): (line 1039)
        # Processing the call arguments (line 1039)
        # Getting the type of 'ls' (line 1039)
        ls_73270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 23), 'ls', False)
        # Processing the call keyword arguments (line 1039)
        kwargs_73271 = {}
        # Getting the type of 'len' (line 1039)
        len_73269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 19), 'len', False)
        # Calling len(args, kwargs) (line 1039)
        len_call_result_73272 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 19), len_73269, *[ls_73270], **kwargs_73271)
        
        
        # Call to len(...): (line 1039)
        # Processing the call arguments (line 1039)
        # Getting the type of 'ds' (line 1039)
        ds_73274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 33), 'ds', False)
        # Processing the call keyword arguments (line 1039)
        kwargs_73275 = {}
        # Getting the type of 'len' (line 1039)
        len_73273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 29), 'len', False)
        # Calling len(args, kwargs) (line 1039)
        len_call_result_73276 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 29), len_73273, *[ds_73274], **kwargs_73275)
        
        # Applying the binary operator '>' (line 1039)
        result_gt_73277 = python_operator(stypy.reporting.localization.Localization(__file__, 1039, 19), '>', len_call_result_73272, len_call_result_73276)
        
        # Testing the type of an if condition (line 1039)
        if_condition_73278 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1039, 16), result_gt_73277)
        # Assigning a type to the variable 'if_condition_73278' (line 1039)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1039, 16), 'if_condition_73278', if_condition_73278)
        # SSA begins for if statement (line 1039)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1040):
        
        # Assigning a Subscript to a Name (line 1040):
        
        # Obtaining the type of the subscript
        
        # Call to len(...): (line 1040)
        # Processing the call arguments (line 1040)
        # Getting the type of 'ds' (line 1040)
        ds_73280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 32), 'ds', False)
        # Processing the call keyword arguments (line 1040)
        kwargs_73281 = {}
        # Getting the type of 'len' (line 1040)
        len_73279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 28), 'len', False)
        # Calling len(args, kwargs) (line 1040)
        len_call_result_73282 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 28), len_73279, *[ds_73280], **kwargs_73281)
        
        slice_73283 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1040, 25), len_call_result_73282, None, None)
        # Getting the type of 'ls' (line 1040)
        ls_73284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 25), 'ls')
        # Obtaining the member '__getitem__' of a type (line 1040)
        getitem___73285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 25), ls_73284, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1040)
        subscript_call_result_73286 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 25), getitem___73285, slice_73283)
        
        # Assigning a type to the variable 'ls' (line 1040)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1040, 20), 'ls', subscript_call_result_73286)
        # SSA branch for the else part of an if statement (line 1039)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 1042):
        
        # Assigning a Str to a Name (line 1042):
        unicode_73287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 25), 'unicode', u'-')
        # Assigning a type to the variable 'ls' (line 1042)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1042, 20), 'ls', unicode_73287)
        # SSA join for if statement (line 1039)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1037)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1045)
        tuple_73288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1045)
        # Adding element type (line 1045)
        # Getting the type of 'ret_ds' (line 1045)
        ret_ds_73289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 15), 'ret_ds')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1045, 15), tuple_73288, ret_ds_73289)
        # Adding element type (line 1045)
        # Getting the type of 'ls' (line 1045)
        ls_73290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 23), 'ls')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1045, 15), tuple_73288, ls_73290)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1045)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1045, 8), 'stypy_return_type', tuple_73288)
        
        # ################# End of '_split_drawstyle_linestyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_split_drawstyle_linestyle' in the type store
        # Getting the type of 'stypy_return_type' (line 1015)
        stypy_return_type_73291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73291)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_split_drawstyle_linestyle'
        return stypy_return_type_73291


    @norecursion
    def set_linestyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_linestyle'
        module_type_store = module_type_store.open_function_context('set_linestyle', 1047, 4, False)
        # Assigning a type to the variable 'self' (line 1048)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1048, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_linestyle.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_linestyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_linestyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_linestyle.__dict__.__setitem__('stypy_function_name', 'Line2D.set_linestyle')
        Line2D.set_linestyle.__dict__.__setitem__('stypy_param_names_list', ['ls'])
        Line2D.set_linestyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_linestyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_linestyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_linestyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_linestyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_linestyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_linestyle', ['ls'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_linestyle', localization, ['ls'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_linestyle(...)' code ##################

        unicode_73292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, (-1)), 'unicode', u"\n        Set the linestyle of the line (also accepts drawstyles,\n        e.g., ``'steps--'``)\n\n\n        ===========================   =================\n        linestyle                     description\n        ===========================   =================\n        ``'-'`` or ``'solid'``        solid line\n        ``'--'`` or  ``'dashed'``     dashed line\n        ``'-.'`` or  ``'dashdot'``    dash-dotted line\n        ``':'`` or ``'dotted'``       dotted line\n        ``'None'``                    draw nothing\n        ``' '``                       draw nothing\n        ``''``                        draw nothing\n        ===========================   =================\n\n        'steps' is equivalent to 'steps-pre' and is maintained for\n        backward-compatibility.\n\n        Alternatively a dash tuple of the following form can be provided::\n\n            (offset, onoffseq),\n\n        where ``onoffseq`` is an even length tuple of on and off ink\n        in points.\n\n\n        ACCEPTS: ['solid' | 'dashed', 'dashdot', 'dotted' |\n                   (offset, on-off-dash-seq) |\n                   ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` |\n                   ``' '`` | ``''``]\n\n        .. seealso::\n\n            :meth:`set_drawstyle`\n               To set the drawing style (stepping) of the plot.\n\n        Parameters\n        ----------\n        ls : { ``'-'``,  ``'--'``, ``'-.'``, ``':'``} and more see description\n            The line style.\n        ")
        
        
        # Call to isinstance(...): (line 1091)
        # Processing the call arguments (line 1091)
        # Getting the type of 'ls' (line 1091)
        ls_73294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 22), 'ls', False)
        # Getting the type of 'six' (line 1091)
        six_73295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 26), 'six', False)
        # Obtaining the member 'string_types' of a type (line 1091)
        string_types_73296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 26), six_73295, 'string_types')
        # Processing the call keyword arguments (line 1091)
        kwargs_73297 = {}
        # Getting the type of 'isinstance' (line 1091)
        isinstance_73293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1091)
        isinstance_call_result_73298 = invoke(stypy.reporting.localization.Localization(__file__, 1091, 11), isinstance_73293, *[ls_73294, string_types_73296], **kwargs_73297)
        
        # Testing the type of an if condition (line 1091)
        if_condition_73299 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1091, 8), isinstance_call_result_73298)
        # Assigning a type to the variable 'if_condition_73299' (line 1091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'if_condition_73299', if_condition_73299)
        # SSA begins for if statement (line 1091)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 1092):
        
        # Assigning a Call to a Name:
        
        # Call to _split_drawstyle_linestyle(...): (line 1092)
        # Processing the call arguments (line 1092)
        # Getting the type of 'ls' (line 1092)
        ls_73302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 53), 'ls', False)
        # Processing the call keyword arguments (line 1092)
        kwargs_73303 = {}
        # Getting the type of 'self' (line 1092)
        self_73300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 21), 'self', False)
        # Obtaining the member '_split_drawstyle_linestyle' of a type (line 1092)
        _split_drawstyle_linestyle_73301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1092, 21), self_73300, '_split_drawstyle_linestyle')
        # Calling _split_drawstyle_linestyle(args, kwargs) (line 1092)
        _split_drawstyle_linestyle_call_result_73304 = invoke(stypy.reporting.localization.Localization(__file__, 1092, 21), _split_drawstyle_linestyle_73301, *[ls_73302], **kwargs_73303)
        
        # Assigning a type to the variable 'call_assignment_70635' (line 1092)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1092, 12), 'call_assignment_70635', _split_drawstyle_linestyle_call_result_73304)
        
        # Assigning a Call to a Name (line 1092):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_73307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1092, 12), 'int')
        # Processing the call keyword arguments
        kwargs_73308 = {}
        # Getting the type of 'call_assignment_70635' (line 1092)
        call_assignment_70635_73305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 12), 'call_assignment_70635', False)
        # Obtaining the member '__getitem__' of a type (line 1092)
        getitem___73306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1092, 12), call_assignment_70635_73305, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_73309 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___73306, *[int_73307], **kwargs_73308)
        
        # Assigning a type to the variable 'call_assignment_70636' (line 1092)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1092, 12), 'call_assignment_70636', getitem___call_result_73309)
        
        # Assigning a Name to a Name (line 1092):
        # Getting the type of 'call_assignment_70636' (line 1092)
        call_assignment_70636_73310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 12), 'call_assignment_70636')
        # Assigning a type to the variable 'ds' (line 1092)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1092, 12), 'ds', call_assignment_70636_73310)
        
        # Assigning a Call to a Name (line 1092):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_73313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1092, 12), 'int')
        # Processing the call keyword arguments
        kwargs_73314 = {}
        # Getting the type of 'call_assignment_70635' (line 1092)
        call_assignment_70635_73311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 12), 'call_assignment_70635', False)
        # Obtaining the member '__getitem__' of a type (line 1092)
        getitem___73312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1092, 12), call_assignment_70635_73311, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_73315 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___73312, *[int_73313], **kwargs_73314)
        
        # Assigning a type to the variable 'call_assignment_70637' (line 1092)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1092, 12), 'call_assignment_70637', getitem___call_result_73315)
        
        # Assigning a Name to a Name (line 1092):
        # Getting the type of 'call_assignment_70637' (line 1092)
        call_assignment_70637_73316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 12), 'call_assignment_70637')
        # Assigning a type to the variable 'ls' (line 1092)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1092, 16), 'ls', call_assignment_70637_73316)
        
        # Type idiom detected: calculating its left and rigth part (line 1093)
        # Getting the type of 'ds' (line 1093)
        ds_73317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 12), 'ds')
        # Getting the type of 'None' (line 1093)
        None_73318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 25), 'None')
        
        (may_be_73319, more_types_in_union_73320) = may_not_be_none(ds_73317, None_73318)

        if may_be_73319:

            if more_types_in_union_73320:
                # Runtime conditional SSA (line 1093)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_drawstyle(...): (line 1094)
            # Processing the call arguments (line 1094)
            # Getting the type of 'ds' (line 1094)
            ds_73323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 35), 'ds', False)
            # Processing the call keyword arguments (line 1094)
            kwargs_73324 = {}
            # Getting the type of 'self' (line 1094)
            self_73321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 16), 'self', False)
            # Obtaining the member 'set_drawstyle' of a type (line 1094)
            set_drawstyle_73322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 16), self_73321, 'set_drawstyle')
            # Calling set_drawstyle(args, kwargs) (line 1094)
            set_drawstyle_call_result_73325 = invoke(stypy.reporting.localization.Localization(__file__, 1094, 16), set_drawstyle_73322, *[ds_73323], **kwargs_73324)
            

            if more_types_in_union_73320:
                # SSA join for if statement (line 1093)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'ls' (line 1096)
        ls_73326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 15), 'ls')
        
        # Obtaining an instance of the builtin type 'list' (line 1096)
        list_73327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1096, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1096)
        # Adding element type (line 1096)
        unicode_73328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1096, 22), 'unicode', u' ')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1096, 21), list_73327, unicode_73328)
        # Adding element type (line 1096)
        unicode_73329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1096, 27), 'unicode', u'')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1096, 21), list_73327, unicode_73329)
        # Adding element type (line 1096)
        unicode_73330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1096, 31), 'unicode', u'none')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1096, 21), list_73327, unicode_73330)
        
        # Applying the binary operator 'in' (line 1096)
        result_contains_73331 = python_operator(stypy.reporting.localization.Localization(__file__, 1096, 15), 'in', ls_73326, list_73327)
        
        # Testing the type of an if condition (line 1096)
        if_condition_73332 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1096, 12), result_contains_73331)
        # Assigning a type to the variable 'if_condition_73332' (line 1096)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1096, 12), 'if_condition_73332', if_condition_73332)
        # SSA begins for if statement (line 1096)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1097):
        
        # Assigning a Str to a Name (line 1097):
        unicode_73333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1097, 21), 'unicode', u'None')
        # Assigning a type to the variable 'ls' (line 1097)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1097, 16), 'ls', unicode_73333)
        # SSA join for if statement (line 1096)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'ls' (line 1099)
        ls_73334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 15), 'ls')
        # Getting the type of 'self' (line 1099)
        self_73335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 25), 'self')
        # Obtaining the member '_lineStyles' of a type (line 1099)
        _lineStyles_73336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 25), self_73335, '_lineStyles')
        # Applying the binary operator 'notin' (line 1099)
        result_contains_73337 = python_operator(stypy.reporting.localization.Localization(__file__, 1099, 15), 'notin', ls_73334, _lineStyles_73336)
        
        # Testing the type of an if condition (line 1099)
        if_condition_73338 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1099, 12), result_contains_73337)
        # Assigning a type to the variable 'if_condition_73338' (line 1099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 12), 'if_condition_73338', if_condition_73338)
        # SSA begins for if statement (line 1099)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 1100)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Subscript to a Name (line 1101):
        
        # Assigning a Subscript to a Name (line 1101):
        
        # Obtaining the type of the subscript
        # Getting the type of 'ls' (line 1101)
        ls_73339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 37), 'ls')
        # Getting the type of 'ls_mapper_r' (line 1101)
        ls_mapper_r_73340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 25), 'ls_mapper_r')
        # Obtaining the member '__getitem__' of a type (line 1101)
        getitem___73341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1101, 25), ls_mapper_r_73340, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1101)
        subscript_call_result_73342 = invoke(stypy.reporting.localization.Localization(__file__, 1101, 25), getitem___73341, ls_73339)
        
        # Assigning a type to the variable 'ls' (line 1101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1101, 20), 'ls', subscript_call_result_73342)
        # SSA branch for the except part of a try statement (line 1100)
        # SSA branch for the except 'KeyError' branch of a try statement (line 1100)
        module_type_store.open_ssa_branch('except')
        
        # Call to ValueError(...): (line 1103)
        # Processing the call arguments (line 1103)
        
        # Call to format(...): (line 1103)
        # Processing the call arguments (line 1103)
        # Getting the type of 'ls' (line 1106)
        ls_73346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 62), 'ls', False)
        # Processing the call keyword arguments (line 1103)
        kwargs_73347 = {}
        unicode_73344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1103, 38), 'unicode', u'You passed in an invalid linestyle, `{0}`.  See docs of Line2D.set_linestyle for valid values.')
        # Obtaining the member 'format' of a type (line 1103)
        format_73345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 38), unicode_73344, 'format')
        # Calling format(args, kwargs) (line 1103)
        format_call_result_73348 = invoke(stypy.reporting.localization.Localization(__file__, 1103, 38), format_73345, *[ls_73346], **kwargs_73347)
        
        # Processing the call keyword arguments (line 1103)
        kwargs_73349 = {}
        # Getting the type of 'ValueError' (line 1103)
        ValueError_73343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 26), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1103)
        ValueError_call_result_73350 = invoke(stypy.reporting.localization.Localization(__file__, 1103, 26), ValueError_73343, *[format_call_result_73348], **kwargs_73349)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1103, 20), ValueError_call_result_73350, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 1100)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1099)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1107):
        
        # Assigning a Name to a Attribute (line 1107):
        # Getting the type of 'ls' (line 1107)
        ls_73351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 30), 'ls')
        # Getting the type of 'self' (line 1107)
        self_73352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 12), 'self')
        # Setting the type of the member '_linestyle' of a type (line 1107)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1107, 12), self_73352, '_linestyle', ls_73351)
        # SSA branch for the else part of an if statement (line 1091)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Attribute (line 1109):
        
        # Assigning a Str to a Attribute (line 1109):
        unicode_73353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1109, 30), 'unicode', u'--')
        # Getting the type of 'self' (line 1109)
        self_73354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 12), 'self')
        # Setting the type of the member '_linestyle' of a type (line 1109)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1109, 12), self_73354, '_linestyle', unicode_73353)
        # SSA join for if statement (line 1091)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1112):
        
        # Assigning a Call to a Name:
        
        # Call to _get_dash_pattern(...): (line 1112)
        # Processing the call arguments (line 1112)
        # Getting the type of 'ls' (line 1112)
        ls_73356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 66), 'ls', False)
        # Processing the call keyword arguments (line 1112)
        kwargs_73357 = {}
        # Getting the type of '_get_dash_pattern' (line 1112)
        _get_dash_pattern_73355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 48), '_get_dash_pattern', False)
        # Calling _get_dash_pattern(args, kwargs) (line 1112)
        _get_dash_pattern_call_result_73358 = invoke(stypy.reporting.localization.Localization(__file__, 1112, 48), _get_dash_pattern_73355, *[ls_73356], **kwargs_73357)
        
        # Assigning a type to the variable 'call_assignment_70638' (line 1112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1112, 8), 'call_assignment_70638', _get_dash_pattern_call_result_73358)
        
        # Assigning a Call to a Name (line 1112):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_73361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1112, 8), 'int')
        # Processing the call keyword arguments
        kwargs_73362 = {}
        # Getting the type of 'call_assignment_70638' (line 1112)
        call_assignment_70638_73359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 8), 'call_assignment_70638', False)
        # Obtaining the member '__getitem__' of a type (line 1112)
        getitem___73360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1112, 8), call_assignment_70638_73359, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_73363 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___73360, *[int_73361], **kwargs_73362)
        
        # Assigning a type to the variable 'call_assignment_70639' (line 1112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1112, 8), 'call_assignment_70639', getitem___call_result_73363)
        
        # Assigning a Name to a Attribute (line 1112):
        # Getting the type of 'call_assignment_70639' (line 1112)
        call_assignment_70639_73364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 8), 'call_assignment_70639')
        # Getting the type of 'self' (line 1112)
        self_73365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 8), 'self')
        # Setting the type of the member '_us_dashOffset' of a type (line 1112)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1112, 8), self_73365, '_us_dashOffset', call_assignment_70639_73364)
        
        # Assigning a Call to a Name (line 1112):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_73368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1112, 8), 'int')
        # Processing the call keyword arguments
        kwargs_73369 = {}
        # Getting the type of 'call_assignment_70638' (line 1112)
        call_assignment_70638_73366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 8), 'call_assignment_70638', False)
        # Obtaining the member '__getitem__' of a type (line 1112)
        getitem___73367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1112, 8), call_assignment_70638_73366, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_73370 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___73367, *[int_73368], **kwargs_73369)
        
        # Assigning a type to the variable 'call_assignment_70640' (line 1112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1112, 8), 'call_assignment_70640', getitem___call_result_73370)
        
        # Assigning a Name to a Attribute (line 1112):
        # Getting the type of 'call_assignment_70640' (line 1112)
        call_assignment_70640_73371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 8), 'call_assignment_70640')
        # Getting the type of 'self' (line 1112)
        self_73372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 29), 'self')
        # Setting the type of the member '_us_dashSeq' of a type (line 1112)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1112, 29), self_73372, '_us_dashSeq', call_assignment_70640_73371)
        
        # Assigning a Call to a Tuple (line 1114):
        
        # Assigning a Call to a Name:
        
        # Call to _scale_dashes(...): (line 1114)
        # Processing the call arguments (line 1114)
        # Getting the type of 'self' (line 1115)
        self_73374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 12), 'self', False)
        # Obtaining the member '_us_dashOffset' of a type (line 1115)
        _us_dashOffset_73375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 12), self_73374, '_us_dashOffset')
        # Getting the type of 'self' (line 1115)
        self_73376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 33), 'self', False)
        # Obtaining the member '_us_dashSeq' of a type (line 1115)
        _us_dashSeq_73377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 33), self_73376, '_us_dashSeq')
        # Getting the type of 'self' (line 1115)
        self_73378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 51), 'self', False)
        # Obtaining the member '_linewidth' of a type (line 1115)
        _linewidth_73379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 51), self_73378, '_linewidth')
        # Processing the call keyword arguments (line 1114)
        kwargs_73380 = {}
        # Getting the type of '_scale_dashes' (line 1114)
        _scale_dashes_73373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 42), '_scale_dashes', False)
        # Calling _scale_dashes(args, kwargs) (line 1114)
        _scale_dashes_call_result_73381 = invoke(stypy.reporting.localization.Localization(__file__, 1114, 42), _scale_dashes_73373, *[_us_dashOffset_73375, _us_dashSeq_73377, _linewidth_73379], **kwargs_73380)
        
        # Assigning a type to the variable 'call_assignment_70641' (line 1114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1114, 8), 'call_assignment_70641', _scale_dashes_call_result_73381)
        
        # Assigning a Call to a Name (line 1114):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_73384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1114, 8), 'int')
        # Processing the call keyword arguments
        kwargs_73385 = {}
        # Getting the type of 'call_assignment_70641' (line 1114)
        call_assignment_70641_73382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 8), 'call_assignment_70641', False)
        # Obtaining the member '__getitem__' of a type (line 1114)
        getitem___73383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 8), call_assignment_70641_73382, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_73386 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___73383, *[int_73384], **kwargs_73385)
        
        # Assigning a type to the variable 'call_assignment_70642' (line 1114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1114, 8), 'call_assignment_70642', getitem___call_result_73386)
        
        # Assigning a Name to a Attribute (line 1114):
        # Getting the type of 'call_assignment_70642' (line 1114)
        call_assignment_70642_73387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 8), 'call_assignment_70642')
        # Getting the type of 'self' (line 1114)
        self_73388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 8), 'self')
        # Setting the type of the member '_dashOffset' of a type (line 1114)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 8), self_73388, '_dashOffset', call_assignment_70642_73387)
        
        # Assigning a Call to a Name (line 1114):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_73391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1114, 8), 'int')
        # Processing the call keyword arguments
        kwargs_73392 = {}
        # Getting the type of 'call_assignment_70641' (line 1114)
        call_assignment_70641_73389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 8), 'call_assignment_70641', False)
        # Obtaining the member '__getitem__' of a type (line 1114)
        getitem___73390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 8), call_assignment_70641_73389, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_73393 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___73390, *[int_73391], **kwargs_73392)
        
        # Assigning a type to the variable 'call_assignment_70643' (line 1114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1114, 8), 'call_assignment_70643', getitem___call_result_73393)
        
        # Assigning a Name to a Attribute (line 1114):
        # Getting the type of 'call_assignment_70643' (line 1114)
        call_assignment_70643_73394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 8), 'call_assignment_70643')
        # Getting the type of 'self' (line 1114)
        self_73395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 26), 'self')
        # Setting the type of the member '_dashSeq' of a type (line 1114)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 26), self_73395, '_dashSeq', call_assignment_70643_73394)
        
        # ################# End of 'set_linestyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_linestyle' in the type store
        # Getting the type of 'stypy_return_type' (line 1047)
        stypy_return_type_73396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73396)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_linestyle'
        return stypy_return_type_73396


    @norecursion
    def set_marker(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_marker'
        module_type_store = module_type_store.open_function_context('set_marker', 1117, 4, False)
        # Assigning a type to the variable 'self' (line 1118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1118, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_marker.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_marker.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_marker.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_marker.__dict__.__setitem__('stypy_function_name', 'Line2D.set_marker')
        Line2D.set_marker.__dict__.__setitem__('stypy_param_names_list', ['marker'])
        Line2D.set_marker.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_marker.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_marker.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_marker.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_marker.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_marker.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_marker', ['marker'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_marker', localization, ['marker'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_marker(...)' code ##################

        unicode_73397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1131, (-1)), 'unicode', u'\n        Set the line marker\n\n        ACCEPTS: :mod:`A valid marker style <matplotlib.markers>`\n\n        Parameters\n        ----------\n\n        marker: marker style\n            See `~matplotlib.markers` for full description of possible\n            argument\n\n        ')
        
        # Call to set_marker(...): (line 1132)
        # Processing the call arguments (line 1132)
        # Getting the type of 'marker' (line 1132)
        marker_73401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 32), 'marker', False)
        # Processing the call keyword arguments (line 1132)
        kwargs_73402 = {}
        # Getting the type of 'self' (line 1132)
        self_73398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'self', False)
        # Obtaining the member '_marker' of a type (line 1132)
        _marker_73399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 8), self_73398, '_marker')
        # Obtaining the member 'set_marker' of a type (line 1132)
        set_marker_73400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 8), _marker_73399, 'set_marker')
        # Calling set_marker(args, kwargs) (line 1132)
        set_marker_call_result_73403 = invoke(stypy.reporting.localization.Localization(__file__, 1132, 8), set_marker_73400, *[marker_73401], **kwargs_73402)
        
        
        # Assigning a Name to a Attribute (line 1133):
        
        # Assigning a Name to a Attribute (line 1133):
        # Getting the type of 'True' (line 1133)
        True_73404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 21), 'True')
        # Getting the type of 'self' (line 1133)
        self_73405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1133)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 8), self_73405, 'stale', True_73404)
        
        # ################# End of 'set_marker(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_marker' in the type store
        # Getting the type of 'stypy_return_type' (line 1117)
        stypy_return_type_73406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73406)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_marker'
        return stypy_return_type_73406


    @norecursion
    def set_markeredgecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_markeredgecolor'
        module_type_store = module_type_store.open_function_context('set_markeredgecolor', 1135, 4, False)
        # Assigning a type to the variable 'self' (line 1136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1136, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_markeredgecolor.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_markeredgecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_markeredgecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_markeredgecolor.__dict__.__setitem__('stypy_function_name', 'Line2D.set_markeredgecolor')
        Line2D.set_markeredgecolor.__dict__.__setitem__('stypy_param_names_list', ['ec'])
        Line2D.set_markeredgecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_markeredgecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_markeredgecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_markeredgecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_markeredgecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_markeredgecolor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_markeredgecolor', ['ec'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_markeredgecolor', localization, ['ec'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_markeredgecolor(...)' code ##################

        unicode_73407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1140, (-1)), 'unicode', u'\n        Set the marker edge color\n\n        ACCEPTS: any matplotlib color\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1141)
        # Getting the type of 'ec' (line 1141)
        ec_73408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 11), 'ec')
        # Getting the type of 'None' (line 1141)
        None_73409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 17), 'None')
        
        (may_be_73410, more_types_in_union_73411) = may_be_none(ec_73408, None_73409)

        if may_be_73410:

            if more_types_in_union_73411:
                # Runtime conditional SSA (line 1141)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Name (line 1142):
            
            # Assigning a Str to a Name (line 1142):
            unicode_73412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1142, 17), 'unicode', u'auto')
            # Assigning a type to the variable 'ec' (line 1142)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1142, 12), 'ec', unicode_73412)

            if more_types_in_union_73411:
                # SSA join for if statement (line 1141)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1143)
        self_73413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 11), 'self')
        # Obtaining the member '_markeredgecolor' of a type (line 1143)
        _markeredgecolor_73414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1143, 11), self_73413, '_markeredgecolor')
        # Getting the type of 'None' (line 1143)
        None_73415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 36), 'None')
        # Applying the binary operator 'is' (line 1143)
        result_is__73416 = python_operator(stypy.reporting.localization.Localization(__file__, 1143, 11), 'is', _markeredgecolor_73414, None_73415)
        
        
        # Call to any(...): (line 1144)
        # Processing the call arguments (line 1144)
        
        # Getting the type of 'self' (line 1144)
        self_73419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 18), 'self', False)
        # Obtaining the member '_markeredgecolor' of a type (line 1144)
        _markeredgecolor_73420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 18), self_73419, '_markeredgecolor')
        # Getting the type of 'ec' (line 1144)
        ec_73421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 43), 'ec', False)
        # Applying the binary operator '!=' (line 1144)
        result_ne_73422 = python_operator(stypy.reporting.localization.Localization(__file__, 1144, 18), '!=', _markeredgecolor_73420, ec_73421)
        
        # Processing the call keyword arguments (line 1144)
        kwargs_73423 = {}
        # Getting the type of 'np' (line 1144)
        np_73417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 11), 'np', False)
        # Obtaining the member 'any' of a type (line 1144)
        any_73418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 11), np_73417, 'any')
        # Calling any(args, kwargs) (line 1144)
        any_call_result_73424 = invoke(stypy.reporting.localization.Localization(__file__, 1144, 11), any_73418, *[result_ne_73422], **kwargs_73423)
        
        # Applying the binary operator 'or' (line 1143)
        result_or_keyword_73425 = python_operator(stypy.reporting.localization.Localization(__file__, 1143, 11), 'or', result_is__73416, any_call_result_73424)
        
        # Testing the type of an if condition (line 1143)
        if_condition_73426 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1143, 8), result_or_keyword_73425)
        # Assigning a type to the variable 'if_condition_73426' (line 1143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1143, 8), 'if_condition_73426', if_condition_73426)
        # SSA begins for if statement (line 1143)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1145):
        
        # Assigning a Name to a Attribute (line 1145):
        # Getting the type of 'True' (line 1145)
        True_73427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 25), 'True')
        # Getting the type of 'self' (line 1145)
        self_73428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 12), 'self')
        # Setting the type of the member 'stale' of a type (line 1145)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 12), self_73428, 'stale', True_73427)
        # SSA join for if statement (line 1143)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1146):
        
        # Assigning a Name to a Attribute (line 1146):
        # Getting the type of 'ec' (line 1146)
        ec_73429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 32), 'ec')
        # Getting the type of 'self' (line 1146)
        self_73430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 8), 'self')
        # Setting the type of the member '_markeredgecolor' of a type (line 1146)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1146, 8), self_73430, '_markeredgecolor', ec_73429)
        
        # ################# End of 'set_markeredgecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_markeredgecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 1135)
        stypy_return_type_73431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73431)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_markeredgecolor'
        return stypy_return_type_73431


    @norecursion
    def set_markeredgewidth(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_markeredgewidth'
        module_type_store = module_type_store.open_function_context('set_markeredgewidth', 1148, 4, False)
        # Assigning a type to the variable 'self' (line 1149)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1149, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_markeredgewidth.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_markeredgewidth.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_markeredgewidth.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_markeredgewidth.__dict__.__setitem__('stypy_function_name', 'Line2D.set_markeredgewidth')
        Line2D.set_markeredgewidth.__dict__.__setitem__('stypy_param_names_list', ['ew'])
        Line2D.set_markeredgewidth.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_markeredgewidth.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_markeredgewidth.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_markeredgewidth.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_markeredgewidth.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_markeredgewidth.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_markeredgewidth', ['ew'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_markeredgewidth', localization, ['ew'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_markeredgewidth(...)' code ##################

        unicode_73432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1153, (-1)), 'unicode', u'\n        Set the marker edge width in points\n\n        ACCEPTS: float value in points\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1154)
        # Getting the type of 'ew' (line 1154)
        ew_73433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 11), 'ew')
        # Getting the type of 'None' (line 1154)
        None_73434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 17), 'None')
        
        (may_be_73435, more_types_in_union_73436) = may_be_none(ew_73433, None_73434)

        if may_be_73435:

            if more_types_in_union_73436:
                # Runtime conditional SSA (line 1154)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 1155):
            
            # Assigning a Subscript to a Name (line 1155):
            
            # Obtaining the type of the subscript
            unicode_73437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1155, 26), 'unicode', u'lines.markeredgewidth')
            # Getting the type of 'rcParams' (line 1155)
            rcParams_73438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 17), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 1155)
            getitem___73439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1155, 17), rcParams_73438, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1155)
            subscript_call_result_73440 = invoke(stypy.reporting.localization.Localization(__file__, 1155, 17), getitem___73439, unicode_73437)
            
            # Assigning a type to the variable 'ew' (line 1155)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 12), 'ew', subscript_call_result_73440)

            if more_types_in_union_73436:
                # SSA join for if statement (line 1154)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'self' (line 1156)
        self_73441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 11), 'self')
        # Obtaining the member '_markeredgewidth' of a type (line 1156)
        _markeredgewidth_73442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1156, 11), self_73441, '_markeredgewidth')
        # Getting the type of 'ew' (line 1156)
        ew_73443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 36), 'ew')
        # Applying the binary operator '!=' (line 1156)
        result_ne_73444 = python_operator(stypy.reporting.localization.Localization(__file__, 1156, 11), '!=', _markeredgewidth_73442, ew_73443)
        
        # Testing the type of an if condition (line 1156)
        if_condition_73445 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1156, 8), result_ne_73444)
        # Assigning a type to the variable 'if_condition_73445' (line 1156)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1156, 8), 'if_condition_73445', if_condition_73445)
        # SSA begins for if statement (line 1156)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1157):
        
        # Assigning a Name to a Attribute (line 1157):
        # Getting the type of 'True' (line 1157)
        True_73446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 25), 'True')
        # Getting the type of 'self' (line 1157)
        self_73447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 12), 'self')
        # Setting the type of the member 'stale' of a type (line 1157)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1157, 12), self_73447, 'stale', True_73446)
        # SSA join for if statement (line 1156)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1158):
        
        # Assigning a Name to a Attribute (line 1158):
        # Getting the type of 'ew' (line 1158)
        ew_73448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 32), 'ew')
        # Getting the type of 'self' (line 1158)
        self_73449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 8), 'self')
        # Setting the type of the member '_markeredgewidth' of a type (line 1158)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1158, 8), self_73449, '_markeredgewidth', ew_73448)
        
        # ################# End of 'set_markeredgewidth(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_markeredgewidth' in the type store
        # Getting the type of 'stypy_return_type' (line 1148)
        stypy_return_type_73450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73450)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_markeredgewidth'
        return stypy_return_type_73450


    @norecursion
    def set_markerfacecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_markerfacecolor'
        module_type_store = module_type_store.open_function_context('set_markerfacecolor', 1160, 4, False)
        # Assigning a type to the variable 'self' (line 1161)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1161, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_markerfacecolor.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_markerfacecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_markerfacecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_markerfacecolor.__dict__.__setitem__('stypy_function_name', 'Line2D.set_markerfacecolor')
        Line2D.set_markerfacecolor.__dict__.__setitem__('stypy_param_names_list', ['fc'])
        Line2D.set_markerfacecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_markerfacecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_markerfacecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_markerfacecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_markerfacecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_markerfacecolor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_markerfacecolor', ['fc'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_markerfacecolor', localization, ['fc'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_markerfacecolor(...)' code ##################

        unicode_73451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1165, (-1)), 'unicode', u'\n        Set the marker face color.\n\n        ACCEPTS: any matplotlib color\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1166)
        # Getting the type of 'fc' (line 1166)
        fc_73452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 11), 'fc')
        # Getting the type of 'None' (line 1166)
        None_73453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 17), 'None')
        
        (may_be_73454, more_types_in_union_73455) = may_be_none(fc_73452, None_73453)

        if may_be_73454:

            if more_types_in_union_73455:
                # Runtime conditional SSA (line 1166)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Name (line 1167):
            
            # Assigning a Str to a Name (line 1167):
            unicode_73456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1167, 17), 'unicode', u'auto')
            # Assigning a type to the variable 'fc' (line 1167)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1167, 12), 'fc', unicode_73456)

            if more_types_in_union_73455:
                # SSA join for if statement (line 1166)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Call to any(...): (line 1168)
        # Processing the call arguments (line 1168)
        
        # Getting the type of 'self' (line 1168)
        self_73459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 18), 'self', False)
        # Obtaining the member '_markerfacecolor' of a type (line 1168)
        _markerfacecolor_73460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1168, 18), self_73459, '_markerfacecolor')
        # Getting the type of 'fc' (line 1168)
        fc_73461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 43), 'fc', False)
        # Applying the binary operator '!=' (line 1168)
        result_ne_73462 = python_operator(stypy.reporting.localization.Localization(__file__, 1168, 18), '!=', _markerfacecolor_73460, fc_73461)
        
        # Processing the call keyword arguments (line 1168)
        kwargs_73463 = {}
        # Getting the type of 'np' (line 1168)
        np_73457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 11), 'np', False)
        # Obtaining the member 'any' of a type (line 1168)
        any_73458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1168, 11), np_73457, 'any')
        # Calling any(args, kwargs) (line 1168)
        any_call_result_73464 = invoke(stypy.reporting.localization.Localization(__file__, 1168, 11), any_73458, *[result_ne_73462], **kwargs_73463)
        
        # Testing the type of an if condition (line 1168)
        if_condition_73465 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1168, 8), any_call_result_73464)
        # Assigning a type to the variable 'if_condition_73465' (line 1168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1168, 8), 'if_condition_73465', if_condition_73465)
        # SSA begins for if statement (line 1168)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1169):
        
        # Assigning a Name to a Attribute (line 1169):
        # Getting the type of 'True' (line 1169)
        True_73466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 25), 'True')
        # Getting the type of 'self' (line 1169)
        self_73467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 12), 'self')
        # Setting the type of the member 'stale' of a type (line 1169)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1169, 12), self_73467, 'stale', True_73466)
        # SSA join for if statement (line 1168)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1170):
        
        # Assigning a Name to a Attribute (line 1170):
        # Getting the type of 'fc' (line 1170)
        fc_73468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 32), 'fc')
        # Getting the type of 'self' (line 1170)
        self_73469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 8), 'self')
        # Setting the type of the member '_markerfacecolor' of a type (line 1170)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1170, 8), self_73469, '_markerfacecolor', fc_73468)
        
        # ################# End of 'set_markerfacecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_markerfacecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 1160)
        stypy_return_type_73470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73470)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_markerfacecolor'
        return stypy_return_type_73470


    @norecursion
    def set_markerfacecoloralt(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_markerfacecoloralt'
        module_type_store = module_type_store.open_function_context('set_markerfacecoloralt', 1172, 4, False)
        # Assigning a type to the variable 'self' (line 1173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1173, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_markerfacecoloralt.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_markerfacecoloralt.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_markerfacecoloralt.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_markerfacecoloralt.__dict__.__setitem__('stypy_function_name', 'Line2D.set_markerfacecoloralt')
        Line2D.set_markerfacecoloralt.__dict__.__setitem__('stypy_param_names_list', ['fc'])
        Line2D.set_markerfacecoloralt.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_markerfacecoloralt.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_markerfacecoloralt.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_markerfacecoloralt.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_markerfacecoloralt.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_markerfacecoloralt.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_markerfacecoloralt', ['fc'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_markerfacecoloralt', localization, ['fc'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_markerfacecoloralt(...)' code ##################

        unicode_73471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1177, (-1)), 'unicode', u'\n        Set the alternate marker face color.\n\n        ACCEPTS: any matplotlib color\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1178)
        # Getting the type of 'fc' (line 1178)
        fc_73472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 11), 'fc')
        # Getting the type of 'None' (line 1178)
        None_73473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 17), 'None')
        
        (may_be_73474, more_types_in_union_73475) = may_be_none(fc_73472, None_73473)

        if may_be_73474:

            if more_types_in_union_73475:
                # Runtime conditional SSA (line 1178)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Name (line 1179):
            
            # Assigning a Str to a Name (line 1179):
            unicode_73476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1179, 17), 'unicode', u'auto')
            # Assigning a type to the variable 'fc' (line 1179)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 12), 'fc', unicode_73476)

            if more_types_in_union_73475:
                # SSA join for if statement (line 1178)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Call to any(...): (line 1180)
        # Processing the call arguments (line 1180)
        
        # Getting the type of 'self' (line 1180)
        self_73479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 18), 'self', False)
        # Obtaining the member '_markerfacecoloralt' of a type (line 1180)
        _markerfacecoloralt_73480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1180, 18), self_73479, '_markerfacecoloralt')
        # Getting the type of 'fc' (line 1180)
        fc_73481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 46), 'fc', False)
        # Applying the binary operator '!=' (line 1180)
        result_ne_73482 = python_operator(stypy.reporting.localization.Localization(__file__, 1180, 18), '!=', _markerfacecoloralt_73480, fc_73481)
        
        # Processing the call keyword arguments (line 1180)
        kwargs_73483 = {}
        # Getting the type of 'np' (line 1180)
        np_73477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 11), 'np', False)
        # Obtaining the member 'any' of a type (line 1180)
        any_73478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1180, 11), np_73477, 'any')
        # Calling any(args, kwargs) (line 1180)
        any_call_result_73484 = invoke(stypy.reporting.localization.Localization(__file__, 1180, 11), any_73478, *[result_ne_73482], **kwargs_73483)
        
        # Testing the type of an if condition (line 1180)
        if_condition_73485 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1180, 8), any_call_result_73484)
        # Assigning a type to the variable 'if_condition_73485' (line 1180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1180, 8), 'if_condition_73485', if_condition_73485)
        # SSA begins for if statement (line 1180)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1181):
        
        # Assigning a Name to a Attribute (line 1181):
        # Getting the type of 'True' (line 1181)
        True_73486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 25), 'True')
        # Getting the type of 'self' (line 1181)
        self_73487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 12), 'self')
        # Setting the type of the member 'stale' of a type (line 1181)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1181, 12), self_73487, 'stale', True_73486)
        # SSA join for if statement (line 1180)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1182):
        
        # Assigning a Name to a Attribute (line 1182):
        # Getting the type of 'fc' (line 1182)
        fc_73488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 35), 'fc')
        # Getting the type of 'self' (line 1182)
        self_73489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'self')
        # Setting the type of the member '_markerfacecoloralt' of a type (line 1182)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1182, 8), self_73489, '_markerfacecoloralt', fc_73488)
        
        # ################# End of 'set_markerfacecoloralt(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_markerfacecoloralt' in the type store
        # Getting the type of 'stypy_return_type' (line 1172)
        stypy_return_type_73490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73490)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_markerfacecoloralt'
        return stypy_return_type_73490


    @norecursion
    def set_markersize(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_markersize'
        module_type_store = module_type_store.open_function_context('set_markersize', 1184, 4, False)
        # Assigning a type to the variable 'self' (line 1185)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1185, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_markersize.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_markersize.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_markersize.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_markersize.__dict__.__setitem__('stypy_function_name', 'Line2D.set_markersize')
        Line2D.set_markersize.__dict__.__setitem__('stypy_param_names_list', ['sz'])
        Line2D.set_markersize.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_markersize.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_markersize.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_markersize.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_markersize.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_markersize.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_markersize', ['sz'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_markersize', localization, ['sz'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_markersize(...)' code ##################

        unicode_73491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1189, (-1)), 'unicode', u'\n        Set the marker size in points\n\n        ACCEPTS: float\n        ')
        
        # Assigning a Call to a Name (line 1190):
        
        # Assigning a Call to a Name (line 1190):
        
        # Call to float(...): (line 1190)
        # Processing the call arguments (line 1190)
        # Getting the type of 'sz' (line 1190)
        sz_73493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 19), 'sz', False)
        # Processing the call keyword arguments (line 1190)
        kwargs_73494 = {}
        # Getting the type of 'float' (line 1190)
        float_73492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 13), 'float', False)
        # Calling float(args, kwargs) (line 1190)
        float_call_result_73495 = invoke(stypy.reporting.localization.Localization(__file__, 1190, 13), float_73492, *[sz_73493], **kwargs_73494)
        
        # Assigning a type to the variable 'sz' (line 1190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1190, 8), 'sz', float_call_result_73495)
        
        
        # Getting the type of 'self' (line 1191)
        self_73496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 11), 'self')
        # Obtaining the member '_markersize' of a type (line 1191)
        _markersize_73497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 11), self_73496, '_markersize')
        # Getting the type of 'sz' (line 1191)
        sz_73498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 31), 'sz')
        # Applying the binary operator '!=' (line 1191)
        result_ne_73499 = python_operator(stypy.reporting.localization.Localization(__file__, 1191, 11), '!=', _markersize_73497, sz_73498)
        
        # Testing the type of an if condition (line 1191)
        if_condition_73500 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1191, 8), result_ne_73499)
        # Assigning a type to the variable 'if_condition_73500' (line 1191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 8), 'if_condition_73500', if_condition_73500)
        # SSA begins for if statement (line 1191)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1192):
        
        # Assigning a Name to a Attribute (line 1192):
        # Getting the type of 'True' (line 1192)
        True_73501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 25), 'True')
        # Getting the type of 'self' (line 1192)
        self_73502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 12), 'self')
        # Setting the type of the member 'stale' of a type (line 1192)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1192, 12), self_73502, 'stale', True_73501)
        # SSA join for if statement (line 1191)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1193):
        
        # Assigning a Name to a Attribute (line 1193):
        # Getting the type of 'sz' (line 1193)
        sz_73503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 27), 'sz')
        # Getting the type of 'self' (line 1193)
        self_73504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 8), 'self')
        # Setting the type of the member '_markersize' of a type (line 1193)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1193, 8), self_73504, '_markersize', sz_73503)
        
        # ################# End of 'set_markersize(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_markersize' in the type store
        # Getting the type of 'stypy_return_type' (line 1184)
        stypy_return_type_73505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73505)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_markersize'
        return stypy_return_type_73505


    @norecursion
    def set_xdata(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_xdata'
        module_type_store = module_type_store.open_function_context('set_xdata', 1195, 4, False)
        # Assigning a type to the variable 'self' (line 1196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1196, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_xdata.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_xdata.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_xdata.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_xdata.__dict__.__setitem__('stypy_function_name', 'Line2D.set_xdata')
        Line2D.set_xdata.__dict__.__setitem__('stypy_param_names_list', ['x'])
        Line2D.set_xdata.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_xdata.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_xdata.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_xdata.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_xdata.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_xdata.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_xdata', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_xdata', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_xdata(...)' code ##################

        unicode_73506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1200, (-1)), 'unicode', u'\n        Set the data np.array for x\n\n        ACCEPTS: 1D array\n        ')
        
        # Assigning a Name to a Attribute (line 1201):
        
        # Assigning a Name to a Attribute (line 1201):
        # Getting the type of 'x' (line 1201)
        x_73507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 22), 'x')
        # Getting the type of 'self' (line 1201)
        self_73508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 8), 'self')
        # Setting the type of the member '_xorig' of a type (line 1201)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 8), self_73508, '_xorig', x_73507)
        
        # Assigning a Name to a Attribute (line 1202):
        
        # Assigning a Name to a Attribute (line 1202):
        # Getting the type of 'True' (line 1202)
        True_73509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 25), 'True')
        # Getting the type of 'self' (line 1202)
        self_73510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'self')
        # Setting the type of the member '_invalidx' of a type (line 1202)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 8), self_73510, '_invalidx', True_73509)
        
        # Assigning a Name to a Attribute (line 1203):
        
        # Assigning a Name to a Attribute (line 1203):
        # Getting the type of 'True' (line 1203)
        True_73511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 21), 'True')
        # Getting the type of 'self' (line 1203)
        self_73512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1203)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1203, 8), self_73512, 'stale', True_73511)
        
        # ################# End of 'set_xdata(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_xdata' in the type store
        # Getting the type of 'stypy_return_type' (line 1195)
        stypy_return_type_73513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73513)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_xdata'
        return stypy_return_type_73513


    @norecursion
    def set_ydata(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_ydata'
        module_type_store = module_type_store.open_function_context('set_ydata', 1205, 4, False)
        # Assigning a type to the variable 'self' (line 1206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1206, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_ydata.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_ydata.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_ydata.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_ydata.__dict__.__setitem__('stypy_function_name', 'Line2D.set_ydata')
        Line2D.set_ydata.__dict__.__setitem__('stypy_param_names_list', ['y'])
        Line2D.set_ydata.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_ydata.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_ydata.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_ydata.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_ydata.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_ydata.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_ydata', ['y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_ydata', localization, ['y'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_ydata(...)' code ##################

        unicode_73514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1210, (-1)), 'unicode', u'\n        Set the data np.array for y\n\n        ACCEPTS: 1D array\n        ')
        
        # Assigning a Name to a Attribute (line 1211):
        
        # Assigning a Name to a Attribute (line 1211):
        # Getting the type of 'y' (line 1211)
        y_73515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 22), 'y')
        # Getting the type of 'self' (line 1211)
        self_73516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 8), 'self')
        # Setting the type of the member '_yorig' of a type (line 1211)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1211, 8), self_73516, '_yorig', y_73515)
        
        # Assigning a Name to a Attribute (line 1212):
        
        # Assigning a Name to a Attribute (line 1212):
        # Getting the type of 'True' (line 1212)
        True_73517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 25), 'True')
        # Getting the type of 'self' (line 1212)
        self_73518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 8), 'self')
        # Setting the type of the member '_invalidy' of a type (line 1212)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1212, 8), self_73518, '_invalidy', True_73517)
        
        # Assigning a Name to a Attribute (line 1213):
        
        # Assigning a Name to a Attribute (line 1213):
        # Getting the type of 'True' (line 1213)
        True_73519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 21), 'True')
        # Getting the type of 'self' (line 1213)
        self_73520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1213)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1213, 8), self_73520, 'stale', True_73519)
        
        # ################# End of 'set_ydata(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_ydata' in the type store
        # Getting the type of 'stypy_return_type' (line 1205)
        stypy_return_type_73521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73521)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_ydata'
        return stypy_return_type_73521


    @norecursion
    def set_dashes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_dashes'
        module_type_store = module_type_store.open_function_context('set_dashes', 1215, 4, False)
        # Assigning a type to the variable 'self' (line 1216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1216, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_dashes.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_dashes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_dashes.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_dashes.__dict__.__setitem__('stypy_function_name', 'Line2D.set_dashes')
        Line2D.set_dashes.__dict__.__setitem__('stypy_param_names_list', ['seq'])
        Line2D.set_dashes.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_dashes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_dashes.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_dashes.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_dashes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_dashes.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_dashes', ['seq'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_dashes', localization, ['seq'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_dashes(...)' code ##################

        unicode_73522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1222, (-1)), 'unicode', u'\n        Set the dash sequence, sequence of dashes with on off ink in\n        points.  If seq is empty or if seq = (None, None), the\n        linestyle will be set to solid.\n\n        ACCEPTS: sequence of on/off ink in points\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'seq' (line 1223)
        seq_73523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 11), 'seq')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1223)
        tuple_73524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1223, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1223)
        # Adding element type (line 1223)
        # Getting the type of 'None' (line 1223)
        None_73525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 19), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1223, 19), tuple_73524, None_73525)
        # Adding element type (line 1223)
        # Getting the type of 'None' (line 1223)
        None_73526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 25), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1223, 19), tuple_73524, None_73526)
        
        # Applying the binary operator '==' (line 1223)
        result_eq_73527 = python_operator(stypy.reporting.localization.Localization(__file__, 1223, 11), '==', seq_73523, tuple_73524)
        
        
        
        # Call to len(...): (line 1223)
        # Processing the call arguments (line 1223)
        # Getting the type of 'seq' (line 1223)
        seq_73529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 38), 'seq', False)
        # Processing the call keyword arguments (line 1223)
        kwargs_73530 = {}
        # Getting the type of 'len' (line 1223)
        len_73528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 34), 'len', False)
        # Calling len(args, kwargs) (line 1223)
        len_call_result_73531 = invoke(stypy.reporting.localization.Localization(__file__, 1223, 34), len_73528, *[seq_73529], **kwargs_73530)
        
        int_73532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1223, 46), 'int')
        # Applying the binary operator '==' (line 1223)
        result_eq_73533 = python_operator(stypy.reporting.localization.Localization(__file__, 1223, 34), '==', len_call_result_73531, int_73532)
        
        # Applying the binary operator 'or' (line 1223)
        result_or_keyword_73534 = python_operator(stypy.reporting.localization.Localization(__file__, 1223, 11), 'or', result_eq_73527, result_eq_73533)
        
        # Testing the type of an if condition (line 1223)
        if_condition_73535 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1223, 8), result_or_keyword_73534)
        # Assigning a type to the variable 'if_condition_73535' (line 1223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 8), 'if_condition_73535', if_condition_73535)
        # SSA begins for if statement (line 1223)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_linestyle(...): (line 1224)
        # Processing the call arguments (line 1224)
        unicode_73538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1224, 31), 'unicode', u'-')
        # Processing the call keyword arguments (line 1224)
        kwargs_73539 = {}
        # Getting the type of 'self' (line 1224)
        self_73536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 12), 'self', False)
        # Obtaining the member 'set_linestyle' of a type (line 1224)
        set_linestyle_73537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 12), self_73536, 'set_linestyle')
        # Calling set_linestyle(args, kwargs) (line 1224)
        set_linestyle_call_result_73540 = invoke(stypy.reporting.localization.Localization(__file__, 1224, 12), set_linestyle_73537, *[unicode_73538], **kwargs_73539)
        
        # SSA branch for the else part of an if statement (line 1223)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_linestyle(...): (line 1226)
        # Processing the call arguments (line 1226)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1226)
        tuple_73543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1226, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1226)
        # Adding element type (line 1226)
        int_73544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1226, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1226, 32), tuple_73543, int_73544)
        # Adding element type (line 1226)
        # Getting the type of 'seq' (line 1226)
        seq_73545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 35), 'seq', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1226, 32), tuple_73543, seq_73545)
        
        # Processing the call keyword arguments (line 1226)
        kwargs_73546 = {}
        # Getting the type of 'self' (line 1226)
        self_73541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 12), 'self', False)
        # Obtaining the member 'set_linestyle' of a type (line 1226)
        set_linestyle_73542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 12), self_73541, 'set_linestyle')
        # Calling set_linestyle(args, kwargs) (line 1226)
        set_linestyle_call_result_73547 = invoke(stypy.reporting.localization.Localization(__file__, 1226, 12), set_linestyle_73542, *[tuple_73543], **kwargs_73546)
        
        # SSA join for if statement (line 1223)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_dashes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_dashes' in the type store
        # Getting the type of 'stypy_return_type' (line 1215)
        stypy_return_type_73548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73548)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_dashes'
        return stypy_return_type_73548


    @norecursion
    def update_from(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_from'
        module_type_store = module_type_store.open_function_context('update_from', 1228, 4, False)
        # Assigning a type to the variable 'self' (line 1229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.update_from.__dict__.__setitem__('stypy_localization', localization)
        Line2D.update_from.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.update_from.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.update_from.__dict__.__setitem__('stypy_function_name', 'Line2D.update_from')
        Line2D.update_from.__dict__.__setitem__('stypy_param_names_list', ['other'])
        Line2D.update_from.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.update_from.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.update_from.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.update_from.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.update_from.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.update_from.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.update_from', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_from', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_from(...)' code ##################

        unicode_73549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1229, 8), 'unicode', u'copy properties from other to self')
        
        # Call to update_from(...): (line 1230)
        # Processing the call arguments (line 1230)
        # Getting the type of 'self' (line 1230)
        self_73552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 27), 'self', False)
        # Getting the type of 'other' (line 1230)
        other_73553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 33), 'other', False)
        # Processing the call keyword arguments (line 1230)
        kwargs_73554 = {}
        # Getting the type of 'Artist' (line 1230)
        Artist_73550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 8), 'Artist', False)
        # Obtaining the member 'update_from' of a type (line 1230)
        update_from_73551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1230, 8), Artist_73550, 'update_from')
        # Calling update_from(args, kwargs) (line 1230)
        update_from_call_result_73555 = invoke(stypy.reporting.localization.Localization(__file__, 1230, 8), update_from_73551, *[self_73552, other_73553], **kwargs_73554)
        
        
        # Assigning a Attribute to a Attribute (line 1231):
        
        # Assigning a Attribute to a Attribute (line 1231):
        # Getting the type of 'other' (line 1231)
        other_73556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 26), 'other')
        # Obtaining the member '_linestyle' of a type (line 1231)
        _linestyle_73557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1231, 26), other_73556, '_linestyle')
        # Getting the type of 'self' (line 1231)
        self_73558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 8), 'self')
        # Setting the type of the member '_linestyle' of a type (line 1231)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1231, 8), self_73558, '_linestyle', _linestyle_73557)
        
        # Assigning a Attribute to a Attribute (line 1232):
        
        # Assigning a Attribute to a Attribute (line 1232):
        # Getting the type of 'other' (line 1232)
        other_73559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 26), 'other')
        # Obtaining the member '_linewidth' of a type (line 1232)
        _linewidth_73560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1232, 26), other_73559, '_linewidth')
        # Getting the type of 'self' (line 1232)
        self_73561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 8), 'self')
        # Setting the type of the member '_linewidth' of a type (line 1232)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1232, 8), self_73561, '_linewidth', _linewidth_73560)
        
        # Assigning a Attribute to a Attribute (line 1233):
        
        # Assigning a Attribute to a Attribute (line 1233):
        # Getting the type of 'other' (line 1233)
        other_73562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 22), 'other')
        # Obtaining the member '_color' of a type (line 1233)
        _color_73563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1233, 22), other_73562, '_color')
        # Getting the type of 'self' (line 1233)
        self_73564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 8), 'self')
        # Setting the type of the member '_color' of a type (line 1233)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1233, 8), self_73564, '_color', _color_73563)
        
        # Assigning a Attribute to a Attribute (line 1234):
        
        # Assigning a Attribute to a Attribute (line 1234):
        # Getting the type of 'other' (line 1234)
        other_73565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 27), 'other')
        # Obtaining the member '_markersize' of a type (line 1234)
        _markersize_73566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1234, 27), other_73565, '_markersize')
        # Getting the type of 'self' (line 1234)
        self_73567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 8), 'self')
        # Setting the type of the member '_markersize' of a type (line 1234)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1234, 8), self_73567, '_markersize', _markersize_73566)
        
        # Assigning a Attribute to a Attribute (line 1235):
        
        # Assigning a Attribute to a Attribute (line 1235):
        # Getting the type of 'other' (line 1235)
        other_73568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 32), 'other')
        # Obtaining the member '_markerfacecolor' of a type (line 1235)
        _markerfacecolor_73569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1235, 32), other_73568, '_markerfacecolor')
        # Getting the type of 'self' (line 1235)
        self_73570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 8), 'self')
        # Setting the type of the member '_markerfacecolor' of a type (line 1235)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1235, 8), self_73570, '_markerfacecolor', _markerfacecolor_73569)
        
        # Assigning a Attribute to a Attribute (line 1236):
        
        # Assigning a Attribute to a Attribute (line 1236):
        # Getting the type of 'other' (line 1236)
        other_73571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 35), 'other')
        # Obtaining the member '_markerfacecoloralt' of a type (line 1236)
        _markerfacecoloralt_73572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1236, 35), other_73571, '_markerfacecoloralt')
        # Getting the type of 'self' (line 1236)
        self_73573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 8), 'self')
        # Setting the type of the member '_markerfacecoloralt' of a type (line 1236)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1236, 8), self_73573, '_markerfacecoloralt', _markerfacecoloralt_73572)
        
        # Assigning a Attribute to a Attribute (line 1237):
        
        # Assigning a Attribute to a Attribute (line 1237):
        # Getting the type of 'other' (line 1237)
        other_73574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 32), 'other')
        # Obtaining the member '_markeredgecolor' of a type (line 1237)
        _markeredgecolor_73575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1237, 32), other_73574, '_markeredgecolor')
        # Getting the type of 'self' (line 1237)
        self_73576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 8), 'self')
        # Setting the type of the member '_markeredgecolor' of a type (line 1237)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1237, 8), self_73576, '_markeredgecolor', _markeredgecolor_73575)
        
        # Assigning a Attribute to a Attribute (line 1238):
        
        # Assigning a Attribute to a Attribute (line 1238):
        # Getting the type of 'other' (line 1238)
        other_73577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 32), 'other')
        # Obtaining the member '_markeredgewidth' of a type (line 1238)
        _markeredgewidth_73578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 32), other_73577, '_markeredgewidth')
        # Getting the type of 'self' (line 1238)
        self_73579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 8), 'self')
        # Setting the type of the member '_markeredgewidth' of a type (line 1238)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 8), self_73579, '_markeredgewidth', _markeredgewidth_73578)
        
        # Assigning a Attribute to a Attribute (line 1239):
        
        # Assigning a Attribute to a Attribute (line 1239):
        # Getting the type of 'other' (line 1239)
        other_73580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 24), 'other')
        # Obtaining the member '_dashSeq' of a type (line 1239)
        _dashSeq_73581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 24), other_73580, '_dashSeq')
        # Getting the type of 'self' (line 1239)
        self_73582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 8), 'self')
        # Setting the type of the member '_dashSeq' of a type (line 1239)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 8), self_73582, '_dashSeq', _dashSeq_73581)
        
        # Assigning a Attribute to a Attribute (line 1240):
        
        # Assigning a Attribute to a Attribute (line 1240):
        # Getting the type of 'other' (line 1240)
        other_73583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 27), 'other')
        # Obtaining the member '_us_dashSeq' of a type (line 1240)
        _us_dashSeq_73584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1240, 27), other_73583, '_us_dashSeq')
        # Getting the type of 'self' (line 1240)
        self_73585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 8), 'self')
        # Setting the type of the member '_us_dashSeq' of a type (line 1240)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1240, 8), self_73585, '_us_dashSeq', _us_dashSeq_73584)
        
        # Assigning a Attribute to a Attribute (line 1241):
        
        # Assigning a Attribute to a Attribute (line 1241):
        # Getting the type of 'other' (line 1241)
        other_73586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 27), 'other')
        # Obtaining the member '_dashOffset' of a type (line 1241)
        _dashOffset_73587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1241, 27), other_73586, '_dashOffset')
        # Getting the type of 'self' (line 1241)
        self_73588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 8), 'self')
        # Setting the type of the member '_dashOffset' of a type (line 1241)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1241, 8), self_73588, '_dashOffset', _dashOffset_73587)
        
        # Assigning a Attribute to a Attribute (line 1242):
        
        # Assigning a Attribute to a Attribute (line 1242):
        # Getting the type of 'other' (line 1242)
        other_73589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 30), 'other')
        # Obtaining the member '_us_dashOffset' of a type (line 1242)
        _us_dashOffset_73590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1242, 30), other_73589, '_us_dashOffset')
        # Getting the type of 'self' (line 1242)
        self_73591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 8), 'self')
        # Setting the type of the member '_us_dashOffset' of a type (line 1242)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1242, 8), self_73591, '_us_dashOffset', _us_dashOffset_73590)
        
        # Assigning a Attribute to a Attribute (line 1243):
        
        # Assigning a Attribute to a Attribute (line 1243):
        # Getting the type of 'other' (line 1243)
        other_73592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 29), 'other')
        # Obtaining the member '_dashcapstyle' of a type (line 1243)
        _dashcapstyle_73593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 29), other_73592, '_dashcapstyle')
        # Getting the type of 'self' (line 1243)
        self_73594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 8), 'self')
        # Setting the type of the member '_dashcapstyle' of a type (line 1243)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 8), self_73594, '_dashcapstyle', _dashcapstyle_73593)
        
        # Assigning a Attribute to a Attribute (line 1244):
        
        # Assigning a Attribute to a Attribute (line 1244):
        # Getting the type of 'other' (line 1244)
        other_73595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 30), 'other')
        # Obtaining the member '_dashjoinstyle' of a type (line 1244)
        _dashjoinstyle_73596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1244, 30), other_73595, '_dashjoinstyle')
        # Getting the type of 'self' (line 1244)
        self_73597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 8), 'self')
        # Setting the type of the member '_dashjoinstyle' of a type (line 1244)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1244, 8), self_73597, '_dashjoinstyle', _dashjoinstyle_73596)
        
        # Assigning a Attribute to a Attribute (line 1245):
        
        # Assigning a Attribute to a Attribute (line 1245):
        # Getting the type of 'other' (line 1245)
        other_73598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 30), 'other')
        # Obtaining the member '_solidcapstyle' of a type (line 1245)
        _solidcapstyle_73599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1245, 30), other_73598, '_solidcapstyle')
        # Getting the type of 'self' (line 1245)
        self_73600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 8), 'self')
        # Setting the type of the member '_solidcapstyle' of a type (line 1245)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1245, 8), self_73600, '_solidcapstyle', _solidcapstyle_73599)
        
        # Assigning a Attribute to a Attribute (line 1246):
        
        # Assigning a Attribute to a Attribute (line 1246):
        # Getting the type of 'other' (line 1246)
        other_73601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 31), 'other')
        # Obtaining the member '_solidjoinstyle' of a type (line 1246)
        _solidjoinstyle_73602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1246, 31), other_73601, '_solidjoinstyle')
        # Getting the type of 'self' (line 1246)
        self_73603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 8), 'self')
        # Setting the type of the member '_solidjoinstyle' of a type (line 1246)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1246, 8), self_73603, '_solidjoinstyle', _solidjoinstyle_73602)
        
        # Assigning a Attribute to a Attribute (line 1248):
        
        # Assigning a Attribute to a Attribute (line 1248):
        # Getting the type of 'other' (line 1248)
        other_73604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 26), 'other')
        # Obtaining the member '_linestyle' of a type (line 1248)
        _linestyle_73605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 26), other_73604, '_linestyle')
        # Getting the type of 'self' (line 1248)
        self_73606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 8), 'self')
        # Setting the type of the member '_linestyle' of a type (line 1248)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 8), self_73606, '_linestyle', _linestyle_73605)
        
        # Assigning a Call to a Attribute (line 1249):
        
        # Assigning a Call to a Attribute (line 1249):
        
        # Call to MarkerStyle(...): (line 1249)
        # Processing the call arguments (line 1249)
        
        # Call to get_marker(...): (line 1249)
        # Processing the call keyword arguments (line 1249)
        kwargs_73611 = {}
        # Getting the type of 'other' (line 1249)
        other_73608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 35), 'other', False)
        # Obtaining the member '_marker' of a type (line 1249)
        _marker_73609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1249, 35), other_73608, '_marker')
        # Obtaining the member 'get_marker' of a type (line 1249)
        get_marker_73610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1249, 35), _marker_73609, 'get_marker')
        # Calling get_marker(args, kwargs) (line 1249)
        get_marker_call_result_73612 = invoke(stypy.reporting.localization.Localization(__file__, 1249, 35), get_marker_73610, *[], **kwargs_73611)
        
        
        # Call to get_fillstyle(...): (line 1250)
        # Processing the call keyword arguments (line 1250)
        kwargs_73616 = {}
        # Getting the type of 'other' (line 1250)
        other_73613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 35), 'other', False)
        # Obtaining the member '_marker' of a type (line 1250)
        _marker_73614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1250, 35), other_73613, '_marker')
        # Obtaining the member 'get_fillstyle' of a type (line 1250)
        get_fillstyle_73615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1250, 35), _marker_73614, 'get_fillstyle')
        # Calling get_fillstyle(args, kwargs) (line 1250)
        get_fillstyle_call_result_73617 = invoke(stypy.reporting.localization.Localization(__file__, 1250, 35), get_fillstyle_73615, *[], **kwargs_73616)
        
        # Processing the call keyword arguments (line 1249)
        kwargs_73618 = {}
        # Getting the type of 'MarkerStyle' (line 1249)
        MarkerStyle_73607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 23), 'MarkerStyle', False)
        # Calling MarkerStyle(args, kwargs) (line 1249)
        MarkerStyle_call_result_73619 = invoke(stypy.reporting.localization.Localization(__file__, 1249, 23), MarkerStyle_73607, *[get_marker_call_result_73612, get_fillstyle_call_result_73617], **kwargs_73618)
        
        # Getting the type of 'self' (line 1249)
        self_73620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 8), 'self')
        # Setting the type of the member '_marker' of a type (line 1249)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1249, 8), self_73620, '_marker', MarkerStyle_call_result_73619)
        
        # Assigning a Attribute to a Attribute (line 1251):
        
        # Assigning a Attribute to a Attribute (line 1251):
        # Getting the type of 'other' (line 1251)
        other_73621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 26), 'other')
        # Obtaining the member '_drawstyle' of a type (line 1251)
        _drawstyle_73622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1251, 26), other_73621, '_drawstyle')
        # Getting the type of 'self' (line 1251)
        self_73623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 8), 'self')
        # Setting the type of the member '_drawstyle' of a type (line 1251)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1251, 8), self_73623, '_drawstyle', _drawstyle_73622)
        
        # ################# End of 'update_from(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_from' in the type store
        # Getting the type of 'stypy_return_type' (line 1228)
        stypy_return_type_73624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73624)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_from'
        return stypy_return_type_73624


    @norecursion
    def _get_rgba_face(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1253)
        False_73625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 33), 'False')
        defaults = [False_73625]
        # Create a new context for function '_get_rgba_face'
        module_type_store = module_type_store.open_function_context('_get_rgba_face', 1253, 4, False)
        # Assigning a type to the variable 'self' (line 1254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1254, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D._get_rgba_face.__dict__.__setitem__('stypy_localization', localization)
        Line2D._get_rgba_face.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D._get_rgba_face.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D._get_rgba_face.__dict__.__setitem__('stypy_function_name', 'Line2D._get_rgba_face')
        Line2D._get_rgba_face.__dict__.__setitem__('stypy_param_names_list', ['alt'])
        Line2D._get_rgba_face.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D._get_rgba_face.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D._get_rgba_face.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D._get_rgba_face.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D._get_rgba_face.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D._get_rgba_face.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D._get_rgba_face', ['alt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_rgba_face', localization, ['alt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_rgba_face(...)' code ##################

        
        # Assigning a Call to a Name (line 1254):
        
        # Assigning a Call to a Name (line 1254):
        
        # Call to _get_markerfacecolor(...): (line 1254)
        # Processing the call keyword arguments (line 1254)
        # Getting the type of 'alt' (line 1254)
        alt_73628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 50), 'alt', False)
        keyword_73629 = alt_73628
        kwargs_73630 = {'alt': keyword_73629}
        # Getting the type of 'self' (line 1254)
        self_73626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 20), 'self', False)
        # Obtaining the member '_get_markerfacecolor' of a type (line 1254)
        _get_markerfacecolor_73627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1254, 20), self_73626, '_get_markerfacecolor')
        # Calling _get_markerfacecolor(args, kwargs) (line 1254)
        _get_markerfacecolor_call_result_73631 = invoke(stypy.reporting.localization.Localization(__file__, 1254, 20), _get_markerfacecolor_73627, *[], **kwargs_73630)
        
        # Assigning a type to the variable 'facecolor' (line 1254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1254, 8), 'facecolor', _get_markerfacecolor_call_result_73631)
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 1255)
        # Processing the call arguments (line 1255)
        # Getting the type of 'facecolor' (line 1255)
        facecolor_73633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 23), 'facecolor', False)
        # Getting the type of 'six' (line 1255)
        six_73634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 34), 'six', False)
        # Obtaining the member 'string_types' of a type (line 1255)
        string_types_73635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1255, 34), six_73634, 'string_types')
        # Processing the call keyword arguments (line 1255)
        kwargs_73636 = {}
        # Getting the type of 'isinstance' (line 1255)
        isinstance_73632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 12), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1255)
        isinstance_call_result_73637 = invoke(stypy.reporting.localization.Localization(__file__, 1255, 12), isinstance_73632, *[facecolor_73633, string_types_73635], **kwargs_73636)
        
        
        
        # Call to lower(...): (line 1256)
        # Processing the call keyword arguments (line 1256)
        kwargs_73640 = {}
        # Getting the type of 'facecolor' (line 1256)
        facecolor_73638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 20), 'facecolor', False)
        # Obtaining the member 'lower' of a type (line 1256)
        lower_73639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1256, 20), facecolor_73638, 'lower')
        # Calling lower(args, kwargs) (line 1256)
        lower_call_result_73641 = invoke(stypy.reporting.localization.Localization(__file__, 1256, 20), lower_73639, *[], **kwargs_73640)
        
        unicode_73642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1256, 41), 'unicode', u'none')
        # Applying the binary operator '==' (line 1256)
        result_eq_73643 = python_operator(stypy.reporting.localization.Localization(__file__, 1256, 20), '==', lower_call_result_73641, unicode_73642)
        
        # Applying the binary operator 'and' (line 1255)
        result_and_keyword_73644 = python_operator(stypy.reporting.localization.Localization(__file__, 1255, 12), 'and', isinstance_call_result_73637, result_eq_73643)
        
        # Testing the type of an if condition (line 1255)
        if_condition_73645 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1255, 8), result_and_keyword_73644)
        # Assigning a type to the variable 'if_condition_73645' (line 1255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 8), 'if_condition_73645', if_condition_73645)
        # SSA begins for if statement (line 1255)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1257):
        
        # Assigning a Name to a Name (line 1257):
        # Getting the type of 'None' (line 1257)
        None_73646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 23), 'None')
        # Assigning a type to the variable 'rgbaFace' (line 1257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1257, 12), 'rgbaFace', None_73646)
        # SSA branch for the else part of an if statement (line 1255)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1259):
        
        # Assigning a Call to a Name (line 1259):
        
        # Call to to_rgba(...): (line 1259)
        # Processing the call arguments (line 1259)
        # Getting the type of 'facecolor' (line 1259)
        facecolor_73649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 39), 'facecolor', False)
        # Getting the type of 'self' (line 1259)
        self_73650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 50), 'self', False)
        # Obtaining the member '_alpha' of a type (line 1259)
        _alpha_73651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1259, 50), self_73650, '_alpha')
        # Processing the call keyword arguments (line 1259)
        kwargs_73652 = {}
        # Getting the type of 'mcolors' (line 1259)
        mcolors_73647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 23), 'mcolors', False)
        # Obtaining the member 'to_rgba' of a type (line 1259)
        to_rgba_73648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1259, 23), mcolors_73647, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 1259)
        to_rgba_call_result_73653 = invoke(stypy.reporting.localization.Localization(__file__, 1259, 23), to_rgba_73648, *[facecolor_73649, _alpha_73651], **kwargs_73652)
        
        # Assigning a type to the variable 'rgbaFace' (line 1259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1259, 12), 'rgbaFace', to_rgba_call_result_73653)
        # SSA join for if statement (line 1255)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'rgbaFace' (line 1260)
        rgbaFace_73654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 15), 'rgbaFace')
        # Assigning a type to the variable 'stypy_return_type' (line 1260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1260, 8), 'stypy_return_type', rgbaFace_73654)
        
        # ################# End of '_get_rgba_face(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_rgba_face' in the type store
        # Getting the type of 'stypy_return_type' (line 1253)
        stypy_return_type_73655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73655)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_rgba_face'
        return stypy_return_type_73655


    @norecursion
    def _get_rgba_ln_color(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1262)
        False_73656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 37), 'False')
        defaults = [False_73656]
        # Create a new context for function '_get_rgba_ln_color'
        module_type_store = module_type_store.open_function_context('_get_rgba_ln_color', 1262, 4, False)
        # Assigning a type to the variable 'self' (line 1263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1263, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D._get_rgba_ln_color.__dict__.__setitem__('stypy_localization', localization)
        Line2D._get_rgba_ln_color.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D._get_rgba_ln_color.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D._get_rgba_ln_color.__dict__.__setitem__('stypy_function_name', 'Line2D._get_rgba_ln_color')
        Line2D._get_rgba_ln_color.__dict__.__setitem__('stypy_param_names_list', ['alt'])
        Line2D._get_rgba_ln_color.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D._get_rgba_ln_color.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D._get_rgba_ln_color.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D._get_rgba_ln_color.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D._get_rgba_ln_color.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D._get_rgba_ln_color.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D._get_rgba_ln_color', ['alt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_rgba_ln_color', localization, ['alt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_rgba_ln_color(...)' code ##################

        
        # Call to to_rgba(...): (line 1263)
        # Processing the call arguments (line 1263)
        # Getting the type of 'self' (line 1263)
        self_73659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 31), 'self', False)
        # Obtaining the member '_color' of a type (line 1263)
        _color_73660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1263, 31), self_73659, '_color')
        # Getting the type of 'self' (line 1263)
        self_73661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 44), 'self', False)
        # Obtaining the member '_alpha' of a type (line 1263)
        _alpha_73662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1263, 44), self_73661, '_alpha')
        # Processing the call keyword arguments (line 1263)
        kwargs_73663 = {}
        # Getting the type of 'mcolors' (line 1263)
        mcolors_73657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 15), 'mcolors', False)
        # Obtaining the member 'to_rgba' of a type (line 1263)
        to_rgba_73658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1263, 15), mcolors_73657, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 1263)
        to_rgba_call_result_73664 = invoke(stypy.reporting.localization.Localization(__file__, 1263, 15), to_rgba_73658, *[_color_73660, _alpha_73662], **kwargs_73663)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1263, 8), 'stypy_return_type', to_rgba_call_result_73664)
        
        # ################# End of '_get_rgba_ln_color(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_rgba_ln_color' in the type store
        # Getting the type of 'stypy_return_type' (line 1262)
        stypy_return_type_73665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73665)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_rgba_ln_color'
        return stypy_return_type_73665


    @norecursion
    def set_aa(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_aa'
        module_type_store = module_type_store.open_function_context('set_aa', 1266, 4, False)
        # Assigning a type to the variable 'self' (line 1267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1267, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_aa.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_aa.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_aa.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_aa.__dict__.__setitem__('stypy_function_name', 'Line2D.set_aa')
        Line2D.set_aa.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Line2D.set_aa.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_aa.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_aa.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_aa.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_aa.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_aa.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_aa', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_aa', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_aa(...)' code ##################

        unicode_73666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1267, 8), 'unicode', u'alias for set_antialiased')
        
        # Call to set_antialiased(...): (line 1268)
        # Processing the call arguments (line 1268)
        # Getting the type of 'val' (line 1268)
        val_73669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 29), 'val', False)
        # Processing the call keyword arguments (line 1268)
        kwargs_73670 = {}
        # Getting the type of 'self' (line 1268)
        self_73667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 8), 'self', False)
        # Obtaining the member 'set_antialiased' of a type (line 1268)
        set_antialiased_73668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1268, 8), self_73667, 'set_antialiased')
        # Calling set_antialiased(args, kwargs) (line 1268)
        set_antialiased_call_result_73671 = invoke(stypy.reporting.localization.Localization(__file__, 1268, 8), set_antialiased_73668, *[val_73669], **kwargs_73670)
        
        
        # ################# End of 'set_aa(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_aa' in the type store
        # Getting the type of 'stypy_return_type' (line 1266)
        stypy_return_type_73672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73672)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_aa'
        return stypy_return_type_73672


    @norecursion
    def set_c(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_c'
        module_type_store = module_type_store.open_function_context('set_c', 1270, 4, False)
        # Assigning a type to the variable 'self' (line 1271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1271, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_c.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_c.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_c.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_c.__dict__.__setitem__('stypy_function_name', 'Line2D.set_c')
        Line2D.set_c.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Line2D.set_c.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_c.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_c.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_c.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_c.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_c.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_c', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_c', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_c(...)' code ##################

        unicode_73673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1271, 8), 'unicode', u'alias for set_color')
        
        # Call to set_color(...): (line 1272)
        # Processing the call arguments (line 1272)
        # Getting the type of 'val' (line 1272)
        val_73676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 23), 'val', False)
        # Processing the call keyword arguments (line 1272)
        kwargs_73677 = {}
        # Getting the type of 'self' (line 1272)
        self_73674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 8), 'self', False)
        # Obtaining the member 'set_color' of a type (line 1272)
        set_color_73675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 8), self_73674, 'set_color')
        # Calling set_color(args, kwargs) (line 1272)
        set_color_call_result_73678 = invoke(stypy.reporting.localization.Localization(__file__, 1272, 8), set_color_73675, *[val_73676], **kwargs_73677)
        
        
        # ################# End of 'set_c(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_c' in the type store
        # Getting the type of 'stypy_return_type' (line 1270)
        stypy_return_type_73679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73679)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_c'
        return stypy_return_type_73679


    @norecursion
    def set_ls(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_ls'
        module_type_store = module_type_store.open_function_context('set_ls', 1274, 4, False)
        # Assigning a type to the variable 'self' (line 1275)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1275, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_ls.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_ls.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_ls.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_ls.__dict__.__setitem__('stypy_function_name', 'Line2D.set_ls')
        Line2D.set_ls.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Line2D.set_ls.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_ls.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_ls.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_ls.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_ls.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_ls.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_ls', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_ls', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_ls(...)' code ##################

        unicode_73680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1275, 8), 'unicode', u'alias for set_linestyle')
        
        # Call to set_linestyle(...): (line 1276)
        # Processing the call arguments (line 1276)
        # Getting the type of 'val' (line 1276)
        val_73683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 27), 'val', False)
        # Processing the call keyword arguments (line 1276)
        kwargs_73684 = {}
        # Getting the type of 'self' (line 1276)
        self_73681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 8), 'self', False)
        # Obtaining the member 'set_linestyle' of a type (line 1276)
        set_linestyle_73682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1276, 8), self_73681, 'set_linestyle')
        # Calling set_linestyle(args, kwargs) (line 1276)
        set_linestyle_call_result_73685 = invoke(stypy.reporting.localization.Localization(__file__, 1276, 8), set_linestyle_73682, *[val_73683], **kwargs_73684)
        
        
        # ################# End of 'set_ls(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_ls' in the type store
        # Getting the type of 'stypy_return_type' (line 1274)
        stypy_return_type_73686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73686)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_ls'
        return stypy_return_type_73686


    @norecursion
    def set_lw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_lw'
        module_type_store = module_type_store.open_function_context('set_lw', 1278, 4, False)
        # Assigning a type to the variable 'self' (line 1279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1279, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_lw.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_lw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_lw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_lw.__dict__.__setitem__('stypy_function_name', 'Line2D.set_lw')
        Line2D.set_lw.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Line2D.set_lw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_lw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_lw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_lw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_lw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_lw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_lw', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_lw', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_lw(...)' code ##################

        unicode_73687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1279, 8), 'unicode', u'alias for set_linewidth')
        
        # Call to set_linewidth(...): (line 1280)
        # Processing the call arguments (line 1280)
        # Getting the type of 'val' (line 1280)
        val_73690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 27), 'val', False)
        # Processing the call keyword arguments (line 1280)
        kwargs_73691 = {}
        # Getting the type of 'self' (line 1280)
        self_73688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 8), 'self', False)
        # Obtaining the member 'set_linewidth' of a type (line 1280)
        set_linewidth_73689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 8), self_73688, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 1280)
        set_linewidth_call_result_73692 = invoke(stypy.reporting.localization.Localization(__file__, 1280, 8), set_linewidth_73689, *[val_73690], **kwargs_73691)
        
        
        # ################# End of 'set_lw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_lw' in the type store
        # Getting the type of 'stypy_return_type' (line 1278)
        stypy_return_type_73693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73693)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_lw'
        return stypy_return_type_73693


    @norecursion
    def set_mec(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_mec'
        module_type_store = module_type_store.open_function_context('set_mec', 1282, 4, False)
        # Assigning a type to the variable 'self' (line 1283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1283, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_mec.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_mec.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_mec.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_mec.__dict__.__setitem__('stypy_function_name', 'Line2D.set_mec')
        Line2D.set_mec.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Line2D.set_mec.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_mec.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_mec.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_mec.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_mec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_mec.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_mec', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_mec', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_mec(...)' code ##################

        unicode_73694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1283, 8), 'unicode', u'alias for set_markeredgecolor')
        
        # Call to set_markeredgecolor(...): (line 1284)
        # Processing the call arguments (line 1284)
        # Getting the type of 'val' (line 1284)
        val_73697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 33), 'val', False)
        # Processing the call keyword arguments (line 1284)
        kwargs_73698 = {}
        # Getting the type of 'self' (line 1284)
        self_73695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 8), 'self', False)
        # Obtaining the member 'set_markeredgecolor' of a type (line 1284)
        set_markeredgecolor_73696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 8), self_73695, 'set_markeredgecolor')
        # Calling set_markeredgecolor(args, kwargs) (line 1284)
        set_markeredgecolor_call_result_73699 = invoke(stypy.reporting.localization.Localization(__file__, 1284, 8), set_markeredgecolor_73696, *[val_73697], **kwargs_73698)
        
        
        # ################# End of 'set_mec(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_mec' in the type store
        # Getting the type of 'stypy_return_type' (line 1282)
        stypy_return_type_73700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73700)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_mec'
        return stypy_return_type_73700


    @norecursion
    def set_mew(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_mew'
        module_type_store = module_type_store.open_function_context('set_mew', 1286, 4, False)
        # Assigning a type to the variable 'self' (line 1287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1287, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_mew.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_mew.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_mew.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_mew.__dict__.__setitem__('stypy_function_name', 'Line2D.set_mew')
        Line2D.set_mew.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Line2D.set_mew.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_mew.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_mew.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_mew.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_mew.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_mew.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_mew', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_mew', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_mew(...)' code ##################

        unicode_73701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, 8), 'unicode', u'alias for set_markeredgewidth')
        
        # Call to set_markeredgewidth(...): (line 1288)
        # Processing the call arguments (line 1288)
        # Getting the type of 'val' (line 1288)
        val_73704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 33), 'val', False)
        # Processing the call keyword arguments (line 1288)
        kwargs_73705 = {}
        # Getting the type of 'self' (line 1288)
        self_73702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 8), 'self', False)
        # Obtaining the member 'set_markeredgewidth' of a type (line 1288)
        set_markeredgewidth_73703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1288, 8), self_73702, 'set_markeredgewidth')
        # Calling set_markeredgewidth(args, kwargs) (line 1288)
        set_markeredgewidth_call_result_73706 = invoke(stypy.reporting.localization.Localization(__file__, 1288, 8), set_markeredgewidth_73703, *[val_73704], **kwargs_73705)
        
        
        # ################# End of 'set_mew(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_mew' in the type store
        # Getting the type of 'stypy_return_type' (line 1286)
        stypy_return_type_73707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73707)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_mew'
        return stypy_return_type_73707


    @norecursion
    def set_mfc(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_mfc'
        module_type_store = module_type_store.open_function_context('set_mfc', 1290, 4, False)
        # Assigning a type to the variable 'self' (line 1291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1291, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_mfc.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_mfc.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_mfc.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_mfc.__dict__.__setitem__('stypy_function_name', 'Line2D.set_mfc')
        Line2D.set_mfc.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Line2D.set_mfc.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_mfc.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_mfc.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_mfc.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_mfc.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_mfc.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_mfc', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_mfc', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_mfc(...)' code ##################

        unicode_73708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1291, 8), 'unicode', u'alias for set_markerfacecolor')
        
        # Call to set_markerfacecolor(...): (line 1292)
        # Processing the call arguments (line 1292)
        # Getting the type of 'val' (line 1292)
        val_73711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 33), 'val', False)
        # Processing the call keyword arguments (line 1292)
        kwargs_73712 = {}
        # Getting the type of 'self' (line 1292)
        self_73709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 8), 'self', False)
        # Obtaining the member 'set_markerfacecolor' of a type (line 1292)
        set_markerfacecolor_73710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1292, 8), self_73709, 'set_markerfacecolor')
        # Calling set_markerfacecolor(args, kwargs) (line 1292)
        set_markerfacecolor_call_result_73713 = invoke(stypy.reporting.localization.Localization(__file__, 1292, 8), set_markerfacecolor_73710, *[val_73711], **kwargs_73712)
        
        
        # ################# End of 'set_mfc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_mfc' in the type store
        # Getting the type of 'stypy_return_type' (line 1290)
        stypy_return_type_73714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73714)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_mfc'
        return stypy_return_type_73714


    @norecursion
    def set_mfcalt(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_mfcalt'
        module_type_store = module_type_store.open_function_context('set_mfcalt', 1294, 4, False)
        # Assigning a type to the variable 'self' (line 1295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1295, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_mfcalt.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_mfcalt.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_mfcalt.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_mfcalt.__dict__.__setitem__('stypy_function_name', 'Line2D.set_mfcalt')
        Line2D.set_mfcalt.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Line2D.set_mfcalt.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_mfcalt.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_mfcalt.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_mfcalt.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_mfcalt.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_mfcalt.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_mfcalt', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_mfcalt', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_mfcalt(...)' code ##################

        unicode_73715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1295, 8), 'unicode', u'alias for set_markerfacecoloralt')
        
        # Call to set_markerfacecoloralt(...): (line 1296)
        # Processing the call arguments (line 1296)
        # Getting the type of 'val' (line 1296)
        val_73718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 36), 'val', False)
        # Processing the call keyword arguments (line 1296)
        kwargs_73719 = {}
        # Getting the type of 'self' (line 1296)
        self_73716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 8), 'self', False)
        # Obtaining the member 'set_markerfacecoloralt' of a type (line 1296)
        set_markerfacecoloralt_73717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 8), self_73716, 'set_markerfacecoloralt')
        # Calling set_markerfacecoloralt(args, kwargs) (line 1296)
        set_markerfacecoloralt_call_result_73720 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 8), set_markerfacecoloralt_73717, *[val_73718], **kwargs_73719)
        
        
        # ################# End of 'set_mfcalt(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_mfcalt' in the type store
        # Getting the type of 'stypy_return_type' (line 1294)
        stypy_return_type_73721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73721)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_mfcalt'
        return stypy_return_type_73721


    @norecursion
    def set_ms(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_ms'
        module_type_store = module_type_store.open_function_context('set_ms', 1298, 4, False)
        # Assigning a type to the variable 'self' (line 1299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_ms.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_ms.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_ms.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_ms.__dict__.__setitem__('stypy_function_name', 'Line2D.set_ms')
        Line2D.set_ms.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Line2D.set_ms.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_ms.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_ms.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_ms.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_ms.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_ms.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_ms', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_ms', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_ms(...)' code ##################

        unicode_73722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1299, 8), 'unicode', u'alias for set_markersize')
        
        # Call to set_markersize(...): (line 1300)
        # Processing the call arguments (line 1300)
        # Getting the type of 'val' (line 1300)
        val_73725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 28), 'val', False)
        # Processing the call keyword arguments (line 1300)
        kwargs_73726 = {}
        # Getting the type of 'self' (line 1300)
        self_73723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 8), 'self', False)
        # Obtaining the member 'set_markersize' of a type (line 1300)
        set_markersize_73724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1300, 8), self_73723, 'set_markersize')
        # Calling set_markersize(args, kwargs) (line 1300)
        set_markersize_call_result_73727 = invoke(stypy.reporting.localization.Localization(__file__, 1300, 8), set_markersize_73724, *[val_73725], **kwargs_73726)
        
        
        # ################# End of 'set_ms(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_ms' in the type store
        # Getting the type of 'stypy_return_type' (line 1298)
        stypy_return_type_73728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73728)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_ms'
        return stypy_return_type_73728


    @norecursion
    def get_aa(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_aa'
        module_type_store = module_type_store.open_function_context('get_aa', 1302, 4, False)
        # Assigning a type to the variable 'self' (line 1303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_aa.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_aa.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_aa.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_aa.__dict__.__setitem__('stypy_function_name', 'Line2D.get_aa')
        Line2D.get_aa.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_aa.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_aa.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_aa.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_aa.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_aa.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_aa.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_aa', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_aa', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_aa(...)' code ##################

        unicode_73729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1303, 8), 'unicode', u'alias for get_antialiased')
        
        # Call to get_antialiased(...): (line 1304)
        # Processing the call keyword arguments (line 1304)
        kwargs_73732 = {}
        # Getting the type of 'self' (line 1304)
        self_73730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 15), 'self', False)
        # Obtaining the member 'get_antialiased' of a type (line 1304)
        get_antialiased_73731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1304, 15), self_73730, 'get_antialiased')
        # Calling get_antialiased(args, kwargs) (line 1304)
        get_antialiased_call_result_73733 = invoke(stypy.reporting.localization.Localization(__file__, 1304, 15), get_antialiased_73731, *[], **kwargs_73732)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 8), 'stypy_return_type', get_antialiased_call_result_73733)
        
        # ################# End of 'get_aa(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_aa' in the type store
        # Getting the type of 'stypy_return_type' (line 1302)
        stypy_return_type_73734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73734)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_aa'
        return stypy_return_type_73734


    @norecursion
    def get_c(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_c'
        module_type_store = module_type_store.open_function_context('get_c', 1306, 4, False)
        # Assigning a type to the variable 'self' (line 1307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_c.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_c.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_c.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_c.__dict__.__setitem__('stypy_function_name', 'Line2D.get_c')
        Line2D.get_c.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_c.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_c.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_c.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_c.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_c.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_c.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_c', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_c', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_c(...)' code ##################

        unicode_73735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1307, 8), 'unicode', u'alias for get_color')
        
        # Call to get_color(...): (line 1308)
        # Processing the call keyword arguments (line 1308)
        kwargs_73738 = {}
        # Getting the type of 'self' (line 1308)
        self_73736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 15), 'self', False)
        # Obtaining the member 'get_color' of a type (line 1308)
        get_color_73737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 15), self_73736, 'get_color')
        # Calling get_color(args, kwargs) (line 1308)
        get_color_call_result_73739 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 15), get_color_73737, *[], **kwargs_73738)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1308, 8), 'stypy_return_type', get_color_call_result_73739)
        
        # ################# End of 'get_c(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_c' in the type store
        # Getting the type of 'stypy_return_type' (line 1306)
        stypy_return_type_73740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73740)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_c'
        return stypy_return_type_73740


    @norecursion
    def get_ls(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_ls'
        module_type_store = module_type_store.open_function_context('get_ls', 1310, 4, False)
        # Assigning a type to the variable 'self' (line 1311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_ls.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_ls.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_ls.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_ls.__dict__.__setitem__('stypy_function_name', 'Line2D.get_ls')
        Line2D.get_ls.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_ls.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_ls.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_ls.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_ls.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_ls.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_ls.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_ls', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_ls', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_ls(...)' code ##################

        unicode_73741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1311, 8), 'unicode', u'alias for get_linestyle')
        
        # Call to get_linestyle(...): (line 1312)
        # Processing the call keyword arguments (line 1312)
        kwargs_73744 = {}
        # Getting the type of 'self' (line 1312)
        self_73742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 15), 'self', False)
        # Obtaining the member 'get_linestyle' of a type (line 1312)
        get_linestyle_73743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 15), self_73742, 'get_linestyle')
        # Calling get_linestyle(args, kwargs) (line 1312)
        get_linestyle_call_result_73745 = invoke(stypy.reporting.localization.Localization(__file__, 1312, 15), get_linestyle_73743, *[], **kwargs_73744)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 8), 'stypy_return_type', get_linestyle_call_result_73745)
        
        # ################# End of 'get_ls(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_ls' in the type store
        # Getting the type of 'stypy_return_type' (line 1310)
        stypy_return_type_73746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73746)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_ls'
        return stypy_return_type_73746


    @norecursion
    def get_lw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_lw'
        module_type_store = module_type_store.open_function_context('get_lw', 1314, 4, False)
        # Assigning a type to the variable 'self' (line 1315)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1315, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_lw.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_lw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_lw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_lw.__dict__.__setitem__('stypy_function_name', 'Line2D.get_lw')
        Line2D.get_lw.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_lw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_lw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_lw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_lw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_lw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_lw.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_lw', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_lw', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_lw(...)' code ##################

        unicode_73747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1315, 8), 'unicode', u'alias for get_linewidth')
        
        # Call to get_linewidth(...): (line 1316)
        # Processing the call keyword arguments (line 1316)
        kwargs_73750 = {}
        # Getting the type of 'self' (line 1316)
        self_73748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 15), 'self', False)
        # Obtaining the member 'get_linewidth' of a type (line 1316)
        get_linewidth_73749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 15), self_73748, 'get_linewidth')
        # Calling get_linewidth(args, kwargs) (line 1316)
        get_linewidth_call_result_73751 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 15), get_linewidth_73749, *[], **kwargs_73750)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1316, 8), 'stypy_return_type', get_linewidth_call_result_73751)
        
        # ################# End of 'get_lw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_lw' in the type store
        # Getting the type of 'stypy_return_type' (line 1314)
        stypy_return_type_73752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73752)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_lw'
        return stypy_return_type_73752


    @norecursion
    def get_mec(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_mec'
        module_type_store = module_type_store.open_function_context('get_mec', 1318, 4, False)
        # Assigning a type to the variable 'self' (line 1319)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1319, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_mec.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_mec.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_mec.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_mec.__dict__.__setitem__('stypy_function_name', 'Line2D.get_mec')
        Line2D.get_mec.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_mec.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_mec.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_mec.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_mec.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_mec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_mec.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_mec', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_mec', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_mec(...)' code ##################

        unicode_73753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1319, 8), 'unicode', u'alias for get_markeredgecolor')
        
        # Call to get_markeredgecolor(...): (line 1320)
        # Processing the call keyword arguments (line 1320)
        kwargs_73756 = {}
        # Getting the type of 'self' (line 1320)
        self_73754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 15), 'self', False)
        # Obtaining the member 'get_markeredgecolor' of a type (line 1320)
        get_markeredgecolor_73755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 15), self_73754, 'get_markeredgecolor')
        # Calling get_markeredgecolor(args, kwargs) (line 1320)
        get_markeredgecolor_call_result_73757 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 15), get_markeredgecolor_73755, *[], **kwargs_73756)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 8), 'stypy_return_type', get_markeredgecolor_call_result_73757)
        
        # ################# End of 'get_mec(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_mec' in the type store
        # Getting the type of 'stypy_return_type' (line 1318)
        stypy_return_type_73758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73758)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_mec'
        return stypy_return_type_73758


    @norecursion
    def get_mew(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_mew'
        module_type_store = module_type_store.open_function_context('get_mew', 1322, 4, False)
        # Assigning a type to the variable 'self' (line 1323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1323, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_mew.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_mew.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_mew.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_mew.__dict__.__setitem__('stypy_function_name', 'Line2D.get_mew')
        Line2D.get_mew.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_mew.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_mew.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_mew.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_mew.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_mew.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_mew.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_mew', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_mew', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_mew(...)' code ##################

        unicode_73759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1323, 8), 'unicode', u'alias for get_markeredgewidth')
        
        # Call to get_markeredgewidth(...): (line 1324)
        # Processing the call keyword arguments (line 1324)
        kwargs_73762 = {}
        # Getting the type of 'self' (line 1324)
        self_73760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 15), 'self', False)
        # Obtaining the member 'get_markeredgewidth' of a type (line 1324)
        get_markeredgewidth_73761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1324, 15), self_73760, 'get_markeredgewidth')
        # Calling get_markeredgewidth(args, kwargs) (line 1324)
        get_markeredgewidth_call_result_73763 = invoke(stypy.reporting.localization.Localization(__file__, 1324, 15), get_markeredgewidth_73761, *[], **kwargs_73762)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1324)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1324, 8), 'stypy_return_type', get_markeredgewidth_call_result_73763)
        
        # ################# End of 'get_mew(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_mew' in the type store
        # Getting the type of 'stypy_return_type' (line 1322)
        stypy_return_type_73764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73764)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_mew'
        return stypy_return_type_73764


    @norecursion
    def get_mfc(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_mfc'
        module_type_store = module_type_store.open_function_context('get_mfc', 1326, 4, False)
        # Assigning a type to the variable 'self' (line 1327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1327, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_mfc.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_mfc.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_mfc.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_mfc.__dict__.__setitem__('stypy_function_name', 'Line2D.get_mfc')
        Line2D.get_mfc.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_mfc.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_mfc.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_mfc.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_mfc.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_mfc.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_mfc.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_mfc', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_mfc', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_mfc(...)' code ##################

        unicode_73765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, 8), 'unicode', u'alias for get_markerfacecolor')
        
        # Call to get_markerfacecolor(...): (line 1328)
        # Processing the call keyword arguments (line 1328)
        kwargs_73768 = {}
        # Getting the type of 'self' (line 1328)
        self_73766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 15), 'self', False)
        # Obtaining the member 'get_markerfacecolor' of a type (line 1328)
        get_markerfacecolor_73767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1328, 15), self_73766, 'get_markerfacecolor')
        # Calling get_markerfacecolor(args, kwargs) (line 1328)
        get_markerfacecolor_call_result_73769 = invoke(stypy.reporting.localization.Localization(__file__, 1328, 15), get_markerfacecolor_73767, *[], **kwargs_73768)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1328, 8), 'stypy_return_type', get_markerfacecolor_call_result_73769)
        
        # ################# End of 'get_mfc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_mfc' in the type store
        # Getting the type of 'stypy_return_type' (line 1326)
        stypy_return_type_73770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73770)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_mfc'
        return stypy_return_type_73770


    @norecursion
    def get_mfcalt(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1330)
        False_73771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 29), 'False')
        defaults = [False_73771]
        # Create a new context for function 'get_mfcalt'
        module_type_store = module_type_store.open_function_context('get_mfcalt', 1330, 4, False)
        # Assigning a type to the variable 'self' (line 1331)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1331, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_mfcalt.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_mfcalt.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_mfcalt.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_mfcalt.__dict__.__setitem__('stypy_function_name', 'Line2D.get_mfcalt')
        Line2D.get_mfcalt.__dict__.__setitem__('stypy_param_names_list', ['alt'])
        Line2D.get_mfcalt.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_mfcalt.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_mfcalt.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_mfcalt.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_mfcalt.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_mfcalt.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_mfcalt', ['alt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_mfcalt', localization, ['alt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_mfcalt(...)' code ##################

        unicode_73772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1331, 8), 'unicode', u'alias for get_markerfacecoloralt')
        
        # Call to get_markerfacecoloralt(...): (line 1332)
        # Processing the call keyword arguments (line 1332)
        kwargs_73775 = {}
        # Getting the type of 'self' (line 1332)
        self_73773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 15), 'self', False)
        # Obtaining the member 'get_markerfacecoloralt' of a type (line 1332)
        get_markerfacecoloralt_73774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1332, 15), self_73773, 'get_markerfacecoloralt')
        # Calling get_markerfacecoloralt(args, kwargs) (line 1332)
        get_markerfacecoloralt_call_result_73776 = invoke(stypy.reporting.localization.Localization(__file__, 1332, 15), get_markerfacecoloralt_73774, *[], **kwargs_73775)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1332, 8), 'stypy_return_type', get_markerfacecoloralt_call_result_73776)
        
        # ################# End of 'get_mfcalt(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_mfcalt' in the type store
        # Getting the type of 'stypy_return_type' (line 1330)
        stypy_return_type_73777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73777)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_mfcalt'
        return stypy_return_type_73777


    @norecursion
    def get_ms(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_ms'
        module_type_store = module_type_store.open_function_context('get_ms', 1334, 4, False)
        # Assigning a type to the variable 'self' (line 1335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1335, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_ms.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_ms.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_ms.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_ms.__dict__.__setitem__('stypy_function_name', 'Line2D.get_ms')
        Line2D.get_ms.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_ms.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_ms.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_ms.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_ms.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_ms.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_ms.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_ms', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_ms', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_ms(...)' code ##################

        unicode_73778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1335, 8), 'unicode', u'alias for get_markersize')
        
        # Call to get_markersize(...): (line 1336)
        # Processing the call keyword arguments (line 1336)
        kwargs_73781 = {}
        # Getting the type of 'self' (line 1336)
        self_73779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 15), 'self', False)
        # Obtaining the member 'get_markersize' of a type (line 1336)
        get_markersize_73780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1336, 15), self_73779, 'get_markersize')
        # Calling get_markersize(args, kwargs) (line 1336)
        get_markersize_call_result_73782 = invoke(stypy.reporting.localization.Localization(__file__, 1336, 15), get_markersize_73780, *[], **kwargs_73781)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1336, 8), 'stypy_return_type', get_markersize_call_result_73782)
        
        # ################# End of 'get_ms(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_ms' in the type store
        # Getting the type of 'stypy_return_type' (line 1334)
        stypy_return_type_73783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73783)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_ms'
        return stypy_return_type_73783


    @norecursion
    def set_dash_joinstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_dash_joinstyle'
        module_type_store = module_type_store.open_function_context('set_dash_joinstyle', 1338, 4, False)
        # Assigning a type to the variable 'self' (line 1339)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1339, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_dash_joinstyle.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_dash_joinstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_dash_joinstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_dash_joinstyle.__dict__.__setitem__('stypy_function_name', 'Line2D.set_dash_joinstyle')
        Line2D.set_dash_joinstyle.__dict__.__setitem__('stypy_param_names_list', ['s'])
        Line2D.set_dash_joinstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_dash_joinstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_dash_joinstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_dash_joinstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_dash_joinstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_dash_joinstyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_dash_joinstyle', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_dash_joinstyle', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_dash_joinstyle(...)' code ##################

        unicode_73784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1342, (-1)), 'unicode', u"\n        Set the join style for dashed linestyles\n        ACCEPTS: ['miter' | 'round' | 'bevel']\n        ")
        
        # Assigning a Call to a Name (line 1343):
        
        # Assigning a Call to a Name (line 1343):
        
        # Call to lower(...): (line 1343)
        # Processing the call keyword arguments (line 1343)
        kwargs_73787 = {}
        # Getting the type of 's' (line 1343)
        s_73785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 12), 's', False)
        # Obtaining the member 'lower' of a type (line 1343)
        lower_73786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 12), s_73785, 'lower')
        # Calling lower(args, kwargs) (line 1343)
        lower_call_result_73788 = invoke(stypy.reporting.localization.Localization(__file__, 1343, 12), lower_73786, *[], **kwargs_73787)
        
        # Assigning a type to the variable 's' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 's', lower_call_result_73788)
        
        
        # Getting the type of 's' (line 1344)
        s_73789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 11), 's')
        # Getting the type of 'self' (line 1344)
        self_73790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 20), 'self')
        # Obtaining the member 'validJoin' of a type (line 1344)
        validJoin_73791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1344, 20), self_73790, 'validJoin')
        # Applying the binary operator 'notin' (line 1344)
        result_contains_73792 = python_operator(stypy.reporting.localization.Localization(__file__, 1344, 11), 'notin', s_73789, validJoin_73791)
        
        # Testing the type of an if condition (line 1344)
        if_condition_73793 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1344, 8), result_contains_73792)
        # Assigning a type to the variable 'if_condition_73793' (line 1344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1344, 8), 'if_condition_73793', if_condition_73793)
        # SSA begins for if statement (line 1344)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1345)
        # Processing the call arguments (line 1345)
        unicode_73795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1345, 29), 'unicode', u'set_dash_joinstyle passed "%s";\n')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1345)
        tuple_73796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1345, 68), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1345)
        # Adding element type (line 1345)
        # Getting the type of 's' (line 1345)
        s_73797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 68), 's', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1345, 68), tuple_73796, s_73797)
        
        # Applying the binary operator '%' (line 1345)
        result_mod_73798 = python_operator(stypy.reporting.localization.Localization(__file__, 1345, 29), '%', unicode_73795, tuple_73796)
        
        unicode_73799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1346, 31), 'unicode', u'valid joinstyles are %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1346)
        tuple_73800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1346, 60), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1346)
        # Adding element type (line 1346)
        # Getting the type of 'self' (line 1346)
        self_73801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 60), 'self', False)
        # Obtaining the member 'validJoin' of a type (line 1346)
        validJoin_73802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1346, 60), self_73801, 'validJoin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1346, 60), tuple_73800, validJoin_73802)
        
        # Applying the binary operator '%' (line 1346)
        result_mod_73803 = python_operator(stypy.reporting.localization.Localization(__file__, 1346, 31), '%', unicode_73799, tuple_73800)
        
        # Applying the binary operator '+' (line 1345)
        result_add_73804 = python_operator(stypy.reporting.localization.Localization(__file__, 1345, 29), '+', result_mod_73798, result_mod_73803)
        
        # Processing the call keyword arguments (line 1345)
        kwargs_73805 = {}
        # Getting the type of 'ValueError' (line 1345)
        ValueError_73794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1345)
        ValueError_call_result_73806 = invoke(stypy.reporting.localization.Localization(__file__, 1345, 18), ValueError_73794, *[result_add_73804], **kwargs_73805)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1345, 12), ValueError_call_result_73806, 'raise parameter', BaseException)
        # SSA join for if statement (line 1344)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 1347)
        self_73807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 11), 'self')
        # Obtaining the member '_dashjoinstyle' of a type (line 1347)
        _dashjoinstyle_73808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1347, 11), self_73807, '_dashjoinstyle')
        # Getting the type of 's' (line 1347)
        s_73809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 34), 's')
        # Applying the binary operator '!=' (line 1347)
        result_ne_73810 = python_operator(stypy.reporting.localization.Localization(__file__, 1347, 11), '!=', _dashjoinstyle_73808, s_73809)
        
        # Testing the type of an if condition (line 1347)
        if_condition_73811 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1347, 8), result_ne_73810)
        # Assigning a type to the variable 'if_condition_73811' (line 1347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1347, 8), 'if_condition_73811', if_condition_73811)
        # SSA begins for if statement (line 1347)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1348):
        
        # Assigning a Name to a Attribute (line 1348):
        # Getting the type of 'True' (line 1348)
        True_73812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 25), 'True')
        # Getting the type of 'self' (line 1348)
        self_73813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 12), 'self')
        # Setting the type of the member 'stale' of a type (line 1348)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1348, 12), self_73813, 'stale', True_73812)
        # SSA join for if statement (line 1347)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1349):
        
        # Assigning a Name to a Attribute (line 1349):
        # Getting the type of 's' (line 1349)
        s_73814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 30), 's')
        # Getting the type of 'self' (line 1349)
        self_73815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 8), 'self')
        # Setting the type of the member '_dashjoinstyle' of a type (line 1349)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1349, 8), self_73815, '_dashjoinstyle', s_73814)
        
        # ################# End of 'set_dash_joinstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_dash_joinstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 1338)
        stypy_return_type_73816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73816)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_dash_joinstyle'
        return stypy_return_type_73816


    @norecursion
    def set_solid_joinstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_solid_joinstyle'
        module_type_store = module_type_store.open_function_context('set_solid_joinstyle', 1351, 4, False)
        # Assigning a type to the variable 'self' (line 1352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1352, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_solid_joinstyle.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_solid_joinstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_solid_joinstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_solid_joinstyle.__dict__.__setitem__('stypy_function_name', 'Line2D.set_solid_joinstyle')
        Line2D.set_solid_joinstyle.__dict__.__setitem__('stypy_param_names_list', ['s'])
        Line2D.set_solid_joinstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_solid_joinstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_solid_joinstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_solid_joinstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_solid_joinstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_solid_joinstyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_solid_joinstyle', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_solid_joinstyle', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_solid_joinstyle(...)' code ##################

        unicode_73817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1355, (-1)), 'unicode', u"\n        Set the join style for solid linestyles\n        ACCEPTS: ['miter' | 'round' | 'bevel']\n        ")
        
        # Assigning a Call to a Name (line 1356):
        
        # Assigning a Call to a Name (line 1356):
        
        # Call to lower(...): (line 1356)
        # Processing the call keyword arguments (line 1356)
        kwargs_73820 = {}
        # Getting the type of 's' (line 1356)
        s_73818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 12), 's', False)
        # Obtaining the member 'lower' of a type (line 1356)
        lower_73819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1356, 12), s_73818, 'lower')
        # Calling lower(args, kwargs) (line 1356)
        lower_call_result_73821 = invoke(stypy.reporting.localization.Localization(__file__, 1356, 12), lower_73819, *[], **kwargs_73820)
        
        # Assigning a type to the variable 's' (line 1356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1356, 8), 's', lower_call_result_73821)
        
        
        # Getting the type of 's' (line 1357)
        s_73822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 11), 's')
        # Getting the type of 'self' (line 1357)
        self_73823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 20), 'self')
        # Obtaining the member 'validJoin' of a type (line 1357)
        validJoin_73824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1357, 20), self_73823, 'validJoin')
        # Applying the binary operator 'notin' (line 1357)
        result_contains_73825 = python_operator(stypy.reporting.localization.Localization(__file__, 1357, 11), 'notin', s_73822, validJoin_73824)
        
        # Testing the type of an if condition (line 1357)
        if_condition_73826 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1357, 8), result_contains_73825)
        # Assigning a type to the variable 'if_condition_73826' (line 1357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1357, 8), 'if_condition_73826', if_condition_73826)
        # SSA begins for if statement (line 1357)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1358)
        # Processing the call arguments (line 1358)
        unicode_73828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1358, 29), 'unicode', u'set_solid_joinstyle passed "%s";\n')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1358)
        tuple_73829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1358, 69), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1358)
        # Adding element type (line 1358)
        # Getting the type of 's' (line 1358)
        s_73830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 69), 's', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1358, 69), tuple_73829, s_73830)
        
        # Applying the binary operator '%' (line 1358)
        result_mod_73831 = python_operator(stypy.reporting.localization.Localization(__file__, 1358, 29), '%', unicode_73828, tuple_73829)
        
        unicode_73832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1359, 31), 'unicode', u'valid joinstyles are %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1359)
        tuple_73833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1359, 60), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1359)
        # Adding element type (line 1359)
        # Getting the type of 'self' (line 1359)
        self_73834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 60), 'self', False)
        # Obtaining the member 'validJoin' of a type (line 1359)
        validJoin_73835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1359, 60), self_73834, 'validJoin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1359, 60), tuple_73833, validJoin_73835)
        
        # Applying the binary operator '%' (line 1359)
        result_mod_73836 = python_operator(stypy.reporting.localization.Localization(__file__, 1359, 31), '%', unicode_73832, tuple_73833)
        
        # Applying the binary operator '+' (line 1358)
        result_add_73837 = python_operator(stypy.reporting.localization.Localization(__file__, 1358, 29), '+', result_mod_73831, result_mod_73836)
        
        # Processing the call keyword arguments (line 1358)
        kwargs_73838 = {}
        # Getting the type of 'ValueError' (line 1358)
        ValueError_73827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1358)
        ValueError_call_result_73839 = invoke(stypy.reporting.localization.Localization(__file__, 1358, 18), ValueError_73827, *[result_add_73837], **kwargs_73838)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1358, 12), ValueError_call_result_73839, 'raise parameter', BaseException)
        # SSA join for if statement (line 1357)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 1361)
        self_73840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 11), 'self')
        # Obtaining the member '_solidjoinstyle' of a type (line 1361)
        _solidjoinstyle_73841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1361, 11), self_73840, '_solidjoinstyle')
        # Getting the type of 's' (line 1361)
        s_73842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 35), 's')
        # Applying the binary operator '!=' (line 1361)
        result_ne_73843 = python_operator(stypy.reporting.localization.Localization(__file__, 1361, 11), '!=', _solidjoinstyle_73841, s_73842)
        
        # Testing the type of an if condition (line 1361)
        if_condition_73844 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1361, 8), result_ne_73843)
        # Assigning a type to the variable 'if_condition_73844' (line 1361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'if_condition_73844', if_condition_73844)
        # SSA begins for if statement (line 1361)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1362):
        
        # Assigning a Name to a Attribute (line 1362):
        # Getting the type of 'True' (line 1362)
        True_73845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 25), 'True')
        # Getting the type of 'self' (line 1362)
        self_73846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 12), 'self')
        # Setting the type of the member 'stale' of a type (line 1362)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 12), self_73846, 'stale', True_73845)
        # SSA join for if statement (line 1361)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1363):
        
        # Assigning a Name to a Attribute (line 1363):
        # Getting the type of 's' (line 1363)
        s_73847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 31), 's')
        # Getting the type of 'self' (line 1363)
        self_73848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 8), 'self')
        # Setting the type of the member '_solidjoinstyle' of a type (line 1363)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1363, 8), self_73848, '_solidjoinstyle', s_73847)
        
        # ################# End of 'set_solid_joinstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_solid_joinstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 1351)
        stypy_return_type_73849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73849)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_solid_joinstyle'
        return stypy_return_type_73849


    @norecursion
    def get_dash_joinstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_dash_joinstyle'
        module_type_store = module_type_store.open_function_context('get_dash_joinstyle', 1365, 4, False)
        # Assigning a type to the variable 'self' (line 1366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1366, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_dash_joinstyle.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_dash_joinstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_dash_joinstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_dash_joinstyle.__dict__.__setitem__('stypy_function_name', 'Line2D.get_dash_joinstyle')
        Line2D.get_dash_joinstyle.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_dash_joinstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_dash_joinstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_dash_joinstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_dash_joinstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_dash_joinstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_dash_joinstyle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_dash_joinstyle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_dash_joinstyle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_dash_joinstyle(...)' code ##################

        unicode_73850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1368, (-1)), 'unicode', u'\n        Get the join style for dashed linestyles\n        ')
        # Getting the type of 'self' (line 1369)
        self_73851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 15), 'self')
        # Obtaining the member '_dashjoinstyle' of a type (line 1369)
        _dashjoinstyle_73852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1369, 15), self_73851, '_dashjoinstyle')
        # Assigning a type to the variable 'stypy_return_type' (line 1369)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1369, 8), 'stypy_return_type', _dashjoinstyle_73852)
        
        # ################# End of 'get_dash_joinstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_dash_joinstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 1365)
        stypy_return_type_73853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73853)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_dash_joinstyle'
        return stypy_return_type_73853


    @norecursion
    def get_solid_joinstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_solid_joinstyle'
        module_type_store = module_type_store.open_function_context('get_solid_joinstyle', 1371, 4, False)
        # Assigning a type to the variable 'self' (line 1372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1372, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_solid_joinstyle.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_solid_joinstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_solid_joinstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_solid_joinstyle.__dict__.__setitem__('stypy_function_name', 'Line2D.get_solid_joinstyle')
        Line2D.get_solid_joinstyle.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_solid_joinstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_solid_joinstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_solid_joinstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_solid_joinstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_solid_joinstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_solid_joinstyle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_solid_joinstyle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_solid_joinstyle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_solid_joinstyle(...)' code ##################

        unicode_73854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1374, (-1)), 'unicode', u'\n        Get the join style for solid linestyles\n        ')
        # Getting the type of 'self' (line 1375)
        self_73855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 15), 'self')
        # Obtaining the member '_solidjoinstyle' of a type (line 1375)
        _solidjoinstyle_73856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 15), self_73855, '_solidjoinstyle')
        # Assigning a type to the variable 'stypy_return_type' (line 1375)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1375, 8), 'stypy_return_type', _solidjoinstyle_73856)
        
        # ################# End of 'get_solid_joinstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_solid_joinstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 1371)
        stypy_return_type_73857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73857)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_solid_joinstyle'
        return stypy_return_type_73857


    @norecursion
    def set_dash_capstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_dash_capstyle'
        module_type_store = module_type_store.open_function_context('set_dash_capstyle', 1377, 4, False)
        # Assigning a type to the variable 'self' (line 1378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1378, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_dash_capstyle.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_dash_capstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_dash_capstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_dash_capstyle.__dict__.__setitem__('stypy_function_name', 'Line2D.set_dash_capstyle')
        Line2D.set_dash_capstyle.__dict__.__setitem__('stypy_param_names_list', ['s'])
        Line2D.set_dash_capstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_dash_capstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_dash_capstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_dash_capstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_dash_capstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_dash_capstyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_dash_capstyle', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_dash_capstyle', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_dash_capstyle(...)' code ##################

        unicode_73858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1382, (-1)), 'unicode', u"\n        Set the cap style for dashed linestyles\n\n        ACCEPTS: ['butt' | 'round' | 'projecting']\n        ")
        
        # Assigning a Call to a Name (line 1383):
        
        # Assigning a Call to a Name (line 1383):
        
        # Call to lower(...): (line 1383)
        # Processing the call keyword arguments (line 1383)
        kwargs_73861 = {}
        # Getting the type of 's' (line 1383)
        s_73859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 12), 's', False)
        # Obtaining the member 'lower' of a type (line 1383)
        lower_73860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1383, 12), s_73859, 'lower')
        # Calling lower(args, kwargs) (line 1383)
        lower_call_result_73862 = invoke(stypy.reporting.localization.Localization(__file__, 1383, 12), lower_73860, *[], **kwargs_73861)
        
        # Assigning a type to the variable 's' (line 1383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1383, 8), 's', lower_call_result_73862)
        
        
        # Getting the type of 's' (line 1384)
        s_73863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 11), 's')
        # Getting the type of 'self' (line 1384)
        self_73864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 20), 'self')
        # Obtaining the member 'validCap' of a type (line 1384)
        validCap_73865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1384, 20), self_73864, 'validCap')
        # Applying the binary operator 'notin' (line 1384)
        result_contains_73866 = python_operator(stypy.reporting.localization.Localization(__file__, 1384, 11), 'notin', s_73863, validCap_73865)
        
        # Testing the type of an if condition (line 1384)
        if_condition_73867 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1384, 8), result_contains_73866)
        # Assigning a type to the variable 'if_condition_73867' (line 1384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1384, 8), 'if_condition_73867', if_condition_73867)
        # SSA begins for if statement (line 1384)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1385)
        # Processing the call arguments (line 1385)
        unicode_73869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1385, 29), 'unicode', u'set_dash_capstyle passed "%s";\n')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1385)
        tuple_73870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1385, 67), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1385)
        # Adding element type (line 1385)
        # Getting the type of 's' (line 1385)
        s_73871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 67), 's', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1385, 67), tuple_73870, s_73871)
        
        # Applying the binary operator '%' (line 1385)
        result_mod_73872 = python_operator(stypy.reporting.localization.Localization(__file__, 1385, 29), '%', unicode_73869, tuple_73870)
        
        unicode_73873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1386, 31), 'unicode', u'valid capstyles are %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1386)
        tuple_73874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1386, 59), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1386)
        # Adding element type (line 1386)
        # Getting the type of 'self' (line 1386)
        self_73875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 59), 'self', False)
        # Obtaining the member 'validCap' of a type (line 1386)
        validCap_73876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1386, 59), self_73875, 'validCap')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1386, 59), tuple_73874, validCap_73876)
        
        # Applying the binary operator '%' (line 1386)
        result_mod_73877 = python_operator(stypy.reporting.localization.Localization(__file__, 1386, 31), '%', unicode_73873, tuple_73874)
        
        # Applying the binary operator '+' (line 1385)
        result_add_73878 = python_operator(stypy.reporting.localization.Localization(__file__, 1385, 29), '+', result_mod_73872, result_mod_73877)
        
        # Processing the call keyword arguments (line 1385)
        kwargs_73879 = {}
        # Getting the type of 'ValueError' (line 1385)
        ValueError_73868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1385)
        ValueError_call_result_73880 = invoke(stypy.reporting.localization.Localization(__file__, 1385, 18), ValueError_73868, *[result_add_73878], **kwargs_73879)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1385, 12), ValueError_call_result_73880, 'raise parameter', BaseException)
        # SSA join for if statement (line 1384)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 1387)
        self_73881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 11), 'self')
        # Obtaining the member '_dashcapstyle' of a type (line 1387)
        _dashcapstyle_73882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1387, 11), self_73881, '_dashcapstyle')
        # Getting the type of 's' (line 1387)
        s_73883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 33), 's')
        # Applying the binary operator '!=' (line 1387)
        result_ne_73884 = python_operator(stypy.reporting.localization.Localization(__file__, 1387, 11), '!=', _dashcapstyle_73882, s_73883)
        
        # Testing the type of an if condition (line 1387)
        if_condition_73885 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1387, 8), result_ne_73884)
        # Assigning a type to the variable 'if_condition_73885' (line 1387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1387, 8), 'if_condition_73885', if_condition_73885)
        # SSA begins for if statement (line 1387)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1388):
        
        # Assigning a Name to a Attribute (line 1388):
        # Getting the type of 'True' (line 1388)
        True_73886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 25), 'True')
        # Getting the type of 'self' (line 1388)
        self_73887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 12), 'self')
        # Setting the type of the member 'stale' of a type (line 1388)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 12), self_73887, 'stale', True_73886)
        # SSA join for if statement (line 1387)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1389):
        
        # Assigning a Name to a Attribute (line 1389):
        # Getting the type of 's' (line 1389)
        s_73888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 29), 's')
        # Getting the type of 'self' (line 1389)
        self_73889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 8), 'self')
        # Setting the type of the member '_dashcapstyle' of a type (line 1389)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1389, 8), self_73889, '_dashcapstyle', s_73888)
        
        # ################# End of 'set_dash_capstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_dash_capstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 1377)
        stypy_return_type_73890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73890)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_dash_capstyle'
        return stypy_return_type_73890


    @norecursion
    def set_solid_capstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_solid_capstyle'
        module_type_store = module_type_store.open_function_context('set_solid_capstyle', 1391, 4, False)
        # Assigning a type to the variable 'self' (line 1392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.set_solid_capstyle.__dict__.__setitem__('stypy_localization', localization)
        Line2D.set_solid_capstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.set_solid_capstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.set_solid_capstyle.__dict__.__setitem__('stypy_function_name', 'Line2D.set_solid_capstyle')
        Line2D.set_solid_capstyle.__dict__.__setitem__('stypy_param_names_list', ['s'])
        Line2D.set_solid_capstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.set_solid_capstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.set_solid_capstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.set_solid_capstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.set_solid_capstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.set_solid_capstyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.set_solid_capstyle', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_solid_capstyle', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_solid_capstyle(...)' code ##################

        unicode_73891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1396, (-1)), 'unicode', u"\n        Set the cap style for solid linestyles\n\n        ACCEPTS: ['butt' | 'round' |  'projecting']\n        ")
        
        # Assigning a Call to a Name (line 1397):
        
        # Assigning a Call to a Name (line 1397):
        
        # Call to lower(...): (line 1397)
        # Processing the call keyword arguments (line 1397)
        kwargs_73894 = {}
        # Getting the type of 's' (line 1397)
        s_73892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 12), 's', False)
        # Obtaining the member 'lower' of a type (line 1397)
        lower_73893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1397, 12), s_73892, 'lower')
        # Calling lower(args, kwargs) (line 1397)
        lower_call_result_73895 = invoke(stypy.reporting.localization.Localization(__file__, 1397, 12), lower_73893, *[], **kwargs_73894)
        
        # Assigning a type to the variable 's' (line 1397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 8), 's', lower_call_result_73895)
        
        
        # Getting the type of 's' (line 1398)
        s_73896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 11), 's')
        # Getting the type of 'self' (line 1398)
        self_73897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 20), 'self')
        # Obtaining the member 'validCap' of a type (line 1398)
        validCap_73898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1398, 20), self_73897, 'validCap')
        # Applying the binary operator 'notin' (line 1398)
        result_contains_73899 = python_operator(stypy.reporting.localization.Localization(__file__, 1398, 11), 'notin', s_73896, validCap_73898)
        
        # Testing the type of an if condition (line 1398)
        if_condition_73900 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1398, 8), result_contains_73899)
        # Assigning a type to the variable 'if_condition_73900' (line 1398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 8), 'if_condition_73900', if_condition_73900)
        # SSA begins for if statement (line 1398)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1399)
        # Processing the call arguments (line 1399)
        unicode_73902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1399, 29), 'unicode', u'set_solid_capstyle passed "%s";\n')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1399)
        tuple_73903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1399, 68), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1399)
        # Adding element type (line 1399)
        # Getting the type of 's' (line 1399)
        s_73904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 68), 's', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1399, 68), tuple_73903, s_73904)
        
        # Applying the binary operator '%' (line 1399)
        result_mod_73905 = python_operator(stypy.reporting.localization.Localization(__file__, 1399, 29), '%', unicode_73902, tuple_73903)
        
        unicode_73906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 31), 'unicode', u'valid capstyles are %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1400)
        tuple_73907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 59), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1400)
        # Adding element type (line 1400)
        # Getting the type of 'self' (line 1400)
        self_73908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 59), 'self', False)
        # Obtaining the member 'validCap' of a type (line 1400)
        validCap_73909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 59), self_73908, 'validCap')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 59), tuple_73907, validCap_73909)
        
        # Applying the binary operator '%' (line 1400)
        result_mod_73910 = python_operator(stypy.reporting.localization.Localization(__file__, 1400, 31), '%', unicode_73906, tuple_73907)
        
        # Applying the binary operator '+' (line 1399)
        result_add_73911 = python_operator(stypy.reporting.localization.Localization(__file__, 1399, 29), '+', result_mod_73905, result_mod_73910)
        
        # Processing the call keyword arguments (line 1399)
        kwargs_73912 = {}
        # Getting the type of 'ValueError' (line 1399)
        ValueError_73901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1399)
        ValueError_call_result_73913 = invoke(stypy.reporting.localization.Localization(__file__, 1399, 18), ValueError_73901, *[result_add_73911], **kwargs_73912)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1399, 12), ValueError_call_result_73913, 'raise parameter', BaseException)
        # SSA join for if statement (line 1398)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 1401)
        self_73914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 11), 'self')
        # Obtaining the member '_solidcapstyle' of a type (line 1401)
        _solidcapstyle_73915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1401, 11), self_73914, '_solidcapstyle')
        # Getting the type of 's' (line 1401)
        s_73916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 34), 's')
        # Applying the binary operator '!=' (line 1401)
        result_ne_73917 = python_operator(stypy.reporting.localization.Localization(__file__, 1401, 11), '!=', _solidcapstyle_73915, s_73916)
        
        # Testing the type of an if condition (line 1401)
        if_condition_73918 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1401, 8), result_ne_73917)
        # Assigning a type to the variable 'if_condition_73918' (line 1401)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1401, 8), 'if_condition_73918', if_condition_73918)
        # SSA begins for if statement (line 1401)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1402):
        
        # Assigning a Name to a Attribute (line 1402):
        # Getting the type of 'True' (line 1402)
        True_73919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 25), 'True')
        # Getting the type of 'self' (line 1402)
        self_73920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 12), 'self')
        # Setting the type of the member 'stale' of a type (line 1402)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1402, 12), self_73920, 'stale', True_73919)
        # SSA join for if statement (line 1401)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1403):
        
        # Assigning a Name to a Attribute (line 1403):
        # Getting the type of 's' (line 1403)
        s_73921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 30), 's')
        # Getting the type of 'self' (line 1403)
        self_73922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 8), 'self')
        # Setting the type of the member '_solidcapstyle' of a type (line 1403)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1403, 8), self_73922, '_solidcapstyle', s_73921)
        
        # ################# End of 'set_solid_capstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_solid_capstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 1391)
        stypy_return_type_73923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73923)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_solid_capstyle'
        return stypy_return_type_73923


    @norecursion
    def get_dash_capstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_dash_capstyle'
        module_type_store = module_type_store.open_function_context('get_dash_capstyle', 1405, 4, False)
        # Assigning a type to the variable 'self' (line 1406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1406, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_dash_capstyle.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_dash_capstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_dash_capstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_dash_capstyle.__dict__.__setitem__('stypy_function_name', 'Line2D.get_dash_capstyle')
        Line2D.get_dash_capstyle.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_dash_capstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_dash_capstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_dash_capstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_dash_capstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_dash_capstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_dash_capstyle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_dash_capstyle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_dash_capstyle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_dash_capstyle(...)' code ##################

        unicode_73924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1408, (-1)), 'unicode', u'\n        Get the cap style for dashed linestyles\n        ')
        # Getting the type of 'self' (line 1409)
        self_73925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 15), 'self')
        # Obtaining the member '_dashcapstyle' of a type (line 1409)
        _dashcapstyle_73926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 15), self_73925, '_dashcapstyle')
        # Assigning a type to the variable 'stypy_return_type' (line 1409)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1409, 8), 'stypy_return_type', _dashcapstyle_73926)
        
        # ################# End of 'get_dash_capstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_dash_capstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 1405)
        stypy_return_type_73927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73927)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_dash_capstyle'
        return stypy_return_type_73927


    @norecursion
    def get_solid_capstyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_solid_capstyle'
        module_type_store = module_type_store.open_function_context('get_solid_capstyle', 1411, 4, False)
        # Assigning a type to the variable 'self' (line 1412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1412, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.get_solid_capstyle.__dict__.__setitem__('stypy_localization', localization)
        Line2D.get_solid_capstyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.get_solid_capstyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.get_solid_capstyle.__dict__.__setitem__('stypy_function_name', 'Line2D.get_solid_capstyle')
        Line2D.get_solid_capstyle.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.get_solid_capstyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.get_solid_capstyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.get_solid_capstyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.get_solid_capstyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.get_solid_capstyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.get_solid_capstyle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.get_solid_capstyle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_solid_capstyle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_solid_capstyle(...)' code ##################

        unicode_73928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1414, (-1)), 'unicode', u'\n        Get the cap style for solid linestyles\n        ')
        # Getting the type of 'self' (line 1415)
        self_73929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 15), 'self')
        # Obtaining the member '_solidcapstyle' of a type (line 1415)
        _solidcapstyle_73930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1415, 15), self_73929, '_solidcapstyle')
        # Assigning a type to the variable 'stypy_return_type' (line 1415)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1415, 8), 'stypy_return_type', _solidcapstyle_73930)
        
        # ################# End of 'get_solid_capstyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_solid_capstyle' in the type store
        # Getting the type of 'stypy_return_type' (line 1411)
        stypy_return_type_73931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73931)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_solid_capstyle'
        return stypy_return_type_73931


    @norecursion
    def is_dashed(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'is_dashed'
        module_type_store = module_type_store.open_function_context('is_dashed', 1417, 4, False)
        # Assigning a type to the variable 'self' (line 1418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1418, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Line2D.is_dashed.__dict__.__setitem__('stypy_localization', localization)
        Line2D.is_dashed.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Line2D.is_dashed.__dict__.__setitem__('stypy_type_store', module_type_store)
        Line2D.is_dashed.__dict__.__setitem__('stypy_function_name', 'Line2D.is_dashed')
        Line2D.is_dashed.__dict__.__setitem__('stypy_param_names_list', [])
        Line2D.is_dashed.__dict__.__setitem__('stypy_varargs_param_name', None)
        Line2D.is_dashed.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Line2D.is_dashed.__dict__.__setitem__('stypy_call_defaults', defaults)
        Line2D.is_dashed.__dict__.__setitem__('stypy_call_varargs', varargs)
        Line2D.is_dashed.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Line2D.is_dashed.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Line2D.is_dashed', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'is_dashed', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'is_dashed(...)' code ##################

        unicode_73932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1418, 8), 'unicode', u'return True if line is dashstyle')
        
        # Getting the type of 'self' (line 1419)
        self_73933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 15), 'self')
        # Obtaining the member '_linestyle' of a type (line 1419)
        _linestyle_73934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 15), self_73933, '_linestyle')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1419)
        tuple_73935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1419, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1419)
        # Adding element type (line 1419)
        unicode_73936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1419, 35), 'unicode', u'--')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1419, 35), tuple_73935, unicode_73936)
        # Adding element type (line 1419)
        unicode_73937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1419, 41), 'unicode', u'-.')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1419, 35), tuple_73935, unicode_73937)
        # Adding element type (line 1419)
        unicode_73938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1419, 47), 'unicode', u':')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1419, 35), tuple_73935, unicode_73938)
        
        # Applying the binary operator 'in' (line 1419)
        result_contains_73939 = python_operator(stypy.reporting.localization.Localization(__file__, 1419, 15), 'in', _linestyle_73934, tuple_73935)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1419, 8), 'stypy_return_type', result_contains_73939)
        
        # ################# End of 'is_dashed(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'is_dashed' in the type store
        # Getting the type of 'stypy_return_type' (line 1417)
        stypy_return_type_73940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_73940)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'is_dashed'
        return stypy_return_type_73940


# Assigning a type to the variable 'Line2D' (line 234)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 0), 'Line2D', Line2D)

# Assigning a Dict to a Name (line 243):

# Obtaining an instance of the builtin type 'dict' (line 243)
dict_73941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 243, 31), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 243)
# Adding element type (key, value) (line 243)
unicode_73942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 8), 'unicode', u'-')
unicode_73943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 16), 'unicode', u'_draw_solid')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 243, 31), dict_73941, (unicode_73942, unicode_73943))
# Adding element type (key, value) (line 243)
unicode_73944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 245, 8), 'unicode', u'--')
unicode_73945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 245, 16), 'unicode', u'_draw_dashed')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 243, 31), dict_73941, (unicode_73944, unicode_73945))
# Adding element type (key, value) (line 243)
unicode_73946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 8), 'unicode', u'-.')
unicode_73947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 16), 'unicode', u'_draw_dash_dot')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 243, 31), dict_73941, (unicode_73946, unicode_73947))
# Adding element type (key, value) (line 243)
unicode_73948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 8), 'unicode', u':')
unicode_73949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 16), 'unicode', u'_draw_dotted')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 243, 31), dict_73941, (unicode_73948, unicode_73949))
# Adding element type (key, value) (line 243)
unicode_73950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 8), 'unicode', u'None')
unicode_73951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 16), 'unicode', u'_draw_nothing')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 243, 31), dict_73941, (unicode_73950, unicode_73951))
# Adding element type (key, value) (line 243)
unicode_73952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 249, 8), 'unicode', u' ')
unicode_73953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 249, 16), 'unicode', u'_draw_nothing')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 243, 31), dict_73941, (unicode_73952, unicode_73953))
# Adding element type (key, value) (line 243)
unicode_73954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 250, 8), 'unicode', u'')
unicode_73955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 250, 16), 'unicode', u'_draw_nothing')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 243, 31), dict_73941, (unicode_73954, unicode_73955))

# Getting the type of 'Line2D'
Line2D_73956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D')
# Setting the type of the member '_lineStyles' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_73956, '_lineStyles', dict_73941)

# Assigning a Name to a Name (line 243):
# Getting the type of 'Line2D'
Line2D_73957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D')
# Obtaining the member '_lineStyles' of a type
_lineStyles_73958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_73957, '_lineStyles')
# Getting the type of 'Line2D'
Line2D_73959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D')
# Setting the type of the member 'lineStyles' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_73959, 'lineStyles', _lineStyles_73958)

# Assigning a Dict to a Name (line 253):

# Obtaining an instance of the builtin type 'dict' (line 253)
dict_73960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 253, 20), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 253)
# Adding element type (key, value) (line 253)
unicode_73961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 8), 'unicode', u'default')
unicode_73962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 22), 'unicode', u'_draw_lines')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 253, 20), dict_73960, (unicode_73961, unicode_73962))
# Adding element type (key, value) (line 253)
unicode_73963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 8), 'unicode', u'steps-mid')
unicode_73964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 22), 'unicode', u'_draw_steps_mid')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 253, 20), dict_73960, (unicode_73963, unicode_73964))
# Adding element type (key, value) (line 253)
unicode_73965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 8), 'unicode', u'steps-pre')
unicode_73966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 22), 'unicode', u'_draw_steps_pre')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 253, 20), dict_73960, (unicode_73965, unicode_73966))
# Adding element type (key, value) (line 253)
unicode_73967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 257, 8), 'unicode', u'steps-post')
unicode_73968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 257, 22), 'unicode', u'_draw_steps_post')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 253, 20), dict_73960, (unicode_73967, unicode_73968))

# Getting the type of 'Line2D'
Line2D_73969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D')
# Setting the type of the member '_drawStyles_l' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_73969, '_drawStyles_l', dict_73960)

# Assigning a Dict to a Name (line 260):

# Obtaining an instance of the builtin type 'dict' (line 260)
dict_73970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 260, 20), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 260)
# Adding element type (key, value) (line 260)
unicode_73971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 261, 8), 'unicode', u'steps')
unicode_73972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 261, 17), 'unicode', u'_draw_steps_pre')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 260, 20), dict_73970, (unicode_73971, unicode_73972))

# Getting the type of 'Line2D'
Line2D_73973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D')
# Setting the type of the member '_drawStyles_s' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_73973, '_drawStyles_s', dict_73970)

# Assigning a Dict to a Name (line 265):

# Obtaining an instance of the builtin type 'dict' (line 265)
dict_73974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 265, 17), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 265)

# Getting the type of 'Line2D'
Line2D_73975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D')
# Setting the type of the member 'drawStyles' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_73975, 'drawStyles', dict_73974)

# Assigning a Dict to a Name (line 265):

# Call to update(...): (line 266)
# Processing the call arguments (line 266)
# Getting the type of 'Line2D'
Line2D_73979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D', False)
# Obtaining the member '_drawStyles_l' of a type
_drawStyles_l_73980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_73979, '_drawStyles_l')
# Processing the call keyword arguments (line 266)
kwargs_73981 = {}
# Getting the type of 'Line2D'
Line2D_73976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D', False)
# Obtaining the member 'drawStyles' of a type
drawStyles_73977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_73976, 'drawStyles')
# Obtaining the member 'update' of a type (line 266)
update_73978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 266, 4), drawStyles_73977, 'update')
# Calling update(args, kwargs) (line 266)
update_call_result_73982 = invoke(stypy.reporting.localization.Localization(__file__, 266, 4), update_73978, *[_drawStyles_l_73980], **kwargs_73981)


# Assigning a Dict to a Name (line 260):

# Call to update(...): (line 267)
# Processing the call arguments (line 267)
# Getting the type of 'Line2D'
Line2D_73986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D', False)
# Obtaining the member '_drawStyles_s' of a type
_drawStyles_s_73987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_73986, '_drawStyles_s')
# Processing the call keyword arguments (line 267)
kwargs_73988 = {}
# Getting the type of 'Line2D'
Line2D_73983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D', False)
# Obtaining the member 'drawStyles' of a type
drawStyles_73984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_73983, 'drawStyles')
# Obtaining the member 'update' of a type (line 267)
update_73985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 267, 4), drawStyles_73984, 'update')
# Calling update(args, kwargs) (line 267)
update_call_result_73989 = invoke(stypy.reporting.localization.Localization(__file__, 267, 4), update_73985, *[_drawStyles_s_73987], **kwargs_73988)


# Assigning a BinOp to a Name (line 269):

# Call to list(...): (line 269)
# Processing the call arguments (line 269)
# Getting the type of 'Line2D'
Line2D_73991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D', False)
# Obtaining the member '_drawStyles_l' of a type
_drawStyles_l_73992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_73991, '_drawStyles_l')
# Processing the call keyword arguments (line 269)
kwargs_73993 = {}
# Getting the type of 'list' (line 269)
list_73990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 20), 'list', False)
# Calling list(args, kwargs) (line 269)
list_call_result_73994 = invoke(stypy.reporting.localization.Localization(__file__, 269, 20), list_73990, *[_drawStyles_l_73992], **kwargs_73993)


# Call to list(...): (line 269)
# Processing the call arguments (line 269)
# Getting the type of 'Line2D'
Line2D_73996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D', False)
# Obtaining the member '_drawStyles_s' of a type
_drawStyles_s_73997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_73996, '_drawStyles_s')
# Processing the call keyword arguments (line 269)
kwargs_73998 = {}
# Getting the type of 'list' (line 269)
list_73995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 42), 'list', False)
# Calling list(args, kwargs) (line 269)
list_call_result_73999 = invoke(stypy.reporting.localization.Localization(__file__, 269, 42), list_73995, *[_drawStyles_s_73997], **kwargs_73998)

# Applying the binary operator '+' (line 269)
result_add_74000 = python_operator(stypy.reporting.localization.Localization(__file__, 269, 20), '+', list_call_result_73994, list_call_result_73999)

# Getting the type of 'Line2D'
Line2D_74001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D')
# Setting the type of the member 'drawStyleKeys' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_74001, 'drawStyleKeys', result_add_74000)

# Assigning a Attribute to a Name (line 273):
# Getting the type of 'MarkerStyle' (line 273)
MarkerStyle_74002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 14), 'MarkerStyle')
# Obtaining the member 'markers' of a type (line 273)
markers_74003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 273, 14), MarkerStyle_74002, 'markers')
# Getting the type of 'Line2D'
Line2D_74004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D')
# Setting the type of the member 'markers' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_74004, 'markers', markers_74003)

# Assigning a Attribute to a Name (line 274):
# Getting the type of 'MarkerStyle' (line 274)
MarkerStyle_74005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 21), 'MarkerStyle')
# Obtaining the member 'filled_markers' of a type (line 274)
filled_markers_74006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 21), MarkerStyle_74005, 'filled_markers')
# Getting the type of 'Line2D'
Line2D_74007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D')
# Setting the type of the member 'filled_markers' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_74007, 'filled_markers', filled_markers_74006)

# Assigning a Attribute to a Name (line 275):
# Getting the type of 'MarkerStyle' (line 275)
MarkerStyle_74008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 17), 'MarkerStyle')
# Obtaining the member 'fillstyles' of a type (line 275)
fillstyles_74009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 17), MarkerStyle_74008, 'fillstyles')
# Getting the type of 'Line2D'
Line2D_74010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D')
# Setting the type of the member 'fillStyles' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_74010, 'fillStyles', fillstyles_74009)

# Assigning a Num to a Name (line 277):
int_74011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 13), 'int')
# Getting the type of 'Line2D'
Line2D_74012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D')
# Setting the type of the member 'zorder' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_74012, 'zorder', int_74011)

# Assigning a Tuple to a Name (line 278):

# Obtaining an instance of the builtin type 'tuple' (line 278)
tuple_74013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 16), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 278)
# Adding element type (line 278)
unicode_74014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 16), 'unicode', u'butt')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 278, 16), tuple_74013, unicode_74014)
# Adding element type (line 278)
unicode_74015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 24), 'unicode', u'round')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 278, 16), tuple_74013, unicode_74015)
# Adding element type (line 278)
unicode_74016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 33), 'unicode', u'projecting')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 278, 16), tuple_74013, unicode_74016)

# Getting the type of 'Line2D'
Line2D_74017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D')
# Setting the type of the member 'validCap' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_74017, 'validCap', tuple_74013)

# Assigning a Tuple to a Name (line 279):

# Obtaining an instance of the builtin type 'tuple' (line 279)
tuple_74018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 17), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 279)
# Adding element type (line 279)
unicode_74019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 17), 'unicode', u'miter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 279, 17), tuple_74018, unicode_74019)
# Adding element type (line 279)
unicode_74020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 26), 'unicode', u'round')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 279, 17), tuple_74018, unicode_74020)
# Adding element type (line 279)
unicode_74021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 35), 'unicode', u'bevel')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 279, 17), tuple_74018, unicode_74021)

# Getting the type of 'Line2D'
Line2D_74022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Line2D')
# Setting the type of the member 'validJoin' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Line2D_74022, 'validJoin', tuple_74018)
# Declaration of the 'VertexSelector' class

class VertexSelector(object, ):
    unicode_74023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1453, (-1)), 'unicode', u"\n    Manage the callbacks to maintain a list of selected vertices for\n    :class:`matplotlib.lines.Line2D`. Derived classes should override\n    :meth:`~matplotlib.lines.VertexSelector.process_selected` to do\n    something with the picks.\n\n    Here is an example which highlights the selected verts with red\n    circles::\n\n        import numpy as np\n        import matplotlib.pyplot as plt\n        import matplotlib.lines as lines\n\n        class HighlightSelected(lines.VertexSelector):\n            def __init__(self, line, fmt='ro', **kwargs):\n                lines.VertexSelector.__init__(self, line)\n                self.markers, = self.axes.plot([], [], fmt, **kwargs)\n\n            def process_selected(self, ind, xs, ys):\n                self.markers.set_data(xs, ys)\n                self.canvas.draw()\n\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n        x, y = np.random.rand(2, 30)\n        line, = ax.plot(x, y, 'bs-', picker=5)\n\n        selector = HighlightSelected(line)\n        plt.show()\n\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1454, 4, False)
        # Assigning a type to the variable 'self' (line 1455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'VertexSelector.__init__', ['line'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['line'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_74024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1460, (-1)), 'unicode', u'\n        Initialize the class with a :class:`matplotlib.lines.Line2D`\n        instance.  The line should already be added to some\n        :class:`matplotlib.axes.Axes` instance and should have the\n        picker property set.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1461)
        # Getting the type of 'line' (line 1461)
        line_74025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 11), 'line')
        # Obtaining the member 'axes' of a type (line 1461)
        axes_74026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 11), line_74025, 'axes')
        # Getting the type of 'None' (line 1461)
        None_74027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 24), 'None')
        
        (may_be_74028, more_types_in_union_74029) = may_be_none(axes_74026, None_74027)

        if may_be_74028:

            if more_types_in_union_74029:
                # Runtime conditional SSA (line 1461)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to RuntimeError(...): (line 1462)
            # Processing the call arguments (line 1462)
            unicode_74031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1462, 31), 'unicode', u'You must first add the line to the Axes')
            # Processing the call keyword arguments (line 1462)
            kwargs_74032 = {}
            # Getting the type of 'RuntimeError' (line 1462)
            RuntimeError_74030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 18), 'RuntimeError', False)
            # Calling RuntimeError(args, kwargs) (line 1462)
            RuntimeError_call_result_74033 = invoke(stypy.reporting.localization.Localization(__file__, 1462, 18), RuntimeError_74030, *[unicode_74031], **kwargs_74032)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1462, 12), RuntimeError_call_result_74033, 'raise parameter', BaseException)

            if more_types_in_union_74029:
                # SSA join for if statement (line 1461)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1464)
        
        # Call to get_picker(...): (line 1464)
        # Processing the call keyword arguments (line 1464)
        kwargs_74036 = {}
        # Getting the type of 'line' (line 1464)
        line_74034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 11), 'line', False)
        # Obtaining the member 'get_picker' of a type (line 1464)
        get_picker_74035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1464, 11), line_74034, 'get_picker')
        # Calling get_picker(args, kwargs) (line 1464)
        get_picker_call_result_74037 = invoke(stypy.reporting.localization.Localization(__file__, 1464, 11), get_picker_74035, *[], **kwargs_74036)
        
        # Getting the type of 'None' (line 1464)
        None_74038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 32), 'None')
        
        (may_be_74039, more_types_in_union_74040) = may_be_none(get_picker_call_result_74037, None_74038)

        if may_be_74039:

            if more_types_in_union_74040:
                # Runtime conditional SSA (line 1464)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to RuntimeError(...): (line 1465)
            # Processing the call arguments (line 1465)
            unicode_74042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1465, 31), 'unicode', u'You must first set the picker property of the line')
            # Processing the call keyword arguments (line 1465)
            kwargs_74043 = {}
            # Getting the type of 'RuntimeError' (line 1465)
            RuntimeError_74041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 18), 'RuntimeError', False)
            # Calling RuntimeError(args, kwargs) (line 1465)
            RuntimeError_call_result_74044 = invoke(stypy.reporting.localization.Localization(__file__, 1465, 18), RuntimeError_74041, *[unicode_74042], **kwargs_74043)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1465, 12), RuntimeError_call_result_74044, 'raise parameter', BaseException)

            if more_types_in_union_74040:
                # SSA join for if statement (line 1464)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Attribute (line 1468):
        
        # Assigning a Attribute to a Attribute (line 1468):
        # Getting the type of 'line' (line 1468)
        line_74045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 20), 'line')
        # Obtaining the member 'axes' of a type (line 1468)
        axes_74046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 20), line_74045, 'axes')
        # Getting the type of 'self' (line 1468)
        self_74047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 8), 'self')
        # Setting the type of the member 'axes' of a type (line 1468)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 8), self_74047, 'axes', axes_74046)
        
        # Assigning a Name to a Attribute (line 1469):
        
        # Assigning a Name to a Attribute (line 1469):
        # Getting the type of 'line' (line 1469)
        line_74048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 20), 'line')
        # Getting the type of 'self' (line 1469)
        self_74049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 8), 'self')
        # Setting the type of the member 'line' of a type (line 1469)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1469, 8), self_74049, 'line', line_74048)
        
        # Assigning a Attribute to a Attribute (line 1470):
        
        # Assigning a Attribute to a Attribute (line 1470):
        # Getting the type of 'self' (line 1470)
        self_74050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 22), 'self')
        # Obtaining the member 'axes' of a type (line 1470)
        axes_74051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1470, 22), self_74050, 'axes')
        # Obtaining the member 'figure' of a type (line 1470)
        figure_74052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1470, 22), axes_74051, 'figure')
        # Obtaining the member 'canvas' of a type (line 1470)
        canvas_74053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1470, 22), figure_74052, 'canvas')
        # Getting the type of 'self' (line 1470)
        self_74054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 8), 'self')
        # Setting the type of the member 'canvas' of a type (line 1470)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1470, 8), self_74054, 'canvas', canvas_74053)
        
        # Assigning a Call to a Attribute (line 1471):
        
        # Assigning a Call to a Attribute (line 1471):
        
        # Call to mpl_connect(...): (line 1471)
        # Processing the call arguments (line 1471)
        unicode_74058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 43), 'unicode', u'pick_event')
        # Getting the type of 'self' (line 1471)
        self_74059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 57), 'self', False)
        # Obtaining the member 'onpick' of a type (line 1471)
        onpick_74060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 57), self_74059, 'onpick')
        # Processing the call keyword arguments (line 1471)
        kwargs_74061 = {}
        # Getting the type of 'self' (line 1471)
        self_74055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 19), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1471)
        canvas_74056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 19), self_74055, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 1471)
        mpl_connect_74057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 19), canvas_74056, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 1471)
        mpl_connect_call_result_74062 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 19), mpl_connect_74057, *[unicode_74058, onpick_74060], **kwargs_74061)
        
        # Getting the type of 'self' (line 1471)
        self_74063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 'self')
        # Setting the type of the member 'cid' of a type (line 1471)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 8), self_74063, 'cid', mpl_connect_call_result_74062)
        
        # Assigning a Call to a Attribute (line 1473):
        
        # Assigning a Call to a Attribute (line 1473):
        
        # Call to set(...): (line 1473)
        # Processing the call keyword arguments (line 1473)
        kwargs_74065 = {}
        # Getting the type of 'set' (line 1473)
        set_74064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 19), 'set', False)
        # Calling set(args, kwargs) (line 1473)
        set_call_result_74066 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 19), set_74064, *[], **kwargs_74065)
        
        # Getting the type of 'self' (line 1473)
        self_74067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 8), 'self')
        # Setting the type of the member 'ind' of a type (line 1473)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 8), self_74067, 'ind', set_call_result_74066)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def process_selected(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'process_selected'
        module_type_store = module_type_store.open_function_context('process_selected', 1475, 4, False)
        # Assigning a type to the variable 'self' (line 1476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1476, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        VertexSelector.process_selected.__dict__.__setitem__('stypy_localization', localization)
        VertexSelector.process_selected.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        VertexSelector.process_selected.__dict__.__setitem__('stypy_type_store', module_type_store)
        VertexSelector.process_selected.__dict__.__setitem__('stypy_function_name', 'VertexSelector.process_selected')
        VertexSelector.process_selected.__dict__.__setitem__('stypy_param_names_list', ['ind', 'xs', 'ys'])
        VertexSelector.process_selected.__dict__.__setitem__('stypy_varargs_param_name', None)
        VertexSelector.process_selected.__dict__.__setitem__('stypy_kwargs_param_name', None)
        VertexSelector.process_selected.__dict__.__setitem__('stypy_call_defaults', defaults)
        VertexSelector.process_selected.__dict__.__setitem__('stypy_call_varargs', varargs)
        VertexSelector.process_selected.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        VertexSelector.process_selected.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'VertexSelector.process_selected', ['ind', 'xs', 'ys'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'process_selected', localization, ['ind', 'xs', 'ys'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'process_selected(...)' code ##################

        unicode_74068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1482, (-1)), 'unicode', u'\n        Default "do nothing" implementation of the\n        :meth:`process_selected` method.\n\n        *ind* are the indices of the selected vertices.  *xs* and *ys*\n        are the coordinates of the selected vertices.\n        ')
        pass
        
        # ################# End of 'process_selected(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'process_selected' in the type store
        # Getting the type of 'stypy_return_type' (line 1475)
        stypy_return_type_74069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_74069)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'process_selected'
        return stypy_return_type_74069


    @norecursion
    def onpick(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'onpick'
        module_type_store = module_type_store.open_function_context('onpick', 1485, 4, False)
        # Assigning a type to the variable 'self' (line 1486)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1486, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        VertexSelector.onpick.__dict__.__setitem__('stypy_localization', localization)
        VertexSelector.onpick.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        VertexSelector.onpick.__dict__.__setitem__('stypy_type_store', module_type_store)
        VertexSelector.onpick.__dict__.__setitem__('stypy_function_name', 'VertexSelector.onpick')
        VertexSelector.onpick.__dict__.__setitem__('stypy_param_names_list', ['event'])
        VertexSelector.onpick.__dict__.__setitem__('stypy_varargs_param_name', None)
        VertexSelector.onpick.__dict__.__setitem__('stypy_kwargs_param_name', None)
        VertexSelector.onpick.__dict__.__setitem__('stypy_call_defaults', defaults)
        VertexSelector.onpick.__dict__.__setitem__('stypy_call_varargs', varargs)
        VertexSelector.onpick.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        VertexSelector.onpick.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'VertexSelector.onpick', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'onpick', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'onpick(...)' code ##################

        unicode_74070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1486, 8), 'unicode', u'When the line is picked, update the set of selected indicies.')
        
        
        # Getting the type of 'event' (line 1487)
        event_74071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 11), 'event')
        # Obtaining the member 'artist' of a type (line 1487)
        artist_74072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1487, 11), event_74071, 'artist')
        # Getting the type of 'self' (line 1487)
        self_74073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 31), 'self')
        # Obtaining the member 'line' of a type (line 1487)
        line_74074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1487, 31), self_74073, 'line')
        # Applying the binary operator 'isnot' (line 1487)
        result_is_not_74075 = python_operator(stypy.reporting.localization.Localization(__file__, 1487, 11), 'isnot', artist_74072, line_74074)
        
        # Testing the type of an if condition (line 1487)
        if_condition_74076 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1487, 8), result_is_not_74075)
        # Assigning a type to the variable 'if_condition_74076' (line 1487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1487, 8), 'if_condition_74076', if_condition_74076)
        # SSA begins for if statement (line 1487)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1488, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1487)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1489)
        self_74077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 8), 'self')
        # Obtaining the member 'ind' of a type (line 1489)
        ind_74078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1489, 8), self_74077, 'ind')
        
        # Call to set(...): (line 1489)
        # Processing the call arguments (line 1489)
        # Getting the type of 'event' (line 1489)
        event_74080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 24), 'event', False)
        # Obtaining the member 'ind' of a type (line 1489)
        ind_74081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1489, 24), event_74080, 'ind')
        # Processing the call keyword arguments (line 1489)
        kwargs_74082 = {}
        # Getting the type of 'set' (line 1489)
        set_74079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 20), 'set', False)
        # Calling set(args, kwargs) (line 1489)
        set_call_result_74083 = invoke(stypy.reporting.localization.Localization(__file__, 1489, 20), set_74079, *[ind_74081], **kwargs_74082)
        
        # Applying the binary operator '^=' (line 1489)
        result_ixor_74084 = python_operator(stypy.reporting.localization.Localization(__file__, 1489, 8), '^=', ind_74078, set_call_result_74083)
        # Getting the type of 'self' (line 1489)
        self_74085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 8), 'self')
        # Setting the type of the member 'ind' of a type (line 1489)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1489, 8), self_74085, 'ind', result_ixor_74084)
        
        
        # Assigning a Call to a Name (line 1490):
        
        # Assigning a Call to a Name (line 1490):
        
        # Call to sorted(...): (line 1490)
        # Processing the call arguments (line 1490)
        # Getting the type of 'self' (line 1490)
        self_74087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 21), 'self', False)
        # Obtaining the member 'ind' of a type (line 1490)
        ind_74088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1490, 21), self_74087, 'ind')
        # Processing the call keyword arguments (line 1490)
        kwargs_74089 = {}
        # Getting the type of 'sorted' (line 1490)
        sorted_74086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 14), 'sorted', False)
        # Calling sorted(args, kwargs) (line 1490)
        sorted_call_result_74090 = invoke(stypy.reporting.localization.Localization(__file__, 1490, 14), sorted_74086, *[ind_74088], **kwargs_74089)
        
        # Assigning a type to the variable 'ind' (line 1490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1490, 8), 'ind', sorted_call_result_74090)
        
        # Assigning a Call to a Tuple (line 1491):
        
        # Assigning a Call to a Name:
        
        # Call to get_data(...): (line 1491)
        # Processing the call keyword arguments (line 1491)
        kwargs_74094 = {}
        # Getting the type of 'self' (line 1491)
        self_74091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 23), 'self', False)
        # Obtaining the member 'line' of a type (line 1491)
        line_74092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 23), self_74091, 'line')
        # Obtaining the member 'get_data' of a type (line 1491)
        get_data_74093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 23), line_74092, 'get_data')
        # Calling get_data(args, kwargs) (line 1491)
        get_data_call_result_74095 = invoke(stypy.reporting.localization.Localization(__file__, 1491, 23), get_data_74093, *[], **kwargs_74094)
        
        # Assigning a type to the variable 'call_assignment_70644' (line 1491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'call_assignment_70644', get_data_call_result_74095)
        
        # Assigning a Call to a Name (line 1491):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_74098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1491, 8), 'int')
        # Processing the call keyword arguments
        kwargs_74099 = {}
        # Getting the type of 'call_assignment_70644' (line 1491)
        call_assignment_70644_74096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'call_assignment_70644', False)
        # Obtaining the member '__getitem__' of a type (line 1491)
        getitem___74097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 8), call_assignment_70644_74096, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_74100 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___74097, *[int_74098], **kwargs_74099)
        
        # Assigning a type to the variable 'call_assignment_70645' (line 1491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'call_assignment_70645', getitem___call_result_74100)
        
        # Assigning a Name to a Name (line 1491):
        # Getting the type of 'call_assignment_70645' (line 1491)
        call_assignment_70645_74101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'call_assignment_70645')
        # Assigning a type to the variable 'xdata' (line 1491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'xdata', call_assignment_70645_74101)
        
        # Assigning a Call to a Name (line 1491):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_74104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1491, 8), 'int')
        # Processing the call keyword arguments
        kwargs_74105 = {}
        # Getting the type of 'call_assignment_70644' (line 1491)
        call_assignment_70644_74102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'call_assignment_70644', False)
        # Obtaining the member '__getitem__' of a type (line 1491)
        getitem___74103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 8), call_assignment_70644_74102, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_74106 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___74103, *[int_74104], **kwargs_74105)
        
        # Assigning a type to the variable 'call_assignment_70646' (line 1491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'call_assignment_70646', getitem___call_result_74106)
        
        # Assigning a Name to a Name (line 1491):
        # Getting the type of 'call_assignment_70646' (line 1491)
        call_assignment_70646_74107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'call_assignment_70646')
        # Assigning a type to the variable 'ydata' (line 1491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 15), 'ydata', call_assignment_70646_74107)
        
        # Call to process_selected(...): (line 1492)
        # Processing the call arguments (line 1492)
        # Getting the type of 'ind' (line 1492)
        ind_74110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 30), 'ind', False)
        
        # Obtaining the type of the subscript
        # Getting the type of 'ind' (line 1492)
        ind_74111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 41), 'ind', False)
        # Getting the type of 'xdata' (line 1492)
        xdata_74112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 35), 'xdata', False)
        # Obtaining the member '__getitem__' of a type (line 1492)
        getitem___74113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1492, 35), xdata_74112, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1492)
        subscript_call_result_74114 = invoke(stypy.reporting.localization.Localization(__file__, 1492, 35), getitem___74113, ind_74111)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'ind' (line 1492)
        ind_74115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 53), 'ind', False)
        # Getting the type of 'ydata' (line 1492)
        ydata_74116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 47), 'ydata', False)
        # Obtaining the member '__getitem__' of a type (line 1492)
        getitem___74117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1492, 47), ydata_74116, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1492)
        subscript_call_result_74118 = invoke(stypy.reporting.localization.Localization(__file__, 1492, 47), getitem___74117, ind_74115)
        
        # Processing the call keyword arguments (line 1492)
        kwargs_74119 = {}
        # Getting the type of 'self' (line 1492)
        self_74108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'self', False)
        # Obtaining the member 'process_selected' of a type (line 1492)
        process_selected_74109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1492, 8), self_74108, 'process_selected')
        # Calling process_selected(args, kwargs) (line 1492)
        process_selected_call_result_74120 = invoke(stypy.reporting.localization.Localization(__file__, 1492, 8), process_selected_74109, *[ind_74110, subscript_call_result_74114, subscript_call_result_74118], **kwargs_74119)
        
        
        # ################# End of 'onpick(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'onpick' in the type store
        # Getting the type of 'stypy_return_type' (line 1485)
        stypy_return_type_74121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_74121)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'onpick'
        return stypy_return_type_74121


# Assigning a type to the variable 'VertexSelector' (line 1422)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1422, 0), 'VertexSelector', VertexSelector)

# Assigning a Attribute to a Name (line 1495):

# Assigning a Attribute to a Name (line 1495):
# Getting the type of 'Line2D' (line 1495)
Line2D_74122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 13), 'Line2D')
# Obtaining the member '_lineStyles' of a type (line 1495)
_lineStyles_74123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1495, 13), Line2D_74122, '_lineStyles')
# Assigning a type to the variable 'lineStyles' (line 1495)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1495, 0), 'lineStyles', _lineStyles_74123)

# Assigning a Attribute to a Name (line 1496):

# Assigning a Attribute to a Name (line 1496):
# Getting the type of 'MarkerStyle' (line 1496)
MarkerStyle_74124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 14), 'MarkerStyle')
# Obtaining the member 'markers' of a type (line 1496)
markers_74125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1496, 14), MarkerStyle_74124, 'markers')
# Assigning a type to the variable 'lineMarkers' (line 1496)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1496, 0), 'lineMarkers', markers_74125)

# Assigning a Attribute to a Name (line 1497):

# Assigning a Attribute to a Name (line 1497):
# Getting the type of 'Line2D' (line 1497)
Line2D_74126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 13), 'Line2D')
# Obtaining the member 'drawStyles' of a type (line 1497)
drawStyles_74127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1497, 13), Line2D_74126, 'drawStyles')
# Assigning a type to the variable 'drawStyles' (line 1497)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 0), 'drawStyles', drawStyles_74127)

# Assigning a Attribute to a Name (line 1498):

# Assigning a Attribute to a Name (line 1498):
# Getting the type of 'MarkerStyle' (line 1498)
MarkerStyle_74128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 13), 'MarkerStyle')
# Obtaining the member 'fillstyles' of a type (line 1498)
fillstyles_74129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1498, 13), MarkerStyle_74128, 'fillstyles')
# Assigning a type to the variable 'fillStyles' (line 1498)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1498, 0), 'fillStyles', fillstyles_74129)

# Call to update(...): (line 1500)
# Processing the call keyword arguments (line 1500)

# Call to kwdoc(...): (line 1500)
# Processing the call arguments (line 1500)
# Getting the type of 'Line2D' (line 1500)
Line2D_74135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 45), 'Line2D', False)
# Processing the call keyword arguments (line 1500)
kwargs_74136 = {}
# Getting the type of 'artist' (line 1500)
artist_74133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 32), 'artist', False)
# Obtaining the member 'kwdoc' of a type (line 1500)
kwdoc_74134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1500, 32), artist_74133, 'kwdoc')
# Calling kwdoc(args, kwargs) (line 1500)
kwdoc_call_result_74137 = invoke(stypy.reporting.localization.Localization(__file__, 1500, 32), kwdoc_74134, *[Line2D_74135], **kwargs_74136)

keyword_74138 = kwdoc_call_result_74137
kwargs_74139 = {'Line2D': keyword_74138}
# Getting the type of 'docstring' (line 1500)
docstring_74130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 0), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 1500)
interpd_74131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1500, 0), docstring_74130, 'interpd')
# Obtaining the member 'update' of a type (line 1500)
update_74132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1500, 0), interpd_74131, 'update')
# Calling update(args, kwargs) (line 1500)
update_call_result_74140 = invoke(stypy.reporting.localization.Localization(__file__, 1500, 0), update_74132, *[], **kwargs_74139)


# Call to dedent_interpd(...): (line 1504)
# Processing the call arguments (line 1504)
# Getting the type of 'Line2D' (line 1504)
Line2D_74143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 25), 'Line2D', False)
# Obtaining the member '__init__' of a type (line 1504)
init___74144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1504, 25), Line2D_74143, '__init__')
# Processing the call keyword arguments (line 1504)
kwargs_74145 = {}
# Getting the type of 'docstring' (line 1504)
docstring_74141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 0), 'docstring', False)
# Obtaining the member 'dedent_interpd' of a type (line 1504)
dedent_interpd_74142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1504, 0), docstring_74141, 'dedent_interpd')
# Calling dedent_interpd(args, kwargs) (line 1504)
dedent_interpd_call_result_74146 = invoke(stypy.reporting.localization.Localization(__file__, 1504, 0), dedent_interpd_74142, *[init___74144], **kwargs_74145)


# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
