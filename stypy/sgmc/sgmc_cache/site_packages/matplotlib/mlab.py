
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: 
3: Numerical python functions written for compatability with MATLAB
4: commands with the same names.
5: 
6: MATLAB compatible functions
7: ---------------------------
8: 
9: :func:`cohere`
10:     Coherence (normalized cross spectral density)
11: 
12: :func:`csd`
13:     Cross spectral density using Welch's average periodogram
14: 
15: :func:`detrend`
16:     Remove the mean or best fit line from an array
17: 
18: :func:`find`
19:     Return the indices where some condition is true;
20:     numpy.nonzero is similar but more general.
21: 
22: :func:`griddata`
23:     Interpolate irregularly distributed data to a
24:     regular grid.
25: 
26: :func:`prctile`
27:     Find the percentiles of a sequence
28: 
29: :func:`prepca`
30:     Principal Component Analysis
31: 
32: :func:`psd`
33:     Power spectral density using Welch's average periodogram
34: 
35: :func:`rk4`
36:     A 4th order runge kutta integrator for 1D or ND systems
37: 
38: :func:`specgram`
39:     Spectrogram (spectrum over segments of time)
40: 
41: Miscellaneous functions
42: -----------------------
43: 
44: Functions that don't exist in MATLAB, but are useful anyway:
45: 
46: :func:`cohere_pairs`
47:     Coherence over all pairs.  This is not a MATLAB function, but we
48:     compute coherence a lot in my lab, and we compute it for a lot of
49:     pairs.  This function is optimized to do this efficiently by
50:     caching the direct FFTs.
51: 
52: :func:`rk4`
53:     A 4th order Runge-Kutta ODE integrator in case you ever find
54:     yourself stranded without scipy (and the far superior
55:     scipy.integrate tools)
56: 
57: :func:`contiguous_regions`
58:     Return the indices of the regions spanned by some logical mask
59: 
60: :func:`cross_from_below`
61:     Return the indices where a 1D array crosses a threshold from below
62: 
63: :func:`cross_from_above`
64:     Return the indices where a 1D array crosses a threshold from above
65: 
66: :func:`complex_spectrum`
67:     Return the complex-valued frequency spectrum of a signal
68: 
69: :func:`magnitude_spectrum`
70:     Return the magnitude of the frequency spectrum of a signal
71: 
72: :func:`angle_spectrum`
73:     Return the angle (wrapped phase) of the frequency spectrum of a signal
74: 
75: :func:`phase_spectrum`
76:     Return the phase (unwrapped angle) of the frequency spectrum of a signal
77: 
78: :func:`detrend_mean`
79:     Remove the mean from a line.
80: 
81: :func:`demean`
82:     Remove the mean from a line. This function is the same as
83:     :func:`detrend_mean` except for the default *axis*.
84: 
85: :func:`detrend_linear`
86:     Remove the best fit line from a line.
87: 
88: :func:`detrend_none`
89:     Return the original line.
90: 
91: :func:`stride_windows`
92:     Get all windows in an array in a memory-efficient manner
93: 
94: :func:`stride_repeat`
95:     Repeat an array in a memory-efficient manner
96: 
97: :func:`apply_window`
98:     Apply a window along a given axis
99: 
100: 
101: record array helper functions
102: -----------------------------
103: 
104: A collection of helper methods for numpyrecord arrays
105: 
106: .. _htmlonly:
107: 
108:     See :ref:`misc-examples-index`
109: 
110: :func:`rec2txt`
111:     Pretty print a record array
112: 
113: :func:`rec2csv`
114:     Store record array in CSV file
115: 
116: :func:`csv2rec`
117:     Import record array from CSV file with type inspection
118: 
119: :func:`rec_append_fields`
120:     Adds  field(s)/array(s) to record array
121: 
122: :func:`rec_drop_fields`
123:     Drop fields from record array
124: 
125: :func:`rec_join`
126:     Join two record arrays on sequence of fields
127: 
128: :func:`recs_join`
129:     A simple join of multiple recarrays using a single column as a key
130: 
131: :func:`rec_groupby`
132:     Summarize data by groups (similar to SQL GROUP BY)
133: 
134: :func:`rec_summarize`
135:     Helper code to filter rec array fields into new fields
136: 
137: For the rec viewer functions(e rec2csv), there are a bunch of Format
138: objects you can pass into the functions that will do things like color
139: negative values red, set percent formatting and scaling, etc.
140: 
141: Example usage::
142: 
143:     r = csv2rec('somefile.csv', checkrows=0)
144: 
145:     formatd = dict(
146:         weight = FormatFloat(2),
147:         change = FormatPercent(2),
148:         cost   = FormatThousands(2),
149:         )
150: 
151: 
152:     rec2excel(r, 'test.xls', formatd=formatd)
153:     rec2csv(r, 'test.csv', formatd=formatd)
154:     scroll = rec2gtk(r, formatd=formatd)
155: 
156:     win = gtk.Window()
157:     win.set_size_request(600,800)
158:     win.add(scroll)
159:     win.show_all()
160:     gtk.main()
161: 
162: 
163: '''
164: 
165: from __future__ import (absolute_import, division, print_function,
166:                         unicode_literals)
167: 
168: import six
169: from six.moves import map, xrange, zip
170: 
171: import copy
172: import csv
173: import operator
174: import os
175: import warnings
176: 
177: import numpy as np
178: 
179: import matplotlib.cbook as cbook
180: from matplotlib import docstring
181: from matplotlib.path import Path
182: import math
183: 
184: 
185: if six.PY3:
186:     long = int
187: 
188: 
189: def logspace(xmin, xmax, N):
190:     '''
191:     Return N values logarithmically spaced between xmin and xmax.
192: 
193:     '''
194:     return np.exp(np.linspace(np.log(xmin), np.log(xmax), N))
195: 
196: 
197: def _norm(x):
198:     '''
199:     Return sqrt(x dot x).
200: 
201:     '''
202:     return np.sqrt(np.dot(x, x))
203: 
204: 
205: def window_hanning(x):
206:     '''
207:     Return x times the hanning window of len(x).
208: 
209:     See Also
210:     --------
211:     :func:`window_none`
212:         :func:`window_none` is another window algorithm.
213:     '''
214:     return np.hanning(len(x))*x
215: 
216: 
217: def window_none(x):
218:     '''
219:     No window function; simply return x.
220: 
221:     See Also
222:     --------
223:     :func:`window_hanning`
224:         :func:`window_hanning` is another window algorithm.
225:     '''
226:     return x
227: 
228: 
229: def apply_window(x, window, axis=0, return_window=None):
230:     '''
231:     Apply the given window to the given 1D or 2D array along the given axis.
232: 
233:     Parameters
234:     ----------
235:     x : 1D or 2D array or sequence
236:         Array or sequence containing the data.
237: 
238:     window : function or array.
239:         Either a function to generate a window or an array with length
240:         *x*.shape[*axis*]
241: 
242:     axis : integer
243:         The axis over which to do the repetition.
244:         Must be 0 or 1.  The default is 0
245: 
246:     return_window : bool
247:         If true, also return the 1D values of the window that was applied
248:     '''
249:     x = np.asarray(x)
250: 
251:     if x.ndim < 1 or x.ndim > 2:
252:         raise ValueError('only 1D or 2D arrays can be used')
253:     if axis+1 > x.ndim:
254:         raise ValueError('axis(=%s) out of bounds' % axis)
255: 
256:     xshape = list(x.shape)
257:     xshapetarg = xshape.pop(axis)
258: 
259:     if cbook.iterable(window):
260:         if len(window) != xshapetarg:
261:             raise ValueError('The len(window) must be the same as the shape '
262:                              'of x for the chosen axis')
263:         windowVals = window
264:     else:
265:         windowVals = window(np.ones(xshapetarg, dtype=x.dtype))
266: 
267:     if x.ndim == 1:
268:         if return_window:
269:             return windowVals * x, windowVals
270:         else:
271:             return windowVals * x
272: 
273:     xshapeother = xshape.pop()
274: 
275:     otheraxis = (axis+1) % 2
276: 
277:     windowValsRep = stride_repeat(windowVals, xshapeother, axis=otheraxis)
278: 
279:     if return_window:
280:         return windowValsRep * x, windowVals
281:     else:
282:         return windowValsRep * x
283: 
284: 
285: def detrend(x, key=None, axis=None):
286:     '''
287:     Return x with its trend removed.
288: 
289:     Parameters
290:     ----------
291:     x : array or sequence
292:         Array or sequence containing the data.
293: 
294:     key : [ 'default' | 'constant' | 'mean' | 'linear' | 'none'] or function
295:         Specifies the detrend algorithm to use. 'default' is 'mean', which is
296:         the same as :func:`detrend_mean`. 'constant' is the same. 'linear' is
297:         the same as :func:`detrend_linear`. 'none' is the same as
298:         :func:`detrend_none`. The default is 'mean'. See the corresponding
299:         functions for more details regarding the algorithms. Can also be a
300:         function that carries out the detrend operation.
301: 
302:     axis : integer
303:         The axis along which to do the detrending.
304: 
305:     See Also
306:     --------
307:     :func:`detrend_mean`
308:         :func:`detrend_mean` implements the 'mean' algorithm.
309: 
310:     :func:`detrend_linear`
311:         :func:`detrend_linear` implements the 'linear' algorithm.
312: 
313:     :func:`detrend_none`
314:         :func:`detrend_none` implements the 'none' algorithm.
315:     '''
316:     if key is None or key in ['constant', 'mean', 'default']:
317:         return detrend(x, key=detrend_mean, axis=axis)
318:     elif key == 'linear':
319:         return detrend(x, key=detrend_linear, axis=axis)
320:     elif key == 'none':
321:         return detrend(x, key=detrend_none, axis=axis)
322:     elif isinstance(key, six.string_types):
323:         raise ValueError("Unknown value for key %s, must be one of: "
324:                          "'default', 'constant', 'mean', "
325:                          "'linear', or a function" % key)
326: 
327:     if not callable(key):
328:         raise ValueError("Unknown value for key %s, must be one of: "
329:                          "'default', 'constant', 'mean', "
330:                          "'linear', or a function" % key)
331: 
332:     x = np.asarray(x)
333: 
334:     if axis is not None and axis+1 > x.ndim:
335:         raise ValueError('axis(=%s) out of bounds' % axis)
336: 
337:     if (axis is None and x.ndim == 0) or (not axis and x.ndim == 1):
338:         return key(x)
339: 
340:     # try to use the 'axis' argument if the function supports it,
341:     # otherwise use apply_along_axis to do it
342:     try:
343:         return key(x, axis=axis)
344:     except TypeError:
345:         return np.apply_along_axis(key, axis=axis, arr=x)
346: 
347: 
348: def demean(x, axis=0):
349:     '''
350:     Return x minus its mean along the specified axis.
351: 
352:     Parameters
353:     ----------
354:     x : array or sequence
355:         Array or sequence containing the data
356:         Can have any dimensionality
357: 
358:     axis : integer
359:         The axis along which to take the mean.  See numpy.mean for a
360:         description of this argument.
361: 
362:     See Also
363:     --------
364:     :func:`delinear`
365: 
366:     :func:`denone`
367:         :func:`delinear` and :func:`denone` are other detrend algorithms.
368: 
369:     :func:`detrend_mean`
370:         This function is the same as :func:`detrend_mean` except for the
371:         default *axis*.
372:     '''
373:     return detrend_mean(x, axis=axis)
374: 
375: 
376: def detrend_mean(x, axis=None):
377:     '''
378:     Return x minus the mean(x).
379: 
380:     Parameters
381:     ----------
382:     x : array or sequence
383:         Array or sequence containing the data
384:         Can have any dimensionality
385: 
386:     axis : integer
387:         The axis along which to take the mean.  See numpy.mean for a
388:         description of this argument.
389: 
390:     See Also
391:     --------
392:     :func:`demean`
393:         This function is the same as :func:`demean` except for the default
394:         *axis*.
395: 
396:     :func:`detrend_linear`
397: 
398:     :func:`detrend_none`
399:         :func:`detrend_linear` and :func:`detrend_none` are other detrend
400:         algorithms.
401: 
402:     :func:`detrend`
403:         :func:`detrend` is a wrapper around all the detrend algorithms.
404:     '''
405:     x = np.asarray(x)
406: 
407:     if axis is not None and axis+1 > x.ndim:
408:         raise ValueError('axis(=%s) out of bounds' % axis)
409: 
410:     # short-circuit 0-D array.
411:     if not x.ndim:
412:         return np.array(0., dtype=x.dtype)
413: 
414:     # short-circuit simple operations
415:     if axis == 0 or axis is None or x.ndim <= 1:
416:         return x - x.mean(axis)
417: 
418:     ind = [slice(None)] * x.ndim
419:     ind[axis] = np.newaxis
420:     return x - x.mean(axis)[ind]
421: 
422: 
423: def detrend_none(x, axis=None):
424:     '''
425:     Return x: no detrending.
426: 
427:     Parameters
428:     ----------
429:     x : any object
430:         An object containing the data
431: 
432:     axis : integer
433:         This parameter is ignored.
434:         It is included for compatibility with detrend_mean
435: 
436:     See Also
437:     --------
438:     :func:`denone`
439:         This function is the same as :func:`denone` except for the default
440:         *axis*, which has no effect.
441: 
442:     :func:`detrend_mean`
443: 
444:     :func:`detrend_linear`
445:         :func:`detrend_mean` and :func:`detrend_linear` are other detrend
446:         algorithms.
447: 
448:     :func:`detrend`
449:         :func:`detrend` is a wrapper around all the detrend algorithms.
450:     '''
451:     return x
452: 
453: 
454: def detrend_linear(y):
455:     '''
456:     Return x minus best fit line; 'linear' detrending.
457: 
458:     Parameters
459:     ----------
460:     y : 0-D or 1-D array or sequence
461:         Array or sequence containing the data
462: 
463:     axis : integer
464:         The axis along which to take the mean.  See numpy.mean for a
465:         description of this argument.
466: 
467:     See Also
468:     --------
469:     :func:`delinear`
470:         This function is the same as :func:`delinear` except for the default
471:         *axis*.
472: 
473:     :func:`detrend_mean`
474: 
475:     :func:`detrend_none`
476:         :func:`detrend_mean` and :func:`detrend_none` are other detrend
477:         algorithms.
478: 
479:     :func:`detrend`
480:         :func:`detrend` is a wrapper around all the detrend algorithms.
481:     '''
482:     # This is faster than an algorithm based on linalg.lstsq.
483:     y = np.asarray(y)
484: 
485:     if y.ndim > 1:
486:         raise ValueError('y cannot have ndim > 1')
487: 
488:     # short-circuit 0-D array.
489:     if not y.ndim:
490:         return np.array(0., dtype=y.dtype)
491: 
492:     x = np.arange(y.size, dtype=float)
493: 
494:     C = np.cov(x, y, bias=1)
495:     b = C[0, 1]/C[0, 0]
496: 
497:     a = y.mean() - b*x.mean()
498:     return y - (b*x + a)
499: 
500: 
501: def stride_windows(x, n, noverlap=None, axis=0):
502:     '''
503:     Get all windows of x with length n as a single array,
504:     using strides to avoid data duplication.
505: 
506:     .. warning::
507: 
508:         It is not safe to write to the output array.  Multiple
509:         elements may point to the same piece of memory,
510:         so modifying one value may change others.
511: 
512:     Parameters
513:     ----------
514:     x : 1D array or sequence
515:         Array or sequence containing the data.
516: 
517:     n : integer
518:         The number of data points in each window.
519: 
520:     noverlap : integer
521:         The overlap between adjacent windows.
522:         Default is 0 (no overlap)
523: 
524:     axis : integer
525:         The axis along which the windows will run.
526: 
527:     References
528:     ----------
529:     `stackoverflow: Rolling window for 1D arrays in Numpy?
530:     <http://stackoverflow.com/a/6811241>`_
531:     `stackoverflow: Using strides for an efficient moving average filter
532:     <http://stackoverflow.com/a/4947453>`_
533:     '''
534:     if noverlap is None:
535:         noverlap = 0
536: 
537:     if noverlap >= n:
538:         raise ValueError('noverlap must be less than n')
539:     if n < 1:
540:         raise ValueError('n cannot be less than 1')
541: 
542:     x = np.asarray(x)
543: 
544:     if x.ndim != 1:
545:         raise ValueError('only 1-dimensional arrays can be used')
546:     if n == 1 and noverlap == 0:
547:         if axis == 0:
548:             return x[np.newaxis]
549:         else:
550:             return x[np.newaxis].transpose()
551:     if n > x.size:
552:         raise ValueError('n cannot be greater than the length of x')
553: 
554:     # np.lib.stride_tricks.as_strided easily leads to memory corruption for
555:     # non integer shape and strides, i.e. noverlap or n. See #3845.
556:     noverlap = int(noverlap)
557:     n = int(n)
558: 
559:     step = n - noverlap
560:     if axis == 0:
561:         shape = (n, (x.shape[-1]-noverlap)//step)
562:         strides = (x.strides[0], step*x.strides[0])
563:     else:
564:         shape = ((x.shape[-1]-noverlap)//step, n)
565:         strides = (step*x.strides[0], x.strides[0])
566:     return np.lib.stride_tricks.as_strided(x, shape=shape, strides=strides)
567: 
568: 
569: def stride_repeat(x, n, axis=0):
570:     '''
571:     Repeat the values in an array in a memory-efficient manner.  Array x is
572:     stacked vertically n times.
573: 
574:     .. warning::
575: 
576:         It is not safe to write to the output array.  Multiple
577:         elements may point to the same piece of memory, so
578:         modifying one value may change others.
579: 
580:     Parameters
581:     ----------
582:     x : 1D array or sequence
583:         Array or sequence containing the data.
584: 
585:     n : integer
586:         The number of time to repeat the array.
587: 
588:     axis : integer
589:         The axis along which the data will run.
590: 
591:     References
592:     ----------
593:     `stackoverflow: Repeat NumPy array without replicating data?
594:     <http://stackoverflow.com/a/5568169>`_
595:     '''
596:     if axis not in [0, 1]:
597:         raise ValueError('axis must be 0 or 1')
598:     x = np.asarray(x)
599:     if x.ndim != 1:
600:         raise ValueError('only 1-dimensional arrays can be used')
601: 
602:     if n == 1:
603:         if axis == 0:
604:             return np.atleast_2d(x)
605:         else:
606:             return np.atleast_2d(x).T
607:     if n < 1:
608:         raise ValueError('n cannot be less than 1')
609: 
610:     # np.lib.stride_tricks.as_strided easily leads to memory corruption for
611:     # non integer shape and strides, i.e. n. See #3845.
612:     n = int(n)
613: 
614:     if axis == 0:
615:         shape = (n, x.size)
616:         strides = (0, x.strides[0])
617:     else:
618:         shape = (x.size, n)
619:         strides = (x.strides[0], 0)
620: 
621:     return np.lib.stride_tricks.as_strided(x, shape=shape, strides=strides)
622: 
623: 
624: def _spectral_helper(x, y=None, NFFT=None, Fs=None, detrend_func=None,
625:                      window=None, noverlap=None, pad_to=None,
626:                      sides=None, scale_by_freq=None, mode=None):
627:     '''
628:     This is a helper function that implements the commonality between the
629:     psd, csd, spectrogram and complex, magnitude, angle, and phase spectrums.
630:     It is *NOT* meant to be used outside of mlab and may change at any time.
631:     '''
632:     if y is None:
633:         # if y is None use x for y
634:         same_data = True
635:     else:
636:         # The checks for if y is x are so that we can use the same function to
637:         # implement the core of psd(), csd(), and spectrogram() without doing
638:         # extra calculations.  We return the unaveraged Pxy, freqs, and t.
639:         same_data = y is x
640: 
641:     if Fs is None:
642:         Fs = 2
643:     if noverlap is None:
644:         noverlap = 0
645:     if detrend_func is None:
646:         detrend_func = detrend_none
647:     if window is None:
648:         window = window_hanning
649: 
650:     # if NFFT is set to None use the whole signal
651:     if NFFT is None:
652:         NFFT = 256
653: 
654:     if mode is None or mode == 'default':
655:         mode = 'psd'
656:     elif mode not in ['psd', 'complex', 'magnitude', 'angle', 'phase']:
657:         raise ValueError("Unknown value for mode %s, must be one of: "
658:                          "'default', 'psd', 'complex', "
659:                          "'magnitude', 'angle', 'phase'" % mode)
660: 
661:     if not same_data and mode != 'psd':
662:         raise ValueError("x and y must be equal if mode is not 'psd'")
663: 
664:     # Make sure we're dealing with a numpy array. If y and x were the same
665:     # object to start with, keep them that way
666:     x = np.asarray(x)
667:     if not same_data:
668:         y = np.asarray(y)
669: 
670:     if sides is None or sides == 'default':
671:         if np.iscomplexobj(x):
672:             sides = 'twosided'
673:         else:
674:             sides = 'onesided'
675:     elif sides not in ['onesided', 'twosided']:
676:         raise ValueError("Unknown value for sides %s, must be one of: "
677:                          "'default', 'onesided', or 'twosided'" % sides)
678: 
679:     # zero pad x and y up to NFFT if they are shorter than NFFT
680:     if len(x) < NFFT:
681:         n = len(x)
682:         x = np.resize(x, (NFFT,))
683:         x[n:] = 0
684: 
685:     if not same_data and len(y) < NFFT:
686:         n = len(y)
687:         y = np.resize(y, (NFFT,))
688:         y[n:] = 0
689: 
690:     if pad_to is None:
691:         pad_to = NFFT
692: 
693:     if mode != 'psd':
694:         scale_by_freq = False
695:     elif scale_by_freq is None:
696:         scale_by_freq = True
697: 
698:     # For real x, ignore the negative frequencies unless told otherwise
699:     if sides == 'twosided':
700:         numFreqs = pad_to
701:         if pad_to % 2:
702:             freqcenter = (pad_to - 1)//2 + 1
703:         else:
704:             freqcenter = pad_to//2
705:         scaling_factor = 1.
706:     elif sides == 'onesided':
707:         if pad_to % 2:
708:             numFreqs = (pad_to + 1)//2
709:         else:
710:             numFreqs = pad_to//2 + 1
711:         scaling_factor = 2.
712: 
713:     result = stride_windows(x, NFFT, noverlap, axis=0)
714:     result = detrend(result, detrend_func, axis=0)
715:     result, windowVals = apply_window(result, window, axis=0,
716:                                       return_window=True)
717:     result = np.fft.fft(result, n=pad_to, axis=0)[:numFreqs, :]
718:     freqs = np.fft.fftfreq(pad_to, 1/Fs)[:numFreqs]
719: 
720:     if not same_data:
721:         # if same_data is False, mode must be 'psd'
722:         resultY = stride_windows(y, NFFT, noverlap)
723:         resultY = apply_window(resultY, window, axis=0)
724:         resultY = detrend(resultY, detrend_func, axis=0)
725:         resultY = np.fft.fft(resultY, n=pad_to, axis=0)[:numFreqs, :]
726:         result = np.conj(result) * resultY
727:     elif mode == 'psd':
728:         result = np.conj(result) * result
729:     elif mode == 'magnitude':
730:         result = np.abs(result) / np.abs(windowVals).sum()
731:     elif mode == 'angle' or mode == 'phase':
732:         # we unwrap the phase later to handle the onesided vs. twosided case
733:         result = np.angle(result)
734:     elif mode == 'complex':
735:         result /= np.abs(windowVals).sum()
736: 
737:     if mode == 'psd':
738: 
739:         # Also include scaling factors for one-sided densities and dividing by
740:         # the sampling frequency, if desired. Scale everything, except the DC
741:         # component and the NFFT/2 component:
742: 
743:         # if we have a even number of frequencies, don't scale NFFT/2
744:         if not NFFT % 2:
745:             slc = slice(1, -1, None)
746:         # if we have an odd number, just don't scale DC
747:         else:
748:             slc = slice(1, None, None)
749: 
750:         result[slc] *= scaling_factor
751: 
752:         # MATLAB divides by the sampling frequency so that density function
753:         # has units of dB/Hz and can be integrated by the plotted frequency
754:         # values. Perform the same scaling here.
755:         if scale_by_freq:
756:             result /= Fs
757:             # Scale the spectrum by the norm of the window to compensate for
758:             # windowing loss; see Bendat & Piersol Sec 11.5.2.
759:             result /= (np.abs(windowVals)**2).sum()
760:         else:
761:             # In this case, preserve power in the segment, not amplitude
762:             result /= np.abs(windowVals).sum()**2
763: 
764:     t = np.arange(NFFT/2, len(x) - NFFT/2 + 1, NFFT - noverlap)/Fs
765: 
766:     if sides == 'twosided':
767:         # center the frequency range at zero
768:         freqs = np.concatenate((freqs[freqcenter:], freqs[:freqcenter]))
769:         result = np.concatenate((result[freqcenter:, :],
770:                                  result[:freqcenter, :]), 0)
771:     elif not pad_to % 2:
772:         # get the last value correctly, it is negative otherwise
773:         freqs[-1] *= -1
774: 
775:     # we unwrap the phase here to handle the onesided vs. twosided case
776:     if mode == 'phase':
777:         result = np.unwrap(result, axis=0)
778: 
779:     return result, freqs, t
780: 
781: 
782: def _single_spectrum_helper(x, mode, Fs=None, window=None, pad_to=None,
783:                             sides=None):
784:     '''
785:     This is a helper function that implements the commonality between the
786:     complex, magnitude, angle, and phase spectrums.
787:     It is *NOT* meant to be used outside of mlab and may change at any time.
788:     '''
789:     if mode is None or mode == 'psd' or mode == 'default':
790:         raise ValueError('_single_spectrum_helper does not work with %s mode'
791:                          % mode)
792: 
793:     if pad_to is None:
794:         pad_to = len(x)
795: 
796:     spec, freqs, _ = _spectral_helper(x=x, y=None, NFFT=len(x), Fs=Fs,
797:                                       detrend_func=detrend_none, window=window,
798:                                       noverlap=0, pad_to=pad_to,
799:                                       sides=sides,
800:                                       scale_by_freq=False,
801:                                       mode=mode)
802:     if mode != 'complex':
803:         spec = spec.real
804: 
805:     if spec.ndim == 2 and spec.shape[1] == 1:
806:         spec = spec[:, 0]
807: 
808:     return spec, freqs
809: 
810: 
811: # Split out these keyword docs so that they can be used elsewhere
812: docstring.interpd.update(Spectral=cbook.dedent('''
813:     Fs : scalar
814:         The sampling frequency (samples per time unit).  It is used
815:         to calculate the Fourier frequencies, freqs, in cycles per time
816:         unit. The default value is 2.
817: 
818:     window : callable or ndarray
819:         A function or a vector of length *NFFT*. To create window
820:         vectors see :func:`window_hanning`, :func:`window_none`,
821:         :func:`numpy.blackman`, :func:`numpy.hamming`,
822:         :func:`numpy.bartlett`, :func:`scipy.signal`,
823:         :func:`scipy.signal.get_window`, etc. The default is
824:         :func:`window_hanning`.  If a function is passed as the
825:         argument, it must take a data segment as an argument and
826:         return the windowed version of the segment.
827: 
828:     sides : [ 'default' | 'onesided' | 'twosided' ]
829:         Specifies which sides of the spectrum to return.  Default gives the
830:         default behavior, which returns one-sided for real data and both
831:         for complex data.  'onesided' forces the return of a one-sided
832:         spectrum, while 'twosided' forces two-sided.
833: '''))
834: 
835: 
836: docstring.interpd.update(Single_Spectrum=cbook.dedent('''
837:     pad_to : integer
838:         The number of points to which the data segment is padded when
839:         performing the FFT.  While not increasing the actual resolution of
840:         the spectrum (the minimum distance between resolvable peaks),
841:         this can give more points in the plot, allowing for more
842:         detail. This corresponds to the *n* parameter in the call to fft().
843:         The default is None, which sets *pad_to* equal to the length of the
844:         input signal (i.e. no padding).
845: '''))
846: 
847: 
848: docstring.interpd.update(PSD=cbook.dedent('''
849:     pad_to : integer
850:         The number of points to which the data segment is padded when
851:         performing the FFT.  This can be different from *NFFT*, which
852:         specifies the number of data points used.  While not increasing
853:         the actual resolution of the spectrum (the minimum distance between
854:         resolvable peaks), this can give more points in the plot,
855:         allowing for more detail. This corresponds to the *n* parameter
856:         in the call to fft(). The default is None, which sets *pad_to*
857:         equal to *NFFT*
858: 
859:     NFFT : integer
860:         The number of data points used in each block for the FFT.
861:         A power 2 is most efficient.  The default value is 256.
862:         This should *NOT* be used to get zero padding, or the scaling of the
863:         result will be incorrect. Use *pad_to* for this instead.
864: 
865:     detrend : {'default', 'constant', 'mean', 'linear', 'none'} or callable
866:         The function applied to each segment before fft-ing,
867:         designed to remove the mean or linear trend.  Unlike in
868:         MATLAB, where the *detrend* parameter is a vector, in
869:         matplotlib is it a function.  The :mod:`~matplotlib.pylab`
870:         module defines :func:`~matplotlib.pylab.detrend_none`,
871:         :func:`~matplotlib.pylab.detrend_mean`, and
872:         :func:`~matplotlib.pylab.detrend_linear`, but you can use
873:         a custom function as well.  You can also use a string to choose
874:         one of the functions.  'default', 'constant', and 'mean' call
875:         :func:`~matplotlib.pylab.detrend_mean`.  'linear' calls
876:         :func:`~matplotlib.pylab.detrend_linear`.  'none' calls
877:         :func:`~matplotlib.pylab.detrend_none`.
878: 
879:     scale_by_freq : boolean, optional
880:         Specifies whether the resulting density values should be scaled
881:         by the scaling frequency, which gives density in units of Hz^-1.
882:         This allows for integration over the returned frequency values.
883:         The default is True for MATLAB compatibility.
884: '''))
885: 
886: 
887: @docstring.dedent_interpd
888: def psd(x, NFFT=None, Fs=None, detrend=None, window=None,
889:         noverlap=None, pad_to=None, sides=None, scale_by_freq=None):
890:     r'''
891:     Compute the power spectral density.
892: 
893:     Call signature::
894: 
895:         psd(x, NFFT=256, Fs=2, detrend=mlab.detrend_none,
896:             window=mlab.window_hanning, noverlap=0, pad_to=None,
897:             sides='default', scale_by_freq=None)
898: 
899:     The power spectral density :math:`P_{xx}` by Welch's average
900:     periodogram method.  The vector *x* is divided into *NFFT* length
901:     segments.  Each segment is detrended by function *detrend* and
902:     windowed by function *window*.  *noverlap* gives the length of
903:     the overlap between segments.  The :math:`|\mathrm{fft}(i)|^2`
904:     of each segment :math:`i` are averaged to compute :math:`P_{xx}`.
905: 
906:     If len(*x*) < *NFFT*, it will be zero padded to *NFFT*.
907: 
908:     Parameters
909:     ----------
910:     x : 1-D array or sequence
911:         Array or sequence containing the data
912: 
913:     %(Spectral)s
914: 
915:     %(PSD)s
916: 
917:     noverlap : integer
918:         The number of points of overlap between segments.
919:         The default value is 0 (no overlap).
920: 
921:     Returns
922:     -------
923:     Pxx : 1-D array
924:         The values for the power spectrum `P_{xx}` (real valued)
925: 
926:     freqs : 1-D array
927:         The frequencies corresponding to the elements in *Pxx*
928: 
929:     References
930:     ----------
931:     Bendat & Piersol -- Random Data: Analysis and Measurement Procedures, John
932:     Wiley & Sons (1986)
933: 
934:     See Also
935:     --------
936:     :func:`specgram`
937:         :func:`specgram` differs in the default overlap; in not returning the
938:         mean of the segment periodograms; and in returning the times of the
939:         segments.
940: 
941:     :func:`magnitude_spectrum`
942:         :func:`magnitude_spectrum` returns the magnitude spectrum.
943: 
944:     :func:`csd`
945:         :func:`csd` returns the spectral density between two signals.
946:     '''
947:     Pxx, freqs = csd(x=x, y=None, NFFT=NFFT, Fs=Fs, detrend=detrend,
948:                      window=window, noverlap=noverlap, pad_to=pad_to,
949:                      sides=sides, scale_by_freq=scale_by_freq)
950:     return Pxx.real, freqs
951: 
952: 
953: @docstring.dedent_interpd
954: def csd(x, y, NFFT=None, Fs=None, detrend=None, window=None,
955:         noverlap=None, pad_to=None, sides=None, scale_by_freq=None):
956:     '''
957:     Compute the cross-spectral density.
958: 
959:     Call signature::
960: 
961:         csd(x, y, NFFT=256, Fs=2, detrend=mlab.detrend_none,
962:             window=mlab.window_hanning, noverlap=0, pad_to=None,
963:             sides='default', scale_by_freq=None)
964: 
965:     The cross spectral density :math:`P_{xy}` by Welch's average
966:     periodogram method.  The vectors *x* and *y* are divided into
967:     *NFFT* length segments.  Each segment is detrended by function
968:     *detrend* and windowed by function *window*.  *noverlap* gives
969:     the length of the overlap between segments.  The product of
970:     the direct FFTs of *x* and *y* are averaged over each segment
971:     to compute :math:`P_{xy}`, with a scaling to correct for power
972:     loss due to windowing.
973: 
974:     If len(*x*) < *NFFT* or len(*y*) < *NFFT*, they will be zero
975:     padded to *NFFT*.
976: 
977:     Parameters
978:     ----------
979:     x, y : 1-D arrays or sequences
980:         Arrays or sequences containing the data
981: 
982:     %(Spectral)s
983: 
984:     %(PSD)s
985: 
986:     noverlap : integer
987:         The number of points of overlap between segments.
988:         The default value is 0 (no overlap).
989: 
990:     Returns
991:     -------
992:     Pxy : 1-D array
993:         The values for the cross spectrum `P_{xy}` before scaling (real valued)
994: 
995:     freqs : 1-D array
996:         The frequencies corresponding to the elements in *Pxy*
997: 
998:     References
999:     ----------
1000:     Bendat & Piersol -- Random Data: Analysis and Measurement Procedures, John
1001:     Wiley & Sons (1986)
1002: 
1003:     See Also
1004:     --------
1005:     :func:`psd`
1006:         :func:`psd` is the equivalent to setting y=x.
1007:     '''
1008:     if NFFT is None:
1009:         NFFT = 256
1010:     Pxy, freqs, _ = _spectral_helper(x=x, y=y, NFFT=NFFT, Fs=Fs,
1011:                                      detrend_func=detrend, window=window,
1012:                                      noverlap=noverlap, pad_to=pad_to,
1013:                                      sides=sides, scale_by_freq=scale_by_freq,
1014:                                      mode='psd')
1015: 
1016:     if Pxy.ndim == 2:
1017:         if Pxy.shape[1] > 1:
1018:             Pxy = Pxy.mean(axis=1)
1019:         else:
1020:             Pxy = Pxy[:, 0]
1021:     return Pxy, freqs
1022: 
1023: 
1024: @docstring.dedent_interpd
1025: def complex_spectrum(x, Fs=None, window=None, pad_to=None,
1026:                      sides=None):
1027:     '''
1028:     Compute the complex-valued frequency spectrum of *x*.  Data is padded to a
1029:     length of *pad_to* and the windowing function *window* is applied to the
1030:     signal.
1031: 
1032:     Parameters
1033:     ----------
1034:     x : 1-D array or sequence
1035:         Array or sequence containing the data
1036: 
1037:     %(Spectral)s
1038: 
1039:     %(Single_Spectrum)s
1040: 
1041:     Returns
1042:     -------
1043:     spectrum : 1-D array
1044:         The values for the complex spectrum (complex valued)
1045: 
1046:     freqs : 1-D array
1047:         The frequencies corresponding to the elements in *spectrum*
1048: 
1049:     See Also
1050:     --------
1051:     :func:`magnitude_spectrum`
1052:         :func:`magnitude_spectrum` returns the absolute value of this function.
1053: 
1054:     :func:`angle_spectrum`
1055:         :func:`angle_spectrum` returns the angle of this function.
1056: 
1057:     :func:`phase_spectrum`
1058:         :func:`phase_spectrum` returns the phase (unwrapped angle) of this
1059:         function.
1060: 
1061:     :func:`specgram`
1062:         :func:`specgram` can return the complex spectrum of segments within the
1063:         signal.
1064:     '''
1065:     return _single_spectrum_helper(x=x, Fs=Fs, window=window, pad_to=pad_to,
1066:                                    sides=sides, mode='complex')
1067: 
1068: 
1069: @docstring.dedent_interpd
1070: def magnitude_spectrum(x, Fs=None, window=None, pad_to=None,
1071:                        sides=None):
1072:     '''
1073:     Compute the magnitude (absolute value) of the frequency spectrum of
1074:     *x*.  Data is padded to a length of *pad_to* and the windowing function
1075:     *window* is applied to the signal.
1076: 
1077:     Parameters
1078:     ----------
1079:     x : 1-D array or sequence
1080:         Array or sequence containing the data
1081: 
1082:     %(Spectral)s
1083: 
1084:     %(Single_Spectrum)s
1085: 
1086:     Returns
1087:     -------
1088:     spectrum : 1-D array
1089:         The values for the magnitude spectrum (real valued)
1090: 
1091:     freqs : 1-D array
1092:         The frequencies corresponding to the elements in *spectrum*
1093: 
1094:     See Also
1095:     --------
1096:     :func:`psd`
1097:         :func:`psd` returns the power spectral density.
1098: 
1099:     :func:`complex_spectrum`
1100:         This function returns the absolute value of :func:`complex_spectrum`.
1101: 
1102:     :func:`angle_spectrum`
1103:         :func:`angle_spectrum` returns the angles of the corresponding
1104:         frequencies.
1105: 
1106:     :func:`phase_spectrum`
1107:         :func:`phase_spectrum` returns the phase (unwrapped angle) of the
1108:         corresponding frequencies.
1109: 
1110:     :func:`specgram`
1111:         :func:`specgram` can return the magnitude spectrum of segments within
1112:         the signal.
1113:     '''
1114:     return _single_spectrum_helper(x=x, Fs=Fs, window=window, pad_to=pad_to,
1115:                                    sides=sides, mode='magnitude')
1116: 
1117: 
1118: @docstring.dedent_interpd
1119: def angle_spectrum(x, Fs=None, window=None, pad_to=None,
1120:                    sides=None):
1121:     '''
1122:     Compute the angle of the frequency spectrum (wrapped phase spectrum) of
1123:     *x*.  Data is padded to a length of *pad_to* and the windowing function
1124:     *window* is applied to the signal.
1125: 
1126:     Parameters
1127:     ----------
1128:     x : 1-D array or sequence
1129:         Array or sequence containing the data
1130: 
1131:     %(Spectral)s
1132: 
1133:     %(Single_Spectrum)s
1134: 
1135:     Returns
1136:     -------
1137:     spectrum : 1-D array
1138:         The values for the angle spectrum in radians (real valued)
1139: 
1140:     freqs : 1-D array
1141:         The frequencies corresponding to the elements in *spectrum*
1142: 
1143:     See Also
1144:     --------
1145:     :func:`complex_spectrum`
1146:         This function returns the angle value of :func:`complex_spectrum`.
1147: 
1148:     :func:`magnitude_spectrum`
1149:         :func:`angle_spectrum` returns the magnitudes of the corresponding
1150:         frequencies.
1151: 
1152:     :func:`phase_spectrum`
1153:         :func:`phase_spectrum` returns the unwrapped version of this function.
1154: 
1155:     :func:`specgram`
1156:         :func:`specgram` can return the angle spectrum of segments within the
1157:         signal.
1158:     '''
1159:     return _single_spectrum_helper(x=x, Fs=Fs, window=window, pad_to=pad_to,
1160:                                    sides=sides, mode='angle')
1161: 
1162: 
1163: @docstring.dedent_interpd
1164: def phase_spectrum(x, Fs=None, window=None, pad_to=None,
1165:                    sides=None):
1166:     '''
1167:     Compute the phase of the frequency spectrum (unwrapped angle spectrum) of
1168:     *x*.  Data is padded to a length of *pad_to* and the windowing function
1169:     *window* is applied to the signal.
1170: 
1171:     Parameters
1172:     ----------
1173:     x : 1-D array or sequence
1174:         Array or sequence containing the data
1175: 
1176:     %(Spectral)s
1177: 
1178:     %(Single_Spectrum)s
1179: 
1180:     Returns
1181:     -------
1182:     spectrum : 1-D array
1183:         The values for the phase spectrum in radians (real valued)
1184: 
1185:     freqs : 1-D array
1186:         The frequencies corresponding to the elements in *spectrum*
1187: 
1188:     See Also
1189:     --------
1190:     :func:`complex_spectrum`
1191:         This function returns the angle value of :func:`complex_spectrum`.
1192: 
1193:     :func:`magnitude_spectrum`
1194:         :func:`magnitude_spectrum` returns the magnitudes of the corresponding
1195:         frequencies.
1196: 
1197:     :func:`angle_spectrum`
1198:         :func:`angle_spectrum` returns the wrapped version of this function.
1199: 
1200:     :func:`specgram`
1201:         :func:`specgram` can return the phase spectrum of segments within the
1202:         signal.
1203:     '''
1204:     return _single_spectrum_helper(x=x, Fs=Fs, window=window, pad_to=pad_to,
1205:                                    sides=sides, mode='phase')
1206: 
1207: 
1208: @docstring.dedent_interpd
1209: def specgram(x, NFFT=None, Fs=None, detrend=None, window=None,
1210:              noverlap=None, pad_to=None, sides=None, scale_by_freq=None,
1211:              mode=None):
1212:     '''
1213:     Compute a spectrogram.
1214: 
1215:     Compute and plot a spectrogram of data in x.  Data are split into
1216:     NFFT length segments and the spectrum of each section is
1217:     computed.  The windowing function window is applied to each
1218:     segment, and the amount of overlap of each segment is
1219:     specified with noverlap.
1220: 
1221:     Parameters
1222:     ----------
1223:     x : array_like
1224:         1-D array or sequence.
1225: 
1226:     %(Spectral)s
1227: 
1228:     %(PSD)s
1229: 
1230:     noverlap : int, optional
1231:         The number of points of overlap between blocks.  The default
1232:         value is 128.
1233:     mode : str, optional
1234:         What sort of spectrum to use, default is 'psd'.
1235:             'psd'
1236:                 Returns the power spectral density.
1237: 
1238:             'complex'
1239:                 Returns the complex-valued frequency spectrum.
1240: 
1241:             'magnitude'
1242:                 Returns the magnitude spectrum.
1243: 
1244:             'angle'
1245:                 Returns the phase spectrum without unwrapping.
1246: 
1247:             'phase'
1248:                 Returns the phase spectrum with unwrapping.
1249: 
1250:     Returns
1251:     -------
1252:     spectrum : array_like
1253:         2-D array, columns are the periodograms of successive segments.
1254: 
1255:     freqs : array_like
1256:         1-D array, frequencies corresponding to the rows in *spectrum*.
1257: 
1258:     t : array_like
1259:         1-D array, the times corresponding to midpoints of segments
1260:         (i.e the columns in *spectrum*).
1261: 
1262:     See Also
1263:     --------
1264:     psd : differs in the overlap and in the return values.
1265:     complex_spectrum : similar, but with complex valued frequencies.
1266:     magnitude_spectrum : similar single segment when mode is 'magnitude'.
1267:     angle_spectrum : similar to single segment when mode is 'angle'.
1268:     phase_spectrum : similar to single segment when mode is 'phase'.
1269: 
1270:     Notes
1271:     -----
1272:     detrend and scale_by_freq only apply when *mode* is set to 'psd'.
1273: 
1274:     '''
1275:     if noverlap is None:
1276:         noverlap = 128  # default in _spectral_helper() is noverlap = 0
1277:     if NFFT is None:
1278:         NFFT = 256  # same default as in _spectral_helper()
1279:     if len(x) <= NFFT:
1280:         warnings.warn("Only one segment is calculated since parameter NFFT " +
1281:                       "(=%d) >= signal length (=%d)." % (NFFT, len(x)))
1282: 
1283:     spec, freqs, t = _spectral_helper(x=x, y=None, NFFT=NFFT, Fs=Fs,
1284:                                       detrend_func=detrend, window=window,
1285:                                       noverlap=noverlap, pad_to=pad_to,
1286:                                       sides=sides,
1287:                                       scale_by_freq=scale_by_freq,
1288:                                       mode=mode)
1289: 
1290:     if mode != 'complex':
1291:         spec = spec.real  # Needed since helper implements generically
1292: 
1293:     return spec, freqs, t
1294: 
1295: 
1296: _coh_error = '''Coherence is calculated by averaging over *NFFT*
1297: length segments.  Your signal is too short for your choice of *NFFT*.
1298: '''
1299: 
1300: 
1301: @docstring.dedent_interpd
1302: def cohere(x, y, NFFT=256, Fs=2, detrend=detrend_none, window=window_hanning,
1303:            noverlap=0, pad_to=None, sides='default', scale_by_freq=None):
1304:     '''
1305:     The coherence between *x* and *y*.  Coherence is the normalized
1306:     cross spectral density:
1307: 
1308:     .. math::
1309: 
1310:         C_{xy} = \\frac{|P_{xy}|^2}{P_{xx}P_{yy}}
1311: 
1312:     Parameters
1313:     ----------
1314:     x, y
1315:         Array or sequence containing the data
1316: 
1317:     %(Spectral)s
1318: 
1319:     %(PSD)s
1320: 
1321:     noverlap : integer
1322:         The number of points of overlap between blocks.  The default value
1323:         is 0 (no overlap).
1324: 
1325:     Returns
1326:     -------
1327:     The return value is the tuple (*Cxy*, *f*), where *f* are the
1328:     frequencies of the coherence vector. For cohere, scaling the
1329:     individual densities by the sampling frequency has no effect,
1330:     since the factors cancel out.
1331: 
1332:     See Also
1333:     --------
1334:     :func:`psd`, :func:`csd` :
1335:         For information about the methods used to compute :math:`P_{xy}`,
1336:         :math:`P_{xx}` and :math:`P_{yy}`.
1337:     '''
1338: 
1339:     if len(x) < 2 * NFFT:
1340:         raise ValueError(_coh_error)
1341:     Pxx, f = psd(x, NFFT, Fs, detrend, window, noverlap, pad_to, sides,
1342:                  scale_by_freq)
1343:     Pyy, f = psd(y, NFFT, Fs, detrend, window, noverlap, pad_to, sides,
1344:                  scale_by_freq)
1345:     Pxy, f = csd(x, y, NFFT, Fs, detrend, window, noverlap, pad_to, sides,
1346:                  scale_by_freq)
1347:     Cxy = np.abs(Pxy) ** 2 / (Pxx * Pxy)
1348:     return Cxy, f
1349: 
1350: 
1351: def donothing_callback(*args):
1352:     pass
1353: 
1354: 
1355: def cohere_pairs(X, ij, NFFT=256, Fs=2, detrend=detrend_none,
1356:                  window=window_hanning, noverlap=0,
1357:                  preferSpeedOverMemory=True,
1358:                  progressCallback=donothing_callback,
1359:                  returnPxx=False):
1360: 
1361:     '''
1362:     Compute the coherence and phase for all pairs *ij*, in *X*.
1363: 
1364:     *X* is a *numSamples* * *numCols* array
1365: 
1366:     *ij* is a list of tuples.  Each tuple is a pair of indexes into
1367:     the columns of X for which you want to compute coherence.  For
1368:     example, if *X* has 64 columns, and you want to compute all
1369:     nonredundant pairs, define *ij* as::
1370: 
1371:       ij = []
1372:       for i in range(64):
1373:           for j in range(i+1,64):
1374:               ij.append( (i,j) )
1375: 
1376:     *preferSpeedOverMemory* is an optional bool. Defaults to true. If
1377:     False, limits the caching by only making one, rather than two,
1378:     complex cache arrays. This is useful if memory becomes critical.
1379:     Even when *preferSpeedOverMemory* is False, :func:`cohere_pairs`
1380:     will still give significant performace gains over calling
1381:     :func:`cohere` for each pair, and will use subtantially less
1382:     memory than if *preferSpeedOverMemory* is True.  In my tests with
1383:     a 43000,64 array over all nonredundant pairs,
1384:     *preferSpeedOverMemory* = True delivered a 33% performance boost
1385:     on a 1.7GHZ Athlon with 512MB RAM compared with
1386:     *preferSpeedOverMemory* = False.  But both solutions were more
1387:     than 10x faster than naively crunching all possible pairs through
1388:     :func:`cohere`.
1389: 
1390:     Returns
1391:     -------
1392:     Cxy : dictionary of (*i*, *j*) tuples -> coherence vector for
1393:         that pair.  i.e., ``Cxy[(i,j) = cohere(X[:,i], X[:,j])``.
1394:         Number of dictionary keys is ``len(ij)``.
1395: 
1396:     Phase : dictionary of phases of the cross spectral density at
1397:         each frequency for each pair.  Keys are (*i*, *j*).
1398: 
1399:     freqs : vector of frequencies, equal in length to either the
1400:          coherence or phase vectors for any (*i*, *j*) key.
1401: 
1402:     e.g., to make a coherence Bode plot::
1403: 
1404:           subplot(211)
1405:           plot( freqs, Cxy[(12,19)])
1406:           subplot(212)
1407:           plot( freqs, Phase[(12,19)])
1408: 
1409:     For a large number of pairs, :func:`cohere_pairs` can be much more
1410:     efficient than just calling :func:`cohere` for each pair, because
1411:     it caches most of the intensive computations.  If :math:`N` is the
1412:     number of pairs, this function is :math:`O(N)` for most of the
1413:     heavy lifting, whereas calling cohere for each pair is
1414:     :math:`O(N^2)`.  However, because of the caching, it is also more
1415:     memory intensive, making 2 additional complex arrays with
1416:     approximately the same number of elements as *X*.
1417: 
1418:     See :file:`test/cohere_pairs_test.py` in the src tree for an
1419:     example script that shows that this :func:`cohere_pairs` and
1420:     :func:`cohere` give the same results for a given pair.
1421: 
1422:     See Also
1423:     --------
1424:     :func:`psd`
1425:         For information about the methods used to compute :math:`P_{xy}`,
1426:         :math:`P_{xx}` and :math:`P_{yy}`.
1427:     '''
1428:     numRows, numCols = X.shape
1429: 
1430:     # zero pad if X is too short
1431:     if numRows < NFFT:
1432:         tmp = X
1433:         X = np.zeros((NFFT, numCols), X.dtype)
1434:         X[:numRows, :] = tmp
1435:         del tmp
1436: 
1437:     numRows, numCols = X.shape
1438:     # get all the columns of X that we are interested in by checking
1439:     # the ij tuples
1440:     allColumns = set()
1441:     for i, j in ij:
1442:         allColumns.add(i)
1443:         allColumns.add(j)
1444:     Ncols = len(allColumns)
1445: 
1446:     # for real X, ignore the negative frequencies
1447:     if np.iscomplexobj(X):
1448:         numFreqs = NFFT
1449:     else:
1450:         numFreqs = NFFT//2+1
1451: 
1452:     # cache the FFT of every windowed, detrended NFFT length segement
1453:     # of every channel.  If preferSpeedOverMemory, cache the conjugate
1454:     # as well
1455:     if cbook.iterable(window):
1456:         if len(window) != NFFT:
1457:             raise ValueError("The length of the window must be equal to NFFT")
1458:         windowVals = window
1459:     else:
1460:         windowVals = window(np.ones(NFFT, X.dtype))
1461:     ind = list(xrange(0, numRows-NFFT+1, NFFT-noverlap))
1462:     numSlices = len(ind)
1463:     FFTSlices = {}
1464:     FFTConjSlices = {}
1465:     Pxx = {}
1466:     slices = range(numSlices)
1467:     normVal = np.linalg.norm(windowVals)**2
1468:     for iCol in allColumns:
1469:         progressCallback(i/Ncols, 'Cacheing FFTs')
1470:         Slices = np.zeros((numSlices, numFreqs), dtype=np.complex_)
1471:         for iSlice in slices:
1472:             thisSlice = X[ind[iSlice]:ind[iSlice]+NFFT, iCol]
1473:             thisSlice = windowVals*detrend(thisSlice)
1474:             Slices[iSlice, :] = np.fft.fft(thisSlice)[:numFreqs]
1475: 
1476:         FFTSlices[iCol] = Slices
1477:         if preferSpeedOverMemory:
1478:             FFTConjSlices[iCol] = np.conj(Slices)
1479:         Pxx[iCol] = np.divide(np.mean(abs(Slices)**2, axis=0), normVal)
1480:     del Slices, ind, windowVals
1481: 
1482:     # compute the coherences and phases for all pairs using the
1483:     # cached FFTs
1484:     Cxy = {}
1485:     Phase = {}
1486:     count = 0
1487:     N = len(ij)
1488:     for i, j in ij:
1489:         count += 1
1490:         if count % 10 == 0:
1491:             progressCallback(count/N, 'Computing coherences')
1492: 
1493:         if preferSpeedOverMemory:
1494:             Pxy = FFTSlices[i] * FFTConjSlices[j]
1495:         else:
1496:             Pxy = FFTSlices[i] * np.conj(FFTSlices[j])
1497:         if numSlices > 1:
1498:             Pxy = np.mean(Pxy, axis=0)
1499: #       Pxy = np.divide(Pxy, normVal)
1500:         Pxy /= normVal
1501: #       Cxy[(i,j)] = np.divide(np.absolute(Pxy)**2, Pxx[i]*Pxx[j])
1502:         Cxy[i, j] = abs(Pxy)**2 / (Pxx[i]*Pxx[j])
1503:         Phase[i, j] = np.arctan2(Pxy.imag, Pxy.real)
1504: 
1505:     freqs = Fs/NFFT*np.arange(numFreqs)
1506:     if returnPxx:
1507:         return Cxy, Phase, freqs, Pxx
1508:     else:
1509:         return Cxy, Phase, freqs
1510: 
1511: 
1512: def entropy(y, bins):
1513:     r'''
1514:     Return the entropy of the data in *y* in units of nat.
1515: 
1516:     .. math::
1517: 
1518:       -\sum p_i \ln(p_i)
1519: 
1520:     where :math:`p_i` is the probability of observing *y* in the
1521:     :math:`i^{th}` bin of *bins*.  *bins* can be a number of bins or a
1522:     range of bins; see :func:`numpy.histogram`.
1523: 
1524:     Compare *S* with analytic calculation for a Gaussian::
1525: 
1526:       x = mu + sigma * randn(200000)
1527:       Sanalytic = 0.5 * ( 1.0 + log(2*pi*sigma**2.0) )
1528:     '''
1529:     n, bins = np.histogram(y, bins)
1530:     n = n.astype(float)
1531: 
1532:     n = np.take(n, np.nonzero(n)[0])         # get the positive
1533: 
1534:     p = np.divide(n, len(y))
1535: 
1536:     delta = bins[1] - bins[0]
1537:     S = -1.0 * np.sum(p * np.log(p)) + np.log(delta)
1538:     return S
1539: 
1540: 
1541: def normpdf(x, *args):
1542:     "Return the normal pdf evaluated at *x*; args provides *mu*, *sigma*"
1543:     mu, sigma = args
1544:     return 1./(np.sqrt(2*np.pi)*sigma)*np.exp(-0.5 * (1./sigma*(x - mu))**2)
1545: 
1546: 
1547: def find(condition):
1548:     "Return the indices where ravel(condition) is true"
1549:     res, = np.nonzero(np.ravel(condition))
1550:     return res
1551: 
1552: 
1553: def longest_contiguous_ones(x):
1554:     '''
1555:     Return the indices of the longest stretch of contiguous ones in *x*,
1556:     assuming *x* is a vector of zeros and ones.  If there are two
1557:     equally long stretches, pick the first.
1558:     '''
1559:     x = np.ravel(x)
1560:     if len(x) == 0:
1561:         return np.array([])
1562: 
1563:     ind = (x == 0).nonzero()[0]
1564:     if len(ind) == 0:
1565:         return np.arange(len(x))
1566:     if len(ind) == len(x):
1567:         return np.array([])
1568: 
1569:     y = np.zeros((len(x)+2,), x.dtype)
1570:     y[1:-1] = x
1571:     dif = np.diff(y)
1572:     up = (dif == 1).nonzero()[0]
1573:     dn = (dif == -1).nonzero()[0]
1574:     i = (dn-up == max(dn - up)).nonzero()[0][0]
1575:     ind = np.arange(up[i], dn[i])
1576: 
1577:     return ind
1578: 
1579: 
1580: def longest_ones(x):
1581:     '''alias for longest_contiguous_ones'''
1582:     return longest_contiguous_ones(x)
1583: 
1584: 
1585: class PCA(object):
1586:     def __init__(self, a, standardize=True):
1587:         '''
1588:         compute the SVD of a and store data for PCA.  Use project to
1589:         project the data onto a reduced set of dimensions
1590: 
1591:         Parameters
1592:         ----------
1593:         a : np.ndarray
1594:             A numobservations x numdims array
1595:         standardize : bool
1596:             True if input data are to be standardized. If False, only centering
1597:             will be carried out.
1598: 
1599:         Attributes
1600:         ----------
1601:         a
1602:             A centered unit sigma version of input ``a``.
1603: 
1604:         numrows, numcols
1605:             The dimensions of ``a``.
1606: 
1607:         mu
1608:             A numdims array of means of ``a``. This is the vector that points
1609:             to the origin of PCA space.
1610: 
1611:         sigma
1612:             A numdims array of standard deviation of ``a``.
1613: 
1614:         fracs
1615:             The proportion of variance of each of the principal components.
1616: 
1617:         s
1618:             The actual eigenvalues of the decomposition.
1619: 
1620:         Wt
1621:             The weight vector for projecting a numdims point or array into
1622:             PCA space.
1623: 
1624:         Y
1625:             A projected into PCA space.
1626: 
1627:         Notes
1628:         -----
1629:         The factor loadings are in the ``Wt`` factor, i.e., the factor loadings
1630:         for the first principal component are given by ``Wt[0]``. This row is
1631:         also the first eigenvector.
1632: 
1633:         '''
1634:         n, m = a.shape
1635:         if n < m:
1636:             raise RuntimeError('we assume data in a is organized with '
1637:                                'numrows>numcols')
1638: 
1639:         self.numrows, self.numcols = n, m
1640:         self.mu = a.mean(axis=0)
1641:         self.sigma = a.std(axis=0)
1642:         self.standardize = standardize
1643: 
1644:         a = self.center(a)
1645: 
1646:         self.a = a
1647: 
1648:         U, s, Vh = np.linalg.svd(a, full_matrices=False)
1649: 
1650:         # Note: .H indicates the conjugate transposed / Hermitian.
1651: 
1652:         # The SVD is commonly written as a = U s V.H.
1653:         # If U is a unitary matrix, it means that it satisfies U.H = inv(U).
1654: 
1655:         # The rows of Vh are the eigenvectors of a.H a.
1656:         # The columns of U are the eigenvectors of a a.H.
1657:         # For row i in Vh and column i in U, the corresponding eigenvalue is
1658:         # s[i]**2.
1659: 
1660:         self.Wt = Vh
1661: 
1662:         # save the transposed coordinates
1663:         Y = np.dot(Vh, a.T).T
1664:         self.Y = Y
1665: 
1666:         # save the eigenvalues
1667:         self.s = s**2
1668: 
1669:         # and now the contribution of the individual components
1670:         vars = self.s/float(len(s))
1671:         self.fracs = vars/vars.sum()
1672: 
1673:     def project(self, x, minfrac=0.):
1674:         '''
1675:         project x onto the principle axes, dropping any axes where fraction
1676:         of variance<minfrac
1677:         '''
1678:         x = np.asarray(x)
1679:         if x.shape[-1] != self.numcols:
1680:             raise ValueError('Expected an array with dims[-1]==%d' %
1681:                              self.numcols)
1682:         Y = np.dot(self.Wt, self.center(x).T).T
1683:         mask = self.fracs >= minfrac
1684:         if x.ndim == 2:
1685:             Yreduced = Y[:, mask]
1686:         else:
1687:             Yreduced = Y[mask]
1688:         return Yreduced
1689: 
1690:     def center(self, x):
1691:         '''
1692:         center and optionally standardize the data using the mean and sigma
1693:         from training set a
1694:         '''
1695:         if self.standardize:
1696:             return (x - self.mu)/self.sigma
1697:         else:
1698:             return (x - self.mu)
1699: 
1700:     @staticmethod
1701:     def _get_colinear():
1702:         c0 = np.array([
1703:             0.19294738,  0.6202667,   0.45962655,  0.07608613,  0.135818,
1704:             0.83580842,  0.07218851,  0.48318321,  0.84472463,  0.18348462,
1705:             0.81585306,  0.96923926,  0.12835919,  0.35075355,  0.15807861,
1706:             0.837437,    0.10824303,  0.1723387,   0.43926494,  0.83705486])
1707: 
1708:         c1 = np.array([
1709:             -1.17705601, -0.513883,   -0.26614584,  0.88067144,  1.00474954,
1710:             -1.1616545,   0.0266109,   0.38227157,  1.80489433,  0.21472396,
1711:             -1.41920399, -2.08158544, -0.10559009,  1.68999268,  0.34847107,
1712:             -0.4685737,   1.23980423, -0.14638744, -0.35907697,  0.22442616])
1713: 
1714:         c2 = c0 + 2*c1
1715:         c3 = -3*c0 + 4*c1
1716:         a = np.array([c3, c0, c1, c2]).T
1717:         return a
1718: 
1719: 
1720: def prctile(x, p=(0.0, 25.0, 50.0, 75.0, 100.0)):
1721:     '''
1722:     Return the percentiles of *x*.  *p* can either be a sequence of
1723:     percentile values or a scalar.  If *p* is a sequence, the ith
1724:     element of the return sequence is the *p*(i)-th percentile of *x*.
1725:     If *p* is a scalar, the largest value of *x* less than or equal to
1726:     the *p* percentage point in the sequence is returned.
1727:     '''
1728: 
1729:     # This implementation derived from scipy.stats.scoreatpercentile
1730:     def _interpolate(a, b, fraction):
1731:         '''Returns the point at the given fraction between a and b, where
1732:         'fraction' must be between 0 and 1.
1733:         '''
1734:         return a + (b - a) * fraction
1735: 
1736:     per = np.array(p)
1737:     values = np.sort(x, axis=None)
1738: 
1739:     idxs = per / 100 * (values.shape[0] - 1)
1740:     ai = idxs.astype(int)
1741:     bi = ai + 1
1742:     frac = idxs % 1
1743: 
1744:     # handle cases where attempting to interpolate past last index
1745:     cond = bi >= len(values)
1746:     if per.ndim:
1747:         ai[cond] -= 1
1748:         bi[cond] -= 1
1749:         frac[cond] += 1
1750:     else:
1751:         if cond:
1752:             ai -= 1
1753:             bi -= 1
1754:             frac += 1
1755: 
1756:     return _interpolate(values[ai], values[bi], frac)
1757: 
1758: 
1759: def prctile_rank(x, p):
1760:     '''
1761:     Return the rank for each element in *x*, return the rank
1762:     0..len(*p*).  e.g., if *p* = (25, 50, 75), the return value will be a
1763:     len(*x*) array with values in [0,1,2,3] where 0 indicates the
1764:     value is less than the 25th percentile, 1 indicates the value is
1765:     >= the 25th and < 50th percentile, ... and 3 indicates the value
1766:     is above the 75th percentile cutoff.
1767: 
1768:     *p* is either an array of percentiles in [0..100] or a scalar which
1769:     indicates how many quantiles of data you want ranked.
1770:     '''
1771: 
1772:     if not cbook.iterable(p):
1773:         p = np.arange(100.0/p, 100.0, 100.0/p)
1774:     else:
1775:         p = np.asarray(p)
1776: 
1777:     if p.max() <= 1 or p.min() < 0 or p.max() > 100:
1778:         raise ValueError('percentiles should be in range 0..100, not 0..1')
1779: 
1780:     ptiles = prctile(x, p)
1781:     return np.searchsorted(ptiles, x)
1782: 
1783: 
1784: def center_matrix(M, dim=0):
1785:     '''
1786:     Return the matrix *M* with each row having zero mean and unit std.
1787: 
1788:     If *dim* = 1 operate on columns instead of rows.  (*dim* is
1789:     opposite to the numpy axis kwarg.)
1790:     '''
1791:     M = np.asarray(M, float)
1792:     if dim:
1793:         M = (M - M.mean(axis=0)) / M.std(axis=0)
1794:     else:
1795:         M = (M - M.mean(axis=1)[:, np.newaxis])
1796:         M = M / M.std(axis=1)[:, np.newaxis]
1797:     return M
1798: 
1799: 
1800: def rk4(derivs, y0, t):
1801:     '''
1802:     Integrate 1D or ND system of ODEs using 4-th order Runge-Kutta.
1803:     This is a toy implementation which may be useful if you find
1804:     yourself stranded on a system w/o scipy.  Otherwise use
1805:     :func:`scipy.integrate`.
1806: 
1807:     Parameters
1808:     ----------
1809:     y0
1810:         initial state vector
1811: 
1812:     t
1813:         sample times
1814: 
1815:     derivs
1816:         returns the derivative of the system and has the
1817:         signature ``dy = derivs(yi, ti)``
1818: 
1819:     Examples
1820:     --------
1821: 
1822:     A 2D system::
1823: 
1824:         def derivs6(x,t):
1825:             d1 =  x[0] + 2*x[1]
1826:             d2 =  -3*x[0] + 4*x[1]
1827:             return (d1, d2)
1828:         dt = 0.0005
1829:         t = arange(0.0, 2.0, dt)
1830:         y0 = (1,2)
1831:         yout = rk4(derivs6, y0, t)
1832: 
1833:     A 1D system::
1834: 
1835:         alpha = 2
1836:         def derivs(x,t):
1837:             return -alpha*x + exp(-t)
1838: 
1839:         y0 = 1
1840:         yout = rk4(derivs, y0, t)
1841: 
1842:     If you have access to scipy, you should probably be using the
1843:     scipy.integrate tools rather than this function.
1844:     '''
1845: 
1846:     try:
1847:         Ny = len(y0)
1848:     except TypeError:
1849:         yout = np.zeros((len(t),), float)
1850:     else:
1851:         yout = np.zeros((len(t), Ny), float)
1852: 
1853:     yout[0] = y0
1854:     i = 0
1855: 
1856:     for i in np.arange(len(t)-1):
1857: 
1858:         thist = t[i]
1859:         dt = t[i+1] - thist
1860:         dt2 = dt/2.0
1861:         y0 = yout[i]
1862: 
1863:         k1 = np.asarray(derivs(y0, thist))
1864:         k2 = np.asarray(derivs(y0 + dt2*k1, thist+dt2))
1865:         k3 = np.asarray(derivs(y0 + dt2*k2, thist+dt2))
1866:         k4 = np.asarray(derivs(y0 + dt*k3, thist+dt))
1867:         yout[i+1] = y0 + dt/6.0*(k1 + 2*k2 + 2*k3 + k4)
1868:     return yout
1869: 
1870: 
1871: def bivariate_normal(X, Y, sigmax=1.0, sigmay=1.0,
1872:                      mux=0.0, muy=0.0, sigmaxy=0.0):
1873:     '''
1874:     Bivariate Gaussian distribution for equal shape *X*, *Y*.
1875: 
1876:     See `bivariate normal
1877:     <http://mathworld.wolfram.com/BivariateNormalDistribution.html>`_
1878:     at mathworld.
1879:     '''
1880:     Xmu = X-mux
1881:     Ymu = Y-muy
1882: 
1883:     rho = sigmaxy/(sigmax*sigmay)
1884:     z = Xmu**2/sigmax**2 + Ymu**2/sigmay**2 - 2*rho*Xmu*Ymu/(sigmax*sigmay)
1885:     denom = 2*np.pi*sigmax*sigmay*np.sqrt(1-rho**2)
1886:     return np.exp(-z/(2*(1-rho**2))) / denom
1887: 
1888: 
1889: def get_xyz_where(Z, Cond):
1890:     '''
1891:     *Z* and *Cond* are *M* x *N* matrices.  *Z* are data and *Cond* is
1892:     a boolean matrix where some condition is satisfied.  Return value
1893:     is (*x*, *y*, *z*) where *x* and *y* are the indices into *Z* and
1894:     *z* are the values of *Z* at those indices.  *x*, *y*, and *z* are
1895:     1D arrays.
1896:     '''
1897:     X, Y = np.indices(Z.shape)
1898:     return X[Cond], Y[Cond], Z[Cond]
1899: 
1900: 
1901: def get_sparse_matrix(M, N, frac=0.1):
1902:     '''
1903:     Return a *M* x *N* sparse matrix with *frac* elements randomly
1904:     filled.
1905:     '''
1906:     data = np.zeros((M, N))*0.
1907:     for i in range(int(M*N*frac)):
1908:         x = np.random.randint(0, M-1)
1909:         y = np.random.randint(0, N-1)
1910:         data[x, y] = np.random.rand()
1911:     return data
1912: 
1913: 
1914: def dist(x, y):
1915:     '''
1916:     Return the distance between two points.
1917:     '''
1918:     d = x-y
1919:     return np.sqrt(np.dot(d, d))
1920: 
1921: 
1922: def dist_point_to_segment(p, s0, s1):
1923:     '''
1924:     Get the distance of a point to a segment.
1925: 
1926:       *p*, *s0*, *s1* are *xy* sequences
1927: 
1928:     This algorithm from
1929:     http://geomalgorithms.com/a02-_lines.html
1930:     '''
1931:     p = np.asarray(p, float)
1932:     s0 = np.asarray(s0, float)
1933:     s1 = np.asarray(s1, float)
1934:     v = s1 - s0
1935:     w = p - s0
1936: 
1937:     c1 = np.dot(w, v)
1938:     if c1 <= 0:
1939:         return dist(p, s0)
1940: 
1941:     c2 = np.dot(v, v)
1942:     if c2 <= c1:
1943:         return dist(p, s1)
1944: 
1945:     b = c1 / c2
1946:     pb = s0 + b * v
1947:     return dist(p, pb)
1948: 
1949: 
1950: def segments_intersect(s1, s2):
1951:     '''
1952:     Return *True* if *s1* and *s2* intersect.
1953:     *s1* and *s2* are defined as::
1954: 
1955:       s1: (x1, y1), (x2, y2)
1956:       s2: (x3, y3), (x4, y4)
1957:     '''
1958:     (x1, y1), (x2, y2) = s1
1959:     (x3, y3), (x4, y4) = s2
1960: 
1961:     den = ((y4-y3) * (x2-x1)) - ((x4-x3)*(y2-y1))
1962: 
1963:     n1 = ((x4-x3) * (y1-y3)) - ((y4-y3)*(x1-x3))
1964:     n2 = ((x2-x1) * (y1-y3)) - ((y2-y1)*(x1-x3))
1965: 
1966:     if den == 0:
1967:         # lines parallel
1968:         return False
1969: 
1970:     u1 = n1/den
1971:     u2 = n2/den
1972: 
1973:     return 0.0 <= u1 <= 1.0 and 0.0 <= u2 <= 1.0
1974: 
1975: 
1976: def fftsurr(x, detrend=detrend_none, window=window_none):
1977:     '''
1978:     Compute an FFT phase randomized surrogate of *x*.
1979:     '''
1980:     if cbook.iterable(window):
1981:         x = window*detrend(x)
1982:     else:
1983:         x = window(detrend(x))
1984:     z = np.fft.fft(x)
1985:     a = 2.*np.pi*1j
1986:     phase = a * np.random.rand(len(x))
1987:     z = z*np.exp(phase)
1988:     return np.fft.ifft(z).real
1989: 
1990: 
1991: def movavg(x, n):
1992:     '''
1993:     Compute the len(*n*) moving average of *x*.
1994:     '''
1995:     w = np.empty((n,), dtype=float)
1996:     w[:] = 1.0/n
1997:     return np.convolve(x, w, mode='valid')
1998: 
1999: 
2000: # the following code was written and submitted by Fernando Perez
2001: # from the ipython numutils package under a BSD license
2002: # begin fperez functions
2003: 
2004: '''
2005: A set of convenient utilities for numerical work.
2006: 
2007: Most of this module requires numpy or is meant to be used with it.
2008: 
2009: Copyright (c) 2001-2004, Fernando Perez. <Fernando.Perez@colorado.edu>
2010: All rights reserved.
2011: 
2012: This license was generated from the BSD license template as found in:
2013: http://www.opensource.org/licenses/bsd-license.php
2014: 
2015: Redistribution and use in source and binary forms, with or without
2016: modification, are permitted provided that the following conditions are met:
2017: 
2018:     * Redistributions of source code must retain the above copyright notice,
2019:       this list of conditions and the following disclaimer.
2020: 
2021:     * Redistributions in binary form must reproduce the above copyright
2022:       notice, this list of conditions and the following disclaimer in the
2023:       documentation and/or other materials provided with the distribution.
2024: 
2025:     * Neither the name of the IPython project nor the names of its
2026:       contributors may be used to endorse or promote products derived from
2027:       this software without specific prior written permission.
2028: 
2029: THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
2030: AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
2031: IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
2032: DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
2033: FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
2034: DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
2035: SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
2036: CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
2037: OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
2038: OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
2039: 
2040: '''
2041: 
2042: 
2043: # *****************************************************************************
2044: # Globals
2045: # ****************************************************************************
2046: # function definitions
2047: exp_safe_MIN = math.log(2.2250738585072014e-308)
2048: exp_safe_MAX = 1.7976931348623157e+308
2049: 
2050: 
2051: def exp_safe(x):
2052:     '''
2053:     Compute exponentials which safely underflow to zero.
2054: 
2055:     Slow, but convenient to use. Note that numpy provides proper
2056:     floating point exception handling with access to the underlying
2057:     hardware.
2058:     '''
2059: 
2060:     if type(x) is np.ndarray:
2061:         return np.exp(np.clip(x, exp_safe_MIN, exp_safe_MAX))
2062:     else:
2063:         return math.exp(x)
2064: 
2065: 
2066: def amap(fn, *args):
2067:     '''
2068:     amap(function, sequence[, sequence, ...]) -> array.
2069: 
2070:     Works like :func:`map`, but it returns an array.  This is just a
2071:     convenient shorthand for ``numpy.array(map(...))``.
2072:     '''
2073:     return np.array(list(map(fn, *args)))
2074: 
2075: 
2076: def rms_flat(a):
2077:     '''
2078:     Return the root mean square of all the elements of *a*, flattened out.
2079:     '''
2080:     return np.sqrt(np.mean(np.abs(a) ** 2))
2081: 
2082: 
2083: def l1norm(a):
2084:     '''
2085:     Return the *l1* norm of *a*, flattened out.
2086: 
2087:     Implemented as a separate function (not a call to :func:`norm` for speed).
2088:     '''
2089:     return np.sum(np.abs(a))
2090: 
2091: 
2092: def l2norm(a):
2093:     '''
2094:     Return the *l2* norm of *a*, flattened out.
2095: 
2096:     Implemented as a separate function (not a call to :func:`norm` for speed).
2097:     '''
2098:     return np.sqrt(np.sum(np.abs(a) ** 2))
2099: 
2100: 
2101: def norm_flat(a, p=2):
2102:     '''
2103:     norm(a,p=2) -> l-p norm of a.flat
2104: 
2105:     Return the l-p norm of *a*, considered as a flat array.  This is NOT a true
2106:     matrix norm, since arrays of arbitrary rank are always flattened.
2107: 
2108:     *p* can be a number or the string 'Infinity' to get the L-infinity norm.
2109:     '''
2110:     # This function was being masked by a more general norm later in
2111:     # the file.  We may want to simply delete it.
2112:     if p == 'Infinity':
2113:         return np.max(np.abs(a))
2114:     else:
2115:         return np.sum(np.abs(a) ** p) ** (1 / p)
2116: 
2117: 
2118: def frange(xini, xfin=None, delta=None, **kw):
2119:     '''
2120:     frange([start,] stop[, step, keywords]) -> array of floats
2121: 
2122:     Return a numpy ndarray containing a progression of floats. Similar to
2123:     :func:`numpy.arange`, but defaults to a closed interval.
2124: 
2125:     ``frange(x0, x1)`` returns ``[x0, x0+1, x0+2, ..., x1]``; *start*
2126:     defaults to 0, and the endpoint *is included*. This behavior is
2127:     different from that of :func:`range` and
2128:     :func:`numpy.arange`. This is deliberate, since :func:`frange`
2129:     will probably be more useful for generating lists of points for
2130:     function evaluation, and endpoints are often desired in this
2131:     use. The usual behavior of :func:`range` can be obtained by
2132:     setting the keyword *closed* = 0, in this case, :func:`frange`
2133:     basically becomes :func:numpy.arange`.
2134: 
2135:     When *step* is given, it specifies the increment (or
2136:     decrement). All arguments can be floating point numbers.
2137: 
2138:     ``frange(x0,x1,d)`` returns ``[x0,x0+d,x0+2d,...,xfin]`` where
2139:     *xfin* <= *x1*.
2140: 
2141:     :func:`frange` can also be called with the keyword *npts*. This
2142:     sets the number of points the list should contain (and overrides
2143:     the value *step* might have been given). :func:`numpy.arange`
2144:     doesn't offer this option.
2145: 
2146:     Examples::
2147: 
2148:       >>> frange(3)
2149:       array([ 0.,  1.,  2.,  3.])
2150:       >>> frange(3,closed=0)
2151:       array([ 0.,  1.,  2.])
2152:       >>> frange(1,6,2)
2153:       array([1, 3, 5])   or 1,3,5,7, depending on floating point vagueries
2154:       >>> frange(1,6.5,npts=5)
2155:       array([ 1.   ,  2.375,  3.75 ,  5.125,  6.5  ])
2156:     '''
2157: 
2158:     # defaults
2159:     kw.setdefault('closed', 1)
2160:     endpoint = kw['closed'] != 0
2161: 
2162:     # funny logic to allow the *first* argument to be optional (like range())
2163:     # This was modified with a simpler version from a similar frange() found
2164:     # at http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/66472
2165:     if xfin is None:
2166:         xfin = xini + 0.0
2167:         xini = 0.0
2168: 
2169:     if delta is None:
2170:         delta = 1.0
2171: 
2172:     # compute # of points, spacing and return final list
2173:     try:
2174:         npts = kw['npts']
2175:         delta = (xfin-xini)/float(npts-endpoint)
2176:     except KeyError:
2177:         npts = int(np.round((xfin-xini)/delta)) + endpoint
2178:         # round finds the nearest, so the endpoint can be up to
2179:         # delta/2 larger than xfin.
2180: 
2181:     return np.arange(npts)*delta+xini
2182: # end frange()
2183: 
2184: 
2185: def identity(n, rank=2, dtype='l', typecode=None):
2186:     '''
2187:     Returns the identity matrix of shape (*n*, *n*, ..., *n*) (rank *r*).
2188: 
2189:     For ranks higher than 2, this object is simply a multi-index Kronecker
2190:     delta::
2191: 
2192:                             /  1  if i0=i1=...=iR,
2193:         id[i0,i1,...,iR] = -|
2194:                             \\  0  otherwise.
2195: 
2196:     Optionally a *dtype* (or typecode) may be given (it defaults to 'l').
2197: 
2198:     Since rank defaults to 2, this function behaves in the default case (when
2199:     only *n* is given) like ``numpy.identity(n)`` -- but surprisingly, it is
2200:     much faster.
2201:     '''
2202:     if typecode is not None:
2203:         dtype = typecode
2204:     iden = np.zeros((n,)*rank, dtype)
2205:     for i in range(n):
2206:         idx = (i,)*rank
2207:         iden[idx] = 1
2208:     return iden
2209: 
2210: 
2211: def base_repr(number, base=2, padding=0):
2212:     '''
2213:     Return the representation of a *number* in any given *base*.
2214:     '''
2215:     chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
2216:     if number < base:
2217:         return (padding - 1) * chars[0] + chars[int(number)]
2218:     max_exponent = int(math.log(number)/math.log(base))
2219:     max_power = long(base) ** max_exponent
2220:     lead_digit = int(number/max_power)
2221:     return (chars[lead_digit] +
2222:             base_repr(number - max_power * lead_digit, base,
2223:                       max(padding - 1, max_exponent)))
2224: 
2225: 
2226: def binary_repr(number, max_length=1025):
2227:     '''
2228:     Return the binary representation of the input *number* as a
2229:     string.
2230: 
2231:     This is more efficient than using :func:`base_repr` with base 2.
2232: 
2233:     Increase the value of max_length for very large numbers. Note that
2234:     on 32-bit machines, 2**1023 is the largest integer power of 2
2235:     which can be converted to a Python float.
2236:     '''
2237: 
2238: #   assert number < 2L << max_length
2239:     shifts = map(operator.rshift, max_length * [number],
2240:                  range(max_length - 1, -1, -1))
2241:     digits = list(map(operator.mod, shifts, max_length * [2]))
2242:     if not digits.count(1):
2243:         return 0
2244:     digits = digits[digits.index(1):]
2245:     return ''.join(map(repr, digits)).replace('L', '')
2246: 
2247: 
2248: def log2(x, ln2=math.log(2.0)):
2249:     '''
2250:     Return the log(*x*) in base 2.
2251: 
2252:     This is a _slow_ function but which is guaranteed to return the correct
2253:     integer value if the input is an integer exact power of 2.
2254:     '''
2255:     try:
2256:         bin_n = binary_repr(x)[1:]
2257:     except (AssertionError, TypeError):
2258:         return math.log(x)/ln2
2259:     else:
2260:         if '1' in bin_n:
2261:             return math.log(x)/ln2
2262:         else:
2263:             return len(bin_n)
2264: 
2265: 
2266: def ispower2(n):
2267:     '''
2268:     Returns the log base 2 of *n* if *n* is a power of 2, zero otherwise.
2269: 
2270:     Note the potential ambiguity if *n* == 1: 2**0 == 1, interpret accordingly.
2271:     '''
2272: 
2273:     bin_n = binary_repr(n)[1:]
2274:     if '1' in bin_n:
2275:         return 0
2276:     else:
2277:         return len(bin_n)
2278: 
2279: 
2280: def isvector(X):
2281:     '''
2282:     Like the MATLAB function with the same name, returns *True*
2283:     if the supplied numpy array or matrix *X* looks like a vector,
2284:     meaning it has a one non-singleton axis (i.e., it can have
2285:     multiple axes, but all must have length 1, except for one of
2286:     them).
2287: 
2288:     If you just want to see if the array has 1 axis, use X.ndim == 1.
2289:     '''
2290:     return np.prod(X.shape) == np.max(X.shape)
2291: 
2292: # end fperez numutils code
2293: 
2294: 
2295: # helpers for loading, saving, manipulating and viewing numpy record arrays
2296: 
2297: def safe_isnan(x):
2298:     ':func:`numpy.isnan` for arbitrary types'
2299:     if isinstance(x, six.string_types):
2300:         return False
2301:     try:
2302:         b = np.isnan(x)
2303:     except NotImplementedError:
2304:         return False
2305:     except TypeError:
2306:         return False
2307:     else:
2308:         return b
2309: 
2310: 
2311: def safe_isinf(x):
2312:     ':func:`numpy.isinf` for arbitrary types'
2313:     if isinstance(x, six.string_types):
2314:         return False
2315:     try:
2316:         b = np.isinf(x)
2317:     except NotImplementedError:
2318:         return False
2319:     except TypeError:
2320:         return False
2321:     else:
2322:         return b
2323: 
2324: 
2325: def rec_append_fields(rec, names, arrs, dtypes=None):
2326:     '''
2327:     Return a new record array with field names populated with data
2328:     from arrays in *arrs*.  If appending a single field, then *names*,
2329:     *arrs* and *dtypes* do not have to be lists. They can just be the
2330:     values themselves.
2331:     '''
2332:     if (not isinstance(names, six.string_types) and cbook.iterable(names)
2333:             and len(names) and isinstance(names[0]), six.string_types):
2334:         if len(names) != len(arrs):
2335:             raise ValueError("number of arrays do not match number of names")
2336:     else:  # we have only 1 name and 1 array
2337:         names = [names]
2338:         arrs = [arrs]
2339:     arrs = list(map(np.asarray, arrs))
2340:     if dtypes is None:
2341:         dtypes = [a.dtype for a in arrs]
2342:     elif not cbook.iterable(dtypes):
2343:         dtypes = [dtypes]
2344:     if len(arrs) != len(dtypes):
2345:         if len(dtypes) == 1:
2346:             dtypes = dtypes * len(arrs)
2347:         else:
2348:             raise ValueError("dtypes must be None, a single dtype or a list")
2349:     old_dtypes = rec.dtype.descr
2350:     if six.PY2:
2351:         old_dtypes = [(name.encode('utf-8'), dt) for name, dt in old_dtypes]
2352:     newdtype = np.dtype(old_dtypes + list(zip(names, dtypes)))
2353:     newrec = np.recarray(rec.shape, dtype=newdtype)
2354:     for field in rec.dtype.fields:
2355:         newrec[field] = rec[field]
2356:     for name, arr in zip(names, arrs):
2357:         newrec[name] = arr
2358:     return newrec
2359: 
2360: 
2361: def rec_drop_fields(rec, names):
2362:     '''
2363:     Return a new numpy record array with fields in *names* dropped.
2364:     '''
2365: 
2366:     names = set(names)
2367: 
2368:     newdtype = np.dtype([(name, rec.dtype[name]) for name in rec.dtype.names
2369:                          if name not in names])
2370: 
2371:     newrec = np.recarray(rec.shape, dtype=newdtype)
2372:     for field in newdtype.names:
2373:         newrec[field] = rec[field]
2374: 
2375:     return newrec
2376: 
2377: 
2378: def rec_keep_fields(rec, names):
2379:     '''
2380:     Return a new numpy record array with only fields listed in names
2381:     '''
2382: 
2383:     if isinstance(names, six.string_types):
2384:         names = names.split(',')
2385: 
2386:     arrays = []
2387:     for name in names:
2388:         arrays.append(rec[name])
2389: 
2390:     return np.rec.fromarrays(arrays, names=names)
2391: 
2392: 
2393: def rec_groupby(r, groupby, stats):
2394:     '''
2395:     *r* is a numpy record array
2396: 
2397:     *groupby* is a sequence of record array attribute names that
2398:     together form the grouping key.  e.g., ('date', 'productcode')
2399: 
2400:     *stats* is a sequence of (*attr*, *func*, *outname*) tuples which
2401:     will call ``x = func(attr)`` and assign *x* to the record array
2402:     output with attribute *outname*.  For example::
2403: 
2404:       stats = ( ('sales', len, 'numsales'), ('sales', np.mean, 'avgsale') )
2405: 
2406:     Return record array has *dtype* names for each attribute name in
2407:     the *groupby* argument, with the associated group values, and
2408:     for each outname name in the *stats* argument, with the associated
2409:     stat summary output.
2410:     '''
2411:     # build a dictionary from groupby keys-> list of indices into r with
2412:     # those keys
2413:     rowd = {}
2414:     for i, row in enumerate(r):
2415:         key = tuple([row[attr] for attr in groupby])
2416:         rowd.setdefault(key, []).append(i)
2417: 
2418:     rows = []
2419:     # sort the output by groupby keys
2420:     for key in sorted(rowd):
2421:         row = list(key)
2422:         # get the indices for this groupby key
2423:         ind = rowd[key]
2424:         thisr = r[ind]
2425:         # call each stat function for this groupby slice
2426:         row.extend([func(thisr[attr]) for attr, func, outname in stats])
2427:         rows.append(row)
2428: 
2429:     # build the output record array with groupby and outname attributes
2430:     attrs, funcs, outnames = list(zip(*stats))
2431:     names = list(groupby)
2432:     names.extend(outnames)
2433:     return np.rec.fromrecords(rows, names=names)
2434: 
2435: 
2436: def rec_summarize(r, summaryfuncs):
2437:     '''
2438:     *r* is a numpy record array
2439: 
2440:     *summaryfuncs* is a list of (*attr*, *func*, *outname*) tuples
2441:     which will apply *func* to the array *r*[attr] and assign the
2442:     output to a new attribute name *outname*.  The returned record
2443:     array is identical to *r*, with extra arrays for each element in
2444:     *summaryfuncs*.
2445: 
2446:     '''
2447: 
2448:     names = list(r.dtype.names)
2449:     arrays = [r[name] for name in names]
2450: 
2451:     for attr, func, outname in summaryfuncs:
2452:         names.append(outname)
2453:         arrays.append(np.asarray(func(r[attr])))
2454: 
2455:     return np.rec.fromarrays(arrays, names=names)
2456: 
2457: 
2458: def rec_join(key, r1, r2, jointype='inner', defaults=None, r1postfix='1',
2459:              r2postfix='2'):
2460:     '''
2461:     Join record arrays *r1* and *r2* on *key*; *key* is a tuple of
2462:     field names -- if *key* is a string it is assumed to be a single
2463:     attribute name. If *r1* and *r2* have equal values on all the keys
2464:     in the *key* tuple, then their fields will be merged into a new
2465:     record array containing the intersection of the fields of *r1* and
2466:     *r2*.
2467: 
2468:     *r1* (also *r2*) must not have any duplicate keys.
2469: 
2470:     The *jointype* keyword can be 'inner', 'outer', 'leftouter'.  To
2471:     do a rightouter join just reverse *r1* and *r2*.
2472: 
2473:     The *defaults* keyword is a dictionary filled with
2474:     ``{column_name:default_value}`` pairs.
2475: 
2476:     The keywords *r1postfix* and *r2postfix* are postfixed to column names
2477:     (other than keys) that are both in *r1* and *r2*.
2478:     '''
2479: 
2480:     if isinstance(key, six.string_types):
2481:         key = (key, )
2482: 
2483:     for name in key:
2484:         if name not in r1.dtype.names:
2485:             raise ValueError('r1 does not have key field %s' % name)
2486:         if name not in r2.dtype.names:
2487:             raise ValueError('r2 does not have key field %s' % name)
2488: 
2489:     def makekey(row):
2490:         return tuple([row[name] for name in key])
2491: 
2492:     r1d = {makekey(row): i for i, row in enumerate(r1)}
2493:     r2d = {makekey(row): i for i, row in enumerate(r2)}
2494: 
2495:     r1keys = set(r1d)
2496:     r2keys = set(r2d)
2497: 
2498:     common_keys = r1keys & r2keys
2499: 
2500:     r1ind = np.array([r1d[k] for k in common_keys])
2501:     r2ind = np.array([r2d[k] for k in common_keys])
2502: 
2503:     common_len = len(common_keys)
2504:     left_len = right_len = 0
2505:     if jointype == "outer" or jointype == "leftouter":
2506:         left_keys = r1keys.difference(r2keys)
2507:         left_ind = np.array([r1d[k] for k in left_keys])
2508:         left_len = len(left_ind)
2509:     if jointype == "outer":
2510:         right_keys = r2keys.difference(r1keys)
2511:         right_ind = np.array([r2d[k] for k in right_keys])
2512:         right_len = len(right_ind)
2513: 
2514:     def key_desc(name):
2515:         '''
2516:         if name is a string key, use the larger size of r1 or r2 before
2517:         merging
2518:         '''
2519:         dt1 = r1.dtype[name]
2520:         if dt1.type != np.string_:
2521:             return (name, dt1.descr[0][1])
2522: 
2523:         dt2 = r2.dtype[name]
2524:         if dt1 != dt2:
2525:             msg = "The '{0}' fields in arrays 'r1' and 'r2' must have the same"
2526:             msg += " dtype."
2527:             raise ValueError(msg.format(name))
2528:         if dt1.num > dt2.num:
2529:             return (name, dt1.descr[0][1])
2530:         else:
2531:             return (name, dt2.descr[0][1])
2532: 
2533:     keydesc = [key_desc(name) for name in key]
2534: 
2535:     def mapped_r1field(name):
2536:         '''
2537:         The column name in *newrec* that corresponds to the column in *r1*.
2538:         '''
2539:         if name in key or name not in r2.dtype.names:
2540:             return name
2541:         else:
2542:             return name + r1postfix
2543: 
2544:     def mapped_r2field(name):
2545:         '''
2546:         The column name in *newrec* that corresponds to the column in *r2*.
2547:         '''
2548:         if name in key or name not in r1.dtype.names:
2549:             return name
2550:         else:
2551:             return name + r2postfix
2552: 
2553:     r1desc = [(mapped_r1field(desc[0]), desc[1]) for desc in r1.dtype.descr
2554:               if desc[0] not in key]
2555:     r2desc = [(mapped_r2field(desc[0]), desc[1]) for desc in r2.dtype.descr
2556:               if desc[0] not in key]
2557:     all_dtypes = keydesc + r1desc + r2desc
2558:     if six.PY2:
2559:         all_dtypes = [(name.encode('utf-8'), dt) for name, dt in all_dtypes]
2560:     newdtype = np.dtype(all_dtypes)
2561:     newrec = np.recarray((common_len + left_len + right_len,), dtype=newdtype)
2562: 
2563:     if defaults is not None:
2564:         for thiskey in defaults:
2565:             if thiskey not in newdtype.names:
2566:                 warnings.warn('rec_join defaults key="%s" not in new dtype '
2567:                               'names "%s"' % (thiskey, newdtype.names))
2568: 
2569:     for name in newdtype.names:
2570:         dt = newdtype[name]
2571:         if dt.kind in ('f', 'i'):
2572:             newrec[name] = 0
2573: 
2574:     if jointype != 'inner' and defaults is not None:
2575:         # fill in the defaults enmasse
2576:         newrec_fields = list(newrec.dtype.fields)
2577:         for k, v in six.iteritems(defaults):
2578:             if k in newrec_fields:
2579:                 newrec[k] = v
2580: 
2581:     for field in r1.dtype.names:
2582:         newfield = mapped_r1field(field)
2583:         if common_len:
2584:             newrec[newfield][:common_len] = r1[field][r1ind]
2585:         if (jointype == "outer" or jointype == "leftouter") and left_len:
2586:             newrec[newfield][common_len:(common_len+left_len)] = (
2587:                 r1[field][left_ind]
2588:             )
2589: 
2590:     for field in r2.dtype.names:
2591:         newfield = mapped_r2field(field)
2592:         if field not in key and common_len:
2593:             newrec[newfield][:common_len] = r2[field][r2ind]
2594:         if jointype == "outer" and right_len:
2595:             newrec[newfield][-right_len:] = r2[field][right_ind]
2596: 
2597:     newrec.sort(order=key)
2598: 
2599:     return newrec
2600: 
2601: 
2602: def recs_join(key, name, recs, jointype='outer', missing=0., postfixes=None):
2603:     '''
2604:     Join a sequence of record arrays on single column key.
2605: 
2606:     This function only joins a single column of the multiple record arrays
2607: 
2608:     *key*
2609:       is the column name that acts as a key
2610: 
2611:     *name*
2612:       is the name of the column that we want to join
2613: 
2614:     *recs*
2615:       is a list of record arrays to join
2616: 
2617:     *jointype*
2618:       is a string 'inner' or 'outer'
2619: 
2620:     *missing*
2621:       is what any missing field is replaced by
2622: 
2623:     *postfixes*
2624:       if not None, a len recs sequence of postfixes
2625: 
2626:     returns a record array with columns [rowkey, name0, name1, ... namen-1].
2627:     or if postfixes [PF0, PF1, ..., PFN-1] are supplied,
2628:     [rowkey, namePF0, namePF1, ... namePFN-1].
2629: 
2630:     Example::
2631: 
2632:       r = recs_join("date", "close", recs=[r0, r1], missing=0.)
2633: 
2634:     '''
2635:     results = []
2636:     aligned_iters = cbook.align_iterators(operator.attrgetter(key),
2637:                                           *[iter(r) for r in recs])
2638: 
2639:     def extract(r):
2640:         if r is None:
2641:             return missing
2642:         else:
2643:             return r[name]
2644: 
2645:     if jointype == "outer":
2646:         for rowkey, row in aligned_iters:
2647:             results.append([rowkey] + list(map(extract, row)))
2648:     elif jointype == "inner":
2649:         for rowkey, row in aligned_iters:
2650:             if None not in row:  # throw out any Nones
2651:                 results.append([rowkey] + list(map(extract, row)))
2652: 
2653:     if postfixes is None:
2654:         postfixes = ['%d' % i for i in range(len(recs))]
2655:     names = ",".join([key] + ["%s%s" % (name, postfix)
2656:                               for postfix in postfixes])
2657:     return np.rec.fromrecords(results, names=names)
2658: 
2659: 
2660: def csv2rec(fname, comments='#', skiprows=0, checkrows=0, delimiter=',',
2661:             converterd=None, names=None, missing='', missingd=None,
2662:             use_mrecords=False, dayfirst=False, yearfirst=False):
2663:     '''
2664:     Load data from comma/space/tab delimited file in *fname* into a
2665:     numpy record array and return the record array.
2666: 
2667:     If *names* is *None*, a header row is required to automatically
2668:     assign the recarray names.  The headers will be lower cased,
2669:     spaces will be converted to underscores, and illegal attribute
2670:     name characters removed.  If *names* is not *None*, it is a
2671:     sequence of names to use for the column names.  In this case, it
2672:     is assumed there is no header row.
2673: 
2674: 
2675:     - *fname*: can be a filename or a file handle.  Support for gzipped
2676:       files is automatic, if the filename ends in '.gz'
2677: 
2678:     - *comments*: the character used to indicate the start of a comment
2679:       in the file, or *None* to switch off the removal of comments
2680: 
2681:     - *skiprows*: is the number of rows from the top to skip
2682: 
2683:     - *checkrows*: is the number of rows to check to validate the column
2684:       data type.  When set to zero all rows are validated.
2685: 
2686:     - *converterd*: if not *None*, is a dictionary mapping column number or
2687:       munged column name to a converter function.
2688: 
2689:     - *names*: if not None, is a list of header names.  In this case, no
2690:       header will be read from the file
2691: 
2692:     - *missingd* is a dictionary mapping munged column names to field values
2693:       which signify that the field does not contain actual data and should
2694:       be masked, e.g., '0000-00-00' or 'unused'
2695: 
2696:     - *missing*: a string whose value signals a missing field regardless of
2697:       the column it appears in
2698: 
2699:     - *use_mrecords*: if True, return an mrecords.fromrecords record array if
2700:       any of the data are missing
2701: 
2702:     - *dayfirst*: default is False so that MM-DD-YY has precedence over
2703:       DD-MM-YY.  See
2704:       http://labix.org/python-dateutil#head-b95ce2094d189a89f80f5ae52a05b4ab7b41af47
2705:       for further information.
2706: 
2707:     - *yearfirst*: default is False so that MM-DD-YY has precedence over
2708:       YY-MM-DD. See
2709:       http://labix.org/python-dateutil#head-b95ce2094d189a89f80f5ae52a05b4ab7b41af47
2710:       for further information.
2711: 
2712:       If no rows are found, *None* is returned
2713:     '''
2714: 
2715:     if converterd is None:
2716:         converterd = dict()
2717: 
2718:     if missingd is None:
2719:         missingd = {}
2720: 
2721:     import dateutil.parser
2722:     import datetime
2723: 
2724:     fh = cbook.to_filehandle(fname)
2725: 
2726:     delimiter = str(delimiter)
2727: 
2728:     class FH:
2729:         '''
2730:         For space-delimited files, we want different behavior than
2731:         comma or tab.  Generally, we want multiple spaces to be
2732:         treated as a single separator, whereas with comma and tab we
2733:         want multiple commas to return multiple (empty) fields.  The
2734:         join/strip trick below effects this.
2735:         '''
2736:         def __init__(self, fh):
2737:             self.fh = fh
2738: 
2739:         def close(self):
2740:             self.fh.close()
2741: 
2742:         def seek(self, arg):
2743:             self.fh.seek(arg)
2744: 
2745:         def fix(self, s):
2746:             return ' '.join(s.split())
2747: 
2748:         def __next__(self):
2749:             return self.fix(next(self.fh))
2750: 
2751:         def __iter__(self):
2752:             for line in self.fh:
2753:                 yield self.fix(line)
2754: 
2755:     if delimiter == ' ':
2756:         fh = FH(fh)
2757: 
2758:     reader = csv.reader(fh, delimiter=delimiter)
2759: 
2760:     def process_skiprows(reader):
2761:         if skiprows:
2762:             for i, row in enumerate(reader):
2763:                 if i >= (skiprows-1):
2764:                     break
2765: 
2766:         return fh, reader
2767: 
2768:     process_skiprows(reader)
2769: 
2770:     def ismissing(name, val):
2771:         "Should the value val in column name be masked?"
2772:         return val == missing or val == missingd.get(name) or val == ''
2773: 
2774:     def with_default_value(func, default):
2775:         def newfunc(name, val):
2776:             if ismissing(name, val):
2777:                 return default
2778:             else:
2779:                 return func(val)
2780:         return newfunc
2781: 
2782:     def mybool(x):
2783:         if x == 'True':
2784:             return True
2785:         elif x == 'False':
2786:             return False
2787:         else:
2788:             raise ValueError('invalid bool')
2789: 
2790:     dateparser = dateutil.parser.parse
2791: 
2792:     def mydateparser(x):
2793:         # try and return a datetime object
2794:         d = dateparser(x, dayfirst=dayfirst, yearfirst=yearfirst)
2795:         return d
2796: 
2797:     mydateparser = with_default_value(mydateparser, datetime.datetime(1, 1, 1))
2798: 
2799:     myfloat = with_default_value(float, np.nan)
2800:     myint = with_default_value(int, -1)
2801:     mystr = with_default_value(str, '')
2802:     mybool = with_default_value(mybool, None)
2803: 
2804:     def mydate(x):
2805:         # try and return a date object
2806:         d = dateparser(x, dayfirst=dayfirst, yearfirst=yearfirst)
2807: 
2808:         if d.hour > 0 or d.minute > 0 or d.second > 0:
2809:             raise ValueError('not a date')
2810:         return d.date()
2811:     mydate = with_default_value(mydate, datetime.date(1, 1, 1))
2812: 
2813:     def get_func(name, item, func):
2814:         # promote functions in this order
2815:         funcs = [mybool, myint, myfloat, mydate, mydateparser, mystr]
2816:         for func in funcs[funcs.index(func):]:
2817:             try:
2818:                 func(name, item)
2819:             except Exception:
2820:                 continue
2821:             return func
2822:         raise ValueError('Could not find a working conversion function')
2823: 
2824:     # map column names that clash with builtins -- TODO - extend this list
2825:     itemd = {
2826:         'return': 'return_',
2827:         'file':   'file_',
2828:         'print':  'print_',
2829:         }
2830: 
2831:     def get_converters(reader, comments):
2832: 
2833:         converters = None
2834:         i = 0
2835:         for row in reader:
2836:             if (len(row) and comments is not None and
2837:                     row[0].startswith(comments)):
2838:                 continue
2839:             if i == 0:
2840:                 converters = [mybool]*len(row)
2841:             if checkrows and i > checkrows:
2842:                 break
2843:             i += 1
2844: 
2845:             for j, (name, item) in enumerate(zip(names, row)):
2846:                 func = converterd.get(j)
2847:                 if func is None:
2848:                     func = converterd.get(name)
2849:                 if func is None:
2850:                     func = converters[j]
2851:                     if len(item.strip()):
2852:                         func = get_func(name, item, func)
2853:                 else:
2854:                     # how should we handle custom converters and defaults?
2855:                     func = with_default_value(func, None)
2856:                 converters[j] = func
2857:         return converters
2858: 
2859:     # Get header and remove invalid characters
2860:     needheader = names is None
2861: 
2862:     if needheader:
2863:         for row in reader:
2864:             if (len(row) and comments is not None and
2865:                     row[0].startswith(comments)):
2866:                 continue
2867:             headers = row
2868:             break
2869: 
2870:         # remove these chars
2871:         delete = set(r'''~!@#$%^&*()-=+~\|]}[{';: /?.>,<''')
2872:         delete.add('"')
2873: 
2874:         names = []
2875:         seen = dict()
2876:         for i, item in enumerate(headers):
2877:             item = item.strip().lower().replace(' ', '_')
2878:             item = ''.join([c for c in item if c not in delete])
2879:             if not len(item):
2880:                 item = 'column%d' % i
2881: 
2882:             item = itemd.get(item, item)
2883:             cnt = seen.get(item, 0)
2884:             if cnt > 0:
2885:                 names.append(item + '_%d' % cnt)
2886:             else:
2887:                 names.append(item)
2888:             seen[item] = cnt+1
2889: 
2890:     else:
2891:         if isinstance(names, six.string_types):
2892:             names = [n.strip() for n in names.split(',')]
2893: 
2894:     # get the converter functions by inspecting checkrows
2895:     converters = get_converters(reader, comments)
2896:     if converters is None:
2897:         raise ValueError('Could not find any valid data in CSV file')
2898: 
2899:     # reset the reader and start over
2900:     fh.seek(0)
2901:     reader = csv.reader(fh, delimiter=delimiter)
2902:     process_skiprows(reader)
2903: 
2904:     if needheader:
2905:         while True:
2906:             # skip past any comments and consume one line of column header
2907:             row = next(reader)
2908:             if (len(row) and comments is not None and
2909:                     row[0].startswith(comments)):
2910:                 continue
2911:             break
2912: 
2913:     # iterate over the remaining rows and convert the data to date
2914:     # objects, ints, or floats as approriate
2915:     rows = []
2916:     rowmasks = []
2917:     for i, row in enumerate(reader):
2918:         if not len(row):
2919:             continue
2920:         if comments is not None and row[0].startswith(comments):
2921:             continue
2922:         # Ensure that the row returned always has the same nr of elements
2923:         row.extend([''] * (len(converters) - len(row)))
2924:         rows.append([func(name, val)
2925:                      for func, name, val in zip(converters, names, row)])
2926:         rowmasks.append([ismissing(name, val)
2927:                          for name, val in zip(names, row)])
2928:     fh.close()
2929: 
2930:     if not len(rows):
2931:         return None
2932: 
2933:     if use_mrecords and np.any(rowmasks):
2934:         r = np.ma.mrecords.fromrecords(rows, names=names, mask=rowmasks)
2935:     else:
2936:         r = np.rec.fromrecords(rows, names=names)
2937:     return r
2938: 
2939: 
2940: # a series of classes for describing the format intentions of various rec views
2941: class FormatObj(object):
2942:     def tostr(self, x):
2943:         return self.toval(x)
2944: 
2945:     def toval(self, x):
2946:         return str(x)
2947: 
2948:     def fromstr(self, s):
2949:         return s
2950: 
2951:     def __hash__(self):
2952:         '''
2953:         override the hash function of any of the formatters, so that we don't
2954:         create duplicate excel format styles
2955:         '''
2956:         return hash(self.__class__)
2957: 
2958: 
2959: class FormatString(FormatObj):
2960:     def tostr(self, x):
2961:         val = repr(x)
2962:         return val[1:-1]
2963: 
2964: 
2965: class FormatFormatStr(FormatObj):
2966:     def __init__(self, fmt):
2967:         self.fmt = fmt
2968: 
2969:     def tostr(self, x):
2970:         if x is None:
2971:             return 'None'
2972:         return self.fmt % self.toval(x)
2973: 
2974: 
2975: class FormatFloat(FormatFormatStr):
2976:     def __init__(self, precision=4, scale=1.):
2977:         FormatFormatStr.__init__(self, '%%1.%df' % precision)
2978:         self.precision = precision
2979:         self.scale = scale
2980: 
2981:     def __hash__(self):
2982:         return hash((self.__class__, self.precision, self.scale))
2983: 
2984:     def toval(self, x):
2985:         if x is not None:
2986:             x = x * self.scale
2987:         return x
2988: 
2989:     def fromstr(self, s):
2990:         return float(s)/self.scale
2991: 
2992: 
2993: class FormatInt(FormatObj):
2994: 
2995:     def tostr(self, x):
2996:         return '%d' % int(x)
2997: 
2998:     def toval(self, x):
2999:         return int(x)
3000: 
3001:     def fromstr(self, s):
3002:         return int(s)
3003: 
3004: 
3005: class FormatBool(FormatObj):
3006:     def toval(self, x):
3007:         return str(x)
3008: 
3009:     def fromstr(self, s):
3010:         return bool(s)
3011: 
3012: 
3013: class FormatPercent(FormatFloat):
3014:     def __init__(self, precision=4):
3015:         FormatFloat.__init__(self, precision, scale=100.)
3016: 
3017: 
3018: class FormatThousands(FormatFloat):
3019:     def __init__(self, precision=4):
3020:         FormatFloat.__init__(self, precision, scale=1e-3)
3021: 
3022: 
3023: class FormatMillions(FormatFloat):
3024:     def __init__(self, precision=4):
3025:         FormatFloat.__init__(self, precision, scale=1e-6)
3026: 
3027: 
3028: class FormatDate(FormatObj):
3029:     def __init__(self, fmt):
3030:         self.fmt = fmt
3031: 
3032:     def __hash__(self):
3033:         return hash((self.__class__, self.fmt))
3034: 
3035:     def toval(self, x):
3036:         if x is None:
3037:             return 'None'
3038:         return x.strftime(self.fmt)
3039: 
3040:     def fromstr(self, x):
3041:         import dateutil.parser
3042:         return dateutil.parser.parse(x).date()
3043: 
3044: 
3045: class FormatDatetime(FormatDate):
3046:     def __init__(self, fmt='%Y-%m-%d %H:%M:%S'):
3047:         FormatDate.__init__(self, fmt)
3048: 
3049:     def fromstr(self, x):
3050:         import dateutil.parser
3051:         return dateutil.parser.parse(x)
3052: 
3053: 
3054: defaultformatd = {
3055:     np.bool_:   FormatBool(),
3056:     np.int16:   FormatInt(),
3057:     np.int32:   FormatInt(),
3058:     np.int64:   FormatInt(),
3059:     np.float32: FormatFloat(),
3060:     np.float64: FormatFloat(),
3061:     np.object_: FormatObj(),
3062:     np.string_: FormatString(),
3063:     }
3064: 
3065: 
3066: def get_formatd(r, formatd=None):
3067:     'build a formatd guaranteed to have a key for every dtype name'
3068:     if formatd is None:
3069:         formatd = dict()
3070: 
3071:     for i, name in enumerate(r.dtype.names):
3072:         dt = r.dtype[name]
3073:         format = formatd.get(name)
3074:         if format is None:
3075:             format = defaultformatd.get(dt.type, FormatObj())
3076:         formatd[name] = format
3077:     return formatd
3078: 
3079: 
3080: def csvformat_factory(format):
3081:     format = copy.deepcopy(format)
3082:     if isinstance(format, FormatFloat):
3083:         format.scale = 1.  # override scaling for storage
3084:         format.fmt = '%r'
3085:     return format
3086: 
3087: 
3088: def rec2txt(r, header=None, padding=3, precision=3, fields=None):
3089:     '''
3090:     Returns a textual representation of a record array.
3091: 
3092:     Parameters
3093:     ----------
3094:     r: numpy recarray
3095: 
3096:     header: list
3097:         column headers
3098: 
3099:     padding:
3100:         space between each column
3101: 
3102:     precision: number of decimal places to use for floats.
3103:         Set to an integer to apply to all floats.  Set to a
3104:         list of integers to apply precision individually.
3105:         Precision for non-floats is simply ignored.
3106: 
3107:     fields : list
3108:         If not None, a list of field names to print.  fields
3109:         can be a list of strings like ['field1', 'field2'] or a single
3110:         comma separated string like 'field1,field2'
3111: 
3112:     Examples
3113:     --------
3114: 
3115:     For ``precision=[0,2,3]``, the output is ::
3116: 
3117:       ID    Price   Return
3118:       ABC   12.54    0.234
3119:       XYZ    6.32   -0.076
3120:     '''
3121: 
3122:     if fields is not None:
3123:         r = rec_keep_fields(r, fields)
3124: 
3125:     if cbook.is_numlike(precision):
3126:         precision = [precision]*len(r.dtype)
3127: 
3128:     def get_type(item, atype=int):
3129:         tdict = {None: int, int: float, float: str}
3130:         try:
3131:             atype(str(item))
3132:         except:
3133:             return get_type(item, tdict[atype])
3134:         return atype
3135: 
3136:     def get_justify(colname, column, precision):
3137:         ntype = column.dtype
3138: 
3139:         if np.issubdtype(ntype, np.character):
3140:             fixed_width = int(ntype.str[2:])
3141:             length = max(len(colname), fixed_width)
3142:             return 0, length+padding, "%s"  # left justify
3143: 
3144:         if np.issubdtype(ntype, np.integer):
3145:             length = max(len(colname),
3146:                          np.max(list(map(len, list(map(str, column))))))
3147:             return 1, length+padding, "%d"  # right justify
3148: 
3149:         if np.issubdtype(ntype, np.floating):
3150:             fmt = "%." + str(precision) + "f"
3151:             length = max(
3152:                 len(colname),
3153:                 np.max(list(map(len, list(map(lambda x: fmt % x, column)))))
3154:             )
3155:             return 1, length+padding, fmt   # right justify
3156: 
3157:         return (0,
3158:                 max(len(colname),
3159:                     np.max(list(map(len, list(map(str, column))))))+padding,
3160:                 "%s")
3161: 
3162:     if header is None:
3163:         header = r.dtype.names
3164: 
3165:     justify_pad_prec = [get_justify(header[i], r.__getitem__(colname),
3166:                                     precision[i])
3167:                         for i, colname in enumerate(r.dtype.names)]
3168: 
3169:     justify_pad_prec_spacer = []
3170:     for i in range(len(justify_pad_prec)):
3171:         just, pad, prec = justify_pad_prec[i]
3172:         if i == 0:
3173:             justify_pad_prec_spacer.append((just, pad, prec, 0))
3174:         else:
3175:             pjust, ppad, pprec = justify_pad_prec[i-1]
3176:             if pjust == 0 and just == 1:
3177:                 justify_pad_prec_spacer.append((just, pad-padding, prec, 0))
3178:             elif pjust == 1 and just == 0:
3179:                 justify_pad_prec_spacer.append((just, pad, prec, padding))
3180:             else:
3181:                 justify_pad_prec_spacer.append((just, pad, prec, 0))
3182: 
3183:     def format(item, just_pad_prec_spacer):
3184:         just, pad, prec, spacer = just_pad_prec_spacer
3185:         if just == 0:
3186:             return spacer*' ' + str(item).ljust(pad)
3187:         else:
3188:             if get_type(item) == float:
3189:                 item = (prec % float(item))
3190:             elif get_type(item) == int:
3191:                 item = (prec % int(item))
3192: 
3193:             return item.rjust(pad)
3194: 
3195:     textl = []
3196:     textl.append(''.join([format(colitem, justify_pad_prec_spacer[j])
3197:                           for j, colitem in enumerate(header)]))
3198:     for i, row in enumerate(r):
3199:         textl.append(''.join([format(colitem, justify_pad_prec_spacer[j])
3200:                               for j, colitem in enumerate(row)]))
3201:         if i == 0:
3202:             textl[0] = textl[0].rstrip()
3203: 
3204:     text = os.linesep.join(textl)
3205:     return text
3206: 
3207: 
3208: def rec2csv(r, fname, delimiter=',', formatd=None, missing='',
3209:             missingd=None, withheader=True):
3210:     '''
3211:     Save the data from numpy recarray *r* into a
3212:     comma-/space-/tab-delimited file.  The record array dtype names
3213:     will be used for column headers.
3214: 
3215:     *fname*: can be a filename or a file handle.  Support for gzipped
3216:       files is automatic, if the filename ends in '.gz'
3217: 
3218:     *withheader*: if withheader is False, do not write the attribute
3219:       names in the first row
3220: 
3221:     for formatd type FormatFloat, we override the precision to store
3222:     full precision floats in the CSV file
3223: 
3224:     See Also
3225:     --------
3226:     :func:`csv2rec`
3227:         For information about *missing* and *missingd*, which can be used to
3228:         fill in masked values into your CSV file.
3229:     '''
3230: 
3231:     delimiter = str(delimiter)
3232: 
3233:     if missingd is None:
3234:         missingd = dict()
3235: 
3236:     def with_mask(func):
3237:         def newfunc(val, mask, mval):
3238:             if mask:
3239:                 return mval
3240:             else:
3241:                 return func(val)
3242:         return newfunc
3243: 
3244:     if r.ndim != 1:
3245:         raise ValueError('rec2csv only operates on 1 dimensional recarrays')
3246: 
3247:     formatd = get_formatd(r, formatd)
3248:     funcs = []
3249:     for i, name in enumerate(r.dtype.names):
3250:         funcs.append(with_mask(csvformat_factory(formatd[name]).tostr))
3251: 
3252:     fh, opened = cbook.to_filehandle(fname, 'wb', return_opened=True)
3253:     writer = csv.writer(fh, delimiter=delimiter)
3254:     header = r.dtype.names
3255:     if withheader:
3256:         writer.writerow(header)
3257: 
3258:     # Our list of specials for missing values
3259:     mvals = []
3260:     for name in header:
3261:         mvals.append(missingd.get(name, missing))
3262: 
3263:     ismasked = False
3264:     if len(r):
3265:         row = r[0]
3266:         ismasked = hasattr(row, '_fieldmask')
3267: 
3268:     for row in r:
3269:         if ismasked:
3270:             row, rowmask = row.item(), row._fieldmask.item()
3271:         else:
3272:             rowmask = [False] * len(row)
3273:         writer.writerow([func(val, mask, mval) for func, val, mask, mval
3274:                          in zip(funcs, row, rowmask, mvals)])
3275:     if opened:
3276:         fh.close()
3277: 
3278: 
3279: def griddata(x, y, z, xi, yi, interp='nn'):
3280:     '''Interpolates from a nonuniformly spaced grid to some other
3281:     grid.
3282: 
3283:     Fits a surface of the form z = f(`x`, `y`) to the data in the
3284:     (usually) nonuniformly spaced vectors (`x`, `y`, `z`), then
3285:     interpolates this surface at the points specified by
3286:     (`xi`, `yi`) to produce `zi`.
3287: 
3288:     Parameters
3289:     ----------
3290:     x, y, z : 1d array_like
3291:         Coordinates of grid points to interpolate from.
3292:     xi, yi : 1d or 2d array_like
3293:         Coordinates of grid points to interpolate to.
3294:     interp : string key from {'nn', 'linear'}
3295:         Interpolation algorithm, either 'nn' for natural neighbor, or
3296:         'linear' for linear interpolation.
3297: 
3298:     Returns
3299:     -------
3300:     2d float array
3301:         Array of values interpolated at (`xi`, `yi`) points.  Array
3302:         will be masked is any of (`xi`, `yi`) are outside the convex
3303:         hull of (`x`, `y`).
3304: 
3305:     Notes
3306:     -----
3307:     If `interp` is 'nn' (the default), uses natural neighbor
3308:     interpolation based on Delaunay triangulation.  This option is
3309:     only available if the mpl_toolkits.natgrid module is installed.
3310:     This can be downloaded from https://github.com/matplotlib/natgrid.
3311:     The (`xi`, `yi`) grid must be regular and monotonically increasing
3312:     in this case.
3313: 
3314:     If `interp` is 'linear', linear interpolation is used via
3315:     matplotlib.tri.LinearTriInterpolator.
3316: 
3317:     Instead of using `griddata`, more flexible functionality and other
3318:     interpolation options are available using a
3319:     matplotlib.tri.Triangulation and a matplotlib.tri.TriInterpolator.
3320:     '''
3321:     # Check input arguments.
3322:     x = np.asanyarray(x, dtype=np.float64)
3323:     y = np.asanyarray(y, dtype=np.float64)
3324:     z = np.asanyarray(z, dtype=np.float64)
3325:     if x.shape != y.shape or x.shape != z.shape or x.ndim != 1:
3326:         raise ValueError("x, y and z must be equal-length 1-D arrays")
3327: 
3328:     xi = np.asanyarray(xi, dtype=np.float64)
3329:     yi = np.asanyarray(yi, dtype=np.float64)
3330:     if xi.ndim != yi.ndim:
3331:         raise ValueError("xi and yi must be arrays with the same number of "
3332:                          "dimensions (1 or 2)")
3333:     if xi.ndim == 2 and xi.shape != yi.shape:
3334:         raise ValueError("if xi and yi are 2D arrays, they must have the same "
3335:                          "shape")
3336:     if xi.ndim == 1:
3337:         xi, yi = np.meshgrid(xi, yi)
3338: 
3339:     if interp == 'nn':
3340:         use_nn_interpolation = True
3341:     elif interp == 'linear':
3342:         use_nn_interpolation = False
3343:     else:
3344:         raise ValueError("interp keyword must be one of 'linear' (for linear "
3345:                          "interpolation) or 'nn' (for natural neighbor "
3346:                          "interpolation).  Default is 'nn'.")
3347: 
3348:     # Remove masked points.
3349:     mask = np.ma.getmask(z)
3350:     if mask is not np.ma.nomask:
3351:         x = x.compress(~mask)
3352:         y = y.compress(~mask)
3353:         z = z.compressed()
3354: 
3355:     if use_nn_interpolation:
3356:         try:
3357:             from mpl_toolkits.natgrid import _natgrid
3358:         except ImportError:
3359:             raise RuntimeError(
3360:                 "To use interp='nn' (Natural Neighbor interpolation) in "
3361:                 "griddata, natgrid must be installed. Either install it "
3362:                 "from http://github.com/matplotlib/natgrid or use "
3363:                 "interp='linear' instead.")
3364: 
3365:         if xi.ndim == 2:
3366:             # natgrid expects 1D xi and yi arrays.
3367:             xi = xi[0, :]
3368:             yi = yi[:, 0]
3369: 
3370:         # Override default natgrid internal parameters.
3371:         _natgrid.seti(b'ext', 0)
3372:         _natgrid.setr(b'nul', np.nan)
3373: 
3374:         if np.min(np.diff(xi)) < 0 or np.min(np.diff(yi)) < 0:
3375:             raise ValueError("Output grid defined by xi,yi must be monotone "
3376:                              "increasing")
3377: 
3378:         # Allocate array for output (buffer will be overwritten by natgridd)
3379:         zi = np.empty((yi.shape[0], xi.shape[0]), np.float64)
3380: 
3381:         # Natgrid requires each array to be contiguous rather than e.g. a view
3382:         # that is a non-contiguous slice of another array.  Use numpy.require
3383:         # to deal with this, which will copy if necessary.
3384:         x = np.require(x, requirements=['C'])
3385:         y = np.require(y, requirements=['C'])
3386:         z = np.require(z, requirements=['C'])
3387:         xi = np.require(xi, requirements=['C'])
3388:         yi = np.require(yi, requirements=['C'])
3389:         _natgrid.natgridd(x, y, z, xi, yi, zi)
3390: 
3391:         # Mask points on grid outside convex hull of input data.
3392:         if np.any(np.isnan(zi)):
3393:             zi = np.ma.masked_where(np.isnan(zi), zi)
3394:         return zi
3395:     else:
3396:         # Linear interpolation performed using a matplotlib.tri.Triangulation
3397:         # and a matplotlib.tri.LinearTriInterpolator.
3398:         from .tri import Triangulation, LinearTriInterpolator
3399:         triang = Triangulation(x, y)
3400:         interpolator = LinearTriInterpolator(triang, z)
3401:         return interpolator(xi, yi)
3402: 
3403: 
3404: ##################################################
3405: # Linear interpolation algorithms
3406: ##################################################
3407: def less_simple_linear_interpolation(x, y, xi, extrap=False):
3408:     '''
3409:     This function provides simple (but somewhat less so than
3410:     :func:`cbook.simple_linear_interpolation`) linear interpolation.
3411:     :func:`simple_linear_interpolation` will give a list of point
3412:     between a start and an end, while this does true linear
3413:     interpolation at an arbitrary set of points.
3414: 
3415:     This is very inefficient linear interpolation meant to be used
3416:     only for a small number of points in relatively non-intensive use
3417:     cases.  For real linear interpolation, use scipy.
3418:     '''
3419:     x = np.asarray(x)
3420:     y = np.asarray(y)
3421:     xi = np.atleast_1d(xi)
3422: 
3423:     s = list(y.shape)
3424:     s[0] = len(xi)
3425:     yi = np.tile(np.nan, s)
3426: 
3427:     for ii, xx in enumerate(xi):
3428:         bb = x == xx
3429:         if np.any(bb):
3430:             jj, = np.nonzero(bb)
3431:             yi[ii] = y[jj[0]]
3432:         elif xx < x[0]:
3433:             if extrap:
3434:                 yi[ii] = y[0]
3435:         elif xx > x[-1]:
3436:             if extrap:
3437:                 yi[ii] = y[-1]
3438:         else:
3439:             jj, = np.nonzero(x < xx)
3440:             jj = max(jj)
3441: 
3442:             yi[ii] = y[jj] + (xx-x[jj])/(x[jj+1]-x[jj]) * (y[jj+1]-y[jj])
3443: 
3444:     return yi
3445: 
3446: 
3447: def slopes(x, y):
3448:     '''
3449:     :func:`slopes` calculates the slope *y*'(*x*)
3450: 
3451:     The slope is estimated using the slope obtained from that of a
3452:     parabola through any three consecutive points.
3453: 
3454:     This method should be superior to that described in the appendix
3455:     of A CONSISTENTLY WELL BEHAVED METHOD OF INTERPOLATION by Russel
3456:     W. Stineman (Creative Computing July 1980) in at least one aspect:
3457: 
3458:       Circles for interpolation demand a known aspect ratio between
3459:       *x*- and *y*-values.  For many functions, however, the abscissa
3460:       are given in different dimensions, so an aspect ratio is
3461:       completely arbitrary.
3462: 
3463:     The parabola method gives very similar results to the circle
3464:     method for most regular cases but behaves much better in special
3465:     cases.
3466: 
3467:     Norbert Nemec, Institute of Theoretical Physics, University or
3468:     Regensburg, April 2006 Norbert.Nemec at physik.uni-regensburg.de
3469: 
3470:     (inspired by a original implementation by Halldor Bjornsson,
3471:     Icelandic Meteorological Office, March 2006 halldor at vedur.is)
3472:     '''
3473:     # Cast key variables as float.
3474:     x = np.asarray(x, float)
3475:     y = np.asarray(y, float)
3476: 
3477:     yp = np.zeros(y.shape, float)
3478: 
3479:     dx = x[1:] - x[:-1]
3480:     dy = y[1:] - y[:-1]
3481:     dydx = dy/dx
3482:     yp[1:-1] = (dydx[:-1] * dx[1:] + dydx[1:] * dx[:-1])/(dx[1:] + dx[:-1])
3483:     yp[0] = 2.0 * dy[0]/dx[0] - yp[1]
3484:     yp[-1] = 2.0 * dy[-1]/dx[-1] - yp[-2]
3485:     return yp
3486: 
3487: 
3488: def stineman_interp(xi, x, y, yp=None):
3489:     '''
3490:     Given data vectors *x* and *y*, the slope vector *yp* and a new
3491:     abscissa vector *xi*, the function :func:`stineman_interp` uses
3492:     Stineman interpolation to calculate a vector *yi* corresponding to
3493:     *xi*.
3494: 
3495:     Here's an example that generates a coarse sine curve, then
3496:     interpolates over a finer abscissa::
3497: 
3498:       x = linspace(0,2*pi,20);  y = sin(x); yp = cos(x)
3499:       xi = linspace(0,2*pi,40);
3500:       yi = stineman_interp(xi,x,y,yp);
3501:       plot(x,y,'o',xi,yi)
3502: 
3503:     The interpolation method is described in the article A
3504:     CONSISTENTLY WELL BEHAVED METHOD OF INTERPOLATION by Russell
3505:     W. Stineman. The article appeared in the July 1980 issue of
3506:     Creative Computing with a note from the editor stating that while
3507:     they were:
3508: 
3509:       not an academic journal but once in a while something serious
3510:       and original comes in adding that this was
3511:       "apparently a real solution" to a well known problem.
3512: 
3513:     For *yp* = *None*, the routine automatically determines the slopes
3514:     using the :func:`slopes` routine.
3515: 
3516:     *x* is assumed to be sorted in increasing order.
3517: 
3518:     For values ``xi[j] < x[0]`` or ``xi[j] > x[-1]``, the routine
3519:     tries an extrapolation.  The relevance of the data obtained from
3520:     this, of course, is questionable...
3521: 
3522:     Original implementation by Halldor Bjornsson, Icelandic
3523:     Meteorolocial Office, March 2006 halldor at vedur.is
3524: 
3525:     Completely reworked and optimized for Python by Norbert Nemec,
3526:     Institute of Theoretical Physics, University or Regensburg, April
3527:     2006 Norbert.Nemec at physik.uni-regensburg.de
3528:     '''
3529: 
3530:     # Cast key variables as float.
3531:     x = np.asarray(x, float)
3532:     y = np.asarray(y, float)
3533:     if x.shape != y.shape:
3534:         raise ValueError("'x' and 'y' must be of same shape")
3535: 
3536:     if yp is None:
3537:         yp = slopes(x, y)
3538:     else:
3539:         yp = np.asarray(yp, float)
3540: 
3541:     xi = np.asarray(xi, float)
3542:     yi = np.zeros(xi.shape, float)
3543: 
3544:     # calculate linear slopes
3545:     dx = x[1:] - x[:-1]
3546:     dy = y[1:] - y[:-1]
3547:     s = dy/dx  # note length of s is N-1 so last element is #N-2
3548: 
3549:     # find the segment each xi is in
3550:     # this line actually is the key to the efficiency of this implementation
3551:     idx = np.searchsorted(x[1:-1], xi)
3552: 
3553:     # now we have generally: x[idx[j]] <= xi[j] <= x[idx[j]+1]
3554:     # except at the boundaries, where it may be that xi[j] < x[0] or
3555:     # xi[j] > x[-1]
3556: 
3557:     # the y-values that would come out from a linear interpolation:
3558:     sidx = s.take(idx)
3559:     xidx = x.take(idx)
3560:     yidx = y.take(idx)
3561:     xidxp1 = x.take(idx+1)
3562:     yo = yidx + sidx * (xi - xidx)
3563: 
3564:     # the difference that comes when using the slopes given in yp
3565:     # using the yp slope of the left point
3566:     dy1 = (yp.take(idx) - sidx) * (xi - xidx)
3567:     # using the yp slope of the right point
3568:     dy2 = (yp.take(idx+1)-sidx) * (xi - xidxp1)
3569: 
3570:     dy1dy2 = dy1*dy2
3571:     # The following is optimized for Python. The solution actually
3572:     # does more calculations than necessary but exploiting the power
3573:     # of numpy, this is far more efficient than coding a loop by hand
3574:     # in Python
3575:     yi = yo + dy1dy2 * np.choose(np.array(np.sign(dy1dy2), np.int32)+1,
3576:                                  ((2*xi-xidx-xidxp1)/((dy1-dy2)*(xidxp1-xidx)),
3577:                                   0.0,
3578:                                   1/(dy1+dy2),))
3579:     return yi
3580: 
3581: 
3582: class GaussianKDE(object):
3583:     '''
3584:     Representation of a kernel-density estimate using Gaussian kernels.
3585: 
3586:     Parameters
3587:     ----------
3588:     dataset : array_like
3589:         Datapoints to estimate from. In case of univariate data this is a 1-D
3590:         array, otherwise a 2-D array with shape (# of dims, # of data).
3591: 
3592:     bw_method : str, scalar or callable, optional
3593:         The method used to calculate the estimator bandwidth.  This can be
3594:         'scott', 'silverman', a scalar constant or a callable.  If a
3595:         scalar, this will be used directly as `kde.factor`.  If a
3596:         callable, it should take a `GaussianKDE` instance as only
3597:         parameter and return a scalar. If None (default), 'scott' is used.
3598: 
3599:     Attributes
3600:     ----------
3601:     dataset : ndarray
3602:         The dataset with which `gaussian_kde` was initialized.
3603: 
3604:     dim : int
3605:         Number of dimensions.
3606: 
3607:     num_dp : int
3608:         Number of datapoints.
3609: 
3610:     factor : float
3611:         The bandwidth factor, obtained from `kde.covariance_factor`, with which
3612:         the covariance matrix is multiplied.
3613: 
3614:     covariance : ndarray
3615:         The covariance matrix of `dataset`, scaled by the calculated bandwidth
3616:         (`kde.factor`).
3617: 
3618:     inv_cov : ndarray
3619:         The inverse of `covariance`.
3620: 
3621:     Methods
3622:     -------
3623:     kde.evaluate(points) : ndarray
3624:         Evaluate the estimated pdf on a provided set of points.
3625: 
3626:     kde(points) : ndarray
3627:         Same as kde.evaluate(points)
3628: 
3629:     '''
3630: 
3631:     # This implementation with minor modification was too good to pass up.
3632:     # from scipy: https://github.com/scipy/scipy/blob/master/scipy/stats/kde.py
3633: 
3634:     def __init__(self, dataset, bw_method=None):
3635:         self.dataset = np.atleast_2d(dataset)
3636:         if not np.array(self.dataset).size > 1:
3637:             raise ValueError("`dataset` input should have multiple elements.")
3638: 
3639:         self.dim, self.num_dp = np.array(self.dataset).shape
3640:         isString = isinstance(bw_method, six.string_types)
3641: 
3642:         if bw_method is None:
3643:             pass
3644:         elif (isString and bw_method == 'scott'):
3645:             self.covariance_factor = self.scotts_factor
3646:         elif (isString and bw_method == 'silverman'):
3647:             self.covariance_factor = self.silverman_factor
3648:         elif (np.isscalar(bw_method) and not isString):
3649:                 self._bw_method = 'use constant'
3650:                 self.covariance_factor = lambda: bw_method
3651:         elif callable(bw_method):
3652:             self._bw_method = bw_method
3653:             self.covariance_factor = lambda: self._bw_method(self)
3654:         else:
3655:             msg = "`bw_method` should be 'scott', 'silverman', a scalar " \
3656:                   "or a callable."
3657:             raise ValueError(msg)
3658: 
3659:         # Computes the covariance matrix for each Gaussian kernel using
3660:         # covariance_factor().
3661: 
3662:         self.factor = self.covariance_factor()
3663:         # Cache covariance and inverse covariance of the data
3664:         if not hasattr(self, '_data_inv_cov'):
3665:             self.data_covariance = np.atleast_2d(
3666:                 np.cov(
3667:                     self.dataset,
3668:                     rowvar=1,
3669:                     bias=False))
3670:             self.data_inv_cov = np.linalg.inv(self.data_covariance)
3671: 
3672:         self.covariance = self.data_covariance * self.factor ** 2
3673:         self.inv_cov = self.data_inv_cov / self.factor ** 2
3674:         self.norm_factor = np.sqrt(
3675:             np.linalg.det(
3676:                 2 * np.pi * self.covariance)) * self.num_dp
3677: 
3678:     def scotts_factor(self):
3679:         return np.power(self.num_dp, -1. / (self.dim + 4))
3680: 
3681:     def silverman_factor(self):
3682:         return np.power(
3683:             self.num_dp * (self.dim + 2.0) / 4.0, -1. / (self.dim + 4))
3684: 
3685:     #  Default method to calculate bandwidth, can be overwritten by subclass
3686:     covariance_factor = scotts_factor
3687: 
3688:     def evaluate(self, points):
3689:         '''Evaluate the estimated pdf on a set of points.
3690: 
3691:         Parameters
3692:         ----------
3693:         points : (# of dimensions, # of points)-array
3694:             Alternatively, a (# of dimensions,) vector can be passed in and
3695:             treated as a single point.
3696: 
3697:         Returns
3698:         -------
3699:         values : (# of points,)-array
3700:             The values at each point.
3701: 
3702:         Raises
3703:         ------
3704:         ValueError : if the dimensionality of the input points is different
3705:                      than the dimensionality of the KDE.
3706: 
3707:         '''
3708:         points = np.atleast_2d(points)
3709: 
3710:         dim, num_m = np.array(points).shape
3711:         if dim != self.dim:
3712:             msg = "points have dimension %s, dataset has dimension %s" % (
3713:                 dim, self.dim)
3714:             raise ValueError(msg)
3715: 
3716:         result = np.zeros((num_m,), dtype=float)
3717: 
3718:         if num_m >= self.num_dp:
3719:             # there are more points than data, so loop over data
3720:             for i in range(self.num_dp):
3721:                 diff = self.dataset[:, i, np.newaxis] - points
3722:                 tdiff = np.dot(self.inv_cov, diff)
3723:                 energy = np.sum(diff * tdiff, axis=0) / 2.0
3724:                 result = result + np.exp(-energy)
3725:         else:
3726:             # loop over points
3727:             for i in range(num_m):
3728:                 diff = self.dataset - points[:, i, np.newaxis]
3729:                 tdiff = np.dot(self.inv_cov, diff)
3730:                 energy = np.sum(diff * tdiff, axis=0) / 2.0
3731:                 result[i] = np.sum(np.exp(-energy), axis=0)
3732: 
3733:         result = result / self.norm_factor
3734: 
3735:         return result
3736: 
3737:     __call__ = evaluate
3738: 
3739: 
3740: ##################################################
3741: # Code related to things in and around polygons
3742: ##################################################
3743: def inside_poly(points, verts):
3744:     '''
3745:     *points* is a sequence of *x*, *y* points.
3746:     *verts* is a sequence of *x*, *y* vertices of a polygon.
3747: 
3748:     Return value is a sequence of indices into points for the points
3749:     that are inside the polygon.
3750:     '''
3751:     # Make a closed polygon path
3752:     poly = Path(verts)
3753: 
3754:     # Check to see which points are contained within the Path
3755:     return [idx for idx, p in enumerate(points) if poly.contains_point(p)]
3756: 
3757: 
3758: def poly_below(xmin, xs, ys):
3759:     '''
3760:     Given a sequence of *xs* and *ys*, return the vertices of a
3761:     polygon that has a horizontal base at *xmin* and an upper bound at
3762:     the *ys*.  *xmin* is a scalar.
3763: 
3764:     Intended for use with :meth:`matplotlib.axes.Axes.fill`, e.g.,::
3765: 
3766:       xv, yv = poly_below(0, x, y)
3767:       ax.fill(xv, yv)
3768:     '''
3769:     if any(isinstance(var, np.ma.MaskedArray) for var in [xs, ys]):
3770:         numpy = np.ma
3771:     else:
3772:         numpy = np
3773: 
3774:     xs = numpy.asarray(xs)
3775:     ys = numpy.asarray(ys)
3776:     Nx = len(xs)
3777:     Ny = len(ys)
3778:     if Nx != Ny:
3779:         raise ValueError("'xs' and 'ys' must have the same length")
3780:     x = xmin*numpy.ones(2*Nx)
3781:     y = numpy.ones(2*Nx)
3782:     x[:Nx] = xs
3783:     y[:Nx] = ys
3784:     y[Nx:] = ys[::-1]
3785:     return x, y
3786: 
3787: 
3788: def poly_between(x, ylower, yupper):
3789:     '''
3790:     Given a sequence of *x*, *ylower* and *yupper*, return the polygon
3791:     that fills the regions between them.  *ylower* or *yupper* can be
3792:     scalar or iterable.  If they are iterable, they must be equal in
3793:     length to *x*.
3794: 
3795:     Return value is *x*, *y* arrays for use with
3796:     :meth:`matplotlib.axes.Axes.fill`.
3797:     '''
3798:     if any(isinstance(var, np.ma.MaskedArray) for var in [ylower, yupper, x]):
3799:         numpy = np.ma
3800:     else:
3801:         numpy = np
3802: 
3803:     Nx = len(x)
3804:     if not cbook.iterable(ylower):
3805:         ylower = ylower*numpy.ones(Nx)
3806: 
3807:     if not cbook.iterable(yupper):
3808:         yupper = yupper*numpy.ones(Nx)
3809: 
3810:     x = numpy.concatenate((x, x[::-1]))
3811:     y = numpy.concatenate((yupper, ylower[::-1]))
3812:     return x, y
3813: 
3814: 
3815: def is_closed_polygon(X):
3816:     '''
3817:     Tests whether first and last object in a sequence are the same.  These are
3818:     presumably coordinates on a polygonal curve, in which case this function
3819:     tests if that curve is closed.
3820:     '''
3821:     return np.all(X[0] == X[-1])
3822: 
3823: 
3824: def contiguous_regions(mask):
3825:     '''
3826:     return a list of (ind0, ind1) such that mask[ind0:ind1].all() is
3827:     True and we cover all such regions
3828:     '''
3829:     mask = np.asarray(mask, dtype=bool)
3830: 
3831:     if not mask.size:
3832:         return []
3833: 
3834:     # Find the indices of region changes, and correct offset
3835:     idx, = np.nonzero(mask[:-1] != mask[1:])
3836:     idx += 1
3837: 
3838:     # List operations are faster for moderately sized arrays
3839:     idx = idx.tolist()
3840: 
3841:     # Add first and/or last index if needed
3842:     if mask[0]:
3843:         idx = [0] + idx
3844:     if mask[-1]:
3845:         idx.append(len(mask))
3846: 
3847:     return list(zip(idx[::2], idx[1::2]))
3848: 
3849: 
3850: def cross_from_below(x, threshold):
3851:     '''
3852:     return the indices into *x* where *x* crosses some threshold from
3853:     below, e.g., the i's where::
3854: 
3855:       x[i-1]<threshold and x[i]>=threshold
3856: 
3857:     Example code::
3858: 
3859:         import matplotlib.pyplot as plt
3860: 
3861:         t = np.arange(0.0, 2.0, 0.1)
3862:         s = np.sin(2*np.pi*t)
3863: 
3864:         fig = plt.figure()
3865:         ax = fig.add_subplot(111)
3866:         ax.plot(t, s, '-o')
3867:         ax.axhline(0.5)
3868:         ax.axhline(-0.5)
3869: 
3870:         ind = cross_from_below(s, 0.5)
3871:         ax.vlines(t[ind], -1, 1)
3872: 
3873:         ind = cross_from_above(s, -0.5)
3874:         ax.vlines(t[ind], -1, 1)
3875: 
3876:         plt.show()
3877: 
3878:     See Also
3879:     --------
3880:     :func:`cross_from_above` and :func:`contiguous_regions`
3881: 
3882:     '''
3883:     x = np.asarray(x)
3884:     ind = np.nonzero((x[:-1] < threshold) & (x[1:] >= threshold))[0]
3885:     if len(ind):
3886:         return ind+1
3887:     else:
3888:         return ind
3889: 
3890: 
3891: def cross_from_above(x, threshold):
3892:     '''
3893:     return the indices into *x* where *x* crosses some threshold from
3894:     below, e.g., the i's where::
3895: 
3896:       x[i-1]>threshold and x[i]<=threshold
3897: 
3898:     See Also
3899:     --------
3900:     :func:`cross_from_below` and :func:`contiguous_regions`
3901: 
3902:     '''
3903:     x = np.asarray(x)
3904:     ind = np.nonzero((x[:-1] >= threshold) & (x[1:] < threshold))[0]
3905:     if len(ind):
3906:         return ind+1
3907:     else:
3908:         return ind
3909: 
3910: 
3911: ##################################################
3912: # Vector and path length geometry calculations
3913: ##################################################
3914: def vector_lengths(X, P=2., axis=None):
3915:     '''
3916:     Finds the length of a set of vectors in *n* dimensions.  This is
3917:     like the :func:`numpy.norm` function for vectors, but has the ability to
3918:     work over a particular axis of the supplied array or matrix.
3919: 
3920:     Computes ``(sum((x_i)^P))^(1/P)`` for each ``{x_i}`` being the
3921:     elements of *X* along the given axis.  If *axis* is *None*,
3922:     compute over all elements of *X*.
3923:     '''
3924:     X = np.asarray(X)
3925:     return (np.sum(X**(P), axis=axis))**(1./P)
3926: 
3927: 
3928: def distances_along_curve(X):
3929:     '''
3930:     Computes the distance between a set of successive points in *N* dimensions.
3931: 
3932:     Where *X* is an *M* x *N* array or matrix.  The distances between
3933:     successive rows is computed.  Distance is the standard Euclidean
3934:     distance.
3935:     '''
3936:     X = np.diff(X, axis=0)
3937:     return vector_lengths(X, axis=1)
3938: 
3939: 
3940: def path_length(X):
3941:     '''
3942:     Computes the distance travelled along a polygonal curve in *N* dimensions.
3943: 
3944:     Where *X* is an *M* x *N* array or matrix.  Returns an array of
3945:     length *M* consisting of the distance along the curve at each point
3946:     (i.e., the rows of *X*).
3947:     '''
3948:     X = distances_along_curve(X)
3949:     return np.concatenate((np.zeros(1), np.cumsum(X)))
3950: 
3951: 
3952: def quad2cubic(q0x, q0y, q1x, q1y, q2x, q2y):
3953:     '''
3954:     Converts a quadratic Bezier curve to a cubic approximation.
3955: 
3956:     The inputs are the *x* and *y* coordinates of the three control
3957:     points of a quadratic curve, and the output is a tuple of *x* and
3958:     *y* coordinates of the four control points of the cubic curve.
3959:     '''
3960:     # TODO: Candidate for deprecation -- no longer used internally
3961: 
3962:     # c0x, c0y = q0x, q0y
3963:     c1x, c1y = q0x + 2./3. * (q1x - q0x), q0y + 2./3. * (q1y - q0y)
3964:     c2x, c2y = c1x + 1./3. * (q2x - q0x), c1y + 1./3. * (q2y - q0y)
3965:     # c3x, c3y = q2x, q2y
3966:     return q0x, q0y, c1x, c1y, c2x, c2y, q2x, q2y
3967: 
3968: 
3969: def offset_line(y, yerr):
3970:     '''
3971:     Offsets an array *y* by +/- an error and returns a tuple
3972:     (y - err, y + err).
3973: 
3974:     The error term can be:
3975: 
3976:     * A scalar. In this case, the returned tuple is obvious.
3977:     * A vector of the same length as *y*. The quantities y +/- err are computed
3978:       component-wise.
3979:     * A tuple of length 2. In this case, yerr[0] is the error below *y* and
3980:       yerr[1] is error above *y*. For example::
3981: 
3982:         from pylab import *
3983:         x = linspace(0, 2*pi, num=100, endpoint=True)
3984:         y = sin(x)
3985:         y_minus, y_plus = mlab.offset_line(y, 0.1)
3986:         plot(x, y)
3987:         fill_between(x, ym, y2=yp)
3988:         show()
3989: 
3990:     '''
3991:     if cbook.is_numlike(yerr) or (cbook.iterable(yerr) and
3992:                                   len(yerr) == len(y)):
3993:         ymin = y - yerr
3994:         ymax = y + yerr
3995:     elif len(yerr) == 2:
3996:         ymin, ymax = y - yerr[0], y + yerr[1]
3997:     else:
3998:         raise ValueError("yerr must be scalar, 1xN or 2xN")
3999:     return ymin, ymax
4000: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_87323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, (-1)), 'unicode', u"\n\nNumerical python functions written for compatability with MATLAB\ncommands with the same names.\n\nMATLAB compatible functions\n---------------------------\n\n:func:`cohere`\n    Coherence (normalized cross spectral density)\n\n:func:`csd`\n    Cross spectral density using Welch's average periodogram\n\n:func:`detrend`\n    Remove the mean or best fit line from an array\n\n:func:`find`\n    Return the indices where some condition is true;\n    numpy.nonzero is similar but more general.\n\n:func:`griddata`\n    Interpolate irregularly distributed data to a\n    regular grid.\n\n:func:`prctile`\n    Find the percentiles of a sequence\n\n:func:`prepca`\n    Principal Component Analysis\n\n:func:`psd`\n    Power spectral density using Welch's average periodogram\n\n:func:`rk4`\n    A 4th order runge kutta integrator for 1D or ND systems\n\n:func:`specgram`\n    Spectrogram (spectrum over segments of time)\n\nMiscellaneous functions\n-----------------------\n\nFunctions that don't exist in MATLAB, but are useful anyway:\n\n:func:`cohere_pairs`\n    Coherence over all pairs.  This is not a MATLAB function, but we\n    compute coherence a lot in my lab, and we compute it for a lot of\n    pairs.  This function is optimized to do this efficiently by\n    caching the direct FFTs.\n\n:func:`rk4`\n    A 4th order Runge-Kutta ODE integrator in case you ever find\n    yourself stranded without scipy (and the far superior\n    scipy.integrate tools)\n\n:func:`contiguous_regions`\n    Return the indices of the regions spanned by some logical mask\n\n:func:`cross_from_below`\n    Return the indices where a 1D array crosses a threshold from below\n\n:func:`cross_from_above`\n    Return the indices where a 1D array crosses a threshold from above\n\n:func:`complex_spectrum`\n    Return the complex-valued frequency spectrum of a signal\n\n:func:`magnitude_spectrum`\n    Return the magnitude of the frequency spectrum of a signal\n\n:func:`angle_spectrum`\n    Return the angle (wrapped phase) of the frequency spectrum of a signal\n\n:func:`phase_spectrum`\n    Return the phase (unwrapped angle) of the frequency spectrum of a signal\n\n:func:`detrend_mean`\n    Remove the mean from a line.\n\n:func:`demean`\n    Remove the mean from a line. This function is the same as\n    :func:`detrend_mean` except for the default *axis*.\n\n:func:`detrend_linear`\n    Remove the best fit line from a line.\n\n:func:`detrend_none`\n    Return the original line.\n\n:func:`stride_windows`\n    Get all windows in an array in a memory-efficient manner\n\n:func:`stride_repeat`\n    Repeat an array in a memory-efficient manner\n\n:func:`apply_window`\n    Apply a window along a given axis\n\n\nrecord array helper functions\n-----------------------------\n\nA collection of helper methods for numpyrecord arrays\n\n.. _htmlonly:\n\n    See :ref:`misc-examples-index`\n\n:func:`rec2txt`\n    Pretty print a record array\n\n:func:`rec2csv`\n    Store record array in CSV file\n\n:func:`csv2rec`\n    Import record array from CSV file with type inspection\n\n:func:`rec_append_fields`\n    Adds  field(s)/array(s) to record array\n\n:func:`rec_drop_fields`\n    Drop fields from record array\n\n:func:`rec_join`\n    Join two record arrays on sequence of fields\n\n:func:`recs_join`\n    A simple join of multiple recarrays using a single column as a key\n\n:func:`rec_groupby`\n    Summarize data by groups (similar to SQL GROUP BY)\n\n:func:`rec_summarize`\n    Helper code to filter rec array fields into new fields\n\nFor the rec viewer functions(e rec2csv), there are a bunch of Format\nobjects you can pass into the functions that will do things like color\nnegative values red, set percent formatting and scaling, etc.\n\nExample usage::\n\n    r = csv2rec('somefile.csv', checkrows=0)\n\n    formatd = dict(\n        weight = FormatFloat(2),\n        change = FormatPercent(2),\n        cost   = FormatThousands(2),\n        )\n\n\n    rec2excel(r, 'test.xls', formatd=formatd)\n    rec2csv(r, 'test.csv', formatd=formatd)\n    scroll = rec2gtk(r, formatd=formatd)\n\n    win = gtk.Window()\n    win.set_size_request(600,800)\n    win.add(scroll)\n    win.show_all()\n    gtk.main()\n\n\n")
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 168, 0))

# 'import six' statement (line 168)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_87324 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 168, 0), 'six')

if (type(import_87324) is not StypyTypeError):

    if (import_87324 != 'pyd_module'):
        __import__(import_87324)
        sys_modules_87325 = sys.modules[import_87324]
        import_module(stypy.reporting.localization.Localization(__file__, 168, 0), 'six', sys_modules_87325.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 168, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 168)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 0), 'six', import_87324)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 169, 0))

# 'from six.moves import map, xrange, zip' statement (line 169)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_87326 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 169, 0), 'six.moves')

if (type(import_87326) is not StypyTypeError):

    if (import_87326 != 'pyd_module'):
        __import__(import_87326)
        sys_modules_87327 = sys.modules[import_87326]
        import_from_module(stypy.reporting.localization.Localization(__file__, 169, 0), 'six.moves', sys_modules_87327.module_type_store, module_type_store, ['map', 'xrange', 'zip'])
        nest_module(stypy.reporting.localization.Localization(__file__, 169, 0), __file__, sys_modules_87327, sys_modules_87327.module_type_store, module_type_store)
    else:
        from six.moves import map, xrange, zip

        import_from_module(stypy.reporting.localization.Localization(__file__, 169, 0), 'six.moves', None, module_type_store, ['map', 'xrange', 'zip'], [map, xrange, zip])

else:
    # Assigning a type to the variable 'six.moves' (line 169)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 0), 'six.moves', import_87326)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 171, 0))

# 'import copy' statement (line 171)
import copy

import_module(stypy.reporting.localization.Localization(__file__, 171, 0), 'copy', copy, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 172, 0))

# 'import csv' statement (line 172)
import csv

import_module(stypy.reporting.localization.Localization(__file__, 172, 0), 'csv', csv, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 173, 0))

# 'import operator' statement (line 173)
import operator

import_module(stypy.reporting.localization.Localization(__file__, 173, 0), 'operator', operator, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 174, 0))

# 'import os' statement (line 174)
import os

import_module(stypy.reporting.localization.Localization(__file__, 174, 0), 'os', os, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 175, 0))

# 'import warnings' statement (line 175)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 175, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 177, 0))

# 'import numpy' statement (line 177)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_87328 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 177, 0), 'numpy')

if (type(import_87328) is not StypyTypeError):

    if (import_87328 != 'pyd_module'):
        __import__(import_87328)
        sys_modules_87329 = sys.modules[import_87328]
        import_module(stypy.reporting.localization.Localization(__file__, 177, 0), 'np', sys_modules_87329.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 177, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 177)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 0), 'numpy', import_87328)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 179, 0))

# 'import matplotlib.cbook' statement (line 179)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_87330 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 179, 0), 'matplotlib.cbook')

if (type(import_87330) is not StypyTypeError):

    if (import_87330 != 'pyd_module'):
        __import__(import_87330)
        sys_modules_87331 = sys.modules[import_87330]
        import_module(stypy.reporting.localization.Localization(__file__, 179, 0), 'cbook', sys_modules_87331.module_type_store, module_type_store)
    else:
        import matplotlib.cbook as cbook

        import_module(stypy.reporting.localization.Localization(__file__, 179, 0), 'cbook', matplotlib.cbook, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 179)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 179, 0), 'matplotlib.cbook', import_87330)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 180, 0))

# 'from matplotlib import docstring' statement (line 180)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_87332 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 180, 0), 'matplotlib')

if (type(import_87332) is not StypyTypeError):

    if (import_87332 != 'pyd_module'):
        __import__(import_87332)
        sys_modules_87333 = sys.modules[import_87332]
        import_from_module(stypy.reporting.localization.Localization(__file__, 180, 0), 'matplotlib', sys_modules_87333.module_type_store, module_type_store, ['docstring'])
        nest_module(stypy.reporting.localization.Localization(__file__, 180, 0), __file__, sys_modules_87333, sys_modules_87333.module_type_store, module_type_store)
    else:
        from matplotlib import docstring

        import_from_module(stypy.reporting.localization.Localization(__file__, 180, 0), 'matplotlib', None, module_type_store, ['docstring'], [docstring])

else:
    # Assigning a type to the variable 'matplotlib' (line 180)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 180, 0), 'matplotlib', import_87332)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 181, 0))

# 'from matplotlib.path import Path' statement (line 181)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_87334 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 181, 0), 'matplotlib.path')

if (type(import_87334) is not StypyTypeError):

    if (import_87334 != 'pyd_module'):
        __import__(import_87334)
        sys_modules_87335 = sys.modules[import_87334]
        import_from_module(stypy.reporting.localization.Localization(__file__, 181, 0), 'matplotlib.path', sys_modules_87335.module_type_store, module_type_store, ['Path'])
        nest_module(stypy.reporting.localization.Localization(__file__, 181, 0), __file__, sys_modules_87335, sys_modules_87335.module_type_store, module_type_store)
    else:
        from matplotlib.path import Path

        import_from_module(stypy.reporting.localization.Localization(__file__, 181, 0), 'matplotlib.path', None, module_type_store, ['Path'], [Path])

else:
    # Assigning a type to the variable 'matplotlib.path' (line 181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 181, 0), 'matplotlib.path', import_87334)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 182, 0))

# 'import math' statement (line 182)
import math

import_module(stypy.reporting.localization.Localization(__file__, 182, 0), 'math', math, module_type_store)


# Getting the type of 'six' (line 185)
six_87336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 3), 'six')
# Obtaining the member 'PY3' of a type (line 185)
PY3_87337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 3), six_87336, 'PY3')
# Testing the type of an if condition (line 185)
if_condition_87338 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 185, 0), PY3_87337)
# Assigning a type to the variable 'if_condition_87338' (line 185)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 185, 0), 'if_condition_87338', if_condition_87338)
# SSA begins for if statement (line 185)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Name to a Name (line 186):

# Assigning a Name to a Name (line 186):

# Assigning a Name to a Name (line 186):
# Getting the type of 'int' (line 186)
int_87339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 11), 'int')
# Assigning a type to the variable 'long' (line 186)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 4), 'long', int_87339)
# SSA join for if statement (line 185)
module_type_store = module_type_store.join_ssa_context()


@norecursion
def logspace(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'logspace'
    module_type_store = module_type_store.open_function_context('logspace', 189, 0, False)
    
    # Passed parameters checking function
    logspace.stypy_localization = localization
    logspace.stypy_type_of_self = None
    logspace.stypy_type_store = module_type_store
    logspace.stypy_function_name = 'logspace'
    logspace.stypy_param_names_list = ['xmin', 'xmax', 'N']
    logspace.stypy_varargs_param_name = None
    logspace.stypy_kwargs_param_name = None
    logspace.stypy_call_defaults = defaults
    logspace.stypy_call_varargs = varargs
    logspace.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'logspace', ['xmin', 'xmax', 'N'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'logspace', localization, ['xmin', 'xmax', 'N'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'logspace(...)' code ##################

    unicode_87340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, (-1)), 'unicode', u'\n    Return N values logarithmically spaced between xmin and xmax.\n\n    ')
    
    # Call to exp(...): (line 194)
    # Processing the call arguments (line 194)
    
    # Call to linspace(...): (line 194)
    # Processing the call arguments (line 194)
    
    # Call to log(...): (line 194)
    # Processing the call arguments (line 194)
    # Getting the type of 'xmin' (line 194)
    xmin_87347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 37), 'xmin', False)
    # Processing the call keyword arguments (line 194)
    kwargs_87348 = {}
    # Getting the type of 'np' (line 194)
    np_87345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 30), 'np', False)
    # Obtaining the member 'log' of a type (line 194)
    log_87346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 30), np_87345, 'log')
    # Calling log(args, kwargs) (line 194)
    log_call_result_87349 = invoke(stypy.reporting.localization.Localization(__file__, 194, 30), log_87346, *[xmin_87347], **kwargs_87348)
    
    
    # Call to log(...): (line 194)
    # Processing the call arguments (line 194)
    # Getting the type of 'xmax' (line 194)
    xmax_87352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 51), 'xmax', False)
    # Processing the call keyword arguments (line 194)
    kwargs_87353 = {}
    # Getting the type of 'np' (line 194)
    np_87350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 44), 'np', False)
    # Obtaining the member 'log' of a type (line 194)
    log_87351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 44), np_87350, 'log')
    # Calling log(args, kwargs) (line 194)
    log_call_result_87354 = invoke(stypy.reporting.localization.Localization(__file__, 194, 44), log_87351, *[xmax_87352], **kwargs_87353)
    
    # Getting the type of 'N' (line 194)
    N_87355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 58), 'N', False)
    # Processing the call keyword arguments (line 194)
    kwargs_87356 = {}
    # Getting the type of 'np' (line 194)
    np_87343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 18), 'np', False)
    # Obtaining the member 'linspace' of a type (line 194)
    linspace_87344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 18), np_87343, 'linspace')
    # Calling linspace(args, kwargs) (line 194)
    linspace_call_result_87357 = invoke(stypy.reporting.localization.Localization(__file__, 194, 18), linspace_87344, *[log_call_result_87349, log_call_result_87354, N_87355], **kwargs_87356)
    
    # Processing the call keyword arguments (line 194)
    kwargs_87358 = {}
    # Getting the type of 'np' (line 194)
    np_87341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 11), 'np', False)
    # Obtaining the member 'exp' of a type (line 194)
    exp_87342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 11), np_87341, 'exp')
    # Calling exp(args, kwargs) (line 194)
    exp_call_result_87359 = invoke(stypy.reporting.localization.Localization(__file__, 194, 11), exp_87342, *[linspace_call_result_87357], **kwargs_87358)
    
    # Assigning a type to the variable 'stypy_return_type' (line 194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 4), 'stypy_return_type', exp_call_result_87359)
    
    # ################# End of 'logspace(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'logspace' in the type store
    # Getting the type of 'stypy_return_type' (line 189)
    stypy_return_type_87360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_87360)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'logspace'
    return stypy_return_type_87360

# Assigning a type to the variable 'logspace' (line 189)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 189, 0), 'logspace', logspace)

@norecursion
def _norm(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_norm'
    module_type_store = module_type_store.open_function_context('_norm', 197, 0, False)
    
    # Passed parameters checking function
    _norm.stypy_localization = localization
    _norm.stypy_type_of_self = None
    _norm.stypy_type_store = module_type_store
    _norm.stypy_function_name = '_norm'
    _norm.stypy_param_names_list = ['x']
    _norm.stypy_varargs_param_name = None
    _norm.stypy_kwargs_param_name = None
    _norm.stypy_call_defaults = defaults
    _norm.stypy_call_varargs = varargs
    _norm.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_norm', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_norm', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_norm(...)' code ##################

    unicode_87361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 201, (-1)), 'unicode', u'\n    Return sqrt(x dot x).\n\n    ')
    
    # Call to sqrt(...): (line 202)
    # Processing the call arguments (line 202)
    
    # Call to dot(...): (line 202)
    # Processing the call arguments (line 202)
    # Getting the type of 'x' (line 202)
    x_87366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 26), 'x', False)
    # Getting the type of 'x' (line 202)
    x_87367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 29), 'x', False)
    # Processing the call keyword arguments (line 202)
    kwargs_87368 = {}
    # Getting the type of 'np' (line 202)
    np_87364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 19), 'np', False)
    # Obtaining the member 'dot' of a type (line 202)
    dot_87365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 19), np_87364, 'dot')
    # Calling dot(args, kwargs) (line 202)
    dot_call_result_87369 = invoke(stypy.reporting.localization.Localization(__file__, 202, 19), dot_87365, *[x_87366, x_87367], **kwargs_87368)
    
    # Processing the call keyword arguments (line 202)
    kwargs_87370 = {}
    # Getting the type of 'np' (line 202)
    np_87362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 11), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 202)
    sqrt_87363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 11), np_87362, 'sqrt')
    # Calling sqrt(args, kwargs) (line 202)
    sqrt_call_result_87371 = invoke(stypy.reporting.localization.Localization(__file__, 202, 11), sqrt_87363, *[dot_call_result_87369], **kwargs_87370)
    
    # Assigning a type to the variable 'stypy_return_type' (line 202)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 202, 4), 'stypy_return_type', sqrt_call_result_87371)
    
    # ################# End of '_norm(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_norm' in the type store
    # Getting the type of 'stypy_return_type' (line 197)
    stypy_return_type_87372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_87372)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_norm'
    return stypy_return_type_87372

# Assigning a type to the variable '_norm' (line 197)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 197, 0), '_norm', _norm)

@norecursion
def window_hanning(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'window_hanning'
    module_type_store = module_type_store.open_function_context('window_hanning', 205, 0, False)
    
    # Passed parameters checking function
    window_hanning.stypy_localization = localization
    window_hanning.stypy_type_of_self = None
    window_hanning.stypy_type_store = module_type_store
    window_hanning.stypy_function_name = 'window_hanning'
    window_hanning.stypy_param_names_list = ['x']
    window_hanning.stypy_varargs_param_name = None
    window_hanning.stypy_kwargs_param_name = None
    window_hanning.stypy_call_defaults = defaults
    window_hanning.stypy_call_varargs = varargs
    window_hanning.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'window_hanning', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'window_hanning', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'window_hanning(...)' code ##################

    unicode_87373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, (-1)), 'unicode', u'\n    Return x times the hanning window of len(x).\n\n    See Also\n    --------\n    :func:`window_none`\n        :func:`window_none` is another window algorithm.\n    ')
    
    # Call to hanning(...): (line 214)
    # Processing the call arguments (line 214)
    
    # Call to len(...): (line 214)
    # Processing the call arguments (line 214)
    # Getting the type of 'x' (line 214)
    x_87377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 26), 'x', False)
    # Processing the call keyword arguments (line 214)
    kwargs_87378 = {}
    # Getting the type of 'len' (line 214)
    len_87376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 22), 'len', False)
    # Calling len(args, kwargs) (line 214)
    len_call_result_87379 = invoke(stypy.reporting.localization.Localization(__file__, 214, 22), len_87376, *[x_87377], **kwargs_87378)
    
    # Processing the call keyword arguments (line 214)
    kwargs_87380 = {}
    # Getting the type of 'np' (line 214)
    np_87374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 11), 'np', False)
    # Obtaining the member 'hanning' of a type (line 214)
    hanning_87375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 11), np_87374, 'hanning')
    # Calling hanning(args, kwargs) (line 214)
    hanning_call_result_87381 = invoke(stypy.reporting.localization.Localization(__file__, 214, 11), hanning_87375, *[len_call_result_87379], **kwargs_87380)
    
    # Getting the type of 'x' (line 214)
    x_87382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 30), 'x')
    # Applying the binary operator '*' (line 214)
    result_mul_87383 = python_operator(stypy.reporting.localization.Localization(__file__, 214, 11), '*', hanning_call_result_87381, x_87382)
    
    # Assigning a type to the variable 'stypy_return_type' (line 214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 4), 'stypy_return_type', result_mul_87383)
    
    # ################# End of 'window_hanning(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'window_hanning' in the type store
    # Getting the type of 'stypy_return_type' (line 205)
    stypy_return_type_87384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_87384)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'window_hanning'
    return stypy_return_type_87384

# Assigning a type to the variable 'window_hanning' (line 205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'window_hanning', window_hanning)

@norecursion
def window_none(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'window_none'
    module_type_store = module_type_store.open_function_context('window_none', 217, 0, False)
    
    # Passed parameters checking function
    window_none.stypy_localization = localization
    window_none.stypy_type_of_self = None
    window_none.stypy_type_store = module_type_store
    window_none.stypy_function_name = 'window_none'
    window_none.stypy_param_names_list = ['x']
    window_none.stypy_varargs_param_name = None
    window_none.stypy_kwargs_param_name = None
    window_none.stypy_call_defaults = defaults
    window_none.stypy_call_varargs = varargs
    window_none.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'window_none', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'window_none', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'window_none(...)' code ##################

    unicode_87385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, (-1)), 'unicode', u'\n    No window function; simply return x.\n\n    See Also\n    --------\n    :func:`window_hanning`\n        :func:`window_hanning` is another window algorithm.\n    ')
    # Getting the type of 'x' (line 226)
    x_87386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 11), 'x')
    # Assigning a type to the variable 'stypy_return_type' (line 226)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 4), 'stypy_return_type', x_87386)
    
    # ################# End of 'window_none(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'window_none' in the type store
    # Getting the type of 'stypy_return_type' (line 217)
    stypy_return_type_87387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_87387)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'window_none'
    return stypy_return_type_87387

# Assigning a type to the variable 'window_none' (line 217)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 0), 'window_none', window_none)

@norecursion
def apply_window(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_87388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 229, 33), 'int')
    # Getting the type of 'None' (line 229)
    None_87389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 50), 'None')
    defaults = [int_87388, None_87389]
    # Create a new context for function 'apply_window'
    module_type_store = module_type_store.open_function_context('apply_window', 229, 0, False)
    
    # Passed parameters checking function
    apply_window.stypy_localization = localization
    apply_window.stypy_type_of_self = None
    apply_window.stypy_type_store = module_type_store
    apply_window.stypy_function_name = 'apply_window'
    apply_window.stypy_param_names_list = ['x', 'window', 'axis', 'return_window']
    apply_window.stypy_varargs_param_name = None
    apply_window.stypy_kwargs_param_name = None
    apply_window.stypy_call_defaults = defaults
    apply_window.stypy_call_varargs = varargs
    apply_window.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'apply_window', ['x', 'window', 'axis', 'return_window'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'apply_window', localization, ['x', 'window', 'axis', 'return_window'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'apply_window(...)' code ##################

    unicode_87390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, (-1)), 'unicode', u'\n    Apply the given window to the given 1D or 2D array along the given axis.\n\n    Parameters\n    ----------\n    x : 1D or 2D array or sequence\n        Array or sequence containing the data.\n\n    window : function or array.\n        Either a function to generate a window or an array with length\n        *x*.shape[*axis*]\n\n    axis : integer\n        The axis over which to do the repetition.\n        Must be 0 or 1.  The default is 0\n\n    return_window : bool\n        If true, also return the 1D values of the window that was applied\n    ')
    
    # Assigning a Call to a Name (line 249):
    
    # Assigning a Call to a Name (line 249):
    
    # Assigning a Call to a Name (line 249):
    
    # Call to asarray(...): (line 249)
    # Processing the call arguments (line 249)
    # Getting the type of 'x' (line 249)
    x_87393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 19), 'x', False)
    # Processing the call keyword arguments (line 249)
    kwargs_87394 = {}
    # Getting the type of 'np' (line 249)
    np_87391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 249)
    asarray_87392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 249, 8), np_87391, 'asarray')
    # Calling asarray(args, kwargs) (line 249)
    asarray_call_result_87395 = invoke(stypy.reporting.localization.Localization(__file__, 249, 8), asarray_87392, *[x_87393], **kwargs_87394)
    
    # Assigning a type to the variable 'x' (line 249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 4), 'x', asarray_call_result_87395)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'x' (line 251)
    x_87396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 7), 'x')
    # Obtaining the member 'ndim' of a type (line 251)
    ndim_87397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 251, 7), x_87396, 'ndim')
    int_87398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 16), 'int')
    # Applying the binary operator '<' (line 251)
    result_lt_87399 = python_operator(stypy.reporting.localization.Localization(__file__, 251, 7), '<', ndim_87397, int_87398)
    
    
    # Getting the type of 'x' (line 251)
    x_87400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 21), 'x')
    # Obtaining the member 'ndim' of a type (line 251)
    ndim_87401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 251, 21), x_87400, 'ndim')
    int_87402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 30), 'int')
    # Applying the binary operator '>' (line 251)
    result_gt_87403 = python_operator(stypy.reporting.localization.Localization(__file__, 251, 21), '>', ndim_87401, int_87402)
    
    # Applying the binary operator 'or' (line 251)
    result_or_keyword_87404 = python_operator(stypy.reporting.localization.Localization(__file__, 251, 7), 'or', result_lt_87399, result_gt_87403)
    
    # Testing the type of an if condition (line 251)
    if_condition_87405 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 251, 4), result_or_keyword_87404)
    # Assigning a type to the variable 'if_condition_87405' (line 251)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 4), 'if_condition_87405', if_condition_87405)
    # SSA begins for if statement (line 251)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 252)
    # Processing the call arguments (line 252)
    unicode_87407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 25), 'unicode', u'only 1D or 2D arrays can be used')
    # Processing the call keyword arguments (line 252)
    kwargs_87408 = {}
    # Getting the type of 'ValueError' (line 252)
    ValueError_87406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 252)
    ValueError_call_result_87409 = invoke(stypy.reporting.localization.Localization(__file__, 252, 14), ValueError_87406, *[unicode_87407], **kwargs_87408)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 252, 8), ValueError_call_result_87409, 'raise parameter', BaseException)
    # SSA join for if statement (line 251)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'axis' (line 253)
    axis_87410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 7), 'axis')
    int_87411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 253, 12), 'int')
    # Applying the binary operator '+' (line 253)
    result_add_87412 = python_operator(stypy.reporting.localization.Localization(__file__, 253, 7), '+', axis_87410, int_87411)
    
    # Getting the type of 'x' (line 253)
    x_87413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 16), 'x')
    # Obtaining the member 'ndim' of a type (line 253)
    ndim_87414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 253, 16), x_87413, 'ndim')
    # Applying the binary operator '>' (line 253)
    result_gt_87415 = python_operator(stypy.reporting.localization.Localization(__file__, 253, 7), '>', result_add_87412, ndim_87414)
    
    # Testing the type of an if condition (line 253)
    if_condition_87416 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 253, 4), result_gt_87415)
    # Assigning a type to the variable 'if_condition_87416' (line 253)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 4), 'if_condition_87416', if_condition_87416)
    # SSA begins for if statement (line 253)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 254)
    # Processing the call arguments (line 254)
    unicode_87418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 25), 'unicode', u'axis(=%s) out of bounds')
    # Getting the type of 'axis' (line 254)
    axis_87419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 53), 'axis', False)
    # Applying the binary operator '%' (line 254)
    result_mod_87420 = python_operator(stypy.reporting.localization.Localization(__file__, 254, 25), '%', unicode_87418, axis_87419)
    
    # Processing the call keyword arguments (line 254)
    kwargs_87421 = {}
    # Getting the type of 'ValueError' (line 254)
    ValueError_87417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 254)
    ValueError_call_result_87422 = invoke(stypy.reporting.localization.Localization(__file__, 254, 14), ValueError_87417, *[result_mod_87420], **kwargs_87421)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 254, 8), ValueError_call_result_87422, 'raise parameter', BaseException)
    # SSA join for if statement (line 253)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 256):
    
    # Assigning a Call to a Name (line 256):
    
    # Assigning a Call to a Name (line 256):
    
    # Call to list(...): (line 256)
    # Processing the call arguments (line 256)
    # Getting the type of 'x' (line 256)
    x_87424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 18), 'x', False)
    # Obtaining the member 'shape' of a type (line 256)
    shape_87425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 18), x_87424, 'shape')
    # Processing the call keyword arguments (line 256)
    kwargs_87426 = {}
    # Getting the type of 'list' (line 256)
    list_87423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 13), 'list', False)
    # Calling list(args, kwargs) (line 256)
    list_call_result_87427 = invoke(stypy.reporting.localization.Localization(__file__, 256, 13), list_87423, *[shape_87425], **kwargs_87426)
    
    # Assigning a type to the variable 'xshape' (line 256)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 4), 'xshape', list_call_result_87427)
    
    # Assigning a Call to a Name (line 257):
    
    # Assigning a Call to a Name (line 257):
    
    # Assigning a Call to a Name (line 257):
    
    # Call to pop(...): (line 257)
    # Processing the call arguments (line 257)
    # Getting the type of 'axis' (line 257)
    axis_87430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 28), 'axis', False)
    # Processing the call keyword arguments (line 257)
    kwargs_87431 = {}
    # Getting the type of 'xshape' (line 257)
    xshape_87428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 17), 'xshape', False)
    # Obtaining the member 'pop' of a type (line 257)
    pop_87429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 257, 17), xshape_87428, 'pop')
    # Calling pop(args, kwargs) (line 257)
    pop_call_result_87432 = invoke(stypy.reporting.localization.Localization(__file__, 257, 17), pop_87429, *[axis_87430], **kwargs_87431)
    
    # Assigning a type to the variable 'xshapetarg' (line 257)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 257, 4), 'xshapetarg', pop_call_result_87432)
    
    
    # Call to iterable(...): (line 259)
    # Processing the call arguments (line 259)
    # Getting the type of 'window' (line 259)
    window_87435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 22), 'window', False)
    # Processing the call keyword arguments (line 259)
    kwargs_87436 = {}
    # Getting the type of 'cbook' (line 259)
    cbook_87433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 7), 'cbook', False)
    # Obtaining the member 'iterable' of a type (line 259)
    iterable_87434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 259, 7), cbook_87433, 'iterable')
    # Calling iterable(args, kwargs) (line 259)
    iterable_call_result_87437 = invoke(stypy.reporting.localization.Localization(__file__, 259, 7), iterable_87434, *[window_87435], **kwargs_87436)
    
    # Testing the type of an if condition (line 259)
    if_condition_87438 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 259, 4), iterable_call_result_87437)
    # Assigning a type to the variable 'if_condition_87438' (line 259)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 4), 'if_condition_87438', if_condition_87438)
    # SSA begins for if statement (line 259)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Call to len(...): (line 260)
    # Processing the call arguments (line 260)
    # Getting the type of 'window' (line 260)
    window_87440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 15), 'window', False)
    # Processing the call keyword arguments (line 260)
    kwargs_87441 = {}
    # Getting the type of 'len' (line 260)
    len_87439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 11), 'len', False)
    # Calling len(args, kwargs) (line 260)
    len_call_result_87442 = invoke(stypy.reporting.localization.Localization(__file__, 260, 11), len_87439, *[window_87440], **kwargs_87441)
    
    # Getting the type of 'xshapetarg' (line 260)
    xshapetarg_87443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 26), 'xshapetarg')
    # Applying the binary operator '!=' (line 260)
    result_ne_87444 = python_operator(stypy.reporting.localization.Localization(__file__, 260, 11), '!=', len_call_result_87442, xshapetarg_87443)
    
    # Testing the type of an if condition (line 260)
    if_condition_87445 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 260, 8), result_ne_87444)
    # Assigning a type to the variable 'if_condition_87445' (line 260)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 260, 8), 'if_condition_87445', if_condition_87445)
    # SSA begins for if statement (line 260)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 261)
    # Processing the call arguments (line 261)
    unicode_87447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 261, 29), 'unicode', u'The len(window) must be the same as the shape of x for the chosen axis')
    # Processing the call keyword arguments (line 261)
    kwargs_87448 = {}
    # Getting the type of 'ValueError' (line 261)
    ValueError_87446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 261)
    ValueError_call_result_87449 = invoke(stypy.reporting.localization.Localization(__file__, 261, 18), ValueError_87446, *[unicode_87447], **kwargs_87448)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 261, 12), ValueError_call_result_87449, 'raise parameter', BaseException)
    # SSA join for if statement (line 260)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 263):
    
    # Assigning a Name to a Name (line 263):
    
    # Assigning a Name to a Name (line 263):
    # Getting the type of 'window' (line 263)
    window_87450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 21), 'window')
    # Assigning a type to the variable 'windowVals' (line 263)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'windowVals', window_87450)
    # SSA branch for the else part of an if statement (line 259)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 265):
    
    # Assigning a Call to a Name (line 265):
    
    # Assigning a Call to a Name (line 265):
    
    # Call to window(...): (line 265)
    # Processing the call arguments (line 265)
    
    # Call to ones(...): (line 265)
    # Processing the call arguments (line 265)
    # Getting the type of 'xshapetarg' (line 265)
    xshapetarg_87454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 36), 'xshapetarg', False)
    # Processing the call keyword arguments (line 265)
    # Getting the type of 'x' (line 265)
    x_87455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 54), 'x', False)
    # Obtaining the member 'dtype' of a type (line 265)
    dtype_87456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 265, 54), x_87455, 'dtype')
    keyword_87457 = dtype_87456
    kwargs_87458 = {'dtype': keyword_87457}
    # Getting the type of 'np' (line 265)
    np_87452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 28), 'np', False)
    # Obtaining the member 'ones' of a type (line 265)
    ones_87453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 265, 28), np_87452, 'ones')
    # Calling ones(args, kwargs) (line 265)
    ones_call_result_87459 = invoke(stypy.reporting.localization.Localization(__file__, 265, 28), ones_87453, *[xshapetarg_87454], **kwargs_87458)
    
    # Processing the call keyword arguments (line 265)
    kwargs_87460 = {}
    # Getting the type of 'window' (line 265)
    window_87451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 21), 'window', False)
    # Calling window(args, kwargs) (line 265)
    window_call_result_87461 = invoke(stypy.reporting.localization.Localization(__file__, 265, 21), window_87451, *[ones_call_result_87459], **kwargs_87460)
    
    # Assigning a type to the variable 'windowVals' (line 265)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 265, 8), 'windowVals', window_call_result_87461)
    # SSA join for if statement (line 259)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'x' (line 267)
    x_87462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 7), 'x')
    # Obtaining the member 'ndim' of a type (line 267)
    ndim_87463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 267, 7), x_87462, 'ndim')
    int_87464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, 17), 'int')
    # Applying the binary operator '==' (line 267)
    result_eq_87465 = python_operator(stypy.reporting.localization.Localization(__file__, 267, 7), '==', ndim_87463, int_87464)
    
    # Testing the type of an if condition (line 267)
    if_condition_87466 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 267, 4), result_eq_87465)
    # Assigning a type to the variable 'if_condition_87466' (line 267)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 267, 4), 'if_condition_87466', if_condition_87466)
    # SSA begins for if statement (line 267)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'return_window' (line 268)
    return_window_87467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 11), 'return_window')
    # Testing the type of an if condition (line 268)
    if_condition_87468 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 268, 8), return_window_87467)
    # Assigning a type to the variable 'if_condition_87468' (line 268)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'if_condition_87468', if_condition_87468)
    # SSA begins for if statement (line 268)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 269)
    tuple_87469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 269, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 269)
    # Adding element type (line 269)
    # Getting the type of 'windowVals' (line 269)
    windowVals_87470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 19), 'windowVals')
    # Getting the type of 'x' (line 269)
    x_87471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 32), 'x')
    # Applying the binary operator '*' (line 269)
    result_mul_87472 = python_operator(stypy.reporting.localization.Localization(__file__, 269, 19), '*', windowVals_87470, x_87471)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 269, 19), tuple_87469, result_mul_87472)
    # Adding element type (line 269)
    # Getting the type of 'windowVals' (line 269)
    windowVals_87473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 35), 'windowVals')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 269, 19), tuple_87469, windowVals_87473)
    
    # Assigning a type to the variable 'stypy_return_type' (line 269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 12), 'stypy_return_type', tuple_87469)
    # SSA branch for the else part of an if statement (line 268)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'windowVals' (line 271)
    windowVals_87474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 19), 'windowVals')
    # Getting the type of 'x' (line 271)
    x_87475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 32), 'x')
    # Applying the binary operator '*' (line 271)
    result_mul_87476 = python_operator(stypy.reporting.localization.Localization(__file__, 271, 19), '*', windowVals_87474, x_87475)
    
    # Assigning a type to the variable 'stypy_return_type' (line 271)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 271, 12), 'stypy_return_type', result_mul_87476)
    # SSA join for if statement (line 268)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 267)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 273):
    
    # Assigning a Call to a Name (line 273):
    
    # Assigning a Call to a Name (line 273):
    
    # Call to pop(...): (line 273)
    # Processing the call keyword arguments (line 273)
    kwargs_87479 = {}
    # Getting the type of 'xshape' (line 273)
    xshape_87477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 18), 'xshape', False)
    # Obtaining the member 'pop' of a type (line 273)
    pop_87478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 273, 18), xshape_87477, 'pop')
    # Calling pop(args, kwargs) (line 273)
    pop_call_result_87480 = invoke(stypy.reporting.localization.Localization(__file__, 273, 18), pop_87478, *[], **kwargs_87479)
    
    # Assigning a type to the variable 'xshapeother' (line 273)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 4), 'xshapeother', pop_call_result_87480)
    
    # Assigning a BinOp to a Name (line 275):
    
    # Assigning a BinOp to a Name (line 275):
    
    # Assigning a BinOp to a Name (line 275):
    # Getting the type of 'axis' (line 275)
    axis_87481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 17), 'axis')
    int_87482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 22), 'int')
    # Applying the binary operator '+' (line 275)
    result_add_87483 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 17), '+', axis_87481, int_87482)
    
    int_87484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 27), 'int')
    # Applying the binary operator '%' (line 275)
    result_mod_87485 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 16), '%', result_add_87483, int_87484)
    
    # Assigning a type to the variable 'otheraxis' (line 275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 4), 'otheraxis', result_mod_87485)
    
    # Assigning a Call to a Name (line 277):
    
    # Assigning a Call to a Name (line 277):
    
    # Assigning a Call to a Name (line 277):
    
    # Call to stride_repeat(...): (line 277)
    # Processing the call arguments (line 277)
    # Getting the type of 'windowVals' (line 277)
    windowVals_87487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 34), 'windowVals', False)
    # Getting the type of 'xshapeother' (line 277)
    xshapeother_87488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 46), 'xshapeother', False)
    # Processing the call keyword arguments (line 277)
    # Getting the type of 'otheraxis' (line 277)
    otheraxis_87489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 64), 'otheraxis', False)
    keyword_87490 = otheraxis_87489
    kwargs_87491 = {'axis': keyword_87490}
    # Getting the type of 'stride_repeat' (line 277)
    stride_repeat_87486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 20), 'stride_repeat', False)
    # Calling stride_repeat(args, kwargs) (line 277)
    stride_repeat_call_result_87492 = invoke(stypy.reporting.localization.Localization(__file__, 277, 20), stride_repeat_87486, *[windowVals_87487, xshapeother_87488], **kwargs_87491)
    
    # Assigning a type to the variable 'windowValsRep' (line 277)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 4), 'windowValsRep', stride_repeat_call_result_87492)
    
    # Getting the type of 'return_window' (line 279)
    return_window_87493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 7), 'return_window')
    # Testing the type of an if condition (line 279)
    if_condition_87494 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 279, 4), return_window_87493)
    # Assigning a type to the variable 'if_condition_87494' (line 279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 279, 4), 'if_condition_87494', if_condition_87494)
    # SSA begins for if statement (line 279)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 280)
    tuple_87495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 280)
    # Adding element type (line 280)
    # Getting the type of 'windowValsRep' (line 280)
    windowValsRep_87496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 15), 'windowValsRep')
    # Getting the type of 'x' (line 280)
    x_87497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 31), 'x')
    # Applying the binary operator '*' (line 280)
    result_mul_87498 = python_operator(stypy.reporting.localization.Localization(__file__, 280, 15), '*', windowValsRep_87496, x_87497)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 280, 15), tuple_87495, result_mul_87498)
    # Adding element type (line 280)
    # Getting the type of 'windowVals' (line 280)
    windowVals_87499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 34), 'windowVals')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 280, 15), tuple_87495, windowVals_87499)
    
    # Assigning a type to the variable 'stypy_return_type' (line 280)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 280, 8), 'stypy_return_type', tuple_87495)
    # SSA branch for the else part of an if statement (line 279)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'windowValsRep' (line 282)
    windowValsRep_87500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 15), 'windowValsRep')
    # Getting the type of 'x' (line 282)
    x_87501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 31), 'x')
    # Applying the binary operator '*' (line 282)
    result_mul_87502 = python_operator(stypy.reporting.localization.Localization(__file__, 282, 15), '*', windowValsRep_87500, x_87501)
    
    # Assigning a type to the variable 'stypy_return_type' (line 282)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 282, 8), 'stypy_return_type', result_mul_87502)
    # SSA join for if statement (line 279)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'apply_window(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'apply_window' in the type store
    # Getting the type of 'stypy_return_type' (line 229)
    stypy_return_type_87503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_87503)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'apply_window'
    return stypy_return_type_87503

# Assigning a type to the variable 'apply_window' (line 229)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 229, 0), 'apply_window', apply_window)

@norecursion
def detrend(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 285)
    None_87504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 19), 'None')
    # Getting the type of 'None' (line 285)
    None_87505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 30), 'None')
    defaults = [None_87504, None_87505]
    # Create a new context for function 'detrend'
    module_type_store = module_type_store.open_function_context('detrend', 285, 0, False)
    
    # Passed parameters checking function
    detrend.stypy_localization = localization
    detrend.stypy_type_of_self = None
    detrend.stypy_type_store = module_type_store
    detrend.stypy_function_name = 'detrend'
    detrend.stypy_param_names_list = ['x', 'key', 'axis']
    detrend.stypy_varargs_param_name = None
    detrend.stypy_kwargs_param_name = None
    detrend.stypy_call_defaults = defaults
    detrend.stypy_call_varargs = varargs
    detrend.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'detrend', ['x', 'key', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'detrend', localization, ['x', 'key', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'detrend(...)' code ##################

    unicode_87506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 315, (-1)), 'unicode', u"\n    Return x with its trend removed.\n\n    Parameters\n    ----------\n    x : array or sequence\n        Array or sequence containing the data.\n\n    key : [ 'default' | 'constant' | 'mean' | 'linear' | 'none'] or function\n        Specifies the detrend algorithm to use. 'default' is 'mean', which is\n        the same as :func:`detrend_mean`. 'constant' is the same. 'linear' is\n        the same as :func:`detrend_linear`. 'none' is the same as\n        :func:`detrend_none`. The default is 'mean'. See the corresponding\n        functions for more details regarding the algorithms. Can also be a\n        function that carries out the detrend operation.\n\n    axis : integer\n        The axis along which to do the detrending.\n\n    See Also\n    --------\n    :func:`detrend_mean`\n        :func:`detrend_mean` implements the 'mean' algorithm.\n\n    :func:`detrend_linear`\n        :func:`detrend_linear` implements the 'linear' algorithm.\n\n    :func:`detrend_none`\n        :func:`detrend_none` implements the 'none' algorithm.\n    ")
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'key' (line 316)
    key_87507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 7), 'key')
    # Getting the type of 'None' (line 316)
    None_87508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 14), 'None')
    # Applying the binary operator 'is' (line 316)
    result_is__87509 = python_operator(stypy.reporting.localization.Localization(__file__, 316, 7), 'is', key_87507, None_87508)
    
    
    # Getting the type of 'key' (line 316)
    key_87510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 22), 'key')
    
    # Obtaining an instance of the builtin type 'list' (line 316)
    list_87511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 316, 29), 'list')
    # Adding type elements to the builtin type 'list' instance (line 316)
    # Adding element type (line 316)
    unicode_87512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 316, 30), 'unicode', u'constant')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 316, 29), list_87511, unicode_87512)
    # Adding element type (line 316)
    unicode_87513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 316, 42), 'unicode', u'mean')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 316, 29), list_87511, unicode_87513)
    # Adding element type (line 316)
    unicode_87514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 316, 50), 'unicode', u'default')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 316, 29), list_87511, unicode_87514)
    
    # Applying the binary operator 'in' (line 316)
    result_contains_87515 = python_operator(stypy.reporting.localization.Localization(__file__, 316, 22), 'in', key_87510, list_87511)
    
    # Applying the binary operator 'or' (line 316)
    result_or_keyword_87516 = python_operator(stypy.reporting.localization.Localization(__file__, 316, 7), 'or', result_is__87509, result_contains_87515)
    
    # Testing the type of an if condition (line 316)
    if_condition_87517 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 316, 4), result_or_keyword_87516)
    # Assigning a type to the variable 'if_condition_87517' (line 316)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 316, 4), 'if_condition_87517', if_condition_87517)
    # SSA begins for if statement (line 316)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to detrend(...): (line 317)
    # Processing the call arguments (line 317)
    # Getting the type of 'x' (line 317)
    x_87519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 23), 'x', False)
    # Processing the call keyword arguments (line 317)
    # Getting the type of 'detrend_mean' (line 317)
    detrend_mean_87520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 30), 'detrend_mean', False)
    keyword_87521 = detrend_mean_87520
    # Getting the type of 'axis' (line 317)
    axis_87522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 49), 'axis', False)
    keyword_87523 = axis_87522
    kwargs_87524 = {'key': keyword_87521, 'axis': keyword_87523}
    # Getting the type of 'detrend' (line 317)
    detrend_87518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 15), 'detrend', False)
    # Calling detrend(args, kwargs) (line 317)
    detrend_call_result_87525 = invoke(stypy.reporting.localization.Localization(__file__, 317, 15), detrend_87518, *[x_87519], **kwargs_87524)
    
    # Assigning a type to the variable 'stypy_return_type' (line 317)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 8), 'stypy_return_type', detrend_call_result_87525)
    # SSA branch for the else part of an if statement (line 316)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'key' (line 318)
    key_87526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 9), 'key')
    unicode_87527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 16), 'unicode', u'linear')
    # Applying the binary operator '==' (line 318)
    result_eq_87528 = python_operator(stypy.reporting.localization.Localization(__file__, 318, 9), '==', key_87526, unicode_87527)
    
    # Testing the type of an if condition (line 318)
    if_condition_87529 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 318, 9), result_eq_87528)
    # Assigning a type to the variable 'if_condition_87529' (line 318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 318, 9), 'if_condition_87529', if_condition_87529)
    # SSA begins for if statement (line 318)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to detrend(...): (line 319)
    # Processing the call arguments (line 319)
    # Getting the type of 'x' (line 319)
    x_87531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 23), 'x', False)
    # Processing the call keyword arguments (line 319)
    # Getting the type of 'detrend_linear' (line 319)
    detrend_linear_87532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 30), 'detrend_linear', False)
    keyword_87533 = detrend_linear_87532
    # Getting the type of 'axis' (line 319)
    axis_87534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 51), 'axis', False)
    keyword_87535 = axis_87534
    kwargs_87536 = {'key': keyword_87533, 'axis': keyword_87535}
    # Getting the type of 'detrend' (line 319)
    detrend_87530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 15), 'detrend', False)
    # Calling detrend(args, kwargs) (line 319)
    detrend_call_result_87537 = invoke(stypy.reporting.localization.Localization(__file__, 319, 15), detrend_87530, *[x_87531], **kwargs_87536)
    
    # Assigning a type to the variable 'stypy_return_type' (line 319)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 319, 8), 'stypy_return_type', detrend_call_result_87537)
    # SSA branch for the else part of an if statement (line 318)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'key' (line 320)
    key_87538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 9), 'key')
    unicode_87539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 320, 16), 'unicode', u'none')
    # Applying the binary operator '==' (line 320)
    result_eq_87540 = python_operator(stypy.reporting.localization.Localization(__file__, 320, 9), '==', key_87538, unicode_87539)
    
    # Testing the type of an if condition (line 320)
    if_condition_87541 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 320, 9), result_eq_87540)
    # Assigning a type to the variable 'if_condition_87541' (line 320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 320, 9), 'if_condition_87541', if_condition_87541)
    # SSA begins for if statement (line 320)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to detrend(...): (line 321)
    # Processing the call arguments (line 321)
    # Getting the type of 'x' (line 321)
    x_87543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 23), 'x', False)
    # Processing the call keyword arguments (line 321)
    # Getting the type of 'detrend_none' (line 321)
    detrend_none_87544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 30), 'detrend_none', False)
    keyword_87545 = detrend_none_87544
    # Getting the type of 'axis' (line 321)
    axis_87546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 49), 'axis', False)
    keyword_87547 = axis_87546
    kwargs_87548 = {'key': keyword_87545, 'axis': keyword_87547}
    # Getting the type of 'detrend' (line 321)
    detrend_87542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 15), 'detrend', False)
    # Calling detrend(args, kwargs) (line 321)
    detrend_call_result_87549 = invoke(stypy.reporting.localization.Localization(__file__, 321, 15), detrend_87542, *[x_87543], **kwargs_87548)
    
    # Assigning a type to the variable 'stypy_return_type' (line 321)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 8), 'stypy_return_type', detrend_call_result_87549)
    # SSA branch for the else part of an if statement (line 320)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 322)
    # Processing the call arguments (line 322)
    # Getting the type of 'key' (line 322)
    key_87551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 20), 'key', False)
    # Getting the type of 'six' (line 322)
    six_87552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 25), 'six', False)
    # Obtaining the member 'string_types' of a type (line 322)
    string_types_87553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 25), six_87552, 'string_types')
    # Processing the call keyword arguments (line 322)
    kwargs_87554 = {}
    # Getting the type of 'isinstance' (line 322)
    isinstance_87550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 9), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 322)
    isinstance_call_result_87555 = invoke(stypy.reporting.localization.Localization(__file__, 322, 9), isinstance_87550, *[key_87551, string_types_87553], **kwargs_87554)
    
    # Testing the type of an if condition (line 322)
    if_condition_87556 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 322, 9), isinstance_call_result_87555)
    # Assigning a type to the variable 'if_condition_87556' (line 322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 9), 'if_condition_87556', if_condition_87556)
    # SSA begins for if statement (line 322)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 323)
    # Processing the call arguments (line 323)
    unicode_87558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 25), 'unicode', u"Unknown value for key %s, must be one of: 'default', 'constant', 'mean', 'linear', or a function")
    # Getting the type of 'key' (line 325)
    key_87559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 53), 'key', False)
    # Applying the binary operator '%' (line 323)
    result_mod_87560 = python_operator(stypy.reporting.localization.Localization(__file__, 323, 25), '%', unicode_87558, key_87559)
    
    # Processing the call keyword arguments (line 323)
    kwargs_87561 = {}
    # Getting the type of 'ValueError' (line 323)
    ValueError_87557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 323)
    ValueError_call_result_87562 = invoke(stypy.reporting.localization.Localization(__file__, 323, 14), ValueError_87557, *[result_mod_87560], **kwargs_87561)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 323, 8), ValueError_call_result_87562, 'raise parameter', BaseException)
    # SSA join for if statement (line 322)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 320)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 318)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 316)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to callable(...): (line 327)
    # Processing the call arguments (line 327)
    # Getting the type of 'key' (line 327)
    key_87564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 20), 'key', False)
    # Processing the call keyword arguments (line 327)
    kwargs_87565 = {}
    # Getting the type of 'callable' (line 327)
    callable_87563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 11), 'callable', False)
    # Calling callable(args, kwargs) (line 327)
    callable_call_result_87566 = invoke(stypy.reporting.localization.Localization(__file__, 327, 11), callable_87563, *[key_87564], **kwargs_87565)
    
    # Applying the 'not' unary operator (line 327)
    result_not__87567 = python_operator(stypy.reporting.localization.Localization(__file__, 327, 7), 'not', callable_call_result_87566)
    
    # Testing the type of an if condition (line 327)
    if_condition_87568 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 327, 4), result_not__87567)
    # Assigning a type to the variable 'if_condition_87568' (line 327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 4), 'if_condition_87568', if_condition_87568)
    # SSA begins for if statement (line 327)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 328)
    # Processing the call arguments (line 328)
    unicode_87570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 328, 25), 'unicode', u"Unknown value for key %s, must be one of: 'default', 'constant', 'mean', 'linear', or a function")
    # Getting the type of 'key' (line 330)
    key_87571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 53), 'key', False)
    # Applying the binary operator '%' (line 328)
    result_mod_87572 = python_operator(stypy.reporting.localization.Localization(__file__, 328, 25), '%', unicode_87570, key_87571)
    
    # Processing the call keyword arguments (line 328)
    kwargs_87573 = {}
    # Getting the type of 'ValueError' (line 328)
    ValueError_87569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 328)
    ValueError_call_result_87574 = invoke(stypy.reporting.localization.Localization(__file__, 328, 14), ValueError_87569, *[result_mod_87572], **kwargs_87573)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 328, 8), ValueError_call_result_87574, 'raise parameter', BaseException)
    # SSA join for if statement (line 327)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 332):
    
    # Assigning a Call to a Name (line 332):
    
    # Assigning a Call to a Name (line 332):
    
    # Call to asarray(...): (line 332)
    # Processing the call arguments (line 332)
    # Getting the type of 'x' (line 332)
    x_87577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 19), 'x', False)
    # Processing the call keyword arguments (line 332)
    kwargs_87578 = {}
    # Getting the type of 'np' (line 332)
    np_87575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 332)
    asarray_87576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 8), np_87575, 'asarray')
    # Calling asarray(args, kwargs) (line 332)
    asarray_call_result_87579 = invoke(stypy.reporting.localization.Localization(__file__, 332, 8), asarray_87576, *[x_87577], **kwargs_87578)
    
    # Assigning a type to the variable 'x' (line 332)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 4), 'x', asarray_call_result_87579)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'axis' (line 334)
    axis_87580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 7), 'axis')
    # Getting the type of 'None' (line 334)
    None_87581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 19), 'None')
    # Applying the binary operator 'isnot' (line 334)
    result_is_not_87582 = python_operator(stypy.reporting.localization.Localization(__file__, 334, 7), 'isnot', axis_87580, None_87581)
    
    
    # Getting the type of 'axis' (line 334)
    axis_87583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 28), 'axis')
    int_87584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 334, 33), 'int')
    # Applying the binary operator '+' (line 334)
    result_add_87585 = python_operator(stypy.reporting.localization.Localization(__file__, 334, 28), '+', axis_87583, int_87584)
    
    # Getting the type of 'x' (line 334)
    x_87586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 37), 'x')
    # Obtaining the member 'ndim' of a type (line 334)
    ndim_87587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 334, 37), x_87586, 'ndim')
    # Applying the binary operator '>' (line 334)
    result_gt_87588 = python_operator(stypy.reporting.localization.Localization(__file__, 334, 28), '>', result_add_87585, ndim_87587)
    
    # Applying the binary operator 'and' (line 334)
    result_and_keyword_87589 = python_operator(stypy.reporting.localization.Localization(__file__, 334, 7), 'and', result_is_not_87582, result_gt_87588)
    
    # Testing the type of an if condition (line 334)
    if_condition_87590 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 334, 4), result_and_keyword_87589)
    # Assigning a type to the variable 'if_condition_87590' (line 334)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 4), 'if_condition_87590', if_condition_87590)
    # SSA begins for if statement (line 334)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 335)
    # Processing the call arguments (line 335)
    unicode_87592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 335, 25), 'unicode', u'axis(=%s) out of bounds')
    # Getting the type of 'axis' (line 335)
    axis_87593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 53), 'axis', False)
    # Applying the binary operator '%' (line 335)
    result_mod_87594 = python_operator(stypy.reporting.localization.Localization(__file__, 335, 25), '%', unicode_87592, axis_87593)
    
    # Processing the call keyword arguments (line 335)
    kwargs_87595 = {}
    # Getting the type of 'ValueError' (line 335)
    ValueError_87591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 335)
    ValueError_call_result_87596 = invoke(stypy.reporting.localization.Localization(__file__, 335, 14), ValueError_87591, *[result_mod_87594], **kwargs_87595)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 335, 8), ValueError_call_result_87596, 'raise parameter', BaseException)
    # SSA join for if statement (line 334)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Evaluating a boolean operation
    
    # Getting the type of 'axis' (line 337)
    axis_87597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 8), 'axis')
    # Getting the type of 'None' (line 337)
    None_87598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 16), 'None')
    # Applying the binary operator 'is' (line 337)
    result_is__87599 = python_operator(stypy.reporting.localization.Localization(__file__, 337, 8), 'is', axis_87597, None_87598)
    
    
    # Getting the type of 'x' (line 337)
    x_87600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 25), 'x')
    # Obtaining the member 'ndim' of a type (line 337)
    ndim_87601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 337, 25), x_87600, 'ndim')
    int_87602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 337, 35), 'int')
    # Applying the binary operator '==' (line 337)
    result_eq_87603 = python_operator(stypy.reporting.localization.Localization(__file__, 337, 25), '==', ndim_87601, int_87602)
    
    # Applying the binary operator 'and' (line 337)
    result_and_keyword_87604 = python_operator(stypy.reporting.localization.Localization(__file__, 337, 8), 'and', result_is__87599, result_eq_87603)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'axis' (line 337)
    axis_87605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 46), 'axis')
    # Applying the 'not' unary operator (line 337)
    result_not__87606 = python_operator(stypy.reporting.localization.Localization(__file__, 337, 42), 'not', axis_87605)
    
    
    # Getting the type of 'x' (line 337)
    x_87607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 55), 'x')
    # Obtaining the member 'ndim' of a type (line 337)
    ndim_87608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 337, 55), x_87607, 'ndim')
    int_87609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 337, 65), 'int')
    # Applying the binary operator '==' (line 337)
    result_eq_87610 = python_operator(stypy.reporting.localization.Localization(__file__, 337, 55), '==', ndim_87608, int_87609)
    
    # Applying the binary operator 'and' (line 337)
    result_and_keyword_87611 = python_operator(stypy.reporting.localization.Localization(__file__, 337, 42), 'and', result_not__87606, result_eq_87610)
    
    # Applying the binary operator 'or' (line 337)
    result_or_keyword_87612 = python_operator(stypy.reporting.localization.Localization(__file__, 337, 7), 'or', result_and_keyword_87604, result_and_keyword_87611)
    
    # Testing the type of an if condition (line 337)
    if_condition_87613 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 337, 4), result_or_keyword_87612)
    # Assigning a type to the variable 'if_condition_87613' (line 337)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 337, 4), 'if_condition_87613', if_condition_87613)
    # SSA begins for if statement (line 337)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to key(...): (line 338)
    # Processing the call arguments (line 338)
    # Getting the type of 'x' (line 338)
    x_87615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 19), 'x', False)
    # Processing the call keyword arguments (line 338)
    kwargs_87616 = {}
    # Getting the type of 'key' (line 338)
    key_87614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 15), 'key', False)
    # Calling key(args, kwargs) (line 338)
    key_call_result_87617 = invoke(stypy.reporting.localization.Localization(__file__, 338, 15), key_87614, *[x_87615], **kwargs_87616)
    
    # Assigning a type to the variable 'stypy_return_type' (line 338)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 338, 8), 'stypy_return_type', key_call_result_87617)
    # SSA join for if statement (line 337)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 342)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to key(...): (line 343)
    # Processing the call arguments (line 343)
    # Getting the type of 'x' (line 343)
    x_87619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 19), 'x', False)
    # Processing the call keyword arguments (line 343)
    # Getting the type of 'axis' (line 343)
    axis_87620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 27), 'axis', False)
    keyword_87621 = axis_87620
    kwargs_87622 = {'axis': keyword_87621}
    # Getting the type of 'key' (line 343)
    key_87618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 15), 'key', False)
    # Calling key(args, kwargs) (line 343)
    key_call_result_87623 = invoke(stypy.reporting.localization.Localization(__file__, 343, 15), key_87618, *[x_87619], **kwargs_87622)
    
    # Assigning a type to the variable 'stypy_return_type' (line 343)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 8), 'stypy_return_type', key_call_result_87623)
    # SSA branch for the except part of a try statement (line 342)
    # SSA branch for the except 'TypeError' branch of a try statement (line 342)
    module_type_store.open_ssa_branch('except')
    
    # Call to apply_along_axis(...): (line 345)
    # Processing the call arguments (line 345)
    # Getting the type of 'key' (line 345)
    key_87626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 35), 'key', False)
    # Processing the call keyword arguments (line 345)
    # Getting the type of 'axis' (line 345)
    axis_87627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 45), 'axis', False)
    keyword_87628 = axis_87627
    # Getting the type of 'x' (line 345)
    x_87629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 55), 'x', False)
    keyword_87630 = x_87629
    kwargs_87631 = {'arr': keyword_87630, 'axis': keyword_87628}
    # Getting the type of 'np' (line 345)
    np_87624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 15), 'np', False)
    # Obtaining the member 'apply_along_axis' of a type (line 345)
    apply_along_axis_87625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 15), np_87624, 'apply_along_axis')
    # Calling apply_along_axis(args, kwargs) (line 345)
    apply_along_axis_call_result_87632 = invoke(stypy.reporting.localization.Localization(__file__, 345, 15), apply_along_axis_87625, *[key_87626], **kwargs_87631)
    
    # Assigning a type to the variable 'stypy_return_type' (line 345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 345, 8), 'stypy_return_type', apply_along_axis_call_result_87632)
    # SSA join for try-except statement (line 342)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'detrend(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'detrend' in the type store
    # Getting the type of 'stypy_return_type' (line 285)
    stypy_return_type_87633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_87633)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'detrend'
    return stypy_return_type_87633

# Assigning a type to the variable 'detrend' (line 285)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 285, 0), 'detrend', detrend)

@norecursion
def demean(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_87634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 348, 19), 'int')
    defaults = [int_87634]
    # Create a new context for function 'demean'
    module_type_store = module_type_store.open_function_context('demean', 348, 0, False)
    
    # Passed parameters checking function
    demean.stypy_localization = localization
    demean.stypy_type_of_self = None
    demean.stypy_type_store = module_type_store
    demean.stypy_function_name = 'demean'
    demean.stypy_param_names_list = ['x', 'axis']
    demean.stypy_varargs_param_name = None
    demean.stypy_kwargs_param_name = None
    demean.stypy_call_defaults = defaults
    demean.stypy_call_varargs = varargs
    demean.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'demean', ['x', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'demean', localization, ['x', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'demean(...)' code ##################

    unicode_87635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 372, (-1)), 'unicode', u'\n    Return x minus its mean along the specified axis.\n\n    Parameters\n    ----------\n    x : array or sequence\n        Array or sequence containing the data\n        Can have any dimensionality\n\n    axis : integer\n        The axis along which to take the mean.  See numpy.mean for a\n        description of this argument.\n\n    See Also\n    --------\n    :func:`delinear`\n\n    :func:`denone`\n        :func:`delinear` and :func:`denone` are other detrend algorithms.\n\n    :func:`detrend_mean`\n        This function is the same as :func:`detrend_mean` except for the\n        default *axis*.\n    ')
    
    # Call to detrend_mean(...): (line 373)
    # Processing the call arguments (line 373)
    # Getting the type of 'x' (line 373)
    x_87637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 24), 'x', False)
    # Processing the call keyword arguments (line 373)
    # Getting the type of 'axis' (line 373)
    axis_87638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 32), 'axis', False)
    keyword_87639 = axis_87638
    kwargs_87640 = {'axis': keyword_87639}
    # Getting the type of 'detrend_mean' (line 373)
    detrend_mean_87636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 11), 'detrend_mean', False)
    # Calling detrend_mean(args, kwargs) (line 373)
    detrend_mean_call_result_87641 = invoke(stypy.reporting.localization.Localization(__file__, 373, 11), detrend_mean_87636, *[x_87637], **kwargs_87640)
    
    # Assigning a type to the variable 'stypy_return_type' (line 373)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 4), 'stypy_return_type', detrend_mean_call_result_87641)
    
    # ################# End of 'demean(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'demean' in the type store
    # Getting the type of 'stypy_return_type' (line 348)
    stypy_return_type_87642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_87642)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'demean'
    return stypy_return_type_87642

# Assigning a type to the variable 'demean' (line 348)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 348, 0), 'demean', demean)

@norecursion
def detrend_mean(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 376)
    None_87643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 25), 'None')
    defaults = [None_87643]
    # Create a new context for function 'detrend_mean'
    module_type_store = module_type_store.open_function_context('detrend_mean', 376, 0, False)
    
    # Passed parameters checking function
    detrend_mean.stypy_localization = localization
    detrend_mean.stypy_type_of_self = None
    detrend_mean.stypy_type_store = module_type_store
    detrend_mean.stypy_function_name = 'detrend_mean'
    detrend_mean.stypy_param_names_list = ['x', 'axis']
    detrend_mean.stypy_varargs_param_name = None
    detrend_mean.stypy_kwargs_param_name = None
    detrend_mean.stypy_call_defaults = defaults
    detrend_mean.stypy_call_varargs = varargs
    detrend_mean.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'detrend_mean', ['x', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'detrend_mean', localization, ['x', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'detrend_mean(...)' code ##################

    unicode_87644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 404, (-1)), 'unicode', u'\n    Return x minus the mean(x).\n\n    Parameters\n    ----------\n    x : array or sequence\n        Array or sequence containing the data\n        Can have any dimensionality\n\n    axis : integer\n        The axis along which to take the mean.  See numpy.mean for a\n        description of this argument.\n\n    See Also\n    --------\n    :func:`demean`\n        This function is the same as :func:`demean` except for the default\n        *axis*.\n\n    :func:`detrend_linear`\n\n    :func:`detrend_none`\n        :func:`detrend_linear` and :func:`detrend_none` are other detrend\n        algorithms.\n\n    :func:`detrend`\n        :func:`detrend` is a wrapper around all the detrend algorithms.\n    ')
    
    # Assigning a Call to a Name (line 405):
    
    # Assigning a Call to a Name (line 405):
    
    # Assigning a Call to a Name (line 405):
    
    # Call to asarray(...): (line 405)
    # Processing the call arguments (line 405)
    # Getting the type of 'x' (line 405)
    x_87647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 19), 'x', False)
    # Processing the call keyword arguments (line 405)
    kwargs_87648 = {}
    # Getting the type of 'np' (line 405)
    np_87645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 405)
    asarray_87646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 405, 8), np_87645, 'asarray')
    # Calling asarray(args, kwargs) (line 405)
    asarray_call_result_87649 = invoke(stypy.reporting.localization.Localization(__file__, 405, 8), asarray_87646, *[x_87647], **kwargs_87648)
    
    # Assigning a type to the variable 'x' (line 405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 4), 'x', asarray_call_result_87649)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'axis' (line 407)
    axis_87650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 7), 'axis')
    # Getting the type of 'None' (line 407)
    None_87651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 19), 'None')
    # Applying the binary operator 'isnot' (line 407)
    result_is_not_87652 = python_operator(stypy.reporting.localization.Localization(__file__, 407, 7), 'isnot', axis_87650, None_87651)
    
    
    # Getting the type of 'axis' (line 407)
    axis_87653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 28), 'axis')
    int_87654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 407, 33), 'int')
    # Applying the binary operator '+' (line 407)
    result_add_87655 = python_operator(stypy.reporting.localization.Localization(__file__, 407, 28), '+', axis_87653, int_87654)
    
    # Getting the type of 'x' (line 407)
    x_87656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 37), 'x')
    # Obtaining the member 'ndim' of a type (line 407)
    ndim_87657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 407, 37), x_87656, 'ndim')
    # Applying the binary operator '>' (line 407)
    result_gt_87658 = python_operator(stypy.reporting.localization.Localization(__file__, 407, 28), '>', result_add_87655, ndim_87657)
    
    # Applying the binary operator 'and' (line 407)
    result_and_keyword_87659 = python_operator(stypy.reporting.localization.Localization(__file__, 407, 7), 'and', result_is_not_87652, result_gt_87658)
    
    # Testing the type of an if condition (line 407)
    if_condition_87660 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 407, 4), result_and_keyword_87659)
    # Assigning a type to the variable 'if_condition_87660' (line 407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 407, 4), 'if_condition_87660', if_condition_87660)
    # SSA begins for if statement (line 407)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 408)
    # Processing the call arguments (line 408)
    unicode_87662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 408, 25), 'unicode', u'axis(=%s) out of bounds')
    # Getting the type of 'axis' (line 408)
    axis_87663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 53), 'axis', False)
    # Applying the binary operator '%' (line 408)
    result_mod_87664 = python_operator(stypy.reporting.localization.Localization(__file__, 408, 25), '%', unicode_87662, axis_87663)
    
    # Processing the call keyword arguments (line 408)
    kwargs_87665 = {}
    # Getting the type of 'ValueError' (line 408)
    ValueError_87661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 408)
    ValueError_call_result_87666 = invoke(stypy.reporting.localization.Localization(__file__, 408, 14), ValueError_87661, *[result_mod_87664], **kwargs_87665)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 408, 8), ValueError_call_result_87666, 'raise parameter', BaseException)
    # SSA join for if statement (line 407)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'x' (line 411)
    x_87667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 11), 'x')
    # Obtaining the member 'ndim' of a type (line 411)
    ndim_87668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 11), x_87667, 'ndim')
    # Applying the 'not' unary operator (line 411)
    result_not__87669 = python_operator(stypy.reporting.localization.Localization(__file__, 411, 7), 'not', ndim_87668)
    
    # Testing the type of an if condition (line 411)
    if_condition_87670 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 411, 4), result_not__87669)
    # Assigning a type to the variable 'if_condition_87670' (line 411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 4), 'if_condition_87670', if_condition_87670)
    # SSA begins for if statement (line 411)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to array(...): (line 412)
    # Processing the call arguments (line 412)
    float_87673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 412, 24), 'float')
    # Processing the call keyword arguments (line 412)
    # Getting the type of 'x' (line 412)
    x_87674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 34), 'x', False)
    # Obtaining the member 'dtype' of a type (line 412)
    dtype_87675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 34), x_87674, 'dtype')
    keyword_87676 = dtype_87675
    kwargs_87677 = {'dtype': keyword_87676}
    # Getting the type of 'np' (line 412)
    np_87671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 15), 'np', False)
    # Obtaining the member 'array' of a type (line 412)
    array_87672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 15), np_87671, 'array')
    # Calling array(args, kwargs) (line 412)
    array_call_result_87678 = invoke(stypy.reporting.localization.Localization(__file__, 412, 15), array_87672, *[float_87673], **kwargs_87677)
    
    # Assigning a type to the variable 'stypy_return_type' (line 412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 8), 'stypy_return_type', array_call_result_87678)
    # SSA join for if statement (line 411)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'axis' (line 415)
    axis_87679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 7), 'axis')
    int_87680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 415, 15), 'int')
    # Applying the binary operator '==' (line 415)
    result_eq_87681 = python_operator(stypy.reporting.localization.Localization(__file__, 415, 7), '==', axis_87679, int_87680)
    
    
    # Getting the type of 'axis' (line 415)
    axis_87682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 20), 'axis')
    # Getting the type of 'None' (line 415)
    None_87683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 28), 'None')
    # Applying the binary operator 'is' (line 415)
    result_is__87684 = python_operator(stypy.reporting.localization.Localization(__file__, 415, 20), 'is', axis_87682, None_87683)
    
    # Applying the binary operator 'or' (line 415)
    result_or_keyword_87685 = python_operator(stypy.reporting.localization.Localization(__file__, 415, 7), 'or', result_eq_87681, result_is__87684)
    
    # Getting the type of 'x' (line 415)
    x_87686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 36), 'x')
    # Obtaining the member 'ndim' of a type (line 415)
    ndim_87687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 415, 36), x_87686, 'ndim')
    int_87688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 415, 46), 'int')
    # Applying the binary operator '<=' (line 415)
    result_le_87689 = python_operator(stypy.reporting.localization.Localization(__file__, 415, 36), '<=', ndim_87687, int_87688)
    
    # Applying the binary operator 'or' (line 415)
    result_or_keyword_87690 = python_operator(stypy.reporting.localization.Localization(__file__, 415, 7), 'or', result_or_keyword_87685, result_le_87689)
    
    # Testing the type of an if condition (line 415)
    if_condition_87691 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 415, 4), result_or_keyword_87690)
    # Assigning a type to the variable 'if_condition_87691' (line 415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 415, 4), 'if_condition_87691', if_condition_87691)
    # SSA begins for if statement (line 415)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'x' (line 416)
    x_87692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 15), 'x')
    
    # Call to mean(...): (line 416)
    # Processing the call arguments (line 416)
    # Getting the type of 'axis' (line 416)
    axis_87695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 26), 'axis', False)
    # Processing the call keyword arguments (line 416)
    kwargs_87696 = {}
    # Getting the type of 'x' (line 416)
    x_87693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 19), 'x', False)
    # Obtaining the member 'mean' of a type (line 416)
    mean_87694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 416, 19), x_87693, 'mean')
    # Calling mean(args, kwargs) (line 416)
    mean_call_result_87697 = invoke(stypy.reporting.localization.Localization(__file__, 416, 19), mean_87694, *[axis_87695], **kwargs_87696)
    
    # Applying the binary operator '-' (line 416)
    result_sub_87698 = python_operator(stypy.reporting.localization.Localization(__file__, 416, 15), '-', x_87692, mean_call_result_87697)
    
    # Assigning a type to the variable 'stypy_return_type' (line 416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 416, 8), 'stypy_return_type', result_sub_87698)
    # SSA join for if statement (line 415)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 418):
    
    # Assigning a BinOp to a Name (line 418):
    
    # Assigning a BinOp to a Name (line 418):
    
    # Obtaining an instance of the builtin type 'list' (line 418)
    list_87699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 10), 'list')
    # Adding type elements to the builtin type 'list' instance (line 418)
    # Adding element type (line 418)
    
    # Call to slice(...): (line 418)
    # Processing the call arguments (line 418)
    # Getting the type of 'None' (line 418)
    None_87701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 17), 'None', False)
    # Processing the call keyword arguments (line 418)
    kwargs_87702 = {}
    # Getting the type of 'slice' (line 418)
    slice_87700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 11), 'slice', False)
    # Calling slice(args, kwargs) (line 418)
    slice_call_result_87703 = invoke(stypy.reporting.localization.Localization(__file__, 418, 11), slice_87700, *[None_87701], **kwargs_87702)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 418, 10), list_87699, slice_call_result_87703)
    
    # Getting the type of 'x' (line 418)
    x_87704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 26), 'x')
    # Obtaining the member 'ndim' of a type (line 418)
    ndim_87705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 26), x_87704, 'ndim')
    # Applying the binary operator '*' (line 418)
    result_mul_87706 = python_operator(stypy.reporting.localization.Localization(__file__, 418, 10), '*', list_87699, ndim_87705)
    
    # Assigning a type to the variable 'ind' (line 418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 4), 'ind', result_mul_87706)
    
    # Assigning a Attribute to a Subscript (line 419):
    
    # Assigning a Attribute to a Subscript (line 419):
    
    # Assigning a Attribute to a Subscript (line 419):
    # Getting the type of 'np' (line 419)
    np_87707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 16), 'np')
    # Obtaining the member 'newaxis' of a type (line 419)
    newaxis_87708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 419, 16), np_87707, 'newaxis')
    # Getting the type of 'ind' (line 419)
    ind_87709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 4), 'ind')
    # Getting the type of 'axis' (line 419)
    axis_87710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 8), 'axis')
    # Storing an element on a container (line 419)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 419, 4), ind_87709, (axis_87710, newaxis_87708))
    # Getting the type of 'x' (line 420)
    x_87711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 11), 'x')
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind' (line 420)
    ind_87712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 28), 'ind')
    
    # Call to mean(...): (line 420)
    # Processing the call arguments (line 420)
    # Getting the type of 'axis' (line 420)
    axis_87715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 22), 'axis', False)
    # Processing the call keyword arguments (line 420)
    kwargs_87716 = {}
    # Getting the type of 'x' (line 420)
    x_87713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 15), 'x', False)
    # Obtaining the member 'mean' of a type (line 420)
    mean_87714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 15), x_87713, 'mean')
    # Calling mean(args, kwargs) (line 420)
    mean_call_result_87717 = invoke(stypy.reporting.localization.Localization(__file__, 420, 15), mean_87714, *[axis_87715], **kwargs_87716)
    
    # Obtaining the member '__getitem__' of a type (line 420)
    getitem___87718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 15), mean_call_result_87717, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 420)
    subscript_call_result_87719 = invoke(stypy.reporting.localization.Localization(__file__, 420, 15), getitem___87718, ind_87712)
    
    # Applying the binary operator '-' (line 420)
    result_sub_87720 = python_operator(stypy.reporting.localization.Localization(__file__, 420, 11), '-', x_87711, subscript_call_result_87719)
    
    # Assigning a type to the variable 'stypy_return_type' (line 420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 4), 'stypy_return_type', result_sub_87720)
    
    # ################# End of 'detrend_mean(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'detrend_mean' in the type store
    # Getting the type of 'stypy_return_type' (line 376)
    stypy_return_type_87721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_87721)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'detrend_mean'
    return stypy_return_type_87721

# Assigning a type to the variable 'detrend_mean' (line 376)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 0), 'detrend_mean', detrend_mean)

@norecursion
def detrend_none(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 423)
    None_87722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 25), 'None')
    defaults = [None_87722]
    # Create a new context for function 'detrend_none'
    module_type_store = module_type_store.open_function_context('detrend_none', 423, 0, False)
    
    # Passed parameters checking function
    detrend_none.stypy_localization = localization
    detrend_none.stypy_type_of_self = None
    detrend_none.stypy_type_store = module_type_store
    detrend_none.stypy_function_name = 'detrend_none'
    detrend_none.stypy_param_names_list = ['x', 'axis']
    detrend_none.stypy_varargs_param_name = None
    detrend_none.stypy_kwargs_param_name = None
    detrend_none.stypy_call_defaults = defaults
    detrend_none.stypy_call_varargs = varargs
    detrend_none.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'detrend_none', ['x', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'detrend_none', localization, ['x', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'detrend_none(...)' code ##################

    unicode_87723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 450, (-1)), 'unicode', u'\n    Return x: no detrending.\n\n    Parameters\n    ----------\n    x : any object\n        An object containing the data\n\n    axis : integer\n        This parameter is ignored.\n        It is included for compatibility with detrend_mean\n\n    See Also\n    --------\n    :func:`denone`\n        This function is the same as :func:`denone` except for the default\n        *axis*, which has no effect.\n\n    :func:`detrend_mean`\n\n    :func:`detrend_linear`\n        :func:`detrend_mean` and :func:`detrend_linear` are other detrend\n        algorithms.\n\n    :func:`detrend`\n        :func:`detrend` is a wrapper around all the detrend algorithms.\n    ')
    # Getting the type of 'x' (line 451)
    x_87724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 11), 'x')
    # Assigning a type to the variable 'stypy_return_type' (line 451)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 451, 4), 'stypy_return_type', x_87724)
    
    # ################# End of 'detrend_none(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'detrend_none' in the type store
    # Getting the type of 'stypy_return_type' (line 423)
    stypy_return_type_87725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_87725)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'detrend_none'
    return stypy_return_type_87725

# Assigning a type to the variable 'detrend_none' (line 423)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 423, 0), 'detrend_none', detrend_none)

@norecursion
def detrend_linear(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'detrend_linear'
    module_type_store = module_type_store.open_function_context('detrend_linear', 454, 0, False)
    
    # Passed parameters checking function
    detrend_linear.stypy_localization = localization
    detrend_linear.stypy_type_of_self = None
    detrend_linear.stypy_type_store = module_type_store
    detrend_linear.stypy_function_name = 'detrend_linear'
    detrend_linear.stypy_param_names_list = ['y']
    detrend_linear.stypy_varargs_param_name = None
    detrend_linear.stypy_kwargs_param_name = None
    detrend_linear.stypy_call_defaults = defaults
    detrend_linear.stypy_call_varargs = varargs
    detrend_linear.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'detrend_linear', ['y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'detrend_linear', localization, ['y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'detrend_linear(...)' code ##################

    unicode_87726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, (-1)), 'unicode', u"\n    Return x minus best fit line; 'linear' detrending.\n\n    Parameters\n    ----------\n    y : 0-D or 1-D array or sequence\n        Array or sequence containing the data\n\n    axis : integer\n        The axis along which to take the mean.  See numpy.mean for a\n        description of this argument.\n\n    See Also\n    --------\n    :func:`delinear`\n        This function is the same as :func:`delinear` except for the default\n        *axis*.\n\n    :func:`detrend_mean`\n\n    :func:`detrend_none`\n        :func:`detrend_mean` and :func:`detrend_none` are other detrend\n        algorithms.\n\n    :func:`detrend`\n        :func:`detrend` is a wrapper around all the detrend algorithms.\n    ")
    
    # Assigning a Call to a Name (line 483):
    
    # Assigning a Call to a Name (line 483):
    
    # Assigning a Call to a Name (line 483):
    
    # Call to asarray(...): (line 483)
    # Processing the call arguments (line 483)
    # Getting the type of 'y' (line 483)
    y_87729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 19), 'y', False)
    # Processing the call keyword arguments (line 483)
    kwargs_87730 = {}
    # Getting the type of 'np' (line 483)
    np_87727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 483)
    asarray_87728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 8), np_87727, 'asarray')
    # Calling asarray(args, kwargs) (line 483)
    asarray_call_result_87731 = invoke(stypy.reporting.localization.Localization(__file__, 483, 8), asarray_87728, *[y_87729], **kwargs_87730)
    
    # Assigning a type to the variable 'y' (line 483)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 483, 4), 'y', asarray_call_result_87731)
    
    
    # Getting the type of 'y' (line 485)
    y_87732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 7), 'y')
    # Obtaining the member 'ndim' of a type (line 485)
    ndim_87733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 7), y_87732, 'ndim')
    int_87734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 16), 'int')
    # Applying the binary operator '>' (line 485)
    result_gt_87735 = python_operator(stypy.reporting.localization.Localization(__file__, 485, 7), '>', ndim_87733, int_87734)
    
    # Testing the type of an if condition (line 485)
    if_condition_87736 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 485, 4), result_gt_87735)
    # Assigning a type to the variable 'if_condition_87736' (line 485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 485, 4), 'if_condition_87736', if_condition_87736)
    # SSA begins for if statement (line 485)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 486)
    # Processing the call arguments (line 486)
    unicode_87738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 486, 25), 'unicode', u'y cannot have ndim > 1')
    # Processing the call keyword arguments (line 486)
    kwargs_87739 = {}
    # Getting the type of 'ValueError' (line 486)
    ValueError_87737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 486)
    ValueError_call_result_87740 = invoke(stypy.reporting.localization.Localization(__file__, 486, 14), ValueError_87737, *[unicode_87738], **kwargs_87739)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 486, 8), ValueError_call_result_87740, 'raise parameter', BaseException)
    # SSA join for if statement (line 485)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'y' (line 489)
    y_87741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 11), 'y')
    # Obtaining the member 'ndim' of a type (line 489)
    ndim_87742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 11), y_87741, 'ndim')
    # Applying the 'not' unary operator (line 489)
    result_not__87743 = python_operator(stypy.reporting.localization.Localization(__file__, 489, 7), 'not', ndim_87742)
    
    # Testing the type of an if condition (line 489)
    if_condition_87744 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 489, 4), result_not__87743)
    # Assigning a type to the variable 'if_condition_87744' (line 489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 4), 'if_condition_87744', if_condition_87744)
    # SSA begins for if statement (line 489)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to array(...): (line 490)
    # Processing the call arguments (line 490)
    float_87747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, 24), 'float')
    # Processing the call keyword arguments (line 490)
    # Getting the type of 'y' (line 490)
    y_87748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 34), 'y', False)
    # Obtaining the member 'dtype' of a type (line 490)
    dtype_87749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 34), y_87748, 'dtype')
    keyword_87750 = dtype_87749
    kwargs_87751 = {'dtype': keyword_87750}
    # Getting the type of 'np' (line 490)
    np_87745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 15), 'np', False)
    # Obtaining the member 'array' of a type (line 490)
    array_87746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 15), np_87745, 'array')
    # Calling array(args, kwargs) (line 490)
    array_call_result_87752 = invoke(stypy.reporting.localization.Localization(__file__, 490, 15), array_87746, *[float_87747], **kwargs_87751)
    
    # Assigning a type to the variable 'stypy_return_type' (line 490)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 8), 'stypy_return_type', array_call_result_87752)
    # SSA join for if statement (line 489)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 492):
    
    # Assigning a Call to a Name (line 492):
    
    # Assigning a Call to a Name (line 492):
    
    # Call to arange(...): (line 492)
    # Processing the call arguments (line 492)
    # Getting the type of 'y' (line 492)
    y_87755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 18), 'y', False)
    # Obtaining the member 'size' of a type (line 492)
    size_87756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 18), y_87755, 'size')
    # Processing the call keyword arguments (line 492)
    # Getting the type of 'float' (line 492)
    float_87757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 32), 'float', False)
    keyword_87758 = float_87757
    kwargs_87759 = {'dtype': keyword_87758}
    # Getting the type of 'np' (line 492)
    np_87753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 8), 'np', False)
    # Obtaining the member 'arange' of a type (line 492)
    arange_87754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 8), np_87753, 'arange')
    # Calling arange(args, kwargs) (line 492)
    arange_call_result_87760 = invoke(stypy.reporting.localization.Localization(__file__, 492, 8), arange_87754, *[size_87756], **kwargs_87759)
    
    # Assigning a type to the variable 'x' (line 492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 4), 'x', arange_call_result_87760)
    
    # Assigning a Call to a Name (line 494):
    
    # Assigning a Call to a Name (line 494):
    
    # Assigning a Call to a Name (line 494):
    
    # Call to cov(...): (line 494)
    # Processing the call arguments (line 494)
    # Getting the type of 'x' (line 494)
    x_87763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 15), 'x', False)
    # Getting the type of 'y' (line 494)
    y_87764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 18), 'y', False)
    # Processing the call keyword arguments (line 494)
    int_87765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 494, 26), 'int')
    keyword_87766 = int_87765
    kwargs_87767 = {'bias': keyword_87766}
    # Getting the type of 'np' (line 494)
    np_87761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 8), 'np', False)
    # Obtaining the member 'cov' of a type (line 494)
    cov_87762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 8), np_87761, 'cov')
    # Calling cov(args, kwargs) (line 494)
    cov_call_result_87768 = invoke(stypy.reporting.localization.Localization(__file__, 494, 8), cov_87762, *[x_87763, y_87764], **kwargs_87767)
    
    # Assigning a type to the variable 'C' (line 494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 494, 4), 'C', cov_call_result_87768)
    
    # Assigning a BinOp to a Name (line 495):
    
    # Assigning a BinOp to a Name (line 495):
    
    # Assigning a BinOp to a Name (line 495):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 495)
    tuple_87769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, 10), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 495)
    # Adding element type (line 495)
    int_87770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, 10), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 495, 10), tuple_87769, int_87770)
    # Adding element type (line 495)
    int_87771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, 13), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 495, 10), tuple_87769, int_87771)
    
    # Getting the type of 'C' (line 495)
    C_87772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 8), 'C')
    # Obtaining the member '__getitem__' of a type (line 495)
    getitem___87773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 8), C_87772, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 495)
    subscript_call_result_87774 = invoke(stypy.reporting.localization.Localization(__file__, 495, 8), getitem___87773, tuple_87769)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 495)
    tuple_87775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 495)
    # Adding element type (line 495)
    int_87776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, 18), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 495, 18), tuple_87775, int_87776)
    # Adding element type (line 495)
    int_87777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 495, 18), tuple_87775, int_87777)
    
    # Getting the type of 'C' (line 495)
    C_87778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 16), 'C')
    # Obtaining the member '__getitem__' of a type (line 495)
    getitem___87779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 16), C_87778, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 495)
    subscript_call_result_87780 = invoke(stypy.reporting.localization.Localization(__file__, 495, 16), getitem___87779, tuple_87775)
    
    # Applying the binary operator 'div' (line 495)
    result_div_87781 = python_operator(stypy.reporting.localization.Localization(__file__, 495, 8), 'div', subscript_call_result_87774, subscript_call_result_87780)
    
    # Assigning a type to the variable 'b' (line 495)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 4), 'b', result_div_87781)
    
    # Assigning a BinOp to a Name (line 497):
    
    # Assigning a BinOp to a Name (line 497):
    
    # Assigning a BinOp to a Name (line 497):
    
    # Call to mean(...): (line 497)
    # Processing the call keyword arguments (line 497)
    kwargs_87784 = {}
    # Getting the type of 'y' (line 497)
    y_87782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 8), 'y', False)
    # Obtaining the member 'mean' of a type (line 497)
    mean_87783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 8), y_87782, 'mean')
    # Calling mean(args, kwargs) (line 497)
    mean_call_result_87785 = invoke(stypy.reporting.localization.Localization(__file__, 497, 8), mean_87783, *[], **kwargs_87784)
    
    # Getting the type of 'b' (line 497)
    b_87786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 19), 'b')
    
    # Call to mean(...): (line 497)
    # Processing the call keyword arguments (line 497)
    kwargs_87789 = {}
    # Getting the type of 'x' (line 497)
    x_87787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 21), 'x', False)
    # Obtaining the member 'mean' of a type (line 497)
    mean_87788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 21), x_87787, 'mean')
    # Calling mean(args, kwargs) (line 497)
    mean_call_result_87790 = invoke(stypy.reporting.localization.Localization(__file__, 497, 21), mean_87788, *[], **kwargs_87789)
    
    # Applying the binary operator '*' (line 497)
    result_mul_87791 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 19), '*', b_87786, mean_call_result_87790)
    
    # Applying the binary operator '-' (line 497)
    result_sub_87792 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 8), '-', mean_call_result_87785, result_mul_87791)
    
    # Assigning a type to the variable 'a' (line 497)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 4), 'a', result_sub_87792)
    # Getting the type of 'y' (line 498)
    y_87793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 11), 'y')
    # Getting the type of 'b' (line 498)
    b_87794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 16), 'b')
    # Getting the type of 'x' (line 498)
    x_87795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 18), 'x')
    # Applying the binary operator '*' (line 498)
    result_mul_87796 = python_operator(stypy.reporting.localization.Localization(__file__, 498, 16), '*', b_87794, x_87795)
    
    # Getting the type of 'a' (line 498)
    a_87797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 22), 'a')
    # Applying the binary operator '+' (line 498)
    result_add_87798 = python_operator(stypy.reporting.localization.Localization(__file__, 498, 16), '+', result_mul_87796, a_87797)
    
    # Applying the binary operator '-' (line 498)
    result_sub_87799 = python_operator(stypy.reporting.localization.Localization(__file__, 498, 11), '-', y_87793, result_add_87798)
    
    # Assigning a type to the variable 'stypy_return_type' (line 498)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 4), 'stypy_return_type', result_sub_87799)
    
    # ################# End of 'detrend_linear(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'detrend_linear' in the type store
    # Getting the type of 'stypy_return_type' (line 454)
    stypy_return_type_87800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_87800)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'detrend_linear'
    return stypy_return_type_87800

# Assigning a type to the variable 'detrend_linear' (line 454)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 454, 0), 'detrend_linear', detrend_linear)

@norecursion
def stride_windows(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 501)
    None_87801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 34), 'None')
    int_87802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 501, 45), 'int')
    defaults = [None_87801, int_87802]
    # Create a new context for function 'stride_windows'
    module_type_store = module_type_store.open_function_context('stride_windows', 501, 0, False)
    
    # Passed parameters checking function
    stride_windows.stypy_localization = localization
    stride_windows.stypy_type_of_self = None
    stride_windows.stypy_type_store = module_type_store
    stride_windows.stypy_function_name = 'stride_windows'
    stride_windows.stypy_param_names_list = ['x', 'n', 'noverlap', 'axis']
    stride_windows.stypy_varargs_param_name = None
    stride_windows.stypy_kwargs_param_name = None
    stride_windows.stypy_call_defaults = defaults
    stride_windows.stypy_call_varargs = varargs
    stride_windows.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'stride_windows', ['x', 'n', 'noverlap', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'stride_windows', localization, ['x', 'n', 'noverlap', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'stride_windows(...)' code ##################

    unicode_87803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, (-1)), 'unicode', u'\n    Get all windows of x with length n as a single array,\n    using strides to avoid data duplication.\n\n    .. warning::\n\n        It is not safe to write to the output array.  Multiple\n        elements may point to the same piece of memory,\n        so modifying one value may change others.\n\n    Parameters\n    ----------\n    x : 1D array or sequence\n        Array or sequence containing the data.\n\n    n : integer\n        The number of data points in each window.\n\n    noverlap : integer\n        The overlap between adjacent windows.\n        Default is 0 (no overlap)\n\n    axis : integer\n        The axis along which the windows will run.\n\n    References\n    ----------\n    `stackoverflow: Rolling window for 1D arrays in Numpy?\n    <http://stackoverflow.com/a/6811241>`_\n    `stackoverflow: Using strides for an efficient moving average filter\n    <http://stackoverflow.com/a/4947453>`_\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 534)
    # Getting the type of 'noverlap' (line 534)
    noverlap_87804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 7), 'noverlap')
    # Getting the type of 'None' (line 534)
    None_87805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 19), 'None')
    
    (may_be_87806, more_types_in_union_87807) = may_be_none(noverlap_87804, None_87805)

    if may_be_87806:

        if more_types_in_union_87807:
            # Runtime conditional SSA (line 534)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 535):
        
        # Assigning a Num to a Name (line 535):
        
        # Assigning a Num to a Name (line 535):
        int_87808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 19), 'int')
        # Assigning a type to the variable 'noverlap' (line 535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 535, 8), 'noverlap', int_87808)

        if more_types_in_union_87807:
            # SSA join for if statement (line 534)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'noverlap' (line 537)
    noverlap_87809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 7), 'noverlap')
    # Getting the type of 'n' (line 537)
    n_87810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 19), 'n')
    # Applying the binary operator '>=' (line 537)
    result_ge_87811 = python_operator(stypy.reporting.localization.Localization(__file__, 537, 7), '>=', noverlap_87809, n_87810)
    
    # Testing the type of an if condition (line 537)
    if_condition_87812 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 537, 4), result_ge_87811)
    # Assigning a type to the variable 'if_condition_87812' (line 537)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 537, 4), 'if_condition_87812', if_condition_87812)
    # SSA begins for if statement (line 537)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 538)
    # Processing the call arguments (line 538)
    unicode_87814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 25), 'unicode', u'noverlap must be less than n')
    # Processing the call keyword arguments (line 538)
    kwargs_87815 = {}
    # Getting the type of 'ValueError' (line 538)
    ValueError_87813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 538)
    ValueError_call_result_87816 = invoke(stypy.reporting.localization.Localization(__file__, 538, 14), ValueError_87813, *[unicode_87814], **kwargs_87815)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 538, 8), ValueError_call_result_87816, 'raise parameter', BaseException)
    # SSA join for if statement (line 537)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 539)
    n_87817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 7), 'n')
    int_87818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 539, 11), 'int')
    # Applying the binary operator '<' (line 539)
    result_lt_87819 = python_operator(stypy.reporting.localization.Localization(__file__, 539, 7), '<', n_87817, int_87818)
    
    # Testing the type of an if condition (line 539)
    if_condition_87820 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 539, 4), result_lt_87819)
    # Assigning a type to the variable 'if_condition_87820' (line 539)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 539, 4), 'if_condition_87820', if_condition_87820)
    # SSA begins for if statement (line 539)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 540)
    # Processing the call arguments (line 540)
    unicode_87822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, 25), 'unicode', u'n cannot be less than 1')
    # Processing the call keyword arguments (line 540)
    kwargs_87823 = {}
    # Getting the type of 'ValueError' (line 540)
    ValueError_87821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 540)
    ValueError_call_result_87824 = invoke(stypy.reporting.localization.Localization(__file__, 540, 14), ValueError_87821, *[unicode_87822], **kwargs_87823)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 540, 8), ValueError_call_result_87824, 'raise parameter', BaseException)
    # SSA join for if statement (line 539)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 542):
    
    # Assigning a Call to a Name (line 542):
    
    # Assigning a Call to a Name (line 542):
    
    # Call to asarray(...): (line 542)
    # Processing the call arguments (line 542)
    # Getting the type of 'x' (line 542)
    x_87827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 19), 'x', False)
    # Processing the call keyword arguments (line 542)
    kwargs_87828 = {}
    # Getting the type of 'np' (line 542)
    np_87825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 542)
    asarray_87826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 8), np_87825, 'asarray')
    # Calling asarray(args, kwargs) (line 542)
    asarray_call_result_87829 = invoke(stypy.reporting.localization.Localization(__file__, 542, 8), asarray_87826, *[x_87827], **kwargs_87828)
    
    # Assigning a type to the variable 'x' (line 542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 4), 'x', asarray_call_result_87829)
    
    
    # Getting the type of 'x' (line 544)
    x_87830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 7), 'x')
    # Obtaining the member 'ndim' of a type (line 544)
    ndim_87831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 7), x_87830, 'ndim')
    int_87832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 17), 'int')
    # Applying the binary operator '!=' (line 544)
    result_ne_87833 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 7), '!=', ndim_87831, int_87832)
    
    # Testing the type of an if condition (line 544)
    if_condition_87834 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 544, 4), result_ne_87833)
    # Assigning a type to the variable 'if_condition_87834' (line 544)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 4), 'if_condition_87834', if_condition_87834)
    # SSA begins for if statement (line 544)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 545)
    # Processing the call arguments (line 545)
    unicode_87836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 545, 25), 'unicode', u'only 1-dimensional arrays can be used')
    # Processing the call keyword arguments (line 545)
    kwargs_87837 = {}
    # Getting the type of 'ValueError' (line 545)
    ValueError_87835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 545)
    ValueError_call_result_87838 = invoke(stypy.reporting.localization.Localization(__file__, 545, 14), ValueError_87835, *[unicode_87836], **kwargs_87837)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 545, 8), ValueError_call_result_87838, 'raise parameter', BaseException)
    # SSA join for if statement (line 544)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'n' (line 546)
    n_87839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 7), 'n')
    int_87840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, 12), 'int')
    # Applying the binary operator '==' (line 546)
    result_eq_87841 = python_operator(stypy.reporting.localization.Localization(__file__, 546, 7), '==', n_87839, int_87840)
    
    
    # Getting the type of 'noverlap' (line 546)
    noverlap_87842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 18), 'noverlap')
    int_87843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, 30), 'int')
    # Applying the binary operator '==' (line 546)
    result_eq_87844 = python_operator(stypy.reporting.localization.Localization(__file__, 546, 18), '==', noverlap_87842, int_87843)
    
    # Applying the binary operator 'and' (line 546)
    result_and_keyword_87845 = python_operator(stypy.reporting.localization.Localization(__file__, 546, 7), 'and', result_eq_87841, result_eq_87844)
    
    # Testing the type of an if condition (line 546)
    if_condition_87846 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 546, 4), result_and_keyword_87845)
    # Assigning a type to the variable 'if_condition_87846' (line 546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 4), 'if_condition_87846', if_condition_87846)
    # SSA begins for if statement (line 546)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'axis' (line 547)
    axis_87847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 11), 'axis')
    int_87848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 19), 'int')
    # Applying the binary operator '==' (line 547)
    result_eq_87849 = python_operator(stypy.reporting.localization.Localization(__file__, 547, 11), '==', axis_87847, int_87848)
    
    # Testing the type of an if condition (line 547)
    if_condition_87850 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 547, 8), result_eq_87849)
    # Assigning a type to the variable 'if_condition_87850' (line 547)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 8), 'if_condition_87850', if_condition_87850)
    # SSA begins for if statement (line 547)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    # Getting the type of 'np' (line 548)
    np_87851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 21), 'np')
    # Obtaining the member 'newaxis' of a type (line 548)
    newaxis_87852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 21), np_87851, 'newaxis')
    # Getting the type of 'x' (line 548)
    x_87853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 19), 'x')
    # Obtaining the member '__getitem__' of a type (line 548)
    getitem___87854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 19), x_87853, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 548)
    subscript_call_result_87855 = invoke(stypy.reporting.localization.Localization(__file__, 548, 19), getitem___87854, newaxis_87852)
    
    # Assigning a type to the variable 'stypy_return_type' (line 548)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 12), 'stypy_return_type', subscript_call_result_87855)
    # SSA branch for the else part of an if statement (line 547)
    module_type_store.open_ssa_branch('else')
    
    # Call to transpose(...): (line 550)
    # Processing the call keyword arguments (line 550)
    kwargs_87862 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'np' (line 550)
    np_87856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 21), 'np', False)
    # Obtaining the member 'newaxis' of a type (line 550)
    newaxis_87857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 550, 21), np_87856, 'newaxis')
    # Getting the type of 'x' (line 550)
    x_87858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 19), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 550)
    getitem___87859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 550, 19), x_87858, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 550)
    subscript_call_result_87860 = invoke(stypy.reporting.localization.Localization(__file__, 550, 19), getitem___87859, newaxis_87857)
    
    # Obtaining the member 'transpose' of a type (line 550)
    transpose_87861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 550, 19), subscript_call_result_87860, 'transpose')
    # Calling transpose(args, kwargs) (line 550)
    transpose_call_result_87863 = invoke(stypy.reporting.localization.Localization(__file__, 550, 19), transpose_87861, *[], **kwargs_87862)
    
    # Assigning a type to the variable 'stypy_return_type' (line 550)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 12), 'stypy_return_type', transpose_call_result_87863)
    # SSA join for if statement (line 547)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 546)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 551)
    n_87864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 7), 'n')
    # Getting the type of 'x' (line 551)
    x_87865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 11), 'x')
    # Obtaining the member 'size' of a type (line 551)
    size_87866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 11), x_87865, 'size')
    # Applying the binary operator '>' (line 551)
    result_gt_87867 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 7), '>', n_87864, size_87866)
    
    # Testing the type of an if condition (line 551)
    if_condition_87868 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 551, 4), result_gt_87867)
    # Assigning a type to the variable 'if_condition_87868' (line 551)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 4), 'if_condition_87868', if_condition_87868)
    # SSA begins for if statement (line 551)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 552)
    # Processing the call arguments (line 552)
    unicode_87870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 552, 25), 'unicode', u'n cannot be greater than the length of x')
    # Processing the call keyword arguments (line 552)
    kwargs_87871 = {}
    # Getting the type of 'ValueError' (line 552)
    ValueError_87869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 552)
    ValueError_call_result_87872 = invoke(stypy.reporting.localization.Localization(__file__, 552, 14), ValueError_87869, *[unicode_87870], **kwargs_87871)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 552, 8), ValueError_call_result_87872, 'raise parameter', BaseException)
    # SSA join for if statement (line 551)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 556):
    
    # Assigning a Call to a Name (line 556):
    
    # Assigning a Call to a Name (line 556):
    
    # Call to int(...): (line 556)
    # Processing the call arguments (line 556)
    # Getting the type of 'noverlap' (line 556)
    noverlap_87874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 19), 'noverlap', False)
    # Processing the call keyword arguments (line 556)
    kwargs_87875 = {}
    # Getting the type of 'int' (line 556)
    int_87873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 15), 'int', False)
    # Calling int(args, kwargs) (line 556)
    int_call_result_87876 = invoke(stypy.reporting.localization.Localization(__file__, 556, 15), int_87873, *[noverlap_87874], **kwargs_87875)
    
    # Assigning a type to the variable 'noverlap' (line 556)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 4), 'noverlap', int_call_result_87876)
    
    # Assigning a Call to a Name (line 557):
    
    # Assigning a Call to a Name (line 557):
    
    # Assigning a Call to a Name (line 557):
    
    # Call to int(...): (line 557)
    # Processing the call arguments (line 557)
    # Getting the type of 'n' (line 557)
    n_87878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 12), 'n', False)
    # Processing the call keyword arguments (line 557)
    kwargs_87879 = {}
    # Getting the type of 'int' (line 557)
    int_87877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 8), 'int', False)
    # Calling int(args, kwargs) (line 557)
    int_call_result_87880 = invoke(stypy.reporting.localization.Localization(__file__, 557, 8), int_87877, *[n_87878], **kwargs_87879)
    
    # Assigning a type to the variable 'n' (line 557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 4), 'n', int_call_result_87880)
    
    # Assigning a BinOp to a Name (line 559):
    
    # Assigning a BinOp to a Name (line 559):
    
    # Assigning a BinOp to a Name (line 559):
    # Getting the type of 'n' (line 559)
    n_87881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 11), 'n')
    # Getting the type of 'noverlap' (line 559)
    noverlap_87882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 15), 'noverlap')
    # Applying the binary operator '-' (line 559)
    result_sub_87883 = python_operator(stypy.reporting.localization.Localization(__file__, 559, 11), '-', n_87881, noverlap_87882)
    
    # Assigning a type to the variable 'step' (line 559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 559, 4), 'step', result_sub_87883)
    
    
    # Getting the type of 'axis' (line 560)
    axis_87884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 7), 'axis')
    int_87885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 15), 'int')
    # Applying the binary operator '==' (line 560)
    result_eq_87886 = python_operator(stypy.reporting.localization.Localization(__file__, 560, 7), '==', axis_87884, int_87885)
    
    # Testing the type of an if condition (line 560)
    if_condition_87887 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 560, 4), result_eq_87886)
    # Assigning a type to the variable 'if_condition_87887' (line 560)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 4), 'if_condition_87887', if_condition_87887)
    # SSA begins for if statement (line 560)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 561):
    
    # Assigning a Tuple to a Name (line 561):
    
    # Assigning a Tuple to a Name (line 561):
    
    # Obtaining an instance of the builtin type 'tuple' (line 561)
    tuple_87888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 561)
    # Adding element type (line 561)
    # Getting the type of 'n' (line 561)
    n_87889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 17), 'n')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 561, 17), tuple_87888, n_87889)
    # Adding element type (line 561)
    
    # Obtaining the type of the subscript
    int_87890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 29), 'int')
    # Getting the type of 'x' (line 561)
    x_87891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 21), 'x')
    # Obtaining the member 'shape' of a type (line 561)
    shape_87892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 21), x_87891, 'shape')
    # Obtaining the member '__getitem__' of a type (line 561)
    getitem___87893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 21), shape_87892, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 561)
    subscript_call_result_87894 = invoke(stypy.reporting.localization.Localization(__file__, 561, 21), getitem___87893, int_87890)
    
    # Getting the type of 'noverlap' (line 561)
    noverlap_87895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 33), 'noverlap')
    # Applying the binary operator '-' (line 561)
    result_sub_87896 = python_operator(stypy.reporting.localization.Localization(__file__, 561, 21), '-', subscript_call_result_87894, noverlap_87895)
    
    # Getting the type of 'step' (line 561)
    step_87897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 44), 'step')
    # Applying the binary operator '//' (line 561)
    result_floordiv_87898 = python_operator(stypy.reporting.localization.Localization(__file__, 561, 20), '//', result_sub_87896, step_87897)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 561, 17), tuple_87888, result_floordiv_87898)
    
    # Assigning a type to the variable 'shape' (line 561)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 561, 8), 'shape', tuple_87888)
    
    # Assigning a Tuple to a Name (line 562):
    
    # Assigning a Tuple to a Name (line 562):
    
    # Assigning a Tuple to a Name (line 562):
    
    # Obtaining an instance of the builtin type 'tuple' (line 562)
    tuple_87899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 562)
    # Adding element type (line 562)
    
    # Obtaining the type of the subscript
    int_87900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 29), 'int')
    # Getting the type of 'x' (line 562)
    x_87901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 19), 'x')
    # Obtaining the member 'strides' of a type (line 562)
    strides_87902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 19), x_87901, 'strides')
    # Obtaining the member '__getitem__' of a type (line 562)
    getitem___87903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 19), strides_87902, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 562)
    subscript_call_result_87904 = invoke(stypy.reporting.localization.Localization(__file__, 562, 19), getitem___87903, int_87900)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 19), tuple_87899, subscript_call_result_87904)
    # Adding element type (line 562)
    # Getting the type of 'step' (line 562)
    step_87905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 33), 'step')
    
    # Obtaining the type of the subscript
    int_87906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 48), 'int')
    # Getting the type of 'x' (line 562)
    x_87907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 38), 'x')
    # Obtaining the member 'strides' of a type (line 562)
    strides_87908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 38), x_87907, 'strides')
    # Obtaining the member '__getitem__' of a type (line 562)
    getitem___87909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 38), strides_87908, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 562)
    subscript_call_result_87910 = invoke(stypy.reporting.localization.Localization(__file__, 562, 38), getitem___87909, int_87906)
    
    # Applying the binary operator '*' (line 562)
    result_mul_87911 = python_operator(stypy.reporting.localization.Localization(__file__, 562, 33), '*', step_87905, subscript_call_result_87910)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 19), tuple_87899, result_mul_87911)
    
    # Assigning a type to the variable 'strides' (line 562)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 562, 8), 'strides', tuple_87899)
    # SSA branch for the else part of an if statement (line 560)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Tuple to a Name (line 564):
    
    # Assigning a Tuple to a Name (line 564):
    
    # Assigning a Tuple to a Name (line 564):
    
    # Obtaining an instance of the builtin type 'tuple' (line 564)
    tuple_87912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 564, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 564)
    # Adding element type (line 564)
    
    # Obtaining the type of the subscript
    int_87913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 564, 26), 'int')
    # Getting the type of 'x' (line 564)
    x_87914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 18), 'x')
    # Obtaining the member 'shape' of a type (line 564)
    shape_87915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 18), x_87914, 'shape')
    # Obtaining the member '__getitem__' of a type (line 564)
    getitem___87916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 18), shape_87915, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 564)
    subscript_call_result_87917 = invoke(stypy.reporting.localization.Localization(__file__, 564, 18), getitem___87916, int_87913)
    
    # Getting the type of 'noverlap' (line 564)
    noverlap_87918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 30), 'noverlap')
    # Applying the binary operator '-' (line 564)
    result_sub_87919 = python_operator(stypy.reporting.localization.Localization(__file__, 564, 18), '-', subscript_call_result_87917, noverlap_87918)
    
    # Getting the type of 'step' (line 564)
    step_87920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 41), 'step')
    # Applying the binary operator '//' (line 564)
    result_floordiv_87921 = python_operator(stypy.reporting.localization.Localization(__file__, 564, 17), '//', result_sub_87919, step_87920)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 564, 17), tuple_87912, result_floordiv_87921)
    # Adding element type (line 564)
    # Getting the type of 'n' (line 564)
    n_87922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 47), 'n')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 564, 17), tuple_87912, n_87922)
    
    # Assigning a type to the variable 'shape' (line 564)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 8), 'shape', tuple_87912)
    
    # Assigning a Tuple to a Name (line 565):
    
    # Assigning a Tuple to a Name (line 565):
    
    # Assigning a Tuple to a Name (line 565):
    
    # Obtaining an instance of the builtin type 'tuple' (line 565)
    tuple_87923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 565)
    # Adding element type (line 565)
    # Getting the type of 'step' (line 565)
    step_87924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 19), 'step')
    
    # Obtaining the type of the subscript
    int_87925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 34), 'int')
    # Getting the type of 'x' (line 565)
    x_87926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 24), 'x')
    # Obtaining the member 'strides' of a type (line 565)
    strides_87927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 24), x_87926, 'strides')
    # Obtaining the member '__getitem__' of a type (line 565)
    getitem___87928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 24), strides_87927, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 565)
    subscript_call_result_87929 = invoke(stypy.reporting.localization.Localization(__file__, 565, 24), getitem___87928, int_87925)
    
    # Applying the binary operator '*' (line 565)
    result_mul_87930 = python_operator(stypy.reporting.localization.Localization(__file__, 565, 19), '*', step_87924, subscript_call_result_87929)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 565, 19), tuple_87923, result_mul_87930)
    # Adding element type (line 565)
    
    # Obtaining the type of the subscript
    int_87931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 48), 'int')
    # Getting the type of 'x' (line 565)
    x_87932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 38), 'x')
    # Obtaining the member 'strides' of a type (line 565)
    strides_87933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 38), x_87932, 'strides')
    # Obtaining the member '__getitem__' of a type (line 565)
    getitem___87934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 38), strides_87933, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 565)
    subscript_call_result_87935 = invoke(stypy.reporting.localization.Localization(__file__, 565, 38), getitem___87934, int_87931)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 565, 19), tuple_87923, subscript_call_result_87935)
    
    # Assigning a type to the variable 'strides' (line 565)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'strides', tuple_87923)
    # SSA join for if statement (line 560)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to as_strided(...): (line 566)
    # Processing the call arguments (line 566)
    # Getting the type of 'x' (line 566)
    x_87940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 43), 'x', False)
    # Processing the call keyword arguments (line 566)
    # Getting the type of 'shape' (line 566)
    shape_87941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 52), 'shape', False)
    keyword_87942 = shape_87941
    # Getting the type of 'strides' (line 566)
    strides_87943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 67), 'strides', False)
    keyword_87944 = strides_87943
    kwargs_87945 = {'strides': keyword_87944, 'shape': keyword_87942}
    # Getting the type of 'np' (line 566)
    np_87936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 11), 'np', False)
    # Obtaining the member 'lib' of a type (line 566)
    lib_87937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 11), np_87936, 'lib')
    # Obtaining the member 'stride_tricks' of a type (line 566)
    stride_tricks_87938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 11), lib_87937, 'stride_tricks')
    # Obtaining the member 'as_strided' of a type (line 566)
    as_strided_87939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 11), stride_tricks_87938, 'as_strided')
    # Calling as_strided(args, kwargs) (line 566)
    as_strided_call_result_87946 = invoke(stypy.reporting.localization.Localization(__file__, 566, 11), as_strided_87939, *[x_87940], **kwargs_87945)
    
    # Assigning a type to the variable 'stypy_return_type' (line 566)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 4), 'stypy_return_type', as_strided_call_result_87946)
    
    # ################# End of 'stride_windows(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'stride_windows' in the type store
    # Getting the type of 'stypy_return_type' (line 501)
    stypy_return_type_87947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_87947)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'stride_windows'
    return stypy_return_type_87947

# Assigning a type to the variable 'stride_windows' (line 501)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 501, 0), 'stride_windows', stride_windows)

@norecursion
def stride_repeat(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_87948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 569, 29), 'int')
    defaults = [int_87948]
    # Create a new context for function 'stride_repeat'
    module_type_store = module_type_store.open_function_context('stride_repeat', 569, 0, False)
    
    # Passed parameters checking function
    stride_repeat.stypy_localization = localization
    stride_repeat.stypy_type_of_self = None
    stride_repeat.stypy_type_store = module_type_store
    stride_repeat.stypy_function_name = 'stride_repeat'
    stride_repeat.stypy_param_names_list = ['x', 'n', 'axis']
    stride_repeat.stypy_varargs_param_name = None
    stride_repeat.stypy_kwargs_param_name = None
    stride_repeat.stypy_call_defaults = defaults
    stride_repeat.stypy_call_varargs = varargs
    stride_repeat.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'stride_repeat', ['x', 'n', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'stride_repeat', localization, ['x', 'n', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'stride_repeat(...)' code ##################

    unicode_87949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 595, (-1)), 'unicode', u'\n    Repeat the values in an array in a memory-efficient manner.  Array x is\n    stacked vertically n times.\n\n    .. warning::\n\n        It is not safe to write to the output array.  Multiple\n        elements may point to the same piece of memory, so\n        modifying one value may change others.\n\n    Parameters\n    ----------\n    x : 1D array or sequence\n        Array or sequence containing the data.\n\n    n : integer\n        The number of time to repeat the array.\n\n    axis : integer\n        The axis along which the data will run.\n\n    References\n    ----------\n    `stackoverflow: Repeat NumPy array without replicating data?\n    <http://stackoverflow.com/a/5568169>`_\n    ')
    
    
    # Getting the type of 'axis' (line 596)
    axis_87950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 7), 'axis')
    
    # Obtaining an instance of the builtin type 'list' (line 596)
    list_87951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 596, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 596)
    # Adding element type (line 596)
    int_87952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 596, 20), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 596, 19), list_87951, int_87952)
    # Adding element type (line 596)
    int_87953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 596, 23), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 596, 19), list_87951, int_87953)
    
    # Applying the binary operator 'notin' (line 596)
    result_contains_87954 = python_operator(stypy.reporting.localization.Localization(__file__, 596, 7), 'notin', axis_87950, list_87951)
    
    # Testing the type of an if condition (line 596)
    if_condition_87955 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 596, 4), result_contains_87954)
    # Assigning a type to the variable 'if_condition_87955' (line 596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 4), 'if_condition_87955', if_condition_87955)
    # SSA begins for if statement (line 596)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 597)
    # Processing the call arguments (line 597)
    unicode_87957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 25), 'unicode', u'axis must be 0 or 1')
    # Processing the call keyword arguments (line 597)
    kwargs_87958 = {}
    # Getting the type of 'ValueError' (line 597)
    ValueError_87956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 597)
    ValueError_call_result_87959 = invoke(stypy.reporting.localization.Localization(__file__, 597, 14), ValueError_87956, *[unicode_87957], **kwargs_87958)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 597, 8), ValueError_call_result_87959, 'raise parameter', BaseException)
    # SSA join for if statement (line 596)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 598):
    
    # Assigning a Call to a Name (line 598):
    
    # Assigning a Call to a Name (line 598):
    
    # Call to asarray(...): (line 598)
    # Processing the call arguments (line 598)
    # Getting the type of 'x' (line 598)
    x_87962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 19), 'x', False)
    # Processing the call keyword arguments (line 598)
    kwargs_87963 = {}
    # Getting the type of 'np' (line 598)
    np_87960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 598)
    asarray_87961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 8), np_87960, 'asarray')
    # Calling asarray(args, kwargs) (line 598)
    asarray_call_result_87964 = invoke(stypy.reporting.localization.Localization(__file__, 598, 8), asarray_87961, *[x_87962], **kwargs_87963)
    
    # Assigning a type to the variable 'x' (line 598)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 4), 'x', asarray_call_result_87964)
    
    
    # Getting the type of 'x' (line 599)
    x_87965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 7), 'x')
    # Obtaining the member 'ndim' of a type (line 599)
    ndim_87966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 7), x_87965, 'ndim')
    int_87967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 599, 17), 'int')
    # Applying the binary operator '!=' (line 599)
    result_ne_87968 = python_operator(stypy.reporting.localization.Localization(__file__, 599, 7), '!=', ndim_87966, int_87967)
    
    # Testing the type of an if condition (line 599)
    if_condition_87969 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 599, 4), result_ne_87968)
    # Assigning a type to the variable 'if_condition_87969' (line 599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 599, 4), 'if_condition_87969', if_condition_87969)
    # SSA begins for if statement (line 599)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 600)
    # Processing the call arguments (line 600)
    unicode_87971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 600, 25), 'unicode', u'only 1-dimensional arrays can be used')
    # Processing the call keyword arguments (line 600)
    kwargs_87972 = {}
    # Getting the type of 'ValueError' (line 600)
    ValueError_87970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 600)
    ValueError_call_result_87973 = invoke(stypy.reporting.localization.Localization(__file__, 600, 14), ValueError_87970, *[unicode_87971], **kwargs_87972)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 600, 8), ValueError_call_result_87973, 'raise parameter', BaseException)
    # SSA join for if statement (line 599)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 602)
    n_87974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 7), 'n')
    int_87975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 12), 'int')
    # Applying the binary operator '==' (line 602)
    result_eq_87976 = python_operator(stypy.reporting.localization.Localization(__file__, 602, 7), '==', n_87974, int_87975)
    
    # Testing the type of an if condition (line 602)
    if_condition_87977 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 602, 4), result_eq_87976)
    # Assigning a type to the variable 'if_condition_87977' (line 602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 4), 'if_condition_87977', if_condition_87977)
    # SSA begins for if statement (line 602)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'axis' (line 603)
    axis_87978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 11), 'axis')
    int_87979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 19), 'int')
    # Applying the binary operator '==' (line 603)
    result_eq_87980 = python_operator(stypy.reporting.localization.Localization(__file__, 603, 11), '==', axis_87978, int_87979)
    
    # Testing the type of an if condition (line 603)
    if_condition_87981 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 603, 8), result_eq_87980)
    # Assigning a type to the variable 'if_condition_87981' (line 603)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 8), 'if_condition_87981', if_condition_87981)
    # SSA begins for if statement (line 603)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to atleast_2d(...): (line 604)
    # Processing the call arguments (line 604)
    # Getting the type of 'x' (line 604)
    x_87984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 33), 'x', False)
    # Processing the call keyword arguments (line 604)
    kwargs_87985 = {}
    # Getting the type of 'np' (line 604)
    np_87982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 19), 'np', False)
    # Obtaining the member 'atleast_2d' of a type (line 604)
    atleast_2d_87983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 19), np_87982, 'atleast_2d')
    # Calling atleast_2d(args, kwargs) (line 604)
    atleast_2d_call_result_87986 = invoke(stypy.reporting.localization.Localization(__file__, 604, 19), atleast_2d_87983, *[x_87984], **kwargs_87985)
    
    # Assigning a type to the variable 'stypy_return_type' (line 604)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 604, 12), 'stypy_return_type', atleast_2d_call_result_87986)
    # SSA branch for the else part of an if statement (line 603)
    module_type_store.open_ssa_branch('else')
    
    # Call to atleast_2d(...): (line 606)
    # Processing the call arguments (line 606)
    # Getting the type of 'x' (line 606)
    x_87989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 33), 'x', False)
    # Processing the call keyword arguments (line 606)
    kwargs_87990 = {}
    # Getting the type of 'np' (line 606)
    np_87987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 19), 'np', False)
    # Obtaining the member 'atleast_2d' of a type (line 606)
    atleast_2d_87988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 19), np_87987, 'atleast_2d')
    # Calling atleast_2d(args, kwargs) (line 606)
    atleast_2d_call_result_87991 = invoke(stypy.reporting.localization.Localization(__file__, 606, 19), atleast_2d_87988, *[x_87989], **kwargs_87990)
    
    # Obtaining the member 'T' of a type (line 606)
    T_87992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 19), atleast_2d_call_result_87991, 'T')
    # Assigning a type to the variable 'stypy_return_type' (line 606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 12), 'stypy_return_type', T_87992)
    # SSA join for if statement (line 603)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 602)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 607)
    n_87993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 7), 'n')
    int_87994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 607, 11), 'int')
    # Applying the binary operator '<' (line 607)
    result_lt_87995 = python_operator(stypy.reporting.localization.Localization(__file__, 607, 7), '<', n_87993, int_87994)
    
    # Testing the type of an if condition (line 607)
    if_condition_87996 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 607, 4), result_lt_87995)
    # Assigning a type to the variable 'if_condition_87996' (line 607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 4), 'if_condition_87996', if_condition_87996)
    # SSA begins for if statement (line 607)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 608)
    # Processing the call arguments (line 608)
    unicode_87998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 608, 25), 'unicode', u'n cannot be less than 1')
    # Processing the call keyword arguments (line 608)
    kwargs_87999 = {}
    # Getting the type of 'ValueError' (line 608)
    ValueError_87997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 608)
    ValueError_call_result_88000 = invoke(stypy.reporting.localization.Localization(__file__, 608, 14), ValueError_87997, *[unicode_87998], **kwargs_87999)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 608, 8), ValueError_call_result_88000, 'raise parameter', BaseException)
    # SSA join for if statement (line 607)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 612):
    
    # Assigning a Call to a Name (line 612):
    
    # Assigning a Call to a Name (line 612):
    
    # Call to int(...): (line 612)
    # Processing the call arguments (line 612)
    # Getting the type of 'n' (line 612)
    n_88002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 12), 'n', False)
    # Processing the call keyword arguments (line 612)
    kwargs_88003 = {}
    # Getting the type of 'int' (line 612)
    int_88001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 8), 'int', False)
    # Calling int(args, kwargs) (line 612)
    int_call_result_88004 = invoke(stypy.reporting.localization.Localization(__file__, 612, 8), int_88001, *[n_88002], **kwargs_88003)
    
    # Assigning a type to the variable 'n' (line 612)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 4), 'n', int_call_result_88004)
    
    
    # Getting the type of 'axis' (line 614)
    axis_88005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 7), 'axis')
    int_88006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 15), 'int')
    # Applying the binary operator '==' (line 614)
    result_eq_88007 = python_operator(stypy.reporting.localization.Localization(__file__, 614, 7), '==', axis_88005, int_88006)
    
    # Testing the type of an if condition (line 614)
    if_condition_88008 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 614, 4), result_eq_88007)
    # Assigning a type to the variable 'if_condition_88008' (line 614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 614, 4), 'if_condition_88008', if_condition_88008)
    # SSA begins for if statement (line 614)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 615):
    
    # Assigning a Tuple to a Name (line 615):
    
    # Assigning a Tuple to a Name (line 615):
    
    # Obtaining an instance of the builtin type 'tuple' (line 615)
    tuple_88009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 615)
    # Adding element type (line 615)
    # Getting the type of 'n' (line 615)
    n_88010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 17), 'n')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 615, 17), tuple_88009, n_88010)
    # Adding element type (line 615)
    # Getting the type of 'x' (line 615)
    x_88011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 20), 'x')
    # Obtaining the member 'size' of a type (line 615)
    size_88012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 20), x_88011, 'size')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 615, 17), tuple_88009, size_88012)
    
    # Assigning a type to the variable 'shape' (line 615)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 8), 'shape', tuple_88009)
    
    # Assigning a Tuple to a Name (line 616):
    
    # Assigning a Tuple to a Name (line 616):
    
    # Assigning a Tuple to a Name (line 616):
    
    # Obtaining an instance of the builtin type 'tuple' (line 616)
    tuple_88013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 616)
    # Adding element type (line 616)
    int_88014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 19), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 616, 19), tuple_88013, int_88014)
    # Adding element type (line 616)
    
    # Obtaining the type of the subscript
    int_88015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 32), 'int')
    # Getting the type of 'x' (line 616)
    x_88016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 22), 'x')
    # Obtaining the member 'strides' of a type (line 616)
    strides_88017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 22), x_88016, 'strides')
    # Obtaining the member '__getitem__' of a type (line 616)
    getitem___88018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 22), strides_88017, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 616)
    subscript_call_result_88019 = invoke(stypy.reporting.localization.Localization(__file__, 616, 22), getitem___88018, int_88015)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 616, 19), tuple_88013, subscript_call_result_88019)
    
    # Assigning a type to the variable 'strides' (line 616)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 'strides', tuple_88013)
    # SSA branch for the else part of an if statement (line 614)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Tuple to a Name (line 618):
    
    # Assigning a Tuple to a Name (line 618):
    
    # Assigning a Tuple to a Name (line 618):
    
    # Obtaining an instance of the builtin type 'tuple' (line 618)
    tuple_88020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 618, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 618)
    # Adding element type (line 618)
    # Getting the type of 'x' (line 618)
    x_88021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 17), 'x')
    # Obtaining the member 'size' of a type (line 618)
    size_88022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 17), x_88021, 'size')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 618, 17), tuple_88020, size_88022)
    # Adding element type (line 618)
    # Getting the type of 'n' (line 618)
    n_88023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 25), 'n')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 618, 17), tuple_88020, n_88023)
    
    # Assigning a type to the variable 'shape' (line 618)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 618, 8), 'shape', tuple_88020)
    
    # Assigning a Tuple to a Name (line 619):
    
    # Assigning a Tuple to a Name (line 619):
    
    # Assigning a Tuple to a Name (line 619):
    
    # Obtaining an instance of the builtin type 'tuple' (line 619)
    tuple_88024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 619)
    # Adding element type (line 619)
    
    # Obtaining the type of the subscript
    int_88025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 29), 'int')
    # Getting the type of 'x' (line 619)
    x_88026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 19), 'x')
    # Obtaining the member 'strides' of a type (line 619)
    strides_88027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 19), x_88026, 'strides')
    # Obtaining the member '__getitem__' of a type (line 619)
    getitem___88028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 19), strides_88027, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 619)
    subscript_call_result_88029 = invoke(stypy.reporting.localization.Localization(__file__, 619, 19), getitem___88028, int_88025)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 619, 19), tuple_88024, subscript_call_result_88029)
    # Adding element type (line 619)
    int_88030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 33), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 619, 19), tuple_88024, int_88030)
    
    # Assigning a type to the variable 'strides' (line 619)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 8), 'strides', tuple_88024)
    # SSA join for if statement (line 614)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to as_strided(...): (line 621)
    # Processing the call arguments (line 621)
    # Getting the type of 'x' (line 621)
    x_88035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 43), 'x', False)
    # Processing the call keyword arguments (line 621)
    # Getting the type of 'shape' (line 621)
    shape_88036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 52), 'shape', False)
    keyword_88037 = shape_88036
    # Getting the type of 'strides' (line 621)
    strides_88038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 67), 'strides', False)
    keyword_88039 = strides_88038
    kwargs_88040 = {'strides': keyword_88039, 'shape': keyword_88037}
    # Getting the type of 'np' (line 621)
    np_88031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 11), 'np', False)
    # Obtaining the member 'lib' of a type (line 621)
    lib_88032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 11), np_88031, 'lib')
    # Obtaining the member 'stride_tricks' of a type (line 621)
    stride_tricks_88033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 11), lib_88032, 'stride_tricks')
    # Obtaining the member 'as_strided' of a type (line 621)
    as_strided_88034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 11), stride_tricks_88033, 'as_strided')
    # Calling as_strided(args, kwargs) (line 621)
    as_strided_call_result_88041 = invoke(stypy.reporting.localization.Localization(__file__, 621, 11), as_strided_88034, *[x_88035], **kwargs_88040)
    
    # Assigning a type to the variable 'stypy_return_type' (line 621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 4), 'stypy_return_type', as_strided_call_result_88041)
    
    # ################# End of 'stride_repeat(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'stride_repeat' in the type store
    # Getting the type of 'stypy_return_type' (line 569)
    stypy_return_type_88042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_88042)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'stride_repeat'
    return stypy_return_type_88042

# Assigning a type to the variable 'stride_repeat' (line 569)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 569, 0), 'stride_repeat', stride_repeat)

@norecursion
def _spectral_helper(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 624)
    None_88043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 26), 'None')
    # Getting the type of 'None' (line 624)
    None_88044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 37), 'None')
    # Getting the type of 'None' (line 624)
    None_88045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 46), 'None')
    # Getting the type of 'None' (line 624)
    None_88046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 65), 'None')
    # Getting the type of 'None' (line 625)
    None_88047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 28), 'None')
    # Getting the type of 'None' (line 625)
    None_88048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 43), 'None')
    # Getting the type of 'None' (line 625)
    None_88049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 56), 'None')
    # Getting the type of 'None' (line 626)
    None_88050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 27), 'None')
    # Getting the type of 'None' (line 626)
    None_88051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 47), 'None')
    # Getting the type of 'None' (line 626)
    None_88052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 58), 'None')
    defaults = [None_88043, None_88044, None_88045, None_88046, None_88047, None_88048, None_88049, None_88050, None_88051, None_88052]
    # Create a new context for function '_spectral_helper'
    module_type_store = module_type_store.open_function_context('_spectral_helper', 624, 0, False)
    
    # Passed parameters checking function
    _spectral_helper.stypy_localization = localization
    _spectral_helper.stypy_type_of_self = None
    _spectral_helper.stypy_type_store = module_type_store
    _spectral_helper.stypy_function_name = '_spectral_helper'
    _spectral_helper.stypy_param_names_list = ['x', 'y', 'NFFT', 'Fs', 'detrend_func', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq', 'mode']
    _spectral_helper.stypy_varargs_param_name = None
    _spectral_helper.stypy_kwargs_param_name = None
    _spectral_helper.stypy_call_defaults = defaults
    _spectral_helper.stypy_call_varargs = varargs
    _spectral_helper.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_spectral_helper', ['x', 'y', 'NFFT', 'Fs', 'detrend_func', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq', 'mode'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_spectral_helper', localization, ['x', 'y', 'NFFT', 'Fs', 'detrend_func', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq', 'mode'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_spectral_helper(...)' code ##################

    unicode_88053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 631, (-1)), 'unicode', u'\n    This is a helper function that implements the commonality between the\n    psd, csd, spectrogram and complex, magnitude, angle, and phase spectrums.\n    It is *NOT* meant to be used outside of mlab and may change at any time.\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 632)
    # Getting the type of 'y' (line 632)
    y_88054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 7), 'y')
    # Getting the type of 'None' (line 632)
    None_88055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 12), 'None')
    
    (may_be_88056, more_types_in_union_88057) = may_be_none(y_88054, None_88055)

    if may_be_88056:

        if more_types_in_union_88057:
            # Runtime conditional SSA (line 632)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Name (line 634):
        
        # Assigning a Name to a Name (line 634):
        
        # Assigning a Name to a Name (line 634):
        # Getting the type of 'True' (line 634)
        True_88058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 20), 'True')
        # Assigning a type to the variable 'same_data' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 8), 'same_data', True_88058)

        if more_types_in_union_88057:
            # Runtime conditional SSA for else branch (line 632)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_88056) or more_types_in_union_88057):
        
        # Assigning a Compare to a Name (line 639):
        
        # Assigning a Compare to a Name (line 639):
        
        # Assigning a Compare to a Name (line 639):
        
        # Getting the type of 'y' (line 639)
        y_88059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 20), 'y')
        # Getting the type of 'x' (line 639)
        x_88060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 25), 'x')
        # Applying the binary operator 'is' (line 639)
        result_is__88061 = python_operator(stypy.reporting.localization.Localization(__file__, 639, 20), 'is', y_88059, x_88060)
        
        # Assigning a type to the variable 'same_data' (line 639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 8), 'same_data', result_is__88061)

        if (may_be_88056 and more_types_in_union_88057):
            # SSA join for if statement (line 632)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 641)
    # Getting the type of 'Fs' (line 641)
    Fs_88062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 7), 'Fs')
    # Getting the type of 'None' (line 641)
    None_88063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 13), 'None')
    
    (may_be_88064, more_types_in_union_88065) = may_be_none(Fs_88062, None_88063)

    if may_be_88064:

        if more_types_in_union_88065:
            # Runtime conditional SSA (line 641)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 642):
        
        # Assigning a Num to a Name (line 642):
        
        # Assigning a Num to a Name (line 642):
        int_88066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, 13), 'int')
        # Assigning a type to the variable 'Fs' (line 642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 642, 8), 'Fs', int_88066)

        if more_types_in_union_88065:
            # SSA join for if statement (line 641)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 643)
    # Getting the type of 'noverlap' (line 643)
    noverlap_88067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 7), 'noverlap')
    # Getting the type of 'None' (line 643)
    None_88068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 19), 'None')
    
    (may_be_88069, more_types_in_union_88070) = may_be_none(noverlap_88067, None_88068)

    if may_be_88069:

        if more_types_in_union_88070:
            # Runtime conditional SSA (line 643)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 644):
        
        # Assigning a Num to a Name (line 644):
        
        # Assigning a Num to a Name (line 644):
        int_88071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 644, 19), 'int')
        # Assigning a type to the variable 'noverlap' (line 644)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 644, 8), 'noverlap', int_88071)

        if more_types_in_union_88070:
            # SSA join for if statement (line 643)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 645)
    # Getting the type of 'detrend_func' (line 645)
    detrend_func_88072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 7), 'detrend_func')
    # Getting the type of 'None' (line 645)
    None_88073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 23), 'None')
    
    (may_be_88074, more_types_in_union_88075) = may_be_none(detrend_func_88072, None_88073)

    if may_be_88074:

        if more_types_in_union_88075:
            # Runtime conditional SSA (line 645)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Name (line 646):
        
        # Assigning a Name to a Name (line 646):
        
        # Assigning a Name to a Name (line 646):
        # Getting the type of 'detrend_none' (line 646)
        detrend_none_88076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 23), 'detrend_none')
        # Assigning a type to the variable 'detrend_func' (line 646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 8), 'detrend_func', detrend_none_88076)

        if more_types_in_union_88075:
            # SSA join for if statement (line 645)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 647)
    # Getting the type of 'window' (line 647)
    window_88077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 7), 'window')
    # Getting the type of 'None' (line 647)
    None_88078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 17), 'None')
    
    (may_be_88079, more_types_in_union_88080) = may_be_none(window_88077, None_88078)

    if may_be_88079:

        if more_types_in_union_88080:
            # Runtime conditional SSA (line 647)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Name (line 648):
        
        # Assigning a Name to a Name (line 648):
        
        # Assigning a Name to a Name (line 648):
        # Getting the type of 'window_hanning' (line 648)
        window_hanning_88081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 17), 'window_hanning')
        # Assigning a type to the variable 'window' (line 648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'window', window_hanning_88081)

        if more_types_in_union_88080:
            # SSA join for if statement (line 647)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 651)
    # Getting the type of 'NFFT' (line 651)
    NFFT_88082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 7), 'NFFT')
    # Getting the type of 'None' (line 651)
    None_88083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 15), 'None')
    
    (may_be_88084, more_types_in_union_88085) = may_be_none(NFFT_88082, None_88083)

    if may_be_88084:

        if more_types_in_union_88085:
            # Runtime conditional SSA (line 651)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 652):
        
        # Assigning a Num to a Name (line 652):
        
        # Assigning a Num to a Name (line 652):
        int_88086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 652, 15), 'int')
        # Assigning a type to the variable 'NFFT' (line 652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 8), 'NFFT', int_88086)

        if more_types_in_union_88085:
            # SSA join for if statement (line 651)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'mode' (line 654)
    mode_88087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 7), 'mode')
    # Getting the type of 'None' (line 654)
    None_88088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 15), 'None')
    # Applying the binary operator 'is' (line 654)
    result_is__88089 = python_operator(stypy.reporting.localization.Localization(__file__, 654, 7), 'is', mode_88087, None_88088)
    
    
    # Getting the type of 'mode' (line 654)
    mode_88090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 23), 'mode')
    unicode_88091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 654, 31), 'unicode', u'default')
    # Applying the binary operator '==' (line 654)
    result_eq_88092 = python_operator(stypy.reporting.localization.Localization(__file__, 654, 23), '==', mode_88090, unicode_88091)
    
    # Applying the binary operator 'or' (line 654)
    result_or_keyword_88093 = python_operator(stypy.reporting.localization.Localization(__file__, 654, 7), 'or', result_is__88089, result_eq_88092)
    
    # Testing the type of an if condition (line 654)
    if_condition_88094 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 654, 4), result_or_keyword_88093)
    # Assigning a type to the variable 'if_condition_88094' (line 654)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 4), 'if_condition_88094', if_condition_88094)
    # SSA begins for if statement (line 654)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 655):
    
    # Assigning a Str to a Name (line 655):
    
    # Assigning a Str to a Name (line 655):
    unicode_88095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 655, 15), 'unicode', u'psd')
    # Assigning a type to the variable 'mode' (line 655)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 655, 8), 'mode', unicode_88095)
    # SSA branch for the else part of an if statement (line 654)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'mode' (line 656)
    mode_88096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 9), 'mode')
    
    # Obtaining an instance of the builtin type 'list' (line 656)
    list_88097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 656)
    # Adding element type (line 656)
    unicode_88098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 22), 'unicode', u'psd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 656, 21), list_88097, unicode_88098)
    # Adding element type (line 656)
    unicode_88099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 29), 'unicode', u'complex')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 656, 21), list_88097, unicode_88099)
    # Adding element type (line 656)
    unicode_88100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 40), 'unicode', u'magnitude')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 656, 21), list_88097, unicode_88100)
    # Adding element type (line 656)
    unicode_88101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 53), 'unicode', u'angle')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 656, 21), list_88097, unicode_88101)
    # Adding element type (line 656)
    unicode_88102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 62), 'unicode', u'phase')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 656, 21), list_88097, unicode_88102)
    
    # Applying the binary operator 'notin' (line 656)
    result_contains_88103 = python_operator(stypy.reporting.localization.Localization(__file__, 656, 9), 'notin', mode_88096, list_88097)
    
    # Testing the type of an if condition (line 656)
    if_condition_88104 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 656, 9), result_contains_88103)
    # Assigning a type to the variable 'if_condition_88104' (line 656)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 656, 9), 'if_condition_88104', if_condition_88104)
    # SSA begins for if statement (line 656)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 657)
    # Processing the call arguments (line 657)
    unicode_88106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 657, 25), 'unicode', u"Unknown value for mode %s, must be one of: 'default', 'psd', 'complex', 'magnitude', 'angle', 'phase'")
    # Getting the type of 'mode' (line 659)
    mode_88107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 59), 'mode', False)
    # Applying the binary operator '%' (line 657)
    result_mod_88108 = python_operator(stypy.reporting.localization.Localization(__file__, 657, 25), '%', unicode_88106, mode_88107)
    
    # Processing the call keyword arguments (line 657)
    kwargs_88109 = {}
    # Getting the type of 'ValueError' (line 657)
    ValueError_88105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 657)
    ValueError_call_result_88110 = invoke(stypy.reporting.localization.Localization(__file__, 657, 14), ValueError_88105, *[result_mod_88108], **kwargs_88109)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 657, 8), ValueError_call_result_88110, 'raise parameter', BaseException)
    # SSA join for if statement (line 656)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 654)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'same_data' (line 661)
    same_data_88111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 11), 'same_data')
    # Applying the 'not' unary operator (line 661)
    result_not__88112 = python_operator(stypy.reporting.localization.Localization(__file__, 661, 7), 'not', same_data_88111)
    
    
    # Getting the type of 'mode' (line 661)
    mode_88113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 25), 'mode')
    unicode_88114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 661, 33), 'unicode', u'psd')
    # Applying the binary operator '!=' (line 661)
    result_ne_88115 = python_operator(stypy.reporting.localization.Localization(__file__, 661, 25), '!=', mode_88113, unicode_88114)
    
    # Applying the binary operator 'and' (line 661)
    result_and_keyword_88116 = python_operator(stypy.reporting.localization.Localization(__file__, 661, 7), 'and', result_not__88112, result_ne_88115)
    
    # Testing the type of an if condition (line 661)
    if_condition_88117 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 661, 4), result_and_keyword_88116)
    # Assigning a type to the variable 'if_condition_88117' (line 661)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 661, 4), 'if_condition_88117', if_condition_88117)
    # SSA begins for if statement (line 661)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 662)
    # Processing the call arguments (line 662)
    unicode_88119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 662, 25), 'unicode', u"x and y must be equal if mode is not 'psd'")
    # Processing the call keyword arguments (line 662)
    kwargs_88120 = {}
    # Getting the type of 'ValueError' (line 662)
    ValueError_88118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 662)
    ValueError_call_result_88121 = invoke(stypy.reporting.localization.Localization(__file__, 662, 14), ValueError_88118, *[unicode_88119], **kwargs_88120)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 662, 8), ValueError_call_result_88121, 'raise parameter', BaseException)
    # SSA join for if statement (line 661)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 666):
    
    # Assigning a Call to a Name (line 666):
    
    # Assigning a Call to a Name (line 666):
    
    # Call to asarray(...): (line 666)
    # Processing the call arguments (line 666)
    # Getting the type of 'x' (line 666)
    x_88124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 19), 'x', False)
    # Processing the call keyword arguments (line 666)
    kwargs_88125 = {}
    # Getting the type of 'np' (line 666)
    np_88122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 666)
    asarray_88123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 8), np_88122, 'asarray')
    # Calling asarray(args, kwargs) (line 666)
    asarray_call_result_88126 = invoke(stypy.reporting.localization.Localization(__file__, 666, 8), asarray_88123, *[x_88124], **kwargs_88125)
    
    # Assigning a type to the variable 'x' (line 666)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 4), 'x', asarray_call_result_88126)
    
    
    # Getting the type of 'same_data' (line 667)
    same_data_88127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 11), 'same_data')
    # Applying the 'not' unary operator (line 667)
    result_not__88128 = python_operator(stypy.reporting.localization.Localization(__file__, 667, 7), 'not', same_data_88127)
    
    # Testing the type of an if condition (line 667)
    if_condition_88129 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 667, 4), result_not__88128)
    # Assigning a type to the variable 'if_condition_88129' (line 667)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 667, 4), 'if_condition_88129', if_condition_88129)
    # SSA begins for if statement (line 667)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 668):
    
    # Assigning a Call to a Name (line 668):
    
    # Assigning a Call to a Name (line 668):
    
    # Call to asarray(...): (line 668)
    # Processing the call arguments (line 668)
    # Getting the type of 'y' (line 668)
    y_88132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 23), 'y', False)
    # Processing the call keyword arguments (line 668)
    kwargs_88133 = {}
    # Getting the type of 'np' (line 668)
    np_88130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 668)
    asarray_88131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 12), np_88130, 'asarray')
    # Calling asarray(args, kwargs) (line 668)
    asarray_call_result_88134 = invoke(stypy.reporting.localization.Localization(__file__, 668, 12), asarray_88131, *[y_88132], **kwargs_88133)
    
    # Assigning a type to the variable 'y' (line 668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 668, 8), 'y', asarray_call_result_88134)
    # SSA join for if statement (line 667)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'sides' (line 670)
    sides_88135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 7), 'sides')
    # Getting the type of 'None' (line 670)
    None_88136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 16), 'None')
    # Applying the binary operator 'is' (line 670)
    result_is__88137 = python_operator(stypy.reporting.localization.Localization(__file__, 670, 7), 'is', sides_88135, None_88136)
    
    
    # Getting the type of 'sides' (line 670)
    sides_88138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 24), 'sides')
    unicode_88139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 670, 33), 'unicode', u'default')
    # Applying the binary operator '==' (line 670)
    result_eq_88140 = python_operator(stypy.reporting.localization.Localization(__file__, 670, 24), '==', sides_88138, unicode_88139)
    
    # Applying the binary operator 'or' (line 670)
    result_or_keyword_88141 = python_operator(stypy.reporting.localization.Localization(__file__, 670, 7), 'or', result_is__88137, result_eq_88140)
    
    # Testing the type of an if condition (line 670)
    if_condition_88142 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 670, 4), result_or_keyword_88141)
    # Assigning a type to the variable 'if_condition_88142' (line 670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 670, 4), 'if_condition_88142', if_condition_88142)
    # SSA begins for if statement (line 670)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to iscomplexobj(...): (line 671)
    # Processing the call arguments (line 671)
    # Getting the type of 'x' (line 671)
    x_88145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 27), 'x', False)
    # Processing the call keyword arguments (line 671)
    kwargs_88146 = {}
    # Getting the type of 'np' (line 671)
    np_88143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 11), 'np', False)
    # Obtaining the member 'iscomplexobj' of a type (line 671)
    iscomplexobj_88144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 11), np_88143, 'iscomplexobj')
    # Calling iscomplexobj(args, kwargs) (line 671)
    iscomplexobj_call_result_88147 = invoke(stypy.reporting.localization.Localization(__file__, 671, 11), iscomplexobj_88144, *[x_88145], **kwargs_88146)
    
    # Testing the type of an if condition (line 671)
    if_condition_88148 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 671, 8), iscomplexobj_call_result_88147)
    # Assigning a type to the variable 'if_condition_88148' (line 671)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 671, 8), 'if_condition_88148', if_condition_88148)
    # SSA begins for if statement (line 671)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 672):
    
    # Assigning a Str to a Name (line 672):
    
    # Assigning a Str to a Name (line 672):
    unicode_88149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, 20), 'unicode', u'twosided')
    # Assigning a type to the variable 'sides' (line 672)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 12), 'sides', unicode_88149)
    # SSA branch for the else part of an if statement (line 671)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Str to a Name (line 674):
    
    # Assigning a Str to a Name (line 674):
    
    # Assigning a Str to a Name (line 674):
    unicode_88150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 674, 20), 'unicode', u'onesided')
    # Assigning a type to the variable 'sides' (line 674)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 12), 'sides', unicode_88150)
    # SSA join for if statement (line 671)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 670)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'sides' (line 675)
    sides_88151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 9), 'sides')
    
    # Obtaining an instance of the builtin type 'list' (line 675)
    list_88152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 675, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 675)
    # Adding element type (line 675)
    unicode_88153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 675, 23), 'unicode', u'onesided')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 675, 22), list_88152, unicode_88153)
    # Adding element type (line 675)
    unicode_88154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 675, 35), 'unicode', u'twosided')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 675, 22), list_88152, unicode_88154)
    
    # Applying the binary operator 'notin' (line 675)
    result_contains_88155 = python_operator(stypy.reporting.localization.Localization(__file__, 675, 9), 'notin', sides_88151, list_88152)
    
    # Testing the type of an if condition (line 675)
    if_condition_88156 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 675, 9), result_contains_88155)
    # Assigning a type to the variable 'if_condition_88156' (line 675)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 9), 'if_condition_88156', if_condition_88156)
    # SSA begins for if statement (line 675)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 676)
    # Processing the call arguments (line 676)
    unicode_88158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 676, 25), 'unicode', u"Unknown value for sides %s, must be one of: 'default', 'onesided', or 'twosided'")
    # Getting the type of 'sides' (line 677)
    sides_88159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 66), 'sides', False)
    # Applying the binary operator '%' (line 676)
    result_mod_88160 = python_operator(stypy.reporting.localization.Localization(__file__, 676, 25), '%', unicode_88158, sides_88159)
    
    # Processing the call keyword arguments (line 676)
    kwargs_88161 = {}
    # Getting the type of 'ValueError' (line 676)
    ValueError_88157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 676)
    ValueError_call_result_88162 = invoke(stypy.reporting.localization.Localization(__file__, 676, 14), ValueError_88157, *[result_mod_88160], **kwargs_88161)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 676, 8), ValueError_call_result_88162, 'raise parameter', BaseException)
    # SSA join for if statement (line 675)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 670)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 680)
    # Processing the call arguments (line 680)
    # Getting the type of 'x' (line 680)
    x_88164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 11), 'x', False)
    # Processing the call keyword arguments (line 680)
    kwargs_88165 = {}
    # Getting the type of 'len' (line 680)
    len_88163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 7), 'len', False)
    # Calling len(args, kwargs) (line 680)
    len_call_result_88166 = invoke(stypy.reporting.localization.Localization(__file__, 680, 7), len_88163, *[x_88164], **kwargs_88165)
    
    # Getting the type of 'NFFT' (line 680)
    NFFT_88167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 16), 'NFFT')
    # Applying the binary operator '<' (line 680)
    result_lt_88168 = python_operator(stypy.reporting.localization.Localization(__file__, 680, 7), '<', len_call_result_88166, NFFT_88167)
    
    # Testing the type of an if condition (line 680)
    if_condition_88169 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 680, 4), result_lt_88168)
    # Assigning a type to the variable 'if_condition_88169' (line 680)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 4), 'if_condition_88169', if_condition_88169)
    # SSA begins for if statement (line 680)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 681):
    
    # Assigning a Call to a Name (line 681):
    
    # Assigning a Call to a Name (line 681):
    
    # Call to len(...): (line 681)
    # Processing the call arguments (line 681)
    # Getting the type of 'x' (line 681)
    x_88171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 16), 'x', False)
    # Processing the call keyword arguments (line 681)
    kwargs_88172 = {}
    # Getting the type of 'len' (line 681)
    len_88170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 12), 'len', False)
    # Calling len(args, kwargs) (line 681)
    len_call_result_88173 = invoke(stypy.reporting.localization.Localization(__file__, 681, 12), len_88170, *[x_88171], **kwargs_88172)
    
    # Assigning a type to the variable 'n' (line 681)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 681, 8), 'n', len_call_result_88173)
    
    # Assigning a Call to a Name (line 682):
    
    # Assigning a Call to a Name (line 682):
    
    # Assigning a Call to a Name (line 682):
    
    # Call to resize(...): (line 682)
    # Processing the call arguments (line 682)
    # Getting the type of 'x' (line 682)
    x_88176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 22), 'x', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 682)
    tuple_88177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 682)
    # Adding element type (line 682)
    # Getting the type of 'NFFT' (line 682)
    NFFT_88178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 26), 'NFFT', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 682, 26), tuple_88177, NFFT_88178)
    
    # Processing the call keyword arguments (line 682)
    kwargs_88179 = {}
    # Getting the type of 'np' (line 682)
    np_88174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 12), 'np', False)
    # Obtaining the member 'resize' of a type (line 682)
    resize_88175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 682, 12), np_88174, 'resize')
    # Calling resize(args, kwargs) (line 682)
    resize_call_result_88180 = invoke(stypy.reporting.localization.Localization(__file__, 682, 12), resize_88175, *[x_88176, tuple_88177], **kwargs_88179)
    
    # Assigning a type to the variable 'x' (line 682)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 8), 'x', resize_call_result_88180)
    
    # Assigning a Num to a Subscript (line 683):
    
    # Assigning a Num to a Subscript (line 683):
    
    # Assigning a Num to a Subscript (line 683):
    int_88181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 683, 16), 'int')
    # Getting the type of 'x' (line 683)
    x_88182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 8), 'x')
    # Getting the type of 'n' (line 683)
    n_88183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 10), 'n')
    slice_88184 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 683, 8), n_88183, None, None)
    # Storing an element on a container (line 683)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 683, 8), x_88182, (slice_88184, int_88181))
    # SSA join for if statement (line 680)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'same_data' (line 685)
    same_data_88185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 11), 'same_data')
    # Applying the 'not' unary operator (line 685)
    result_not__88186 = python_operator(stypy.reporting.localization.Localization(__file__, 685, 7), 'not', same_data_88185)
    
    
    
    # Call to len(...): (line 685)
    # Processing the call arguments (line 685)
    # Getting the type of 'y' (line 685)
    y_88188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 29), 'y', False)
    # Processing the call keyword arguments (line 685)
    kwargs_88189 = {}
    # Getting the type of 'len' (line 685)
    len_88187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 25), 'len', False)
    # Calling len(args, kwargs) (line 685)
    len_call_result_88190 = invoke(stypy.reporting.localization.Localization(__file__, 685, 25), len_88187, *[y_88188], **kwargs_88189)
    
    # Getting the type of 'NFFT' (line 685)
    NFFT_88191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 34), 'NFFT')
    # Applying the binary operator '<' (line 685)
    result_lt_88192 = python_operator(stypy.reporting.localization.Localization(__file__, 685, 25), '<', len_call_result_88190, NFFT_88191)
    
    # Applying the binary operator 'and' (line 685)
    result_and_keyword_88193 = python_operator(stypy.reporting.localization.Localization(__file__, 685, 7), 'and', result_not__88186, result_lt_88192)
    
    # Testing the type of an if condition (line 685)
    if_condition_88194 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 685, 4), result_and_keyword_88193)
    # Assigning a type to the variable 'if_condition_88194' (line 685)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 685, 4), 'if_condition_88194', if_condition_88194)
    # SSA begins for if statement (line 685)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 686):
    
    # Assigning a Call to a Name (line 686):
    
    # Assigning a Call to a Name (line 686):
    
    # Call to len(...): (line 686)
    # Processing the call arguments (line 686)
    # Getting the type of 'y' (line 686)
    y_88196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 16), 'y', False)
    # Processing the call keyword arguments (line 686)
    kwargs_88197 = {}
    # Getting the type of 'len' (line 686)
    len_88195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 12), 'len', False)
    # Calling len(args, kwargs) (line 686)
    len_call_result_88198 = invoke(stypy.reporting.localization.Localization(__file__, 686, 12), len_88195, *[y_88196], **kwargs_88197)
    
    # Assigning a type to the variable 'n' (line 686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 686, 8), 'n', len_call_result_88198)
    
    # Assigning a Call to a Name (line 687):
    
    # Assigning a Call to a Name (line 687):
    
    # Assigning a Call to a Name (line 687):
    
    # Call to resize(...): (line 687)
    # Processing the call arguments (line 687)
    # Getting the type of 'y' (line 687)
    y_88201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 22), 'y', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 687)
    tuple_88202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 687)
    # Adding element type (line 687)
    # Getting the type of 'NFFT' (line 687)
    NFFT_88203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 26), 'NFFT', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 26), tuple_88202, NFFT_88203)
    
    # Processing the call keyword arguments (line 687)
    kwargs_88204 = {}
    # Getting the type of 'np' (line 687)
    np_88199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 12), 'np', False)
    # Obtaining the member 'resize' of a type (line 687)
    resize_88200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 12), np_88199, 'resize')
    # Calling resize(args, kwargs) (line 687)
    resize_call_result_88205 = invoke(stypy.reporting.localization.Localization(__file__, 687, 12), resize_88200, *[y_88201, tuple_88202], **kwargs_88204)
    
    # Assigning a type to the variable 'y' (line 687)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 687, 8), 'y', resize_call_result_88205)
    
    # Assigning a Num to a Subscript (line 688):
    
    # Assigning a Num to a Subscript (line 688):
    
    # Assigning a Num to a Subscript (line 688):
    int_88206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 688, 16), 'int')
    # Getting the type of 'y' (line 688)
    y_88207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 8), 'y')
    # Getting the type of 'n' (line 688)
    n_88208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 10), 'n')
    slice_88209 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 688, 8), n_88208, None, None)
    # Storing an element on a container (line 688)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 688, 8), y_88207, (slice_88209, int_88206))
    # SSA join for if statement (line 685)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 690)
    # Getting the type of 'pad_to' (line 690)
    pad_to_88210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 7), 'pad_to')
    # Getting the type of 'None' (line 690)
    None_88211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 17), 'None')
    
    (may_be_88212, more_types_in_union_88213) = may_be_none(pad_to_88210, None_88211)

    if may_be_88212:

        if more_types_in_union_88213:
            # Runtime conditional SSA (line 690)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Name (line 691):
        
        # Assigning a Name to a Name (line 691):
        
        # Assigning a Name to a Name (line 691):
        # Getting the type of 'NFFT' (line 691)
        NFFT_88214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 17), 'NFFT')
        # Assigning a type to the variable 'pad_to' (line 691)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 691, 8), 'pad_to', NFFT_88214)

        if more_types_in_union_88213:
            # SSA join for if statement (line 690)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'mode' (line 693)
    mode_88215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 7), 'mode')
    unicode_88216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 15), 'unicode', u'psd')
    # Applying the binary operator '!=' (line 693)
    result_ne_88217 = python_operator(stypy.reporting.localization.Localization(__file__, 693, 7), '!=', mode_88215, unicode_88216)
    
    # Testing the type of an if condition (line 693)
    if_condition_88218 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 693, 4), result_ne_88217)
    # Assigning a type to the variable 'if_condition_88218' (line 693)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 693, 4), 'if_condition_88218', if_condition_88218)
    # SSA begins for if statement (line 693)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 694):
    
    # Assigning a Name to a Name (line 694):
    
    # Assigning a Name to a Name (line 694):
    # Getting the type of 'False' (line 694)
    False_88219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 24), 'False')
    # Assigning a type to the variable 'scale_by_freq' (line 694)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 694, 8), 'scale_by_freq', False_88219)
    # SSA branch for the else part of an if statement (line 693)
    module_type_store.open_ssa_branch('else')
    
    # Type idiom detected: calculating its left and rigth part (line 695)
    # Getting the type of 'scale_by_freq' (line 695)
    scale_by_freq_88220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 9), 'scale_by_freq')
    # Getting the type of 'None' (line 695)
    None_88221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 26), 'None')
    
    (may_be_88222, more_types_in_union_88223) = may_be_none(scale_by_freq_88220, None_88221)

    if may_be_88222:

        if more_types_in_union_88223:
            # Runtime conditional SSA (line 695)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Name (line 696):
        
        # Assigning a Name to a Name (line 696):
        
        # Assigning a Name to a Name (line 696):
        # Getting the type of 'True' (line 696)
        True_88224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 24), 'True')
        # Assigning a type to the variable 'scale_by_freq' (line 696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 696, 8), 'scale_by_freq', True_88224)

        if more_types_in_union_88223:
            # SSA join for if statement (line 695)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 693)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'sides' (line 699)
    sides_88225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 7), 'sides')
    unicode_88226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 16), 'unicode', u'twosided')
    # Applying the binary operator '==' (line 699)
    result_eq_88227 = python_operator(stypy.reporting.localization.Localization(__file__, 699, 7), '==', sides_88225, unicode_88226)
    
    # Testing the type of an if condition (line 699)
    if_condition_88228 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 699, 4), result_eq_88227)
    # Assigning a type to the variable 'if_condition_88228' (line 699)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 699, 4), 'if_condition_88228', if_condition_88228)
    # SSA begins for if statement (line 699)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 700):
    
    # Assigning a Name to a Name (line 700):
    
    # Assigning a Name to a Name (line 700):
    # Getting the type of 'pad_to' (line 700)
    pad_to_88229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 19), 'pad_to')
    # Assigning a type to the variable 'numFreqs' (line 700)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 700, 8), 'numFreqs', pad_to_88229)
    
    # Getting the type of 'pad_to' (line 701)
    pad_to_88230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 11), 'pad_to')
    int_88231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 20), 'int')
    # Applying the binary operator '%' (line 701)
    result_mod_88232 = python_operator(stypy.reporting.localization.Localization(__file__, 701, 11), '%', pad_to_88230, int_88231)
    
    # Testing the type of an if condition (line 701)
    if_condition_88233 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 701, 8), result_mod_88232)
    # Assigning a type to the variable 'if_condition_88233' (line 701)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 701, 8), 'if_condition_88233', if_condition_88233)
    # SSA begins for if statement (line 701)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 702):
    
    # Assigning a BinOp to a Name (line 702):
    
    # Assigning a BinOp to a Name (line 702):
    # Getting the type of 'pad_to' (line 702)
    pad_to_88234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 26), 'pad_to')
    int_88235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 702, 35), 'int')
    # Applying the binary operator '-' (line 702)
    result_sub_88236 = python_operator(stypy.reporting.localization.Localization(__file__, 702, 26), '-', pad_to_88234, int_88235)
    
    int_88237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 702, 39), 'int')
    # Applying the binary operator '//' (line 702)
    result_floordiv_88238 = python_operator(stypy.reporting.localization.Localization(__file__, 702, 25), '//', result_sub_88236, int_88237)
    
    int_88239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 702, 43), 'int')
    # Applying the binary operator '+' (line 702)
    result_add_88240 = python_operator(stypy.reporting.localization.Localization(__file__, 702, 25), '+', result_floordiv_88238, int_88239)
    
    # Assigning a type to the variable 'freqcenter' (line 702)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 702, 12), 'freqcenter', result_add_88240)
    # SSA branch for the else part of an if statement (line 701)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 704):
    
    # Assigning a BinOp to a Name (line 704):
    
    # Assigning a BinOp to a Name (line 704):
    # Getting the type of 'pad_to' (line 704)
    pad_to_88241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 25), 'pad_to')
    int_88242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 704, 33), 'int')
    # Applying the binary operator '//' (line 704)
    result_floordiv_88243 = python_operator(stypy.reporting.localization.Localization(__file__, 704, 25), '//', pad_to_88241, int_88242)
    
    # Assigning a type to the variable 'freqcenter' (line 704)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 704, 12), 'freqcenter', result_floordiv_88243)
    # SSA join for if statement (line 701)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 705):
    
    # Assigning a Num to a Name (line 705):
    
    # Assigning a Num to a Name (line 705):
    float_88244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 705, 25), 'float')
    # Assigning a type to the variable 'scaling_factor' (line 705)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 8), 'scaling_factor', float_88244)
    # SSA branch for the else part of an if statement (line 699)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'sides' (line 706)
    sides_88245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 9), 'sides')
    unicode_88246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 706, 18), 'unicode', u'onesided')
    # Applying the binary operator '==' (line 706)
    result_eq_88247 = python_operator(stypy.reporting.localization.Localization(__file__, 706, 9), '==', sides_88245, unicode_88246)
    
    # Testing the type of an if condition (line 706)
    if_condition_88248 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 706, 9), result_eq_88247)
    # Assigning a type to the variable 'if_condition_88248' (line 706)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 9), 'if_condition_88248', if_condition_88248)
    # SSA begins for if statement (line 706)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'pad_to' (line 707)
    pad_to_88249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 11), 'pad_to')
    int_88250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 707, 20), 'int')
    # Applying the binary operator '%' (line 707)
    result_mod_88251 = python_operator(stypy.reporting.localization.Localization(__file__, 707, 11), '%', pad_to_88249, int_88250)
    
    # Testing the type of an if condition (line 707)
    if_condition_88252 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 707, 8), result_mod_88251)
    # Assigning a type to the variable 'if_condition_88252' (line 707)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 8), 'if_condition_88252', if_condition_88252)
    # SSA begins for if statement (line 707)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 708):
    
    # Assigning a BinOp to a Name (line 708):
    
    # Assigning a BinOp to a Name (line 708):
    # Getting the type of 'pad_to' (line 708)
    pad_to_88253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 24), 'pad_to')
    int_88254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 33), 'int')
    # Applying the binary operator '+' (line 708)
    result_add_88255 = python_operator(stypy.reporting.localization.Localization(__file__, 708, 24), '+', pad_to_88253, int_88254)
    
    int_88256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 37), 'int')
    # Applying the binary operator '//' (line 708)
    result_floordiv_88257 = python_operator(stypy.reporting.localization.Localization(__file__, 708, 23), '//', result_add_88255, int_88256)
    
    # Assigning a type to the variable 'numFreqs' (line 708)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 708, 12), 'numFreqs', result_floordiv_88257)
    # SSA branch for the else part of an if statement (line 707)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 710):
    
    # Assigning a BinOp to a Name (line 710):
    
    # Assigning a BinOp to a Name (line 710):
    # Getting the type of 'pad_to' (line 710)
    pad_to_88258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 23), 'pad_to')
    int_88259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 31), 'int')
    # Applying the binary operator '//' (line 710)
    result_floordiv_88260 = python_operator(stypy.reporting.localization.Localization(__file__, 710, 23), '//', pad_to_88258, int_88259)
    
    int_88261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 35), 'int')
    # Applying the binary operator '+' (line 710)
    result_add_88262 = python_operator(stypy.reporting.localization.Localization(__file__, 710, 23), '+', result_floordiv_88260, int_88261)
    
    # Assigning a type to the variable 'numFreqs' (line 710)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 12), 'numFreqs', result_add_88262)
    # SSA join for if statement (line 707)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 711):
    
    # Assigning a Num to a Name (line 711):
    
    # Assigning a Num to a Name (line 711):
    float_88263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 25), 'float')
    # Assigning a type to the variable 'scaling_factor' (line 711)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 8), 'scaling_factor', float_88263)
    # SSA join for if statement (line 706)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 699)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 713):
    
    # Assigning a Call to a Name (line 713):
    
    # Assigning a Call to a Name (line 713):
    
    # Call to stride_windows(...): (line 713)
    # Processing the call arguments (line 713)
    # Getting the type of 'x' (line 713)
    x_88265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 28), 'x', False)
    # Getting the type of 'NFFT' (line 713)
    NFFT_88266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 31), 'NFFT', False)
    # Getting the type of 'noverlap' (line 713)
    noverlap_88267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 37), 'noverlap', False)
    # Processing the call keyword arguments (line 713)
    int_88268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 713, 52), 'int')
    keyword_88269 = int_88268
    kwargs_88270 = {'axis': keyword_88269}
    # Getting the type of 'stride_windows' (line 713)
    stride_windows_88264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 13), 'stride_windows', False)
    # Calling stride_windows(args, kwargs) (line 713)
    stride_windows_call_result_88271 = invoke(stypy.reporting.localization.Localization(__file__, 713, 13), stride_windows_88264, *[x_88265, NFFT_88266, noverlap_88267], **kwargs_88270)
    
    # Assigning a type to the variable 'result' (line 713)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 4), 'result', stride_windows_call_result_88271)
    
    # Assigning a Call to a Name (line 714):
    
    # Assigning a Call to a Name (line 714):
    
    # Assigning a Call to a Name (line 714):
    
    # Call to detrend(...): (line 714)
    # Processing the call arguments (line 714)
    # Getting the type of 'result' (line 714)
    result_88273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 21), 'result', False)
    # Getting the type of 'detrend_func' (line 714)
    detrend_func_88274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 29), 'detrend_func', False)
    # Processing the call keyword arguments (line 714)
    int_88275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 714, 48), 'int')
    keyword_88276 = int_88275
    kwargs_88277 = {'axis': keyword_88276}
    # Getting the type of 'detrend' (line 714)
    detrend_88272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 13), 'detrend', False)
    # Calling detrend(args, kwargs) (line 714)
    detrend_call_result_88278 = invoke(stypy.reporting.localization.Localization(__file__, 714, 13), detrend_88272, *[result_88273, detrend_func_88274], **kwargs_88277)
    
    # Assigning a type to the variable 'result' (line 714)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 714, 4), 'result', detrend_call_result_88278)
    
    # Assigning a Call to a Tuple (line 715):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to apply_window(...): (line 715)
    # Processing the call arguments (line 715)
    # Getting the type of 'result' (line 715)
    result_88280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 38), 'result', False)
    # Getting the type of 'window' (line 715)
    window_88281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 46), 'window', False)
    # Processing the call keyword arguments (line 715)
    int_88282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 59), 'int')
    keyword_88283 = int_88282
    # Getting the type of 'True' (line 716)
    True_88284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 52), 'True', False)
    keyword_88285 = True_88284
    kwargs_88286 = {'return_window': keyword_88285, 'axis': keyword_88283}
    # Getting the type of 'apply_window' (line 715)
    apply_window_88279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 25), 'apply_window', False)
    # Calling apply_window(args, kwargs) (line 715)
    apply_window_call_result_88287 = invoke(stypy.reporting.localization.Localization(__file__, 715, 25), apply_window_88279, *[result_88280, window_88281], **kwargs_88286)
    
    # Assigning a type to the variable 'call_assignment_87224' (line 715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 4), 'call_assignment_87224', apply_window_call_result_88287)
    
    # Assigning a Call to a Name (line 715):
    
    # Assigning a Call to a Name (line 715):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_88290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 4), 'int')
    # Processing the call keyword arguments
    kwargs_88291 = {}
    # Getting the type of 'call_assignment_87224' (line 715)
    call_assignment_87224_88288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 4), 'call_assignment_87224', False)
    # Obtaining the member '__getitem__' of a type (line 715)
    getitem___88289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 4), call_assignment_87224_88288, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_88292 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___88289, *[int_88290], **kwargs_88291)
    
    # Assigning a type to the variable 'call_assignment_87225' (line 715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 4), 'call_assignment_87225', getitem___call_result_88292)
    
    # Assigning a Name to a Name (line 715):
    
    # Assigning a Name to a Name (line 715):
    # Getting the type of 'call_assignment_87225' (line 715)
    call_assignment_87225_88293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 4), 'call_assignment_87225')
    # Assigning a type to the variable 'result' (line 715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 4), 'result', call_assignment_87225_88293)
    
    # Assigning a Call to a Name (line 715):
    
    # Assigning a Call to a Name (line 715):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_88296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 4), 'int')
    # Processing the call keyword arguments
    kwargs_88297 = {}
    # Getting the type of 'call_assignment_87224' (line 715)
    call_assignment_87224_88294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 4), 'call_assignment_87224', False)
    # Obtaining the member '__getitem__' of a type (line 715)
    getitem___88295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 4), call_assignment_87224_88294, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_88298 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___88295, *[int_88296], **kwargs_88297)
    
    # Assigning a type to the variable 'call_assignment_87226' (line 715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 4), 'call_assignment_87226', getitem___call_result_88298)
    
    # Assigning a Name to a Name (line 715):
    
    # Assigning a Name to a Name (line 715):
    # Getting the type of 'call_assignment_87226' (line 715)
    call_assignment_87226_88299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 4), 'call_assignment_87226')
    # Assigning a type to the variable 'windowVals' (line 715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 12), 'windowVals', call_assignment_87226_88299)
    
    # Assigning a Subscript to a Name (line 717):
    
    # Assigning a Subscript to a Name (line 717):
    
    # Assigning a Subscript to a Name (line 717):
    
    # Obtaining the type of the subscript
    # Getting the type of 'numFreqs' (line 717)
    numFreqs_88300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 51), 'numFreqs')
    slice_88301 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 717, 13), None, numFreqs_88300, None)
    slice_88302 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 717, 13), None, None, None)
    
    # Call to fft(...): (line 717)
    # Processing the call arguments (line 717)
    # Getting the type of 'result' (line 717)
    result_88306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 24), 'result', False)
    # Processing the call keyword arguments (line 717)
    # Getting the type of 'pad_to' (line 717)
    pad_to_88307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 34), 'pad_to', False)
    keyword_88308 = pad_to_88307
    int_88309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 717, 47), 'int')
    keyword_88310 = int_88309
    kwargs_88311 = {'axis': keyword_88310, 'n': keyword_88308}
    # Getting the type of 'np' (line 717)
    np_88303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 13), 'np', False)
    # Obtaining the member 'fft' of a type (line 717)
    fft_88304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 13), np_88303, 'fft')
    # Obtaining the member 'fft' of a type (line 717)
    fft_88305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 13), fft_88304, 'fft')
    # Calling fft(args, kwargs) (line 717)
    fft_call_result_88312 = invoke(stypy.reporting.localization.Localization(__file__, 717, 13), fft_88305, *[result_88306], **kwargs_88311)
    
    # Obtaining the member '__getitem__' of a type (line 717)
    getitem___88313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 13), fft_call_result_88312, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 717)
    subscript_call_result_88314 = invoke(stypy.reporting.localization.Localization(__file__, 717, 13), getitem___88313, (slice_88301, slice_88302))
    
    # Assigning a type to the variable 'result' (line 717)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 717, 4), 'result', subscript_call_result_88314)
    
    # Assigning a Subscript to a Name (line 718):
    
    # Assigning a Subscript to a Name (line 718):
    
    # Assigning a Subscript to a Name (line 718):
    
    # Obtaining the type of the subscript
    # Getting the type of 'numFreqs' (line 718)
    numFreqs_88315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 42), 'numFreqs')
    slice_88316 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 718, 12), None, numFreqs_88315, None)
    
    # Call to fftfreq(...): (line 718)
    # Processing the call arguments (line 718)
    # Getting the type of 'pad_to' (line 718)
    pad_to_88320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 27), 'pad_to', False)
    int_88321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 718, 35), 'int')
    # Getting the type of 'Fs' (line 718)
    Fs_88322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 37), 'Fs', False)
    # Applying the binary operator 'div' (line 718)
    result_div_88323 = python_operator(stypy.reporting.localization.Localization(__file__, 718, 35), 'div', int_88321, Fs_88322)
    
    # Processing the call keyword arguments (line 718)
    kwargs_88324 = {}
    # Getting the type of 'np' (line 718)
    np_88317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 12), 'np', False)
    # Obtaining the member 'fft' of a type (line 718)
    fft_88318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 12), np_88317, 'fft')
    # Obtaining the member 'fftfreq' of a type (line 718)
    fftfreq_88319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 12), fft_88318, 'fftfreq')
    # Calling fftfreq(args, kwargs) (line 718)
    fftfreq_call_result_88325 = invoke(stypy.reporting.localization.Localization(__file__, 718, 12), fftfreq_88319, *[pad_to_88320, result_div_88323], **kwargs_88324)
    
    # Obtaining the member '__getitem__' of a type (line 718)
    getitem___88326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 12), fftfreq_call_result_88325, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 718)
    subscript_call_result_88327 = invoke(stypy.reporting.localization.Localization(__file__, 718, 12), getitem___88326, slice_88316)
    
    # Assigning a type to the variable 'freqs' (line 718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 4), 'freqs', subscript_call_result_88327)
    
    
    # Getting the type of 'same_data' (line 720)
    same_data_88328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 11), 'same_data')
    # Applying the 'not' unary operator (line 720)
    result_not__88329 = python_operator(stypy.reporting.localization.Localization(__file__, 720, 7), 'not', same_data_88328)
    
    # Testing the type of an if condition (line 720)
    if_condition_88330 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 720, 4), result_not__88329)
    # Assigning a type to the variable 'if_condition_88330' (line 720)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 720, 4), 'if_condition_88330', if_condition_88330)
    # SSA begins for if statement (line 720)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 722):
    
    # Assigning a Call to a Name (line 722):
    
    # Assigning a Call to a Name (line 722):
    
    # Call to stride_windows(...): (line 722)
    # Processing the call arguments (line 722)
    # Getting the type of 'y' (line 722)
    y_88332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 33), 'y', False)
    # Getting the type of 'NFFT' (line 722)
    NFFT_88333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 36), 'NFFT', False)
    # Getting the type of 'noverlap' (line 722)
    noverlap_88334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 42), 'noverlap', False)
    # Processing the call keyword arguments (line 722)
    kwargs_88335 = {}
    # Getting the type of 'stride_windows' (line 722)
    stride_windows_88331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 18), 'stride_windows', False)
    # Calling stride_windows(args, kwargs) (line 722)
    stride_windows_call_result_88336 = invoke(stypy.reporting.localization.Localization(__file__, 722, 18), stride_windows_88331, *[y_88332, NFFT_88333, noverlap_88334], **kwargs_88335)
    
    # Assigning a type to the variable 'resultY' (line 722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 722, 8), 'resultY', stride_windows_call_result_88336)
    
    # Assigning a Call to a Name (line 723):
    
    # Assigning a Call to a Name (line 723):
    
    # Assigning a Call to a Name (line 723):
    
    # Call to apply_window(...): (line 723)
    # Processing the call arguments (line 723)
    # Getting the type of 'resultY' (line 723)
    resultY_88338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 31), 'resultY', False)
    # Getting the type of 'window' (line 723)
    window_88339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 40), 'window', False)
    # Processing the call keyword arguments (line 723)
    int_88340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, 53), 'int')
    keyword_88341 = int_88340
    kwargs_88342 = {'axis': keyword_88341}
    # Getting the type of 'apply_window' (line 723)
    apply_window_88337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 18), 'apply_window', False)
    # Calling apply_window(args, kwargs) (line 723)
    apply_window_call_result_88343 = invoke(stypy.reporting.localization.Localization(__file__, 723, 18), apply_window_88337, *[resultY_88338, window_88339], **kwargs_88342)
    
    # Assigning a type to the variable 'resultY' (line 723)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 723, 8), 'resultY', apply_window_call_result_88343)
    
    # Assigning a Call to a Name (line 724):
    
    # Assigning a Call to a Name (line 724):
    
    # Assigning a Call to a Name (line 724):
    
    # Call to detrend(...): (line 724)
    # Processing the call arguments (line 724)
    # Getting the type of 'resultY' (line 724)
    resultY_88345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 26), 'resultY', False)
    # Getting the type of 'detrend_func' (line 724)
    detrend_func_88346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 35), 'detrend_func', False)
    # Processing the call keyword arguments (line 724)
    int_88347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 724, 54), 'int')
    keyword_88348 = int_88347
    kwargs_88349 = {'axis': keyword_88348}
    # Getting the type of 'detrend' (line 724)
    detrend_88344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 18), 'detrend', False)
    # Calling detrend(args, kwargs) (line 724)
    detrend_call_result_88350 = invoke(stypy.reporting.localization.Localization(__file__, 724, 18), detrend_88344, *[resultY_88345, detrend_func_88346], **kwargs_88349)
    
    # Assigning a type to the variable 'resultY' (line 724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 724, 8), 'resultY', detrend_call_result_88350)
    
    # Assigning a Subscript to a Name (line 725):
    
    # Assigning a Subscript to a Name (line 725):
    
    # Assigning a Subscript to a Name (line 725):
    
    # Obtaining the type of the subscript
    # Getting the type of 'numFreqs' (line 725)
    numFreqs_88351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 57), 'numFreqs')
    slice_88352 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 725, 18), None, numFreqs_88351, None)
    slice_88353 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 725, 18), None, None, None)
    
    # Call to fft(...): (line 725)
    # Processing the call arguments (line 725)
    # Getting the type of 'resultY' (line 725)
    resultY_88357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 29), 'resultY', False)
    # Processing the call keyword arguments (line 725)
    # Getting the type of 'pad_to' (line 725)
    pad_to_88358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 40), 'pad_to', False)
    keyword_88359 = pad_to_88358
    int_88360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, 53), 'int')
    keyword_88361 = int_88360
    kwargs_88362 = {'axis': keyword_88361, 'n': keyword_88359}
    # Getting the type of 'np' (line 725)
    np_88354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 18), 'np', False)
    # Obtaining the member 'fft' of a type (line 725)
    fft_88355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 18), np_88354, 'fft')
    # Obtaining the member 'fft' of a type (line 725)
    fft_88356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 18), fft_88355, 'fft')
    # Calling fft(args, kwargs) (line 725)
    fft_call_result_88363 = invoke(stypy.reporting.localization.Localization(__file__, 725, 18), fft_88356, *[resultY_88357], **kwargs_88362)
    
    # Obtaining the member '__getitem__' of a type (line 725)
    getitem___88364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 18), fft_call_result_88363, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 725)
    subscript_call_result_88365 = invoke(stypy.reporting.localization.Localization(__file__, 725, 18), getitem___88364, (slice_88352, slice_88353))
    
    # Assigning a type to the variable 'resultY' (line 725)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 8), 'resultY', subscript_call_result_88365)
    
    # Assigning a BinOp to a Name (line 726):
    
    # Assigning a BinOp to a Name (line 726):
    
    # Assigning a BinOp to a Name (line 726):
    
    # Call to conj(...): (line 726)
    # Processing the call arguments (line 726)
    # Getting the type of 'result' (line 726)
    result_88368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 25), 'result', False)
    # Processing the call keyword arguments (line 726)
    kwargs_88369 = {}
    # Getting the type of 'np' (line 726)
    np_88366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 17), 'np', False)
    # Obtaining the member 'conj' of a type (line 726)
    conj_88367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 726, 17), np_88366, 'conj')
    # Calling conj(args, kwargs) (line 726)
    conj_call_result_88370 = invoke(stypy.reporting.localization.Localization(__file__, 726, 17), conj_88367, *[result_88368], **kwargs_88369)
    
    # Getting the type of 'resultY' (line 726)
    resultY_88371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 35), 'resultY')
    # Applying the binary operator '*' (line 726)
    result_mul_88372 = python_operator(stypy.reporting.localization.Localization(__file__, 726, 17), '*', conj_call_result_88370, resultY_88371)
    
    # Assigning a type to the variable 'result' (line 726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 726, 8), 'result', result_mul_88372)
    # SSA branch for the else part of an if statement (line 720)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'mode' (line 727)
    mode_88373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 9), 'mode')
    unicode_88374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 17), 'unicode', u'psd')
    # Applying the binary operator '==' (line 727)
    result_eq_88375 = python_operator(stypy.reporting.localization.Localization(__file__, 727, 9), '==', mode_88373, unicode_88374)
    
    # Testing the type of an if condition (line 727)
    if_condition_88376 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 727, 9), result_eq_88375)
    # Assigning a type to the variable 'if_condition_88376' (line 727)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 9), 'if_condition_88376', if_condition_88376)
    # SSA begins for if statement (line 727)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 728):
    
    # Assigning a BinOp to a Name (line 728):
    
    # Assigning a BinOp to a Name (line 728):
    
    # Call to conj(...): (line 728)
    # Processing the call arguments (line 728)
    # Getting the type of 'result' (line 728)
    result_88379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 25), 'result', False)
    # Processing the call keyword arguments (line 728)
    kwargs_88380 = {}
    # Getting the type of 'np' (line 728)
    np_88377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 17), 'np', False)
    # Obtaining the member 'conj' of a type (line 728)
    conj_88378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 17), np_88377, 'conj')
    # Calling conj(args, kwargs) (line 728)
    conj_call_result_88381 = invoke(stypy.reporting.localization.Localization(__file__, 728, 17), conj_88378, *[result_88379], **kwargs_88380)
    
    # Getting the type of 'result' (line 728)
    result_88382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 35), 'result')
    # Applying the binary operator '*' (line 728)
    result_mul_88383 = python_operator(stypy.reporting.localization.Localization(__file__, 728, 17), '*', conj_call_result_88381, result_88382)
    
    # Assigning a type to the variable 'result' (line 728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 8), 'result', result_mul_88383)
    # SSA branch for the else part of an if statement (line 727)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'mode' (line 729)
    mode_88384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 9), 'mode')
    unicode_88385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 17), 'unicode', u'magnitude')
    # Applying the binary operator '==' (line 729)
    result_eq_88386 = python_operator(stypy.reporting.localization.Localization(__file__, 729, 9), '==', mode_88384, unicode_88385)
    
    # Testing the type of an if condition (line 729)
    if_condition_88387 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 729, 9), result_eq_88386)
    # Assigning a type to the variable 'if_condition_88387' (line 729)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 9), 'if_condition_88387', if_condition_88387)
    # SSA begins for if statement (line 729)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 730):
    
    # Assigning a BinOp to a Name (line 730):
    
    # Assigning a BinOp to a Name (line 730):
    
    # Call to abs(...): (line 730)
    # Processing the call arguments (line 730)
    # Getting the type of 'result' (line 730)
    result_88390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 24), 'result', False)
    # Processing the call keyword arguments (line 730)
    kwargs_88391 = {}
    # Getting the type of 'np' (line 730)
    np_88388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 17), 'np', False)
    # Obtaining the member 'abs' of a type (line 730)
    abs_88389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 17), np_88388, 'abs')
    # Calling abs(args, kwargs) (line 730)
    abs_call_result_88392 = invoke(stypy.reporting.localization.Localization(__file__, 730, 17), abs_88389, *[result_88390], **kwargs_88391)
    
    
    # Call to sum(...): (line 730)
    # Processing the call keyword arguments (line 730)
    kwargs_88399 = {}
    
    # Call to abs(...): (line 730)
    # Processing the call arguments (line 730)
    # Getting the type of 'windowVals' (line 730)
    windowVals_88395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 41), 'windowVals', False)
    # Processing the call keyword arguments (line 730)
    kwargs_88396 = {}
    # Getting the type of 'np' (line 730)
    np_88393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 34), 'np', False)
    # Obtaining the member 'abs' of a type (line 730)
    abs_88394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 34), np_88393, 'abs')
    # Calling abs(args, kwargs) (line 730)
    abs_call_result_88397 = invoke(stypy.reporting.localization.Localization(__file__, 730, 34), abs_88394, *[windowVals_88395], **kwargs_88396)
    
    # Obtaining the member 'sum' of a type (line 730)
    sum_88398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 34), abs_call_result_88397, 'sum')
    # Calling sum(args, kwargs) (line 730)
    sum_call_result_88400 = invoke(stypy.reporting.localization.Localization(__file__, 730, 34), sum_88398, *[], **kwargs_88399)
    
    # Applying the binary operator 'div' (line 730)
    result_div_88401 = python_operator(stypy.reporting.localization.Localization(__file__, 730, 17), 'div', abs_call_result_88392, sum_call_result_88400)
    
    # Assigning a type to the variable 'result' (line 730)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 8), 'result', result_div_88401)
    # SSA branch for the else part of an if statement (line 729)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'mode' (line 731)
    mode_88402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 9), 'mode')
    unicode_88403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 17), 'unicode', u'angle')
    # Applying the binary operator '==' (line 731)
    result_eq_88404 = python_operator(stypy.reporting.localization.Localization(__file__, 731, 9), '==', mode_88402, unicode_88403)
    
    
    # Getting the type of 'mode' (line 731)
    mode_88405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 28), 'mode')
    unicode_88406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 36), 'unicode', u'phase')
    # Applying the binary operator '==' (line 731)
    result_eq_88407 = python_operator(stypy.reporting.localization.Localization(__file__, 731, 28), '==', mode_88405, unicode_88406)
    
    # Applying the binary operator 'or' (line 731)
    result_or_keyword_88408 = python_operator(stypy.reporting.localization.Localization(__file__, 731, 9), 'or', result_eq_88404, result_eq_88407)
    
    # Testing the type of an if condition (line 731)
    if_condition_88409 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 731, 9), result_or_keyword_88408)
    # Assigning a type to the variable 'if_condition_88409' (line 731)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 9), 'if_condition_88409', if_condition_88409)
    # SSA begins for if statement (line 731)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 733):
    
    # Assigning a Call to a Name (line 733):
    
    # Assigning a Call to a Name (line 733):
    
    # Call to angle(...): (line 733)
    # Processing the call arguments (line 733)
    # Getting the type of 'result' (line 733)
    result_88412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 26), 'result', False)
    # Processing the call keyword arguments (line 733)
    kwargs_88413 = {}
    # Getting the type of 'np' (line 733)
    np_88410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 17), 'np', False)
    # Obtaining the member 'angle' of a type (line 733)
    angle_88411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 17), np_88410, 'angle')
    # Calling angle(args, kwargs) (line 733)
    angle_call_result_88414 = invoke(stypy.reporting.localization.Localization(__file__, 733, 17), angle_88411, *[result_88412], **kwargs_88413)
    
    # Assigning a type to the variable 'result' (line 733)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 733, 8), 'result', angle_call_result_88414)
    # SSA branch for the else part of an if statement (line 731)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'mode' (line 734)
    mode_88415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 9), 'mode')
    unicode_88416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 17), 'unicode', u'complex')
    # Applying the binary operator '==' (line 734)
    result_eq_88417 = python_operator(stypy.reporting.localization.Localization(__file__, 734, 9), '==', mode_88415, unicode_88416)
    
    # Testing the type of an if condition (line 734)
    if_condition_88418 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 734, 9), result_eq_88417)
    # Assigning a type to the variable 'if_condition_88418' (line 734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 9), 'if_condition_88418', if_condition_88418)
    # SSA begins for if statement (line 734)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'result' (line 735)
    result_88419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 8), 'result')
    
    # Call to sum(...): (line 735)
    # Processing the call keyword arguments (line 735)
    kwargs_88426 = {}
    
    # Call to abs(...): (line 735)
    # Processing the call arguments (line 735)
    # Getting the type of 'windowVals' (line 735)
    windowVals_88422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 25), 'windowVals', False)
    # Processing the call keyword arguments (line 735)
    kwargs_88423 = {}
    # Getting the type of 'np' (line 735)
    np_88420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 18), 'np', False)
    # Obtaining the member 'abs' of a type (line 735)
    abs_88421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 18), np_88420, 'abs')
    # Calling abs(args, kwargs) (line 735)
    abs_call_result_88424 = invoke(stypy.reporting.localization.Localization(__file__, 735, 18), abs_88421, *[windowVals_88422], **kwargs_88423)
    
    # Obtaining the member 'sum' of a type (line 735)
    sum_88425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 18), abs_call_result_88424, 'sum')
    # Calling sum(args, kwargs) (line 735)
    sum_call_result_88427 = invoke(stypy.reporting.localization.Localization(__file__, 735, 18), sum_88425, *[], **kwargs_88426)
    
    # Applying the binary operator 'div=' (line 735)
    result_div_88428 = python_operator(stypy.reporting.localization.Localization(__file__, 735, 8), 'div=', result_88419, sum_call_result_88427)
    # Assigning a type to the variable 'result' (line 735)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 735, 8), 'result', result_div_88428)
    
    # SSA join for if statement (line 734)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 731)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 729)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 727)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 720)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'mode' (line 737)
    mode_88429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 7), 'mode')
    unicode_88430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 737, 15), 'unicode', u'psd')
    # Applying the binary operator '==' (line 737)
    result_eq_88431 = python_operator(stypy.reporting.localization.Localization(__file__, 737, 7), '==', mode_88429, unicode_88430)
    
    # Testing the type of an if condition (line 737)
    if_condition_88432 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 737, 4), result_eq_88431)
    # Assigning a type to the variable 'if_condition_88432' (line 737)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 4), 'if_condition_88432', if_condition_88432)
    # SSA begins for if statement (line 737)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'NFFT' (line 744)
    NFFT_88433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 15), 'NFFT')
    int_88434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 744, 22), 'int')
    # Applying the binary operator '%' (line 744)
    result_mod_88435 = python_operator(stypy.reporting.localization.Localization(__file__, 744, 15), '%', NFFT_88433, int_88434)
    
    # Applying the 'not' unary operator (line 744)
    result_not__88436 = python_operator(stypy.reporting.localization.Localization(__file__, 744, 11), 'not', result_mod_88435)
    
    # Testing the type of an if condition (line 744)
    if_condition_88437 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 744, 8), result_not__88436)
    # Assigning a type to the variable 'if_condition_88437' (line 744)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 744, 8), 'if_condition_88437', if_condition_88437)
    # SSA begins for if statement (line 744)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 745):
    
    # Assigning a Call to a Name (line 745):
    
    # Assigning a Call to a Name (line 745):
    
    # Call to slice(...): (line 745)
    # Processing the call arguments (line 745)
    int_88439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 745, 24), 'int')
    int_88440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 745, 27), 'int')
    # Getting the type of 'None' (line 745)
    None_88441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 31), 'None', False)
    # Processing the call keyword arguments (line 745)
    kwargs_88442 = {}
    # Getting the type of 'slice' (line 745)
    slice_88438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 18), 'slice', False)
    # Calling slice(args, kwargs) (line 745)
    slice_call_result_88443 = invoke(stypy.reporting.localization.Localization(__file__, 745, 18), slice_88438, *[int_88439, int_88440, None_88441], **kwargs_88442)
    
    # Assigning a type to the variable 'slc' (line 745)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 745, 12), 'slc', slice_call_result_88443)
    # SSA branch for the else part of an if statement (line 744)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 748):
    
    # Assigning a Call to a Name (line 748):
    
    # Assigning a Call to a Name (line 748):
    
    # Call to slice(...): (line 748)
    # Processing the call arguments (line 748)
    int_88445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 748, 24), 'int')
    # Getting the type of 'None' (line 748)
    None_88446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 27), 'None', False)
    # Getting the type of 'None' (line 748)
    None_88447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 33), 'None', False)
    # Processing the call keyword arguments (line 748)
    kwargs_88448 = {}
    # Getting the type of 'slice' (line 748)
    slice_88444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 18), 'slice', False)
    # Calling slice(args, kwargs) (line 748)
    slice_call_result_88449 = invoke(stypy.reporting.localization.Localization(__file__, 748, 18), slice_88444, *[int_88445, None_88446, None_88447], **kwargs_88448)
    
    # Assigning a type to the variable 'slc' (line 748)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 12), 'slc', slice_call_result_88449)
    # SSA join for if statement (line 744)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'result' (line 750)
    result_88450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 8), 'result')
    
    # Obtaining the type of the subscript
    # Getting the type of 'slc' (line 750)
    slc_88451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 15), 'slc')
    # Getting the type of 'result' (line 750)
    result_88452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 8), 'result')
    # Obtaining the member '__getitem__' of a type (line 750)
    getitem___88453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 8), result_88452, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 750)
    subscript_call_result_88454 = invoke(stypy.reporting.localization.Localization(__file__, 750, 8), getitem___88453, slc_88451)
    
    # Getting the type of 'scaling_factor' (line 750)
    scaling_factor_88455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 23), 'scaling_factor')
    # Applying the binary operator '*=' (line 750)
    result_imul_88456 = python_operator(stypy.reporting.localization.Localization(__file__, 750, 8), '*=', subscript_call_result_88454, scaling_factor_88455)
    # Getting the type of 'result' (line 750)
    result_88457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 8), 'result')
    # Getting the type of 'slc' (line 750)
    slc_88458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 15), 'slc')
    # Storing an element on a container (line 750)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 750, 8), result_88457, (slc_88458, result_imul_88456))
    
    
    # Getting the type of 'scale_by_freq' (line 755)
    scale_by_freq_88459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 11), 'scale_by_freq')
    # Testing the type of an if condition (line 755)
    if_condition_88460 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 755, 8), scale_by_freq_88459)
    # Assigning a type to the variable 'if_condition_88460' (line 755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 8), 'if_condition_88460', if_condition_88460)
    # SSA begins for if statement (line 755)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'result' (line 756)
    result_88461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 12), 'result')
    # Getting the type of 'Fs' (line 756)
    Fs_88462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 22), 'Fs')
    # Applying the binary operator 'div=' (line 756)
    result_div_88463 = python_operator(stypy.reporting.localization.Localization(__file__, 756, 12), 'div=', result_88461, Fs_88462)
    # Assigning a type to the variable 'result' (line 756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 12), 'result', result_div_88463)
    
    
    # Getting the type of 'result' (line 759)
    result_88464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 12), 'result')
    
    # Call to sum(...): (line 759)
    # Processing the call keyword arguments (line 759)
    kwargs_88473 = {}
    
    # Call to abs(...): (line 759)
    # Processing the call arguments (line 759)
    # Getting the type of 'windowVals' (line 759)
    windowVals_88467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 30), 'windowVals', False)
    # Processing the call keyword arguments (line 759)
    kwargs_88468 = {}
    # Getting the type of 'np' (line 759)
    np_88465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 23), 'np', False)
    # Obtaining the member 'abs' of a type (line 759)
    abs_88466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 23), np_88465, 'abs')
    # Calling abs(args, kwargs) (line 759)
    abs_call_result_88469 = invoke(stypy.reporting.localization.Localization(__file__, 759, 23), abs_88466, *[windowVals_88467], **kwargs_88468)
    
    int_88470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 43), 'int')
    # Applying the binary operator '**' (line 759)
    result_pow_88471 = python_operator(stypy.reporting.localization.Localization(__file__, 759, 23), '**', abs_call_result_88469, int_88470)
    
    # Obtaining the member 'sum' of a type (line 759)
    sum_88472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 23), result_pow_88471, 'sum')
    # Calling sum(args, kwargs) (line 759)
    sum_call_result_88474 = invoke(stypy.reporting.localization.Localization(__file__, 759, 23), sum_88472, *[], **kwargs_88473)
    
    # Applying the binary operator 'div=' (line 759)
    result_div_88475 = python_operator(stypy.reporting.localization.Localization(__file__, 759, 12), 'div=', result_88464, sum_call_result_88474)
    # Assigning a type to the variable 'result' (line 759)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 759, 12), 'result', result_div_88475)
    
    # SSA branch for the else part of an if statement (line 755)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'result' (line 762)
    result_88476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 12), 'result')
    
    # Call to sum(...): (line 762)
    # Processing the call keyword arguments (line 762)
    kwargs_88483 = {}
    
    # Call to abs(...): (line 762)
    # Processing the call arguments (line 762)
    # Getting the type of 'windowVals' (line 762)
    windowVals_88479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 29), 'windowVals', False)
    # Processing the call keyword arguments (line 762)
    kwargs_88480 = {}
    # Getting the type of 'np' (line 762)
    np_88477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 22), 'np', False)
    # Obtaining the member 'abs' of a type (line 762)
    abs_88478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 22), np_88477, 'abs')
    # Calling abs(args, kwargs) (line 762)
    abs_call_result_88481 = invoke(stypy.reporting.localization.Localization(__file__, 762, 22), abs_88478, *[windowVals_88479], **kwargs_88480)
    
    # Obtaining the member 'sum' of a type (line 762)
    sum_88482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 22), abs_call_result_88481, 'sum')
    # Calling sum(args, kwargs) (line 762)
    sum_call_result_88484 = invoke(stypy.reporting.localization.Localization(__file__, 762, 22), sum_88482, *[], **kwargs_88483)
    
    int_88485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 762, 48), 'int')
    # Applying the binary operator '**' (line 762)
    result_pow_88486 = python_operator(stypy.reporting.localization.Localization(__file__, 762, 22), '**', sum_call_result_88484, int_88485)
    
    # Applying the binary operator 'div=' (line 762)
    result_div_88487 = python_operator(stypy.reporting.localization.Localization(__file__, 762, 12), 'div=', result_88476, result_pow_88486)
    # Assigning a type to the variable 'result' (line 762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 762, 12), 'result', result_div_88487)
    
    # SSA join for if statement (line 755)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 737)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 764):
    
    # Assigning a BinOp to a Name (line 764):
    
    # Assigning a BinOp to a Name (line 764):
    
    # Call to arange(...): (line 764)
    # Processing the call arguments (line 764)
    # Getting the type of 'NFFT' (line 764)
    NFFT_88490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 18), 'NFFT', False)
    int_88491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 764, 23), 'int')
    # Applying the binary operator 'div' (line 764)
    result_div_88492 = python_operator(stypy.reporting.localization.Localization(__file__, 764, 18), 'div', NFFT_88490, int_88491)
    
    
    # Call to len(...): (line 764)
    # Processing the call arguments (line 764)
    # Getting the type of 'x' (line 764)
    x_88494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 30), 'x', False)
    # Processing the call keyword arguments (line 764)
    kwargs_88495 = {}
    # Getting the type of 'len' (line 764)
    len_88493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 26), 'len', False)
    # Calling len(args, kwargs) (line 764)
    len_call_result_88496 = invoke(stypy.reporting.localization.Localization(__file__, 764, 26), len_88493, *[x_88494], **kwargs_88495)
    
    # Getting the type of 'NFFT' (line 764)
    NFFT_88497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 35), 'NFFT', False)
    int_88498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 764, 40), 'int')
    # Applying the binary operator 'div' (line 764)
    result_div_88499 = python_operator(stypy.reporting.localization.Localization(__file__, 764, 35), 'div', NFFT_88497, int_88498)
    
    # Applying the binary operator '-' (line 764)
    result_sub_88500 = python_operator(stypy.reporting.localization.Localization(__file__, 764, 26), '-', len_call_result_88496, result_div_88499)
    
    int_88501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 764, 44), 'int')
    # Applying the binary operator '+' (line 764)
    result_add_88502 = python_operator(stypy.reporting.localization.Localization(__file__, 764, 42), '+', result_sub_88500, int_88501)
    
    # Getting the type of 'NFFT' (line 764)
    NFFT_88503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 47), 'NFFT', False)
    # Getting the type of 'noverlap' (line 764)
    noverlap_88504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 54), 'noverlap', False)
    # Applying the binary operator '-' (line 764)
    result_sub_88505 = python_operator(stypy.reporting.localization.Localization(__file__, 764, 47), '-', NFFT_88503, noverlap_88504)
    
    # Processing the call keyword arguments (line 764)
    kwargs_88506 = {}
    # Getting the type of 'np' (line 764)
    np_88488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 8), 'np', False)
    # Obtaining the member 'arange' of a type (line 764)
    arange_88489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 764, 8), np_88488, 'arange')
    # Calling arange(args, kwargs) (line 764)
    arange_call_result_88507 = invoke(stypy.reporting.localization.Localization(__file__, 764, 8), arange_88489, *[result_div_88492, result_add_88502, result_sub_88505], **kwargs_88506)
    
    # Getting the type of 'Fs' (line 764)
    Fs_88508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 64), 'Fs')
    # Applying the binary operator 'div' (line 764)
    result_div_88509 = python_operator(stypy.reporting.localization.Localization(__file__, 764, 8), 'div', arange_call_result_88507, Fs_88508)
    
    # Assigning a type to the variable 't' (line 764)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 764, 4), 't', result_div_88509)
    
    
    # Getting the type of 'sides' (line 766)
    sides_88510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 7), 'sides')
    unicode_88511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 16), 'unicode', u'twosided')
    # Applying the binary operator '==' (line 766)
    result_eq_88512 = python_operator(stypy.reporting.localization.Localization(__file__, 766, 7), '==', sides_88510, unicode_88511)
    
    # Testing the type of an if condition (line 766)
    if_condition_88513 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 766, 4), result_eq_88512)
    # Assigning a type to the variable 'if_condition_88513' (line 766)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 766, 4), 'if_condition_88513', if_condition_88513)
    # SSA begins for if statement (line 766)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 768):
    
    # Assigning a Call to a Name (line 768):
    
    # Assigning a Call to a Name (line 768):
    
    # Call to concatenate(...): (line 768)
    # Processing the call arguments (line 768)
    
    # Obtaining an instance of the builtin type 'tuple' (line 768)
    tuple_88516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 768, 32), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 768)
    # Adding element type (line 768)
    
    # Obtaining the type of the subscript
    # Getting the type of 'freqcenter' (line 768)
    freqcenter_88517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 38), 'freqcenter', False)
    slice_88518 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 768, 32), freqcenter_88517, None, None)
    # Getting the type of 'freqs' (line 768)
    freqs_88519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 32), 'freqs', False)
    # Obtaining the member '__getitem__' of a type (line 768)
    getitem___88520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 32), freqs_88519, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 768)
    subscript_call_result_88521 = invoke(stypy.reporting.localization.Localization(__file__, 768, 32), getitem___88520, slice_88518)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 768, 32), tuple_88516, subscript_call_result_88521)
    # Adding element type (line 768)
    
    # Obtaining the type of the subscript
    # Getting the type of 'freqcenter' (line 768)
    freqcenter_88522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 59), 'freqcenter', False)
    slice_88523 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 768, 52), None, freqcenter_88522, None)
    # Getting the type of 'freqs' (line 768)
    freqs_88524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 52), 'freqs', False)
    # Obtaining the member '__getitem__' of a type (line 768)
    getitem___88525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 52), freqs_88524, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 768)
    subscript_call_result_88526 = invoke(stypy.reporting.localization.Localization(__file__, 768, 52), getitem___88525, slice_88523)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 768, 32), tuple_88516, subscript_call_result_88526)
    
    # Processing the call keyword arguments (line 768)
    kwargs_88527 = {}
    # Getting the type of 'np' (line 768)
    np_88514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 16), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 768)
    concatenate_88515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 16), np_88514, 'concatenate')
    # Calling concatenate(args, kwargs) (line 768)
    concatenate_call_result_88528 = invoke(stypy.reporting.localization.Localization(__file__, 768, 16), concatenate_88515, *[tuple_88516], **kwargs_88527)
    
    # Assigning a type to the variable 'freqs' (line 768)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'freqs', concatenate_call_result_88528)
    
    # Assigning a Call to a Name (line 769):
    
    # Assigning a Call to a Name (line 769):
    
    # Assigning a Call to a Name (line 769):
    
    # Call to concatenate(...): (line 769)
    # Processing the call arguments (line 769)
    
    # Obtaining an instance of the builtin type 'tuple' (line 769)
    tuple_88531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 33), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 769)
    # Adding element type (line 769)
    
    # Obtaining the type of the subscript
    # Getting the type of 'freqcenter' (line 769)
    freqcenter_88532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 40), 'freqcenter', False)
    slice_88533 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 769, 33), freqcenter_88532, None, None)
    slice_88534 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 769, 33), None, None, None)
    # Getting the type of 'result' (line 769)
    result_88535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 33), 'result', False)
    # Obtaining the member '__getitem__' of a type (line 769)
    getitem___88536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 33), result_88535, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 769)
    subscript_call_result_88537 = invoke(stypy.reporting.localization.Localization(__file__, 769, 33), getitem___88536, (slice_88533, slice_88534))
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 769, 33), tuple_88531, subscript_call_result_88537)
    # Adding element type (line 769)
    
    # Obtaining the type of the subscript
    # Getting the type of 'freqcenter' (line 770)
    freqcenter_88538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 41), 'freqcenter', False)
    slice_88539 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 770, 33), None, freqcenter_88538, None)
    slice_88540 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 770, 33), None, None, None)
    # Getting the type of 'result' (line 770)
    result_88541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 33), 'result', False)
    # Obtaining the member '__getitem__' of a type (line 770)
    getitem___88542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 770, 33), result_88541, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 770)
    subscript_call_result_88543 = invoke(stypy.reporting.localization.Localization(__file__, 770, 33), getitem___88542, (slice_88539, slice_88540))
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 769, 33), tuple_88531, subscript_call_result_88543)
    
    int_88544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 770, 58), 'int')
    # Processing the call keyword arguments (line 769)
    kwargs_88545 = {}
    # Getting the type of 'np' (line 769)
    np_88529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 17), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 769)
    concatenate_88530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 17), np_88529, 'concatenate')
    # Calling concatenate(args, kwargs) (line 769)
    concatenate_call_result_88546 = invoke(stypy.reporting.localization.Localization(__file__, 769, 17), concatenate_88530, *[tuple_88531, int_88544], **kwargs_88545)
    
    # Assigning a type to the variable 'result' (line 769)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 8), 'result', concatenate_call_result_88546)
    # SSA branch for the else part of an if statement (line 766)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'pad_to' (line 771)
    pad_to_88547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 13), 'pad_to')
    int_88548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 771, 22), 'int')
    # Applying the binary operator '%' (line 771)
    result_mod_88549 = python_operator(stypy.reporting.localization.Localization(__file__, 771, 13), '%', pad_to_88547, int_88548)
    
    # Applying the 'not' unary operator (line 771)
    result_not__88550 = python_operator(stypy.reporting.localization.Localization(__file__, 771, 9), 'not', result_mod_88549)
    
    # Testing the type of an if condition (line 771)
    if_condition_88551 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 771, 9), result_not__88550)
    # Assigning a type to the variable 'if_condition_88551' (line 771)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 771, 9), 'if_condition_88551', if_condition_88551)
    # SSA begins for if statement (line 771)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'freqs' (line 773)
    freqs_88552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 8), 'freqs')
    
    # Obtaining the type of the subscript
    int_88553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 773, 14), 'int')
    # Getting the type of 'freqs' (line 773)
    freqs_88554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 8), 'freqs')
    # Obtaining the member '__getitem__' of a type (line 773)
    getitem___88555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 8), freqs_88554, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 773)
    subscript_call_result_88556 = invoke(stypy.reporting.localization.Localization(__file__, 773, 8), getitem___88555, int_88553)
    
    int_88557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 773, 21), 'int')
    # Applying the binary operator '*=' (line 773)
    result_imul_88558 = python_operator(stypy.reporting.localization.Localization(__file__, 773, 8), '*=', subscript_call_result_88556, int_88557)
    # Getting the type of 'freqs' (line 773)
    freqs_88559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 8), 'freqs')
    int_88560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 773, 14), 'int')
    # Storing an element on a container (line 773)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 773, 8), freqs_88559, (int_88560, result_imul_88558))
    
    # SSA join for if statement (line 771)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 766)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'mode' (line 776)
    mode_88561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 7), 'mode')
    unicode_88562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 776, 15), 'unicode', u'phase')
    # Applying the binary operator '==' (line 776)
    result_eq_88563 = python_operator(stypy.reporting.localization.Localization(__file__, 776, 7), '==', mode_88561, unicode_88562)
    
    # Testing the type of an if condition (line 776)
    if_condition_88564 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 776, 4), result_eq_88563)
    # Assigning a type to the variable 'if_condition_88564' (line 776)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 776, 4), 'if_condition_88564', if_condition_88564)
    # SSA begins for if statement (line 776)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 777):
    
    # Assigning a Call to a Name (line 777):
    
    # Assigning a Call to a Name (line 777):
    
    # Call to unwrap(...): (line 777)
    # Processing the call arguments (line 777)
    # Getting the type of 'result' (line 777)
    result_88567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 27), 'result', False)
    # Processing the call keyword arguments (line 777)
    int_88568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 777, 40), 'int')
    keyword_88569 = int_88568
    kwargs_88570 = {'axis': keyword_88569}
    # Getting the type of 'np' (line 777)
    np_88565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 17), 'np', False)
    # Obtaining the member 'unwrap' of a type (line 777)
    unwrap_88566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 17), np_88565, 'unwrap')
    # Calling unwrap(args, kwargs) (line 777)
    unwrap_call_result_88571 = invoke(stypy.reporting.localization.Localization(__file__, 777, 17), unwrap_88566, *[result_88567], **kwargs_88570)
    
    # Assigning a type to the variable 'result' (line 777)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 8), 'result', unwrap_call_result_88571)
    # SSA join for if statement (line 776)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 779)
    tuple_88572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 779, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 779)
    # Adding element type (line 779)
    # Getting the type of 'result' (line 779)
    result_88573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 11), 'result')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 779, 11), tuple_88572, result_88573)
    # Adding element type (line 779)
    # Getting the type of 'freqs' (line 779)
    freqs_88574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 19), 'freqs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 779, 11), tuple_88572, freqs_88574)
    # Adding element type (line 779)
    # Getting the type of 't' (line 779)
    t_88575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 26), 't')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 779, 11), tuple_88572, t_88575)
    
    # Assigning a type to the variable 'stypy_return_type' (line 779)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 779, 4), 'stypy_return_type', tuple_88572)
    
    # ################# End of '_spectral_helper(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_spectral_helper' in the type store
    # Getting the type of 'stypy_return_type' (line 624)
    stypy_return_type_88576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_88576)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_spectral_helper'
    return stypy_return_type_88576

# Assigning a type to the variable '_spectral_helper' (line 624)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 0), '_spectral_helper', _spectral_helper)

@norecursion
def _single_spectrum_helper(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 782)
    None_88577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 40), 'None')
    # Getting the type of 'None' (line 782)
    None_88578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 53), 'None')
    # Getting the type of 'None' (line 782)
    None_88579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 66), 'None')
    # Getting the type of 'None' (line 783)
    None_88580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 34), 'None')
    defaults = [None_88577, None_88578, None_88579, None_88580]
    # Create a new context for function '_single_spectrum_helper'
    module_type_store = module_type_store.open_function_context('_single_spectrum_helper', 782, 0, False)
    
    # Passed parameters checking function
    _single_spectrum_helper.stypy_localization = localization
    _single_spectrum_helper.stypy_type_of_self = None
    _single_spectrum_helper.stypy_type_store = module_type_store
    _single_spectrum_helper.stypy_function_name = '_single_spectrum_helper'
    _single_spectrum_helper.stypy_param_names_list = ['x', 'mode', 'Fs', 'window', 'pad_to', 'sides']
    _single_spectrum_helper.stypy_varargs_param_name = None
    _single_spectrum_helper.stypy_kwargs_param_name = None
    _single_spectrum_helper.stypy_call_defaults = defaults
    _single_spectrum_helper.stypy_call_varargs = varargs
    _single_spectrum_helper.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_single_spectrum_helper', ['x', 'mode', 'Fs', 'window', 'pad_to', 'sides'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_single_spectrum_helper', localization, ['x', 'mode', 'Fs', 'window', 'pad_to', 'sides'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_single_spectrum_helper(...)' code ##################

    unicode_88581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 788, (-1)), 'unicode', u'\n    This is a helper function that implements the commonality between the\n    complex, magnitude, angle, and phase spectrums.\n    It is *NOT* meant to be used outside of mlab and may change at any time.\n    ')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'mode' (line 789)
    mode_88582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 7), 'mode')
    # Getting the type of 'None' (line 789)
    None_88583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 15), 'None')
    # Applying the binary operator 'is' (line 789)
    result_is__88584 = python_operator(stypy.reporting.localization.Localization(__file__, 789, 7), 'is', mode_88582, None_88583)
    
    
    # Getting the type of 'mode' (line 789)
    mode_88585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 23), 'mode')
    unicode_88586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 789, 31), 'unicode', u'psd')
    # Applying the binary operator '==' (line 789)
    result_eq_88587 = python_operator(stypy.reporting.localization.Localization(__file__, 789, 23), '==', mode_88585, unicode_88586)
    
    # Applying the binary operator 'or' (line 789)
    result_or_keyword_88588 = python_operator(stypy.reporting.localization.Localization(__file__, 789, 7), 'or', result_is__88584, result_eq_88587)
    
    # Getting the type of 'mode' (line 789)
    mode_88589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 40), 'mode')
    unicode_88590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 789, 48), 'unicode', u'default')
    # Applying the binary operator '==' (line 789)
    result_eq_88591 = python_operator(stypy.reporting.localization.Localization(__file__, 789, 40), '==', mode_88589, unicode_88590)
    
    # Applying the binary operator 'or' (line 789)
    result_or_keyword_88592 = python_operator(stypy.reporting.localization.Localization(__file__, 789, 7), 'or', result_or_keyword_88588, result_eq_88591)
    
    # Testing the type of an if condition (line 789)
    if_condition_88593 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 789, 4), result_or_keyword_88592)
    # Assigning a type to the variable 'if_condition_88593' (line 789)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 789, 4), 'if_condition_88593', if_condition_88593)
    # SSA begins for if statement (line 789)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 790)
    # Processing the call arguments (line 790)
    unicode_88595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 790, 25), 'unicode', u'_single_spectrum_helper does not work with %s mode')
    # Getting the type of 'mode' (line 791)
    mode_88596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 27), 'mode', False)
    # Applying the binary operator '%' (line 790)
    result_mod_88597 = python_operator(stypy.reporting.localization.Localization(__file__, 790, 25), '%', unicode_88595, mode_88596)
    
    # Processing the call keyword arguments (line 790)
    kwargs_88598 = {}
    # Getting the type of 'ValueError' (line 790)
    ValueError_88594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 790)
    ValueError_call_result_88599 = invoke(stypy.reporting.localization.Localization(__file__, 790, 14), ValueError_88594, *[result_mod_88597], **kwargs_88598)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 790, 8), ValueError_call_result_88599, 'raise parameter', BaseException)
    # SSA join for if statement (line 789)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 793)
    # Getting the type of 'pad_to' (line 793)
    pad_to_88600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 7), 'pad_to')
    # Getting the type of 'None' (line 793)
    None_88601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 17), 'None')
    
    (may_be_88602, more_types_in_union_88603) = may_be_none(pad_to_88600, None_88601)

    if may_be_88602:

        if more_types_in_union_88603:
            # Runtime conditional SSA (line 793)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 794):
        
        # Assigning a Call to a Name (line 794):
        
        # Assigning a Call to a Name (line 794):
        
        # Call to len(...): (line 794)
        # Processing the call arguments (line 794)
        # Getting the type of 'x' (line 794)
        x_88605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 21), 'x', False)
        # Processing the call keyword arguments (line 794)
        kwargs_88606 = {}
        # Getting the type of 'len' (line 794)
        len_88604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 17), 'len', False)
        # Calling len(args, kwargs) (line 794)
        len_call_result_88607 = invoke(stypy.reporting.localization.Localization(__file__, 794, 17), len_88604, *[x_88605], **kwargs_88606)
        
        # Assigning a type to the variable 'pad_to' (line 794)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 794, 8), 'pad_to', len_call_result_88607)

        if more_types_in_union_88603:
            # SSA join for if statement (line 793)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Tuple (line 796):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to _spectral_helper(...): (line 796)
    # Processing the call keyword arguments (line 796)
    # Getting the type of 'x' (line 796)
    x_88609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 40), 'x', False)
    keyword_88610 = x_88609
    # Getting the type of 'None' (line 796)
    None_88611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 45), 'None', False)
    keyword_88612 = None_88611
    
    # Call to len(...): (line 796)
    # Processing the call arguments (line 796)
    # Getting the type of 'x' (line 796)
    x_88614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 60), 'x', False)
    # Processing the call keyword arguments (line 796)
    kwargs_88615 = {}
    # Getting the type of 'len' (line 796)
    len_88613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 56), 'len', False)
    # Calling len(args, kwargs) (line 796)
    len_call_result_88616 = invoke(stypy.reporting.localization.Localization(__file__, 796, 56), len_88613, *[x_88614], **kwargs_88615)
    
    keyword_88617 = len_call_result_88616
    # Getting the type of 'Fs' (line 796)
    Fs_88618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 67), 'Fs', False)
    keyword_88619 = Fs_88618
    # Getting the type of 'detrend_none' (line 797)
    detrend_none_88620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 51), 'detrend_none', False)
    keyword_88621 = detrend_none_88620
    # Getting the type of 'window' (line 797)
    window_88622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 72), 'window', False)
    keyword_88623 = window_88622
    int_88624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 47), 'int')
    keyword_88625 = int_88624
    # Getting the type of 'pad_to' (line 798)
    pad_to_88626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 57), 'pad_to', False)
    keyword_88627 = pad_to_88626
    # Getting the type of 'sides' (line 799)
    sides_88628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 44), 'sides', False)
    keyword_88629 = sides_88628
    # Getting the type of 'False' (line 800)
    False_88630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 52), 'False', False)
    keyword_88631 = False_88630
    # Getting the type of 'mode' (line 801)
    mode_88632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 43), 'mode', False)
    keyword_88633 = mode_88632
    kwargs_88634 = {'Fs': keyword_88619, 'pad_to': keyword_88627, 'scale_by_freq': keyword_88631, 'window': keyword_88623, 'mode': keyword_88633, 'NFFT': keyword_88617, 'y': keyword_88612, 'x': keyword_88610, 'detrend_func': keyword_88621, 'sides': keyword_88629, 'noverlap': keyword_88625}
    # Getting the type of '_spectral_helper' (line 796)
    _spectral_helper_88608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 21), '_spectral_helper', False)
    # Calling _spectral_helper(args, kwargs) (line 796)
    _spectral_helper_call_result_88635 = invoke(stypy.reporting.localization.Localization(__file__, 796, 21), _spectral_helper_88608, *[], **kwargs_88634)
    
    # Assigning a type to the variable 'call_assignment_87227' (line 796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'call_assignment_87227', _spectral_helper_call_result_88635)
    
    # Assigning a Call to a Name (line 796):
    
    # Assigning a Call to a Name (line 796):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_88638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 4), 'int')
    # Processing the call keyword arguments
    kwargs_88639 = {}
    # Getting the type of 'call_assignment_87227' (line 796)
    call_assignment_87227_88636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'call_assignment_87227', False)
    # Obtaining the member '__getitem__' of a type (line 796)
    getitem___88637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 4), call_assignment_87227_88636, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_88640 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___88637, *[int_88638], **kwargs_88639)
    
    # Assigning a type to the variable 'call_assignment_87228' (line 796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'call_assignment_87228', getitem___call_result_88640)
    
    # Assigning a Name to a Name (line 796):
    
    # Assigning a Name to a Name (line 796):
    # Getting the type of 'call_assignment_87228' (line 796)
    call_assignment_87228_88641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'call_assignment_87228')
    # Assigning a type to the variable 'spec' (line 796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'spec', call_assignment_87228_88641)
    
    # Assigning a Call to a Name (line 796):
    
    # Assigning a Call to a Name (line 796):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_88644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 4), 'int')
    # Processing the call keyword arguments
    kwargs_88645 = {}
    # Getting the type of 'call_assignment_87227' (line 796)
    call_assignment_87227_88642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'call_assignment_87227', False)
    # Obtaining the member '__getitem__' of a type (line 796)
    getitem___88643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 4), call_assignment_87227_88642, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_88646 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___88643, *[int_88644], **kwargs_88645)
    
    # Assigning a type to the variable 'call_assignment_87229' (line 796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'call_assignment_87229', getitem___call_result_88646)
    
    # Assigning a Name to a Name (line 796):
    
    # Assigning a Name to a Name (line 796):
    # Getting the type of 'call_assignment_87229' (line 796)
    call_assignment_87229_88647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'call_assignment_87229')
    # Assigning a type to the variable 'freqs' (line 796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 10), 'freqs', call_assignment_87229_88647)
    
    # Assigning a Call to a Name (line 796):
    
    # Assigning a Call to a Name (line 796):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_88650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 4), 'int')
    # Processing the call keyword arguments
    kwargs_88651 = {}
    # Getting the type of 'call_assignment_87227' (line 796)
    call_assignment_87227_88648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'call_assignment_87227', False)
    # Obtaining the member '__getitem__' of a type (line 796)
    getitem___88649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 4), call_assignment_87227_88648, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_88652 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___88649, *[int_88650], **kwargs_88651)
    
    # Assigning a type to the variable 'call_assignment_87230' (line 796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'call_assignment_87230', getitem___call_result_88652)
    
    # Assigning a Name to a Name (line 796):
    
    # Assigning a Name to a Name (line 796):
    # Getting the type of 'call_assignment_87230' (line 796)
    call_assignment_87230_88653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'call_assignment_87230')
    # Assigning a type to the variable '_' (line 796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 17), '_', call_assignment_87230_88653)
    
    
    # Getting the type of 'mode' (line 802)
    mode_88654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 7), 'mode')
    unicode_88655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 15), 'unicode', u'complex')
    # Applying the binary operator '!=' (line 802)
    result_ne_88656 = python_operator(stypy.reporting.localization.Localization(__file__, 802, 7), '!=', mode_88654, unicode_88655)
    
    # Testing the type of an if condition (line 802)
    if_condition_88657 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 802, 4), result_ne_88656)
    # Assigning a type to the variable 'if_condition_88657' (line 802)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 4), 'if_condition_88657', if_condition_88657)
    # SSA begins for if statement (line 802)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 803):
    
    # Assigning a Attribute to a Name (line 803):
    
    # Assigning a Attribute to a Name (line 803):
    # Getting the type of 'spec' (line 803)
    spec_88658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 15), 'spec')
    # Obtaining the member 'real' of a type (line 803)
    real_88659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 15), spec_88658, 'real')
    # Assigning a type to the variable 'spec' (line 803)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 8), 'spec', real_88659)
    # SSA join for if statement (line 802)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'spec' (line 805)
    spec_88660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 7), 'spec')
    # Obtaining the member 'ndim' of a type (line 805)
    ndim_88661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 7), spec_88660, 'ndim')
    int_88662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 805, 20), 'int')
    # Applying the binary operator '==' (line 805)
    result_eq_88663 = python_operator(stypy.reporting.localization.Localization(__file__, 805, 7), '==', ndim_88661, int_88662)
    
    
    
    # Obtaining the type of the subscript
    int_88664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 805, 37), 'int')
    # Getting the type of 'spec' (line 805)
    spec_88665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 26), 'spec')
    # Obtaining the member 'shape' of a type (line 805)
    shape_88666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 26), spec_88665, 'shape')
    # Obtaining the member '__getitem__' of a type (line 805)
    getitem___88667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 26), shape_88666, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 805)
    subscript_call_result_88668 = invoke(stypy.reporting.localization.Localization(__file__, 805, 26), getitem___88667, int_88664)
    
    int_88669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 805, 43), 'int')
    # Applying the binary operator '==' (line 805)
    result_eq_88670 = python_operator(stypy.reporting.localization.Localization(__file__, 805, 26), '==', subscript_call_result_88668, int_88669)
    
    # Applying the binary operator 'and' (line 805)
    result_and_keyword_88671 = python_operator(stypy.reporting.localization.Localization(__file__, 805, 7), 'and', result_eq_88663, result_eq_88670)
    
    # Testing the type of an if condition (line 805)
    if_condition_88672 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 805, 4), result_and_keyword_88671)
    # Assigning a type to the variable 'if_condition_88672' (line 805)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 4), 'if_condition_88672', if_condition_88672)
    # SSA begins for if statement (line 805)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 806):
    
    # Assigning a Subscript to a Name (line 806):
    
    # Assigning a Subscript to a Name (line 806):
    
    # Obtaining the type of the subscript
    slice_88673 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 806, 15), None, None, None)
    int_88674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 806, 23), 'int')
    # Getting the type of 'spec' (line 806)
    spec_88675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 15), 'spec')
    # Obtaining the member '__getitem__' of a type (line 806)
    getitem___88676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 15), spec_88675, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 806)
    subscript_call_result_88677 = invoke(stypy.reporting.localization.Localization(__file__, 806, 15), getitem___88676, (slice_88673, int_88674))
    
    # Assigning a type to the variable 'spec' (line 806)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 8), 'spec', subscript_call_result_88677)
    # SSA join for if statement (line 805)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 808)
    tuple_88678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 808)
    # Adding element type (line 808)
    # Getting the type of 'spec' (line 808)
    spec_88679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 11), 'spec')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 808, 11), tuple_88678, spec_88679)
    # Adding element type (line 808)
    # Getting the type of 'freqs' (line 808)
    freqs_88680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 17), 'freqs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 808, 11), tuple_88678, freqs_88680)
    
    # Assigning a type to the variable 'stypy_return_type' (line 808)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 808, 4), 'stypy_return_type', tuple_88678)
    
    # ################# End of '_single_spectrum_helper(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_single_spectrum_helper' in the type store
    # Getting the type of 'stypy_return_type' (line 782)
    stypy_return_type_88681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_88681)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_single_spectrum_helper'
    return stypy_return_type_88681

# Assigning a type to the variable '_single_spectrum_helper' (line 782)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 782, 0), '_single_spectrum_helper', _single_spectrum_helper)

# Call to update(...): (line 812)
# Processing the call keyword arguments (line 812)

# Call to dedent(...): (line 812)
# Processing the call arguments (line 812)
unicode_88687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 833, (-1)), 'unicode', u"\n    Fs : scalar\n        The sampling frequency (samples per time unit).  It is used\n        to calculate the Fourier frequencies, freqs, in cycles per time\n        unit. The default value is 2.\n\n    window : callable or ndarray\n        A function or a vector of length *NFFT*. To create window\n        vectors see :func:`window_hanning`, :func:`window_none`,\n        :func:`numpy.blackman`, :func:`numpy.hamming`,\n        :func:`numpy.bartlett`, :func:`scipy.signal`,\n        :func:`scipy.signal.get_window`, etc. The default is\n        :func:`window_hanning`.  If a function is passed as the\n        argument, it must take a data segment as an argument and\n        return the windowed version of the segment.\n\n    sides : [ 'default' | 'onesided' | 'twosided' ]\n        Specifies which sides of the spectrum to return.  Default gives the\n        default behavior, which returns one-sided for real data and both\n        for complex data.  'onesided' forces the return of a one-sided\n        spectrum, while 'twosided' forces two-sided.\n")
# Processing the call keyword arguments (line 812)
kwargs_88688 = {}
# Getting the type of 'cbook' (line 812)
cbook_88685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 34), 'cbook', False)
# Obtaining the member 'dedent' of a type (line 812)
dedent_88686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 34), cbook_88685, 'dedent')
# Calling dedent(args, kwargs) (line 812)
dedent_call_result_88689 = invoke(stypy.reporting.localization.Localization(__file__, 812, 34), dedent_88686, *[unicode_88687], **kwargs_88688)

keyword_88690 = dedent_call_result_88689
kwargs_88691 = {'Spectral': keyword_88690}
# Getting the type of 'docstring' (line 812)
docstring_88682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 0), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 812)
interpd_88683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 0), docstring_88682, 'interpd')
# Obtaining the member 'update' of a type (line 812)
update_88684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 0), interpd_88683, 'update')
# Calling update(args, kwargs) (line 812)
update_call_result_88692 = invoke(stypy.reporting.localization.Localization(__file__, 812, 0), update_88684, *[], **kwargs_88691)


# Call to update(...): (line 836)
# Processing the call keyword arguments (line 836)

# Call to dedent(...): (line 836)
# Processing the call arguments (line 836)
unicode_88698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 845, (-1)), 'unicode', u'\n    pad_to : integer\n        The number of points to which the data segment is padded when\n        performing the FFT.  While not increasing the actual resolution of\n        the spectrum (the minimum distance between resolvable peaks),\n        this can give more points in the plot, allowing for more\n        detail. This corresponds to the *n* parameter in the call to fft().\n        The default is None, which sets *pad_to* equal to the length of the\n        input signal (i.e. no padding).\n')
# Processing the call keyword arguments (line 836)
kwargs_88699 = {}
# Getting the type of 'cbook' (line 836)
cbook_88696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 41), 'cbook', False)
# Obtaining the member 'dedent' of a type (line 836)
dedent_88697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 41), cbook_88696, 'dedent')
# Calling dedent(args, kwargs) (line 836)
dedent_call_result_88700 = invoke(stypy.reporting.localization.Localization(__file__, 836, 41), dedent_88697, *[unicode_88698], **kwargs_88699)

keyword_88701 = dedent_call_result_88700
kwargs_88702 = {'Single_Spectrum': keyword_88701}
# Getting the type of 'docstring' (line 836)
docstring_88693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 0), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 836)
interpd_88694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 0), docstring_88693, 'interpd')
# Obtaining the member 'update' of a type (line 836)
update_88695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 0), interpd_88694, 'update')
# Calling update(args, kwargs) (line 836)
update_call_result_88703 = invoke(stypy.reporting.localization.Localization(__file__, 836, 0), update_88695, *[], **kwargs_88702)


# Call to update(...): (line 848)
# Processing the call keyword arguments (line 848)

# Call to dedent(...): (line 848)
# Processing the call arguments (line 848)
unicode_88709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 884, (-1)), 'unicode', u"\n    pad_to : integer\n        The number of points to which the data segment is padded when\n        performing the FFT.  This can be different from *NFFT*, which\n        specifies the number of data points used.  While not increasing\n        the actual resolution of the spectrum (the minimum distance between\n        resolvable peaks), this can give more points in the plot,\n        allowing for more detail. This corresponds to the *n* parameter\n        in the call to fft(). The default is None, which sets *pad_to*\n        equal to *NFFT*\n\n    NFFT : integer\n        The number of data points used in each block for the FFT.\n        A power 2 is most efficient.  The default value is 256.\n        This should *NOT* be used to get zero padding, or the scaling of the\n        result will be incorrect. Use *pad_to* for this instead.\n\n    detrend : {'default', 'constant', 'mean', 'linear', 'none'} or callable\n        The function applied to each segment before fft-ing,\n        designed to remove the mean or linear trend.  Unlike in\n        MATLAB, where the *detrend* parameter is a vector, in\n        matplotlib is it a function.  The :mod:`~matplotlib.pylab`\n        module defines :func:`~matplotlib.pylab.detrend_none`,\n        :func:`~matplotlib.pylab.detrend_mean`, and\n        :func:`~matplotlib.pylab.detrend_linear`, but you can use\n        a custom function as well.  You can also use a string to choose\n        one of the functions.  'default', 'constant', and 'mean' call\n        :func:`~matplotlib.pylab.detrend_mean`.  'linear' calls\n        :func:`~matplotlib.pylab.detrend_linear`.  'none' calls\n        :func:`~matplotlib.pylab.detrend_none`.\n\n    scale_by_freq : boolean, optional\n        Specifies whether the resulting density values should be scaled\n        by the scaling frequency, which gives density in units of Hz^-1.\n        This allows for integration over the returned frequency values.\n        The default is True for MATLAB compatibility.\n")
# Processing the call keyword arguments (line 848)
kwargs_88710 = {}
# Getting the type of 'cbook' (line 848)
cbook_88707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 29), 'cbook', False)
# Obtaining the member 'dedent' of a type (line 848)
dedent_88708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 848, 29), cbook_88707, 'dedent')
# Calling dedent(args, kwargs) (line 848)
dedent_call_result_88711 = invoke(stypy.reporting.localization.Localization(__file__, 848, 29), dedent_88708, *[unicode_88709], **kwargs_88710)

keyword_88712 = dedent_call_result_88711
kwargs_88713 = {'PSD': keyword_88712}
# Getting the type of 'docstring' (line 848)
docstring_88704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 0), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 848)
interpd_88705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 848, 0), docstring_88704, 'interpd')
# Obtaining the member 'update' of a type (line 848)
update_88706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 848, 0), interpd_88705, 'update')
# Calling update(args, kwargs) (line 848)
update_call_result_88714 = invoke(stypy.reporting.localization.Localization(__file__, 848, 0), update_88706, *[], **kwargs_88713)


@norecursion
def psd(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 888)
    None_88715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 16), 'None')
    # Getting the type of 'None' (line 888)
    None_88716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 25), 'None')
    # Getting the type of 'None' (line 888)
    None_88717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 39), 'None')
    # Getting the type of 'None' (line 888)
    None_88718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 52), 'None')
    # Getting the type of 'None' (line 889)
    None_88719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 17), 'None')
    # Getting the type of 'None' (line 889)
    None_88720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 30), 'None')
    # Getting the type of 'None' (line 889)
    None_88721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 42), 'None')
    # Getting the type of 'None' (line 889)
    None_88722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 62), 'None')
    defaults = [None_88715, None_88716, None_88717, None_88718, None_88719, None_88720, None_88721, None_88722]
    # Create a new context for function 'psd'
    module_type_store = module_type_store.open_function_context('psd', 887, 0, False)
    
    # Passed parameters checking function
    psd.stypy_localization = localization
    psd.stypy_type_of_self = None
    psd.stypy_type_store = module_type_store
    psd.stypy_function_name = 'psd'
    psd.stypy_param_names_list = ['x', 'NFFT', 'Fs', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq']
    psd.stypy_varargs_param_name = None
    psd.stypy_kwargs_param_name = None
    psd.stypy_call_defaults = defaults
    psd.stypy_call_varargs = varargs
    psd.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'psd', ['x', 'NFFT', 'Fs', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'psd', localization, ['x', 'NFFT', 'Fs', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'psd(...)' code ##################

    unicode_88723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 946, (-1)), 'unicode', u"\n    Compute the power spectral density.\n\n    Call signature::\n\n        psd(x, NFFT=256, Fs=2, detrend=mlab.detrend_none,\n            window=mlab.window_hanning, noverlap=0, pad_to=None,\n            sides='default', scale_by_freq=None)\n\n    The power spectral density :math:`P_{xx}` by Welch's average\n    periodogram method.  The vector *x* is divided into *NFFT* length\n    segments.  Each segment is detrended by function *detrend* and\n    windowed by function *window*.  *noverlap* gives the length of\n    the overlap between segments.  The :math:`|\\mathrm{fft}(i)|^2`\n    of each segment :math:`i` are averaged to compute :math:`P_{xx}`.\n\n    If len(*x*) < *NFFT*, it will be zero padded to *NFFT*.\n\n    Parameters\n    ----------\n    x : 1-D array or sequence\n        Array or sequence containing the data\n\n    %(Spectral)s\n\n    %(PSD)s\n\n    noverlap : integer\n        The number of points of overlap between segments.\n        The default value is 0 (no overlap).\n\n    Returns\n    -------\n    Pxx : 1-D array\n        The values for the power spectrum `P_{xx}` (real valued)\n\n    freqs : 1-D array\n        The frequencies corresponding to the elements in *Pxx*\n\n    References\n    ----------\n    Bendat & Piersol -- Random Data: Analysis and Measurement Procedures, John\n    Wiley & Sons (1986)\n\n    See Also\n    --------\n    :func:`specgram`\n        :func:`specgram` differs in the default overlap; in not returning the\n        mean of the segment periodograms; and in returning the times of the\n        segments.\n\n    :func:`magnitude_spectrum`\n        :func:`magnitude_spectrum` returns the magnitude spectrum.\n\n    :func:`csd`\n        :func:`csd` returns the spectral density between two signals.\n    ")
    
    # Assigning a Call to a Tuple (line 947):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to csd(...): (line 947)
    # Processing the call keyword arguments (line 947)
    # Getting the type of 'x' (line 947)
    x_88725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 23), 'x', False)
    keyword_88726 = x_88725
    # Getting the type of 'None' (line 947)
    None_88727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 28), 'None', False)
    keyword_88728 = None_88727
    # Getting the type of 'NFFT' (line 947)
    NFFT_88729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 39), 'NFFT', False)
    keyword_88730 = NFFT_88729
    # Getting the type of 'Fs' (line 947)
    Fs_88731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 48), 'Fs', False)
    keyword_88732 = Fs_88731
    # Getting the type of 'detrend' (line 947)
    detrend_88733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 60), 'detrend', False)
    keyword_88734 = detrend_88733
    # Getting the type of 'window' (line 948)
    window_88735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 28), 'window', False)
    keyword_88736 = window_88735
    # Getting the type of 'noverlap' (line 948)
    noverlap_88737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 45), 'noverlap', False)
    keyword_88738 = noverlap_88737
    # Getting the type of 'pad_to' (line 948)
    pad_to_88739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 62), 'pad_to', False)
    keyword_88740 = pad_to_88739
    # Getting the type of 'sides' (line 949)
    sides_88741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 27), 'sides', False)
    keyword_88742 = sides_88741
    # Getting the type of 'scale_by_freq' (line 949)
    scale_by_freq_88743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 48), 'scale_by_freq', False)
    keyword_88744 = scale_by_freq_88743
    kwargs_88745 = {'Fs': keyword_88732, 'pad_to': keyword_88740, 'scale_by_freq': keyword_88744, 'detrend': keyword_88734, 'window': keyword_88736, 'NFFT': keyword_88730, 'y': keyword_88728, 'x': keyword_88726, 'sides': keyword_88742, 'noverlap': keyword_88738}
    # Getting the type of 'csd' (line 947)
    csd_88724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 17), 'csd', False)
    # Calling csd(args, kwargs) (line 947)
    csd_call_result_88746 = invoke(stypy.reporting.localization.Localization(__file__, 947, 17), csd_88724, *[], **kwargs_88745)
    
    # Assigning a type to the variable 'call_assignment_87231' (line 947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 947, 4), 'call_assignment_87231', csd_call_result_88746)
    
    # Assigning a Call to a Name (line 947):
    
    # Assigning a Call to a Name (line 947):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_88749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 4), 'int')
    # Processing the call keyword arguments
    kwargs_88750 = {}
    # Getting the type of 'call_assignment_87231' (line 947)
    call_assignment_87231_88747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 4), 'call_assignment_87231', False)
    # Obtaining the member '__getitem__' of a type (line 947)
    getitem___88748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 947, 4), call_assignment_87231_88747, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_88751 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___88748, *[int_88749], **kwargs_88750)
    
    # Assigning a type to the variable 'call_assignment_87232' (line 947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 947, 4), 'call_assignment_87232', getitem___call_result_88751)
    
    # Assigning a Name to a Name (line 947):
    
    # Assigning a Name to a Name (line 947):
    # Getting the type of 'call_assignment_87232' (line 947)
    call_assignment_87232_88752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 4), 'call_assignment_87232')
    # Assigning a type to the variable 'Pxx' (line 947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 947, 4), 'Pxx', call_assignment_87232_88752)
    
    # Assigning a Call to a Name (line 947):
    
    # Assigning a Call to a Name (line 947):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_88755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 4), 'int')
    # Processing the call keyword arguments
    kwargs_88756 = {}
    # Getting the type of 'call_assignment_87231' (line 947)
    call_assignment_87231_88753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 4), 'call_assignment_87231', False)
    # Obtaining the member '__getitem__' of a type (line 947)
    getitem___88754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 947, 4), call_assignment_87231_88753, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_88757 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___88754, *[int_88755], **kwargs_88756)
    
    # Assigning a type to the variable 'call_assignment_87233' (line 947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 947, 4), 'call_assignment_87233', getitem___call_result_88757)
    
    # Assigning a Name to a Name (line 947):
    
    # Assigning a Name to a Name (line 947):
    # Getting the type of 'call_assignment_87233' (line 947)
    call_assignment_87233_88758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 4), 'call_assignment_87233')
    # Assigning a type to the variable 'freqs' (line 947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 947, 9), 'freqs', call_assignment_87233_88758)
    
    # Obtaining an instance of the builtin type 'tuple' (line 950)
    tuple_88759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 950)
    # Adding element type (line 950)
    # Getting the type of 'Pxx' (line 950)
    Pxx_88760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 11), 'Pxx')
    # Obtaining the member 'real' of a type (line 950)
    real_88761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 11), Pxx_88760, 'real')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 950, 11), tuple_88759, real_88761)
    # Adding element type (line 950)
    # Getting the type of 'freqs' (line 950)
    freqs_88762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 21), 'freqs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 950, 11), tuple_88759, freqs_88762)
    
    # Assigning a type to the variable 'stypy_return_type' (line 950)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 4), 'stypy_return_type', tuple_88759)
    
    # ################# End of 'psd(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'psd' in the type store
    # Getting the type of 'stypy_return_type' (line 887)
    stypy_return_type_88763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_88763)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'psd'
    return stypy_return_type_88763

# Assigning a type to the variable 'psd' (line 887)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 887, 0), 'psd', psd)

@norecursion
def csd(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 954)
    None_88764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 19), 'None')
    # Getting the type of 'None' (line 954)
    None_88765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 28), 'None')
    # Getting the type of 'None' (line 954)
    None_88766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 42), 'None')
    # Getting the type of 'None' (line 954)
    None_88767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 55), 'None')
    # Getting the type of 'None' (line 955)
    None_88768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 17), 'None')
    # Getting the type of 'None' (line 955)
    None_88769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 30), 'None')
    # Getting the type of 'None' (line 955)
    None_88770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 42), 'None')
    # Getting the type of 'None' (line 955)
    None_88771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 62), 'None')
    defaults = [None_88764, None_88765, None_88766, None_88767, None_88768, None_88769, None_88770, None_88771]
    # Create a new context for function 'csd'
    module_type_store = module_type_store.open_function_context('csd', 953, 0, False)
    
    # Passed parameters checking function
    csd.stypy_localization = localization
    csd.stypy_type_of_self = None
    csd.stypy_type_store = module_type_store
    csd.stypy_function_name = 'csd'
    csd.stypy_param_names_list = ['x', 'y', 'NFFT', 'Fs', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq']
    csd.stypy_varargs_param_name = None
    csd.stypy_kwargs_param_name = None
    csd.stypy_call_defaults = defaults
    csd.stypy_call_varargs = varargs
    csd.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'csd', ['x', 'y', 'NFFT', 'Fs', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'csd', localization, ['x', 'y', 'NFFT', 'Fs', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'csd(...)' code ##################

    unicode_88772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1007, (-1)), 'unicode', u"\n    Compute the cross-spectral density.\n\n    Call signature::\n\n        csd(x, y, NFFT=256, Fs=2, detrend=mlab.detrend_none,\n            window=mlab.window_hanning, noverlap=0, pad_to=None,\n            sides='default', scale_by_freq=None)\n\n    The cross spectral density :math:`P_{xy}` by Welch's average\n    periodogram method.  The vectors *x* and *y* are divided into\n    *NFFT* length segments.  Each segment is detrended by function\n    *detrend* and windowed by function *window*.  *noverlap* gives\n    the length of the overlap between segments.  The product of\n    the direct FFTs of *x* and *y* are averaged over each segment\n    to compute :math:`P_{xy}`, with a scaling to correct for power\n    loss due to windowing.\n\n    If len(*x*) < *NFFT* or len(*y*) < *NFFT*, they will be zero\n    padded to *NFFT*.\n\n    Parameters\n    ----------\n    x, y : 1-D arrays or sequences\n        Arrays or sequences containing the data\n\n    %(Spectral)s\n\n    %(PSD)s\n\n    noverlap : integer\n        The number of points of overlap between segments.\n        The default value is 0 (no overlap).\n\n    Returns\n    -------\n    Pxy : 1-D array\n        The values for the cross spectrum `P_{xy}` before scaling (real valued)\n\n    freqs : 1-D array\n        The frequencies corresponding to the elements in *Pxy*\n\n    References\n    ----------\n    Bendat & Piersol -- Random Data: Analysis and Measurement Procedures, John\n    Wiley & Sons (1986)\n\n    See Also\n    --------\n    :func:`psd`\n        :func:`psd` is the equivalent to setting y=x.\n    ")
    
    # Type idiom detected: calculating its left and rigth part (line 1008)
    # Getting the type of 'NFFT' (line 1008)
    NFFT_88773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 7), 'NFFT')
    # Getting the type of 'None' (line 1008)
    None_88774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 15), 'None')
    
    (may_be_88775, more_types_in_union_88776) = may_be_none(NFFT_88773, None_88774)

    if may_be_88775:

        if more_types_in_union_88776:
            # Runtime conditional SSA (line 1008)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 1009):
        
        # Assigning a Num to a Name (line 1009):
        
        # Assigning a Num to a Name (line 1009):
        int_88777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1009, 15), 'int')
        # Assigning a type to the variable 'NFFT' (line 1009)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1009, 8), 'NFFT', int_88777)

        if more_types_in_union_88776:
            # SSA join for if statement (line 1008)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Tuple (line 1010):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to _spectral_helper(...): (line 1010)
    # Processing the call keyword arguments (line 1010)
    # Getting the type of 'x' (line 1010)
    x_88779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 39), 'x', False)
    keyword_88780 = x_88779
    # Getting the type of 'y' (line 1010)
    y_88781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 44), 'y', False)
    keyword_88782 = y_88781
    # Getting the type of 'NFFT' (line 1010)
    NFFT_88783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 52), 'NFFT', False)
    keyword_88784 = NFFT_88783
    # Getting the type of 'Fs' (line 1010)
    Fs_88785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 61), 'Fs', False)
    keyword_88786 = Fs_88785
    # Getting the type of 'detrend' (line 1011)
    detrend_88787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 50), 'detrend', False)
    keyword_88788 = detrend_88787
    # Getting the type of 'window' (line 1011)
    window_88789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 66), 'window', False)
    keyword_88790 = window_88789
    # Getting the type of 'noverlap' (line 1012)
    noverlap_88791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 46), 'noverlap', False)
    keyword_88792 = noverlap_88791
    # Getting the type of 'pad_to' (line 1012)
    pad_to_88793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 63), 'pad_to', False)
    keyword_88794 = pad_to_88793
    # Getting the type of 'sides' (line 1013)
    sides_88795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 43), 'sides', False)
    keyword_88796 = sides_88795
    # Getting the type of 'scale_by_freq' (line 1013)
    scale_by_freq_88797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 64), 'scale_by_freq', False)
    keyword_88798 = scale_by_freq_88797
    unicode_88799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1014, 42), 'unicode', u'psd')
    keyword_88800 = unicode_88799
    kwargs_88801 = {'Fs': keyword_88786, 'pad_to': keyword_88794, 'scale_by_freq': keyword_88798, 'window': keyword_88790, 'mode': keyword_88800, 'NFFT': keyword_88784, 'y': keyword_88782, 'x': keyword_88780, 'detrend_func': keyword_88788, 'sides': keyword_88796, 'noverlap': keyword_88792}
    # Getting the type of '_spectral_helper' (line 1010)
    _spectral_helper_88778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 20), '_spectral_helper', False)
    # Calling _spectral_helper(args, kwargs) (line 1010)
    _spectral_helper_call_result_88802 = invoke(stypy.reporting.localization.Localization(__file__, 1010, 20), _spectral_helper_88778, *[], **kwargs_88801)
    
    # Assigning a type to the variable 'call_assignment_87234' (line 1010)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 4), 'call_assignment_87234', _spectral_helper_call_result_88802)
    
    # Assigning a Call to a Name (line 1010):
    
    # Assigning a Call to a Name (line 1010):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_88805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1010, 4), 'int')
    # Processing the call keyword arguments
    kwargs_88806 = {}
    # Getting the type of 'call_assignment_87234' (line 1010)
    call_assignment_87234_88803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 4), 'call_assignment_87234', False)
    # Obtaining the member '__getitem__' of a type (line 1010)
    getitem___88804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1010, 4), call_assignment_87234_88803, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_88807 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___88804, *[int_88805], **kwargs_88806)
    
    # Assigning a type to the variable 'call_assignment_87235' (line 1010)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 4), 'call_assignment_87235', getitem___call_result_88807)
    
    # Assigning a Name to a Name (line 1010):
    
    # Assigning a Name to a Name (line 1010):
    # Getting the type of 'call_assignment_87235' (line 1010)
    call_assignment_87235_88808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 4), 'call_assignment_87235')
    # Assigning a type to the variable 'Pxy' (line 1010)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 4), 'Pxy', call_assignment_87235_88808)
    
    # Assigning a Call to a Name (line 1010):
    
    # Assigning a Call to a Name (line 1010):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_88811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1010, 4), 'int')
    # Processing the call keyword arguments
    kwargs_88812 = {}
    # Getting the type of 'call_assignment_87234' (line 1010)
    call_assignment_87234_88809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 4), 'call_assignment_87234', False)
    # Obtaining the member '__getitem__' of a type (line 1010)
    getitem___88810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1010, 4), call_assignment_87234_88809, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_88813 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___88810, *[int_88811], **kwargs_88812)
    
    # Assigning a type to the variable 'call_assignment_87236' (line 1010)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 4), 'call_assignment_87236', getitem___call_result_88813)
    
    # Assigning a Name to a Name (line 1010):
    
    # Assigning a Name to a Name (line 1010):
    # Getting the type of 'call_assignment_87236' (line 1010)
    call_assignment_87236_88814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 4), 'call_assignment_87236')
    # Assigning a type to the variable 'freqs' (line 1010)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 9), 'freqs', call_assignment_87236_88814)
    
    # Assigning a Call to a Name (line 1010):
    
    # Assigning a Call to a Name (line 1010):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_88817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1010, 4), 'int')
    # Processing the call keyword arguments
    kwargs_88818 = {}
    # Getting the type of 'call_assignment_87234' (line 1010)
    call_assignment_87234_88815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 4), 'call_assignment_87234', False)
    # Obtaining the member '__getitem__' of a type (line 1010)
    getitem___88816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1010, 4), call_assignment_87234_88815, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_88819 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___88816, *[int_88817], **kwargs_88818)
    
    # Assigning a type to the variable 'call_assignment_87237' (line 1010)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 4), 'call_assignment_87237', getitem___call_result_88819)
    
    # Assigning a Name to a Name (line 1010):
    
    # Assigning a Name to a Name (line 1010):
    # Getting the type of 'call_assignment_87237' (line 1010)
    call_assignment_87237_88820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 4), 'call_assignment_87237')
    # Assigning a type to the variable '_' (line 1010)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 16), '_', call_assignment_87237_88820)
    
    
    # Getting the type of 'Pxy' (line 1016)
    Pxy_88821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 7), 'Pxy')
    # Obtaining the member 'ndim' of a type (line 1016)
    ndim_88822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1016, 7), Pxy_88821, 'ndim')
    int_88823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1016, 19), 'int')
    # Applying the binary operator '==' (line 1016)
    result_eq_88824 = python_operator(stypy.reporting.localization.Localization(__file__, 1016, 7), '==', ndim_88822, int_88823)
    
    # Testing the type of an if condition (line 1016)
    if_condition_88825 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1016, 4), result_eq_88824)
    # Assigning a type to the variable 'if_condition_88825' (line 1016)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1016, 4), 'if_condition_88825', if_condition_88825)
    # SSA begins for if statement (line 1016)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Obtaining the type of the subscript
    int_88826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1017, 21), 'int')
    # Getting the type of 'Pxy' (line 1017)
    Pxy_88827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 11), 'Pxy')
    # Obtaining the member 'shape' of a type (line 1017)
    shape_88828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 11), Pxy_88827, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1017)
    getitem___88829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 11), shape_88828, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1017)
    subscript_call_result_88830 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 11), getitem___88829, int_88826)
    
    int_88831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1017, 26), 'int')
    # Applying the binary operator '>' (line 1017)
    result_gt_88832 = python_operator(stypy.reporting.localization.Localization(__file__, 1017, 11), '>', subscript_call_result_88830, int_88831)
    
    # Testing the type of an if condition (line 1017)
    if_condition_88833 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1017, 8), result_gt_88832)
    # Assigning a type to the variable 'if_condition_88833' (line 1017)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1017, 8), 'if_condition_88833', if_condition_88833)
    # SSA begins for if statement (line 1017)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1018):
    
    # Assigning a Call to a Name (line 1018):
    
    # Assigning a Call to a Name (line 1018):
    
    # Call to mean(...): (line 1018)
    # Processing the call keyword arguments (line 1018)
    int_88836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1018, 32), 'int')
    keyword_88837 = int_88836
    kwargs_88838 = {'axis': keyword_88837}
    # Getting the type of 'Pxy' (line 1018)
    Pxy_88834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 18), 'Pxy', False)
    # Obtaining the member 'mean' of a type (line 1018)
    mean_88835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1018, 18), Pxy_88834, 'mean')
    # Calling mean(args, kwargs) (line 1018)
    mean_call_result_88839 = invoke(stypy.reporting.localization.Localization(__file__, 1018, 18), mean_88835, *[], **kwargs_88838)
    
    # Assigning a type to the variable 'Pxy' (line 1018)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 12), 'Pxy', mean_call_result_88839)
    # SSA branch for the else part of an if statement (line 1017)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Name (line 1020):
    
    # Assigning a Subscript to a Name (line 1020):
    
    # Assigning a Subscript to a Name (line 1020):
    
    # Obtaining the type of the subscript
    slice_88840 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1020, 18), None, None, None)
    int_88841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 25), 'int')
    # Getting the type of 'Pxy' (line 1020)
    Pxy_88842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 18), 'Pxy')
    # Obtaining the member '__getitem__' of a type (line 1020)
    getitem___88843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 18), Pxy_88842, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1020)
    subscript_call_result_88844 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 18), getitem___88843, (slice_88840, int_88841))
    
    # Assigning a type to the variable 'Pxy' (line 1020)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1020, 12), 'Pxy', subscript_call_result_88844)
    # SSA join for if statement (line 1017)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1016)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1021)
    tuple_88845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1021)
    # Adding element type (line 1021)
    # Getting the type of 'Pxy' (line 1021)
    Pxy_88846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 11), 'Pxy')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1021, 11), tuple_88845, Pxy_88846)
    # Adding element type (line 1021)
    # Getting the type of 'freqs' (line 1021)
    freqs_88847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 16), 'freqs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1021, 11), tuple_88845, freqs_88847)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1021)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1021, 4), 'stypy_return_type', tuple_88845)
    
    # ################# End of 'csd(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'csd' in the type store
    # Getting the type of 'stypy_return_type' (line 953)
    stypy_return_type_88848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_88848)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'csd'
    return stypy_return_type_88848

# Assigning a type to the variable 'csd' (line 953)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 0), 'csd', csd)

@norecursion
def complex_spectrum(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1025)
    None_88849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 27), 'None')
    # Getting the type of 'None' (line 1025)
    None_88850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 40), 'None')
    # Getting the type of 'None' (line 1025)
    None_88851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 53), 'None')
    # Getting the type of 'None' (line 1026)
    None_88852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 27), 'None')
    defaults = [None_88849, None_88850, None_88851, None_88852]
    # Create a new context for function 'complex_spectrum'
    module_type_store = module_type_store.open_function_context('complex_spectrum', 1024, 0, False)
    
    # Passed parameters checking function
    complex_spectrum.stypy_localization = localization
    complex_spectrum.stypy_type_of_self = None
    complex_spectrum.stypy_type_store = module_type_store
    complex_spectrum.stypy_function_name = 'complex_spectrum'
    complex_spectrum.stypy_param_names_list = ['x', 'Fs', 'window', 'pad_to', 'sides']
    complex_spectrum.stypy_varargs_param_name = None
    complex_spectrum.stypy_kwargs_param_name = None
    complex_spectrum.stypy_call_defaults = defaults
    complex_spectrum.stypy_call_varargs = varargs
    complex_spectrum.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'complex_spectrum', ['x', 'Fs', 'window', 'pad_to', 'sides'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'complex_spectrum', localization, ['x', 'Fs', 'window', 'pad_to', 'sides'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'complex_spectrum(...)' code ##################

    unicode_88853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1064, (-1)), 'unicode', u'\n    Compute the complex-valued frequency spectrum of *x*.  Data is padded to a\n    length of *pad_to* and the windowing function *window* is applied to the\n    signal.\n\n    Parameters\n    ----------\n    x : 1-D array or sequence\n        Array or sequence containing the data\n\n    %(Spectral)s\n\n    %(Single_Spectrum)s\n\n    Returns\n    -------\n    spectrum : 1-D array\n        The values for the complex spectrum (complex valued)\n\n    freqs : 1-D array\n        The frequencies corresponding to the elements in *spectrum*\n\n    See Also\n    --------\n    :func:`magnitude_spectrum`\n        :func:`magnitude_spectrum` returns the absolute value of this function.\n\n    :func:`angle_spectrum`\n        :func:`angle_spectrum` returns the angle of this function.\n\n    :func:`phase_spectrum`\n        :func:`phase_spectrum` returns the phase (unwrapped angle) of this\n        function.\n\n    :func:`specgram`\n        :func:`specgram` can return the complex spectrum of segments within the\n        signal.\n    ')
    
    # Call to _single_spectrum_helper(...): (line 1065)
    # Processing the call keyword arguments (line 1065)
    # Getting the type of 'x' (line 1065)
    x_88855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 37), 'x', False)
    keyword_88856 = x_88855
    # Getting the type of 'Fs' (line 1065)
    Fs_88857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 43), 'Fs', False)
    keyword_88858 = Fs_88857
    # Getting the type of 'window' (line 1065)
    window_88859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 54), 'window', False)
    keyword_88860 = window_88859
    # Getting the type of 'pad_to' (line 1065)
    pad_to_88861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 69), 'pad_to', False)
    keyword_88862 = pad_to_88861
    # Getting the type of 'sides' (line 1066)
    sides_88863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 41), 'sides', False)
    keyword_88864 = sides_88863
    unicode_88865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 53), 'unicode', u'complex')
    keyword_88866 = unicode_88865
    kwargs_88867 = {'Fs': keyword_88858, 'pad_to': keyword_88862, 'window': keyword_88860, 'mode': keyword_88866, 'x': keyword_88856, 'sides': keyword_88864}
    # Getting the type of '_single_spectrum_helper' (line 1065)
    _single_spectrum_helper_88854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 11), '_single_spectrum_helper', False)
    # Calling _single_spectrum_helper(args, kwargs) (line 1065)
    _single_spectrum_helper_call_result_88868 = invoke(stypy.reporting.localization.Localization(__file__, 1065, 11), _single_spectrum_helper_88854, *[], **kwargs_88867)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1065)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 4), 'stypy_return_type', _single_spectrum_helper_call_result_88868)
    
    # ################# End of 'complex_spectrum(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'complex_spectrum' in the type store
    # Getting the type of 'stypy_return_type' (line 1024)
    stypy_return_type_88869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_88869)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'complex_spectrum'
    return stypy_return_type_88869

# Assigning a type to the variable 'complex_spectrum' (line 1024)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1024, 0), 'complex_spectrum', complex_spectrum)

@norecursion
def magnitude_spectrum(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1070)
    None_88870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 29), 'None')
    # Getting the type of 'None' (line 1070)
    None_88871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 42), 'None')
    # Getting the type of 'None' (line 1070)
    None_88872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 55), 'None')
    # Getting the type of 'None' (line 1071)
    None_88873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 29), 'None')
    defaults = [None_88870, None_88871, None_88872, None_88873]
    # Create a new context for function 'magnitude_spectrum'
    module_type_store = module_type_store.open_function_context('magnitude_spectrum', 1069, 0, False)
    
    # Passed parameters checking function
    magnitude_spectrum.stypy_localization = localization
    magnitude_spectrum.stypy_type_of_self = None
    magnitude_spectrum.stypy_type_store = module_type_store
    magnitude_spectrum.stypy_function_name = 'magnitude_spectrum'
    magnitude_spectrum.stypy_param_names_list = ['x', 'Fs', 'window', 'pad_to', 'sides']
    magnitude_spectrum.stypy_varargs_param_name = None
    magnitude_spectrum.stypy_kwargs_param_name = None
    magnitude_spectrum.stypy_call_defaults = defaults
    magnitude_spectrum.stypy_call_varargs = varargs
    magnitude_spectrum.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'magnitude_spectrum', ['x', 'Fs', 'window', 'pad_to', 'sides'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'magnitude_spectrum', localization, ['x', 'Fs', 'window', 'pad_to', 'sides'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'magnitude_spectrum(...)' code ##################

    unicode_88874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1113, (-1)), 'unicode', u'\n    Compute the magnitude (absolute value) of the frequency spectrum of\n    *x*.  Data is padded to a length of *pad_to* and the windowing function\n    *window* is applied to the signal.\n\n    Parameters\n    ----------\n    x : 1-D array or sequence\n        Array or sequence containing the data\n\n    %(Spectral)s\n\n    %(Single_Spectrum)s\n\n    Returns\n    -------\n    spectrum : 1-D array\n        The values for the magnitude spectrum (real valued)\n\n    freqs : 1-D array\n        The frequencies corresponding to the elements in *spectrum*\n\n    See Also\n    --------\n    :func:`psd`\n        :func:`psd` returns the power spectral density.\n\n    :func:`complex_spectrum`\n        This function returns the absolute value of :func:`complex_spectrum`.\n\n    :func:`angle_spectrum`\n        :func:`angle_spectrum` returns the angles of the corresponding\n        frequencies.\n\n    :func:`phase_spectrum`\n        :func:`phase_spectrum` returns the phase (unwrapped angle) of the\n        corresponding frequencies.\n\n    :func:`specgram`\n        :func:`specgram` can return the magnitude spectrum of segments within\n        the signal.\n    ')
    
    # Call to _single_spectrum_helper(...): (line 1114)
    # Processing the call keyword arguments (line 1114)
    # Getting the type of 'x' (line 1114)
    x_88876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 37), 'x', False)
    keyword_88877 = x_88876
    # Getting the type of 'Fs' (line 1114)
    Fs_88878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 43), 'Fs', False)
    keyword_88879 = Fs_88878
    # Getting the type of 'window' (line 1114)
    window_88880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 54), 'window', False)
    keyword_88881 = window_88880
    # Getting the type of 'pad_to' (line 1114)
    pad_to_88882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 69), 'pad_to', False)
    keyword_88883 = pad_to_88882
    # Getting the type of 'sides' (line 1115)
    sides_88884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 41), 'sides', False)
    keyword_88885 = sides_88884
    unicode_88886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1115, 53), 'unicode', u'magnitude')
    keyword_88887 = unicode_88886
    kwargs_88888 = {'Fs': keyword_88879, 'pad_to': keyword_88883, 'window': keyword_88881, 'mode': keyword_88887, 'x': keyword_88877, 'sides': keyword_88885}
    # Getting the type of '_single_spectrum_helper' (line 1114)
    _single_spectrum_helper_88875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 11), '_single_spectrum_helper', False)
    # Calling _single_spectrum_helper(args, kwargs) (line 1114)
    _single_spectrum_helper_call_result_88889 = invoke(stypy.reporting.localization.Localization(__file__, 1114, 11), _single_spectrum_helper_88875, *[], **kwargs_88888)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1114)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1114, 4), 'stypy_return_type', _single_spectrum_helper_call_result_88889)
    
    # ################# End of 'magnitude_spectrum(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'magnitude_spectrum' in the type store
    # Getting the type of 'stypy_return_type' (line 1069)
    stypy_return_type_88890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_88890)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'magnitude_spectrum'
    return stypy_return_type_88890

# Assigning a type to the variable 'magnitude_spectrum' (line 1069)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1069, 0), 'magnitude_spectrum', magnitude_spectrum)

@norecursion
def angle_spectrum(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1119)
    None_88891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 25), 'None')
    # Getting the type of 'None' (line 1119)
    None_88892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 38), 'None')
    # Getting the type of 'None' (line 1119)
    None_88893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 51), 'None')
    # Getting the type of 'None' (line 1120)
    None_88894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 25), 'None')
    defaults = [None_88891, None_88892, None_88893, None_88894]
    # Create a new context for function 'angle_spectrum'
    module_type_store = module_type_store.open_function_context('angle_spectrum', 1118, 0, False)
    
    # Passed parameters checking function
    angle_spectrum.stypy_localization = localization
    angle_spectrum.stypy_type_of_self = None
    angle_spectrum.stypy_type_store = module_type_store
    angle_spectrum.stypy_function_name = 'angle_spectrum'
    angle_spectrum.stypy_param_names_list = ['x', 'Fs', 'window', 'pad_to', 'sides']
    angle_spectrum.stypy_varargs_param_name = None
    angle_spectrum.stypy_kwargs_param_name = None
    angle_spectrum.stypy_call_defaults = defaults
    angle_spectrum.stypy_call_varargs = varargs
    angle_spectrum.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'angle_spectrum', ['x', 'Fs', 'window', 'pad_to', 'sides'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'angle_spectrum', localization, ['x', 'Fs', 'window', 'pad_to', 'sides'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'angle_spectrum(...)' code ##################

    unicode_88895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1158, (-1)), 'unicode', u'\n    Compute the angle of the frequency spectrum (wrapped phase spectrum) of\n    *x*.  Data is padded to a length of *pad_to* and the windowing function\n    *window* is applied to the signal.\n\n    Parameters\n    ----------\n    x : 1-D array or sequence\n        Array or sequence containing the data\n\n    %(Spectral)s\n\n    %(Single_Spectrum)s\n\n    Returns\n    -------\n    spectrum : 1-D array\n        The values for the angle spectrum in radians (real valued)\n\n    freqs : 1-D array\n        The frequencies corresponding to the elements in *spectrum*\n\n    See Also\n    --------\n    :func:`complex_spectrum`\n        This function returns the angle value of :func:`complex_spectrum`.\n\n    :func:`magnitude_spectrum`\n        :func:`angle_spectrum` returns the magnitudes of the corresponding\n        frequencies.\n\n    :func:`phase_spectrum`\n        :func:`phase_spectrum` returns the unwrapped version of this function.\n\n    :func:`specgram`\n        :func:`specgram` can return the angle spectrum of segments within the\n        signal.\n    ')
    
    # Call to _single_spectrum_helper(...): (line 1159)
    # Processing the call keyword arguments (line 1159)
    # Getting the type of 'x' (line 1159)
    x_88897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 37), 'x', False)
    keyword_88898 = x_88897
    # Getting the type of 'Fs' (line 1159)
    Fs_88899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 43), 'Fs', False)
    keyword_88900 = Fs_88899
    # Getting the type of 'window' (line 1159)
    window_88901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 54), 'window', False)
    keyword_88902 = window_88901
    # Getting the type of 'pad_to' (line 1159)
    pad_to_88903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 69), 'pad_to', False)
    keyword_88904 = pad_to_88903
    # Getting the type of 'sides' (line 1160)
    sides_88905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 41), 'sides', False)
    keyword_88906 = sides_88905
    unicode_88907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1160, 53), 'unicode', u'angle')
    keyword_88908 = unicode_88907
    kwargs_88909 = {'Fs': keyword_88900, 'pad_to': keyword_88904, 'window': keyword_88902, 'mode': keyword_88908, 'x': keyword_88898, 'sides': keyword_88906}
    # Getting the type of '_single_spectrum_helper' (line 1159)
    _single_spectrum_helper_88896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 11), '_single_spectrum_helper', False)
    # Calling _single_spectrum_helper(args, kwargs) (line 1159)
    _single_spectrum_helper_call_result_88910 = invoke(stypy.reporting.localization.Localization(__file__, 1159, 11), _single_spectrum_helper_88896, *[], **kwargs_88909)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1159, 4), 'stypy_return_type', _single_spectrum_helper_call_result_88910)
    
    # ################# End of 'angle_spectrum(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'angle_spectrum' in the type store
    # Getting the type of 'stypy_return_type' (line 1118)
    stypy_return_type_88911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_88911)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'angle_spectrum'
    return stypy_return_type_88911

# Assigning a type to the variable 'angle_spectrum' (line 1118)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1118, 0), 'angle_spectrum', angle_spectrum)

@norecursion
def phase_spectrum(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1164)
    None_88912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 25), 'None')
    # Getting the type of 'None' (line 1164)
    None_88913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 38), 'None')
    # Getting the type of 'None' (line 1164)
    None_88914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 51), 'None')
    # Getting the type of 'None' (line 1165)
    None_88915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 25), 'None')
    defaults = [None_88912, None_88913, None_88914, None_88915]
    # Create a new context for function 'phase_spectrum'
    module_type_store = module_type_store.open_function_context('phase_spectrum', 1163, 0, False)
    
    # Passed parameters checking function
    phase_spectrum.stypy_localization = localization
    phase_spectrum.stypy_type_of_self = None
    phase_spectrum.stypy_type_store = module_type_store
    phase_spectrum.stypy_function_name = 'phase_spectrum'
    phase_spectrum.stypy_param_names_list = ['x', 'Fs', 'window', 'pad_to', 'sides']
    phase_spectrum.stypy_varargs_param_name = None
    phase_spectrum.stypy_kwargs_param_name = None
    phase_spectrum.stypy_call_defaults = defaults
    phase_spectrum.stypy_call_varargs = varargs
    phase_spectrum.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'phase_spectrum', ['x', 'Fs', 'window', 'pad_to', 'sides'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'phase_spectrum', localization, ['x', 'Fs', 'window', 'pad_to', 'sides'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'phase_spectrum(...)' code ##################

    unicode_88916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1203, (-1)), 'unicode', u'\n    Compute the phase of the frequency spectrum (unwrapped angle spectrum) of\n    *x*.  Data is padded to a length of *pad_to* and the windowing function\n    *window* is applied to the signal.\n\n    Parameters\n    ----------\n    x : 1-D array or sequence\n        Array or sequence containing the data\n\n    %(Spectral)s\n\n    %(Single_Spectrum)s\n\n    Returns\n    -------\n    spectrum : 1-D array\n        The values for the phase spectrum in radians (real valued)\n\n    freqs : 1-D array\n        The frequencies corresponding to the elements in *spectrum*\n\n    See Also\n    --------\n    :func:`complex_spectrum`\n        This function returns the angle value of :func:`complex_spectrum`.\n\n    :func:`magnitude_spectrum`\n        :func:`magnitude_spectrum` returns the magnitudes of the corresponding\n        frequencies.\n\n    :func:`angle_spectrum`\n        :func:`angle_spectrum` returns the wrapped version of this function.\n\n    :func:`specgram`\n        :func:`specgram` can return the phase spectrum of segments within the\n        signal.\n    ')
    
    # Call to _single_spectrum_helper(...): (line 1204)
    # Processing the call keyword arguments (line 1204)
    # Getting the type of 'x' (line 1204)
    x_88918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 37), 'x', False)
    keyword_88919 = x_88918
    # Getting the type of 'Fs' (line 1204)
    Fs_88920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 43), 'Fs', False)
    keyword_88921 = Fs_88920
    # Getting the type of 'window' (line 1204)
    window_88922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 54), 'window', False)
    keyword_88923 = window_88922
    # Getting the type of 'pad_to' (line 1204)
    pad_to_88924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 69), 'pad_to', False)
    keyword_88925 = pad_to_88924
    # Getting the type of 'sides' (line 1205)
    sides_88926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 41), 'sides', False)
    keyword_88927 = sides_88926
    unicode_88928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1205, 53), 'unicode', u'phase')
    keyword_88929 = unicode_88928
    kwargs_88930 = {'Fs': keyword_88921, 'pad_to': keyword_88925, 'window': keyword_88923, 'mode': keyword_88929, 'x': keyword_88919, 'sides': keyword_88927}
    # Getting the type of '_single_spectrum_helper' (line 1204)
    _single_spectrum_helper_88917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 11), '_single_spectrum_helper', False)
    # Calling _single_spectrum_helper(args, kwargs) (line 1204)
    _single_spectrum_helper_call_result_88931 = invoke(stypy.reporting.localization.Localization(__file__, 1204, 11), _single_spectrum_helper_88917, *[], **kwargs_88930)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1204)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1204, 4), 'stypy_return_type', _single_spectrum_helper_call_result_88931)
    
    # ################# End of 'phase_spectrum(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'phase_spectrum' in the type store
    # Getting the type of 'stypy_return_type' (line 1163)
    stypy_return_type_88932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_88932)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'phase_spectrum'
    return stypy_return_type_88932

# Assigning a type to the variable 'phase_spectrum' (line 1163)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 0), 'phase_spectrum', phase_spectrum)

@norecursion
def specgram(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1209)
    None_88933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 21), 'None')
    # Getting the type of 'None' (line 1209)
    None_88934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 30), 'None')
    # Getting the type of 'None' (line 1209)
    None_88935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 44), 'None')
    # Getting the type of 'None' (line 1209)
    None_88936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 57), 'None')
    # Getting the type of 'None' (line 1210)
    None_88937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 22), 'None')
    # Getting the type of 'None' (line 1210)
    None_88938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 35), 'None')
    # Getting the type of 'None' (line 1210)
    None_88939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 47), 'None')
    # Getting the type of 'None' (line 1210)
    None_88940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 67), 'None')
    # Getting the type of 'None' (line 1211)
    None_88941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 18), 'None')
    defaults = [None_88933, None_88934, None_88935, None_88936, None_88937, None_88938, None_88939, None_88940, None_88941]
    # Create a new context for function 'specgram'
    module_type_store = module_type_store.open_function_context('specgram', 1208, 0, False)
    
    # Passed parameters checking function
    specgram.stypy_localization = localization
    specgram.stypy_type_of_self = None
    specgram.stypy_type_store = module_type_store
    specgram.stypy_function_name = 'specgram'
    specgram.stypy_param_names_list = ['x', 'NFFT', 'Fs', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq', 'mode']
    specgram.stypy_varargs_param_name = None
    specgram.stypy_kwargs_param_name = None
    specgram.stypy_call_defaults = defaults
    specgram.stypy_call_varargs = varargs
    specgram.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'specgram', ['x', 'NFFT', 'Fs', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq', 'mode'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'specgram', localization, ['x', 'NFFT', 'Fs', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq', 'mode'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'specgram(...)' code ##################

    unicode_88942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1274, (-1)), 'unicode', u"\n    Compute a spectrogram.\n\n    Compute and plot a spectrogram of data in x.  Data are split into\n    NFFT length segments and the spectrum of each section is\n    computed.  The windowing function window is applied to each\n    segment, and the amount of overlap of each segment is\n    specified with noverlap.\n\n    Parameters\n    ----------\n    x : array_like\n        1-D array or sequence.\n\n    %(Spectral)s\n\n    %(PSD)s\n\n    noverlap : int, optional\n        The number of points of overlap between blocks.  The default\n        value is 128.\n    mode : str, optional\n        What sort of spectrum to use, default is 'psd'.\n            'psd'\n                Returns the power spectral density.\n\n            'complex'\n                Returns the complex-valued frequency spectrum.\n\n            'magnitude'\n                Returns the magnitude spectrum.\n\n            'angle'\n                Returns the phase spectrum without unwrapping.\n\n            'phase'\n                Returns the phase spectrum with unwrapping.\n\n    Returns\n    -------\n    spectrum : array_like\n        2-D array, columns are the periodograms of successive segments.\n\n    freqs : array_like\n        1-D array, frequencies corresponding to the rows in *spectrum*.\n\n    t : array_like\n        1-D array, the times corresponding to midpoints of segments\n        (i.e the columns in *spectrum*).\n\n    See Also\n    --------\n    psd : differs in the overlap and in the return values.\n    complex_spectrum : similar, but with complex valued frequencies.\n    magnitude_spectrum : similar single segment when mode is 'magnitude'.\n    angle_spectrum : similar to single segment when mode is 'angle'.\n    phase_spectrum : similar to single segment when mode is 'phase'.\n\n    Notes\n    -----\n    detrend and scale_by_freq only apply when *mode* is set to 'psd'.\n\n    ")
    
    # Type idiom detected: calculating its left and rigth part (line 1275)
    # Getting the type of 'noverlap' (line 1275)
    noverlap_88943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 7), 'noverlap')
    # Getting the type of 'None' (line 1275)
    None_88944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 19), 'None')
    
    (may_be_88945, more_types_in_union_88946) = may_be_none(noverlap_88943, None_88944)

    if may_be_88945:

        if more_types_in_union_88946:
            # Runtime conditional SSA (line 1275)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 1276):
        
        # Assigning a Num to a Name (line 1276):
        
        # Assigning a Num to a Name (line 1276):
        int_88947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1276, 19), 'int')
        # Assigning a type to the variable 'noverlap' (line 1276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1276, 8), 'noverlap', int_88947)

        if more_types_in_union_88946:
            # SSA join for if statement (line 1275)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 1277)
    # Getting the type of 'NFFT' (line 1277)
    NFFT_88948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 7), 'NFFT')
    # Getting the type of 'None' (line 1277)
    None_88949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 15), 'None')
    
    (may_be_88950, more_types_in_union_88951) = may_be_none(NFFT_88948, None_88949)

    if may_be_88950:

        if more_types_in_union_88951:
            # Runtime conditional SSA (line 1277)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 1278):
        
        # Assigning a Num to a Name (line 1278):
        
        # Assigning a Num to a Name (line 1278):
        int_88952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1278, 15), 'int')
        # Assigning a type to the variable 'NFFT' (line 1278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1278, 8), 'NFFT', int_88952)

        if more_types_in_union_88951:
            # SSA join for if statement (line 1277)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    
    # Call to len(...): (line 1279)
    # Processing the call arguments (line 1279)
    # Getting the type of 'x' (line 1279)
    x_88954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 11), 'x', False)
    # Processing the call keyword arguments (line 1279)
    kwargs_88955 = {}
    # Getting the type of 'len' (line 1279)
    len_88953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 7), 'len', False)
    # Calling len(args, kwargs) (line 1279)
    len_call_result_88956 = invoke(stypy.reporting.localization.Localization(__file__, 1279, 7), len_88953, *[x_88954], **kwargs_88955)
    
    # Getting the type of 'NFFT' (line 1279)
    NFFT_88957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 17), 'NFFT')
    # Applying the binary operator '<=' (line 1279)
    result_le_88958 = python_operator(stypy.reporting.localization.Localization(__file__, 1279, 7), '<=', len_call_result_88956, NFFT_88957)
    
    # Testing the type of an if condition (line 1279)
    if_condition_88959 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1279, 4), result_le_88958)
    # Assigning a type to the variable 'if_condition_88959' (line 1279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1279, 4), 'if_condition_88959', if_condition_88959)
    # SSA begins for if statement (line 1279)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 1280)
    # Processing the call arguments (line 1280)
    unicode_88962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1280, 22), 'unicode', u'Only one segment is calculated since parameter NFFT ')
    unicode_88963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1281, 22), 'unicode', u'(=%d) >= signal length (=%d).')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1281)
    tuple_88964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1281, 57), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1281)
    # Adding element type (line 1281)
    # Getting the type of 'NFFT' (line 1281)
    NFFT_88965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 57), 'NFFT', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1281, 57), tuple_88964, NFFT_88965)
    # Adding element type (line 1281)
    
    # Call to len(...): (line 1281)
    # Processing the call arguments (line 1281)
    # Getting the type of 'x' (line 1281)
    x_88967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 67), 'x', False)
    # Processing the call keyword arguments (line 1281)
    kwargs_88968 = {}
    # Getting the type of 'len' (line 1281)
    len_88966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 63), 'len', False)
    # Calling len(args, kwargs) (line 1281)
    len_call_result_88969 = invoke(stypy.reporting.localization.Localization(__file__, 1281, 63), len_88966, *[x_88967], **kwargs_88968)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1281, 57), tuple_88964, len_call_result_88969)
    
    # Applying the binary operator '%' (line 1281)
    result_mod_88970 = python_operator(stypy.reporting.localization.Localization(__file__, 1281, 22), '%', unicode_88963, tuple_88964)
    
    # Applying the binary operator '+' (line 1280)
    result_add_88971 = python_operator(stypy.reporting.localization.Localization(__file__, 1280, 22), '+', unicode_88962, result_mod_88970)
    
    # Processing the call keyword arguments (line 1280)
    kwargs_88972 = {}
    # Getting the type of 'warnings' (line 1280)
    warnings_88960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1280)
    warn_88961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 8), warnings_88960, 'warn')
    # Calling warn(args, kwargs) (line 1280)
    warn_call_result_88973 = invoke(stypy.reporting.localization.Localization(__file__, 1280, 8), warn_88961, *[result_add_88971], **kwargs_88972)
    
    # SSA join for if statement (line 1279)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 1283):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to _spectral_helper(...): (line 1283)
    # Processing the call keyword arguments (line 1283)
    # Getting the type of 'x' (line 1283)
    x_88975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 40), 'x', False)
    keyword_88976 = x_88975
    # Getting the type of 'None' (line 1283)
    None_88977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 45), 'None', False)
    keyword_88978 = None_88977
    # Getting the type of 'NFFT' (line 1283)
    NFFT_88979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 56), 'NFFT', False)
    keyword_88980 = NFFT_88979
    # Getting the type of 'Fs' (line 1283)
    Fs_88981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 65), 'Fs', False)
    keyword_88982 = Fs_88981
    # Getting the type of 'detrend' (line 1284)
    detrend_88983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 51), 'detrend', False)
    keyword_88984 = detrend_88983
    # Getting the type of 'window' (line 1284)
    window_88985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 67), 'window', False)
    keyword_88986 = window_88985
    # Getting the type of 'noverlap' (line 1285)
    noverlap_88987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 47), 'noverlap', False)
    keyword_88988 = noverlap_88987
    # Getting the type of 'pad_to' (line 1285)
    pad_to_88989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 64), 'pad_to', False)
    keyword_88990 = pad_to_88989
    # Getting the type of 'sides' (line 1286)
    sides_88991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 44), 'sides', False)
    keyword_88992 = sides_88991
    # Getting the type of 'scale_by_freq' (line 1287)
    scale_by_freq_88993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 52), 'scale_by_freq', False)
    keyword_88994 = scale_by_freq_88993
    # Getting the type of 'mode' (line 1288)
    mode_88995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 43), 'mode', False)
    keyword_88996 = mode_88995
    kwargs_88997 = {'Fs': keyword_88982, 'pad_to': keyword_88990, 'scale_by_freq': keyword_88994, 'window': keyword_88986, 'mode': keyword_88996, 'NFFT': keyword_88980, 'y': keyword_88978, 'x': keyword_88976, 'detrend_func': keyword_88984, 'sides': keyword_88992, 'noverlap': keyword_88988}
    # Getting the type of '_spectral_helper' (line 1283)
    _spectral_helper_88974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 21), '_spectral_helper', False)
    # Calling _spectral_helper(args, kwargs) (line 1283)
    _spectral_helper_call_result_88998 = invoke(stypy.reporting.localization.Localization(__file__, 1283, 21), _spectral_helper_88974, *[], **kwargs_88997)
    
    # Assigning a type to the variable 'call_assignment_87238' (line 1283)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1283, 4), 'call_assignment_87238', _spectral_helper_call_result_88998)
    
    # Assigning a Call to a Name (line 1283):
    
    # Assigning a Call to a Name (line 1283):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_89001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1283, 4), 'int')
    # Processing the call keyword arguments
    kwargs_89002 = {}
    # Getting the type of 'call_assignment_87238' (line 1283)
    call_assignment_87238_88999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 4), 'call_assignment_87238', False)
    # Obtaining the member '__getitem__' of a type (line 1283)
    getitem___89000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1283, 4), call_assignment_87238_88999, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_89003 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___89000, *[int_89001], **kwargs_89002)
    
    # Assigning a type to the variable 'call_assignment_87239' (line 1283)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1283, 4), 'call_assignment_87239', getitem___call_result_89003)
    
    # Assigning a Name to a Name (line 1283):
    
    # Assigning a Name to a Name (line 1283):
    # Getting the type of 'call_assignment_87239' (line 1283)
    call_assignment_87239_89004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 4), 'call_assignment_87239')
    # Assigning a type to the variable 'spec' (line 1283)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1283, 4), 'spec', call_assignment_87239_89004)
    
    # Assigning a Call to a Name (line 1283):
    
    # Assigning a Call to a Name (line 1283):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_89007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1283, 4), 'int')
    # Processing the call keyword arguments
    kwargs_89008 = {}
    # Getting the type of 'call_assignment_87238' (line 1283)
    call_assignment_87238_89005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 4), 'call_assignment_87238', False)
    # Obtaining the member '__getitem__' of a type (line 1283)
    getitem___89006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1283, 4), call_assignment_87238_89005, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_89009 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___89006, *[int_89007], **kwargs_89008)
    
    # Assigning a type to the variable 'call_assignment_87240' (line 1283)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1283, 4), 'call_assignment_87240', getitem___call_result_89009)
    
    # Assigning a Name to a Name (line 1283):
    
    # Assigning a Name to a Name (line 1283):
    # Getting the type of 'call_assignment_87240' (line 1283)
    call_assignment_87240_89010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 4), 'call_assignment_87240')
    # Assigning a type to the variable 'freqs' (line 1283)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1283, 10), 'freqs', call_assignment_87240_89010)
    
    # Assigning a Call to a Name (line 1283):
    
    # Assigning a Call to a Name (line 1283):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_89013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1283, 4), 'int')
    # Processing the call keyword arguments
    kwargs_89014 = {}
    # Getting the type of 'call_assignment_87238' (line 1283)
    call_assignment_87238_89011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 4), 'call_assignment_87238', False)
    # Obtaining the member '__getitem__' of a type (line 1283)
    getitem___89012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1283, 4), call_assignment_87238_89011, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_89015 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___89012, *[int_89013], **kwargs_89014)
    
    # Assigning a type to the variable 'call_assignment_87241' (line 1283)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1283, 4), 'call_assignment_87241', getitem___call_result_89015)
    
    # Assigning a Name to a Name (line 1283):
    
    # Assigning a Name to a Name (line 1283):
    # Getting the type of 'call_assignment_87241' (line 1283)
    call_assignment_87241_89016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 4), 'call_assignment_87241')
    # Assigning a type to the variable 't' (line 1283)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1283, 17), 't', call_assignment_87241_89016)
    
    
    # Getting the type of 'mode' (line 1290)
    mode_89017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 7), 'mode')
    unicode_89018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1290, 15), 'unicode', u'complex')
    # Applying the binary operator '!=' (line 1290)
    result_ne_89019 = python_operator(stypy.reporting.localization.Localization(__file__, 1290, 7), '!=', mode_89017, unicode_89018)
    
    # Testing the type of an if condition (line 1290)
    if_condition_89020 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1290, 4), result_ne_89019)
    # Assigning a type to the variable 'if_condition_89020' (line 1290)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 4), 'if_condition_89020', if_condition_89020)
    # SSA begins for if statement (line 1290)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 1291):
    
    # Assigning a Attribute to a Name (line 1291):
    
    # Assigning a Attribute to a Name (line 1291):
    # Getting the type of 'spec' (line 1291)
    spec_89021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 15), 'spec')
    # Obtaining the member 'real' of a type (line 1291)
    real_89022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 15), spec_89021, 'real')
    # Assigning a type to the variable 'spec' (line 1291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1291, 8), 'spec', real_89022)
    # SSA join for if statement (line 1290)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1293)
    tuple_89023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1293, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1293)
    # Adding element type (line 1293)
    # Getting the type of 'spec' (line 1293)
    spec_89024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 11), 'spec')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1293, 11), tuple_89023, spec_89024)
    # Adding element type (line 1293)
    # Getting the type of 'freqs' (line 1293)
    freqs_89025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 17), 'freqs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1293, 11), tuple_89023, freqs_89025)
    # Adding element type (line 1293)
    # Getting the type of 't' (line 1293)
    t_89026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 24), 't')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1293, 11), tuple_89023, t_89026)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1293, 4), 'stypy_return_type', tuple_89023)
    
    # ################# End of 'specgram(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'specgram' in the type store
    # Getting the type of 'stypy_return_type' (line 1208)
    stypy_return_type_89027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_89027)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'specgram'
    return stypy_return_type_89027

# Assigning a type to the variable 'specgram' (line 1208)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1208, 0), 'specgram', specgram)

# Assigning a Str to a Name (line 1296):

# Assigning a Str to a Name (line 1296):

# Assigning a Str to a Name (line 1296):
unicode_89028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, (-1)), 'unicode', u'Coherence is calculated by averaging over *NFFT*\nlength segments.  Your signal is too short for your choice of *NFFT*.\n')
# Assigning a type to the variable '_coh_error' (line 1296)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1296, 0), '_coh_error', unicode_89028)

@norecursion
def cohere(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_89029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1302, 22), 'int')
    int_89030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1302, 30), 'int')
    # Getting the type of 'detrend_none' (line 1302)
    detrend_none_89031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 41), 'detrend_none')
    # Getting the type of 'window_hanning' (line 1302)
    window_hanning_89032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 62), 'window_hanning')
    int_89033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1303, 20), 'int')
    # Getting the type of 'None' (line 1303)
    None_89034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 30), 'None')
    unicode_89035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1303, 42), 'unicode', u'default')
    # Getting the type of 'None' (line 1303)
    None_89036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 67), 'None')
    defaults = [int_89029, int_89030, detrend_none_89031, window_hanning_89032, int_89033, None_89034, unicode_89035, None_89036]
    # Create a new context for function 'cohere'
    module_type_store = module_type_store.open_function_context('cohere', 1301, 0, False)
    
    # Passed parameters checking function
    cohere.stypy_localization = localization
    cohere.stypy_type_of_self = None
    cohere.stypy_type_store = module_type_store
    cohere.stypy_function_name = 'cohere'
    cohere.stypy_param_names_list = ['x', 'y', 'NFFT', 'Fs', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq']
    cohere.stypy_varargs_param_name = None
    cohere.stypy_kwargs_param_name = None
    cohere.stypy_call_defaults = defaults
    cohere.stypy_call_varargs = varargs
    cohere.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cohere', ['x', 'y', 'NFFT', 'Fs', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cohere', localization, ['x', 'y', 'NFFT', 'Fs', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cohere(...)' code ##################

    unicode_89037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1337, (-1)), 'unicode', u'\n    The coherence between *x* and *y*.  Coherence is the normalized\n    cross spectral density:\n\n    .. math::\n\n        C_{xy} = \\frac{|P_{xy}|^2}{P_{xx}P_{yy}}\n\n    Parameters\n    ----------\n    x, y\n        Array or sequence containing the data\n\n    %(Spectral)s\n\n    %(PSD)s\n\n    noverlap : integer\n        The number of points of overlap between blocks.  The default value\n        is 0 (no overlap).\n\n    Returns\n    -------\n    The return value is the tuple (*Cxy*, *f*), where *f* are the\n    frequencies of the coherence vector. For cohere, scaling the\n    individual densities by the sampling frequency has no effect,\n    since the factors cancel out.\n\n    See Also\n    --------\n    :func:`psd`, :func:`csd` :\n        For information about the methods used to compute :math:`P_{xy}`,\n        :math:`P_{xx}` and :math:`P_{yy}`.\n    ')
    
    
    
    # Call to len(...): (line 1339)
    # Processing the call arguments (line 1339)
    # Getting the type of 'x' (line 1339)
    x_89039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 11), 'x', False)
    # Processing the call keyword arguments (line 1339)
    kwargs_89040 = {}
    # Getting the type of 'len' (line 1339)
    len_89038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 7), 'len', False)
    # Calling len(args, kwargs) (line 1339)
    len_call_result_89041 = invoke(stypy.reporting.localization.Localization(__file__, 1339, 7), len_89038, *[x_89039], **kwargs_89040)
    
    int_89042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1339, 16), 'int')
    # Getting the type of 'NFFT' (line 1339)
    NFFT_89043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 20), 'NFFT')
    # Applying the binary operator '*' (line 1339)
    result_mul_89044 = python_operator(stypy.reporting.localization.Localization(__file__, 1339, 16), '*', int_89042, NFFT_89043)
    
    # Applying the binary operator '<' (line 1339)
    result_lt_89045 = python_operator(stypy.reporting.localization.Localization(__file__, 1339, 7), '<', len_call_result_89041, result_mul_89044)
    
    # Testing the type of an if condition (line 1339)
    if_condition_89046 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1339, 4), result_lt_89045)
    # Assigning a type to the variable 'if_condition_89046' (line 1339)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1339, 4), 'if_condition_89046', if_condition_89046)
    # SSA begins for if statement (line 1339)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1340)
    # Processing the call arguments (line 1340)
    # Getting the type of '_coh_error' (line 1340)
    _coh_error_89048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 25), '_coh_error', False)
    # Processing the call keyword arguments (line 1340)
    kwargs_89049 = {}
    # Getting the type of 'ValueError' (line 1340)
    ValueError_89047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1340)
    ValueError_call_result_89050 = invoke(stypy.reporting.localization.Localization(__file__, 1340, 14), ValueError_89047, *[_coh_error_89048], **kwargs_89049)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1340, 8), ValueError_call_result_89050, 'raise parameter', BaseException)
    # SSA join for if statement (line 1339)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 1341):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to psd(...): (line 1341)
    # Processing the call arguments (line 1341)
    # Getting the type of 'x' (line 1341)
    x_89052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 17), 'x', False)
    # Getting the type of 'NFFT' (line 1341)
    NFFT_89053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 20), 'NFFT', False)
    # Getting the type of 'Fs' (line 1341)
    Fs_89054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 26), 'Fs', False)
    # Getting the type of 'detrend' (line 1341)
    detrend_89055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 30), 'detrend', False)
    # Getting the type of 'window' (line 1341)
    window_89056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 39), 'window', False)
    # Getting the type of 'noverlap' (line 1341)
    noverlap_89057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 47), 'noverlap', False)
    # Getting the type of 'pad_to' (line 1341)
    pad_to_89058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 57), 'pad_to', False)
    # Getting the type of 'sides' (line 1341)
    sides_89059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 65), 'sides', False)
    # Getting the type of 'scale_by_freq' (line 1342)
    scale_by_freq_89060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 17), 'scale_by_freq', False)
    # Processing the call keyword arguments (line 1341)
    kwargs_89061 = {}
    # Getting the type of 'psd' (line 1341)
    psd_89051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 13), 'psd', False)
    # Calling psd(args, kwargs) (line 1341)
    psd_call_result_89062 = invoke(stypy.reporting.localization.Localization(__file__, 1341, 13), psd_89051, *[x_89052, NFFT_89053, Fs_89054, detrend_89055, window_89056, noverlap_89057, pad_to_89058, sides_89059, scale_by_freq_89060], **kwargs_89061)
    
    # Assigning a type to the variable 'call_assignment_87242' (line 1341)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 4), 'call_assignment_87242', psd_call_result_89062)
    
    # Assigning a Call to a Name (line 1341):
    
    # Assigning a Call to a Name (line 1341):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_89065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1341, 4), 'int')
    # Processing the call keyword arguments
    kwargs_89066 = {}
    # Getting the type of 'call_assignment_87242' (line 1341)
    call_assignment_87242_89063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 4), 'call_assignment_87242', False)
    # Obtaining the member '__getitem__' of a type (line 1341)
    getitem___89064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1341, 4), call_assignment_87242_89063, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_89067 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___89064, *[int_89065], **kwargs_89066)
    
    # Assigning a type to the variable 'call_assignment_87243' (line 1341)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 4), 'call_assignment_87243', getitem___call_result_89067)
    
    # Assigning a Name to a Name (line 1341):
    
    # Assigning a Name to a Name (line 1341):
    # Getting the type of 'call_assignment_87243' (line 1341)
    call_assignment_87243_89068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 4), 'call_assignment_87243')
    # Assigning a type to the variable 'Pxx' (line 1341)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 4), 'Pxx', call_assignment_87243_89068)
    
    # Assigning a Call to a Name (line 1341):
    
    # Assigning a Call to a Name (line 1341):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_89071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1341, 4), 'int')
    # Processing the call keyword arguments
    kwargs_89072 = {}
    # Getting the type of 'call_assignment_87242' (line 1341)
    call_assignment_87242_89069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 4), 'call_assignment_87242', False)
    # Obtaining the member '__getitem__' of a type (line 1341)
    getitem___89070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1341, 4), call_assignment_87242_89069, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_89073 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___89070, *[int_89071], **kwargs_89072)
    
    # Assigning a type to the variable 'call_assignment_87244' (line 1341)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 4), 'call_assignment_87244', getitem___call_result_89073)
    
    # Assigning a Name to a Name (line 1341):
    
    # Assigning a Name to a Name (line 1341):
    # Getting the type of 'call_assignment_87244' (line 1341)
    call_assignment_87244_89074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 4), 'call_assignment_87244')
    # Assigning a type to the variable 'f' (line 1341)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 9), 'f', call_assignment_87244_89074)
    
    # Assigning a Call to a Tuple (line 1343):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to psd(...): (line 1343)
    # Processing the call arguments (line 1343)
    # Getting the type of 'y' (line 1343)
    y_89076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 17), 'y', False)
    # Getting the type of 'NFFT' (line 1343)
    NFFT_89077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 20), 'NFFT', False)
    # Getting the type of 'Fs' (line 1343)
    Fs_89078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 26), 'Fs', False)
    # Getting the type of 'detrend' (line 1343)
    detrend_89079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 30), 'detrend', False)
    # Getting the type of 'window' (line 1343)
    window_89080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 39), 'window', False)
    # Getting the type of 'noverlap' (line 1343)
    noverlap_89081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 47), 'noverlap', False)
    # Getting the type of 'pad_to' (line 1343)
    pad_to_89082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 57), 'pad_to', False)
    # Getting the type of 'sides' (line 1343)
    sides_89083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 65), 'sides', False)
    # Getting the type of 'scale_by_freq' (line 1344)
    scale_by_freq_89084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 17), 'scale_by_freq', False)
    # Processing the call keyword arguments (line 1343)
    kwargs_89085 = {}
    # Getting the type of 'psd' (line 1343)
    psd_89075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 13), 'psd', False)
    # Calling psd(args, kwargs) (line 1343)
    psd_call_result_89086 = invoke(stypy.reporting.localization.Localization(__file__, 1343, 13), psd_89075, *[y_89076, NFFT_89077, Fs_89078, detrend_89079, window_89080, noverlap_89081, pad_to_89082, sides_89083, scale_by_freq_89084], **kwargs_89085)
    
    # Assigning a type to the variable 'call_assignment_87245' (line 1343)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 4), 'call_assignment_87245', psd_call_result_89086)
    
    # Assigning a Call to a Name (line 1343):
    
    # Assigning a Call to a Name (line 1343):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_89089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1343, 4), 'int')
    # Processing the call keyword arguments
    kwargs_89090 = {}
    # Getting the type of 'call_assignment_87245' (line 1343)
    call_assignment_87245_89087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 4), 'call_assignment_87245', False)
    # Obtaining the member '__getitem__' of a type (line 1343)
    getitem___89088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 4), call_assignment_87245_89087, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_89091 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___89088, *[int_89089], **kwargs_89090)
    
    # Assigning a type to the variable 'call_assignment_87246' (line 1343)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 4), 'call_assignment_87246', getitem___call_result_89091)
    
    # Assigning a Name to a Name (line 1343):
    
    # Assigning a Name to a Name (line 1343):
    # Getting the type of 'call_assignment_87246' (line 1343)
    call_assignment_87246_89092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 4), 'call_assignment_87246')
    # Assigning a type to the variable 'Pyy' (line 1343)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 4), 'Pyy', call_assignment_87246_89092)
    
    # Assigning a Call to a Name (line 1343):
    
    # Assigning a Call to a Name (line 1343):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_89095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1343, 4), 'int')
    # Processing the call keyword arguments
    kwargs_89096 = {}
    # Getting the type of 'call_assignment_87245' (line 1343)
    call_assignment_87245_89093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 4), 'call_assignment_87245', False)
    # Obtaining the member '__getitem__' of a type (line 1343)
    getitem___89094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 4), call_assignment_87245_89093, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_89097 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___89094, *[int_89095], **kwargs_89096)
    
    # Assigning a type to the variable 'call_assignment_87247' (line 1343)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 4), 'call_assignment_87247', getitem___call_result_89097)
    
    # Assigning a Name to a Name (line 1343):
    
    # Assigning a Name to a Name (line 1343):
    # Getting the type of 'call_assignment_87247' (line 1343)
    call_assignment_87247_89098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 4), 'call_assignment_87247')
    # Assigning a type to the variable 'f' (line 1343)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 9), 'f', call_assignment_87247_89098)
    
    # Assigning a Call to a Tuple (line 1345):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to csd(...): (line 1345)
    # Processing the call arguments (line 1345)
    # Getting the type of 'x' (line 1345)
    x_89100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 17), 'x', False)
    # Getting the type of 'y' (line 1345)
    y_89101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 20), 'y', False)
    # Getting the type of 'NFFT' (line 1345)
    NFFT_89102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 23), 'NFFT', False)
    # Getting the type of 'Fs' (line 1345)
    Fs_89103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 29), 'Fs', False)
    # Getting the type of 'detrend' (line 1345)
    detrend_89104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 33), 'detrend', False)
    # Getting the type of 'window' (line 1345)
    window_89105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 42), 'window', False)
    # Getting the type of 'noverlap' (line 1345)
    noverlap_89106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 50), 'noverlap', False)
    # Getting the type of 'pad_to' (line 1345)
    pad_to_89107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 60), 'pad_to', False)
    # Getting the type of 'sides' (line 1345)
    sides_89108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 68), 'sides', False)
    # Getting the type of 'scale_by_freq' (line 1346)
    scale_by_freq_89109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 17), 'scale_by_freq', False)
    # Processing the call keyword arguments (line 1345)
    kwargs_89110 = {}
    # Getting the type of 'csd' (line 1345)
    csd_89099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 13), 'csd', False)
    # Calling csd(args, kwargs) (line 1345)
    csd_call_result_89111 = invoke(stypy.reporting.localization.Localization(__file__, 1345, 13), csd_89099, *[x_89100, y_89101, NFFT_89102, Fs_89103, detrend_89104, window_89105, noverlap_89106, pad_to_89107, sides_89108, scale_by_freq_89109], **kwargs_89110)
    
    # Assigning a type to the variable 'call_assignment_87248' (line 1345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1345, 4), 'call_assignment_87248', csd_call_result_89111)
    
    # Assigning a Call to a Name (line 1345):
    
    # Assigning a Call to a Name (line 1345):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_89114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1345, 4), 'int')
    # Processing the call keyword arguments
    kwargs_89115 = {}
    # Getting the type of 'call_assignment_87248' (line 1345)
    call_assignment_87248_89112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 4), 'call_assignment_87248', False)
    # Obtaining the member '__getitem__' of a type (line 1345)
    getitem___89113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1345, 4), call_assignment_87248_89112, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_89116 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___89113, *[int_89114], **kwargs_89115)
    
    # Assigning a type to the variable 'call_assignment_87249' (line 1345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1345, 4), 'call_assignment_87249', getitem___call_result_89116)
    
    # Assigning a Name to a Name (line 1345):
    
    # Assigning a Name to a Name (line 1345):
    # Getting the type of 'call_assignment_87249' (line 1345)
    call_assignment_87249_89117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 4), 'call_assignment_87249')
    # Assigning a type to the variable 'Pxy' (line 1345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1345, 4), 'Pxy', call_assignment_87249_89117)
    
    # Assigning a Call to a Name (line 1345):
    
    # Assigning a Call to a Name (line 1345):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_89120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1345, 4), 'int')
    # Processing the call keyword arguments
    kwargs_89121 = {}
    # Getting the type of 'call_assignment_87248' (line 1345)
    call_assignment_87248_89118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 4), 'call_assignment_87248', False)
    # Obtaining the member '__getitem__' of a type (line 1345)
    getitem___89119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1345, 4), call_assignment_87248_89118, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_89122 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___89119, *[int_89120], **kwargs_89121)
    
    # Assigning a type to the variable 'call_assignment_87250' (line 1345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1345, 4), 'call_assignment_87250', getitem___call_result_89122)
    
    # Assigning a Name to a Name (line 1345):
    
    # Assigning a Name to a Name (line 1345):
    # Getting the type of 'call_assignment_87250' (line 1345)
    call_assignment_87250_89123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 4), 'call_assignment_87250')
    # Assigning a type to the variable 'f' (line 1345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1345, 9), 'f', call_assignment_87250_89123)
    
    # Assigning a BinOp to a Name (line 1347):
    
    # Assigning a BinOp to a Name (line 1347):
    
    # Assigning a BinOp to a Name (line 1347):
    
    # Call to abs(...): (line 1347)
    # Processing the call arguments (line 1347)
    # Getting the type of 'Pxy' (line 1347)
    Pxy_89126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 17), 'Pxy', False)
    # Processing the call keyword arguments (line 1347)
    kwargs_89127 = {}
    # Getting the type of 'np' (line 1347)
    np_89124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 10), 'np', False)
    # Obtaining the member 'abs' of a type (line 1347)
    abs_89125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1347, 10), np_89124, 'abs')
    # Calling abs(args, kwargs) (line 1347)
    abs_call_result_89128 = invoke(stypy.reporting.localization.Localization(__file__, 1347, 10), abs_89125, *[Pxy_89126], **kwargs_89127)
    
    int_89129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1347, 25), 'int')
    # Applying the binary operator '**' (line 1347)
    result_pow_89130 = python_operator(stypy.reporting.localization.Localization(__file__, 1347, 10), '**', abs_call_result_89128, int_89129)
    
    # Getting the type of 'Pxx' (line 1347)
    Pxx_89131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 30), 'Pxx')
    # Getting the type of 'Pxy' (line 1347)
    Pxy_89132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 36), 'Pxy')
    # Applying the binary operator '*' (line 1347)
    result_mul_89133 = python_operator(stypy.reporting.localization.Localization(__file__, 1347, 30), '*', Pxx_89131, Pxy_89132)
    
    # Applying the binary operator 'div' (line 1347)
    result_div_89134 = python_operator(stypy.reporting.localization.Localization(__file__, 1347, 10), 'div', result_pow_89130, result_mul_89133)
    
    # Assigning a type to the variable 'Cxy' (line 1347)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1347, 4), 'Cxy', result_div_89134)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1348)
    tuple_89135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1348, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1348)
    # Adding element type (line 1348)
    # Getting the type of 'Cxy' (line 1348)
    Cxy_89136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 11), 'Cxy')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1348, 11), tuple_89135, Cxy_89136)
    # Adding element type (line 1348)
    # Getting the type of 'f' (line 1348)
    f_89137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 16), 'f')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1348, 11), tuple_89135, f_89137)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1348)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1348, 4), 'stypy_return_type', tuple_89135)
    
    # ################# End of 'cohere(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cohere' in the type store
    # Getting the type of 'stypy_return_type' (line 1301)
    stypy_return_type_89138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_89138)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cohere'
    return stypy_return_type_89138

# Assigning a type to the variable 'cohere' (line 1301)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1301, 0), 'cohere', cohere)

@norecursion
def donothing_callback(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'donothing_callback'
    module_type_store = module_type_store.open_function_context('donothing_callback', 1351, 0, False)
    
    # Passed parameters checking function
    donothing_callback.stypy_localization = localization
    donothing_callback.stypy_type_of_self = None
    donothing_callback.stypy_type_store = module_type_store
    donothing_callback.stypy_function_name = 'donothing_callback'
    donothing_callback.stypy_param_names_list = []
    donothing_callback.stypy_varargs_param_name = 'args'
    donothing_callback.stypy_kwargs_param_name = None
    donothing_callback.stypy_call_defaults = defaults
    donothing_callback.stypy_call_varargs = varargs
    donothing_callback.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'donothing_callback', [], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'donothing_callback', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'donothing_callback(...)' code ##################

    pass
    
    # ################# End of 'donothing_callback(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'donothing_callback' in the type store
    # Getting the type of 'stypy_return_type' (line 1351)
    stypy_return_type_89139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_89139)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'donothing_callback'
    return stypy_return_type_89139

# Assigning a type to the variable 'donothing_callback' (line 1351)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1351, 0), 'donothing_callback', donothing_callback)

@norecursion
def cohere_pairs(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_89140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1355, 29), 'int')
    int_89141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1355, 37), 'int')
    # Getting the type of 'detrend_none' (line 1355)
    detrend_none_89142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 48), 'detrend_none')
    # Getting the type of 'window_hanning' (line 1356)
    window_hanning_89143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 24), 'window_hanning')
    int_89144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1356, 49), 'int')
    # Getting the type of 'True' (line 1357)
    True_89145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 39), 'True')
    # Getting the type of 'donothing_callback' (line 1358)
    donothing_callback_89146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 34), 'donothing_callback')
    # Getting the type of 'False' (line 1359)
    False_89147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 27), 'False')
    defaults = [int_89140, int_89141, detrend_none_89142, window_hanning_89143, int_89144, True_89145, donothing_callback_89146, False_89147]
    # Create a new context for function 'cohere_pairs'
    module_type_store = module_type_store.open_function_context('cohere_pairs', 1355, 0, False)
    
    # Passed parameters checking function
    cohere_pairs.stypy_localization = localization
    cohere_pairs.stypy_type_of_self = None
    cohere_pairs.stypy_type_store = module_type_store
    cohere_pairs.stypy_function_name = 'cohere_pairs'
    cohere_pairs.stypy_param_names_list = ['X', 'ij', 'NFFT', 'Fs', 'detrend', 'window', 'noverlap', 'preferSpeedOverMemory', 'progressCallback', 'returnPxx']
    cohere_pairs.stypy_varargs_param_name = None
    cohere_pairs.stypy_kwargs_param_name = None
    cohere_pairs.stypy_call_defaults = defaults
    cohere_pairs.stypy_call_varargs = varargs
    cohere_pairs.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cohere_pairs', ['X', 'ij', 'NFFT', 'Fs', 'detrend', 'window', 'noverlap', 'preferSpeedOverMemory', 'progressCallback', 'returnPxx'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cohere_pairs', localization, ['X', 'ij', 'NFFT', 'Fs', 'detrend', 'window', 'noverlap', 'preferSpeedOverMemory', 'progressCallback', 'returnPxx'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cohere_pairs(...)' code ##################

    unicode_89148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1427, (-1)), 'unicode', u'\n    Compute the coherence and phase for all pairs *ij*, in *X*.\n\n    *X* is a *numSamples* * *numCols* array\n\n    *ij* is a list of tuples.  Each tuple is a pair of indexes into\n    the columns of X for which you want to compute coherence.  For\n    example, if *X* has 64 columns, and you want to compute all\n    nonredundant pairs, define *ij* as::\n\n      ij = []\n      for i in range(64):\n          for j in range(i+1,64):\n              ij.append( (i,j) )\n\n    *preferSpeedOverMemory* is an optional bool. Defaults to true. If\n    False, limits the caching by only making one, rather than two,\n    complex cache arrays. This is useful if memory becomes critical.\n    Even when *preferSpeedOverMemory* is False, :func:`cohere_pairs`\n    will still give significant performace gains over calling\n    :func:`cohere` for each pair, and will use subtantially less\n    memory than if *preferSpeedOverMemory* is True.  In my tests with\n    a 43000,64 array over all nonredundant pairs,\n    *preferSpeedOverMemory* = True delivered a 33% performance boost\n    on a 1.7GHZ Athlon with 512MB RAM compared with\n    *preferSpeedOverMemory* = False.  But both solutions were more\n    than 10x faster than naively crunching all possible pairs through\n    :func:`cohere`.\n\n    Returns\n    -------\n    Cxy : dictionary of (*i*, *j*) tuples -> coherence vector for\n        that pair.  i.e., ``Cxy[(i,j) = cohere(X[:,i], X[:,j])``.\n        Number of dictionary keys is ``len(ij)``.\n\n    Phase : dictionary of phases of the cross spectral density at\n        each frequency for each pair.  Keys are (*i*, *j*).\n\n    freqs : vector of frequencies, equal in length to either the\n         coherence or phase vectors for any (*i*, *j*) key.\n\n    e.g., to make a coherence Bode plot::\n\n          subplot(211)\n          plot( freqs, Cxy[(12,19)])\n          subplot(212)\n          plot( freqs, Phase[(12,19)])\n\n    For a large number of pairs, :func:`cohere_pairs` can be much more\n    efficient than just calling :func:`cohere` for each pair, because\n    it caches most of the intensive computations.  If :math:`N` is the\n    number of pairs, this function is :math:`O(N)` for most of the\n    heavy lifting, whereas calling cohere for each pair is\n    :math:`O(N^2)`.  However, because of the caching, it is also more\n    memory intensive, making 2 additional complex arrays with\n    approximately the same number of elements as *X*.\n\n    See :file:`test/cohere_pairs_test.py` in the src tree for an\n    example script that shows that this :func:`cohere_pairs` and\n    :func:`cohere` give the same results for a given pair.\n\n    See Also\n    --------\n    :func:`psd`\n        For information about the methods used to compute :math:`P_{xy}`,\n        :math:`P_{xx}` and :math:`P_{yy}`.\n    ')
    
    # Assigning a Attribute to a Tuple (line 1428):
    
    # Assigning a Subscript to a Name (line 1428):
    
    # Assigning a Subscript to a Name (line 1428):
    
    # Obtaining the type of the subscript
    int_89149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1428, 4), 'int')
    # Getting the type of 'X' (line 1428)
    X_89150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 23), 'X')
    # Obtaining the member 'shape' of a type (line 1428)
    shape_89151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1428, 23), X_89150, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1428)
    getitem___89152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1428, 4), shape_89151, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1428)
    subscript_call_result_89153 = invoke(stypy.reporting.localization.Localization(__file__, 1428, 4), getitem___89152, int_89149)
    
    # Assigning a type to the variable 'tuple_var_assignment_87251' (line 1428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1428, 4), 'tuple_var_assignment_87251', subscript_call_result_89153)
    
    # Assigning a Subscript to a Name (line 1428):
    
    # Assigning a Subscript to a Name (line 1428):
    
    # Obtaining the type of the subscript
    int_89154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1428, 4), 'int')
    # Getting the type of 'X' (line 1428)
    X_89155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 23), 'X')
    # Obtaining the member 'shape' of a type (line 1428)
    shape_89156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1428, 23), X_89155, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1428)
    getitem___89157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1428, 4), shape_89156, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1428)
    subscript_call_result_89158 = invoke(stypy.reporting.localization.Localization(__file__, 1428, 4), getitem___89157, int_89154)
    
    # Assigning a type to the variable 'tuple_var_assignment_87252' (line 1428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1428, 4), 'tuple_var_assignment_87252', subscript_call_result_89158)
    
    # Assigning a Name to a Name (line 1428):
    
    # Assigning a Name to a Name (line 1428):
    # Getting the type of 'tuple_var_assignment_87251' (line 1428)
    tuple_var_assignment_87251_89159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 4), 'tuple_var_assignment_87251')
    # Assigning a type to the variable 'numRows' (line 1428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1428, 4), 'numRows', tuple_var_assignment_87251_89159)
    
    # Assigning a Name to a Name (line 1428):
    
    # Assigning a Name to a Name (line 1428):
    # Getting the type of 'tuple_var_assignment_87252' (line 1428)
    tuple_var_assignment_87252_89160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 4), 'tuple_var_assignment_87252')
    # Assigning a type to the variable 'numCols' (line 1428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1428, 13), 'numCols', tuple_var_assignment_87252_89160)
    
    
    # Getting the type of 'numRows' (line 1431)
    numRows_89161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 7), 'numRows')
    # Getting the type of 'NFFT' (line 1431)
    NFFT_89162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 17), 'NFFT')
    # Applying the binary operator '<' (line 1431)
    result_lt_89163 = python_operator(stypy.reporting.localization.Localization(__file__, 1431, 7), '<', numRows_89161, NFFT_89162)
    
    # Testing the type of an if condition (line 1431)
    if_condition_89164 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1431, 4), result_lt_89163)
    # Assigning a type to the variable 'if_condition_89164' (line 1431)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1431, 4), 'if_condition_89164', if_condition_89164)
    # SSA begins for if statement (line 1431)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 1432):
    
    # Assigning a Name to a Name (line 1432):
    
    # Assigning a Name to a Name (line 1432):
    # Getting the type of 'X' (line 1432)
    X_89165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 14), 'X')
    # Assigning a type to the variable 'tmp' (line 1432)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1432, 8), 'tmp', X_89165)
    
    # Assigning a Call to a Name (line 1433):
    
    # Assigning a Call to a Name (line 1433):
    
    # Assigning a Call to a Name (line 1433):
    
    # Call to zeros(...): (line 1433)
    # Processing the call arguments (line 1433)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1433)
    tuple_89168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1433, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1433)
    # Adding element type (line 1433)
    # Getting the type of 'NFFT' (line 1433)
    NFFT_89169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 22), 'NFFT', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1433, 22), tuple_89168, NFFT_89169)
    # Adding element type (line 1433)
    # Getting the type of 'numCols' (line 1433)
    numCols_89170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 28), 'numCols', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1433, 22), tuple_89168, numCols_89170)
    
    # Getting the type of 'X' (line 1433)
    X_89171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 38), 'X', False)
    # Obtaining the member 'dtype' of a type (line 1433)
    dtype_89172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 38), X_89171, 'dtype')
    # Processing the call keyword arguments (line 1433)
    kwargs_89173 = {}
    # Getting the type of 'np' (line 1433)
    np_89166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 12), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1433)
    zeros_89167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 12), np_89166, 'zeros')
    # Calling zeros(args, kwargs) (line 1433)
    zeros_call_result_89174 = invoke(stypy.reporting.localization.Localization(__file__, 1433, 12), zeros_89167, *[tuple_89168, dtype_89172], **kwargs_89173)
    
    # Assigning a type to the variable 'X' (line 1433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1433, 8), 'X', zeros_call_result_89174)
    
    # Assigning a Name to a Subscript (line 1434):
    
    # Assigning a Name to a Subscript (line 1434):
    
    # Assigning a Name to a Subscript (line 1434):
    # Getting the type of 'tmp' (line 1434)
    tmp_89175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 25), 'tmp')
    # Getting the type of 'X' (line 1434)
    X_89176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 8), 'X')
    # Getting the type of 'numRows' (line 1434)
    numRows_89177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 11), 'numRows')
    slice_89178 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1434, 8), None, numRows_89177, None)
    slice_89179 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1434, 8), None, None, None)
    # Storing an element on a container (line 1434)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1434, 8), X_89176, ((slice_89178, slice_89179), tmp_89175))
    # Deleting a member
    module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 1435, 8), module_type_store, 'tmp')
    # SSA join for if statement (line 1431)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Tuple (line 1437):
    
    # Assigning a Subscript to a Name (line 1437):
    
    # Assigning a Subscript to a Name (line 1437):
    
    # Obtaining the type of the subscript
    int_89180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1437, 4), 'int')
    # Getting the type of 'X' (line 1437)
    X_89181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 23), 'X')
    # Obtaining the member 'shape' of a type (line 1437)
    shape_89182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 23), X_89181, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1437)
    getitem___89183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 4), shape_89182, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1437)
    subscript_call_result_89184 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 4), getitem___89183, int_89180)
    
    # Assigning a type to the variable 'tuple_var_assignment_87253' (line 1437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 4), 'tuple_var_assignment_87253', subscript_call_result_89184)
    
    # Assigning a Subscript to a Name (line 1437):
    
    # Assigning a Subscript to a Name (line 1437):
    
    # Obtaining the type of the subscript
    int_89185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1437, 4), 'int')
    # Getting the type of 'X' (line 1437)
    X_89186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 23), 'X')
    # Obtaining the member 'shape' of a type (line 1437)
    shape_89187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 23), X_89186, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1437)
    getitem___89188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 4), shape_89187, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1437)
    subscript_call_result_89189 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 4), getitem___89188, int_89185)
    
    # Assigning a type to the variable 'tuple_var_assignment_87254' (line 1437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 4), 'tuple_var_assignment_87254', subscript_call_result_89189)
    
    # Assigning a Name to a Name (line 1437):
    
    # Assigning a Name to a Name (line 1437):
    # Getting the type of 'tuple_var_assignment_87253' (line 1437)
    tuple_var_assignment_87253_89190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 4), 'tuple_var_assignment_87253')
    # Assigning a type to the variable 'numRows' (line 1437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 4), 'numRows', tuple_var_assignment_87253_89190)
    
    # Assigning a Name to a Name (line 1437):
    
    # Assigning a Name to a Name (line 1437):
    # Getting the type of 'tuple_var_assignment_87254' (line 1437)
    tuple_var_assignment_87254_89191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 4), 'tuple_var_assignment_87254')
    # Assigning a type to the variable 'numCols' (line 1437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 13), 'numCols', tuple_var_assignment_87254_89191)
    
    # Assigning a Call to a Name (line 1440):
    
    # Assigning a Call to a Name (line 1440):
    
    # Assigning a Call to a Name (line 1440):
    
    # Call to set(...): (line 1440)
    # Processing the call keyword arguments (line 1440)
    kwargs_89193 = {}
    # Getting the type of 'set' (line 1440)
    set_89192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 17), 'set', False)
    # Calling set(args, kwargs) (line 1440)
    set_call_result_89194 = invoke(stypy.reporting.localization.Localization(__file__, 1440, 17), set_89192, *[], **kwargs_89193)
    
    # Assigning a type to the variable 'allColumns' (line 1440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1440, 4), 'allColumns', set_call_result_89194)
    
    # Getting the type of 'ij' (line 1441)
    ij_89195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 16), 'ij')
    # Testing the type of a for loop iterable (line 1441)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1441, 4), ij_89195)
    # Getting the type of the for loop variable (line 1441)
    for_loop_var_89196 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1441, 4), ij_89195)
    # Assigning a type to the variable 'i' (line 1441)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1441, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1441, 4), for_loop_var_89196))
    # Assigning a type to the variable 'j' (line 1441)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1441, 4), 'j', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1441, 4), for_loop_var_89196))
    # SSA begins for a for statement (line 1441)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to add(...): (line 1442)
    # Processing the call arguments (line 1442)
    # Getting the type of 'i' (line 1442)
    i_89199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 23), 'i', False)
    # Processing the call keyword arguments (line 1442)
    kwargs_89200 = {}
    # Getting the type of 'allColumns' (line 1442)
    allColumns_89197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 8), 'allColumns', False)
    # Obtaining the member 'add' of a type (line 1442)
    add_89198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1442, 8), allColumns_89197, 'add')
    # Calling add(args, kwargs) (line 1442)
    add_call_result_89201 = invoke(stypy.reporting.localization.Localization(__file__, 1442, 8), add_89198, *[i_89199], **kwargs_89200)
    
    
    # Call to add(...): (line 1443)
    # Processing the call arguments (line 1443)
    # Getting the type of 'j' (line 1443)
    j_89204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 23), 'j', False)
    # Processing the call keyword arguments (line 1443)
    kwargs_89205 = {}
    # Getting the type of 'allColumns' (line 1443)
    allColumns_89202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 8), 'allColumns', False)
    # Obtaining the member 'add' of a type (line 1443)
    add_89203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1443, 8), allColumns_89202, 'add')
    # Calling add(args, kwargs) (line 1443)
    add_call_result_89206 = invoke(stypy.reporting.localization.Localization(__file__, 1443, 8), add_89203, *[j_89204], **kwargs_89205)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1444):
    
    # Assigning a Call to a Name (line 1444):
    
    # Assigning a Call to a Name (line 1444):
    
    # Call to len(...): (line 1444)
    # Processing the call arguments (line 1444)
    # Getting the type of 'allColumns' (line 1444)
    allColumns_89208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 16), 'allColumns', False)
    # Processing the call keyword arguments (line 1444)
    kwargs_89209 = {}
    # Getting the type of 'len' (line 1444)
    len_89207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 12), 'len', False)
    # Calling len(args, kwargs) (line 1444)
    len_call_result_89210 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 12), len_89207, *[allColumns_89208], **kwargs_89209)
    
    # Assigning a type to the variable 'Ncols' (line 1444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 4), 'Ncols', len_call_result_89210)
    
    
    # Call to iscomplexobj(...): (line 1447)
    # Processing the call arguments (line 1447)
    # Getting the type of 'X' (line 1447)
    X_89213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 23), 'X', False)
    # Processing the call keyword arguments (line 1447)
    kwargs_89214 = {}
    # Getting the type of 'np' (line 1447)
    np_89211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 7), 'np', False)
    # Obtaining the member 'iscomplexobj' of a type (line 1447)
    iscomplexobj_89212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1447, 7), np_89211, 'iscomplexobj')
    # Calling iscomplexobj(args, kwargs) (line 1447)
    iscomplexobj_call_result_89215 = invoke(stypy.reporting.localization.Localization(__file__, 1447, 7), iscomplexobj_89212, *[X_89213], **kwargs_89214)
    
    # Testing the type of an if condition (line 1447)
    if_condition_89216 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1447, 4), iscomplexobj_call_result_89215)
    # Assigning a type to the variable 'if_condition_89216' (line 1447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 4), 'if_condition_89216', if_condition_89216)
    # SSA begins for if statement (line 1447)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 1448):
    
    # Assigning a Name to a Name (line 1448):
    
    # Assigning a Name to a Name (line 1448):
    # Getting the type of 'NFFT' (line 1448)
    NFFT_89217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 19), 'NFFT')
    # Assigning a type to the variable 'numFreqs' (line 1448)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1448, 8), 'numFreqs', NFFT_89217)
    # SSA branch for the else part of an if statement (line 1447)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1450):
    
    # Assigning a BinOp to a Name (line 1450):
    
    # Assigning a BinOp to a Name (line 1450):
    # Getting the type of 'NFFT' (line 1450)
    NFFT_89218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 19), 'NFFT')
    int_89219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1450, 25), 'int')
    # Applying the binary operator '//' (line 1450)
    result_floordiv_89220 = python_operator(stypy.reporting.localization.Localization(__file__, 1450, 19), '//', NFFT_89218, int_89219)
    
    int_89221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1450, 27), 'int')
    # Applying the binary operator '+' (line 1450)
    result_add_89222 = python_operator(stypy.reporting.localization.Localization(__file__, 1450, 19), '+', result_floordiv_89220, int_89221)
    
    # Assigning a type to the variable 'numFreqs' (line 1450)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1450, 8), 'numFreqs', result_add_89222)
    # SSA join for if statement (line 1447)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to iterable(...): (line 1455)
    # Processing the call arguments (line 1455)
    # Getting the type of 'window' (line 1455)
    window_89225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 22), 'window', False)
    # Processing the call keyword arguments (line 1455)
    kwargs_89226 = {}
    # Getting the type of 'cbook' (line 1455)
    cbook_89223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 7), 'cbook', False)
    # Obtaining the member 'iterable' of a type (line 1455)
    iterable_89224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1455, 7), cbook_89223, 'iterable')
    # Calling iterable(args, kwargs) (line 1455)
    iterable_call_result_89227 = invoke(stypy.reporting.localization.Localization(__file__, 1455, 7), iterable_89224, *[window_89225], **kwargs_89226)
    
    # Testing the type of an if condition (line 1455)
    if_condition_89228 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1455, 4), iterable_call_result_89227)
    # Assigning a type to the variable 'if_condition_89228' (line 1455)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 4), 'if_condition_89228', if_condition_89228)
    # SSA begins for if statement (line 1455)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Call to len(...): (line 1456)
    # Processing the call arguments (line 1456)
    # Getting the type of 'window' (line 1456)
    window_89230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 15), 'window', False)
    # Processing the call keyword arguments (line 1456)
    kwargs_89231 = {}
    # Getting the type of 'len' (line 1456)
    len_89229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 11), 'len', False)
    # Calling len(args, kwargs) (line 1456)
    len_call_result_89232 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 11), len_89229, *[window_89230], **kwargs_89231)
    
    # Getting the type of 'NFFT' (line 1456)
    NFFT_89233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 26), 'NFFT')
    # Applying the binary operator '!=' (line 1456)
    result_ne_89234 = python_operator(stypy.reporting.localization.Localization(__file__, 1456, 11), '!=', len_call_result_89232, NFFT_89233)
    
    # Testing the type of an if condition (line 1456)
    if_condition_89235 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1456, 8), result_ne_89234)
    # Assigning a type to the variable 'if_condition_89235' (line 1456)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 8), 'if_condition_89235', if_condition_89235)
    # SSA begins for if statement (line 1456)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1457)
    # Processing the call arguments (line 1457)
    unicode_89237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1457, 29), 'unicode', u'The length of the window must be equal to NFFT')
    # Processing the call keyword arguments (line 1457)
    kwargs_89238 = {}
    # Getting the type of 'ValueError' (line 1457)
    ValueError_89236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1457)
    ValueError_call_result_89239 = invoke(stypy.reporting.localization.Localization(__file__, 1457, 18), ValueError_89236, *[unicode_89237], **kwargs_89238)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1457, 12), ValueError_call_result_89239, 'raise parameter', BaseException)
    # SSA join for if statement (line 1456)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 1458):
    
    # Assigning a Name to a Name (line 1458):
    
    # Assigning a Name to a Name (line 1458):
    # Getting the type of 'window' (line 1458)
    window_89240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 21), 'window')
    # Assigning a type to the variable 'windowVals' (line 1458)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1458, 8), 'windowVals', window_89240)
    # SSA branch for the else part of an if statement (line 1455)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1460):
    
    # Assigning a Call to a Name (line 1460):
    
    # Assigning a Call to a Name (line 1460):
    
    # Call to window(...): (line 1460)
    # Processing the call arguments (line 1460)
    
    # Call to ones(...): (line 1460)
    # Processing the call arguments (line 1460)
    # Getting the type of 'NFFT' (line 1460)
    NFFT_89244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 36), 'NFFT', False)
    # Getting the type of 'X' (line 1460)
    X_89245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 42), 'X', False)
    # Obtaining the member 'dtype' of a type (line 1460)
    dtype_89246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 42), X_89245, 'dtype')
    # Processing the call keyword arguments (line 1460)
    kwargs_89247 = {}
    # Getting the type of 'np' (line 1460)
    np_89242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 28), 'np', False)
    # Obtaining the member 'ones' of a type (line 1460)
    ones_89243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 28), np_89242, 'ones')
    # Calling ones(args, kwargs) (line 1460)
    ones_call_result_89248 = invoke(stypy.reporting.localization.Localization(__file__, 1460, 28), ones_89243, *[NFFT_89244, dtype_89246], **kwargs_89247)
    
    # Processing the call keyword arguments (line 1460)
    kwargs_89249 = {}
    # Getting the type of 'window' (line 1460)
    window_89241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 21), 'window', False)
    # Calling window(args, kwargs) (line 1460)
    window_call_result_89250 = invoke(stypy.reporting.localization.Localization(__file__, 1460, 21), window_89241, *[ones_call_result_89248], **kwargs_89249)
    
    # Assigning a type to the variable 'windowVals' (line 1460)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'windowVals', window_call_result_89250)
    # SSA join for if statement (line 1455)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1461):
    
    # Assigning a Call to a Name (line 1461):
    
    # Assigning a Call to a Name (line 1461):
    
    # Call to list(...): (line 1461)
    # Processing the call arguments (line 1461)
    
    # Call to xrange(...): (line 1461)
    # Processing the call arguments (line 1461)
    int_89253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1461, 22), 'int')
    # Getting the type of 'numRows' (line 1461)
    numRows_89254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 25), 'numRows', False)
    # Getting the type of 'NFFT' (line 1461)
    NFFT_89255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 33), 'NFFT', False)
    # Applying the binary operator '-' (line 1461)
    result_sub_89256 = python_operator(stypy.reporting.localization.Localization(__file__, 1461, 25), '-', numRows_89254, NFFT_89255)
    
    int_89257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1461, 38), 'int')
    # Applying the binary operator '+' (line 1461)
    result_add_89258 = python_operator(stypy.reporting.localization.Localization(__file__, 1461, 37), '+', result_sub_89256, int_89257)
    
    # Getting the type of 'NFFT' (line 1461)
    NFFT_89259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 41), 'NFFT', False)
    # Getting the type of 'noverlap' (line 1461)
    noverlap_89260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 46), 'noverlap', False)
    # Applying the binary operator '-' (line 1461)
    result_sub_89261 = python_operator(stypy.reporting.localization.Localization(__file__, 1461, 41), '-', NFFT_89259, noverlap_89260)
    
    # Processing the call keyword arguments (line 1461)
    kwargs_89262 = {}
    # Getting the type of 'xrange' (line 1461)
    xrange_89252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 15), 'xrange', False)
    # Calling xrange(args, kwargs) (line 1461)
    xrange_call_result_89263 = invoke(stypy.reporting.localization.Localization(__file__, 1461, 15), xrange_89252, *[int_89253, result_add_89258, result_sub_89261], **kwargs_89262)
    
    # Processing the call keyword arguments (line 1461)
    kwargs_89264 = {}
    # Getting the type of 'list' (line 1461)
    list_89251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 10), 'list', False)
    # Calling list(args, kwargs) (line 1461)
    list_call_result_89265 = invoke(stypy.reporting.localization.Localization(__file__, 1461, 10), list_89251, *[xrange_call_result_89263], **kwargs_89264)
    
    # Assigning a type to the variable 'ind' (line 1461)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1461, 4), 'ind', list_call_result_89265)
    
    # Assigning a Call to a Name (line 1462):
    
    # Assigning a Call to a Name (line 1462):
    
    # Assigning a Call to a Name (line 1462):
    
    # Call to len(...): (line 1462)
    # Processing the call arguments (line 1462)
    # Getting the type of 'ind' (line 1462)
    ind_89267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 20), 'ind', False)
    # Processing the call keyword arguments (line 1462)
    kwargs_89268 = {}
    # Getting the type of 'len' (line 1462)
    len_89266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 16), 'len', False)
    # Calling len(args, kwargs) (line 1462)
    len_call_result_89269 = invoke(stypy.reporting.localization.Localization(__file__, 1462, 16), len_89266, *[ind_89267], **kwargs_89268)
    
    # Assigning a type to the variable 'numSlices' (line 1462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1462, 4), 'numSlices', len_call_result_89269)
    
    # Assigning a Dict to a Name (line 1463):
    
    # Assigning a Dict to a Name (line 1463):
    
    # Assigning a Dict to a Name (line 1463):
    
    # Obtaining an instance of the builtin type 'dict' (line 1463)
    dict_89270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1463, 16), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1463)
    
    # Assigning a type to the variable 'FFTSlices' (line 1463)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1463, 4), 'FFTSlices', dict_89270)
    
    # Assigning a Dict to a Name (line 1464):
    
    # Assigning a Dict to a Name (line 1464):
    
    # Assigning a Dict to a Name (line 1464):
    
    # Obtaining an instance of the builtin type 'dict' (line 1464)
    dict_89271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1464, 20), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1464)
    
    # Assigning a type to the variable 'FFTConjSlices' (line 1464)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1464, 4), 'FFTConjSlices', dict_89271)
    
    # Assigning a Dict to a Name (line 1465):
    
    # Assigning a Dict to a Name (line 1465):
    
    # Assigning a Dict to a Name (line 1465):
    
    # Obtaining an instance of the builtin type 'dict' (line 1465)
    dict_89272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1465, 10), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1465)
    
    # Assigning a type to the variable 'Pxx' (line 1465)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1465, 4), 'Pxx', dict_89272)
    
    # Assigning a Call to a Name (line 1466):
    
    # Assigning a Call to a Name (line 1466):
    
    # Assigning a Call to a Name (line 1466):
    
    # Call to range(...): (line 1466)
    # Processing the call arguments (line 1466)
    # Getting the type of 'numSlices' (line 1466)
    numSlices_89274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 19), 'numSlices', False)
    # Processing the call keyword arguments (line 1466)
    kwargs_89275 = {}
    # Getting the type of 'range' (line 1466)
    range_89273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 13), 'range', False)
    # Calling range(args, kwargs) (line 1466)
    range_call_result_89276 = invoke(stypy.reporting.localization.Localization(__file__, 1466, 13), range_89273, *[numSlices_89274], **kwargs_89275)
    
    # Assigning a type to the variable 'slices' (line 1466)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1466, 4), 'slices', range_call_result_89276)
    
    # Assigning a BinOp to a Name (line 1467):
    
    # Assigning a BinOp to a Name (line 1467):
    
    # Assigning a BinOp to a Name (line 1467):
    
    # Call to norm(...): (line 1467)
    # Processing the call arguments (line 1467)
    # Getting the type of 'windowVals' (line 1467)
    windowVals_89280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 29), 'windowVals', False)
    # Processing the call keyword arguments (line 1467)
    kwargs_89281 = {}
    # Getting the type of 'np' (line 1467)
    np_89277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 14), 'np', False)
    # Obtaining the member 'linalg' of a type (line 1467)
    linalg_89278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1467, 14), np_89277, 'linalg')
    # Obtaining the member 'norm' of a type (line 1467)
    norm_89279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1467, 14), linalg_89278, 'norm')
    # Calling norm(args, kwargs) (line 1467)
    norm_call_result_89282 = invoke(stypy.reporting.localization.Localization(__file__, 1467, 14), norm_89279, *[windowVals_89280], **kwargs_89281)
    
    int_89283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1467, 42), 'int')
    # Applying the binary operator '**' (line 1467)
    result_pow_89284 = python_operator(stypy.reporting.localization.Localization(__file__, 1467, 14), '**', norm_call_result_89282, int_89283)
    
    # Assigning a type to the variable 'normVal' (line 1467)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1467, 4), 'normVal', result_pow_89284)
    
    # Getting the type of 'allColumns' (line 1468)
    allColumns_89285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 16), 'allColumns')
    # Testing the type of a for loop iterable (line 1468)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1468, 4), allColumns_89285)
    # Getting the type of the for loop variable (line 1468)
    for_loop_var_89286 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1468, 4), allColumns_89285)
    # Assigning a type to the variable 'iCol' (line 1468)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1468, 4), 'iCol', for_loop_var_89286)
    # SSA begins for a for statement (line 1468)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to progressCallback(...): (line 1469)
    # Processing the call arguments (line 1469)
    # Getting the type of 'i' (line 1469)
    i_89288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 25), 'i', False)
    # Getting the type of 'Ncols' (line 1469)
    Ncols_89289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 27), 'Ncols', False)
    # Applying the binary operator 'div' (line 1469)
    result_div_89290 = python_operator(stypy.reporting.localization.Localization(__file__, 1469, 25), 'div', i_89288, Ncols_89289)
    
    unicode_89291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 34), 'unicode', u'Cacheing FFTs')
    # Processing the call keyword arguments (line 1469)
    kwargs_89292 = {}
    # Getting the type of 'progressCallback' (line 1469)
    progressCallback_89287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 8), 'progressCallback', False)
    # Calling progressCallback(args, kwargs) (line 1469)
    progressCallback_call_result_89293 = invoke(stypy.reporting.localization.Localization(__file__, 1469, 8), progressCallback_89287, *[result_div_89290, unicode_89291], **kwargs_89292)
    
    
    # Assigning a Call to a Name (line 1470):
    
    # Assigning a Call to a Name (line 1470):
    
    # Assigning a Call to a Name (line 1470):
    
    # Call to zeros(...): (line 1470)
    # Processing the call arguments (line 1470)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1470)
    tuple_89296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1470, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1470)
    # Adding element type (line 1470)
    # Getting the type of 'numSlices' (line 1470)
    numSlices_89297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 27), 'numSlices', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1470, 27), tuple_89296, numSlices_89297)
    # Adding element type (line 1470)
    # Getting the type of 'numFreqs' (line 1470)
    numFreqs_89298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 38), 'numFreqs', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1470, 27), tuple_89296, numFreqs_89298)
    
    # Processing the call keyword arguments (line 1470)
    # Getting the type of 'np' (line 1470)
    np_89299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 55), 'np', False)
    # Obtaining the member 'complex_' of a type (line 1470)
    complex__89300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1470, 55), np_89299, 'complex_')
    keyword_89301 = complex__89300
    kwargs_89302 = {'dtype': keyword_89301}
    # Getting the type of 'np' (line 1470)
    np_89294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 17), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1470)
    zeros_89295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1470, 17), np_89294, 'zeros')
    # Calling zeros(args, kwargs) (line 1470)
    zeros_call_result_89303 = invoke(stypy.reporting.localization.Localization(__file__, 1470, 17), zeros_89295, *[tuple_89296], **kwargs_89302)
    
    # Assigning a type to the variable 'Slices' (line 1470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 8), 'Slices', zeros_call_result_89303)
    
    # Getting the type of 'slices' (line 1471)
    slices_89304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 22), 'slices')
    # Testing the type of a for loop iterable (line 1471)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1471, 8), slices_89304)
    # Getting the type of the for loop variable (line 1471)
    for_loop_var_89305 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1471, 8), slices_89304)
    # Assigning a type to the variable 'iSlice' (line 1471)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 'iSlice', for_loop_var_89305)
    # SSA begins for a for statement (line 1471)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 1472):
    
    # Assigning a Subscript to a Name (line 1472):
    
    # Assigning a Subscript to a Name (line 1472):
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    # Getting the type of 'iSlice' (line 1472)
    iSlice_89306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 30), 'iSlice')
    # Getting the type of 'ind' (line 1472)
    ind_89307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 26), 'ind')
    # Obtaining the member '__getitem__' of a type (line 1472)
    getitem___89308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 26), ind_89307, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1472)
    subscript_call_result_89309 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 26), getitem___89308, iSlice_89306)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'iSlice' (line 1472)
    iSlice_89310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 42), 'iSlice')
    # Getting the type of 'ind' (line 1472)
    ind_89311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 38), 'ind')
    # Obtaining the member '__getitem__' of a type (line 1472)
    getitem___89312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 38), ind_89311, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1472)
    subscript_call_result_89313 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 38), getitem___89312, iSlice_89310)
    
    # Getting the type of 'NFFT' (line 1472)
    NFFT_89314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 50), 'NFFT')
    # Applying the binary operator '+' (line 1472)
    result_add_89315 = python_operator(stypy.reporting.localization.Localization(__file__, 1472, 38), '+', subscript_call_result_89313, NFFT_89314)
    
    slice_89316 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1472, 24), subscript_call_result_89309, result_add_89315, None)
    # Getting the type of 'iCol' (line 1472)
    iCol_89317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 56), 'iCol')
    # Getting the type of 'X' (line 1472)
    X_89318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 24), 'X')
    # Obtaining the member '__getitem__' of a type (line 1472)
    getitem___89319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 24), X_89318, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1472)
    subscript_call_result_89320 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 24), getitem___89319, (slice_89316, iCol_89317))
    
    # Assigning a type to the variable 'thisSlice' (line 1472)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 12), 'thisSlice', subscript_call_result_89320)
    
    # Assigning a BinOp to a Name (line 1473):
    
    # Assigning a BinOp to a Name (line 1473):
    
    # Assigning a BinOp to a Name (line 1473):
    # Getting the type of 'windowVals' (line 1473)
    windowVals_89321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 24), 'windowVals')
    
    # Call to detrend(...): (line 1473)
    # Processing the call arguments (line 1473)
    # Getting the type of 'thisSlice' (line 1473)
    thisSlice_89323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 43), 'thisSlice', False)
    # Processing the call keyword arguments (line 1473)
    kwargs_89324 = {}
    # Getting the type of 'detrend' (line 1473)
    detrend_89322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 35), 'detrend', False)
    # Calling detrend(args, kwargs) (line 1473)
    detrend_call_result_89325 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 35), detrend_89322, *[thisSlice_89323], **kwargs_89324)
    
    # Applying the binary operator '*' (line 1473)
    result_mul_89326 = python_operator(stypy.reporting.localization.Localization(__file__, 1473, 24), '*', windowVals_89321, detrend_call_result_89325)
    
    # Assigning a type to the variable 'thisSlice' (line 1473)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1473, 12), 'thisSlice', result_mul_89326)
    
    # Assigning a Subscript to a Subscript (line 1474):
    
    # Assigning a Subscript to a Subscript (line 1474):
    
    # Assigning a Subscript to a Subscript (line 1474):
    
    # Obtaining the type of the subscript
    # Getting the type of 'numFreqs' (line 1474)
    numFreqs_89327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 55), 'numFreqs')
    slice_89328 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1474, 32), None, numFreqs_89327, None)
    
    # Call to fft(...): (line 1474)
    # Processing the call arguments (line 1474)
    # Getting the type of 'thisSlice' (line 1474)
    thisSlice_89332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 43), 'thisSlice', False)
    # Processing the call keyword arguments (line 1474)
    kwargs_89333 = {}
    # Getting the type of 'np' (line 1474)
    np_89329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 32), 'np', False)
    # Obtaining the member 'fft' of a type (line 1474)
    fft_89330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1474, 32), np_89329, 'fft')
    # Obtaining the member 'fft' of a type (line 1474)
    fft_89331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1474, 32), fft_89330, 'fft')
    # Calling fft(args, kwargs) (line 1474)
    fft_call_result_89334 = invoke(stypy.reporting.localization.Localization(__file__, 1474, 32), fft_89331, *[thisSlice_89332], **kwargs_89333)
    
    # Obtaining the member '__getitem__' of a type (line 1474)
    getitem___89335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1474, 32), fft_call_result_89334, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1474)
    subscript_call_result_89336 = invoke(stypy.reporting.localization.Localization(__file__, 1474, 32), getitem___89335, slice_89328)
    
    # Getting the type of 'Slices' (line 1474)
    Slices_89337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 12), 'Slices')
    # Getting the type of 'iSlice' (line 1474)
    iSlice_89338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 19), 'iSlice')
    slice_89339 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1474, 12), None, None, None)
    # Storing an element on a container (line 1474)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1474, 12), Slices_89337, ((iSlice_89338, slice_89339), subscript_call_result_89336))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Subscript (line 1476):
    
    # Assigning a Name to a Subscript (line 1476):
    
    # Assigning a Name to a Subscript (line 1476):
    # Getting the type of 'Slices' (line 1476)
    Slices_89340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 26), 'Slices')
    # Getting the type of 'FFTSlices' (line 1476)
    FFTSlices_89341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 8), 'FFTSlices')
    # Getting the type of 'iCol' (line 1476)
    iCol_89342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 18), 'iCol')
    # Storing an element on a container (line 1476)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1476, 8), FFTSlices_89341, (iCol_89342, Slices_89340))
    
    # Getting the type of 'preferSpeedOverMemory' (line 1477)
    preferSpeedOverMemory_89343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 11), 'preferSpeedOverMemory')
    # Testing the type of an if condition (line 1477)
    if_condition_89344 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1477, 8), preferSpeedOverMemory_89343)
    # Assigning a type to the variable 'if_condition_89344' (line 1477)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1477, 8), 'if_condition_89344', if_condition_89344)
    # SSA begins for if statement (line 1477)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Subscript (line 1478):
    
    # Assigning a Call to a Subscript (line 1478):
    
    # Assigning a Call to a Subscript (line 1478):
    
    # Call to conj(...): (line 1478)
    # Processing the call arguments (line 1478)
    # Getting the type of 'Slices' (line 1478)
    Slices_89347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 42), 'Slices', False)
    # Processing the call keyword arguments (line 1478)
    kwargs_89348 = {}
    # Getting the type of 'np' (line 1478)
    np_89345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 34), 'np', False)
    # Obtaining the member 'conj' of a type (line 1478)
    conj_89346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1478, 34), np_89345, 'conj')
    # Calling conj(args, kwargs) (line 1478)
    conj_call_result_89349 = invoke(stypy.reporting.localization.Localization(__file__, 1478, 34), conj_89346, *[Slices_89347], **kwargs_89348)
    
    # Getting the type of 'FFTConjSlices' (line 1478)
    FFTConjSlices_89350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 12), 'FFTConjSlices')
    # Getting the type of 'iCol' (line 1478)
    iCol_89351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 26), 'iCol')
    # Storing an element on a container (line 1478)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1478, 12), FFTConjSlices_89350, (iCol_89351, conj_call_result_89349))
    # SSA join for if statement (line 1477)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Subscript (line 1479):
    
    # Assigning a Call to a Subscript (line 1479):
    
    # Assigning a Call to a Subscript (line 1479):
    
    # Call to divide(...): (line 1479)
    # Processing the call arguments (line 1479)
    
    # Call to mean(...): (line 1479)
    # Processing the call arguments (line 1479)
    
    # Call to abs(...): (line 1479)
    # Processing the call arguments (line 1479)
    # Getting the type of 'Slices' (line 1479)
    Slices_89357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 42), 'Slices', False)
    # Processing the call keyword arguments (line 1479)
    kwargs_89358 = {}
    # Getting the type of 'abs' (line 1479)
    abs_89356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 38), 'abs', False)
    # Calling abs(args, kwargs) (line 1479)
    abs_call_result_89359 = invoke(stypy.reporting.localization.Localization(__file__, 1479, 38), abs_89356, *[Slices_89357], **kwargs_89358)
    
    int_89360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, 51), 'int')
    # Applying the binary operator '**' (line 1479)
    result_pow_89361 = python_operator(stypy.reporting.localization.Localization(__file__, 1479, 38), '**', abs_call_result_89359, int_89360)
    
    # Processing the call keyword arguments (line 1479)
    int_89362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, 59), 'int')
    keyword_89363 = int_89362
    kwargs_89364 = {'axis': keyword_89363}
    # Getting the type of 'np' (line 1479)
    np_89354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 30), 'np', False)
    # Obtaining the member 'mean' of a type (line 1479)
    mean_89355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1479, 30), np_89354, 'mean')
    # Calling mean(args, kwargs) (line 1479)
    mean_call_result_89365 = invoke(stypy.reporting.localization.Localization(__file__, 1479, 30), mean_89355, *[result_pow_89361], **kwargs_89364)
    
    # Getting the type of 'normVal' (line 1479)
    normVal_89366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 63), 'normVal', False)
    # Processing the call keyword arguments (line 1479)
    kwargs_89367 = {}
    # Getting the type of 'np' (line 1479)
    np_89352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 20), 'np', False)
    # Obtaining the member 'divide' of a type (line 1479)
    divide_89353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1479, 20), np_89352, 'divide')
    # Calling divide(args, kwargs) (line 1479)
    divide_call_result_89368 = invoke(stypy.reporting.localization.Localization(__file__, 1479, 20), divide_89353, *[mean_call_result_89365, normVal_89366], **kwargs_89367)
    
    # Getting the type of 'Pxx' (line 1479)
    Pxx_89369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 8), 'Pxx')
    # Getting the type of 'iCol' (line 1479)
    iCol_89370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 12), 'iCol')
    # Storing an element on a container (line 1479)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1479, 8), Pxx_89369, (iCol_89370, divide_call_result_89368))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Deleting a member
    module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 1480, 4), module_type_store, 'Slices')
    # Deleting a member
    module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 1480, 4), module_type_store, 'ind')
    # Deleting a member
    module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 1480, 4), module_type_store, 'windowVals')
    
    # Assigning a Dict to a Name (line 1484):
    
    # Assigning a Dict to a Name (line 1484):
    
    # Assigning a Dict to a Name (line 1484):
    
    # Obtaining an instance of the builtin type 'dict' (line 1484)
    dict_89371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1484, 10), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1484)
    
    # Assigning a type to the variable 'Cxy' (line 1484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1484, 4), 'Cxy', dict_89371)
    
    # Assigning a Dict to a Name (line 1485):
    
    # Assigning a Dict to a Name (line 1485):
    
    # Assigning a Dict to a Name (line 1485):
    
    # Obtaining an instance of the builtin type 'dict' (line 1485)
    dict_89372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1485, 12), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1485)
    
    # Assigning a type to the variable 'Phase' (line 1485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1485, 4), 'Phase', dict_89372)
    
    # Assigning a Num to a Name (line 1486):
    
    # Assigning a Num to a Name (line 1486):
    
    # Assigning a Num to a Name (line 1486):
    int_89373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1486, 12), 'int')
    # Assigning a type to the variable 'count' (line 1486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1486, 4), 'count', int_89373)
    
    # Assigning a Call to a Name (line 1487):
    
    # Assigning a Call to a Name (line 1487):
    
    # Assigning a Call to a Name (line 1487):
    
    # Call to len(...): (line 1487)
    # Processing the call arguments (line 1487)
    # Getting the type of 'ij' (line 1487)
    ij_89375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 12), 'ij', False)
    # Processing the call keyword arguments (line 1487)
    kwargs_89376 = {}
    # Getting the type of 'len' (line 1487)
    len_89374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 8), 'len', False)
    # Calling len(args, kwargs) (line 1487)
    len_call_result_89377 = invoke(stypy.reporting.localization.Localization(__file__, 1487, 8), len_89374, *[ij_89375], **kwargs_89376)
    
    # Assigning a type to the variable 'N' (line 1487)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1487, 4), 'N', len_call_result_89377)
    
    # Getting the type of 'ij' (line 1488)
    ij_89378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 16), 'ij')
    # Testing the type of a for loop iterable (line 1488)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1488, 4), ij_89378)
    # Getting the type of the for loop variable (line 1488)
    for_loop_var_89379 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1488, 4), ij_89378)
    # Assigning a type to the variable 'i' (line 1488)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1488, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1488, 4), for_loop_var_89379))
    # Assigning a type to the variable 'j' (line 1488)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1488, 4), 'j', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1488, 4), for_loop_var_89379))
    # SSA begins for a for statement (line 1488)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'count' (line 1489)
    count_89380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 8), 'count')
    int_89381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1489, 17), 'int')
    # Applying the binary operator '+=' (line 1489)
    result_iadd_89382 = python_operator(stypy.reporting.localization.Localization(__file__, 1489, 8), '+=', count_89380, int_89381)
    # Assigning a type to the variable 'count' (line 1489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 8), 'count', result_iadd_89382)
    
    
    
    # Getting the type of 'count' (line 1490)
    count_89383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 11), 'count')
    int_89384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1490, 19), 'int')
    # Applying the binary operator '%' (line 1490)
    result_mod_89385 = python_operator(stypy.reporting.localization.Localization(__file__, 1490, 11), '%', count_89383, int_89384)
    
    int_89386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1490, 25), 'int')
    # Applying the binary operator '==' (line 1490)
    result_eq_89387 = python_operator(stypy.reporting.localization.Localization(__file__, 1490, 11), '==', result_mod_89385, int_89386)
    
    # Testing the type of an if condition (line 1490)
    if_condition_89388 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1490, 8), result_eq_89387)
    # Assigning a type to the variable 'if_condition_89388' (line 1490)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1490, 8), 'if_condition_89388', if_condition_89388)
    # SSA begins for if statement (line 1490)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to progressCallback(...): (line 1491)
    # Processing the call arguments (line 1491)
    # Getting the type of 'count' (line 1491)
    count_89390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 29), 'count', False)
    # Getting the type of 'N' (line 1491)
    N_89391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 35), 'N', False)
    # Applying the binary operator 'div' (line 1491)
    result_div_89392 = python_operator(stypy.reporting.localization.Localization(__file__, 1491, 29), 'div', count_89390, N_89391)
    
    unicode_89393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1491, 38), 'unicode', u'Computing coherences')
    # Processing the call keyword arguments (line 1491)
    kwargs_89394 = {}
    # Getting the type of 'progressCallback' (line 1491)
    progressCallback_89389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 12), 'progressCallback', False)
    # Calling progressCallback(args, kwargs) (line 1491)
    progressCallback_call_result_89395 = invoke(stypy.reporting.localization.Localization(__file__, 1491, 12), progressCallback_89389, *[result_div_89392, unicode_89393], **kwargs_89394)
    
    # SSA join for if statement (line 1490)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'preferSpeedOverMemory' (line 1493)
    preferSpeedOverMemory_89396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 11), 'preferSpeedOverMemory')
    # Testing the type of an if condition (line 1493)
    if_condition_89397 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1493, 8), preferSpeedOverMemory_89396)
    # Assigning a type to the variable 'if_condition_89397' (line 1493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 8), 'if_condition_89397', if_condition_89397)
    # SSA begins for if statement (line 1493)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1494):
    
    # Assigning a BinOp to a Name (line 1494):
    
    # Assigning a BinOp to a Name (line 1494):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1494)
    i_89398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 28), 'i')
    # Getting the type of 'FFTSlices' (line 1494)
    FFTSlices_89399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 18), 'FFTSlices')
    # Obtaining the member '__getitem__' of a type (line 1494)
    getitem___89400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1494, 18), FFTSlices_89399, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1494)
    subscript_call_result_89401 = invoke(stypy.reporting.localization.Localization(__file__, 1494, 18), getitem___89400, i_89398)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 1494)
    j_89402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 47), 'j')
    # Getting the type of 'FFTConjSlices' (line 1494)
    FFTConjSlices_89403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 33), 'FFTConjSlices')
    # Obtaining the member '__getitem__' of a type (line 1494)
    getitem___89404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1494, 33), FFTConjSlices_89403, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1494)
    subscript_call_result_89405 = invoke(stypy.reporting.localization.Localization(__file__, 1494, 33), getitem___89404, j_89402)
    
    # Applying the binary operator '*' (line 1494)
    result_mul_89406 = python_operator(stypy.reporting.localization.Localization(__file__, 1494, 18), '*', subscript_call_result_89401, subscript_call_result_89405)
    
    # Assigning a type to the variable 'Pxy' (line 1494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1494, 12), 'Pxy', result_mul_89406)
    # SSA branch for the else part of an if statement (line 1493)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1496):
    
    # Assigning a BinOp to a Name (line 1496):
    
    # Assigning a BinOp to a Name (line 1496):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1496)
    i_89407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 28), 'i')
    # Getting the type of 'FFTSlices' (line 1496)
    FFTSlices_89408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 18), 'FFTSlices')
    # Obtaining the member '__getitem__' of a type (line 1496)
    getitem___89409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1496, 18), FFTSlices_89408, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1496)
    subscript_call_result_89410 = invoke(stypy.reporting.localization.Localization(__file__, 1496, 18), getitem___89409, i_89407)
    
    
    # Call to conj(...): (line 1496)
    # Processing the call arguments (line 1496)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 1496)
    j_89413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 51), 'j', False)
    # Getting the type of 'FFTSlices' (line 1496)
    FFTSlices_89414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 41), 'FFTSlices', False)
    # Obtaining the member '__getitem__' of a type (line 1496)
    getitem___89415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1496, 41), FFTSlices_89414, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1496)
    subscript_call_result_89416 = invoke(stypy.reporting.localization.Localization(__file__, 1496, 41), getitem___89415, j_89413)
    
    # Processing the call keyword arguments (line 1496)
    kwargs_89417 = {}
    # Getting the type of 'np' (line 1496)
    np_89411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 33), 'np', False)
    # Obtaining the member 'conj' of a type (line 1496)
    conj_89412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1496, 33), np_89411, 'conj')
    # Calling conj(args, kwargs) (line 1496)
    conj_call_result_89418 = invoke(stypy.reporting.localization.Localization(__file__, 1496, 33), conj_89412, *[subscript_call_result_89416], **kwargs_89417)
    
    # Applying the binary operator '*' (line 1496)
    result_mul_89419 = python_operator(stypy.reporting.localization.Localization(__file__, 1496, 18), '*', subscript_call_result_89410, conj_call_result_89418)
    
    # Assigning a type to the variable 'Pxy' (line 1496)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1496, 12), 'Pxy', result_mul_89419)
    # SSA join for if statement (line 1493)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'numSlices' (line 1497)
    numSlices_89420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 11), 'numSlices')
    int_89421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1497, 23), 'int')
    # Applying the binary operator '>' (line 1497)
    result_gt_89422 = python_operator(stypy.reporting.localization.Localization(__file__, 1497, 11), '>', numSlices_89420, int_89421)
    
    # Testing the type of an if condition (line 1497)
    if_condition_89423 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1497, 8), result_gt_89422)
    # Assigning a type to the variable 'if_condition_89423' (line 1497)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 8), 'if_condition_89423', if_condition_89423)
    # SSA begins for if statement (line 1497)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1498):
    
    # Assigning a Call to a Name (line 1498):
    
    # Assigning a Call to a Name (line 1498):
    
    # Call to mean(...): (line 1498)
    # Processing the call arguments (line 1498)
    # Getting the type of 'Pxy' (line 1498)
    Pxy_89426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 26), 'Pxy', False)
    # Processing the call keyword arguments (line 1498)
    int_89427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1498, 36), 'int')
    keyword_89428 = int_89427
    kwargs_89429 = {'axis': keyword_89428}
    # Getting the type of 'np' (line 1498)
    np_89424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 18), 'np', False)
    # Obtaining the member 'mean' of a type (line 1498)
    mean_89425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1498, 18), np_89424, 'mean')
    # Calling mean(args, kwargs) (line 1498)
    mean_call_result_89430 = invoke(stypy.reporting.localization.Localization(__file__, 1498, 18), mean_89425, *[Pxy_89426], **kwargs_89429)
    
    # Assigning a type to the variable 'Pxy' (line 1498)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1498, 12), 'Pxy', mean_call_result_89430)
    # SSA join for if statement (line 1497)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'Pxy' (line 1500)
    Pxy_89431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 8), 'Pxy')
    # Getting the type of 'normVal' (line 1500)
    normVal_89432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 15), 'normVal')
    # Applying the binary operator 'div=' (line 1500)
    result_div_89433 = python_operator(stypy.reporting.localization.Localization(__file__, 1500, 8), 'div=', Pxy_89431, normVal_89432)
    # Assigning a type to the variable 'Pxy' (line 1500)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1500, 8), 'Pxy', result_div_89433)
    
    
    # Assigning a BinOp to a Subscript (line 1502):
    
    # Assigning a BinOp to a Subscript (line 1502):
    
    # Assigning a BinOp to a Subscript (line 1502):
    
    # Call to abs(...): (line 1502)
    # Processing the call arguments (line 1502)
    # Getting the type of 'Pxy' (line 1502)
    Pxy_89435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 24), 'Pxy', False)
    # Processing the call keyword arguments (line 1502)
    kwargs_89436 = {}
    # Getting the type of 'abs' (line 1502)
    abs_89434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 20), 'abs', False)
    # Calling abs(args, kwargs) (line 1502)
    abs_call_result_89437 = invoke(stypy.reporting.localization.Localization(__file__, 1502, 20), abs_89434, *[Pxy_89435], **kwargs_89436)
    
    int_89438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1502, 30), 'int')
    # Applying the binary operator '**' (line 1502)
    result_pow_89439 = python_operator(stypy.reporting.localization.Localization(__file__, 1502, 20), '**', abs_call_result_89437, int_89438)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1502)
    i_89440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 39), 'i')
    # Getting the type of 'Pxx' (line 1502)
    Pxx_89441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 35), 'Pxx')
    # Obtaining the member '__getitem__' of a type (line 1502)
    getitem___89442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1502, 35), Pxx_89441, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1502)
    subscript_call_result_89443 = invoke(stypy.reporting.localization.Localization(__file__, 1502, 35), getitem___89442, i_89440)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 1502)
    j_89444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 46), 'j')
    # Getting the type of 'Pxx' (line 1502)
    Pxx_89445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 42), 'Pxx')
    # Obtaining the member '__getitem__' of a type (line 1502)
    getitem___89446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1502, 42), Pxx_89445, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1502)
    subscript_call_result_89447 = invoke(stypy.reporting.localization.Localization(__file__, 1502, 42), getitem___89446, j_89444)
    
    # Applying the binary operator '*' (line 1502)
    result_mul_89448 = python_operator(stypy.reporting.localization.Localization(__file__, 1502, 35), '*', subscript_call_result_89443, subscript_call_result_89447)
    
    # Applying the binary operator 'div' (line 1502)
    result_div_89449 = python_operator(stypy.reporting.localization.Localization(__file__, 1502, 20), 'div', result_pow_89439, result_mul_89448)
    
    # Getting the type of 'Cxy' (line 1502)
    Cxy_89450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 8), 'Cxy')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1502)
    tuple_89451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1502, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1502)
    # Adding element type (line 1502)
    # Getting the type of 'i' (line 1502)
    i_89452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 12), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1502, 12), tuple_89451, i_89452)
    # Adding element type (line 1502)
    # Getting the type of 'j' (line 1502)
    j_89453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 15), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1502, 12), tuple_89451, j_89453)
    
    # Storing an element on a container (line 1502)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1502, 8), Cxy_89450, (tuple_89451, result_div_89449))
    
    # Assigning a Call to a Subscript (line 1503):
    
    # Assigning a Call to a Subscript (line 1503):
    
    # Assigning a Call to a Subscript (line 1503):
    
    # Call to arctan2(...): (line 1503)
    # Processing the call arguments (line 1503)
    # Getting the type of 'Pxy' (line 1503)
    Pxy_89456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 33), 'Pxy', False)
    # Obtaining the member 'imag' of a type (line 1503)
    imag_89457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1503, 33), Pxy_89456, 'imag')
    # Getting the type of 'Pxy' (line 1503)
    Pxy_89458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 43), 'Pxy', False)
    # Obtaining the member 'real' of a type (line 1503)
    real_89459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1503, 43), Pxy_89458, 'real')
    # Processing the call keyword arguments (line 1503)
    kwargs_89460 = {}
    # Getting the type of 'np' (line 1503)
    np_89454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 22), 'np', False)
    # Obtaining the member 'arctan2' of a type (line 1503)
    arctan2_89455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1503, 22), np_89454, 'arctan2')
    # Calling arctan2(args, kwargs) (line 1503)
    arctan2_call_result_89461 = invoke(stypy.reporting.localization.Localization(__file__, 1503, 22), arctan2_89455, *[imag_89457, real_89459], **kwargs_89460)
    
    # Getting the type of 'Phase' (line 1503)
    Phase_89462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 8), 'Phase')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1503)
    tuple_89463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1503, 14), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1503)
    # Adding element type (line 1503)
    # Getting the type of 'i' (line 1503)
    i_89464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 14), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1503, 14), tuple_89463, i_89464)
    # Adding element type (line 1503)
    # Getting the type of 'j' (line 1503)
    j_89465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 17), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1503, 14), tuple_89463, j_89465)
    
    # Storing an element on a container (line 1503)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1503, 8), Phase_89462, (tuple_89463, arctan2_call_result_89461))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1505):
    
    # Assigning a BinOp to a Name (line 1505):
    
    # Assigning a BinOp to a Name (line 1505):
    # Getting the type of 'Fs' (line 1505)
    Fs_89466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 12), 'Fs')
    # Getting the type of 'NFFT' (line 1505)
    NFFT_89467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 15), 'NFFT')
    # Applying the binary operator 'div' (line 1505)
    result_div_89468 = python_operator(stypy.reporting.localization.Localization(__file__, 1505, 12), 'div', Fs_89466, NFFT_89467)
    
    
    # Call to arange(...): (line 1505)
    # Processing the call arguments (line 1505)
    # Getting the type of 'numFreqs' (line 1505)
    numFreqs_89471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 30), 'numFreqs', False)
    # Processing the call keyword arguments (line 1505)
    kwargs_89472 = {}
    # Getting the type of 'np' (line 1505)
    np_89469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 20), 'np', False)
    # Obtaining the member 'arange' of a type (line 1505)
    arange_89470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1505, 20), np_89469, 'arange')
    # Calling arange(args, kwargs) (line 1505)
    arange_call_result_89473 = invoke(stypy.reporting.localization.Localization(__file__, 1505, 20), arange_89470, *[numFreqs_89471], **kwargs_89472)
    
    # Applying the binary operator '*' (line 1505)
    result_mul_89474 = python_operator(stypy.reporting.localization.Localization(__file__, 1505, 19), '*', result_div_89468, arange_call_result_89473)
    
    # Assigning a type to the variable 'freqs' (line 1505)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1505, 4), 'freqs', result_mul_89474)
    
    # Getting the type of 'returnPxx' (line 1506)
    returnPxx_89475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 7), 'returnPxx')
    # Testing the type of an if condition (line 1506)
    if_condition_89476 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1506, 4), returnPxx_89475)
    # Assigning a type to the variable 'if_condition_89476' (line 1506)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1506, 4), 'if_condition_89476', if_condition_89476)
    # SSA begins for if statement (line 1506)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1507)
    tuple_89477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1507, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1507)
    # Adding element type (line 1507)
    # Getting the type of 'Cxy' (line 1507)
    Cxy_89478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 15), 'Cxy')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1507, 15), tuple_89477, Cxy_89478)
    # Adding element type (line 1507)
    # Getting the type of 'Phase' (line 1507)
    Phase_89479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 20), 'Phase')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1507, 15), tuple_89477, Phase_89479)
    # Adding element type (line 1507)
    # Getting the type of 'freqs' (line 1507)
    freqs_89480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 27), 'freqs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1507, 15), tuple_89477, freqs_89480)
    # Adding element type (line 1507)
    # Getting the type of 'Pxx' (line 1507)
    Pxx_89481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 34), 'Pxx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1507, 15), tuple_89477, Pxx_89481)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1507)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1507, 8), 'stypy_return_type', tuple_89477)
    # SSA branch for the else part of an if statement (line 1506)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1509)
    tuple_89482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1509, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1509)
    # Adding element type (line 1509)
    # Getting the type of 'Cxy' (line 1509)
    Cxy_89483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 15), 'Cxy')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1509, 15), tuple_89482, Cxy_89483)
    # Adding element type (line 1509)
    # Getting the type of 'Phase' (line 1509)
    Phase_89484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 20), 'Phase')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1509, 15), tuple_89482, Phase_89484)
    # Adding element type (line 1509)
    # Getting the type of 'freqs' (line 1509)
    freqs_89485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 27), 'freqs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1509, 15), tuple_89482, freqs_89485)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1509)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1509, 8), 'stypy_return_type', tuple_89482)
    # SSA join for if statement (line 1506)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'cohere_pairs(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cohere_pairs' in the type store
    # Getting the type of 'stypy_return_type' (line 1355)
    stypy_return_type_89486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_89486)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cohere_pairs'
    return stypy_return_type_89486

# Assigning a type to the variable 'cohere_pairs' (line 1355)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1355, 0), 'cohere_pairs', cohere_pairs)

@norecursion
def entropy(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'entropy'
    module_type_store = module_type_store.open_function_context('entropy', 1512, 0, False)
    
    # Passed parameters checking function
    entropy.stypy_localization = localization
    entropy.stypy_type_of_self = None
    entropy.stypy_type_store = module_type_store
    entropy.stypy_function_name = 'entropy'
    entropy.stypy_param_names_list = ['y', 'bins']
    entropy.stypy_varargs_param_name = None
    entropy.stypy_kwargs_param_name = None
    entropy.stypy_call_defaults = defaults
    entropy.stypy_call_varargs = varargs
    entropy.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'entropy', ['y', 'bins'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'entropy', localization, ['y', 'bins'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'entropy(...)' code ##################

    unicode_89487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1528, (-1)), 'unicode', u'\n    Return the entropy of the data in *y* in units of nat.\n\n    .. math::\n\n      -\\sum p_i \\ln(p_i)\n\n    where :math:`p_i` is the probability of observing *y* in the\n    :math:`i^{th}` bin of *bins*.  *bins* can be a number of bins or a\n    range of bins; see :func:`numpy.histogram`.\n\n    Compare *S* with analytic calculation for a Gaussian::\n\n      x = mu + sigma * randn(200000)\n      Sanalytic = 0.5 * ( 1.0 + log(2*pi*sigma**2.0) )\n    ')
    
    # Assigning a Call to a Tuple (line 1529):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to histogram(...): (line 1529)
    # Processing the call arguments (line 1529)
    # Getting the type of 'y' (line 1529)
    y_89490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 27), 'y', False)
    # Getting the type of 'bins' (line 1529)
    bins_89491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 30), 'bins', False)
    # Processing the call keyword arguments (line 1529)
    kwargs_89492 = {}
    # Getting the type of 'np' (line 1529)
    np_89488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 14), 'np', False)
    # Obtaining the member 'histogram' of a type (line 1529)
    histogram_89489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 14), np_89488, 'histogram')
    # Calling histogram(args, kwargs) (line 1529)
    histogram_call_result_89493 = invoke(stypy.reporting.localization.Localization(__file__, 1529, 14), histogram_89489, *[y_89490, bins_89491], **kwargs_89492)
    
    # Assigning a type to the variable 'call_assignment_87255' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'call_assignment_87255', histogram_call_result_89493)
    
    # Assigning a Call to a Name (line 1529):
    
    # Assigning a Call to a Name (line 1529):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_89496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1529, 4), 'int')
    # Processing the call keyword arguments
    kwargs_89497 = {}
    # Getting the type of 'call_assignment_87255' (line 1529)
    call_assignment_87255_89494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'call_assignment_87255', False)
    # Obtaining the member '__getitem__' of a type (line 1529)
    getitem___89495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 4), call_assignment_87255_89494, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_89498 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___89495, *[int_89496], **kwargs_89497)
    
    # Assigning a type to the variable 'call_assignment_87256' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'call_assignment_87256', getitem___call_result_89498)
    
    # Assigning a Name to a Name (line 1529):
    
    # Assigning a Name to a Name (line 1529):
    # Getting the type of 'call_assignment_87256' (line 1529)
    call_assignment_87256_89499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'call_assignment_87256')
    # Assigning a type to the variable 'n' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'n', call_assignment_87256_89499)
    
    # Assigning a Call to a Name (line 1529):
    
    # Assigning a Call to a Name (line 1529):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_89502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1529, 4), 'int')
    # Processing the call keyword arguments
    kwargs_89503 = {}
    # Getting the type of 'call_assignment_87255' (line 1529)
    call_assignment_87255_89500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'call_assignment_87255', False)
    # Obtaining the member '__getitem__' of a type (line 1529)
    getitem___89501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 4), call_assignment_87255_89500, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_89504 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___89501, *[int_89502], **kwargs_89503)
    
    # Assigning a type to the variable 'call_assignment_87257' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'call_assignment_87257', getitem___call_result_89504)
    
    # Assigning a Name to a Name (line 1529):
    
    # Assigning a Name to a Name (line 1529):
    # Getting the type of 'call_assignment_87257' (line 1529)
    call_assignment_87257_89505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'call_assignment_87257')
    # Assigning a type to the variable 'bins' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 7), 'bins', call_assignment_87257_89505)
    
    # Assigning a Call to a Name (line 1530):
    
    # Assigning a Call to a Name (line 1530):
    
    # Assigning a Call to a Name (line 1530):
    
    # Call to astype(...): (line 1530)
    # Processing the call arguments (line 1530)
    # Getting the type of 'float' (line 1530)
    float_89508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 17), 'float', False)
    # Processing the call keyword arguments (line 1530)
    kwargs_89509 = {}
    # Getting the type of 'n' (line 1530)
    n_89506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 8), 'n', False)
    # Obtaining the member 'astype' of a type (line 1530)
    astype_89507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1530, 8), n_89506, 'astype')
    # Calling astype(args, kwargs) (line 1530)
    astype_call_result_89510 = invoke(stypy.reporting.localization.Localization(__file__, 1530, 8), astype_89507, *[float_89508], **kwargs_89509)
    
    # Assigning a type to the variable 'n' (line 1530)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1530, 4), 'n', astype_call_result_89510)
    
    # Assigning a Call to a Name (line 1532):
    
    # Assigning a Call to a Name (line 1532):
    
    # Assigning a Call to a Name (line 1532):
    
    # Call to take(...): (line 1532)
    # Processing the call arguments (line 1532)
    # Getting the type of 'n' (line 1532)
    n_89513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 16), 'n', False)
    
    # Obtaining the type of the subscript
    int_89514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1532, 33), 'int')
    
    # Call to nonzero(...): (line 1532)
    # Processing the call arguments (line 1532)
    # Getting the type of 'n' (line 1532)
    n_89517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 30), 'n', False)
    # Processing the call keyword arguments (line 1532)
    kwargs_89518 = {}
    # Getting the type of 'np' (line 1532)
    np_89515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 19), 'np', False)
    # Obtaining the member 'nonzero' of a type (line 1532)
    nonzero_89516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 19), np_89515, 'nonzero')
    # Calling nonzero(args, kwargs) (line 1532)
    nonzero_call_result_89519 = invoke(stypy.reporting.localization.Localization(__file__, 1532, 19), nonzero_89516, *[n_89517], **kwargs_89518)
    
    # Obtaining the member '__getitem__' of a type (line 1532)
    getitem___89520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 19), nonzero_call_result_89519, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1532)
    subscript_call_result_89521 = invoke(stypy.reporting.localization.Localization(__file__, 1532, 19), getitem___89520, int_89514)
    
    # Processing the call keyword arguments (line 1532)
    kwargs_89522 = {}
    # Getting the type of 'np' (line 1532)
    np_89511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 8), 'np', False)
    # Obtaining the member 'take' of a type (line 1532)
    take_89512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 8), np_89511, 'take')
    # Calling take(args, kwargs) (line 1532)
    take_call_result_89523 = invoke(stypy.reporting.localization.Localization(__file__, 1532, 8), take_89512, *[n_89513, subscript_call_result_89521], **kwargs_89522)
    
    # Assigning a type to the variable 'n' (line 1532)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 4), 'n', take_call_result_89523)
    
    # Assigning a Call to a Name (line 1534):
    
    # Assigning a Call to a Name (line 1534):
    
    # Assigning a Call to a Name (line 1534):
    
    # Call to divide(...): (line 1534)
    # Processing the call arguments (line 1534)
    # Getting the type of 'n' (line 1534)
    n_89526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 18), 'n', False)
    
    # Call to len(...): (line 1534)
    # Processing the call arguments (line 1534)
    # Getting the type of 'y' (line 1534)
    y_89528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 25), 'y', False)
    # Processing the call keyword arguments (line 1534)
    kwargs_89529 = {}
    # Getting the type of 'len' (line 1534)
    len_89527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 21), 'len', False)
    # Calling len(args, kwargs) (line 1534)
    len_call_result_89530 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 21), len_89527, *[y_89528], **kwargs_89529)
    
    # Processing the call keyword arguments (line 1534)
    kwargs_89531 = {}
    # Getting the type of 'np' (line 1534)
    np_89524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 8), 'np', False)
    # Obtaining the member 'divide' of a type (line 1534)
    divide_89525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1534, 8), np_89524, 'divide')
    # Calling divide(args, kwargs) (line 1534)
    divide_call_result_89532 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 8), divide_89525, *[n_89526, len_call_result_89530], **kwargs_89531)
    
    # Assigning a type to the variable 'p' (line 1534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1534, 4), 'p', divide_call_result_89532)
    
    # Assigning a BinOp to a Name (line 1536):
    
    # Assigning a BinOp to a Name (line 1536):
    
    # Assigning a BinOp to a Name (line 1536):
    
    # Obtaining the type of the subscript
    int_89533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, 17), 'int')
    # Getting the type of 'bins' (line 1536)
    bins_89534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 12), 'bins')
    # Obtaining the member '__getitem__' of a type (line 1536)
    getitem___89535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1536, 12), bins_89534, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1536)
    subscript_call_result_89536 = invoke(stypy.reporting.localization.Localization(__file__, 1536, 12), getitem___89535, int_89533)
    
    
    # Obtaining the type of the subscript
    int_89537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, 27), 'int')
    # Getting the type of 'bins' (line 1536)
    bins_89538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 22), 'bins')
    # Obtaining the member '__getitem__' of a type (line 1536)
    getitem___89539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1536, 22), bins_89538, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1536)
    subscript_call_result_89540 = invoke(stypy.reporting.localization.Localization(__file__, 1536, 22), getitem___89539, int_89537)
    
    # Applying the binary operator '-' (line 1536)
    result_sub_89541 = python_operator(stypy.reporting.localization.Localization(__file__, 1536, 12), '-', subscript_call_result_89536, subscript_call_result_89540)
    
    # Assigning a type to the variable 'delta' (line 1536)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1536, 4), 'delta', result_sub_89541)
    
    # Assigning a BinOp to a Name (line 1537):
    
    # Assigning a BinOp to a Name (line 1537):
    
    # Assigning a BinOp to a Name (line 1537):
    float_89542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1537, 8), 'float')
    
    # Call to sum(...): (line 1537)
    # Processing the call arguments (line 1537)
    # Getting the type of 'p' (line 1537)
    p_89545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 22), 'p', False)
    
    # Call to log(...): (line 1537)
    # Processing the call arguments (line 1537)
    # Getting the type of 'p' (line 1537)
    p_89548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 33), 'p', False)
    # Processing the call keyword arguments (line 1537)
    kwargs_89549 = {}
    # Getting the type of 'np' (line 1537)
    np_89546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 26), 'np', False)
    # Obtaining the member 'log' of a type (line 1537)
    log_89547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1537, 26), np_89546, 'log')
    # Calling log(args, kwargs) (line 1537)
    log_call_result_89550 = invoke(stypy.reporting.localization.Localization(__file__, 1537, 26), log_89547, *[p_89548], **kwargs_89549)
    
    # Applying the binary operator '*' (line 1537)
    result_mul_89551 = python_operator(stypy.reporting.localization.Localization(__file__, 1537, 22), '*', p_89545, log_call_result_89550)
    
    # Processing the call keyword arguments (line 1537)
    kwargs_89552 = {}
    # Getting the type of 'np' (line 1537)
    np_89543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 15), 'np', False)
    # Obtaining the member 'sum' of a type (line 1537)
    sum_89544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1537, 15), np_89543, 'sum')
    # Calling sum(args, kwargs) (line 1537)
    sum_call_result_89553 = invoke(stypy.reporting.localization.Localization(__file__, 1537, 15), sum_89544, *[result_mul_89551], **kwargs_89552)
    
    # Applying the binary operator '*' (line 1537)
    result_mul_89554 = python_operator(stypy.reporting.localization.Localization(__file__, 1537, 8), '*', float_89542, sum_call_result_89553)
    
    
    # Call to log(...): (line 1537)
    # Processing the call arguments (line 1537)
    # Getting the type of 'delta' (line 1537)
    delta_89557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 46), 'delta', False)
    # Processing the call keyword arguments (line 1537)
    kwargs_89558 = {}
    # Getting the type of 'np' (line 1537)
    np_89555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 39), 'np', False)
    # Obtaining the member 'log' of a type (line 1537)
    log_89556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1537, 39), np_89555, 'log')
    # Calling log(args, kwargs) (line 1537)
    log_call_result_89559 = invoke(stypy.reporting.localization.Localization(__file__, 1537, 39), log_89556, *[delta_89557], **kwargs_89558)
    
    # Applying the binary operator '+' (line 1537)
    result_add_89560 = python_operator(stypy.reporting.localization.Localization(__file__, 1537, 8), '+', result_mul_89554, log_call_result_89559)
    
    # Assigning a type to the variable 'S' (line 1537)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 4), 'S', result_add_89560)
    # Getting the type of 'S' (line 1538)
    S_89561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 11), 'S')
    # Assigning a type to the variable 'stypy_return_type' (line 1538)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 4), 'stypy_return_type', S_89561)
    
    # ################# End of 'entropy(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'entropy' in the type store
    # Getting the type of 'stypy_return_type' (line 1512)
    stypy_return_type_89562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_89562)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'entropy'
    return stypy_return_type_89562

# Assigning a type to the variable 'entropy' (line 1512)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1512, 0), 'entropy', entropy)

@norecursion
def normpdf(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'normpdf'
    module_type_store = module_type_store.open_function_context('normpdf', 1541, 0, False)
    
    # Passed parameters checking function
    normpdf.stypy_localization = localization
    normpdf.stypy_type_of_self = None
    normpdf.stypy_type_store = module_type_store
    normpdf.stypy_function_name = 'normpdf'
    normpdf.stypy_param_names_list = ['x']
    normpdf.stypy_varargs_param_name = 'args'
    normpdf.stypy_kwargs_param_name = None
    normpdf.stypy_call_defaults = defaults
    normpdf.stypy_call_varargs = varargs
    normpdf.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'normpdf', ['x'], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'normpdf', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'normpdf(...)' code ##################

    unicode_89563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1542, 4), 'unicode', u'Return the normal pdf evaluated at *x*; args provides *mu*, *sigma*')
    
    # Assigning a Name to a Tuple (line 1543):
    
    # Assigning a Subscript to a Name (line 1543):
    
    # Assigning a Subscript to a Name (line 1543):
    
    # Obtaining the type of the subscript
    int_89564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1543, 4), 'int')
    # Getting the type of 'args' (line 1543)
    args_89565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 16), 'args')
    # Obtaining the member '__getitem__' of a type (line 1543)
    getitem___89566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 4), args_89565, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1543)
    subscript_call_result_89567 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 4), getitem___89566, int_89564)
    
    # Assigning a type to the variable 'tuple_var_assignment_87258' (line 1543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 4), 'tuple_var_assignment_87258', subscript_call_result_89567)
    
    # Assigning a Subscript to a Name (line 1543):
    
    # Assigning a Subscript to a Name (line 1543):
    
    # Obtaining the type of the subscript
    int_89568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1543, 4), 'int')
    # Getting the type of 'args' (line 1543)
    args_89569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 16), 'args')
    # Obtaining the member '__getitem__' of a type (line 1543)
    getitem___89570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 4), args_89569, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1543)
    subscript_call_result_89571 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 4), getitem___89570, int_89568)
    
    # Assigning a type to the variable 'tuple_var_assignment_87259' (line 1543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 4), 'tuple_var_assignment_87259', subscript_call_result_89571)
    
    # Assigning a Name to a Name (line 1543):
    
    # Assigning a Name to a Name (line 1543):
    # Getting the type of 'tuple_var_assignment_87258' (line 1543)
    tuple_var_assignment_87258_89572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 4), 'tuple_var_assignment_87258')
    # Assigning a type to the variable 'mu' (line 1543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 4), 'mu', tuple_var_assignment_87258_89572)
    
    # Assigning a Name to a Name (line 1543):
    
    # Assigning a Name to a Name (line 1543):
    # Getting the type of 'tuple_var_assignment_87259' (line 1543)
    tuple_var_assignment_87259_89573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 4), 'tuple_var_assignment_87259')
    # Assigning a type to the variable 'sigma' (line 1543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 8), 'sigma', tuple_var_assignment_87259_89573)
    float_89574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1544, 11), 'float')
    
    # Call to sqrt(...): (line 1544)
    # Processing the call arguments (line 1544)
    int_89577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1544, 23), 'int')
    # Getting the type of 'np' (line 1544)
    np_89578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 25), 'np', False)
    # Obtaining the member 'pi' of a type (line 1544)
    pi_89579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1544, 25), np_89578, 'pi')
    # Applying the binary operator '*' (line 1544)
    result_mul_89580 = python_operator(stypy.reporting.localization.Localization(__file__, 1544, 23), '*', int_89577, pi_89579)
    
    # Processing the call keyword arguments (line 1544)
    kwargs_89581 = {}
    # Getting the type of 'np' (line 1544)
    np_89575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 15), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 1544)
    sqrt_89576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1544, 15), np_89575, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1544)
    sqrt_call_result_89582 = invoke(stypy.reporting.localization.Localization(__file__, 1544, 15), sqrt_89576, *[result_mul_89580], **kwargs_89581)
    
    # Getting the type of 'sigma' (line 1544)
    sigma_89583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 32), 'sigma')
    # Applying the binary operator '*' (line 1544)
    result_mul_89584 = python_operator(stypy.reporting.localization.Localization(__file__, 1544, 15), '*', sqrt_call_result_89582, sigma_89583)
    
    # Applying the binary operator 'div' (line 1544)
    result_div_89585 = python_operator(stypy.reporting.localization.Localization(__file__, 1544, 11), 'div', float_89574, result_mul_89584)
    
    
    # Call to exp(...): (line 1544)
    # Processing the call arguments (line 1544)
    float_89588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1544, 46), 'float')
    float_89589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1544, 54), 'float')
    # Getting the type of 'sigma' (line 1544)
    sigma_89590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 57), 'sigma', False)
    # Applying the binary operator 'div' (line 1544)
    result_div_89591 = python_operator(stypy.reporting.localization.Localization(__file__, 1544, 54), 'div', float_89589, sigma_89590)
    
    # Getting the type of 'x' (line 1544)
    x_89592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 64), 'x', False)
    # Getting the type of 'mu' (line 1544)
    mu_89593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 68), 'mu', False)
    # Applying the binary operator '-' (line 1544)
    result_sub_89594 = python_operator(stypy.reporting.localization.Localization(__file__, 1544, 64), '-', x_89592, mu_89593)
    
    # Applying the binary operator '*' (line 1544)
    result_mul_89595 = python_operator(stypy.reporting.localization.Localization(__file__, 1544, 62), '*', result_div_89591, result_sub_89594)
    
    int_89596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1544, 74), 'int')
    # Applying the binary operator '**' (line 1544)
    result_pow_89597 = python_operator(stypy.reporting.localization.Localization(__file__, 1544, 53), '**', result_mul_89595, int_89596)
    
    # Applying the binary operator '*' (line 1544)
    result_mul_89598 = python_operator(stypy.reporting.localization.Localization(__file__, 1544, 46), '*', float_89588, result_pow_89597)
    
    # Processing the call keyword arguments (line 1544)
    kwargs_89599 = {}
    # Getting the type of 'np' (line 1544)
    np_89586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 39), 'np', False)
    # Obtaining the member 'exp' of a type (line 1544)
    exp_89587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1544, 39), np_89586, 'exp')
    # Calling exp(args, kwargs) (line 1544)
    exp_call_result_89600 = invoke(stypy.reporting.localization.Localization(__file__, 1544, 39), exp_89587, *[result_mul_89598], **kwargs_89599)
    
    # Applying the binary operator '*' (line 1544)
    result_mul_89601 = python_operator(stypy.reporting.localization.Localization(__file__, 1544, 38), '*', result_div_89585, exp_call_result_89600)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1544)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1544, 4), 'stypy_return_type', result_mul_89601)
    
    # ################# End of 'normpdf(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'normpdf' in the type store
    # Getting the type of 'stypy_return_type' (line 1541)
    stypy_return_type_89602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_89602)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'normpdf'
    return stypy_return_type_89602

# Assigning a type to the variable 'normpdf' (line 1541)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1541, 0), 'normpdf', normpdf)

@norecursion
def find(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'find'
    module_type_store = module_type_store.open_function_context('find', 1547, 0, False)
    
    # Passed parameters checking function
    find.stypy_localization = localization
    find.stypy_type_of_self = None
    find.stypy_type_store = module_type_store
    find.stypy_function_name = 'find'
    find.stypy_param_names_list = ['condition']
    find.stypy_varargs_param_name = None
    find.stypy_kwargs_param_name = None
    find.stypy_call_defaults = defaults
    find.stypy_call_varargs = varargs
    find.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'find', ['condition'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'find', localization, ['condition'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'find(...)' code ##################

    unicode_89603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1548, 4), 'unicode', u'Return the indices where ravel(condition) is true')
    
    # Assigning a Call to a Tuple (line 1549):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to nonzero(...): (line 1549)
    # Processing the call arguments (line 1549)
    
    # Call to ravel(...): (line 1549)
    # Processing the call arguments (line 1549)
    # Getting the type of 'condition' (line 1549)
    condition_89608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 31), 'condition', False)
    # Processing the call keyword arguments (line 1549)
    kwargs_89609 = {}
    # Getting the type of 'np' (line 1549)
    np_89606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 22), 'np', False)
    # Obtaining the member 'ravel' of a type (line 1549)
    ravel_89607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1549, 22), np_89606, 'ravel')
    # Calling ravel(args, kwargs) (line 1549)
    ravel_call_result_89610 = invoke(stypy.reporting.localization.Localization(__file__, 1549, 22), ravel_89607, *[condition_89608], **kwargs_89609)
    
    # Processing the call keyword arguments (line 1549)
    kwargs_89611 = {}
    # Getting the type of 'np' (line 1549)
    np_89604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 11), 'np', False)
    # Obtaining the member 'nonzero' of a type (line 1549)
    nonzero_89605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1549, 11), np_89604, 'nonzero')
    # Calling nonzero(args, kwargs) (line 1549)
    nonzero_call_result_89612 = invoke(stypy.reporting.localization.Localization(__file__, 1549, 11), nonzero_89605, *[ravel_call_result_89610], **kwargs_89611)
    
    # Assigning a type to the variable 'call_assignment_87260' (line 1549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1549, 4), 'call_assignment_87260', nonzero_call_result_89612)
    
    # Assigning a Call to a Name (line 1549):
    
    # Assigning a Call to a Name (line 1549):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_89615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1549, 4), 'int')
    # Processing the call keyword arguments
    kwargs_89616 = {}
    # Getting the type of 'call_assignment_87260' (line 1549)
    call_assignment_87260_89613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 4), 'call_assignment_87260', False)
    # Obtaining the member '__getitem__' of a type (line 1549)
    getitem___89614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1549, 4), call_assignment_87260_89613, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_89617 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___89614, *[int_89615], **kwargs_89616)
    
    # Assigning a type to the variable 'call_assignment_87261' (line 1549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1549, 4), 'call_assignment_87261', getitem___call_result_89617)
    
    # Assigning a Name to a Name (line 1549):
    
    # Assigning a Name to a Name (line 1549):
    # Getting the type of 'call_assignment_87261' (line 1549)
    call_assignment_87261_89618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 4), 'call_assignment_87261')
    # Assigning a type to the variable 'res' (line 1549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1549, 4), 'res', call_assignment_87261_89618)
    # Getting the type of 'res' (line 1550)
    res_89619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 11), 'res')
    # Assigning a type to the variable 'stypy_return_type' (line 1550)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1550, 4), 'stypy_return_type', res_89619)
    
    # ################# End of 'find(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'find' in the type store
    # Getting the type of 'stypy_return_type' (line 1547)
    stypy_return_type_89620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_89620)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'find'
    return stypy_return_type_89620

# Assigning a type to the variable 'find' (line 1547)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1547, 0), 'find', find)

@norecursion
def longest_contiguous_ones(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'longest_contiguous_ones'
    module_type_store = module_type_store.open_function_context('longest_contiguous_ones', 1553, 0, False)
    
    # Passed parameters checking function
    longest_contiguous_ones.stypy_localization = localization
    longest_contiguous_ones.stypy_type_of_self = None
    longest_contiguous_ones.stypy_type_store = module_type_store
    longest_contiguous_ones.stypy_function_name = 'longest_contiguous_ones'
    longest_contiguous_ones.stypy_param_names_list = ['x']
    longest_contiguous_ones.stypy_varargs_param_name = None
    longest_contiguous_ones.stypy_kwargs_param_name = None
    longest_contiguous_ones.stypy_call_defaults = defaults
    longest_contiguous_ones.stypy_call_varargs = varargs
    longest_contiguous_ones.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'longest_contiguous_ones', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'longest_contiguous_ones', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'longest_contiguous_ones(...)' code ##################

    unicode_89621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1558, (-1)), 'unicode', u'\n    Return the indices of the longest stretch of contiguous ones in *x*,\n    assuming *x* is a vector of zeros and ones.  If there are two\n    equally long stretches, pick the first.\n    ')
    
    # Assigning a Call to a Name (line 1559):
    
    # Assigning a Call to a Name (line 1559):
    
    # Assigning a Call to a Name (line 1559):
    
    # Call to ravel(...): (line 1559)
    # Processing the call arguments (line 1559)
    # Getting the type of 'x' (line 1559)
    x_89624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 17), 'x', False)
    # Processing the call keyword arguments (line 1559)
    kwargs_89625 = {}
    # Getting the type of 'np' (line 1559)
    np_89622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 8), 'np', False)
    # Obtaining the member 'ravel' of a type (line 1559)
    ravel_89623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1559, 8), np_89622, 'ravel')
    # Calling ravel(args, kwargs) (line 1559)
    ravel_call_result_89626 = invoke(stypy.reporting.localization.Localization(__file__, 1559, 8), ravel_89623, *[x_89624], **kwargs_89625)
    
    # Assigning a type to the variable 'x' (line 1559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1559, 4), 'x', ravel_call_result_89626)
    
    
    
    # Call to len(...): (line 1560)
    # Processing the call arguments (line 1560)
    # Getting the type of 'x' (line 1560)
    x_89628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 11), 'x', False)
    # Processing the call keyword arguments (line 1560)
    kwargs_89629 = {}
    # Getting the type of 'len' (line 1560)
    len_89627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 7), 'len', False)
    # Calling len(args, kwargs) (line 1560)
    len_call_result_89630 = invoke(stypy.reporting.localization.Localization(__file__, 1560, 7), len_89627, *[x_89628], **kwargs_89629)
    
    int_89631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1560, 17), 'int')
    # Applying the binary operator '==' (line 1560)
    result_eq_89632 = python_operator(stypy.reporting.localization.Localization(__file__, 1560, 7), '==', len_call_result_89630, int_89631)
    
    # Testing the type of an if condition (line 1560)
    if_condition_89633 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1560, 4), result_eq_89632)
    # Assigning a type to the variable 'if_condition_89633' (line 1560)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1560, 4), 'if_condition_89633', if_condition_89633)
    # SSA begins for if statement (line 1560)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to array(...): (line 1561)
    # Processing the call arguments (line 1561)
    
    # Obtaining an instance of the builtin type 'list' (line 1561)
    list_89636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1561, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1561)
    
    # Processing the call keyword arguments (line 1561)
    kwargs_89637 = {}
    # Getting the type of 'np' (line 1561)
    np_89634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 15), 'np', False)
    # Obtaining the member 'array' of a type (line 1561)
    array_89635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1561, 15), np_89634, 'array')
    # Calling array(args, kwargs) (line 1561)
    array_call_result_89638 = invoke(stypy.reporting.localization.Localization(__file__, 1561, 15), array_89635, *[list_89636], **kwargs_89637)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1561)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1561, 8), 'stypy_return_type', array_call_result_89638)
    # SSA join for if statement (line 1560)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 1563):
    
    # Assigning a Subscript to a Name (line 1563):
    
    # Assigning a Subscript to a Name (line 1563):
    
    # Obtaining the type of the subscript
    int_89639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1563, 29), 'int')
    
    # Call to nonzero(...): (line 1563)
    # Processing the call keyword arguments (line 1563)
    kwargs_89644 = {}
    
    # Getting the type of 'x' (line 1563)
    x_89640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 11), 'x', False)
    int_89641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1563, 16), 'int')
    # Applying the binary operator '==' (line 1563)
    result_eq_89642 = python_operator(stypy.reporting.localization.Localization(__file__, 1563, 11), '==', x_89640, int_89641)
    
    # Obtaining the member 'nonzero' of a type (line 1563)
    nonzero_89643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1563, 11), result_eq_89642, 'nonzero')
    # Calling nonzero(args, kwargs) (line 1563)
    nonzero_call_result_89645 = invoke(stypy.reporting.localization.Localization(__file__, 1563, 11), nonzero_89643, *[], **kwargs_89644)
    
    # Obtaining the member '__getitem__' of a type (line 1563)
    getitem___89646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1563, 11), nonzero_call_result_89645, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1563)
    subscript_call_result_89647 = invoke(stypy.reporting.localization.Localization(__file__, 1563, 11), getitem___89646, int_89639)
    
    # Assigning a type to the variable 'ind' (line 1563)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1563, 4), 'ind', subscript_call_result_89647)
    
    
    
    # Call to len(...): (line 1564)
    # Processing the call arguments (line 1564)
    # Getting the type of 'ind' (line 1564)
    ind_89649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 11), 'ind', False)
    # Processing the call keyword arguments (line 1564)
    kwargs_89650 = {}
    # Getting the type of 'len' (line 1564)
    len_89648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 7), 'len', False)
    # Calling len(args, kwargs) (line 1564)
    len_call_result_89651 = invoke(stypy.reporting.localization.Localization(__file__, 1564, 7), len_89648, *[ind_89649], **kwargs_89650)
    
    int_89652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1564, 19), 'int')
    # Applying the binary operator '==' (line 1564)
    result_eq_89653 = python_operator(stypy.reporting.localization.Localization(__file__, 1564, 7), '==', len_call_result_89651, int_89652)
    
    # Testing the type of an if condition (line 1564)
    if_condition_89654 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1564, 4), result_eq_89653)
    # Assigning a type to the variable 'if_condition_89654' (line 1564)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1564, 4), 'if_condition_89654', if_condition_89654)
    # SSA begins for if statement (line 1564)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to arange(...): (line 1565)
    # Processing the call arguments (line 1565)
    
    # Call to len(...): (line 1565)
    # Processing the call arguments (line 1565)
    # Getting the type of 'x' (line 1565)
    x_89658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 29), 'x', False)
    # Processing the call keyword arguments (line 1565)
    kwargs_89659 = {}
    # Getting the type of 'len' (line 1565)
    len_89657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 25), 'len', False)
    # Calling len(args, kwargs) (line 1565)
    len_call_result_89660 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 25), len_89657, *[x_89658], **kwargs_89659)
    
    # Processing the call keyword arguments (line 1565)
    kwargs_89661 = {}
    # Getting the type of 'np' (line 1565)
    np_89655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 15), 'np', False)
    # Obtaining the member 'arange' of a type (line 1565)
    arange_89656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 15), np_89655, 'arange')
    # Calling arange(args, kwargs) (line 1565)
    arange_call_result_89662 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 15), arange_89656, *[len_call_result_89660], **kwargs_89661)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1565)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'stypy_return_type', arange_call_result_89662)
    # SSA join for if statement (line 1564)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 1566)
    # Processing the call arguments (line 1566)
    # Getting the type of 'ind' (line 1566)
    ind_89664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 11), 'ind', False)
    # Processing the call keyword arguments (line 1566)
    kwargs_89665 = {}
    # Getting the type of 'len' (line 1566)
    len_89663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 7), 'len', False)
    # Calling len(args, kwargs) (line 1566)
    len_call_result_89666 = invoke(stypy.reporting.localization.Localization(__file__, 1566, 7), len_89663, *[ind_89664], **kwargs_89665)
    
    
    # Call to len(...): (line 1566)
    # Processing the call arguments (line 1566)
    # Getting the type of 'x' (line 1566)
    x_89668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 23), 'x', False)
    # Processing the call keyword arguments (line 1566)
    kwargs_89669 = {}
    # Getting the type of 'len' (line 1566)
    len_89667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 19), 'len', False)
    # Calling len(args, kwargs) (line 1566)
    len_call_result_89670 = invoke(stypy.reporting.localization.Localization(__file__, 1566, 19), len_89667, *[x_89668], **kwargs_89669)
    
    # Applying the binary operator '==' (line 1566)
    result_eq_89671 = python_operator(stypy.reporting.localization.Localization(__file__, 1566, 7), '==', len_call_result_89666, len_call_result_89670)
    
    # Testing the type of an if condition (line 1566)
    if_condition_89672 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1566, 4), result_eq_89671)
    # Assigning a type to the variable 'if_condition_89672' (line 1566)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1566, 4), 'if_condition_89672', if_condition_89672)
    # SSA begins for if statement (line 1566)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to array(...): (line 1567)
    # Processing the call arguments (line 1567)
    
    # Obtaining an instance of the builtin type 'list' (line 1567)
    list_89675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1567, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1567)
    
    # Processing the call keyword arguments (line 1567)
    kwargs_89676 = {}
    # Getting the type of 'np' (line 1567)
    np_89673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 15), 'np', False)
    # Obtaining the member 'array' of a type (line 1567)
    array_89674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 15), np_89673, 'array')
    # Calling array(args, kwargs) (line 1567)
    array_call_result_89677 = invoke(stypy.reporting.localization.Localization(__file__, 1567, 15), array_89674, *[list_89675], **kwargs_89676)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1567)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1567, 8), 'stypy_return_type', array_call_result_89677)
    # SSA join for if statement (line 1566)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1569):
    
    # Assigning a Call to a Name (line 1569):
    
    # Assigning a Call to a Name (line 1569):
    
    # Call to zeros(...): (line 1569)
    # Processing the call arguments (line 1569)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1569)
    tuple_89680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1569, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1569)
    # Adding element type (line 1569)
    
    # Call to len(...): (line 1569)
    # Processing the call arguments (line 1569)
    # Getting the type of 'x' (line 1569)
    x_89682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 22), 'x', False)
    # Processing the call keyword arguments (line 1569)
    kwargs_89683 = {}
    # Getting the type of 'len' (line 1569)
    len_89681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 18), 'len', False)
    # Calling len(args, kwargs) (line 1569)
    len_call_result_89684 = invoke(stypy.reporting.localization.Localization(__file__, 1569, 18), len_89681, *[x_89682], **kwargs_89683)
    
    int_89685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1569, 25), 'int')
    # Applying the binary operator '+' (line 1569)
    result_add_89686 = python_operator(stypy.reporting.localization.Localization(__file__, 1569, 18), '+', len_call_result_89684, int_89685)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1569, 18), tuple_89680, result_add_89686)
    
    # Getting the type of 'x' (line 1569)
    x_89687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 30), 'x', False)
    # Obtaining the member 'dtype' of a type (line 1569)
    dtype_89688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1569, 30), x_89687, 'dtype')
    # Processing the call keyword arguments (line 1569)
    kwargs_89689 = {}
    # Getting the type of 'np' (line 1569)
    np_89678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 8), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1569)
    zeros_89679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1569, 8), np_89678, 'zeros')
    # Calling zeros(args, kwargs) (line 1569)
    zeros_call_result_89690 = invoke(stypy.reporting.localization.Localization(__file__, 1569, 8), zeros_89679, *[tuple_89680, dtype_89688], **kwargs_89689)
    
    # Assigning a type to the variable 'y' (line 1569)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1569, 4), 'y', zeros_call_result_89690)
    
    # Assigning a Name to a Subscript (line 1570):
    
    # Assigning a Name to a Subscript (line 1570):
    
    # Assigning a Name to a Subscript (line 1570):
    # Getting the type of 'x' (line 1570)
    x_89691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 14), 'x')
    # Getting the type of 'y' (line 1570)
    y_89692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 4), 'y')
    int_89693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1570, 6), 'int')
    int_89694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1570, 8), 'int')
    slice_89695 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1570, 4), int_89693, int_89694, None)
    # Storing an element on a container (line 1570)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1570, 4), y_89692, (slice_89695, x_89691))
    
    # Assigning a Call to a Name (line 1571):
    
    # Assigning a Call to a Name (line 1571):
    
    # Assigning a Call to a Name (line 1571):
    
    # Call to diff(...): (line 1571)
    # Processing the call arguments (line 1571)
    # Getting the type of 'y' (line 1571)
    y_89698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 18), 'y', False)
    # Processing the call keyword arguments (line 1571)
    kwargs_89699 = {}
    # Getting the type of 'np' (line 1571)
    np_89696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 10), 'np', False)
    # Obtaining the member 'diff' of a type (line 1571)
    diff_89697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 10), np_89696, 'diff')
    # Calling diff(args, kwargs) (line 1571)
    diff_call_result_89700 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 10), diff_89697, *[y_89698], **kwargs_89699)
    
    # Assigning a type to the variable 'dif' (line 1571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 4), 'dif', diff_call_result_89700)
    
    # Assigning a Subscript to a Name (line 1572):
    
    # Assigning a Subscript to a Name (line 1572):
    
    # Assigning a Subscript to a Name (line 1572):
    
    # Obtaining the type of the subscript
    int_89701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1572, 30), 'int')
    
    # Call to nonzero(...): (line 1572)
    # Processing the call keyword arguments (line 1572)
    kwargs_89706 = {}
    
    # Getting the type of 'dif' (line 1572)
    dif_89702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1572, 10), 'dif', False)
    int_89703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1572, 17), 'int')
    # Applying the binary operator '==' (line 1572)
    result_eq_89704 = python_operator(stypy.reporting.localization.Localization(__file__, 1572, 10), '==', dif_89702, int_89703)
    
    # Obtaining the member 'nonzero' of a type (line 1572)
    nonzero_89705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1572, 10), result_eq_89704, 'nonzero')
    # Calling nonzero(args, kwargs) (line 1572)
    nonzero_call_result_89707 = invoke(stypy.reporting.localization.Localization(__file__, 1572, 10), nonzero_89705, *[], **kwargs_89706)
    
    # Obtaining the member '__getitem__' of a type (line 1572)
    getitem___89708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1572, 10), nonzero_call_result_89707, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1572)
    subscript_call_result_89709 = invoke(stypy.reporting.localization.Localization(__file__, 1572, 10), getitem___89708, int_89701)
    
    # Assigning a type to the variable 'up' (line 1572)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1572, 4), 'up', subscript_call_result_89709)
    
    # Assigning a Subscript to a Name (line 1573):
    
    # Assigning a Subscript to a Name (line 1573):
    
    # Assigning a Subscript to a Name (line 1573):
    
    # Obtaining the type of the subscript
    int_89710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1573, 31), 'int')
    
    # Call to nonzero(...): (line 1573)
    # Processing the call keyword arguments (line 1573)
    kwargs_89715 = {}
    
    # Getting the type of 'dif' (line 1573)
    dif_89711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 10), 'dif', False)
    int_89712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1573, 17), 'int')
    # Applying the binary operator '==' (line 1573)
    result_eq_89713 = python_operator(stypy.reporting.localization.Localization(__file__, 1573, 10), '==', dif_89711, int_89712)
    
    # Obtaining the member 'nonzero' of a type (line 1573)
    nonzero_89714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1573, 10), result_eq_89713, 'nonzero')
    # Calling nonzero(args, kwargs) (line 1573)
    nonzero_call_result_89716 = invoke(stypy.reporting.localization.Localization(__file__, 1573, 10), nonzero_89714, *[], **kwargs_89715)
    
    # Obtaining the member '__getitem__' of a type (line 1573)
    getitem___89717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1573, 10), nonzero_call_result_89716, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1573)
    subscript_call_result_89718 = invoke(stypy.reporting.localization.Localization(__file__, 1573, 10), getitem___89717, int_89710)
    
    # Assigning a type to the variable 'dn' (line 1573)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1573, 4), 'dn', subscript_call_result_89718)
    
    # Assigning a Subscript to a Name (line 1574):
    
    # Assigning a Subscript to a Name (line 1574):
    
    # Assigning a Subscript to a Name (line 1574):
    
    # Obtaining the type of the subscript
    int_89719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1574, 45), 'int')
    
    # Obtaining the type of the subscript
    int_89720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1574, 42), 'int')
    
    # Call to nonzero(...): (line 1574)
    # Processing the call keyword arguments (line 1574)
    kwargs_89732 = {}
    
    # Getting the type of 'dn' (line 1574)
    dn_89721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 9), 'dn', False)
    # Getting the type of 'up' (line 1574)
    up_89722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 12), 'up', False)
    # Applying the binary operator '-' (line 1574)
    result_sub_89723 = python_operator(stypy.reporting.localization.Localization(__file__, 1574, 9), '-', dn_89721, up_89722)
    
    
    # Call to max(...): (line 1574)
    # Processing the call arguments (line 1574)
    # Getting the type of 'dn' (line 1574)
    dn_89725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 22), 'dn', False)
    # Getting the type of 'up' (line 1574)
    up_89726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 27), 'up', False)
    # Applying the binary operator '-' (line 1574)
    result_sub_89727 = python_operator(stypy.reporting.localization.Localization(__file__, 1574, 22), '-', dn_89725, up_89726)
    
    # Processing the call keyword arguments (line 1574)
    kwargs_89728 = {}
    # Getting the type of 'max' (line 1574)
    max_89724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 18), 'max', False)
    # Calling max(args, kwargs) (line 1574)
    max_call_result_89729 = invoke(stypy.reporting.localization.Localization(__file__, 1574, 18), max_89724, *[result_sub_89727], **kwargs_89728)
    
    # Applying the binary operator '==' (line 1574)
    result_eq_89730 = python_operator(stypy.reporting.localization.Localization(__file__, 1574, 9), '==', result_sub_89723, max_call_result_89729)
    
    # Obtaining the member 'nonzero' of a type (line 1574)
    nonzero_89731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1574, 9), result_eq_89730, 'nonzero')
    # Calling nonzero(args, kwargs) (line 1574)
    nonzero_call_result_89733 = invoke(stypy.reporting.localization.Localization(__file__, 1574, 9), nonzero_89731, *[], **kwargs_89732)
    
    # Obtaining the member '__getitem__' of a type (line 1574)
    getitem___89734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1574, 9), nonzero_call_result_89733, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1574)
    subscript_call_result_89735 = invoke(stypy.reporting.localization.Localization(__file__, 1574, 9), getitem___89734, int_89720)
    
    # Obtaining the member '__getitem__' of a type (line 1574)
    getitem___89736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1574, 9), subscript_call_result_89735, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1574)
    subscript_call_result_89737 = invoke(stypy.reporting.localization.Localization(__file__, 1574, 9), getitem___89736, int_89719)
    
    # Assigning a type to the variable 'i' (line 1574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1574, 4), 'i', subscript_call_result_89737)
    
    # Assigning a Call to a Name (line 1575):
    
    # Assigning a Call to a Name (line 1575):
    
    # Assigning a Call to a Name (line 1575):
    
    # Call to arange(...): (line 1575)
    # Processing the call arguments (line 1575)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1575)
    i_89740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 23), 'i', False)
    # Getting the type of 'up' (line 1575)
    up_89741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 20), 'up', False)
    # Obtaining the member '__getitem__' of a type (line 1575)
    getitem___89742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1575, 20), up_89741, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1575)
    subscript_call_result_89743 = invoke(stypy.reporting.localization.Localization(__file__, 1575, 20), getitem___89742, i_89740)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1575)
    i_89744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 30), 'i', False)
    # Getting the type of 'dn' (line 1575)
    dn_89745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 27), 'dn', False)
    # Obtaining the member '__getitem__' of a type (line 1575)
    getitem___89746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1575, 27), dn_89745, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1575)
    subscript_call_result_89747 = invoke(stypy.reporting.localization.Localization(__file__, 1575, 27), getitem___89746, i_89744)
    
    # Processing the call keyword arguments (line 1575)
    kwargs_89748 = {}
    # Getting the type of 'np' (line 1575)
    np_89738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 10), 'np', False)
    # Obtaining the member 'arange' of a type (line 1575)
    arange_89739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1575, 10), np_89738, 'arange')
    # Calling arange(args, kwargs) (line 1575)
    arange_call_result_89749 = invoke(stypy.reporting.localization.Localization(__file__, 1575, 10), arange_89739, *[subscript_call_result_89743, subscript_call_result_89747], **kwargs_89748)
    
    # Assigning a type to the variable 'ind' (line 1575)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1575, 4), 'ind', arange_call_result_89749)
    # Getting the type of 'ind' (line 1577)
    ind_89750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 11), 'ind')
    # Assigning a type to the variable 'stypy_return_type' (line 1577)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1577, 4), 'stypy_return_type', ind_89750)
    
    # ################# End of 'longest_contiguous_ones(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'longest_contiguous_ones' in the type store
    # Getting the type of 'stypy_return_type' (line 1553)
    stypy_return_type_89751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_89751)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'longest_contiguous_ones'
    return stypy_return_type_89751

# Assigning a type to the variable 'longest_contiguous_ones' (line 1553)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1553, 0), 'longest_contiguous_ones', longest_contiguous_ones)

@norecursion
def longest_ones(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'longest_ones'
    module_type_store = module_type_store.open_function_context('longest_ones', 1580, 0, False)
    
    # Passed parameters checking function
    longest_ones.stypy_localization = localization
    longest_ones.stypy_type_of_self = None
    longest_ones.stypy_type_store = module_type_store
    longest_ones.stypy_function_name = 'longest_ones'
    longest_ones.stypy_param_names_list = ['x']
    longest_ones.stypy_varargs_param_name = None
    longest_ones.stypy_kwargs_param_name = None
    longest_ones.stypy_call_defaults = defaults
    longest_ones.stypy_call_varargs = varargs
    longest_ones.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'longest_ones', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'longest_ones', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'longest_ones(...)' code ##################

    unicode_89752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1581, 4), 'unicode', u'alias for longest_contiguous_ones')
    
    # Call to longest_contiguous_ones(...): (line 1582)
    # Processing the call arguments (line 1582)
    # Getting the type of 'x' (line 1582)
    x_89754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 35), 'x', False)
    # Processing the call keyword arguments (line 1582)
    kwargs_89755 = {}
    # Getting the type of 'longest_contiguous_ones' (line 1582)
    longest_contiguous_ones_89753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 11), 'longest_contiguous_ones', False)
    # Calling longest_contiguous_ones(args, kwargs) (line 1582)
    longest_contiguous_ones_call_result_89756 = invoke(stypy.reporting.localization.Localization(__file__, 1582, 11), longest_contiguous_ones_89753, *[x_89754], **kwargs_89755)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1582)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1582, 4), 'stypy_return_type', longest_contiguous_ones_call_result_89756)
    
    # ################# End of 'longest_ones(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'longest_ones' in the type store
    # Getting the type of 'stypy_return_type' (line 1580)
    stypy_return_type_89757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_89757)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'longest_ones'
    return stypy_return_type_89757

# Assigning a type to the variable 'longest_ones' (line 1580)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1580, 0), 'longest_ones', longest_ones)
# Declaration of the 'PCA' class

class PCA(object, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 1586)
        True_89758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 38), 'True')
        defaults = [True_89758]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1586, 4, False)
        # Assigning a type to the variable 'self' (line 1587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1587, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PCA.__init__', ['a', 'standardize'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['a', 'standardize'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_89759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1633, (-1)), 'unicode', u'\n        compute the SVD of a and store data for PCA.  Use project to\n        project the data onto a reduced set of dimensions\n\n        Parameters\n        ----------\n        a : np.ndarray\n            A numobservations x numdims array\n        standardize : bool\n            True if input data are to be standardized. If False, only centering\n            will be carried out.\n\n        Attributes\n        ----------\n        a\n            A centered unit sigma version of input ``a``.\n\n        numrows, numcols\n            The dimensions of ``a``.\n\n        mu\n            A numdims array of means of ``a``. This is the vector that points\n            to the origin of PCA space.\n\n        sigma\n            A numdims array of standard deviation of ``a``.\n\n        fracs\n            The proportion of variance of each of the principal components.\n\n        s\n            The actual eigenvalues of the decomposition.\n\n        Wt\n            The weight vector for projecting a numdims point or array into\n            PCA space.\n\n        Y\n            A projected into PCA space.\n\n        Notes\n        -----\n        The factor loadings are in the ``Wt`` factor, i.e., the factor loadings\n        for the first principal component are given by ``Wt[0]``. This row is\n        also the first eigenvector.\n\n        ')
        
        # Assigning a Attribute to a Tuple (line 1634):
        
        # Assigning a Subscript to a Name (line 1634):
        
        # Assigning a Subscript to a Name (line 1634):
        
        # Obtaining the type of the subscript
        int_89760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1634, 8), 'int')
        # Getting the type of 'a' (line 1634)
        a_89761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 15), 'a')
        # Obtaining the member 'shape' of a type (line 1634)
        shape_89762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1634, 15), a_89761, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1634)
        getitem___89763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1634, 8), shape_89762, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1634)
        subscript_call_result_89764 = invoke(stypy.reporting.localization.Localization(__file__, 1634, 8), getitem___89763, int_89760)
        
        # Assigning a type to the variable 'tuple_var_assignment_87262' (line 1634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1634, 8), 'tuple_var_assignment_87262', subscript_call_result_89764)
        
        # Assigning a Subscript to a Name (line 1634):
        
        # Assigning a Subscript to a Name (line 1634):
        
        # Obtaining the type of the subscript
        int_89765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1634, 8), 'int')
        # Getting the type of 'a' (line 1634)
        a_89766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 15), 'a')
        # Obtaining the member 'shape' of a type (line 1634)
        shape_89767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1634, 15), a_89766, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1634)
        getitem___89768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1634, 8), shape_89767, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1634)
        subscript_call_result_89769 = invoke(stypy.reporting.localization.Localization(__file__, 1634, 8), getitem___89768, int_89765)
        
        # Assigning a type to the variable 'tuple_var_assignment_87263' (line 1634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1634, 8), 'tuple_var_assignment_87263', subscript_call_result_89769)
        
        # Assigning a Name to a Name (line 1634):
        
        # Assigning a Name to a Name (line 1634):
        # Getting the type of 'tuple_var_assignment_87262' (line 1634)
        tuple_var_assignment_87262_89770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 8), 'tuple_var_assignment_87262')
        # Assigning a type to the variable 'n' (line 1634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1634, 8), 'n', tuple_var_assignment_87262_89770)
        
        # Assigning a Name to a Name (line 1634):
        
        # Assigning a Name to a Name (line 1634):
        # Getting the type of 'tuple_var_assignment_87263' (line 1634)
        tuple_var_assignment_87263_89771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 8), 'tuple_var_assignment_87263')
        # Assigning a type to the variable 'm' (line 1634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1634, 11), 'm', tuple_var_assignment_87263_89771)
        
        
        # Getting the type of 'n' (line 1635)
        n_89772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 11), 'n')
        # Getting the type of 'm' (line 1635)
        m_89773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 15), 'm')
        # Applying the binary operator '<' (line 1635)
        result_lt_89774 = python_operator(stypy.reporting.localization.Localization(__file__, 1635, 11), '<', n_89772, m_89773)
        
        # Testing the type of an if condition (line 1635)
        if_condition_89775 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1635, 8), result_lt_89774)
        # Assigning a type to the variable 'if_condition_89775' (line 1635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1635, 8), 'if_condition_89775', if_condition_89775)
        # SSA begins for if statement (line 1635)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to RuntimeError(...): (line 1636)
        # Processing the call arguments (line 1636)
        unicode_89777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1636, 31), 'unicode', u'we assume data in a is organized with numrows>numcols')
        # Processing the call keyword arguments (line 1636)
        kwargs_89778 = {}
        # Getting the type of 'RuntimeError' (line 1636)
        RuntimeError_89776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 18), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 1636)
        RuntimeError_call_result_89779 = invoke(stypy.reporting.localization.Localization(__file__, 1636, 18), RuntimeError_89776, *[unicode_89777], **kwargs_89778)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1636, 12), RuntimeError_call_result_89779, 'raise parameter', BaseException)
        # SSA join for if statement (line 1635)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 1639):
        
        # Assigning a Name to a Name (line 1639):
        
        # Assigning a Name to a Name (line 1639):
        # Getting the type of 'n' (line 1639)
        n_89780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 37), 'n')
        # Assigning a type to the variable 'tuple_assignment_87264' (line 1639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1639, 8), 'tuple_assignment_87264', n_89780)
        
        # Assigning a Name to a Name (line 1639):
        
        # Assigning a Name to a Name (line 1639):
        # Getting the type of 'm' (line 1639)
        m_89781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 40), 'm')
        # Assigning a type to the variable 'tuple_assignment_87265' (line 1639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1639, 8), 'tuple_assignment_87265', m_89781)
        
        # Assigning a Name to a Attribute (line 1639):
        
        # Assigning a Name to a Attribute (line 1639):
        # Getting the type of 'tuple_assignment_87264' (line 1639)
        tuple_assignment_87264_89782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 8), 'tuple_assignment_87264')
        # Getting the type of 'self' (line 1639)
        self_89783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 8), 'self')
        # Setting the type of the member 'numrows' of a type (line 1639)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1639, 8), self_89783, 'numrows', tuple_assignment_87264_89782)
        
        # Assigning a Name to a Attribute (line 1639):
        
        # Assigning a Name to a Attribute (line 1639):
        # Getting the type of 'tuple_assignment_87265' (line 1639)
        tuple_assignment_87265_89784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 8), 'tuple_assignment_87265')
        # Getting the type of 'self' (line 1639)
        self_89785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 22), 'self')
        # Setting the type of the member 'numcols' of a type (line 1639)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1639, 22), self_89785, 'numcols', tuple_assignment_87265_89784)
        
        # Assigning a Call to a Attribute (line 1640):
        
        # Assigning a Call to a Attribute (line 1640):
        
        # Assigning a Call to a Attribute (line 1640):
        
        # Call to mean(...): (line 1640)
        # Processing the call keyword arguments (line 1640)
        int_89788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1640, 30), 'int')
        keyword_89789 = int_89788
        kwargs_89790 = {'axis': keyword_89789}
        # Getting the type of 'a' (line 1640)
        a_89786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 18), 'a', False)
        # Obtaining the member 'mean' of a type (line 1640)
        mean_89787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1640, 18), a_89786, 'mean')
        # Calling mean(args, kwargs) (line 1640)
        mean_call_result_89791 = invoke(stypy.reporting.localization.Localization(__file__, 1640, 18), mean_89787, *[], **kwargs_89790)
        
        # Getting the type of 'self' (line 1640)
        self_89792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 8), 'self')
        # Setting the type of the member 'mu' of a type (line 1640)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1640, 8), self_89792, 'mu', mean_call_result_89791)
        
        # Assigning a Call to a Attribute (line 1641):
        
        # Assigning a Call to a Attribute (line 1641):
        
        # Assigning a Call to a Attribute (line 1641):
        
        # Call to std(...): (line 1641)
        # Processing the call keyword arguments (line 1641)
        int_89795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1641, 32), 'int')
        keyword_89796 = int_89795
        kwargs_89797 = {'axis': keyword_89796}
        # Getting the type of 'a' (line 1641)
        a_89793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 21), 'a', False)
        # Obtaining the member 'std' of a type (line 1641)
        std_89794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1641, 21), a_89793, 'std')
        # Calling std(args, kwargs) (line 1641)
        std_call_result_89798 = invoke(stypy.reporting.localization.Localization(__file__, 1641, 21), std_89794, *[], **kwargs_89797)
        
        # Getting the type of 'self' (line 1641)
        self_89799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 8), 'self')
        # Setting the type of the member 'sigma' of a type (line 1641)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1641, 8), self_89799, 'sigma', std_call_result_89798)
        
        # Assigning a Name to a Attribute (line 1642):
        
        # Assigning a Name to a Attribute (line 1642):
        
        # Assigning a Name to a Attribute (line 1642):
        # Getting the type of 'standardize' (line 1642)
        standardize_89800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 27), 'standardize')
        # Getting the type of 'self' (line 1642)
        self_89801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 8), 'self')
        # Setting the type of the member 'standardize' of a type (line 1642)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1642, 8), self_89801, 'standardize', standardize_89800)
        
        # Assigning a Call to a Name (line 1644):
        
        # Assigning a Call to a Name (line 1644):
        
        # Assigning a Call to a Name (line 1644):
        
        # Call to center(...): (line 1644)
        # Processing the call arguments (line 1644)
        # Getting the type of 'a' (line 1644)
        a_89804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 24), 'a', False)
        # Processing the call keyword arguments (line 1644)
        kwargs_89805 = {}
        # Getting the type of 'self' (line 1644)
        self_89802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 12), 'self', False)
        # Obtaining the member 'center' of a type (line 1644)
        center_89803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1644, 12), self_89802, 'center')
        # Calling center(args, kwargs) (line 1644)
        center_call_result_89806 = invoke(stypy.reporting.localization.Localization(__file__, 1644, 12), center_89803, *[a_89804], **kwargs_89805)
        
        # Assigning a type to the variable 'a' (line 1644)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1644, 8), 'a', center_call_result_89806)
        
        # Assigning a Name to a Attribute (line 1646):
        
        # Assigning a Name to a Attribute (line 1646):
        
        # Assigning a Name to a Attribute (line 1646):
        # Getting the type of 'a' (line 1646)
        a_89807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 17), 'a')
        # Getting the type of 'self' (line 1646)
        self_89808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 8), 'self')
        # Setting the type of the member 'a' of a type (line 1646)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1646, 8), self_89808, 'a', a_89807)
        
        # Assigning a Call to a Tuple (line 1648):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to svd(...): (line 1648)
        # Processing the call arguments (line 1648)
        # Getting the type of 'a' (line 1648)
        a_89812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 33), 'a', False)
        # Processing the call keyword arguments (line 1648)
        # Getting the type of 'False' (line 1648)
        False_89813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 50), 'False', False)
        keyword_89814 = False_89813
        kwargs_89815 = {'full_matrices': keyword_89814}
        # Getting the type of 'np' (line 1648)
        np_89809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 19), 'np', False)
        # Obtaining the member 'linalg' of a type (line 1648)
        linalg_89810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 19), np_89809, 'linalg')
        # Obtaining the member 'svd' of a type (line 1648)
        svd_89811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 19), linalg_89810, 'svd')
        # Calling svd(args, kwargs) (line 1648)
        svd_call_result_89816 = invoke(stypy.reporting.localization.Localization(__file__, 1648, 19), svd_89811, *[a_89812], **kwargs_89815)
        
        # Assigning a type to the variable 'call_assignment_87266' (line 1648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 8), 'call_assignment_87266', svd_call_result_89816)
        
        # Assigning a Call to a Name (line 1648):
        
        # Assigning a Call to a Name (line 1648):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_89819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1648, 8), 'int')
        # Processing the call keyword arguments
        kwargs_89820 = {}
        # Getting the type of 'call_assignment_87266' (line 1648)
        call_assignment_87266_89817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 8), 'call_assignment_87266', False)
        # Obtaining the member '__getitem__' of a type (line 1648)
        getitem___89818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 8), call_assignment_87266_89817, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_89821 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___89818, *[int_89819], **kwargs_89820)
        
        # Assigning a type to the variable 'call_assignment_87267' (line 1648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 8), 'call_assignment_87267', getitem___call_result_89821)
        
        # Assigning a Name to a Name (line 1648):
        
        # Assigning a Name to a Name (line 1648):
        # Getting the type of 'call_assignment_87267' (line 1648)
        call_assignment_87267_89822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 8), 'call_assignment_87267')
        # Assigning a type to the variable 'U' (line 1648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 8), 'U', call_assignment_87267_89822)
        
        # Assigning a Call to a Name (line 1648):
        
        # Assigning a Call to a Name (line 1648):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_89825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1648, 8), 'int')
        # Processing the call keyword arguments
        kwargs_89826 = {}
        # Getting the type of 'call_assignment_87266' (line 1648)
        call_assignment_87266_89823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 8), 'call_assignment_87266', False)
        # Obtaining the member '__getitem__' of a type (line 1648)
        getitem___89824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 8), call_assignment_87266_89823, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_89827 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___89824, *[int_89825], **kwargs_89826)
        
        # Assigning a type to the variable 'call_assignment_87268' (line 1648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 8), 'call_assignment_87268', getitem___call_result_89827)
        
        # Assigning a Name to a Name (line 1648):
        
        # Assigning a Name to a Name (line 1648):
        # Getting the type of 'call_assignment_87268' (line 1648)
        call_assignment_87268_89828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 8), 'call_assignment_87268')
        # Assigning a type to the variable 's' (line 1648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 11), 's', call_assignment_87268_89828)
        
        # Assigning a Call to a Name (line 1648):
        
        # Assigning a Call to a Name (line 1648):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_89831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1648, 8), 'int')
        # Processing the call keyword arguments
        kwargs_89832 = {}
        # Getting the type of 'call_assignment_87266' (line 1648)
        call_assignment_87266_89829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 8), 'call_assignment_87266', False)
        # Obtaining the member '__getitem__' of a type (line 1648)
        getitem___89830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 8), call_assignment_87266_89829, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_89833 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___89830, *[int_89831], **kwargs_89832)
        
        # Assigning a type to the variable 'call_assignment_87269' (line 1648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 8), 'call_assignment_87269', getitem___call_result_89833)
        
        # Assigning a Name to a Name (line 1648):
        
        # Assigning a Name to a Name (line 1648):
        # Getting the type of 'call_assignment_87269' (line 1648)
        call_assignment_87269_89834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 8), 'call_assignment_87269')
        # Assigning a type to the variable 'Vh' (line 1648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 14), 'Vh', call_assignment_87269_89834)
        
        # Assigning a Name to a Attribute (line 1660):
        
        # Assigning a Name to a Attribute (line 1660):
        
        # Assigning a Name to a Attribute (line 1660):
        # Getting the type of 'Vh' (line 1660)
        Vh_89835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 18), 'Vh')
        # Getting the type of 'self' (line 1660)
        self_89836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 8), 'self')
        # Setting the type of the member 'Wt' of a type (line 1660)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1660, 8), self_89836, 'Wt', Vh_89835)
        
        # Assigning a Attribute to a Name (line 1663):
        
        # Assigning a Attribute to a Name (line 1663):
        
        # Assigning a Attribute to a Name (line 1663):
        
        # Call to dot(...): (line 1663)
        # Processing the call arguments (line 1663)
        # Getting the type of 'Vh' (line 1663)
        Vh_89839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 19), 'Vh', False)
        # Getting the type of 'a' (line 1663)
        a_89840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 23), 'a', False)
        # Obtaining the member 'T' of a type (line 1663)
        T_89841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1663, 23), a_89840, 'T')
        # Processing the call keyword arguments (line 1663)
        kwargs_89842 = {}
        # Getting the type of 'np' (line 1663)
        np_89837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 12), 'np', False)
        # Obtaining the member 'dot' of a type (line 1663)
        dot_89838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1663, 12), np_89837, 'dot')
        # Calling dot(args, kwargs) (line 1663)
        dot_call_result_89843 = invoke(stypy.reporting.localization.Localization(__file__, 1663, 12), dot_89838, *[Vh_89839, T_89841], **kwargs_89842)
        
        # Obtaining the member 'T' of a type (line 1663)
        T_89844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1663, 12), dot_call_result_89843, 'T')
        # Assigning a type to the variable 'Y' (line 1663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1663, 8), 'Y', T_89844)
        
        # Assigning a Name to a Attribute (line 1664):
        
        # Assigning a Name to a Attribute (line 1664):
        
        # Assigning a Name to a Attribute (line 1664):
        # Getting the type of 'Y' (line 1664)
        Y_89845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 17), 'Y')
        # Getting the type of 'self' (line 1664)
        self_89846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 8), 'self')
        # Setting the type of the member 'Y' of a type (line 1664)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1664, 8), self_89846, 'Y', Y_89845)
        
        # Assigning a BinOp to a Attribute (line 1667):
        
        # Assigning a BinOp to a Attribute (line 1667):
        
        # Assigning a BinOp to a Attribute (line 1667):
        # Getting the type of 's' (line 1667)
        s_89847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 17), 's')
        int_89848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 20), 'int')
        # Applying the binary operator '**' (line 1667)
        result_pow_89849 = python_operator(stypy.reporting.localization.Localization(__file__, 1667, 17), '**', s_89847, int_89848)
        
        # Getting the type of 'self' (line 1667)
        self_89850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 8), 'self')
        # Setting the type of the member 's' of a type (line 1667)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 8), self_89850, 's', result_pow_89849)
        
        # Assigning a BinOp to a Name (line 1670):
        
        # Assigning a BinOp to a Name (line 1670):
        
        # Assigning a BinOp to a Name (line 1670):
        # Getting the type of 'self' (line 1670)
        self_89851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 15), 'self')
        # Obtaining the member 's' of a type (line 1670)
        s_89852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 15), self_89851, 's')
        
        # Call to float(...): (line 1670)
        # Processing the call arguments (line 1670)
        
        # Call to len(...): (line 1670)
        # Processing the call arguments (line 1670)
        # Getting the type of 's' (line 1670)
        s_89855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 32), 's', False)
        # Processing the call keyword arguments (line 1670)
        kwargs_89856 = {}
        # Getting the type of 'len' (line 1670)
        len_89854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 28), 'len', False)
        # Calling len(args, kwargs) (line 1670)
        len_call_result_89857 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 28), len_89854, *[s_89855], **kwargs_89856)
        
        # Processing the call keyword arguments (line 1670)
        kwargs_89858 = {}
        # Getting the type of 'float' (line 1670)
        float_89853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 22), 'float', False)
        # Calling float(args, kwargs) (line 1670)
        float_call_result_89859 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 22), float_89853, *[len_call_result_89857], **kwargs_89858)
        
        # Applying the binary operator 'div' (line 1670)
        result_div_89860 = python_operator(stypy.reporting.localization.Localization(__file__, 1670, 15), 'div', s_89852, float_call_result_89859)
        
        # Assigning a type to the variable 'vars' (line 1670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'vars', result_div_89860)
        
        # Assigning a BinOp to a Attribute (line 1671):
        
        # Assigning a BinOp to a Attribute (line 1671):
        
        # Assigning a BinOp to a Attribute (line 1671):
        # Getting the type of 'vars' (line 1671)
        vars_89861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 21), 'vars')
        
        # Call to sum(...): (line 1671)
        # Processing the call keyword arguments (line 1671)
        kwargs_89864 = {}
        # Getting the type of 'vars' (line 1671)
        vars_89862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 26), 'vars', False)
        # Obtaining the member 'sum' of a type (line 1671)
        sum_89863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1671, 26), vars_89862, 'sum')
        # Calling sum(args, kwargs) (line 1671)
        sum_call_result_89865 = invoke(stypy.reporting.localization.Localization(__file__, 1671, 26), sum_89863, *[], **kwargs_89864)
        
        # Applying the binary operator 'div' (line 1671)
        result_div_89866 = python_operator(stypy.reporting.localization.Localization(__file__, 1671, 21), 'div', vars_89861, sum_call_result_89865)
        
        # Getting the type of 'self' (line 1671)
        self_89867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 8), 'self')
        # Setting the type of the member 'fracs' of a type (line 1671)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1671, 8), self_89867, 'fracs', result_div_89866)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def project(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_89868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1673, 33), 'float')
        defaults = [float_89868]
        # Create a new context for function 'project'
        module_type_store = module_type_store.open_function_context('project', 1673, 4, False)
        # Assigning a type to the variable 'self' (line 1674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1674, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PCA.project.__dict__.__setitem__('stypy_localization', localization)
        PCA.project.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PCA.project.__dict__.__setitem__('stypy_type_store', module_type_store)
        PCA.project.__dict__.__setitem__('stypy_function_name', 'PCA.project')
        PCA.project.__dict__.__setitem__('stypy_param_names_list', ['x', 'minfrac'])
        PCA.project.__dict__.__setitem__('stypy_varargs_param_name', None)
        PCA.project.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PCA.project.__dict__.__setitem__('stypy_call_defaults', defaults)
        PCA.project.__dict__.__setitem__('stypy_call_varargs', varargs)
        PCA.project.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PCA.project.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PCA.project', ['x', 'minfrac'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'project', localization, ['x', 'minfrac'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'project(...)' code ##################

        unicode_89869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1677, (-1)), 'unicode', u'\n        project x onto the principle axes, dropping any axes where fraction\n        of variance<minfrac\n        ')
        
        # Assigning a Call to a Name (line 1678):
        
        # Assigning a Call to a Name (line 1678):
        
        # Assigning a Call to a Name (line 1678):
        
        # Call to asarray(...): (line 1678)
        # Processing the call arguments (line 1678)
        # Getting the type of 'x' (line 1678)
        x_89872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 23), 'x', False)
        # Processing the call keyword arguments (line 1678)
        kwargs_89873 = {}
        # Getting the type of 'np' (line 1678)
        np_89870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1678)
        asarray_89871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1678, 12), np_89870, 'asarray')
        # Calling asarray(args, kwargs) (line 1678)
        asarray_call_result_89874 = invoke(stypy.reporting.localization.Localization(__file__, 1678, 12), asarray_89871, *[x_89872], **kwargs_89873)
        
        # Assigning a type to the variable 'x' (line 1678)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1678, 8), 'x', asarray_call_result_89874)
        
        
        
        # Obtaining the type of the subscript
        int_89875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1679, 19), 'int')
        # Getting the type of 'x' (line 1679)
        x_89876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 11), 'x')
        # Obtaining the member 'shape' of a type (line 1679)
        shape_89877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1679, 11), x_89876, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1679)
        getitem___89878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1679, 11), shape_89877, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1679)
        subscript_call_result_89879 = invoke(stypy.reporting.localization.Localization(__file__, 1679, 11), getitem___89878, int_89875)
        
        # Getting the type of 'self' (line 1679)
        self_89880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 26), 'self')
        # Obtaining the member 'numcols' of a type (line 1679)
        numcols_89881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1679, 26), self_89880, 'numcols')
        # Applying the binary operator '!=' (line 1679)
        result_ne_89882 = python_operator(stypy.reporting.localization.Localization(__file__, 1679, 11), '!=', subscript_call_result_89879, numcols_89881)
        
        # Testing the type of an if condition (line 1679)
        if_condition_89883 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1679, 8), result_ne_89882)
        # Assigning a type to the variable 'if_condition_89883' (line 1679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1679, 8), 'if_condition_89883', if_condition_89883)
        # SSA begins for if statement (line 1679)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1680)
        # Processing the call arguments (line 1680)
        unicode_89885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1680, 29), 'unicode', u'Expected an array with dims[-1]==%d')
        # Getting the type of 'self' (line 1681)
        self_89886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 29), 'self', False)
        # Obtaining the member 'numcols' of a type (line 1681)
        numcols_89887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1681, 29), self_89886, 'numcols')
        # Applying the binary operator '%' (line 1680)
        result_mod_89888 = python_operator(stypy.reporting.localization.Localization(__file__, 1680, 29), '%', unicode_89885, numcols_89887)
        
        # Processing the call keyword arguments (line 1680)
        kwargs_89889 = {}
        # Getting the type of 'ValueError' (line 1680)
        ValueError_89884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1680)
        ValueError_call_result_89890 = invoke(stypy.reporting.localization.Localization(__file__, 1680, 18), ValueError_89884, *[result_mod_89888], **kwargs_89889)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1680, 12), ValueError_call_result_89890, 'raise parameter', BaseException)
        # SSA join for if statement (line 1679)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 1682):
        
        # Assigning a Attribute to a Name (line 1682):
        
        # Assigning a Attribute to a Name (line 1682):
        
        # Call to dot(...): (line 1682)
        # Processing the call arguments (line 1682)
        # Getting the type of 'self' (line 1682)
        self_89893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 19), 'self', False)
        # Obtaining the member 'Wt' of a type (line 1682)
        Wt_89894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1682, 19), self_89893, 'Wt')
        
        # Call to center(...): (line 1682)
        # Processing the call arguments (line 1682)
        # Getting the type of 'x' (line 1682)
        x_89897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 40), 'x', False)
        # Processing the call keyword arguments (line 1682)
        kwargs_89898 = {}
        # Getting the type of 'self' (line 1682)
        self_89895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 28), 'self', False)
        # Obtaining the member 'center' of a type (line 1682)
        center_89896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1682, 28), self_89895, 'center')
        # Calling center(args, kwargs) (line 1682)
        center_call_result_89899 = invoke(stypy.reporting.localization.Localization(__file__, 1682, 28), center_89896, *[x_89897], **kwargs_89898)
        
        # Obtaining the member 'T' of a type (line 1682)
        T_89900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1682, 28), center_call_result_89899, 'T')
        # Processing the call keyword arguments (line 1682)
        kwargs_89901 = {}
        # Getting the type of 'np' (line 1682)
        np_89891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 12), 'np', False)
        # Obtaining the member 'dot' of a type (line 1682)
        dot_89892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1682, 12), np_89891, 'dot')
        # Calling dot(args, kwargs) (line 1682)
        dot_call_result_89902 = invoke(stypy.reporting.localization.Localization(__file__, 1682, 12), dot_89892, *[Wt_89894, T_89900], **kwargs_89901)
        
        # Obtaining the member 'T' of a type (line 1682)
        T_89903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1682, 12), dot_call_result_89902, 'T')
        # Assigning a type to the variable 'Y' (line 1682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1682, 8), 'Y', T_89903)
        
        # Assigning a Compare to a Name (line 1683):
        
        # Assigning a Compare to a Name (line 1683):
        
        # Assigning a Compare to a Name (line 1683):
        
        # Getting the type of 'self' (line 1683)
        self_89904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 15), 'self')
        # Obtaining the member 'fracs' of a type (line 1683)
        fracs_89905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1683, 15), self_89904, 'fracs')
        # Getting the type of 'minfrac' (line 1683)
        minfrac_89906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 29), 'minfrac')
        # Applying the binary operator '>=' (line 1683)
        result_ge_89907 = python_operator(stypy.reporting.localization.Localization(__file__, 1683, 15), '>=', fracs_89905, minfrac_89906)
        
        # Assigning a type to the variable 'mask' (line 1683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1683, 8), 'mask', result_ge_89907)
        
        
        # Getting the type of 'x' (line 1684)
        x_89908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 11), 'x')
        # Obtaining the member 'ndim' of a type (line 1684)
        ndim_89909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1684, 11), x_89908, 'ndim')
        int_89910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1684, 21), 'int')
        # Applying the binary operator '==' (line 1684)
        result_eq_89911 = python_operator(stypy.reporting.localization.Localization(__file__, 1684, 11), '==', ndim_89909, int_89910)
        
        # Testing the type of an if condition (line 1684)
        if_condition_89912 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1684, 8), result_eq_89911)
        # Assigning a type to the variable 'if_condition_89912' (line 1684)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1684, 8), 'if_condition_89912', if_condition_89912)
        # SSA begins for if statement (line 1684)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1685):
        
        # Assigning a Subscript to a Name (line 1685):
        
        # Assigning a Subscript to a Name (line 1685):
        
        # Obtaining the type of the subscript
        slice_89913 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1685, 23), None, None, None)
        # Getting the type of 'mask' (line 1685)
        mask_89914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 28), 'mask')
        # Getting the type of 'Y' (line 1685)
        Y_89915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 23), 'Y')
        # Obtaining the member '__getitem__' of a type (line 1685)
        getitem___89916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1685, 23), Y_89915, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1685)
        subscript_call_result_89917 = invoke(stypy.reporting.localization.Localization(__file__, 1685, 23), getitem___89916, (slice_89913, mask_89914))
        
        # Assigning a type to the variable 'Yreduced' (line 1685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1685, 12), 'Yreduced', subscript_call_result_89917)
        # SSA branch for the else part of an if statement (line 1684)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Name (line 1687):
        
        # Assigning a Subscript to a Name (line 1687):
        
        # Assigning a Subscript to a Name (line 1687):
        
        # Obtaining the type of the subscript
        # Getting the type of 'mask' (line 1687)
        mask_89918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 25), 'mask')
        # Getting the type of 'Y' (line 1687)
        Y_89919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 23), 'Y')
        # Obtaining the member '__getitem__' of a type (line 1687)
        getitem___89920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1687, 23), Y_89919, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1687)
        subscript_call_result_89921 = invoke(stypy.reporting.localization.Localization(__file__, 1687, 23), getitem___89920, mask_89918)
        
        # Assigning a type to the variable 'Yreduced' (line 1687)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1687, 12), 'Yreduced', subscript_call_result_89921)
        # SSA join for if statement (line 1684)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'Yreduced' (line 1688)
        Yreduced_89922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 15), 'Yreduced')
        # Assigning a type to the variable 'stypy_return_type' (line 1688)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1688, 8), 'stypy_return_type', Yreduced_89922)
        
        # ################# End of 'project(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'project' in the type store
        # Getting the type of 'stypy_return_type' (line 1673)
        stypy_return_type_89923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_89923)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'project'
        return stypy_return_type_89923


    @norecursion
    def center(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'center'
        module_type_store = module_type_store.open_function_context('center', 1690, 4, False)
        # Assigning a type to the variable 'self' (line 1691)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1691, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PCA.center.__dict__.__setitem__('stypy_localization', localization)
        PCA.center.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PCA.center.__dict__.__setitem__('stypy_type_store', module_type_store)
        PCA.center.__dict__.__setitem__('stypy_function_name', 'PCA.center')
        PCA.center.__dict__.__setitem__('stypy_param_names_list', ['x'])
        PCA.center.__dict__.__setitem__('stypy_varargs_param_name', None)
        PCA.center.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PCA.center.__dict__.__setitem__('stypy_call_defaults', defaults)
        PCA.center.__dict__.__setitem__('stypy_call_varargs', varargs)
        PCA.center.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PCA.center.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PCA.center', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'center', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'center(...)' code ##################

        unicode_89924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1694, (-1)), 'unicode', u'\n        center and optionally standardize the data using the mean and sigma\n        from training set a\n        ')
        
        # Getting the type of 'self' (line 1695)
        self_89925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 11), 'self')
        # Obtaining the member 'standardize' of a type (line 1695)
        standardize_89926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1695, 11), self_89925, 'standardize')
        # Testing the type of an if condition (line 1695)
        if_condition_89927 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1695, 8), standardize_89926)
        # Assigning a type to the variable 'if_condition_89927' (line 1695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 8), 'if_condition_89927', if_condition_89927)
        # SSA begins for if statement (line 1695)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'x' (line 1696)
        x_89928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 20), 'x')
        # Getting the type of 'self' (line 1696)
        self_89929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 24), 'self')
        # Obtaining the member 'mu' of a type (line 1696)
        mu_89930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1696, 24), self_89929, 'mu')
        # Applying the binary operator '-' (line 1696)
        result_sub_89931 = python_operator(stypy.reporting.localization.Localization(__file__, 1696, 20), '-', x_89928, mu_89930)
        
        # Getting the type of 'self' (line 1696)
        self_89932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 33), 'self')
        # Obtaining the member 'sigma' of a type (line 1696)
        sigma_89933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1696, 33), self_89932, 'sigma')
        # Applying the binary operator 'div' (line 1696)
        result_div_89934 = python_operator(stypy.reporting.localization.Localization(__file__, 1696, 19), 'div', result_sub_89931, sigma_89933)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1696, 12), 'stypy_return_type', result_div_89934)
        # SSA branch for the else part of an if statement (line 1695)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'x' (line 1698)
        x_89935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 20), 'x')
        # Getting the type of 'self' (line 1698)
        self_89936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 24), 'self')
        # Obtaining the member 'mu' of a type (line 1698)
        mu_89937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1698, 24), self_89936, 'mu')
        # Applying the binary operator '-' (line 1698)
        result_sub_89938 = python_operator(stypy.reporting.localization.Localization(__file__, 1698, 20), '-', x_89935, mu_89937)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1698, 12), 'stypy_return_type', result_sub_89938)
        # SSA join for if statement (line 1695)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'center(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'center' in the type store
        # Getting the type of 'stypy_return_type' (line 1690)
        stypy_return_type_89939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_89939)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'center'
        return stypy_return_type_89939


    @staticmethod
    @norecursion
    def _get_colinear(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_colinear'
        module_type_store = module_type_store.open_function_context('_get_colinear', 1700, 4, False)
        
        # Passed parameters checking function
        PCA._get_colinear.__dict__.__setitem__('stypy_localization', localization)
        PCA._get_colinear.__dict__.__setitem__('stypy_type_of_self', None)
        PCA._get_colinear.__dict__.__setitem__('stypy_type_store', module_type_store)
        PCA._get_colinear.__dict__.__setitem__('stypy_function_name', '_get_colinear')
        PCA._get_colinear.__dict__.__setitem__('stypy_param_names_list', [])
        PCA._get_colinear.__dict__.__setitem__('stypy_varargs_param_name', None)
        PCA._get_colinear.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PCA._get_colinear.__dict__.__setitem__('stypy_call_defaults', defaults)
        PCA._get_colinear.__dict__.__setitem__('stypy_call_varargs', varargs)
        PCA._get_colinear.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PCA._get_colinear.__dict__.__setitem__('stypy_declared_arg_number', 0)
        arguments = process_argument_values(localization, None, module_type_store, '_get_colinear', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_colinear', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_colinear(...)' code ##################

        
        # Assigning a Call to a Name (line 1702):
        
        # Assigning a Call to a Name (line 1702):
        
        # Assigning a Call to a Name (line 1702):
        
        # Call to array(...): (line 1702)
        # Processing the call arguments (line 1702)
        
        # Obtaining an instance of the builtin type 'list' (line 1702)
        list_89942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1702, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1702)
        # Adding element type (line 1702)
        float_89943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1703, 12), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89943)
        # Adding element type (line 1702)
        float_89944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1703, 25), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89944)
        # Adding element type (line 1702)
        float_89945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1703, 38), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89945)
        # Adding element type (line 1702)
        float_89946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1703, 51), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89946)
        # Adding element type (line 1702)
        float_89947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1703, 64), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89947)
        # Adding element type (line 1702)
        float_89948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 12), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89948)
        # Adding element type (line 1702)
        float_89949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 25), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89949)
        # Adding element type (line 1702)
        float_89950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 38), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89950)
        # Adding element type (line 1702)
        float_89951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 51), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89951)
        # Adding element type (line 1702)
        float_89952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 64), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89952)
        # Adding element type (line 1702)
        float_89953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1705, 12), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89953)
        # Adding element type (line 1702)
        float_89954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1705, 25), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89954)
        # Adding element type (line 1702)
        float_89955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1705, 38), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89955)
        # Adding element type (line 1702)
        float_89956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1705, 51), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89956)
        # Adding element type (line 1702)
        float_89957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1705, 64), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89957)
        # Adding element type (line 1702)
        float_89958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1706, 12), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89958)
        # Adding element type (line 1702)
        float_89959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1706, 25), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89959)
        # Adding element type (line 1702)
        float_89960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1706, 38), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89960)
        # Adding element type (line 1702)
        float_89961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1706, 51), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89961)
        # Adding element type (line 1702)
        float_89962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1706, 64), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 22), list_89942, float_89962)
        
        # Processing the call keyword arguments (line 1702)
        kwargs_89963 = {}
        # Getting the type of 'np' (line 1702)
        np_89940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 13), 'np', False)
        # Obtaining the member 'array' of a type (line 1702)
        array_89941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1702, 13), np_89940, 'array')
        # Calling array(args, kwargs) (line 1702)
        array_call_result_89964 = invoke(stypy.reporting.localization.Localization(__file__, 1702, 13), array_89941, *[list_89942], **kwargs_89963)
        
        # Assigning a type to the variable 'c0' (line 1702)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1702, 8), 'c0', array_call_result_89964)
        
        # Assigning a Call to a Name (line 1708):
        
        # Assigning a Call to a Name (line 1708):
        
        # Assigning a Call to a Name (line 1708):
        
        # Call to array(...): (line 1708)
        # Processing the call arguments (line 1708)
        
        # Obtaining an instance of the builtin type 'list' (line 1708)
        list_89967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1708, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1708)
        # Adding element type (line 1708)
        float_89968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1709, 12), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89968)
        # Adding element type (line 1708)
        float_89969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1709, 25), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89969)
        # Adding element type (line 1708)
        float_89970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1709, 38), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89970)
        # Adding element type (line 1708)
        float_89971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1709, 52), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89971)
        # Adding element type (line 1708)
        float_89972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1709, 65), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89972)
        # Adding element type (line 1708)
        float_89973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1710, 12), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89973)
        # Adding element type (line 1708)
        float_89974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1710, 26), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89974)
        # Adding element type (line 1708)
        float_89975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1710, 39), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89975)
        # Adding element type (line 1708)
        float_89976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1710, 52), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89976)
        # Adding element type (line 1708)
        float_89977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1710, 65), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89977)
        # Adding element type (line 1708)
        float_89978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1711, 12), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89978)
        # Adding element type (line 1708)
        float_89979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1711, 25), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89979)
        # Adding element type (line 1708)
        float_89980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1711, 38), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89980)
        # Adding element type (line 1708)
        float_89981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1711, 52), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89981)
        # Adding element type (line 1708)
        float_89982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1711, 65), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89982)
        # Adding element type (line 1708)
        float_89983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1712, 12), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89983)
        # Adding element type (line 1708)
        float_89984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1712, 26), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89984)
        # Adding element type (line 1708)
        float_89985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1712, 38), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89985)
        # Adding element type (line 1708)
        float_89986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1712, 51), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89986)
        # Adding element type (line 1708)
        float_89987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1712, 65), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 22), list_89967, float_89987)
        
        # Processing the call keyword arguments (line 1708)
        kwargs_89988 = {}
        # Getting the type of 'np' (line 1708)
        np_89965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 13), 'np', False)
        # Obtaining the member 'array' of a type (line 1708)
        array_89966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1708, 13), np_89965, 'array')
        # Calling array(args, kwargs) (line 1708)
        array_call_result_89989 = invoke(stypy.reporting.localization.Localization(__file__, 1708, 13), array_89966, *[list_89967], **kwargs_89988)
        
        # Assigning a type to the variable 'c1' (line 1708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1708, 8), 'c1', array_call_result_89989)
        
        # Assigning a BinOp to a Name (line 1714):
        
        # Assigning a BinOp to a Name (line 1714):
        
        # Assigning a BinOp to a Name (line 1714):
        # Getting the type of 'c0' (line 1714)
        c0_89990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 13), 'c0')
        int_89991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1714, 18), 'int')
        # Getting the type of 'c1' (line 1714)
        c1_89992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 20), 'c1')
        # Applying the binary operator '*' (line 1714)
        result_mul_89993 = python_operator(stypy.reporting.localization.Localization(__file__, 1714, 18), '*', int_89991, c1_89992)
        
        # Applying the binary operator '+' (line 1714)
        result_add_89994 = python_operator(stypy.reporting.localization.Localization(__file__, 1714, 13), '+', c0_89990, result_mul_89993)
        
        # Assigning a type to the variable 'c2' (line 1714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1714, 8), 'c2', result_add_89994)
        
        # Assigning a BinOp to a Name (line 1715):
        
        # Assigning a BinOp to a Name (line 1715):
        
        # Assigning a BinOp to a Name (line 1715):
        int_89995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 13), 'int')
        # Getting the type of 'c0' (line 1715)
        c0_89996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 16), 'c0')
        # Applying the binary operator '*' (line 1715)
        result_mul_89997 = python_operator(stypy.reporting.localization.Localization(__file__, 1715, 13), '*', int_89995, c0_89996)
        
        int_89998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 21), 'int')
        # Getting the type of 'c1' (line 1715)
        c1_89999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 23), 'c1')
        # Applying the binary operator '*' (line 1715)
        result_mul_90000 = python_operator(stypy.reporting.localization.Localization(__file__, 1715, 21), '*', int_89998, c1_89999)
        
        # Applying the binary operator '+' (line 1715)
        result_add_90001 = python_operator(stypy.reporting.localization.Localization(__file__, 1715, 13), '+', result_mul_89997, result_mul_90000)
        
        # Assigning a type to the variable 'c3' (line 1715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1715, 8), 'c3', result_add_90001)
        
        # Assigning a Attribute to a Name (line 1716):
        
        # Assigning a Attribute to a Name (line 1716):
        
        # Assigning a Attribute to a Name (line 1716):
        
        # Call to array(...): (line 1716)
        # Processing the call arguments (line 1716)
        
        # Obtaining an instance of the builtin type 'list' (line 1716)
        list_90004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1716, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1716)
        # Adding element type (line 1716)
        # Getting the type of 'c3' (line 1716)
        c3_90005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 22), 'c3', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1716, 21), list_90004, c3_90005)
        # Adding element type (line 1716)
        # Getting the type of 'c0' (line 1716)
        c0_90006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 26), 'c0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1716, 21), list_90004, c0_90006)
        # Adding element type (line 1716)
        # Getting the type of 'c1' (line 1716)
        c1_90007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 30), 'c1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1716, 21), list_90004, c1_90007)
        # Adding element type (line 1716)
        # Getting the type of 'c2' (line 1716)
        c2_90008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 34), 'c2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1716, 21), list_90004, c2_90008)
        
        # Processing the call keyword arguments (line 1716)
        kwargs_90009 = {}
        # Getting the type of 'np' (line 1716)
        np_90002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 1716)
        array_90003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1716, 12), np_90002, 'array')
        # Calling array(args, kwargs) (line 1716)
        array_call_result_90010 = invoke(stypy.reporting.localization.Localization(__file__, 1716, 12), array_90003, *[list_90004], **kwargs_90009)
        
        # Obtaining the member 'T' of a type (line 1716)
        T_90011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1716, 12), array_call_result_90010, 'T')
        # Assigning a type to the variable 'a' (line 1716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1716, 8), 'a', T_90011)
        # Getting the type of 'a' (line 1717)
        a_90012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 15), 'a')
        # Assigning a type to the variable 'stypy_return_type' (line 1717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1717, 8), 'stypy_return_type', a_90012)
        
        # ################# End of '_get_colinear(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_colinear' in the type store
        # Getting the type of 'stypy_return_type' (line 1700)
        stypy_return_type_90013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_90013)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_colinear'
        return stypy_return_type_90013


# Assigning a type to the variable 'PCA' (line 1585)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1585, 0), 'PCA', PCA)

@norecursion
def prctile(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 1720)
    tuple_90014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1720, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1720)
    # Adding element type (line 1720)
    float_90015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1720, 18), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1720, 18), tuple_90014, float_90015)
    # Adding element type (line 1720)
    float_90016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1720, 23), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1720, 18), tuple_90014, float_90016)
    # Adding element type (line 1720)
    float_90017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1720, 29), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1720, 18), tuple_90014, float_90017)
    # Adding element type (line 1720)
    float_90018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1720, 35), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1720, 18), tuple_90014, float_90018)
    # Adding element type (line 1720)
    float_90019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1720, 41), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1720, 18), tuple_90014, float_90019)
    
    defaults = [tuple_90014]
    # Create a new context for function 'prctile'
    module_type_store = module_type_store.open_function_context('prctile', 1720, 0, False)
    
    # Passed parameters checking function
    prctile.stypy_localization = localization
    prctile.stypy_type_of_self = None
    prctile.stypy_type_store = module_type_store
    prctile.stypy_function_name = 'prctile'
    prctile.stypy_param_names_list = ['x', 'p']
    prctile.stypy_varargs_param_name = None
    prctile.stypy_kwargs_param_name = None
    prctile.stypy_call_defaults = defaults
    prctile.stypy_call_varargs = varargs
    prctile.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'prctile', ['x', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'prctile', localization, ['x', 'p'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'prctile(...)' code ##################

    unicode_90020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1727, (-1)), 'unicode', u'\n    Return the percentiles of *x*.  *p* can either be a sequence of\n    percentile values or a scalar.  If *p* is a sequence, the ith\n    element of the return sequence is the *p*(i)-th percentile of *x*.\n    If *p* is a scalar, the largest value of *x* less than or equal to\n    the *p* percentage point in the sequence is returned.\n    ')

    @norecursion
    def _interpolate(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_interpolate'
        module_type_store = module_type_store.open_function_context('_interpolate', 1730, 4, False)
        
        # Passed parameters checking function
        _interpolate.stypy_localization = localization
        _interpolate.stypy_type_of_self = None
        _interpolate.stypy_type_store = module_type_store
        _interpolate.stypy_function_name = '_interpolate'
        _interpolate.stypy_param_names_list = ['a', 'b', 'fraction']
        _interpolate.stypy_varargs_param_name = None
        _interpolate.stypy_kwargs_param_name = None
        _interpolate.stypy_call_defaults = defaults
        _interpolate.stypy_call_varargs = varargs
        _interpolate.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_interpolate', ['a', 'b', 'fraction'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_interpolate', localization, ['a', 'b', 'fraction'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_interpolate(...)' code ##################

        unicode_90021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1733, (-1)), 'unicode', u"Returns the point at the given fraction between a and b, where\n        'fraction' must be between 0 and 1.\n        ")
        # Getting the type of 'a' (line 1734)
        a_90022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 15), 'a')
        # Getting the type of 'b' (line 1734)
        b_90023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 20), 'b')
        # Getting the type of 'a' (line 1734)
        a_90024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 24), 'a')
        # Applying the binary operator '-' (line 1734)
        result_sub_90025 = python_operator(stypy.reporting.localization.Localization(__file__, 1734, 20), '-', b_90023, a_90024)
        
        # Getting the type of 'fraction' (line 1734)
        fraction_90026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 29), 'fraction')
        # Applying the binary operator '*' (line 1734)
        result_mul_90027 = python_operator(stypy.reporting.localization.Localization(__file__, 1734, 19), '*', result_sub_90025, fraction_90026)
        
        # Applying the binary operator '+' (line 1734)
        result_add_90028 = python_operator(stypy.reporting.localization.Localization(__file__, 1734, 15), '+', a_90022, result_mul_90027)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1734, 8), 'stypy_return_type', result_add_90028)
        
        # ################# End of '_interpolate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_interpolate' in the type store
        # Getting the type of 'stypy_return_type' (line 1730)
        stypy_return_type_90029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_90029)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_interpolate'
        return stypy_return_type_90029

    # Assigning a type to the variable '_interpolate' (line 1730)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1730, 4), '_interpolate', _interpolate)
    
    # Assigning a Call to a Name (line 1736):
    
    # Assigning a Call to a Name (line 1736):
    
    # Assigning a Call to a Name (line 1736):
    
    # Call to array(...): (line 1736)
    # Processing the call arguments (line 1736)
    # Getting the type of 'p' (line 1736)
    p_90032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 19), 'p', False)
    # Processing the call keyword arguments (line 1736)
    kwargs_90033 = {}
    # Getting the type of 'np' (line 1736)
    np_90030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 10), 'np', False)
    # Obtaining the member 'array' of a type (line 1736)
    array_90031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 10), np_90030, 'array')
    # Calling array(args, kwargs) (line 1736)
    array_call_result_90034 = invoke(stypy.reporting.localization.Localization(__file__, 1736, 10), array_90031, *[p_90032], **kwargs_90033)
    
    # Assigning a type to the variable 'per' (line 1736)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 4), 'per', array_call_result_90034)
    
    # Assigning a Call to a Name (line 1737):
    
    # Assigning a Call to a Name (line 1737):
    
    # Assigning a Call to a Name (line 1737):
    
    # Call to sort(...): (line 1737)
    # Processing the call arguments (line 1737)
    # Getting the type of 'x' (line 1737)
    x_90037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 21), 'x', False)
    # Processing the call keyword arguments (line 1737)
    # Getting the type of 'None' (line 1737)
    None_90038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 29), 'None', False)
    keyword_90039 = None_90038
    kwargs_90040 = {'axis': keyword_90039}
    # Getting the type of 'np' (line 1737)
    np_90035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 13), 'np', False)
    # Obtaining the member 'sort' of a type (line 1737)
    sort_90036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1737, 13), np_90035, 'sort')
    # Calling sort(args, kwargs) (line 1737)
    sort_call_result_90041 = invoke(stypy.reporting.localization.Localization(__file__, 1737, 13), sort_90036, *[x_90037], **kwargs_90040)
    
    # Assigning a type to the variable 'values' (line 1737)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1737, 4), 'values', sort_call_result_90041)
    
    # Assigning a BinOp to a Name (line 1739):
    
    # Assigning a BinOp to a Name (line 1739):
    
    # Assigning a BinOp to a Name (line 1739):
    # Getting the type of 'per' (line 1739)
    per_90042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 11), 'per')
    int_90043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1739, 17), 'int')
    # Applying the binary operator 'div' (line 1739)
    result_div_90044 = python_operator(stypy.reporting.localization.Localization(__file__, 1739, 11), 'div', per_90042, int_90043)
    
    
    # Obtaining the type of the subscript
    int_90045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1739, 37), 'int')
    # Getting the type of 'values' (line 1739)
    values_90046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 24), 'values')
    # Obtaining the member 'shape' of a type (line 1739)
    shape_90047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1739, 24), values_90046, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1739)
    getitem___90048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1739, 24), shape_90047, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1739)
    subscript_call_result_90049 = invoke(stypy.reporting.localization.Localization(__file__, 1739, 24), getitem___90048, int_90045)
    
    int_90050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1739, 42), 'int')
    # Applying the binary operator '-' (line 1739)
    result_sub_90051 = python_operator(stypy.reporting.localization.Localization(__file__, 1739, 24), '-', subscript_call_result_90049, int_90050)
    
    # Applying the binary operator '*' (line 1739)
    result_mul_90052 = python_operator(stypy.reporting.localization.Localization(__file__, 1739, 21), '*', result_div_90044, result_sub_90051)
    
    # Assigning a type to the variable 'idxs' (line 1739)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1739, 4), 'idxs', result_mul_90052)
    
    # Assigning a Call to a Name (line 1740):
    
    # Assigning a Call to a Name (line 1740):
    
    # Assigning a Call to a Name (line 1740):
    
    # Call to astype(...): (line 1740)
    # Processing the call arguments (line 1740)
    # Getting the type of 'int' (line 1740)
    int_90055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 21), 'int', False)
    # Processing the call keyword arguments (line 1740)
    kwargs_90056 = {}
    # Getting the type of 'idxs' (line 1740)
    idxs_90053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 9), 'idxs', False)
    # Obtaining the member 'astype' of a type (line 1740)
    astype_90054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 9), idxs_90053, 'astype')
    # Calling astype(args, kwargs) (line 1740)
    astype_call_result_90057 = invoke(stypy.reporting.localization.Localization(__file__, 1740, 9), astype_90054, *[int_90055], **kwargs_90056)
    
    # Assigning a type to the variable 'ai' (line 1740)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1740, 4), 'ai', astype_call_result_90057)
    
    # Assigning a BinOp to a Name (line 1741):
    
    # Assigning a BinOp to a Name (line 1741):
    
    # Assigning a BinOp to a Name (line 1741):
    # Getting the type of 'ai' (line 1741)
    ai_90058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 9), 'ai')
    int_90059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1741, 14), 'int')
    # Applying the binary operator '+' (line 1741)
    result_add_90060 = python_operator(stypy.reporting.localization.Localization(__file__, 1741, 9), '+', ai_90058, int_90059)
    
    # Assigning a type to the variable 'bi' (line 1741)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1741, 4), 'bi', result_add_90060)
    
    # Assigning a BinOp to a Name (line 1742):
    
    # Assigning a BinOp to a Name (line 1742):
    
    # Assigning a BinOp to a Name (line 1742):
    # Getting the type of 'idxs' (line 1742)
    idxs_90061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 11), 'idxs')
    int_90062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1742, 18), 'int')
    # Applying the binary operator '%' (line 1742)
    result_mod_90063 = python_operator(stypy.reporting.localization.Localization(__file__, 1742, 11), '%', idxs_90061, int_90062)
    
    # Assigning a type to the variable 'frac' (line 1742)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1742, 4), 'frac', result_mod_90063)
    
    # Assigning a Compare to a Name (line 1745):
    
    # Assigning a Compare to a Name (line 1745):
    
    # Assigning a Compare to a Name (line 1745):
    
    # Getting the type of 'bi' (line 1745)
    bi_90064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 11), 'bi')
    
    # Call to len(...): (line 1745)
    # Processing the call arguments (line 1745)
    # Getting the type of 'values' (line 1745)
    values_90066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 21), 'values', False)
    # Processing the call keyword arguments (line 1745)
    kwargs_90067 = {}
    # Getting the type of 'len' (line 1745)
    len_90065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 17), 'len', False)
    # Calling len(args, kwargs) (line 1745)
    len_call_result_90068 = invoke(stypy.reporting.localization.Localization(__file__, 1745, 17), len_90065, *[values_90066], **kwargs_90067)
    
    # Applying the binary operator '>=' (line 1745)
    result_ge_90069 = python_operator(stypy.reporting.localization.Localization(__file__, 1745, 11), '>=', bi_90064, len_call_result_90068)
    
    # Assigning a type to the variable 'cond' (line 1745)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1745, 4), 'cond', result_ge_90069)
    
    # Getting the type of 'per' (line 1746)
    per_90070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 7), 'per')
    # Obtaining the member 'ndim' of a type (line 1746)
    ndim_90071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1746, 7), per_90070, 'ndim')
    # Testing the type of an if condition (line 1746)
    if_condition_90072 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1746, 4), ndim_90071)
    # Assigning a type to the variable 'if_condition_90072' (line 1746)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1746, 4), 'if_condition_90072', if_condition_90072)
    # SSA begins for if statement (line 1746)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'ai' (line 1747)
    ai_90073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 8), 'ai')
    
    # Obtaining the type of the subscript
    # Getting the type of 'cond' (line 1747)
    cond_90074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 11), 'cond')
    # Getting the type of 'ai' (line 1747)
    ai_90075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 8), 'ai')
    # Obtaining the member '__getitem__' of a type (line 1747)
    getitem___90076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1747, 8), ai_90075, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1747)
    subscript_call_result_90077 = invoke(stypy.reporting.localization.Localization(__file__, 1747, 8), getitem___90076, cond_90074)
    
    int_90078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1747, 20), 'int')
    # Applying the binary operator '-=' (line 1747)
    result_isub_90079 = python_operator(stypy.reporting.localization.Localization(__file__, 1747, 8), '-=', subscript_call_result_90077, int_90078)
    # Getting the type of 'ai' (line 1747)
    ai_90080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 8), 'ai')
    # Getting the type of 'cond' (line 1747)
    cond_90081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 11), 'cond')
    # Storing an element on a container (line 1747)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1747, 8), ai_90080, (cond_90081, result_isub_90079))
    
    
    # Getting the type of 'bi' (line 1748)
    bi_90082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'bi')
    
    # Obtaining the type of the subscript
    # Getting the type of 'cond' (line 1748)
    cond_90083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 11), 'cond')
    # Getting the type of 'bi' (line 1748)
    bi_90084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'bi')
    # Obtaining the member '__getitem__' of a type (line 1748)
    getitem___90085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1748, 8), bi_90084, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1748)
    subscript_call_result_90086 = invoke(stypy.reporting.localization.Localization(__file__, 1748, 8), getitem___90085, cond_90083)
    
    int_90087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1748, 20), 'int')
    # Applying the binary operator '-=' (line 1748)
    result_isub_90088 = python_operator(stypy.reporting.localization.Localization(__file__, 1748, 8), '-=', subscript_call_result_90086, int_90087)
    # Getting the type of 'bi' (line 1748)
    bi_90089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'bi')
    # Getting the type of 'cond' (line 1748)
    cond_90090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 11), 'cond')
    # Storing an element on a container (line 1748)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1748, 8), bi_90089, (cond_90090, result_isub_90088))
    
    
    # Getting the type of 'frac' (line 1749)
    frac_90091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 8), 'frac')
    
    # Obtaining the type of the subscript
    # Getting the type of 'cond' (line 1749)
    cond_90092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 13), 'cond')
    # Getting the type of 'frac' (line 1749)
    frac_90093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 8), 'frac')
    # Obtaining the member '__getitem__' of a type (line 1749)
    getitem___90094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1749, 8), frac_90093, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1749)
    subscript_call_result_90095 = invoke(stypy.reporting.localization.Localization(__file__, 1749, 8), getitem___90094, cond_90092)
    
    int_90096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1749, 22), 'int')
    # Applying the binary operator '+=' (line 1749)
    result_iadd_90097 = python_operator(stypy.reporting.localization.Localization(__file__, 1749, 8), '+=', subscript_call_result_90095, int_90096)
    # Getting the type of 'frac' (line 1749)
    frac_90098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 8), 'frac')
    # Getting the type of 'cond' (line 1749)
    cond_90099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 13), 'cond')
    # Storing an element on a container (line 1749)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1749, 8), frac_90098, (cond_90099, result_iadd_90097))
    
    # SSA branch for the else part of an if statement (line 1746)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'cond' (line 1751)
    cond_90100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1751, 11), 'cond')
    # Testing the type of an if condition (line 1751)
    if_condition_90101 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1751, 8), cond_90100)
    # Assigning a type to the variable 'if_condition_90101' (line 1751)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1751, 8), 'if_condition_90101', if_condition_90101)
    # SSA begins for if statement (line 1751)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'ai' (line 1752)
    ai_90102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1752, 12), 'ai')
    int_90103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1752, 18), 'int')
    # Applying the binary operator '-=' (line 1752)
    result_isub_90104 = python_operator(stypy.reporting.localization.Localization(__file__, 1752, 12), '-=', ai_90102, int_90103)
    # Assigning a type to the variable 'ai' (line 1752)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1752, 12), 'ai', result_isub_90104)
    
    
    # Getting the type of 'bi' (line 1753)
    bi_90105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 12), 'bi')
    int_90106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1753, 18), 'int')
    # Applying the binary operator '-=' (line 1753)
    result_isub_90107 = python_operator(stypy.reporting.localization.Localization(__file__, 1753, 12), '-=', bi_90105, int_90106)
    # Assigning a type to the variable 'bi' (line 1753)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1753, 12), 'bi', result_isub_90107)
    
    
    # Getting the type of 'frac' (line 1754)
    frac_90108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 12), 'frac')
    int_90109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1754, 20), 'int')
    # Applying the binary operator '+=' (line 1754)
    result_iadd_90110 = python_operator(stypy.reporting.localization.Localization(__file__, 1754, 12), '+=', frac_90108, int_90109)
    # Assigning a type to the variable 'frac' (line 1754)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1754, 12), 'frac', result_iadd_90110)
    
    # SSA join for if statement (line 1751)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1746)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to _interpolate(...): (line 1756)
    # Processing the call arguments (line 1756)
    
    # Obtaining the type of the subscript
    # Getting the type of 'ai' (line 1756)
    ai_90112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 31), 'ai', False)
    # Getting the type of 'values' (line 1756)
    values_90113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 24), 'values', False)
    # Obtaining the member '__getitem__' of a type (line 1756)
    getitem___90114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1756, 24), values_90113, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1756)
    subscript_call_result_90115 = invoke(stypy.reporting.localization.Localization(__file__, 1756, 24), getitem___90114, ai_90112)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'bi' (line 1756)
    bi_90116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 43), 'bi', False)
    # Getting the type of 'values' (line 1756)
    values_90117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 36), 'values', False)
    # Obtaining the member '__getitem__' of a type (line 1756)
    getitem___90118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1756, 36), values_90117, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1756)
    subscript_call_result_90119 = invoke(stypy.reporting.localization.Localization(__file__, 1756, 36), getitem___90118, bi_90116)
    
    # Getting the type of 'frac' (line 1756)
    frac_90120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 48), 'frac', False)
    # Processing the call keyword arguments (line 1756)
    kwargs_90121 = {}
    # Getting the type of '_interpolate' (line 1756)
    _interpolate_90111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 11), '_interpolate', False)
    # Calling _interpolate(args, kwargs) (line 1756)
    _interpolate_call_result_90122 = invoke(stypy.reporting.localization.Localization(__file__, 1756, 11), _interpolate_90111, *[subscript_call_result_90115, subscript_call_result_90119, frac_90120], **kwargs_90121)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1756, 4), 'stypy_return_type', _interpolate_call_result_90122)
    
    # ################# End of 'prctile(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'prctile' in the type store
    # Getting the type of 'stypy_return_type' (line 1720)
    stypy_return_type_90123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_90123)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'prctile'
    return stypy_return_type_90123

# Assigning a type to the variable 'prctile' (line 1720)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1720, 0), 'prctile', prctile)

@norecursion
def prctile_rank(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'prctile_rank'
    module_type_store = module_type_store.open_function_context('prctile_rank', 1759, 0, False)
    
    # Passed parameters checking function
    prctile_rank.stypy_localization = localization
    prctile_rank.stypy_type_of_self = None
    prctile_rank.stypy_type_store = module_type_store
    prctile_rank.stypy_function_name = 'prctile_rank'
    prctile_rank.stypy_param_names_list = ['x', 'p']
    prctile_rank.stypy_varargs_param_name = None
    prctile_rank.stypy_kwargs_param_name = None
    prctile_rank.stypy_call_defaults = defaults
    prctile_rank.stypy_call_varargs = varargs
    prctile_rank.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'prctile_rank', ['x', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'prctile_rank', localization, ['x', 'p'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'prctile_rank(...)' code ##################

    unicode_90124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1770, (-1)), 'unicode', u'\n    Return the rank for each element in *x*, return the rank\n    0..len(*p*).  e.g., if *p* = (25, 50, 75), the return value will be a\n    len(*x*) array with values in [0,1,2,3] where 0 indicates the\n    value is less than the 25th percentile, 1 indicates the value is\n    >= the 25th and < 50th percentile, ... and 3 indicates the value\n    is above the 75th percentile cutoff.\n\n    *p* is either an array of percentiles in [0..100] or a scalar which\n    indicates how many quantiles of data you want ranked.\n    ')
    
    
    
    # Call to iterable(...): (line 1772)
    # Processing the call arguments (line 1772)
    # Getting the type of 'p' (line 1772)
    p_90127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 26), 'p', False)
    # Processing the call keyword arguments (line 1772)
    kwargs_90128 = {}
    # Getting the type of 'cbook' (line 1772)
    cbook_90125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 11), 'cbook', False)
    # Obtaining the member 'iterable' of a type (line 1772)
    iterable_90126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1772, 11), cbook_90125, 'iterable')
    # Calling iterable(args, kwargs) (line 1772)
    iterable_call_result_90129 = invoke(stypy.reporting.localization.Localization(__file__, 1772, 11), iterable_90126, *[p_90127], **kwargs_90128)
    
    # Applying the 'not' unary operator (line 1772)
    result_not__90130 = python_operator(stypy.reporting.localization.Localization(__file__, 1772, 7), 'not', iterable_call_result_90129)
    
    # Testing the type of an if condition (line 1772)
    if_condition_90131 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1772, 4), result_not__90130)
    # Assigning a type to the variable 'if_condition_90131' (line 1772)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1772, 4), 'if_condition_90131', if_condition_90131)
    # SSA begins for if statement (line 1772)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1773):
    
    # Assigning a Call to a Name (line 1773):
    
    # Assigning a Call to a Name (line 1773):
    
    # Call to arange(...): (line 1773)
    # Processing the call arguments (line 1773)
    float_90134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1773, 22), 'float')
    # Getting the type of 'p' (line 1773)
    p_90135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 28), 'p', False)
    # Applying the binary operator 'div' (line 1773)
    result_div_90136 = python_operator(stypy.reporting.localization.Localization(__file__, 1773, 22), 'div', float_90134, p_90135)
    
    float_90137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1773, 31), 'float')
    float_90138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1773, 38), 'float')
    # Getting the type of 'p' (line 1773)
    p_90139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 44), 'p', False)
    # Applying the binary operator 'div' (line 1773)
    result_div_90140 = python_operator(stypy.reporting.localization.Localization(__file__, 1773, 38), 'div', float_90138, p_90139)
    
    # Processing the call keyword arguments (line 1773)
    kwargs_90141 = {}
    # Getting the type of 'np' (line 1773)
    np_90132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 12), 'np', False)
    # Obtaining the member 'arange' of a type (line 1773)
    arange_90133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 12), np_90132, 'arange')
    # Calling arange(args, kwargs) (line 1773)
    arange_call_result_90142 = invoke(stypy.reporting.localization.Localization(__file__, 1773, 12), arange_90133, *[result_div_90136, float_90137, result_div_90140], **kwargs_90141)
    
    # Assigning a type to the variable 'p' (line 1773)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1773, 8), 'p', arange_call_result_90142)
    # SSA branch for the else part of an if statement (line 1772)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1775):
    
    # Assigning a Call to a Name (line 1775):
    
    # Assigning a Call to a Name (line 1775):
    
    # Call to asarray(...): (line 1775)
    # Processing the call arguments (line 1775)
    # Getting the type of 'p' (line 1775)
    p_90145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 23), 'p', False)
    # Processing the call keyword arguments (line 1775)
    kwargs_90146 = {}
    # Getting the type of 'np' (line 1775)
    np_90143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1775)
    asarray_90144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1775, 12), np_90143, 'asarray')
    # Calling asarray(args, kwargs) (line 1775)
    asarray_call_result_90147 = invoke(stypy.reporting.localization.Localization(__file__, 1775, 12), asarray_90144, *[p_90145], **kwargs_90146)
    
    # Assigning a type to the variable 'p' (line 1775)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1775, 8), 'p', asarray_call_result_90147)
    # SSA join for if statement (line 1772)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    
    # Call to max(...): (line 1777)
    # Processing the call keyword arguments (line 1777)
    kwargs_90150 = {}
    # Getting the type of 'p' (line 1777)
    p_90148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 7), 'p', False)
    # Obtaining the member 'max' of a type (line 1777)
    max_90149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1777, 7), p_90148, 'max')
    # Calling max(args, kwargs) (line 1777)
    max_call_result_90151 = invoke(stypy.reporting.localization.Localization(__file__, 1777, 7), max_90149, *[], **kwargs_90150)
    
    int_90152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1777, 18), 'int')
    # Applying the binary operator '<=' (line 1777)
    result_le_90153 = python_operator(stypy.reporting.localization.Localization(__file__, 1777, 7), '<=', max_call_result_90151, int_90152)
    
    
    
    # Call to min(...): (line 1777)
    # Processing the call keyword arguments (line 1777)
    kwargs_90156 = {}
    # Getting the type of 'p' (line 1777)
    p_90154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 23), 'p', False)
    # Obtaining the member 'min' of a type (line 1777)
    min_90155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1777, 23), p_90154, 'min')
    # Calling min(args, kwargs) (line 1777)
    min_call_result_90157 = invoke(stypy.reporting.localization.Localization(__file__, 1777, 23), min_90155, *[], **kwargs_90156)
    
    int_90158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1777, 33), 'int')
    # Applying the binary operator '<' (line 1777)
    result_lt_90159 = python_operator(stypy.reporting.localization.Localization(__file__, 1777, 23), '<', min_call_result_90157, int_90158)
    
    # Applying the binary operator 'or' (line 1777)
    result_or_keyword_90160 = python_operator(stypy.reporting.localization.Localization(__file__, 1777, 7), 'or', result_le_90153, result_lt_90159)
    
    
    # Call to max(...): (line 1777)
    # Processing the call keyword arguments (line 1777)
    kwargs_90163 = {}
    # Getting the type of 'p' (line 1777)
    p_90161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 38), 'p', False)
    # Obtaining the member 'max' of a type (line 1777)
    max_90162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1777, 38), p_90161, 'max')
    # Calling max(args, kwargs) (line 1777)
    max_call_result_90164 = invoke(stypy.reporting.localization.Localization(__file__, 1777, 38), max_90162, *[], **kwargs_90163)
    
    int_90165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1777, 48), 'int')
    # Applying the binary operator '>' (line 1777)
    result_gt_90166 = python_operator(stypy.reporting.localization.Localization(__file__, 1777, 38), '>', max_call_result_90164, int_90165)
    
    # Applying the binary operator 'or' (line 1777)
    result_or_keyword_90167 = python_operator(stypy.reporting.localization.Localization(__file__, 1777, 7), 'or', result_or_keyword_90160, result_gt_90166)
    
    # Testing the type of an if condition (line 1777)
    if_condition_90168 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1777, 4), result_or_keyword_90167)
    # Assigning a type to the variable 'if_condition_90168' (line 1777)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1777, 4), 'if_condition_90168', if_condition_90168)
    # SSA begins for if statement (line 1777)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1778)
    # Processing the call arguments (line 1778)
    unicode_90170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1778, 25), 'unicode', u'percentiles should be in range 0..100, not 0..1')
    # Processing the call keyword arguments (line 1778)
    kwargs_90171 = {}
    # Getting the type of 'ValueError' (line 1778)
    ValueError_90169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1778)
    ValueError_call_result_90172 = invoke(stypy.reporting.localization.Localization(__file__, 1778, 14), ValueError_90169, *[unicode_90170], **kwargs_90171)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1778, 8), ValueError_call_result_90172, 'raise parameter', BaseException)
    # SSA join for if statement (line 1777)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1780):
    
    # Assigning a Call to a Name (line 1780):
    
    # Assigning a Call to a Name (line 1780):
    
    # Call to prctile(...): (line 1780)
    # Processing the call arguments (line 1780)
    # Getting the type of 'x' (line 1780)
    x_90174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 21), 'x', False)
    # Getting the type of 'p' (line 1780)
    p_90175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 24), 'p', False)
    # Processing the call keyword arguments (line 1780)
    kwargs_90176 = {}
    # Getting the type of 'prctile' (line 1780)
    prctile_90173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 13), 'prctile', False)
    # Calling prctile(args, kwargs) (line 1780)
    prctile_call_result_90177 = invoke(stypy.reporting.localization.Localization(__file__, 1780, 13), prctile_90173, *[x_90174, p_90175], **kwargs_90176)
    
    # Assigning a type to the variable 'ptiles' (line 1780)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1780, 4), 'ptiles', prctile_call_result_90177)
    
    # Call to searchsorted(...): (line 1781)
    # Processing the call arguments (line 1781)
    # Getting the type of 'ptiles' (line 1781)
    ptiles_90180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 27), 'ptiles', False)
    # Getting the type of 'x' (line 1781)
    x_90181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 35), 'x', False)
    # Processing the call keyword arguments (line 1781)
    kwargs_90182 = {}
    # Getting the type of 'np' (line 1781)
    np_90178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 11), 'np', False)
    # Obtaining the member 'searchsorted' of a type (line 1781)
    searchsorted_90179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 11), np_90178, 'searchsorted')
    # Calling searchsorted(args, kwargs) (line 1781)
    searchsorted_call_result_90183 = invoke(stypy.reporting.localization.Localization(__file__, 1781, 11), searchsorted_90179, *[ptiles_90180, x_90181], **kwargs_90182)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1781)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1781, 4), 'stypy_return_type', searchsorted_call_result_90183)
    
    # ################# End of 'prctile_rank(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'prctile_rank' in the type store
    # Getting the type of 'stypy_return_type' (line 1759)
    stypy_return_type_90184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_90184)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'prctile_rank'
    return stypy_return_type_90184

# Assigning a type to the variable 'prctile_rank' (line 1759)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1759, 0), 'prctile_rank', prctile_rank)

@norecursion
def center_matrix(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_90185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1784, 25), 'int')
    defaults = [int_90185]
    # Create a new context for function 'center_matrix'
    module_type_store = module_type_store.open_function_context('center_matrix', 1784, 0, False)
    
    # Passed parameters checking function
    center_matrix.stypy_localization = localization
    center_matrix.stypy_type_of_self = None
    center_matrix.stypy_type_store = module_type_store
    center_matrix.stypy_function_name = 'center_matrix'
    center_matrix.stypy_param_names_list = ['M', 'dim']
    center_matrix.stypy_varargs_param_name = None
    center_matrix.stypy_kwargs_param_name = None
    center_matrix.stypy_call_defaults = defaults
    center_matrix.stypy_call_varargs = varargs
    center_matrix.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'center_matrix', ['M', 'dim'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'center_matrix', localization, ['M', 'dim'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'center_matrix(...)' code ##################

    unicode_90186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1790, (-1)), 'unicode', u'\n    Return the matrix *M* with each row having zero mean and unit std.\n\n    If *dim* = 1 operate on columns instead of rows.  (*dim* is\n    opposite to the numpy axis kwarg.)\n    ')
    
    # Assigning a Call to a Name (line 1791):
    
    # Assigning a Call to a Name (line 1791):
    
    # Assigning a Call to a Name (line 1791):
    
    # Call to asarray(...): (line 1791)
    # Processing the call arguments (line 1791)
    # Getting the type of 'M' (line 1791)
    M_90189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 19), 'M', False)
    # Getting the type of 'float' (line 1791)
    float_90190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 22), 'float', False)
    # Processing the call keyword arguments (line 1791)
    kwargs_90191 = {}
    # Getting the type of 'np' (line 1791)
    np_90187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1791)
    asarray_90188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1791, 8), np_90187, 'asarray')
    # Calling asarray(args, kwargs) (line 1791)
    asarray_call_result_90192 = invoke(stypy.reporting.localization.Localization(__file__, 1791, 8), asarray_90188, *[M_90189, float_90190], **kwargs_90191)
    
    # Assigning a type to the variable 'M' (line 1791)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1791, 4), 'M', asarray_call_result_90192)
    
    # Getting the type of 'dim' (line 1792)
    dim_90193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 7), 'dim')
    # Testing the type of an if condition (line 1792)
    if_condition_90194 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1792, 4), dim_90193)
    # Assigning a type to the variable 'if_condition_90194' (line 1792)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1792, 4), 'if_condition_90194', if_condition_90194)
    # SSA begins for if statement (line 1792)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1793):
    
    # Assigning a BinOp to a Name (line 1793):
    
    # Assigning a BinOp to a Name (line 1793):
    # Getting the type of 'M' (line 1793)
    M_90195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 13), 'M')
    
    # Call to mean(...): (line 1793)
    # Processing the call keyword arguments (line 1793)
    int_90198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1793, 29), 'int')
    keyword_90199 = int_90198
    kwargs_90200 = {'axis': keyword_90199}
    # Getting the type of 'M' (line 1793)
    M_90196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 17), 'M', False)
    # Obtaining the member 'mean' of a type (line 1793)
    mean_90197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1793, 17), M_90196, 'mean')
    # Calling mean(args, kwargs) (line 1793)
    mean_call_result_90201 = invoke(stypy.reporting.localization.Localization(__file__, 1793, 17), mean_90197, *[], **kwargs_90200)
    
    # Applying the binary operator '-' (line 1793)
    result_sub_90202 = python_operator(stypy.reporting.localization.Localization(__file__, 1793, 13), '-', M_90195, mean_call_result_90201)
    
    
    # Call to std(...): (line 1793)
    # Processing the call keyword arguments (line 1793)
    int_90205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1793, 46), 'int')
    keyword_90206 = int_90205
    kwargs_90207 = {'axis': keyword_90206}
    # Getting the type of 'M' (line 1793)
    M_90203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 35), 'M', False)
    # Obtaining the member 'std' of a type (line 1793)
    std_90204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1793, 35), M_90203, 'std')
    # Calling std(args, kwargs) (line 1793)
    std_call_result_90208 = invoke(stypy.reporting.localization.Localization(__file__, 1793, 35), std_90204, *[], **kwargs_90207)
    
    # Applying the binary operator 'div' (line 1793)
    result_div_90209 = python_operator(stypy.reporting.localization.Localization(__file__, 1793, 12), 'div', result_sub_90202, std_call_result_90208)
    
    # Assigning a type to the variable 'M' (line 1793)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1793, 8), 'M', result_div_90209)
    # SSA branch for the else part of an if statement (line 1792)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1795):
    
    # Assigning a BinOp to a Name (line 1795):
    
    # Assigning a BinOp to a Name (line 1795):
    # Getting the type of 'M' (line 1795)
    M_90210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 13), 'M')
    
    # Obtaining the type of the subscript
    slice_90211 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1795, 17), None, None, None)
    # Getting the type of 'np' (line 1795)
    np_90212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 35), 'np')
    # Obtaining the member 'newaxis' of a type (line 1795)
    newaxis_90213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1795, 35), np_90212, 'newaxis')
    
    # Call to mean(...): (line 1795)
    # Processing the call keyword arguments (line 1795)
    int_90216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1795, 29), 'int')
    keyword_90217 = int_90216
    kwargs_90218 = {'axis': keyword_90217}
    # Getting the type of 'M' (line 1795)
    M_90214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 17), 'M', False)
    # Obtaining the member 'mean' of a type (line 1795)
    mean_90215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1795, 17), M_90214, 'mean')
    # Calling mean(args, kwargs) (line 1795)
    mean_call_result_90219 = invoke(stypy.reporting.localization.Localization(__file__, 1795, 17), mean_90215, *[], **kwargs_90218)
    
    # Obtaining the member '__getitem__' of a type (line 1795)
    getitem___90220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1795, 17), mean_call_result_90219, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1795)
    subscript_call_result_90221 = invoke(stypy.reporting.localization.Localization(__file__, 1795, 17), getitem___90220, (slice_90211, newaxis_90213))
    
    # Applying the binary operator '-' (line 1795)
    result_sub_90222 = python_operator(stypy.reporting.localization.Localization(__file__, 1795, 13), '-', M_90210, subscript_call_result_90221)
    
    # Assigning a type to the variable 'M' (line 1795)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1795, 8), 'M', result_sub_90222)
    
    # Assigning a BinOp to a Name (line 1796):
    
    # Assigning a BinOp to a Name (line 1796):
    
    # Assigning a BinOp to a Name (line 1796):
    # Getting the type of 'M' (line 1796)
    M_90223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 12), 'M')
    
    # Obtaining the type of the subscript
    slice_90224 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1796, 16), None, None, None)
    # Getting the type of 'np' (line 1796)
    np_90225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 33), 'np')
    # Obtaining the member 'newaxis' of a type (line 1796)
    newaxis_90226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1796, 33), np_90225, 'newaxis')
    
    # Call to std(...): (line 1796)
    # Processing the call keyword arguments (line 1796)
    int_90229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1796, 27), 'int')
    keyword_90230 = int_90229
    kwargs_90231 = {'axis': keyword_90230}
    # Getting the type of 'M' (line 1796)
    M_90227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 16), 'M', False)
    # Obtaining the member 'std' of a type (line 1796)
    std_90228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1796, 16), M_90227, 'std')
    # Calling std(args, kwargs) (line 1796)
    std_call_result_90232 = invoke(stypy.reporting.localization.Localization(__file__, 1796, 16), std_90228, *[], **kwargs_90231)
    
    # Obtaining the member '__getitem__' of a type (line 1796)
    getitem___90233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1796, 16), std_call_result_90232, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1796)
    subscript_call_result_90234 = invoke(stypy.reporting.localization.Localization(__file__, 1796, 16), getitem___90233, (slice_90224, newaxis_90226))
    
    # Applying the binary operator 'div' (line 1796)
    result_div_90235 = python_operator(stypy.reporting.localization.Localization(__file__, 1796, 12), 'div', M_90223, subscript_call_result_90234)
    
    # Assigning a type to the variable 'M' (line 1796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1796, 8), 'M', result_div_90235)
    # SSA join for if statement (line 1792)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'M' (line 1797)
    M_90236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 11), 'M')
    # Assigning a type to the variable 'stypy_return_type' (line 1797)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1797, 4), 'stypy_return_type', M_90236)
    
    # ################# End of 'center_matrix(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'center_matrix' in the type store
    # Getting the type of 'stypy_return_type' (line 1784)
    stypy_return_type_90237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_90237)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'center_matrix'
    return stypy_return_type_90237

# Assigning a type to the variable 'center_matrix' (line 1784)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 0), 'center_matrix', center_matrix)

@norecursion
def rk4(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rk4'
    module_type_store = module_type_store.open_function_context('rk4', 1800, 0, False)
    
    # Passed parameters checking function
    rk4.stypy_localization = localization
    rk4.stypy_type_of_self = None
    rk4.stypy_type_store = module_type_store
    rk4.stypy_function_name = 'rk4'
    rk4.stypy_param_names_list = ['derivs', 'y0', 't']
    rk4.stypy_varargs_param_name = None
    rk4.stypy_kwargs_param_name = None
    rk4.stypy_call_defaults = defaults
    rk4.stypy_call_varargs = varargs
    rk4.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rk4', ['derivs', 'y0', 't'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rk4', localization, ['derivs', 'y0', 't'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rk4(...)' code ##################

    unicode_90238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1844, (-1)), 'unicode', u'\n    Integrate 1D or ND system of ODEs using 4-th order Runge-Kutta.\n    This is a toy implementation which may be useful if you find\n    yourself stranded on a system w/o scipy.  Otherwise use\n    :func:`scipy.integrate`.\n\n    Parameters\n    ----------\n    y0\n        initial state vector\n\n    t\n        sample times\n\n    derivs\n        returns the derivative of the system and has the\n        signature ``dy = derivs(yi, ti)``\n\n    Examples\n    --------\n\n    A 2D system::\n\n        def derivs6(x,t):\n            d1 =  x[0] + 2*x[1]\n            d2 =  -3*x[0] + 4*x[1]\n            return (d1, d2)\n        dt = 0.0005\n        t = arange(0.0, 2.0, dt)\n        y0 = (1,2)\n        yout = rk4(derivs6, y0, t)\n\n    A 1D system::\n\n        alpha = 2\n        def derivs(x,t):\n            return -alpha*x + exp(-t)\n\n        y0 = 1\n        yout = rk4(derivs, y0, t)\n\n    If you have access to scipy, you should probably be using the\n    scipy.integrate tools rather than this function.\n    ')
    
    
    # SSA begins for try-except statement (line 1846)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1847):
    
    # Assigning a Call to a Name (line 1847):
    
    # Assigning a Call to a Name (line 1847):
    
    # Call to len(...): (line 1847)
    # Processing the call arguments (line 1847)
    # Getting the type of 'y0' (line 1847)
    y0_90240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 17), 'y0', False)
    # Processing the call keyword arguments (line 1847)
    kwargs_90241 = {}
    # Getting the type of 'len' (line 1847)
    len_90239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 13), 'len', False)
    # Calling len(args, kwargs) (line 1847)
    len_call_result_90242 = invoke(stypy.reporting.localization.Localization(__file__, 1847, 13), len_90239, *[y0_90240], **kwargs_90241)
    
    # Assigning a type to the variable 'Ny' (line 1847)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1847, 8), 'Ny', len_call_result_90242)
    # SSA branch for the except part of a try statement (line 1846)
    # SSA branch for the except 'TypeError' branch of a try statement (line 1846)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 1849):
    
    # Assigning a Call to a Name (line 1849):
    
    # Assigning a Call to a Name (line 1849):
    
    # Call to zeros(...): (line 1849)
    # Processing the call arguments (line 1849)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1849)
    tuple_90245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1849)
    # Adding element type (line 1849)
    
    # Call to len(...): (line 1849)
    # Processing the call arguments (line 1849)
    # Getting the type of 't' (line 1849)
    t_90247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 29), 't', False)
    # Processing the call keyword arguments (line 1849)
    kwargs_90248 = {}
    # Getting the type of 'len' (line 1849)
    len_90246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 25), 'len', False)
    # Calling len(args, kwargs) (line 1849)
    len_call_result_90249 = invoke(stypy.reporting.localization.Localization(__file__, 1849, 25), len_90246, *[t_90247], **kwargs_90248)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 25), tuple_90245, len_call_result_90249)
    
    # Getting the type of 'float' (line 1849)
    float_90250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 35), 'float', False)
    # Processing the call keyword arguments (line 1849)
    kwargs_90251 = {}
    # Getting the type of 'np' (line 1849)
    np_90243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 15), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1849)
    zeros_90244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 15), np_90243, 'zeros')
    # Calling zeros(args, kwargs) (line 1849)
    zeros_call_result_90252 = invoke(stypy.reporting.localization.Localization(__file__, 1849, 15), zeros_90244, *[tuple_90245, float_90250], **kwargs_90251)
    
    # Assigning a type to the variable 'yout' (line 1849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 8), 'yout', zeros_call_result_90252)
    # SSA branch for the else branch of a try statement (line 1846)
    module_type_store.open_ssa_branch('except else')
    
    # Assigning a Call to a Name (line 1851):
    
    # Assigning a Call to a Name (line 1851):
    
    # Assigning a Call to a Name (line 1851):
    
    # Call to zeros(...): (line 1851)
    # Processing the call arguments (line 1851)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1851)
    tuple_90255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1851, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1851)
    # Adding element type (line 1851)
    
    # Call to len(...): (line 1851)
    # Processing the call arguments (line 1851)
    # Getting the type of 't' (line 1851)
    t_90257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 29), 't', False)
    # Processing the call keyword arguments (line 1851)
    kwargs_90258 = {}
    # Getting the type of 'len' (line 1851)
    len_90256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 25), 'len', False)
    # Calling len(args, kwargs) (line 1851)
    len_call_result_90259 = invoke(stypy.reporting.localization.Localization(__file__, 1851, 25), len_90256, *[t_90257], **kwargs_90258)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1851, 25), tuple_90255, len_call_result_90259)
    # Adding element type (line 1851)
    # Getting the type of 'Ny' (line 1851)
    Ny_90260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 33), 'Ny', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1851, 25), tuple_90255, Ny_90260)
    
    # Getting the type of 'float' (line 1851)
    float_90261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 38), 'float', False)
    # Processing the call keyword arguments (line 1851)
    kwargs_90262 = {}
    # Getting the type of 'np' (line 1851)
    np_90253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 15), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1851)
    zeros_90254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1851, 15), np_90253, 'zeros')
    # Calling zeros(args, kwargs) (line 1851)
    zeros_call_result_90263 = invoke(stypy.reporting.localization.Localization(__file__, 1851, 15), zeros_90254, *[tuple_90255, float_90261], **kwargs_90262)
    
    # Assigning a type to the variable 'yout' (line 1851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 8), 'yout', zeros_call_result_90263)
    # SSA join for try-except statement (line 1846)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Subscript (line 1853):
    
    # Assigning a Name to a Subscript (line 1853):
    
    # Assigning a Name to a Subscript (line 1853):
    # Getting the type of 'y0' (line 1853)
    y0_90264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 14), 'y0')
    # Getting the type of 'yout' (line 1853)
    yout_90265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 4), 'yout')
    int_90266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1853, 9), 'int')
    # Storing an element on a container (line 1853)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1853, 4), yout_90265, (int_90266, y0_90264))
    
    # Assigning a Num to a Name (line 1854):
    
    # Assigning a Num to a Name (line 1854):
    
    # Assigning a Num to a Name (line 1854):
    int_90267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 8), 'int')
    # Assigning a type to the variable 'i' (line 1854)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 4), 'i', int_90267)
    
    
    # Call to arange(...): (line 1856)
    # Processing the call arguments (line 1856)
    
    # Call to len(...): (line 1856)
    # Processing the call arguments (line 1856)
    # Getting the type of 't' (line 1856)
    t_90271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 27), 't', False)
    # Processing the call keyword arguments (line 1856)
    kwargs_90272 = {}
    # Getting the type of 'len' (line 1856)
    len_90270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 23), 'len', False)
    # Calling len(args, kwargs) (line 1856)
    len_call_result_90273 = invoke(stypy.reporting.localization.Localization(__file__, 1856, 23), len_90270, *[t_90271], **kwargs_90272)
    
    int_90274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1856, 30), 'int')
    # Applying the binary operator '-' (line 1856)
    result_sub_90275 = python_operator(stypy.reporting.localization.Localization(__file__, 1856, 23), '-', len_call_result_90273, int_90274)
    
    # Processing the call keyword arguments (line 1856)
    kwargs_90276 = {}
    # Getting the type of 'np' (line 1856)
    np_90268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 13), 'np', False)
    # Obtaining the member 'arange' of a type (line 1856)
    arange_90269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1856, 13), np_90268, 'arange')
    # Calling arange(args, kwargs) (line 1856)
    arange_call_result_90277 = invoke(stypy.reporting.localization.Localization(__file__, 1856, 13), arange_90269, *[result_sub_90275], **kwargs_90276)
    
    # Testing the type of a for loop iterable (line 1856)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1856, 4), arange_call_result_90277)
    # Getting the type of the for loop variable (line 1856)
    for_loop_var_90278 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1856, 4), arange_call_result_90277)
    # Assigning a type to the variable 'i' (line 1856)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1856, 4), 'i', for_loop_var_90278)
    # SSA begins for a for statement (line 1856)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 1858):
    
    # Assigning a Subscript to a Name (line 1858):
    
    # Assigning a Subscript to a Name (line 1858):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1858)
    i_90279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 18), 'i')
    # Getting the type of 't' (line 1858)
    t_90280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 16), 't')
    # Obtaining the member '__getitem__' of a type (line 1858)
    getitem___90281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1858, 16), t_90280, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1858)
    subscript_call_result_90282 = invoke(stypy.reporting.localization.Localization(__file__, 1858, 16), getitem___90281, i_90279)
    
    # Assigning a type to the variable 'thist' (line 1858)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1858, 8), 'thist', subscript_call_result_90282)
    
    # Assigning a BinOp to a Name (line 1859):
    
    # Assigning a BinOp to a Name (line 1859):
    
    # Assigning a BinOp to a Name (line 1859):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1859)
    i_90283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 15), 'i')
    int_90284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1859, 17), 'int')
    # Applying the binary operator '+' (line 1859)
    result_add_90285 = python_operator(stypy.reporting.localization.Localization(__file__, 1859, 15), '+', i_90283, int_90284)
    
    # Getting the type of 't' (line 1859)
    t_90286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 13), 't')
    # Obtaining the member '__getitem__' of a type (line 1859)
    getitem___90287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1859, 13), t_90286, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1859)
    subscript_call_result_90288 = invoke(stypy.reporting.localization.Localization(__file__, 1859, 13), getitem___90287, result_add_90285)
    
    # Getting the type of 'thist' (line 1859)
    thist_90289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 22), 'thist')
    # Applying the binary operator '-' (line 1859)
    result_sub_90290 = python_operator(stypy.reporting.localization.Localization(__file__, 1859, 13), '-', subscript_call_result_90288, thist_90289)
    
    # Assigning a type to the variable 'dt' (line 1859)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1859, 8), 'dt', result_sub_90290)
    
    # Assigning a BinOp to a Name (line 1860):
    
    # Assigning a BinOp to a Name (line 1860):
    
    # Assigning a BinOp to a Name (line 1860):
    # Getting the type of 'dt' (line 1860)
    dt_90291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1860, 14), 'dt')
    float_90292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1860, 17), 'float')
    # Applying the binary operator 'div' (line 1860)
    result_div_90293 = python_operator(stypy.reporting.localization.Localization(__file__, 1860, 14), 'div', dt_90291, float_90292)
    
    # Assigning a type to the variable 'dt2' (line 1860)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1860, 8), 'dt2', result_div_90293)
    
    # Assigning a Subscript to a Name (line 1861):
    
    # Assigning a Subscript to a Name (line 1861):
    
    # Assigning a Subscript to a Name (line 1861):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1861)
    i_90294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 18), 'i')
    # Getting the type of 'yout' (line 1861)
    yout_90295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 13), 'yout')
    # Obtaining the member '__getitem__' of a type (line 1861)
    getitem___90296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1861, 13), yout_90295, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1861)
    subscript_call_result_90297 = invoke(stypy.reporting.localization.Localization(__file__, 1861, 13), getitem___90296, i_90294)
    
    # Assigning a type to the variable 'y0' (line 1861)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1861, 8), 'y0', subscript_call_result_90297)
    
    # Assigning a Call to a Name (line 1863):
    
    # Assigning a Call to a Name (line 1863):
    
    # Assigning a Call to a Name (line 1863):
    
    # Call to asarray(...): (line 1863)
    # Processing the call arguments (line 1863)
    
    # Call to derivs(...): (line 1863)
    # Processing the call arguments (line 1863)
    # Getting the type of 'y0' (line 1863)
    y0_90301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 31), 'y0', False)
    # Getting the type of 'thist' (line 1863)
    thist_90302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 35), 'thist', False)
    # Processing the call keyword arguments (line 1863)
    kwargs_90303 = {}
    # Getting the type of 'derivs' (line 1863)
    derivs_90300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 24), 'derivs', False)
    # Calling derivs(args, kwargs) (line 1863)
    derivs_call_result_90304 = invoke(stypy.reporting.localization.Localization(__file__, 1863, 24), derivs_90300, *[y0_90301, thist_90302], **kwargs_90303)
    
    # Processing the call keyword arguments (line 1863)
    kwargs_90305 = {}
    # Getting the type of 'np' (line 1863)
    np_90298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 13), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1863)
    asarray_90299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1863, 13), np_90298, 'asarray')
    # Calling asarray(args, kwargs) (line 1863)
    asarray_call_result_90306 = invoke(stypy.reporting.localization.Localization(__file__, 1863, 13), asarray_90299, *[derivs_call_result_90304], **kwargs_90305)
    
    # Assigning a type to the variable 'k1' (line 1863)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1863, 8), 'k1', asarray_call_result_90306)
    
    # Assigning a Call to a Name (line 1864):
    
    # Assigning a Call to a Name (line 1864):
    
    # Assigning a Call to a Name (line 1864):
    
    # Call to asarray(...): (line 1864)
    # Processing the call arguments (line 1864)
    
    # Call to derivs(...): (line 1864)
    # Processing the call arguments (line 1864)
    # Getting the type of 'y0' (line 1864)
    y0_90310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 31), 'y0', False)
    # Getting the type of 'dt2' (line 1864)
    dt2_90311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 36), 'dt2', False)
    # Getting the type of 'k1' (line 1864)
    k1_90312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 40), 'k1', False)
    # Applying the binary operator '*' (line 1864)
    result_mul_90313 = python_operator(stypy.reporting.localization.Localization(__file__, 1864, 36), '*', dt2_90311, k1_90312)
    
    # Applying the binary operator '+' (line 1864)
    result_add_90314 = python_operator(stypy.reporting.localization.Localization(__file__, 1864, 31), '+', y0_90310, result_mul_90313)
    
    # Getting the type of 'thist' (line 1864)
    thist_90315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 44), 'thist', False)
    # Getting the type of 'dt2' (line 1864)
    dt2_90316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 50), 'dt2', False)
    # Applying the binary operator '+' (line 1864)
    result_add_90317 = python_operator(stypy.reporting.localization.Localization(__file__, 1864, 44), '+', thist_90315, dt2_90316)
    
    # Processing the call keyword arguments (line 1864)
    kwargs_90318 = {}
    # Getting the type of 'derivs' (line 1864)
    derivs_90309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 24), 'derivs', False)
    # Calling derivs(args, kwargs) (line 1864)
    derivs_call_result_90319 = invoke(stypy.reporting.localization.Localization(__file__, 1864, 24), derivs_90309, *[result_add_90314, result_add_90317], **kwargs_90318)
    
    # Processing the call keyword arguments (line 1864)
    kwargs_90320 = {}
    # Getting the type of 'np' (line 1864)
    np_90307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 13), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1864)
    asarray_90308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1864, 13), np_90307, 'asarray')
    # Calling asarray(args, kwargs) (line 1864)
    asarray_call_result_90321 = invoke(stypy.reporting.localization.Localization(__file__, 1864, 13), asarray_90308, *[derivs_call_result_90319], **kwargs_90320)
    
    # Assigning a type to the variable 'k2' (line 1864)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1864, 8), 'k2', asarray_call_result_90321)
    
    # Assigning a Call to a Name (line 1865):
    
    # Assigning a Call to a Name (line 1865):
    
    # Assigning a Call to a Name (line 1865):
    
    # Call to asarray(...): (line 1865)
    # Processing the call arguments (line 1865)
    
    # Call to derivs(...): (line 1865)
    # Processing the call arguments (line 1865)
    # Getting the type of 'y0' (line 1865)
    y0_90325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 31), 'y0', False)
    # Getting the type of 'dt2' (line 1865)
    dt2_90326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 36), 'dt2', False)
    # Getting the type of 'k2' (line 1865)
    k2_90327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 40), 'k2', False)
    # Applying the binary operator '*' (line 1865)
    result_mul_90328 = python_operator(stypy.reporting.localization.Localization(__file__, 1865, 36), '*', dt2_90326, k2_90327)
    
    # Applying the binary operator '+' (line 1865)
    result_add_90329 = python_operator(stypy.reporting.localization.Localization(__file__, 1865, 31), '+', y0_90325, result_mul_90328)
    
    # Getting the type of 'thist' (line 1865)
    thist_90330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 44), 'thist', False)
    # Getting the type of 'dt2' (line 1865)
    dt2_90331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 50), 'dt2', False)
    # Applying the binary operator '+' (line 1865)
    result_add_90332 = python_operator(stypy.reporting.localization.Localization(__file__, 1865, 44), '+', thist_90330, dt2_90331)
    
    # Processing the call keyword arguments (line 1865)
    kwargs_90333 = {}
    # Getting the type of 'derivs' (line 1865)
    derivs_90324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 24), 'derivs', False)
    # Calling derivs(args, kwargs) (line 1865)
    derivs_call_result_90334 = invoke(stypy.reporting.localization.Localization(__file__, 1865, 24), derivs_90324, *[result_add_90329, result_add_90332], **kwargs_90333)
    
    # Processing the call keyword arguments (line 1865)
    kwargs_90335 = {}
    # Getting the type of 'np' (line 1865)
    np_90322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 13), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1865)
    asarray_90323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1865, 13), np_90322, 'asarray')
    # Calling asarray(args, kwargs) (line 1865)
    asarray_call_result_90336 = invoke(stypy.reporting.localization.Localization(__file__, 1865, 13), asarray_90323, *[derivs_call_result_90334], **kwargs_90335)
    
    # Assigning a type to the variable 'k3' (line 1865)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1865, 8), 'k3', asarray_call_result_90336)
    
    # Assigning a Call to a Name (line 1866):
    
    # Assigning a Call to a Name (line 1866):
    
    # Assigning a Call to a Name (line 1866):
    
    # Call to asarray(...): (line 1866)
    # Processing the call arguments (line 1866)
    
    # Call to derivs(...): (line 1866)
    # Processing the call arguments (line 1866)
    # Getting the type of 'y0' (line 1866)
    y0_90340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 31), 'y0', False)
    # Getting the type of 'dt' (line 1866)
    dt_90341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 36), 'dt', False)
    # Getting the type of 'k3' (line 1866)
    k3_90342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 39), 'k3', False)
    # Applying the binary operator '*' (line 1866)
    result_mul_90343 = python_operator(stypy.reporting.localization.Localization(__file__, 1866, 36), '*', dt_90341, k3_90342)
    
    # Applying the binary operator '+' (line 1866)
    result_add_90344 = python_operator(stypy.reporting.localization.Localization(__file__, 1866, 31), '+', y0_90340, result_mul_90343)
    
    # Getting the type of 'thist' (line 1866)
    thist_90345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 43), 'thist', False)
    # Getting the type of 'dt' (line 1866)
    dt_90346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 49), 'dt', False)
    # Applying the binary operator '+' (line 1866)
    result_add_90347 = python_operator(stypy.reporting.localization.Localization(__file__, 1866, 43), '+', thist_90345, dt_90346)
    
    # Processing the call keyword arguments (line 1866)
    kwargs_90348 = {}
    # Getting the type of 'derivs' (line 1866)
    derivs_90339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 24), 'derivs', False)
    # Calling derivs(args, kwargs) (line 1866)
    derivs_call_result_90349 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 24), derivs_90339, *[result_add_90344, result_add_90347], **kwargs_90348)
    
    # Processing the call keyword arguments (line 1866)
    kwargs_90350 = {}
    # Getting the type of 'np' (line 1866)
    np_90337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 13), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1866)
    asarray_90338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1866, 13), np_90337, 'asarray')
    # Calling asarray(args, kwargs) (line 1866)
    asarray_call_result_90351 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 13), asarray_90338, *[derivs_call_result_90349], **kwargs_90350)
    
    # Assigning a type to the variable 'k4' (line 1866)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 8), 'k4', asarray_call_result_90351)
    
    # Assigning a BinOp to a Subscript (line 1867):
    
    # Assigning a BinOp to a Subscript (line 1867):
    
    # Assigning a BinOp to a Subscript (line 1867):
    # Getting the type of 'y0' (line 1867)
    y0_90352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 20), 'y0')
    # Getting the type of 'dt' (line 1867)
    dt_90353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 25), 'dt')
    float_90354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1867, 28), 'float')
    # Applying the binary operator 'div' (line 1867)
    result_div_90355 = python_operator(stypy.reporting.localization.Localization(__file__, 1867, 25), 'div', dt_90353, float_90354)
    
    # Getting the type of 'k1' (line 1867)
    k1_90356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 33), 'k1')
    int_90357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1867, 38), 'int')
    # Getting the type of 'k2' (line 1867)
    k2_90358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 40), 'k2')
    # Applying the binary operator '*' (line 1867)
    result_mul_90359 = python_operator(stypy.reporting.localization.Localization(__file__, 1867, 38), '*', int_90357, k2_90358)
    
    # Applying the binary operator '+' (line 1867)
    result_add_90360 = python_operator(stypy.reporting.localization.Localization(__file__, 1867, 33), '+', k1_90356, result_mul_90359)
    
    int_90361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1867, 45), 'int')
    # Getting the type of 'k3' (line 1867)
    k3_90362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 47), 'k3')
    # Applying the binary operator '*' (line 1867)
    result_mul_90363 = python_operator(stypy.reporting.localization.Localization(__file__, 1867, 45), '*', int_90361, k3_90362)
    
    # Applying the binary operator '+' (line 1867)
    result_add_90364 = python_operator(stypy.reporting.localization.Localization(__file__, 1867, 43), '+', result_add_90360, result_mul_90363)
    
    # Getting the type of 'k4' (line 1867)
    k4_90365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 52), 'k4')
    # Applying the binary operator '+' (line 1867)
    result_add_90366 = python_operator(stypy.reporting.localization.Localization(__file__, 1867, 50), '+', result_add_90364, k4_90365)
    
    # Applying the binary operator '*' (line 1867)
    result_mul_90367 = python_operator(stypy.reporting.localization.Localization(__file__, 1867, 31), '*', result_div_90355, result_add_90366)
    
    # Applying the binary operator '+' (line 1867)
    result_add_90368 = python_operator(stypy.reporting.localization.Localization(__file__, 1867, 20), '+', y0_90352, result_mul_90367)
    
    # Getting the type of 'yout' (line 1867)
    yout_90369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 8), 'yout')
    # Getting the type of 'i' (line 1867)
    i_90370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 13), 'i')
    int_90371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1867, 15), 'int')
    # Applying the binary operator '+' (line 1867)
    result_add_90372 = python_operator(stypy.reporting.localization.Localization(__file__, 1867, 13), '+', i_90370, int_90371)
    
    # Storing an element on a container (line 1867)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1867, 8), yout_90369, (result_add_90372, result_add_90368))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'yout' (line 1868)
    yout_90373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 11), 'yout')
    # Assigning a type to the variable 'stypy_return_type' (line 1868)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 4), 'stypy_return_type', yout_90373)
    
    # ################# End of 'rk4(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rk4' in the type store
    # Getting the type of 'stypy_return_type' (line 1800)
    stypy_return_type_90374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_90374)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rk4'
    return stypy_return_type_90374

# Assigning a type to the variable 'rk4' (line 1800)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 0), 'rk4', rk4)

@norecursion
def bivariate_normal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_90375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, 34), 'float')
    float_90376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, 46), 'float')
    float_90377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1872, 25), 'float')
    float_90378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1872, 34), 'float')
    float_90379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1872, 47), 'float')
    defaults = [float_90375, float_90376, float_90377, float_90378, float_90379]
    # Create a new context for function 'bivariate_normal'
    module_type_store = module_type_store.open_function_context('bivariate_normal', 1871, 0, False)
    
    # Passed parameters checking function
    bivariate_normal.stypy_localization = localization
    bivariate_normal.stypy_type_of_self = None
    bivariate_normal.stypy_type_store = module_type_store
    bivariate_normal.stypy_function_name = 'bivariate_normal'
    bivariate_normal.stypy_param_names_list = ['X', 'Y', 'sigmax', 'sigmay', 'mux', 'muy', 'sigmaxy']
    bivariate_normal.stypy_varargs_param_name = None
    bivariate_normal.stypy_kwargs_param_name = None
    bivariate_normal.stypy_call_defaults = defaults
    bivariate_normal.stypy_call_varargs = varargs
    bivariate_normal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'bivariate_normal', ['X', 'Y', 'sigmax', 'sigmay', 'mux', 'muy', 'sigmaxy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'bivariate_normal', localization, ['X', 'Y', 'sigmax', 'sigmay', 'mux', 'muy', 'sigmaxy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'bivariate_normal(...)' code ##################

    unicode_90380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1879, (-1)), 'unicode', u'\n    Bivariate Gaussian distribution for equal shape *X*, *Y*.\n\n    See `bivariate normal\n    <http://mathworld.wolfram.com/BivariateNormalDistribution.html>`_\n    at mathworld.\n    ')
    
    # Assigning a BinOp to a Name (line 1880):
    
    # Assigning a BinOp to a Name (line 1880):
    
    # Assigning a BinOp to a Name (line 1880):
    # Getting the type of 'X' (line 1880)
    X_90381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 10), 'X')
    # Getting the type of 'mux' (line 1880)
    mux_90382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 12), 'mux')
    # Applying the binary operator '-' (line 1880)
    result_sub_90383 = python_operator(stypy.reporting.localization.Localization(__file__, 1880, 10), '-', X_90381, mux_90382)
    
    # Assigning a type to the variable 'Xmu' (line 1880)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1880, 4), 'Xmu', result_sub_90383)
    
    # Assigning a BinOp to a Name (line 1881):
    
    # Assigning a BinOp to a Name (line 1881):
    
    # Assigning a BinOp to a Name (line 1881):
    # Getting the type of 'Y' (line 1881)
    Y_90384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 10), 'Y')
    # Getting the type of 'muy' (line 1881)
    muy_90385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 12), 'muy')
    # Applying the binary operator '-' (line 1881)
    result_sub_90386 = python_operator(stypy.reporting.localization.Localization(__file__, 1881, 10), '-', Y_90384, muy_90385)
    
    # Assigning a type to the variable 'Ymu' (line 1881)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1881, 4), 'Ymu', result_sub_90386)
    
    # Assigning a BinOp to a Name (line 1883):
    
    # Assigning a BinOp to a Name (line 1883):
    
    # Assigning a BinOp to a Name (line 1883):
    # Getting the type of 'sigmaxy' (line 1883)
    sigmaxy_90387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1883, 10), 'sigmaxy')
    # Getting the type of 'sigmax' (line 1883)
    sigmax_90388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1883, 19), 'sigmax')
    # Getting the type of 'sigmay' (line 1883)
    sigmay_90389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1883, 26), 'sigmay')
    # Applying the binary operator '*' (line 1883)
    result_mul_90390 = python_operator(stypy.reporting.localization.Localization(__file__, 1883, 19), '*', sigmax_90388, sigmay_90389)
    
    # Applying the binary operator 'div' (line 1883)
    result_div_90391 = python_operator(stypy.reporting.localization.Localization(__file__, 1883, 10), 'div', sigmaxy_90387, result_mul_90390)
    
    # Assigning a type to the variable 'rho' (line 1883)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1883, 4), 'rho', result_div_90391)
    
    # Assigning a BinOp to a Name (line 1884):
    
    # Assigning a BinOp to a Name (line 1884):
    
    # Assigning a BinOp to a Name (line 1884):
    # Getting the type of 'Xmu' (line 1884)
    Xmu_90392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 8), 'Xmu')
    int_90393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1884, 13), 'int')
    # Applying the binary operator '**' (line 1884)
    result_pow_90394 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 8), '**', Xmu_90392, int_90393)
    
    # Getting the type of 'sigmax' (line 1884)
    sigmax_90395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 15), 'sigmax')
    int_90396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1884, 23), 'int')
    # Applying the binary operator '**' (line 1884)
    result_pow_90397 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 15), '**', sigmax_90395, int_90396)
    
    # Applying the binary operator 'div' (line 1884)
    result_div_90398 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 8), 'div', result_pow_90394, result_pow_90397)
    
    # Getting the type of 'Ymu' (line 1884)
    Ymu_90399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 27), 'Ymu')
    int_90400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1884, 32), 'int')
    # Applying the binary operator '**' (line 1884)
    result_pow_90401 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 27), '**', Ymu_90399, int_90400)
    
    # Getting the type of 'sigmay' (line 1884)
    sigmay_90402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 34), 'sigmay')
    int_90403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1884, 42), 'int')
    # Applying the binary operator '**' (line 1884)
    result_pow_90404 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 34), '**', sigmay_90402, int_90403)
    
    # Applying the binary operator 'div' (line 1884)
    result_div_90405 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 27), 'div', result_pow_90401, result_pow_90404)
    
    # Applying the binary operator '+' (line 1884)
    result_add_90406 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 8), '+', result_div_90398, result_div_90405)
    
    int_90407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1884, 46), 'int')
    # Getting the type of 'rho' (line 1884)
    rho_90408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 48), 'rho')
    # Applying the binary operator '*' (line 1884)
    result_mul_90409 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 46), '*', int_90407, rho_90408)
    
    # Getting the type of 'Xmu' (line 1884)
    Xmu_90410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 52), 'Xmu')
    # Applying the binary operator '*' (line 1884)
    result_mul_90411 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 51), '*', result_mul_90409, Xmu_90410)
    
    # Getting the type of 'Ymu' (line 1884)
    Ymu_90412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 56), 'Ymu')
    # Applying the binary operator '*' (line 1884)
    result_mul_90413 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 55), '*', result_mul_90411, Ymu_90412)
    
    # Getting the type of 'sigmax' (line 1884)
    sigmax_90414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 61), 'sigmax')
    # Getting the type of 'sigmay' (line 1884)
    sigmay_90415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 68), 'sigmay')
    # Applying the binary operator '*' (line 1884)
    result_mul_90416 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 61), '*', sigmax_90414, sigmay_90415)
    
    # Applying the binary operator 'div' (line 1884)
    result_div_90417 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 59), 'div', result_mul_90413, result_mul_90416)
    
    # Applying the binary operator '-' (line 1884)
    result_sub_90418 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 44), '-', result_add_90406, result_div_90417)
    
    # Assigning a type to the variable 'z' (line 1884)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1884, 4), 'z', result_sub_90418)
    
    # Assigning a BinOp to a Name (line 1885):
    
    # Assigning a BinOp to a Name (line 1885):
    
    # Assigning a BinOp to a Name (line 1885):
    int_90419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1885, 12), 'int')
    # Getting the type of 'np' (line 1885)
    np_90420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 14), 'np')
    # Obtaining the member 'pi' of a type (line 1885)
    pi_90421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1885, 14), np_90420, 'pi')
    # Applying the binary operator '*' (line 1885)
    result_mul_90422 = python_operator(stypy.reporting.localization.Localization(__file__, 1885, 12), '*', int_90419, pi_90421)
    
    # Getting the type of 'sigmax' (line 1885)
    sigmax_90423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 20), 'sigmax')
    # Applying the binary operator '*' (line 1885)
    result_mul_90424 = python_operator(stypy.reporting.localization.Localization(__file__, 1885, 19), '*', result_mul_90422, sigmax_90423)
    
    # Getting the type of 'sigmay' (line 1885)
    sigmay_90425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 27), 'sigmay')
    # Applying the binary operator '*' (line 1885)
    result_mul_90426 = python_operator(stypy.reporting.localization.Localization(__file__, 1885, 26), '*', result_mul_90424, sigmay_90425)
    
    
    # Call to sqrt(...): (line 1885)
    # Processing the call arguments (line 1885)
    int_90429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1885, 42), 'int')
    # Getting the type of 'rho' (line 1885)
    rho_90430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 44), 'rho', False)
    int_90431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1885, 49), 'int')
    # Applying the binary operator '**' (line 1885)
    result_pow_90432 = python_operator(stypy.reporting.localization.Localization(__file__, 1885, 44), '**', rho_90430, int_90431)
    
    # Applying the binary operator '-' (line 1885)
    result_sub_90433 = python_operator(stypy.reporting.localization.Localization(__file__, 1885, 42), '-', int_90429, result_pow_90432)
    
    # Processing the call keyword arguments (line 1885)
    kwargs_90434 = {}
    # Getting the type of 'np' (line 1885)
    np_90427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 34), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 1885)
    sqrt_90428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1885, 34), np_90427, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1885)
    sqrt_call_result_90435 = invoke(stypy.reporting.localization.Localization(__file__, 1885, 34), sqrt_90428, *[result_sub_90433], **kwargs_90434)
    
    # Applying the binary operator '*' (line 1885)
    result_mul_90436 = python_operator(stypy.reporting.localization.Localization(__file__, 1885, 33), '*', result_mul_90426, sqrt_call_result_90435)
    
    # Assigning a type to the variable 'denom' (line 1885)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1885, 4), 'denom', result_mul_90436)
    
    # Call to exp(...): (line 1886)
    # Processing the call arguments (line 1886)
    
    # Getting the type of 'z' (line 1886)
    z_90439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 19), 'z', False)
    # Applying the 'usub' unary operator (line 1886)
    result___neg___90440 = python_operator(stypy.reporting.localization.Localization(__file__, 1886, 18), 'usub', z_90439)
    
    int_90441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1886, 22), 'int')
    int_90442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1886, 25), 'int')
    # Getting the type of 'rho' (line 1886)
    rho_90443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 27), 'rho', False)
    int_90444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1886, 32), 'int')
    # Applying the binary operator '**' (line 1886)
    result_pow_90445 = python_operator(stypy.reporting.localization.Localization(__file__, 1886, 27), '**', rho_90443, int_90444)
    
    # Applying the binary operator '-' (line 1886)
    result_sub_90446 = python_operator(stypy.reporting.localization.Localization(__file__, 1886, 25), '-', int_90442, result_pow_90445)
    
    # Applying the binary operator '*' (line 1886)
    result_mul_90447 = python_operator(stypy.reporting.localization.Localization(__file__, 1886, 22), '*', int_90441, result_sub_90446)
    
    # Applying the binary operator 'div' (line 1886)
    result_div_90448 = python_operator(stypy.reporting.localization.Localization(__file__, 1886, 18), 'div', result___neg___90440, result_mul_90447)
    
    # Processing the call keyword arguments (line 1886)
    kwargs_90449 = {}
    # Getting the type of 'np' (line 1886)
    np_90437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 11), 'np', False)
    # Obtaining the member 'exp' of a type (line 1886)
    exp_90438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1886, 11), np_90437, 'exp')
    # Calling exp(args, kwargs) (line 1886)
    exp_call_result_90450 = invoke(stypy.reporting.localization.Localization(__file__, 1886, 11), exp_90438, *[result_div_90448], **kwargs_90449)
    
    # Getting the type of 'denom' (line 1886)
    denom_90451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 39), 'denom')
    # Applying the binary operator 'div' (line 1886)
    result_div_90452 = python_operator(stypy.reporting.localization.Localization(__file__, 1886, 11), 'div', exp_call_result_90450, denom_90451)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1886)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1886, 4), 'stypy_return_type', result_div_90452)
    
    # ################# End of 'bivariate_normal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'bivariate_normal' in the type store
    # Getting the type of 'stypy_return_type' (line 1871)
    stypy_return_type_90453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_90453)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'bivariate_normal'
    return stypy_return_type_90453

# Assigning a type to the variable 'bivariate_normal' (line 1871)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 0), 'bivariate_normal', bivariate_normal)

@norecursion
def get_xyz_where(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_xyz_where'
    module_type_store = module_type_store.open_function_context('get_xyz_where', 1889, 0, False)
    
    # Passed parameters checking function
    get_xyz_where.stypy_localization = localization
    get_xyz_where.stypy_type_of_self = None
    get_xyz_where.stypy_type_store = module_type_store
    get_xyz_where.stypy_function_name = 'get_xyz_where'
    get_xyz_where.stypy_param_names_list = ['Z', 'Cond']
    get_xyz_where.stypy_varargs_param_name = None
    get_xyz_where.stypy_kwargs_param_name = None
    get_xyz_where.stypy_call_defaults = defaults
    get_xyz_where.stypy_call_varargs = varargs
    get_xyz_where.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_xyz_where', ['Z', 'Cond'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_xyz_where', localization, ['Z', 'Cond'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_xyz_where(...)' code ##################

    unicode_90454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1896, (-1)), 'unicode', u'\n    *Z* and *Cond* are *M* x *N* matrices.  *Z* are data and *Cond* is\n    a boolean matrix where some condition is satisfied.  Return value\n    is (*x*, *y*, *z*) where *x* and *y* are the indices into *Z* and\n    *z* are the values of *Z* at those indices.  *x*, *y*, and *z* are\n    1D arrays.\n    ')
    
    # Assigning a Call to a Tuple (line 1897):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to indices(...): (line 1897)
    # Processing the call arguments (line 1897)
    # Getting the type of 'Z' (line 1897)
    Z_90457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 22), 'Z', False)
    # Obtaining the member 'shape' of a type (line 1897)
    shape_90458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1897, 22), Z_90457, 'shape')
    # Processing the call keyword arguments (line 1897)
    kwargs_90459 = {}
    # Getting the type of 'np' (line 1897)
    np_90455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 11), 'np', False)
    # Obtaining the member 'indices' of a type (line 1897)
    indices_90456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1897, 11), np_90455, 'indices')
    # Calling indices(args, kwargs) (line 1897)
    indices_call_result_90460 = invoke(stypy.reporting.localization.Localization(__file__, 1897, 11), indices_90456, *[shape_90458], **kwargs_90459)
    
    # Assigning a type to the variable 'call_assignment_87270' (line 1897)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1897, 4), 'call_assignment_87270', indices_call_result_90460)
    
    # Assigning a Call to a Name (line 1897):
    
    # Assigning a Call to a Name (line 1897):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_90463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1897, 4), 'int')
    # Processing the call keyword arguments
    kwargs_90464 = {}
    # Getting the type of 'call_assignment_87270' (line 1897)
    call_assignment_87270_90461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 4), 'call_assignment_87270', False)
    # Obtaining the member '__getitem__' of a type (line 1897)
    getitem___90462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1897, 4), call_assignment_87270_90461, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_90465 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___90462, *[int_90463], **kwargs_90464)
    
    # Assigning a type to the variable 'call_assignment_87271' (line 1897)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1897, 4), 'call_assignment_87271', getitem___call_result_90465)
    
    # Assigning a Name to a Name (line 1897):
    
    # Assigning a Name to a Name (line 1897):
    # Getting the type of 'call_assignment_87271' (line 1897)
    call_assignment_87271_90466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 4), 'call_assignment_87271')
    # Assigning a type to the variable 'X' (line 1897)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1897, 4), 'X', call_assignment_87271_90466)
    
    # Assigning a Call to a Name (line 1897):
    
    # Assigning a Call to a Name (line 1897):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_90469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1897, 4), 'int')
    # Processing the call keyword arguments
    kwargs_90470 = {}
    # Getting the type of 'call_assignment_87270' (line 1897)
    call_assignment_87270_90467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 4), 'call_assignment_87270', False)
    # Obtaining the member '__getitem__' of a type (line 1897)
    getitem___90468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1897, 4), call_assignment_87270_90467, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_90471 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___90468, *[int_90469], **kwargs_90470)
    
    # Assigning a type to the variable 'call_assignment_87272' (line 1897)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1897, 4), 'call_assignment_87272', getitem___call_result_90471)
    
    # Assigning a Name to a Name (line 1897):
    
    # Assigning a Name to a Name (line 1897):
    # Getting the type of 'call_assignment_87272' (line 1897)
    call_assignment_87272_90472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 4), 'call_assignment_87272')
    # Assigning a type to the variable 'Y' (line 1897)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1897, 7), 'Y', call_assignment_87272_90472)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1898)
    tuple_90473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1898, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1898)
    # Adding element type (line 1898)
    
    # Obtaining the type of the subscript
    # Getting the type of 'Cond' (line 1898)
    Cond_90474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 13), 'Cond')
    # Getting the type of 'X' (line 1898)
    X_90475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 11), 'X')
    # Obtaining the member '__getitem__' of a type (line 1898)
    getitem___90476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1898, 11), X_90475, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1898)
    subscript_call_result_90477 = invoke(stypy.reporting.localization.Localization(__file__, 1898, 11), getitem___90476, Cond_90474)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1898, 11), tuple_90473, subscript_call_result_90477)
    # Adding element type (line 1898)
    
    # Obtaining the type of the subscript
    # Getting the type of 'Cond' (line 1898)
    Cond_90478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 22), 'Cond')
    # Getting the type of 'Y' (line 1898)
    Y_90479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 20), 'Y')
    # Obtaining the member '__getitem__' of a type (line 1898)
    getitem___90480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1898, 20), Y_90479, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1898)
    subscript_call_result_90481 = invoke(stypy.reporting.localization.Localization(__file__, 1898, 20), getitem___90480, Cond_90478)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1898, 11), tuple_90473, subscript_call_result_90481)
    # Adding element type (line 1898)
    
    # Obtaining the type of the subscript
    # Getting the type of 'Cond' (line 1898)
    Cond_90482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 31), 'Cond')
    # Getting the type of 'Z' (line 1898)
    Z_90483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 29), 'Z')
    # Obtaining the member '__getitem__' of a type (line 1898)
    getitem___90484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1898, 29), Z_90483, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1898)
    subscript_call_result_90485 = invoke(stypy.reporting.localization.Localization(__file__, 1898, 29), getitem___90484, Cond_90482)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1898, 11), tuple_90473, subscript_call_result_90485)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1898)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1898, 4), 'stypy_return_type', tuple_90473)
    
    # ################# End of 'get_xyz_where(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_xyz_where' in the type store
    # Getting the type of 'stypy_return_type' (line 1889)
    stypy_return_type_90486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_90486)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_xyz_where'
    return stypy_return_type_90486

# Assigning a type to the variable 'get_xyz_where' (line 1889)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1889, 0), 'get_xyz_where', get_xyz_where)

@norecursion
def get_sparse_matrix(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_90487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1901, 33), 'float')
    defaults = [float_90487]
    # Create a new context for function 'get_sparse_matrix'
    module_type_store = module_type_store.open_function_context('get_sparse_matrix', 1901, 0, False)
    
    # Passed parameters checking function
    get_sparse_matrix.stypy_localization = localization
    get_sparse_matrix.stypy_type_of_self = None
    get_sparse_matrix.stypy_type_store = module_type_store
    get_sparse_matrix.stypy_function_name = 'get_sparse_matrix'
    get_sparse_matrix.stypy_param_names_list = ['M', 'N', 'frac']
    get_sparse_matrix.stypy_varargs_param_name = None
    get_sparse_matrix.stypy_kwargs_param_name = None
    get_sparse_matrix.stypy_call_defaults = defaults
    get_sparse_matrix.stypy_call_varargs = varargs
    get_sparse_matrix.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_sparse_matrix', ['M', 'N', 'frac'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_sparse_matrix', localization, ['M', 'N', 'frac'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_sparse_matrix(...)' code ##################

    unicode_90488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1905, (-1)), 'unicode', u'\n    Return a *M* x *N* sparse matrix with *frac* elements randomly\n    filled.\n    ')
    
    # Assigning a BinOp to a Name (line 1906):
    
    # Assigning a BinOp to a Name (line 1906):
    
    # Assigning a BinOp to a Name (line 1906):
    
    # Call to zeros(...): (line 1906)
    # Processing the call arguments (line 1906)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1906)
    tuple_90491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1906, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1906)
    # Adding element type (line 1906)
    # Getting the type of 'M' (line 1906)
    M_90492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 21), 'M', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1906, 21), tuple_90491, M_90492)
    # Adding element type (line 1906)
    # Getting the type of 'N' (line 1906)
    N_90493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 24), 'N', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1906, 21), tuple_90491, N_90493)
    
    # Processing the call keyword arguments (line 1906)
    kwargs_90494 = {}
    # Getting the type of 'np' (line 1906)
    np_90489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 11), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1906)
    zeros_90490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1906, 11), np_90489, 'zeros')
    # Calling zeros(args, kwargs) (line 1906)
    zeros_call_result_90495 = invoke(stypy.reporting.localization.Localization(__file__, 1906, 11), zeros_90490, *[tuple_90491], **kwargs_90494)
    
    float_90496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1906, 28), 'float')
    # Applying the binary operator '*' (line 1906)
    result_mul_90497 = python_operator(stypy.reporting.localization.Localization(__file__, 1906, 11), '*', zeros_call_result_90495, float_90496)
    
    # Assigning a type to the variable 'data' (line 1906)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1906, 4), 'data', result_mul_90497)
    
    
    # Call to range(...): (line 1907)
    # Processing the call arguments (line 1907)
    
    # Call to int(...): (line 1907)
    # Processing the call arguments (line 1907)
    # Getting the type of 'M' (line 1907)
    M_90500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 23), 'M', False)
    # Getting the type of 'N' (line 1907)
    N_90501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 25), 'N', False)
    # Applying the binary operator '*' (line 1907)
    result_mul_90502 = python_operator(stypy.reporting.localization.Localization(__file__, 1907, 23), '*', M_90500, N_90501)
    
    # Getting the type of 'frac' (line 1907)
    frac_90503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 27), 'frac', False)
    # Applying the binary operator '*' (line 1907)
    result_mul_90504 = python_operator(stypy.reporting.localization.Localization(__file__, 1907, 26), '*', result_mul_90502, frac_90503)
    
    # Processing the call keyword arguments (line 1907)
    kwargs_90505 = {}
    # Getting the type of 'int' (line 1907)
    int_90499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 19), 'int', False)
    # Calling int(args, kwargs) (line 1907)
    int_call_result_90506 = invoke(stypy.reporting.localization.Localization(__file__, 1907, 19), int_90499, *[result_mul_90504], **kwargs_90505)
    
    # Processing the call keyword arguments (line 1907)
    kwargs_90507 = {}
    # Getting the type of 'range' (line 1907)
    range_90498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 13), 'range', False)
    # Calling range(args, kwargs) (line 1907)
    range_call_result_90508 = invoke(stypy.reporting.localization.Localization(__file__, 1907, 13), range_90498, *[int_call_result_90506], **kwargs_90507)
    
    # Testing the type of a for loop iterable (line 1907)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1907, 4), range_call_result_90508)
    # Getting the type of the for loop variable (line 1907)
    for_loop_var_90509 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1907, 4), range_call_result_90508)
    # Assigning a type to the variable 'i' (line 1907)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1907, 4), 'i', for_loop_var_90509)
    # SSA begins for a for statement (line 1907)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1908):
    
    # Assigning a Call to a Name (line 1908):
    
    # Assigning a Call to a Name (line 1908):
    
    # Call to randint(...): (line 1908)
    # Processing the call arguments (line 1908)
    int_90513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1908, 30), 'int')
    # Getting the type of 'M' (line 1908)
    M_90514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 33), 'M', False)
    int_90515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1908, 35), 'int')
    # Applying the binary operator '-' (line 1908)
    result_sub_90516 = python_operator(stypy.reporting.localization.Localization(__file__, 1908, 33), '-', M_90514, int_90515)
    
    # Processing the call keyword arguments (line 1908)
    kwargs_90517 = {}
    # Getting the type of 'np' (line 1908)
    np_90510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 12), 'np', False)
    # Obtaining the member 'random' of a type (line 1908)
    random_90511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1908, 12), np_90510, 'random')
    # Obtaining the member 'randint' of a type (line 1908)
    randint_90512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1908, 12), random_90511, 'randint')
    # Calling randint(args, kwargs) (line 1908)
    randint_call_result_90518 = invoke(stypy.reporting.localization.Localization(__file__, 1908, 12), randint_90512, *[int_90513, result_sub_90516], **kwargs_90517)
    
    # Assigning a type to the variable 'x' (line 1908)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1908, 8), 'x', randint_call_result_90518)
    
    # Assigning a Call to a Name (line 1909):
    
    # Assigning a Call to a Name (line 1909):
    
    # Assigning a Call to a Name (line 1909):
    
    # Call to randint(...): (line 1909)
    # Processing the call arguments (line 1909)
    int_90522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1909, 30), 'int')
    # Getting the type of 'N' (line 1909)
    N_90523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 33), 'N', False)
    int_90524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1909, 35), 'int')
    # Applying the binary operator '-' (line 1909)
    result_sub_90525 = python_operator(stypy.reporting.localization.Localization(__file__, 1909, 33), '-', N_90523, int_90524)
    
    # Processing the call keyword arguments (line 1909)
    kwargs_90526 = {}
    # Getting the type of 'np' (line 1909)
    np_90519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 12), 'np', False)
    # Obtaining the member 'random' of a type (line 1909)
    random_90520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1909, 12), np_90519, 'random')
    # Obtaining the member 'randint' of a type (line 1909)
    randint_90521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1909, 12), random_90520, 'randint')
    # Calling randint(args, kwargs) (line 1909)
    randint_call_result_90527 = invoke(stypy.reporting.localization.Localization(__file__, 1909, 12), randint_90521, *[int_90522, result_sub_90525], **kwargs_90526)
    
    # Assigning a type to the variable 'y' (line 1909)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1909, 8), 'y', randint_call_result_90527)
    
    # Assigning a Call to a Subscript (line 1910):
    
    # Assigning a Call to a Subscript (line 1910):
    
    # Assigning a Call to a Subscript (line 1910):
    
    # Call to rand(...): (line 1910)
    # Processing the call keyword arguments (line 1910)
    kwargs_90531 = {}
    # Getting the type of 'np' (line 1910)
    np_90528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1910, 21), 'np', False)
    # Obtaining the member 'random' of a type (line 1910)
    random_90529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1910, 21), np_90528, 'random')
    # Obtaining the member 'rand' of a type (line 1910)
    rand_90530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1910, 21), random_90529, 'rand')
    # Calling rand(args, kwargs) (line 1910)
    rand_call_result_90532 = invoke(stypy.reporting.localization.Localization(__file__, 1910, 21), rand_90530, *[], **kwargs_90531)
    
    # Getting the type of 'data' (line 1910)
    data_90533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1910, 8), 'data')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1910)
    tuple_90534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1910, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1910)
    # Adding element type (line 1910)
    # Getting the type of 'x' (line 1910)
    x_90535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1910, 13), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1910, 13), tuple_90534, x_90535)
    # Adding element type (line 1910)
    # Getting the type of 'y' (line 1910)
    y_90536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1910, 16), 'y')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1910, 13), tuple_90534, y_90536)
    
    # Storing an element on a container (line 1910)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1910, 8), data_90533, (tuple_90534, rand_call_result_90532))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'data' (line 1911)
    data_90537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 11), 'data')
    # Assigning a type to the variable 'stypy_return_type' (line 1911)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1911, 4), 'stypy_return_type', data_90537)
    
    # ################# End of 'get_sparse_matrix(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_sparse_matrix' in the type store
    # Getting the type of 'stypy_return_type' (line 1901)
    stypy_return_type_90538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_90538)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_sparse_matrix'
    return stypy_return_type_90538

# Assigning a type to the variable 'get_sparse_matrix' (line 1901)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1901, 0), 'get_sparse_matrix', get_sparse_matrix)

@norecursion
def dist(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'dist'
    module_type_store = module_type_store.open_function_context('dist', 1914, 0, False)
    
    # Passed parameters checking function
    dist.stypy_localization = localization
    dist.stypy_type_of_self = None
    dist.stypy_type_store = module_type_store
    dist.stypy_function_name = 'dist'
    dist.stypy_param_names_list = ['x', 'y']
    dist.stypy_varargs_param_name = None
    dist.stypy_kwargs_param_name = None
    dist.stypy_call_defaults = defaults
    dist.stypy_call_varargs = varargs
    dist.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'dist', ['x', 'y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'dist', localization, ['x', 'y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'dist(...)' code ##################

    unicode_90539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1917, (-1)), 'unicode', u'\n    Return the distance between two points.\n    ')
    
    # Assigning a BinOp to a Name (line 1918):
    
    # Assigning a BinOp to a Name (line 1918):
    
    # Assigning a BinOp to a Name (line 1918):
    # Getting the type of 'x' (line 1918)
    x_90540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 8), 'x')
    # Getting the type of 'y' (line 1918)
    y_90541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 10), 'y')
    # Applying the binary operator '-' (line 1918)
    result_sub_90542 = python_operator(stypy.reporting.localization.Localization(__file__, 1918, 8), '-', x_90540, y_90541)
    
    # Assigning a type to the variable 'd' (line 1918)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1918, 4), 'd', result_sub_90542)
    
    # Call to sqrt(...): (line 1919)
    # Processing the call arguments (line 1919)
    
    # Call to dot(...): (line 1919)
    # Processing the call arguments (line 1919)
    # Getting the type of 'd' (line 1919)
    d_90547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 26), 'd', False)
    # Getting the type of 'd' (line 1919)
    d_90548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 29), 'd', False)
    # Processing the call keyword arguments (line 1919)
    kwargs_90549 = {}
    # Getting the type of 'np' (line 1919)
    np_90545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 19), 'np', False)
    # Obtaining the member 'dot' of a type (line 1919)
    dot_90546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1919, 19), np_90545, 'dot')
    # Calling dot(args, kwargs) (line 1919)
    dot_call_result_90550 = invoke(stypy.reporting.localization.Localization(__file__, 1919, 19), dot_90546, *[d_90547, d_90548], **kwargs_90549)
    
    # Processing the call keyword arguments (line 1919)
    kwargs_90551 = {}
    # Getting the type of 'np' (line 1919)
    np_90543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 11), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 1919)
    sqrt_90544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1919, 11), np_90543, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1919)
    sqrt_call_result_90552 = invoke(stypy.reporting.localization.Localization(__file__, 1919, 11), sqrt_90544, *[dot_call_result_90550], **kwargs_90551)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1919)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1919, 4), 'stypy_return_type', sqrt_call_result_90552)
    
    # ################# End of 'dist(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'dist' in the type store
    # Getting the type of 'stypy_return_type' (line 1914)
    stypy_return_type_90553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_90553)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'dist'
    return stypy_return_type_90553

# Assigning a type to the variable 'dist' (line 1914)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1914, 0), 'dist', dist)

@norecursion
def dist_point_to_segment(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'dist_point_to_segment'
    module_type_store = module_type_store.open_function_context('dist_point_to_segment', 1922, 0, False)
    
    # Passed parameters checking function
    dist_point_to_segment.stypy_localization = localization
    dist_point_to_segment.stypy_type_of_self = None
    dist_point_to_segment.stypy_type_store = module_type_store
    dist_point_to_segment.stypy_function_name = 'dist_point_to_segment'
    dist_point_to_segment.stypy_param_names_list = ['p', 's0', 's1']
    dist_point_to_segment.stypy_varargs_param_name = None
    dist_point_to_segment.stypy_kwargs_param_name = None
    dist_point_to_segment.stypy_call_defaults = defaults
    dist_point_to_segment.stypy_call_varargs = varargs
    dist_point_to_segment.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'dist_point_to_segment', ['p', 's0', 's1'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'dist_point_to_segment', localization, ['p', 's0', 's1'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'dist_point_to_segment(...)' code ##################

    unicode_90554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1930, (-1)), 'unicode', u'\n    Get the distance of a point to a segment.\n\n      *p*, *s0*, *s1* are *xy* sequences\n\n    This algorithm from\n    http://geomalgorithms.com/a02-_lines.html\n    ')
    
    # Assigning a Call to a Name (line 1931):
    
    # Assigning a Call to a Name (line 1931):
    
    # Assigning a Call to a Name (line 1931):
    
    # Call to asarray(...): (line 1931)
    # Processing the call arguments (line 1931)
    # Getting the type of 'p' (line 1931)
    p_90557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 19), 'p', False)
    # Getting the type of 'float' (line 1931)
    float_90558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 22), 'float', False)
    # Processing the call keyword arguments (line 1931)
    kwargs_90559 = {}
    # Getting the type of 'np' (line 1931)
    np_90555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1931)
    asarray_90556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1931, 8), np_90555, 'asarray')
    # Calling asarray(args, kwargs) (line 1931)
    asarray_call_result_90560 = invoke(stypy.reporting.localization.Localization(__file__, 1931, 8), asarray_90556, *[p_90557, float_90558], **kwargs_90559)
    
    # Assigning a type to the variable 'p' (line 1931)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1931, 4), 'p', asarray_call_result_90560)
    
    # Assigning a Call to a Name (line 1932):
    
    # Assigning a Call to a Name (line 1932):
    
    # Assigning a Call to a Name (line 1932):
    
    # Call to asarray(...): (line 1932)
    # Processing the call arguments (line 1932)
    # Getting the type of 's0' (line 1932)
    s0_90563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 20), 's0', False)
    # Getting the type of 'float' (line 1932)
    float_90564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 24), 'float', False)
    # Processing the call keyword arguments (line 1932)
    kwargs_90565 = {}
    # Getting the type of 'np' (line 1932)
    np_90561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 9), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1932)
    asarray_90562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1932, 9), np_90561, 'asarray')
    # Calling asarray(args, kwargs) (line 1932)
    asarray_call_result_90566 = invoke(stypy.reporting.localization.Localization(__file__, 1932, 9), asarray_90562, *[s0_90563, float_90564], **kwargs_90565)
    
    # Assigning a type to the variable 's0' (line 1932)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1932, 4), 's0', asarray_call_result_90566)
    
    # Assigning a Call to a Name (line 1933):
    
    # Assigning a Call to a Name (line 1933):
    
    # Assigning a Call to a Name (line 1933):
    
    # Call to asarray(...): (line 1933)
    # Processing the call arguments (line 1933)
    # Getting the type of 's1' (line 1933)
    s1_90569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 20), 's1', False)
    # Getting the type of 'float' (line 1933)
    float_90570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 24), 'float', False)
    # Processing the call keyword arguments (line 1933)
    kwargs_90571 = {}
    # Getting the type of 'np' (line 1933)
    np_90567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 9), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1933)
    asarray_90568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1933, 9), np_90567, 'asarray')
    # Calling asarray(args, kwargs) (line 1933)
    asarray_call_result_90572 = invoke(stypy.reporting.localization.Localization(__file__, 1933, 9), asarray_90568, *[s1_90569, float_90570], **kwargs_90571)
    
    # Assigning a type to the variable 's1' (line 1933)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1933, 4), 's1', asarray_call_result_90572)
    
    # Assigning a BinOp to a Name (line 1934):
    
    # Assigning a BinOp to a Name (line 1934):
    
    # Assigning a BinOp to a Name (line 1934):
    # Getting the type of 's1' (line 1934)
    s1_90573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 8), 's1')
    # Getting the type of 's0' (line 1934)
    s0_90574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 13), 's0')
    # Applying the binary operator '-' (line 1934)
    result_sub_90575 = python_operator(stypy.reporting.localization.Localization(__file__, 1934, 8), '-', s1_90573, s0_90574)
    
    # Assigning a type to the variable 'v' (line 1934)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1934, 4), 'v', result_sub_90575)
    
    # Assigning a BinOp to a Name (line 1935):
    
    # Assigning a BinOp to a Name (line 1935):
    
    # Assigning a BinOp to a Name (line 1935):
    # Getting the type of 'p' (line 1935)
    p_90576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 8), 'p')
    # Getting the type of 's0' (line 1935)
    s0_90577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 12), 's0')
    # Applying the binary operator '-' (line 1935)
    result_sub_90578 = python_operator(stypy.reporting.localization.Localization(__file__, 1935, 8), '-', p_90576, s0_90577)
    
    # Assigning a type to the variable 'w' (line 1935)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1935, 4), 'w', result_sub_90578)
    
    # Assigning a Call to a Name (line 1937):
    
    # Assigning a Call to a Name (line 1937):
    
    # Assigning a Call to a Name (line 1937):
    
    # Call to dot(...): (line 1937)
    # Processing the call arguments (line 1937)
    # Getting the type of 'w' (line 1937)
    w_90581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 16), 'w', False)
    # Getting the type of 'v' (line 1937)
    v_90582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 19), 'v', False)
    # Processing the call keyword arguments (line 1937)
    kwargs_90583 = {}
    # Getting the type of 'np' (line 1937)
    np_90579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 9), 'np', False)
    # Obtaining the member 'dot' of a type (line 1937)
    dot_90580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1937, 9), np_90579, 'dot')
    # Calling dot(args, kwargs) (line 1937)
    dot_call_result_90584 = invoke(stypy.reporting.localization.Localization(__file__, 1937, 9), dot_90580, *[w_90581, v_90582], **kwargs_90583)
    
    # Assigning a type to the variable 'c1' (line 1937)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1937, 4), 'c1', dot_call_result_90584)
    
    
    # Getting the type of 'c1' (line 1938)
    c1_90585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 7), 'c1')
    int_90586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1938, 13), 'int')
    # Applying the binary operator '<=' (line 1938)
    result_le_90587 = python_operator(stypy.reporting.localization.Localization(__file__, 1938, 7), '<=', c1_90585, int_90586)
    
    # Testing the type of an if condition (line 1938)
    if_condition_90588 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1938, 4), result_le_90587)
    # Assigning a type to the variable 'if_condition_90588' (line 1938)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1938, 4), 'if_condition_90588', if_condition_90588)
    # SSA begins for if statement (line 1938)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to dist(...): (line 1939)
    # Processing the call arguments (line 1939)
    # Getting the type of 'p' (line 1939)
    p_90590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 20), 'p', False)
    # Getting the type of 's0' (line 1939)
    s0_90591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 23), 's0', False)
    # Processing the call keyword arguments (line 1939)
    kwargs_90592 = {}
    # Getting the type of 'dist' (line 1939)
    dist_90589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 15), 'dist', False)
    # Calling dist(args, kwargs) (line 1939)
    dist_call_result_90593 = invoke(stypy.reporting.localization.Localization(__file__, 1939, 15), dist_90589, *[p_90590, s0_90591], **kwargs_90592)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1939)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1939, 8), 'stypy_return_type', dist_call_result_90593)
    # SSA join for if statement (line 1938)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1941):
    
    # Assigning a Call to a Name (line 1941):
    
    # Assigning a Call to a Name (line 1941):
    
    # Call to dot(...): (line 1941)
    # Processing the call arguments (line 1941)
    # Getting the type of 'v' (line 1941)
    v_90596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 16), 'v', False)
    # Getting the type of 'v' (line 1941)
    v_90597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 19), 'v', False)
    # Processing the call keyword arguments (line 1941)
    kwargs_90598 = {}
    # Getting the type of 'np' (line 1941)
    np_90594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 9), 'np', False)
    # Obtaining the member 'dot' of a type (line 1941)
    dot_90595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1941, 9), np_90594, 'dot')
    # Calling dot(args, kwargs) (line 1941)
    dot_call_result_90599 = invoke(stypy.reporting.localization.Localization(__file__, 1941, 9), dot_90595, *[v_90596, v_90597], **kwargs_90598)
    
    # Assigning a type to the variable 'c2' (line 1941)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1941, 4), 'c2', dot_call_result_90599)
    
    
    # Getting the type of 'c2' (line 1942)
    c2_90600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 7), 'c2')
    # Getting the type of 'c1' (line 1942)
    c1_90601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 13), 'c1')
    # Applying the binary operator '<=' (line 1942)
    result_le_90602 = python_operator(stypy.reporting.localization.Localization(__file__, 1942, 7), '<=', c2_90600, c1_90601)
    
    # Testing the type of an if condition (line 1942)
    if_condition_90603 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1942, 4), result_le_90602)
    # Assigning a type to the variable 'if_condition_90603' (line 1942)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1942, 4), 'if_condition_90603', if_condition_90603)
    # SSA begins for if statement (line 1942)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to dist(...): (line 1943)
    # Processing the call arguments (line 1943)
    # Getting the type of 'p' (line 1943)
    p_90605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 20), 'p', False)
    # Getting the type of 's1' (line 1943)
    s1_90606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 23), 's1', False)
    # Processing the call keyword arguments (line 1943)
    kwargs_90607 = {}
    # Getting the type of 'dist' (line 1943)
    dist_90604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 15), 'dist', False)
    # Calling dist(args, kwargs) (line 1943)
    dist_call_result_90608 = invoke(stypy.reporting.localization.Localization(__file__, 1943, 15), dist_90604, *[p_90605, s1_90606], **kwargs_90607)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1943)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1943, 8), 'stypy_return_type', dist_call_result_90608)
    # SSA join for if statement (line 1942)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1945):
    
    # Assigning a BinOp to a Name (line 1945):
    
    # Assigning a BinOp to a Name (line 1945):
    # Getting the type of 'c1' (line 1945)
    c1_90609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 8), 'c1')
    # Getting the type of 'c2' (line 1945)
    c2_90610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 13), 'c2')
    # Applying the binary operator 'div' (line 1945)
    result_div_90611 = python_operator(stypy.reporting.localization.Localization(__file__, 1945, 8), 'div', c1_90609, c2_90610)
    
    # Assigning a type to the variable 'b' (line 1945)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1945, 4), 'b', result_div_90611)
    
    # Assigning a BinOp to a Name (line 1946):
    
    # Assigning a BinOp to a Name (line 1946):
    
    # Assigning a BinOp to a Name (line 1946):
    # Getting the type of 's0' (line 1946)
    s0_90612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 9), 's0')
    # Getting the type of 'b' (line 1946)
    b_90613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 14), 'b')
    # Getting the type of 'v' (line 1946)
    v_90614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 18), 'v')
    # Applying the binary operator '*' (line 1946)
    result_mul_90615 = python_operator(stypy.reporting.localization.Localization(__file__, 1946, 14), '*', b_90613, v_90614)
    
    # Applying the binary operator '+' (line 1946)
    result_add_90616 = python_operator(stypy.reporting.localization.Localization(__file__, 1946, 9), '+', s0_90612, result_mul_90615)
    
    # Assigning a type to the variable 'pb' (line 1946)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1946, 4), 'pb', result_add_90616)
    
    # Call to dist(...): (line 1947)
    # Processing the call arguments (line 1947)
    # Getting the type of 'p' (line 1947)
    p_90618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 16), 'p', False)
    # Getting the type of 'pb' (line 1947)
    pb_90619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 19), 'pb', False)
    # Processing the call keyword arguments (line 1947)
    kwargs_90620 = {}
    # Getting the type of 'dist' (line 1947)
    dist_90617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 11), 'dist', False)
    # Calling dist(args, kwargs) (line 1947)
    dist_call_result_90621 = invoke(stypy.reporting.localization.Localization(__file__, 1947, 11), dist_90617, *[p_90618, pb_90619], **kwargs_90620)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1947, 4), 'stypy_return_type', dist_call_result_90621)
    
    # ################# End of 'dist_point_to_segment(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'dist_point_to_segment' in the type store
    # Getting the type of 'stypy_return_type' (line 1922)
    stypy_return_type_90622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_90622)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'dist_point_to_segment'
    return stypy_return_type_90622

# Assigning a type to the variable 'dist_point_to_segment' (line 1922)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1922, 0), 'dist_point_to_segment', dist_point_to_segment)

@norecursion
def segments_intersect(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'segments_intersect'
    module_type_store = module_type_store.open_function_context('segments_intersect', 1950, 0, False)
    
    # Passed parameters checking function
    segments_intersect.stypy_localization = localization
    segments_intersect.stypy_type_of_self = None
    segments_intersect.stypy_type_store = module_type_store
    segments_intersect.stypy_function_name = 'segments_intersect'
    segments_intersect.stypy_param_names_list = ['s1', 's2']
    segments_intersect.stypy_varargs_param_name = None
    segments_intersect.stypy_kwargs_param_name = None
    segments_intersect.stypy_call_defaults = defaults
    segments_intersect.stypy_call_varargs = varargs
    segments_intersect.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'segments_intersect', ['s1', 's2'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'segments_intersect', localization, ['s1', 's2'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'segments_intersect(...)' code ##################

    unicode_90623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1957, (-1)), 'unicode', u'\n    Return *True* if *s1* and *s2* intersect.\n    *s1* and *s2* are defined as::\n\n      s1: (x1, y1), (x2, y2)\n      s2: (x3, y3), (x4, y4)\n    ')
    
    # Assigning a Name to a Tuple (line 1958):
    
    # Assigning a Subscript to a Name (line 1958):
    
    # Assigning a Subscript to a Name (line 1958):
    
    # Obtaining the type of the subscript
    int_90624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1958, 4), 'int')
    # Getting the type of 's1' (line 1958)
    s1_90625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 25), 's1')
    # Obtaining the member '__getitem__' of a type (line 1958)
    getitem___90626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 4), s1_90625, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1958)
    subscript_call_result_90627 = invoke(stypy.reporting.localization.Localization(__file__, 1958, 4), getitem___90626, int_90624)
    
    # Assigning a type to the variable 'tuple_var_assignment_87273' (line 1958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1958, 4), 'tuple_var_assignment_87273', subscript_call_result_90627)
    
    # Assigning a Subscript to a Name (line 1958):
    
    # Assigning a Subscript to a Name (line 1958):
    
    # Obtaining the type of the subscript
    int_90628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1958, 4), 'int')
    # Getting the type of 's1' (line 1958)
    s1_90629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 25), 's1')
    # Obtaining the member '__getitem__' of a type (line 1958)
    getitem___90630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 4), s1_90629, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1958)
    subscript_call_result_90631 = invoke(stypy.reporting.localization.Localization(__file__, 1958, 4), getitem___90630, int_90628)
    
    # Assigning a type to the variable 'tuple_var_assignment_87274' (line 1958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1958, 4), 'tuple_var_assignment_87274', subscript_call_result_90631)
    
    # Assigning a Name to a Tuple (line 1958):
    
    # Assigning a Subscript to a Name (line 1958):
    
    # Obtaining the type of the subscript
    int_90632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1958, 4), 'int')
    # Getting the type of 'tuple_var_assignment_87273' (line 1958)
    tuple_var_assignment_87273_90633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 4), 'tuple_var_assignment_87273')
    # Obtaining the member '__getitem__' of a type (line 1958)
    getitem___90634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 4), tuple_var_assignment_87273_90633, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1958)
    subscript_call_result_90635 = invoke(stypy.reporting.localization.Localization(__file__, 1958, 4), getitem___90634, int_90632)
    
    # Assigning a type to the variable 'tuple_var_assignment_87315' (line 1958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1958, 4), 'tuple_var_assignment_87315', subscript_call_result_90635)
    
    # Assigning a Subscript to a Name (line 1958):
    
    # Obtaining the type of the subscript
    int_90636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1958, 4), 'int')
    # Getting the type of 'tuple_var_assignment_87273' (line 1958)
    tuple_var_assignment_87273_90637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 4), 'tuple_var_assignment_87273')
    # Obtaining the member '__getitem__' of a type (line 1958)
    getitem___90638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 4), tuple_var_assignment_87273_90637, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1958)
    subscript_call_result_90639 = invoke(stypy.reporting.localization.Localization(__file__, 1958, 4), getitem___90638, int_90636)
    
    # Assigning a type to the variable 'tuple_var_assignment_87316' (line 1958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1958, 4), 'tuple_var_assignment_87316', subscript_call_result_90639)
    
    # Assigning a Name to a Name (line 1958):
    # Getting the type of 'tuple_var_assignment_87315' (line 1958)
    tuple_var_assignment_87315_90640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 4), 'tuple_var_assignment_87315')
    # Assigning a type to the variable 'x1' (line 1958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1958, 5), 'x1', tuple_var_assignment_87315_90640)
    
    # Assigning a Name to a Name (line 1958):
    # Getting the type of 'tuple_var_assignment_87316' (line 1958)
    tuple_var_assignment_87316_90641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 4), 'tuple_var_assignment_87316')
    # Assigning a type to the variable 'y1' (line 1958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1958, 9), 'y1', tuple_var_assignment_87316_90641)
    
    # Assigning a Name to a Tuple (line 1958):
    
    # Assigning a Subscript to a Name (line 1958):
    
    # Obtaining the type of the subscript
    int_90642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1958, 4), 'int')
    # Getting the type of 'tuple_var_assignment_87274' (line 1958)
    tuple_var_assignment_87274_90643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 4), 'tuple_var_assignment_87274')
    # Obtaining the member '__getitem__' of a type (line 1958)
    getitem___90644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 4), tuple_var_assignment_87274_90643, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1958)
    subscript_call_result_90645 = invoke(stypy.reporting.localization.Localization(__file__, 1958, 4), getitem___90644, int_90642)
    
    # Assigning a type to the variable 'tuple_var_assignment_87317' (line 1958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1958, 4), 'tuple_var_assignment_87317', subscript_call_result_90645)
    
    # Assigning a Subscript to a Name (line 1958):
    
    # Obtaining the type of the subscript
    int_90646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1958, 4), 'int')
    # Getting the type of 'tuple_var_assignment_87274' (line 1958)
    tuple_var_assignment_87274_90647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 4), 'tuple_var_assignment_87274')
    # Obtaining the member '__getitem__' of a type (line 1958)
    getitem___90648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 4), tuple_var_assignment_87274_90647, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1958)
    subscript_call_result_90649 = invoke(stypy.reporting.localization.Localization(__file__, 1958, 4), getitem___90648, int_90646)
    
    # Assigning a type to the variable 'tuple_var_assignment_87318' (line 1958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1958, 4), 'tuple_var_assignment_87318', subscript_call_result_90649)
    
    # Assigning a Name to a Name (line 1958):
    # Getting the type of 'tuple_var_assignment_87317' (line 1958)
    tuple_var_assignment_87317_90650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 4), 'tuple_var_assignment_87317')
    # Assigning a type to the variable 'x2' (line 1958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1958, 15), 'x2', tuple_var_assignment_87317_90650)
    
    # Assigning a Name to a Name (line 1958):
    # Getting the type of 'tuple_var_assignment_87318' (line 1958)
    tuple_var_assignment_87318_90651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 4), 'tuple_var_assignment_87318')
    # Assigning a type to the variable 'y2' (line 1958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1958, 19), 'y2', tuple_var_assignment_87318_90651)
    
    # Assigning a Name to a Tuple (line 1959):
    
    # Assigning a Subscript to a Name (line 1959):
    
    # Assigning a Subscript to a Name (line 1959):
    
    # Obtaining the type of the subscript
    int_90652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1959, 4), 'int')
    # Getting the type of 's2' (line 1959)
    s2_90653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 25), 's2')
    # Obtaining the member '__getitem__' of a type (line 1959)
    getitem___90654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1959, 4), s2_90653, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1959)
    subscript_call_result_90655 = invoke(stypy.reporting.localization.Localization(__file__, 1959, 4), getitem___90654, int_90652)
    
    # Assigning a type to the variable 'tuple_var_assignment_87275' (line 1959)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1959, 4), 'tuple_var_assignment_87275', subscript_call_result_90655)
    
    # Assigning a Subscript to a Name (line 1959):
    
    # Assigning a Subscript to a Name (line 1959):
    
    # Obtaining the type of the subscript
    int_90656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1959, 4), 'int')
    # Getting the type of 's2' (line 1959)
    s2_90657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 25), 's2')
    # Obtaining the member '__getitem__' of a type (line 1959)
    getitem___90658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1959, 4), s2_90657, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1959)
    subscript_call_result_90659 = invoke(stypy.reporting.localization.Localization(__file__, 1959, 4), getitem___90658, int_90656)
    
    # Assigning a type to the variable 'tuple_var_assignment_87276' (line 1959)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1959, 4), 'tuple_var_assignment_87276', subscript_call_result_90659)
    
    # Assigning a Name to a Tuple (line 1959):
    
    # Assigning a Subscript to a Name (line 1959):
    
    # Obtaining the type of the subscript
    int_90660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1959, 4), 'int')
    # Getting the type of 'tuple_var_assignment_87275' (line 1959)
    tuple_var_assignment_87275_90661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 4), 'tuple_var_assignment_87275')
    # Obtaining the member '__getitem__' of a type (line 1959)
    getitem___90662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1959, 4), tuple_var_assignment_87275_90661, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1959)
    subscript_call_result_90663 = invoke(stypy.reporting.localization.Localization(__file__, 1959, 4), getitem___90662, int_90660)
    
    # Assigning a type to the variable 'tuple_var_assignment_87319' (line 1959)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1959, 4), 'tuple_var_assignment_87319', subscript_call_result_90663)
    
    # Assigning a Subscript to a Name (line 1959):
    
    # Obtaining the type of the subscript
    int_90664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1959, 4), 'int')
    # Getting the type of 'tuple_var_assignment_87275' (line 1959)
    tuple_var_assignment_87275_90665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 4), 'tuple_var_assignment_87275')
    # Obtaining the member '__getitem__' of a type (line 1959)
    getitem___90666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1959, 4), tuple_var_assignment_87275_90665, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1959)
    subscript_call_result_90667 = invoke(stypy.reporting.localization.Localization(__file__, 1959, 4), getitem___90666, int_90664)
    
    # Assigning a type to the variable 'tuple_var_assignment_87320' (line 1959)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1959, 4), 'tuple_var_assignment_87320', subscript_call_result_90667)
    
    # Assigning a Name to a Name (line 1959):
    # Getting the type of 'tuple_var_assignment_87319' (line 1959)
    tuple_var_assignment_87319_90668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 4), 'tuple_var_assignment_87319')
    # Assigning a type to the variable 'x3' (line 1959)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1959, 5), 'x3', tuple_var_assignment_87319_90668)
    
    # Assigning a Name to a Name (line 1959):
    # Getting the type of 'tuple_var_assignment_87320' (line 1959)
    tuple_var_assignment_87320_90669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 4), 'tuple_var_assignment_87320')
    # Assigning a type to the variable 'y3' (line 1959)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1959, 9), 'y3', tuple_var_assignment_87320_90669)
    
    # Assigning a Name to a Tuple (line 1959):
    
    # Assigning a Subscript to a Name (line 1959):
    
    # Obtaining the type of the subscript
    int_90670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1959, 4), 'int')
    # Getting the type of 'tuple_var_assignment_87276' (line 1959)
    tuple_var_assignment_87276_90671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 4), 'tuple_var_assignment_87276')
    # Obtaining the member '__getitem__' of a type (line 1959)
    getitem___90672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1959, 4), tuple_var_assignment_87276_90671, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1959)
    subscript_call_result_90673 = invoke(stypy.reporting.localization.Localization(__file__, 1959, 4), getitem___90672, int_90670)
    
    # Assigning a type to the variable 'tuple_var_assignment_87321' (line 1959)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1959, 4), 'tuple_var_assignment_87321', subscript_call_result_90673)
    
    # Assigning a Subscript to a Name (line 1959):
    
    # Obtaining the type of the subscript
    int_90674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1959, 4), 'int')
    # Getting the type of 'tuple_var_assignment_87276' (line 1959)
    tuple_var_assignment_87276_90675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 4), 'tuple_var_assignment_87276')
    # Obtaining the member '__getitem__' of a type (line 1959)
    getitem___90676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1959, 4), tuple_var_assignment_87276_90675, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1959)
    subscript_call_result_90677 = invoke(stypy.reporting.localization.Localization(__file__, 1959, 4), getitem___90676, int_90674)
    
    # Assigning a type to the variable 'tuple_var_assignment_87322' (line 1959)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1959, 4), 'tuple_var_assignment_87322', subscript_call_result_90677)
    
    # Assigning a Name to a Name (line 1959):
    # Getting the type of 'tuple_var_assignment_87321' (line 1959)
    tuple_var_assignment_87321_90678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 4), 'tuple_var_assignment_87321')
    # Assigning a type to the variable 'x4' (line 1959)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1959, 15), 'x4', tuple_var_assignment_87321_90678)
    
    # Assigning a Name to a Name (line 1959):
    # Getting the type of 'tuple_var_assignment_87322' (line 1959)
    tuple_var_assignment_87322_90679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 4), 'tuple_var_assignment_87322')
    # Assigning a type to the variable 'y4' (line 1959)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1959, 19), 'y4', tuple_var_assignment_87322_90679)
    
    # Assigning a BinOp to a Name (line 1961):
    
    # Assigning a BinOp to a Name (line 1961):
    
    # Assigning a BinOp to a Name (line 1961):
    # Getting the type of 'y4' (line 1961)
    y4_90680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 12), 'y4')
    # Getting the type of 'y3' (line 1961)
    y3_90681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 15), 'y3')
    # Applying the binary operator '-' (line 1961)
    result_sub_90682 = python_operator(stypy.reporting.localization.Localization(__file__, 1961, 12), '-', y4_90680, y3_90681)
    
    # Getting the type of 'x2' (line 1961)
    x2_90683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 22), 'x2')
    # Getting the type of 'x1' (line 1961)
    x1_90684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 25), 'x1')
    # Applying the binary operator '-' (line 1961)
    result_sub_90685 = python_operator(stypy.reporting.localization.Localization(__file__, 1961, 22), '-', x2_90683, x1_90684)
    
    # Applying the binary operator '*' (line 1961)
    result_mul_90686 = python_operator(stypy.reporting.localization.Localization(__file__, 1961, 11), '*', result_sub_90682, result_sub_90685)
    
    # Getting the type of 'x4' (line 1961)
    x4_90687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 34), 'x4')
    # Getting the type of 'x3' (line 1961)
    x3_90688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 37), 'x3')
    # Applying the binary operator '-' (line 1961)
    result_sub_90689 = python_operator(stypy.reporting.localization.Localization(__file__, 1961, 34), '-', x4_90687, x3_90688)
    
    # Getting the type of 'y2' (line 1961)
    y2_90690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 42), 'y2')
    # Getting the type of 'y1' (line 1961)
    y1_90691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 45), 'y1')
    # Applying the binary operator '-' (line 1961)
    result_sub_90692 = python_operator(stypy.reporting.localization.Localization(__file__, 1961, 42), '-', y2_90690, y1_90691)
    
    # Applying the binary operator '*' (line 1961)
    result_mul_90693 = python_operator(stypy.reporting.localization.Localization(__file__, 1961, 33), '*', result_sub_90689, result_sub_90692)
    
    # Applying the binary operator '-' (line 1961)
    result_sub_90694 = python_operator(stypy.reporting.localization.Localization(__file__, 1961, 10), '-', result_mul_90686, result_mul_90693)
    
    # Assigning a type to the variable 'den' (line 1961)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1961, 4), 'den', result_sub_90694)
    
    # Assigning a BinOp to a Name (line 1963):
    
    # Assigning a BinOp to a Name (line 1963):
    
    # Assigning a BinOp to a Name (line 1963):
    # Getting the type of 'x4' (line 1963)
    x4_90695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 11), 'x4')
    # Getting the type of 'x3' (line 1963)
    x3_90696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 14), 'x3')
    # Applying the binary operator '-' (line 1963)
    result_sub_90697 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 11), '-', x4_90695, x3_90696)
    
    # Getting the type of 'y1' (line 1963)
    y1_90698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 21), 'y1')
    # Getting the type of 'y3' (line 1963)
    y3_90699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 24), 'y3')
    # Applying the binary operator '-' (line 1963)
    result_sub_90700 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 21), '-', y1_90698, y3_90699)
    
    # Applying the binary operator '*' (line 1963)
    result_mul_90701 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 10), '*', result_sub_90697, result_sub_90700)
    
    # Getting the type of 'y4' (line 1963)
    y4_90702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 33), 'y4')
    # Getting the type of 'y3' (line 1963)
    y3_90703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 36), 'y3')
    # Applying the binary operator '-' (line 1963)
    result_sub_90704 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 33), '-', y4_90702, y3_90703)
    
    # Getting the type of 'x1' (line 1963)
    x1_90705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 41), 'x1')
    # Getting the type of 'x3' (line 1963)
    x3_90706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 44), 'x3')
    # Applying the binary operator '-' (line 1963)
    result_sub_90707 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 41), '-', x1_90705, x3_90706)
    
    # Applying the binary operator '*' (line 1963)
    result_mul_90708 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 32), '*', result_sub_90704, result_sub_90707)
    
    # Applying the binary operator '-' (line 1963)
    result_sub_90709 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 9), '-', result_mul_90701, result_mul_90708)
    
    # Assigning a type to the variable 'n1' (line 1963)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 4), 'n1', result_sub_90709)
    
    # Assigning a BinOp to a Name (line 1964):
    
    # Assigning a BinOp to a Name (line 1964):
    
    # Assigning a BinOp to a Name (line 1964):
    # Getting the type of 'x2' (line 1964)
    x2_90710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 11), 'x2')
    # Getting the type of 'x1' (line 1964)
    x1_90711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 14), 'x1')
    # Applying the binary operator '-' (line 1964)
    result_sub_90712 = python_operator(stypy.reporting.localization.Localization(__file__, 1964, 11), '-', x2_90710, x1_90711)
    
    # Getting the type of 'y1' (line 1964)
    y1_90713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 21), 'y1')
    # Getting the type of 'y3' (line 1964)
    y3_90714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 24), 'y3')
    # Applying the binary operator '-' (line 1964)
    result_sub_90715 = python_operator(stypy.reporting.localization.Localization(__file__, 1964, 21), '-', y1_90713, y3_90714)
    
    # Applying the binary operator '*' (line 1964)
    result_mul_90716 = python_operator(stypy.reporting.localization.Localization(__file__, 1964, 10), '*', result_sub_90712, result_sub_90715)
    
    # Getting the type of 'y2' (line 1964)
    y2_90717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 33), 'y2')
    # Getting the type of 'y1' (line 1964)
    y1_90718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 36), 'y1')
    # Applying the binary operator '-' (line 1964)
    result_sub_90719 = python_operator(stypy.reporting.localization.Localization(__file__, 1964, 33), '-', y2_90717, y1_90718)
    
    # Getting the type of 'x1' (line 1964)
    x1_90720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 41), 'x1')
    # Getting the type of 'x3' (line 1964)
    x3_90721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 44), 'x3')
    # Applying the binary operator '-' (line 1964)
    result_sub_90722 = python_operator(stypy.reporting.localization.Localization(__file__, 1964, 41), '-', x1_90720, x3_90721)
    
    # Applying the binary operator '*' (line 1964)
    result_mul_90723 = python_operator(stypy.reporting.localization.Localization(__file__, 1964, 32), '*', result_sub_90719, result_sub_90722)
    
    # Applying the binary operator '-' (line 1964)
    result_sub_90724 = python_operator(stypy.reporting.localization.Localization(__file__, 1964, 9), '-', result_mul_90716, result_mul_90723)
    
    # Assigning a type to the variable 'n2' (line 1964)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1964, 4), 'n2', result_sub_90724)
    
    
    # Getting the type of 'den' (line 1966)
    den_90725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1966, 7), 'den')
    int_90726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1966, 14), 'int')
    # Applying the binary operator '==' (line 1966)
    result_eq_90727 = python_operator(stypy.reporting.localization.Localization(__file__, 1966, 7), '==', den_90725, int_90726)
    
    # Testing the type of an if condition (line 1966)
    if_condition_90728 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1966, 4), result_eq_90727)
    # Assigning a type to the variable 'if_condition_90728' (line 1966)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1966, 4), 'if_condition_90728', if_condition_90728)
    # SSA begins for if statement (line 1966)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 1968)
    False_90729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 1968)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1968, 8), 'stypy_return_type', False_90729)
    # SSA join for if statement (line 1966)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1970):
    
    # Assigning a BinOp to a Name (line 1970):
    
    # Assigning a BinOp to a Name (line 1970):
    # Getting the type of 'n1' (line 1970)
    n1_90730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 9), 'n1')
    # Getting the type of 'den' (line 1970)
    den_90731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 12), 'den')
    # Applying the binary operator 'div' (line 1970)
    result_div_90732 = python_operator(stypy.reporting.localization.Localization(__file__, 1970, 9), 'div', n1_90730, den_90731)
    
    # Assigning a type to the variable 'u1' (line 1970)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1970, 4), 'u1', result_div_90732)
    
    # Assigning a BinOp to a Name (line 1971):
    
    # Assigning a BinOp to a Name (line 1971):
    
    # Assigning a BinOp to a Name (line 1971):
    # Getting the type of 'n2' (line 1971)
    n2_90733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 9), 'n2')
    # Getting the type of 'den' (line 1971)
    den_90734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 12), 'den')
    # Applying the binary operator 'div' (line 1971)
    result_div_90735 = python_operator(stypy.reporting.localization.Localization(__file__, 1971, 9), 'div', n2_90733, den_90734)
    
    # Assigning a type to the variable 'u2' (line 1971)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1971, 4), 'u2', result_div_90735)
    
    # Evaluating a boolean operation
    
    float_90736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 11), 'float')
    # Getting the type of 'u1' (line 1973)
    u1_90737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 18), 'u1')
    # Applying the binary operator '<=' (line 1973)
    result_le_90738 = python_operator(stypy.reporting.localization.Localization(__file__, 1973, 11), '<=', float_90736, u1_90737)
    float_90739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 24), 'float')
    # Applying the binary operator '<=' (line 1973)
    result_le_90740 = python_operator(stypy.reporting.localization.Localization(__file__, 1973, 11), '<=', u1_90737, float_90739)
    # Applying the binary operator '&' (line 1973)
    result_and__90741 = python_operator(stypy.reporting.localization.Localization(__file__, 1973, 11), '&', result_le_90738, result_le_90740)
    
    
    float_90742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 32), 'float')
    # Getting the type of 'u2' (line 1973)
    u2_90743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 39), 'u2')
    # Applying the binary operator '<=' (line 1973)
    result_le_90744 = python_operator(stypy.reporting.localization.Localization(__file__, 1973, 32), '<=', float_90742, u2_90743)
    float_90745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 45), 'float')
    # Applying the binary operator '<=' (line 1973)
    result_le_90746 = python_operator(stypy.reporting.localization.Localization(__file__, 1973, 32), '<=', u2_90743, float_90745)
    # Applying the binary operator '&' (line 1973)
    result_and__90747 = python_operator(stypy.reporting.localization.Localization(__file__, 1973, 32), '&', result_le_90744, result_le_90746)
    
    # Applying the binary operator 'and' (line 1973)
    result_and_keyword_90748 = python_operator(stypy.reporting.localization.Localization(__file__, 1973, 11), 'and', result_and__90741, result_and__90747)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 4), 'stypy_return_type', result_and_keyword_90748)
    
    # ################# End of 'segments_intersect(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'segments_intersect' in the type store
    # Getting the type of 'stypy_return_type' (line 1950)
    stypy_return_type_90749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_90749)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'segments_intersect'
    return stypy_return_type_90749

# Assigning a type to the variable 'segments_intersect' (line 1950)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1950, 0), 'segments_intersect', segments_intersect)

@norecursion
def fftsurr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'detrend_none' (line 1976)
    detrend_none_90750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 23), 'detrend_none')
    # Getting the type of 'window_none' (line 1976)
    window_none_90751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 44), 'window_none')
    defaults = [detrend_none_90750, window_none_90751]
    # Create a new context for function 'fftsurr'
    module_type_store = module_type_store.open_function_context('fftsurr', 1976, 0, False)
    
    # Passed parameters checking function
    fftsurr.stypy_localization = localization
    fftsurr.stypy_type_of_self = None
    fftsurr.stypy_type_store = module_type_store
    fftsurr.stypy_function_name = 'fftsurr'
    fftsurr.stypy_param_names_list = ['x', 'detrend', 'window']
    fftsurr.stypy_varargs_param_name = None
    fftsurr.stypy_kwargs_param_name = None
    fftsurr.stypy_call_defaults = defaults
    fftsurr.stypy_call_varargs = varargs
    fftsurr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fftsurr', ['x', 'detrend', 'window'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fftsurr', localization, ['x', 'detrend', 'window'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fftsurr(...)' code ##################

    unicode_90752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1979, (-1)), 'unicode', u'\n    Compute an FFT phase randomized surrogate of *x*.\n    ')
    
    
    # Call to iterable(...): (line 1980)
    # Processing the call arguments (line 1980)
    # Getting the type of 'window' (line 1980)
    window_90755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 22), 'window', False)
    # Processing the call keyword arguments (line 1980)
    kwargs_90756 = {}
    # Getting the type of 'cbook' (line 1980)
    cbook_90753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 7), 'cbook', False)
    # Obtaining the member 'iterable' of a type (line 1980)
    iterable_90754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1980, 7), cbook_90753, 'iterable')
    # Calling iterable(args, kwargs) (line 1980)
    iterable_call_result_90757 = invoke(stypy.reporting.localization.Localization(__file__, 1980, 7), iterable_90754, *[window_90755], **kwargs_90756)
    
    # Testing the type of an if condition (line 1980)
    if_condition_90758 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1980, 4), iterable_call_result_90757)
    # Assigning a type to the variable 'if_condition_90758' (line 1980)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1980, 4), 'if_condition_90758', if_condition_90758)
    # SSA begins for if statement (line 1980)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1981):
    
    # Assigning a BinOp to a Name (line 1981):
    
    # Assigning a BinOp to a Name (line 1981):
    # Getting the type of 'window' (line 1981)
    window_90759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 12), 'window')
    
    # Call to detrend(...): (line 1981)
    # Processing the call arguments (line 1981)
    # Getting the type of 'x' (line 1981)
    x_90761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 27), 'x', False)
    # Processing the call keyword arguments (line 1981)
    kwargs_90762 = {}
    # Getting the type of 'detrend' (line 1981)
    detrend_90760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 19), 'detrend', False)
    # Calling detrend(args, kwargs) (line 1981)
    detrend_call_result_90763 = invoke(stypy.reporting.localization.Localization(__file__, 1981, 19), detrend_90760, *[x_90761], **kwargs_90762)
    
    # Applying the binary operator '*' (line 1981)
    result_mul_90764 = python_operator(stypy.reporting.localization.Localization(__file__, 1981, 12), '*', window_90759, detrend_call_result_90763)
    
    # Assigning a type to the variable 'x' (line 1981)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1981, 8), 'x', result_mul_90764)
    # SSA branch for the else part of an if statement (line 1980)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1983):
    
    # Assigning a Call to a Name (line 1983):
    
    # Assigning a Call to a Name (line 1983):
    
    # Call to window(...): (line 1983)
    # Processing the call arguments (line 1983)
    
    # Call to detrend(...): (line 1983)
    # Processing the call arguments (line 1983)
    # Getting the type of 'x' (line 1983)
    x_90767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 27), 'x', False)
    # Processing the call keyword arguments (line 1983)
    kwargs_90768 = {}
    # Getting the type of 'detrend' (line 1983)
    detrend_90766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 19), 'detrend', False)
    # Calling detrend(args, kwargs) (line 1983)
    detrend_call_result_90769 = invoke(stypy.reporting.localization.Localization(__file__, 1983, 19), detrend_90766, *[x_90767], **kwargs_90768)
    
    # Processing the call keyword arguments (line 1983)
    kwargs_90770 = {}
    # Getting the type of 'window' (line 1983)
    window_90765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 12), 'window', False)
    # Calling window(args, kwargs) (line 1983)
    window_call_result_90771 = invoke(stypy.reporting.localization.Localization(__file__, 1983, 12), window_90765, *[detrend_call_result_90769], **kwargs_90770)
    
    # Assigning a type to the variable 'x' (line 1983)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1983, 8), 'x', window_call_result_90771)
    # SSA join for if statement (line 1980)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1984):
    
    # Assigning a Call to a Name (line 1984):
    
    # Assigning a Call to a Name (line 1984):
    
    # Call to fft(...): (line 1984)
    # Processing the call arguments (line 1984)
    # Getting the type of 'x' (line 1984)
    x_90775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1984, 19), 'x', False)
    # Processing the call keyword arguments (line 1984)
    kwargs_90776 = {}
    # Getting the type of 'np' (line 1984)
    np_90772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1984, 8), 'np', False)
    # Obtaining the member 'fft' of a type (line 1984)
    fft_90773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1984, 8), np_90772, 'fft')
    # Obtaining the member 'fft' of a type (line 1984)
    fft_90774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1984, 8), fft_90773, 'fft')
    # Calling fft(args, kwargs) (line 1984)
    fft_call_result_90777 = invoke(stypy.reporting.localization.Localization(__file__, 1984, 8), fft_90774, *[x_90775], **kwargs_90776)
    
    # Assigning a type to the variable 'z' (line 1984)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1984, 4), 'z', fft_call_result_90777)
    
    # Assigning a BinOp to a Name (line 1985):
    
    # Assigning a BinOp to a Name (line 1985):
    
    # Assigning a BinOp to a Name (line 1985):
    float_90778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1985, 8), 'float')
    # Getting the type of 'np' (line 1985)
    np_90779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 11), 'np')
    # Obtaining the member 'pi' of a type (line 1985)
    pi_90780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1985, 11), np_90779, 'pi')
    # Applying the binary operator '*' (line 1985)
    result_mul_90781 = python_operator(stypy.reporting.localization.Localization(__file__, 1985, 8), '*', float_90778, pi_90780)
    
    complex_90782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1985, 17), 'complex')
    # Applying the binary operator '*' (line 1985)
    result_mul_90783 = python_operator(stypy.reporting.localization.Localization(__file__, 1985, 16), '*', result_mul_90781, complex_90782)
    
    # Assigning a type to the variable 'a' (line 1985)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1985, 4), 'a', result_mul_90783)
    
    # Assigning a BinOp to a Name (line 1986):
    
    # Assigning a BinOp to a Name (line 1986):
    
    # Assigning a BinOp to a Name (line 1986):
    # Getting the type of 'a' (line 1986)
    a_90784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1986, 12), 'a')
    
    # Call to rand(...): (line 1986)
    # Processing the call arguments (line 1986)
    
    # Call to len(...): (line 1986)
    # Processing the call arguments (line 1986)
    # Getting the type of 'x' (line 1986)
    x_90789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1986, 35), 'x', False)
    # Processing the call keyword arguments (line 1986)
    kwargs_90790 = {}
    # Getting the type of 'len' (line 1986)
    len_90788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1986, 31), 'len', False)
    # Calling len(args, kwargs) (line 1986)
    len_call_result_90791 = invoke(stypy.reporting.localization.Localization(__file__, 1986, 31), len_90788, *[x_90789], **kwargs_90790)
    
    # Processing the call keyword arguments (line 1986)
    kwargs_90792 = {}
    # Getting the type of 'np' (line 1986)
    np_90785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1986, 16), 'np', False)
    # Obtaining the member 'random' of a type (line 1986)
    random_90786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1986, 16), np_90785, 'random')
    # Obtaining the member 'rand' of a type (line 1986)
    rand_90787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1986, 16), random_90786, 'rand')
    # Calling rand(args, kwargs) (line 1986)
    rand_call_result_90793 = invoke(stypy.reporting.localization.Localization(__file__, 1986, 16), rand_90787, *[len_call_result_90791], **kwargs_90792)
    
    # Applying the binary operator '*' (line 1986)
    result_mul_90794 = python_operator(stypy.reporting.localization.Localization(__file__, 1986, 12), '*', a_90784, rand_call_result_90793)
    
    # Assigning a type to the variable 'phase' (line 1986)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1986, 4), 'phase', result_mul_90794)
    
    # Assigning a BinOp to a Name (line 1987):
    
    # Assigning a BinOp to a Name (line 1987):
    
    # Assigning a BinOp to a Name (line 1987):
    # Getting the type of 'z' (line 1987)
    z_90795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 8), 'z')
    
    # Call to exp(...): (line 1987)
    # Processing the call arguments (line 1987)
    # Getting the type of 'phase' (line 1987)
    phase_90798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 17), 'phase', False)
    # Processing the call keyword arguments (line 1987)
    kwargs_90799 = {}
    # Getting the type of 'np' (line 1987)
    np_90796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 10), 'np', False)
    # Obtaining the member 'exp' of a type (line 1987)
    exp_90797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1987, 10), np_90796, 'exp')
    # Calling exp(args, kwargs) (line 1987)
    exp_call_result_90800 = invoke(stypy.reporting.localization.Localization(__file__, 1987, 10), exp_90797, *[phase_90798], **kwargs_90799)
    
    # Applying the binary operator '*' (line 1987)
    result_mul_90801 = python_operator(stypy.reporting.localization.Localization(__file__, 1987, 8), '*', z_90795, exp_call_result_90800)
    
    # Assigning a type to the variable 'z' (line 1987)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1987, 4), 'z', result_mul_90801)
    
    # Call to ifft(...): (line 1988)
    # Processing the call arguments (line 1988)
    # Getting the type of 'z' (line 1988)
    z_90805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1988, 23), 'z', False)
    # Processing the call keyword arguments (line 1988)
    kwargs_90806 = {}
    # Getting the type of 'np' (line 1988)
    np_90802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1988, 11), 'np', False)
    # Obtaining the member 'fft' of a type (line 1988)
    fft_90803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1988, 11), np_90802, 'fft')
    # Obtaining the member 'ifft' of a type (line 1988)
    ifft_90804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1988, 11), fft_90803, 'ifft')
    # Calling ifft(args, kwargs) (line 1988)
    ifft_call_result_90807 = invoke(stypy.reporting.localization.Localization(__file__, 1988, 11), ifft_90804, *[z_90805], **kwargs_90806)
    
    # Obtaining the member 'real' of a type (line 1988)
    real_90808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1988, 11), ifft_call_result_90807, 'real')
    # Assigning a type to the variable 'stypy_return_type' (line 1988)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1988, 4), 'stypy_return_type', real_90808)
    
    # ################# End of 'fftsurr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fftsurr' in the type store
    # Getting the type of 'stypy_return_type' (line 1976)
    stypy_return_type_90809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_90809)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fftsurr'
    return stypy_return_type_90809

# Assigning a type to the variable 'fftsurr' (line 1976)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1976, 0), 'fftsurr', fftsurr)

@norecursion
def movavg(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'movavg'
    module_type_store = module_type_store.open_function_context('movavg', 1991, 0, False)
    
    # Passed parameters checking function
    movavg.stypy_localization = localization
    movavg.stypy_type_of_self = None
    movavg.stypy_type_store = module_type_store
    movavg.stypy_function_name = 'movavg'
    movavg.stypy_param_names_list = ['x', 'n']
    movavg.stypy_varargs_param_name = None
    movavg.stypy_kwargs_param_name = None
    movavg.stypy_call_defaults = defaults
    movavg.stypy_call_varargs = varargs
    movavg.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'movavg', ['x', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'movavg', localization, ['x', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'movavg(...)' code ##################

    unicode_90810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1994, (-1)), 'unicode', u'\n    Compute the len(*n*) moving average of *x*.\n    ')
    
    # Assigning a Call to a Name (line 1995):
    
    # Assigning a Call to a Name (line 1995):
    
    # Assigning a Call to a Name (line 1995):
    
    # Call to empty(...): (line 1995)
    # Processing the call arguments (line 1995)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1995)
    tuple_90813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1995, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1995)
    # Adding element type (line 1995)
    # Getting the type of 'n' (line 1995)
    n_90814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 18), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1995, 18), tuple_90813, n_90814)
    
    # Processing the call keyword arguments (line 1995)
    # Getting the type of 'float' (line 1995)
    float_90815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 29), 'float', False)
    keyword_90816 = float_90815
    kwargs_90817 = {'dtype': keyword_90816}
    # Getting the type of 'np' (line 1995)
    np_90811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 8), 'np', False)
    # Obtaining the member 'empty' of a type (line 1995)
    empty_90812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1995, 8), np_90811, 'empty')
    # Calling empty(args, kwargs) (line 1995)
    empty_call_result_90818 = invoke(stypy.reporting.localization.Localization(__file__, 1995, 8), empty_90812, *[tuple_90813], **kwargs_90817)
    
    # Assigning a type to the variable 'w' (line 1995)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1995, 4), 'w', empty_call_result_90818)
    
    # Assigning a BinOp to a Subscript (line 1996):
    
    # Assigning a BinOp to a Subscript (line 1996):
    
    # Assigning a BinOp to a Subscript (line 1996):
    float_90819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1996, 11), 'float')
    # Getting the type of 'n' (line 1996)
    n_90820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 15), 'n')
    # Applying the binary operator 'div' (line 1996)
    result_div_90821 = python_operator(stypy.reporting.localization.Localization(__file__, 1996, 11), 'div', float_90819, n_90820)
    
    # Getting the type of 'w' (line 1996)
    w_90822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 4), 'w')
    slice_90823 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1996, 4), None, None, None)
    # Storing an element on a container (line 1996)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1996, 4), w_90822, (slice_90823, result_div_90821))
    
    # Call to convolve(...): (line 1997)
    # Processing the call arguments (line 1997)
    # Getting the type of 'x' (line 1997)
    x_90826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 23), 'x', False)
    # Getting the type of 'w' (line 1997)
    w_90827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 26), 'w', False)
    # Processing the call keyword arguments (line 1997)
    unicode_90828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1997, 34), 'unicode', u'valid')
    keyword_90829 = unicode_90828
    kwargs_90830 = {'mode': keyword_90829}
    # Getting the type of 'np' (line 1997)
    np_90824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 11), 'np', False)
    # Obtaining the member 'convolve' of a type (line 1997)
    convolve_90825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1997, 11), np_90824, 'convolve')
    # Calling convolve(args, kwargs) (line 1997)
    convolve_call_result_90831 = invoke(stypy.reporting.localization.Localization(__file__, 1997, 11), convolve_90825, *[x_90826, w_90827], **kwargs_90830)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1997)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1997, 4), 'stypy_return_type', convolve_call_result_90831)
    
    # ################# End of 'movavg(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'movavg' in the type store
    # Getting the type of 'stypy_return_type' (line 1991)
    stypy_return_type_90832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_90832)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'movavg'
    return stypy_return_type_90832

# Assigning a type to the variable 'movavg' (line 1991)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1991, 0), 'movavg', movavg)
unicode_90833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2040, (-1)), 'unicode', u'\nA set of convenient utilities for numerical work.\n\nMost of this module requires numpy or is meant to be used with it.\n\nCopyright (c) 2001-2004, Fernando Perez. <Fernando.Perez@colorado.edu>\nAll rights reserved.\n\nThis license was generated from the BSD license template as found in:\nhttp://www.opensource.org/licenses/bsd-license.php\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n    * Neither the name of the IPython project nor the names of its\n      contributors may be used to endorse or promote products derived from\n      this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n')

# Assigning a Call to a Name (line 2047):

# Assigning a Call to a Name (line 2047):

# Assigning a Call to a Name (line 2047):

# Call to log(...): (line 2047)
# Processing the call arguments (line 2047)
float_90836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2047, 24), 'float')
# Processing the call keyword arguments (line 2047)
kwargs_90837 = {}
# Getting the type of 'math' (line 2047)
math_90834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2047, 15), 'math', False)
# Obtaining the member 'log' of a type (line 2047)
log_90835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2047, 15), math_90834, 'log')
# Calling log(args, kwargs) (line 2047)
log_call_result_90838 = invoke(stypy.reporting.localization.Localization(__file__, 2047, 15), log_90835, *[float_90836], **kwargs_90837)

# Assigning a type to the variable 'exp_safe_MIN' (line 2047)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2047, 0), 'exp_safe_MIN', log_call_result_90838)

# Assigning a Num to a Name (line 2048):

# Assigning a Num to a Name (line 2048):

# Assigning a Num to a Name (line 2048):
float_90839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2048, 15), 'float')
# Assigning a type to the variable 'exp_safe_MAX' (line 2048)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2048, 0), 'exp_safe_MAX', float_90839)

@norecursion
def exp_safe(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'exp_safe'
    module_type_store = module_type_store.open_function_context('exp_safe', 2051, 0, False)
    
    # Passed parameters checking function
    exp_safe.stypy_localization = localization
    exp_safe.stypy_type_of_self = None
    exp_safe.stypy_type_store = module_type_store
    exp_safe.stypy_function_name = 'exp_safe'
    exp_safe.stypy_param_names_list = ['x']
    exp_safe.stypy_varargs_param_name = None
    exp_safe.stypy_kwargs_param_name = None
    exp_safe.stypy_call_defaults = defaults
    exp_safe.stypy_call_varargs = varargs
    exp_safe.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'exp_safe', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'exp_safe', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'exp_safe(...)' code ##################

    unicode_90840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2058, (-1)), 'unicode', u'\n    Compute exponentials which safely underflow to zero.\n\n    Slow, but convenient to use. Note that numpy provides proper\n    floating point exception handling with access to the underlying\n    hardware.\n    ')
    
    
    
    # Call to type(...): (line 2060)
    # Processing the call arguments (line 2060)
    # Getting the type of 'x' (line 2060)
    x_90842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2060, 12), 'x', False)
    # Processing the call keyword arguments (line 2060)
    kwargs_90843 = {}
    # Getting the type of 'type' (line 2060)
    type_90841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2060, 7), 'type', False)
    # Calling type(args, kwargs) (line 2060)
    type_call_result_90844 = invoke(stypy.reporting.localization.Localization(__file__, 2060, 7), type_90841, *[x_90842], **kwargs_90843)
    
    # Getting the type of 'np' (line 2060)
    np_90845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2060, 18), 'np')
    # Obtaining the member 'ndarray' of a type (line 2060)
    ndarray_90846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2060, 18), np_90845, 'ndarray')
    # Applying the binary operator 'is' (line 2060)
    result_is__90847 = python_operator(stypy.reporting.localization.Localization(__file__, 2060, 7), 'is', type_call_result_90844, ndarray_90846)
    
    # Testing the type of an if condition (line 2060)
    if_condition_90848 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2060, 4), result_is__90847)
    # Assigning a type to the variable 'if_condition_90848' (line 2060)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2060, 4), 'if_condition_90848', if_condition_90848)
    # SSA begins for if statement (line 2060)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to exp(...): (line 2061)
    # Processing the call arguments (line 2061)
    
    # Call to clip(...): (line 2061)
    # Processing the call arguments (line 2061)
    # Getting the type of 'x' (line 2061)
    x_90853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 30), 'x', False)
    # Getting the type of 'exp_safe_MIN' (line 2061)
    exp_safe_MIN_90854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 33), 'exp_safe_MIN', False)
    # Getting the type of 'exp_safe_MAX' (line 2061)
    exp_safe_MAX_90855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 47), 'exp_safe_MAX', False)
    # Processing the call keyword arguments (line 2061)
    kwargs_90856 = {}
    # Getting the type of 'np' (line 2061)
    np_90851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 22), 'np', False)
    # Obtaining the member 'clip' of a type (line 2061)
    clip_90852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2061, 22), np_90851, 'clip')
    # Calling clip(args, kwargs) (line 2061)
    clip_call_result_90857 = invoke(stypy.reporting.localization.Localization(__file__, 2061, 22), clip_90852, *[x_90853, exp_safe_MIN_90854, exp_safe_MAX_90855], **kwargs_90856)
    
    # Processing the call keyword arguments (line 2061)
    kwargs_90858 = {}
    # Getting the type of 'np' (line 2061)
    np_90849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 15), 'np', False)
    # Obtaining the member 'exp' of a type (line 2061)
    exp_90850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2061, 15), np_90849, 'exp')
    # Calling exp(args, kwargs) (line 2061)
    exp_call_result_90859 = invoke(stypy.reporting.localization.Localization(__file__, 2061, 15), exp_90850, *[clip_call_result_90857], **kwargs_90858)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2061)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2061, 8), 'stypy_return_type', exp_call_result_90859)
    # SSA branch for the else part of an if statement (line 2060)
    module_type_store.open_ssa_branch('else')
    
    # Call to exp(...): (line 2063)
    # Processing the call arguments (line 2063)
    # Getting the type of 'x' (line 2063)
    x_90862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 24), 'x', False)
    # Processing the call keyword arguments (line 2063)
    kwargs_90863 = {}
    # Getting the type of 'math' (line 2063)
    math_90860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 15), 'math', False)
    # Obtaining the member 'exp' of a type (line 2063)
    exp_90861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2063, 15), math_90860, 'exp')
    # Calling exp(args, kwargs) (line 2063)
    exp_call_result_90864 = invoke(stypy.reporting.localization.Localization(__file__, 2063, 15), exp_90861, *[x_90862], **kwargs_90863)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2063)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2063, 8), 'stypy_return_type', exp_call_result_90864)
    # SSA join for if statement (line 2060)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'exp_safe(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'exp_safe' in the type store
    # Getting the type of 'stypy_return_type' (line 2051)
    stypy_return_type_90865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2051, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_90865)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'exp_safe'
    return stypy_return_type_90865

# Assigning a type to the variable 'exp_safe' (line 2051)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2051, 0), 'exp_safe', exp_safe)

@norecursion
def amap(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'amap'
    module_type_store = module_type_store.open_function_context('amap', 2066, 0, False)
    
    # Passed parameters checking function
    amap.stypy_localization = localization
    amap.stypy_type_of_self = None
    amap.stypy_type_store = module_type_store
    amap.stypy_function_name = 'amap'
    amap.stypy_param_names_list = ['fn']
    amap.stypy_varargs_param_name = 'args'
    amap.stypy_kwargs_param_name = None
    amap.stypy_call_defaults = defaults
    amap.stypy_call_varargs = varargs
    amap.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'amap', ['fn'], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'amap', localization, ['fn'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'amap(...)' code ##################

    unicode_90866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2072, (-1)), 'unicode', u'\n    amap(function, sequence[, sequence, ...]) -> array.\n\n    Works like :func:`map`, but it returns an array.  This is just a\n    convenient shorthand for ``numpy.array(map(...))``.\n    ')
    
    # Call to array(...): (line 2073)
    # Processing the call arguments (line 2073)
    
    # Call to list(...): (line 2073)
    # Processing the call arguments (line 2073)
    
    # Call to map(...): (line 2073)
    # Processing the call arguments (line 2073)
    # Getting the type of 'fn' (line 2073)
    fn_90871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 29), 'fn', False)
    # Getting the type of 'args' (line 2073)
    args_90872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 34), 'args', False)
    # Processing the call keyword arguments (line 2073)
    kwargs_90873 = {}
    # Getting the type of 'map' (line 2073)
    map_90870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 25), 'map', False)
    # Calling map(args, kwargs) (line 2073)
    map_call_result_90874 = invoke(stypy.reporting.localization.Localization(__file__, 2073, 25), map_90870, *[fn_90871, args_90872], **kwargs_90873)
    
    # Processing the call keyword arguments (line 2073)
    kwargs_90875 = {}
    # Getting the type of 'list' (line 2073)
    list_90869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 20), 'list', False)
    # Calling list(args, kwargs) (line 2073)
    list_call_result_90876 = invoke(stypy.reporting.localization.Localization(__file__, 2073, 20), list_90869, *[map_call_result_90874], **kwargs_90875)
    
    # Processing the call keyword arguments (line 2073)
    kwargs_90877 = {}
    # Getting the type of 'np' (line 2073)
    np_90867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 11), 'np', False)
    # Obtaining the member 'array' of a type (line 2073)
    array_90868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2073, 11), np_90867, 'array')
    # Calling array(args, kwargs) (line 2073)
    array_call_result_90878 = invoke(stypy.reporting.localization.Localization(__file__, 2073, 11), array_90868, *[list_call_result_90876], **kwargs_90877)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2073)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2073, 4), 'stypy_return_type', array_call_result_90878)
    
    # ################# End of 'amap(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'amap' in the type store
    # Getting the type of 'stypy_return_type' (line 2066)
    stypy_return_type_90879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_90879)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'amap'
    return stypy_return_type_90879

# Assigning a type to the variable 'amap' (line 2066)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2066, 0), 'amap', amap)

@norecursion
def rms_flat(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rms_flat'
    module_type_store = module_type_store.open_function_context('rms_flat', 2076, 0, False)
    
    # Passed parameters checking function
    rms_flat.stypy_localization = localization
    rms_flat.stypy_type_of_self = None
    rms_flat.stypy_type_store = module_type_store
    rms_flat.stypy_function_name = 'rms_flat'
    rms_flat.stypy_param_names_list = ['a']
    rms_flat.stypy_varargs_param_name = None
    rms_flat.stypy_kwargs_param_name = None
    rms_flat.stypy_call_defaults = defaults
    rms_flat.stypy_call_varargs = varargs
    rms_flat.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rms_flat', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rms_flat', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rms_flat(...)' code ##################

    unicode_90880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2079, (-1)), 'unicode', u'\n    Return the root mean square of all the elements of *a*, flattened out.\n    ')
    
    # Call to sqrt(...): (line 2080)
    # Processing the call arguments (line 2080)
    
    # Call to mean(...): (line 2080)
    # Processing the call arguments (line 2080)
    
    # Call to abs(...): (line 2080)
    # Processing the call arguments (line 2080)
    # Getting the type of 'a' (line 2080)
    a_90887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 34), 'a', False)
    # Processing the call keyword arguments (line 2080)
    kwargs_90888 = {}
    # Getting the type of 'np' (line 2080)
    np_90885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 27), 'np', False)
    # Obtaining the member 'abs' of a type (line 2080)
    abs_90886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2080, 27), np_90885, 'abs')
    # Calling abs(args, kwargs) (line 2080)
    abs_call_result_90889 = invoke(stypy.reporting.localization.Localization(__file__, 2080, 27), abs_90886, *[a_90887], **kwargs_90888)
    
    int_90890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2080, 40), 'int')
    # Applying the binary operator '**' (line 2080)
    result_pow_90891 = python_operator(stypy.reporting.localization.Localization(__file__, 2080, 27), '**', abs_call_result_90889, int_90890)
    
    # Processing the call keyword arguments (line 2080)
    kwargs_90892 = {}
    # Getting the type of 'np' (line 2080)
    np_90883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 19), 'np', False)
    # Obtaining the member 'mean' of a type (line 2080)
    mean_90884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2080, 19), np_90883, 'mean')
    # Calling mean(args, kwargs) (line 2080)
    mean_call_result_90893 = invoke(stypy.reporting.localization.Localization(__file__, 2080, 19), mean_90884, *[result_pow_90891], **kwargs_90892)
    
    # Processing the call keyword arguments (line 2080)
    kwargs_90894 = {}
    # Getting the type of 'np' (line 2080)
    np_90881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 11), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 2080)
    sqrt_90882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2080, 11), np_90881, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2080)
    sqrt_call_result_90895 = invoke(stypy.reporting.localization.Localization(__file__, 2080, 11), sqrt_90882, *[mean_call_result_90893], **kwargs_90894)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2080)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2080, 4), 'stypy_return_type', sqrt_call_result_90895)
    
    # ################# End of 'rms_flat(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rms_flat' in the type store
    # Getting the type of 'stypy_return_type' (line 2076)
    stypy_return_type_90896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_90896)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rms_flat'
    return stypy_return_type_90896

# Assigning a type to the variable 'rms_flat' (line 2076)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2076, 0), 'rms_flat', rms_flat)

@norecursion
def l1norm(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'l1norm'
    module_type_store = module_type_store.open_function_context('l1norm', 2083, 0, False)
    
    # Passed parameters checking function
    l1norm.stypy_localization = localization
    l1norm.stypy_type_of_self = None
    l1norm.stypy_type_store = module_type_store
    l1norm.stypy_function_name = 'l1norm'
    l1norm.stypy_param_names_list = ['a']
    l1norm.stypy_varargs_param_name = None
    l1norm.stypy_kwargs_param_name = None
    l1norm.stypy_call_defaults = defaults
    l1norm.stypy_call_varargs = varargs
    l1norm.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'l1norm', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'l1norm', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'l1norm(...)' code ##################

    unicode_90897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2088, (-1)), 'unicode', u'\n    Return the *l1* norm of *a*, flattened out.\n\n    Implemented as a separate function (not a call to :func:`norm` for speed).\n    ')
    
    # Call to sum(...): (line 2089)
    # Processing the call arguments (line 2089)
    
    # Call to abs(...): (line 2089)
    # Processing the call arguments (line 2089)
    # Getting the type of 'a' (line 2089)
    a_90902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 25), 'a', False)
    # Processing the call keyword arguments (line 2089)
    kwargs_90903 = {}
    # Getting the type of 'np' (line 2089)
    np_90900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 18), 'np', False)
    # Obtaining the member 'abs' of a type (line 2089)
    abs_90901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2089, 18), np_90900, 'abs')
    # Calling abs(args, kwargs) (line 2089)
    abs_call_result_90904 = invoke(stypy.reporting.localization.Localization(__file__, 2089, 18), abs_90901, *[a_90902], **kwargs_90903)
    
    # Processing the call keyword arguments (line 2089)
    kwargs_90905 = {}
    # Getting the type of 'np' (line 2089)
    np_90898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 11), 'np', False)
    # Obtaining the member 'sum' of a type (line 2089)
    sum_90899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2089, 11), np_90898, 'sum')
    # Calling sum(args, kwargs) (line 2089)
    sum_call_result_90906 = invoke(stypy.reporting.localization.Localization(__file__, 2089, 11), sum_90899, *[abs_call_result_90904], **kwargs_90905)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2089)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2089, 4), 'stypy_return_type', sum_call_result_90906)
    
    # ################# End of 'l1norm(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'l1norm' in the type store
    # Getting the type of 'stypy_return_type' (line 2083)
    stypy_return_type_90907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_90907)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'l1norm'
    return stypy_return_type_90907

# Assigning a type to the variable 'l1norm' (line 2083)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 0), 'l1norm', l1norm)

@norecursion
def l2norm(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'l2norm'
    module_type_store = module_type_store.open_function_context('l2norm', 2092, 0, False)
    
    # Passed parameters checking function
    l2norm.stypy_localization = localization
    l2norm.stypy_type_of_self = None
    l2norm.stypy_type_store = module_type_store
    l2norm.stypy_function_name = 'l2norm'
    l2norm.stypy_param_names_list = ['a']
    l2norm.stypy_varargs_param_name = None
    l2norm.stypy_kwargs_param_name = None
    l2norm.stypy_call_defaults = defaults
    l2norm.stypy_call_varargs = varargs
    l2norm.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'l2norm', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'l2norm', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'l2norm(...)' code ##################

    unicode_90908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2097, (-1)), 'unicode', u'\n    Return the *l2* norm of *a*, flattened out.\n\n    Implemented as a separate function (not a call to :func:`norm` for speed).\n    ')
    
    # Call to sqrt(...): (line 2098)
    # Processing the call arguments (line 2098)
    
    # Call to sum(...): (line 2098)
    # Processing the call arguments (line 2098)
    
    # Call to abs(...): (line 2098)
    # Processing the call arguments (line 2098)
    # Getting the type of 'a' (line 2098)
    a_90915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2098, 33), 'a', False)
    # Processing the call keyword arguments (line 2098)
    kwargs_90916 = {}
    # Getting the type of 'np' (line 2098)
    np_90913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2098, 26), 'np', False)
    # Obtaining the member 'abs' of a type (line 2098)
    abs_90914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2098, 26), np_90913, 'abs')
    # Calling abs(args, kwargs) (line 2098)
    abs_call_result_90917 = invoke(stypy.reporting.localization.Localization(__file__, 2098, 26), abs_90914, *[a_90915], **kwargs_90916)
    
    int_90918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2098, 39), 'int')
    # Applying the binary operator '**' (line 2098)
    result_pow_90919 = python_operator(stypy.reporting.localization.Localization(__file__, 2098, 26), '**', abs_call_result_90917, int_90918)
    
    # Processing the call keyword arguments (line 2098)
    kwargs_90920 = {}
    # Getting the type of 'np' (line 2098)
    np_90911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2098, 19), 'np', False)
    # Obtaining the member 'sum' of a type (line 2098)
    sum_90912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2098, 19), np_90911, 'sum')
    # Calling sum(args, kwargs) (line 2098)
    sum_call_result_90921 = invoke(stypy.reporting.localization.Localization(__file__, 2098, 19), sum_90912, *[result_pow_90919], **kwargs_90920)
    
    # Processing the call keyword arguments (line 2098)
    kwargs_90922 = {}
    # Getting the type of 'np' (line 2098)
    np_90909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2098, 11), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 2098)
    sqrt_90910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2098, 11), np_90909, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2098)
    sqrt_call_result_90923 = invoke(stypy.reporting.localization.Localization(__file__, 2098, 11), sqrt_90910, *[sum_call_result_90921], **kwargs_90922)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2098)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2098, 4), 'stypy_return_type', sqrt_call_result_90923)
    
    # ################# End of 'l2norm(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'l2norm' in the type store
    # Getting the type of 'stypy_return_type' (line 2092)
    stypy_return_type_90924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2092, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_90924)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'l2norm'
    return stypy_return_type_90924

# Assigning a type to the variable 'l2norm' (line 2092)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2092, 0), 'l2norm', l2norm)

@norecursion
def norm_flat(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_90925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2101, 19), 'int')
    defaults = [int_90925]
    # Create a new context for function 'norm_flat'
    module_type_store = module_type_store.open_function_context('norm_flat', 2101, 0, False)
    
    # Passed parameters checking function
    norm_flat.stypy_localization = localization
    norm_flat.stypy_type_of_self = None
    norm_flat.stypy_type_store = module_type_store
    norm_flat.stypy_function_name = 'norm_flat'
    norm_flat.stypy_param_names_list = ['a', 'p']
    norm_flat.stypy_varargs_param_name = None
    norm_flat.stypy_kwargs_param_name = None
    norm_flat.stypy_call_defaults = defaults
    norm_flat.stypy_call_varargs = varargs
    norm_flat.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'norm_flat', ['a', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'norm_flat', localization, ['a', 'p'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'norm_flat(...)' code ##################

    unicode_90926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2109, (-1)), 'unicode', u"\n    norm(a,p=2) -> l-p norm of a.flat\n\n    Return the l-p norm of *a*, considered as a flat array.  This is NOT a true\n    matrix norm, since arrays of arbitrary rank are always flattened.\n\n    *p* can be a number or the string 'Infinity' to get the L-infinity norm.\n    ")
    
    
    # Getting the type of 'p' (line 2112)
    p_90927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2112, 7), 'p')
    unicode_90928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2112, 12), 'unicode', u'Infinity')
    # Applying the binary operator '==' (line 2112)
    result_eq_90929 = python_operator(stypy.reporting.localization.Localization(__file__, 2112, 7), '==', p_90927, unicode_90928)
    
    # Testing the type of an if condition (line 2112)
    if_condition_90930 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2112, 4), result_eq_90929)
    # Assigning a type to the variable 'if_condition_90930' (line 2112)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2112, 4), 'if_condition_90930', if_condition_90930)
    # SSA begins for if statement (line 2112)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to max(...): (line 2113)
    # Processing the call arguments (line 2113)
    
    # Call to abs(...): (line 2113)
    # Processing the call arguments (line 2113)
    # Getting the type of 'a' (line 2113)
    a_90935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 29), 'a', False)
    # Processing the call keyword arguments (line 2113)
    kwargs_90936 = {}
    # Getting the type of 'np' (line 2113)
    np_90933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 22), 'np', False)
    # Obtaining the member 'abs' of a type (line 2113)
    abs_90934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2113, 22), np_90933, 'abs')
    # Calling abs(args, kwargs) (line 2113)
    abs_call_result_90937 = invoke(stypy.reporting.localization.Localization(__file__, 2113, 22), abs_90934, *[a_90935], **kwargs_90936)
    
    # Processing the call keyword arguments (line 2113)
    kwargs_90938 = {}
    # Getting the type of 'np' (line 2113)
    np_90931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 15), 'np', False)
    # Obtaining the member 'max' of a type (line 2113)
    max_90932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2113, 15), np_90931, 'max')
    # Calling max(args, kwargs) (line 2113)
    max_call_result_90939 = invoke(stypy.reporting.localization.Localization(__file__, 2113, 15), max_90932, *[abs_call_result_90937], **kwargs_90938)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2113)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2113, 8), 'stypy_return_type', max_call_result_90939)
    # SSA branch for the else part of an if statement (line 2112)
    module_type_store.open_ssa_branch('else')
    
    # Call to sum(...): (line 2115)
    # Processing the call arguments (line 2115)
    
    # Call to abs(...): (line 2115)
    # Processing the call arguments (line 2115)
    # Getting the type of 'a' (line 2115)
    a_90944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 29), 'a', False)
    # Processing the call keyword arguments (line 2115)
    kwargs_90945 = {}
    # Getting the type of 'np' (line 2115)
    np_90942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 22), 'np', False)
    # Obtaining the member 'abs' of a type (line 2115)
    abs_90943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2115, 22), np_90942, 'abs')
    # Calling abs(args, kwargs) (line 2115)
    abs_call_result_90946 = invoke(stypy.reporting.localization.Localization(__file__, 2115, 22), abs_90943, *[a_90944], **kwargs_90945)
    
    # Getting the type of 'p' (line 2115)
    p_90947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 35), 'p', False)
    # Applying the binary operator '**' (line 2115)
    result_pow_90948 = python_operator(stypy.reporting.localization.Localization(__file__, 2115, 22), '**', abs_call_result_90946, p_90947)
    
    # Processing the call keyword arguments (line 2115)
    kwargs_90949 = {}
    # Getting the type of 'np' (line 2115)
    np_90940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 15), 'np', False)
    # Obtaining the member 'sum' of a type (line 2115)
    sum_90941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2115, 15), np_90940, 'sum')
    # Calling sum(args, kwargs) (line 2115)
    sum_call_result_90950 = invoke(stypy.reporting.localization.Localization(__file__, 2115, 15), sum_90941, *[result_pow_90948], **kwargs_90949)
    
    int_90951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2115, 42), 'int')
    # Getting the type of 'p' (line 2115)
    p_90952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 46), 'p')
    # Applying the binary operator 'div' (line 2115)
    result_div_90953 = python_operator(stypy.reporting.localization.Localization(__file__, 2115, 42), 'div', int_90951, p_90952)
    
    # Applying the binary operator '**' (line 2115)
    result_pow_90954 = python_operator(stypy.reporting.localization.Localization(__file__, 2115, 15), '**', sum_call_result_90950, result_div_90953)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2115)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2115, 8), 'stypy_return_type', result_pow_90954)
    # SSA join for if statement (line 2112)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'norm_flat(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'norm_flat' in the type store
    # Getting the type of 'stypy_return_type' (line 2101)
    stypy_return_type_90955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2101, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_90955)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'norm_flat'
    return stypy_return_type_90955

# Assigning a type to the variable 'norm_flat' (line 2101)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2101, 0), 'norm_flat', norm_flat)

@norecursion
def frange(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2118)
    None_90956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2118, 22), 'None')
    # Getting the type of 'None' (line 2118)
    None_90957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2118, 34), 'None')
    defaults = [None_90956, None_90957]
    # Create a new context for function 'frange'
    module_type_store = module_type_store.open_function_context('frange', 2118, 0, False)
    
    # Passed parameters checking function
    frange.stypy_localization = localization
    frange.stypy_type_of_self = None
    frange.stypy_type_store = module_type_store
    frange.stypy_function_name = 'frange'
    frange.stypy_param_names_list = ['xini', 'xfin', 'delta']
    frange.stypy_varargs_param_name = None
    frange.stypy_kwargs_param_name = 'kw'
    frange.stypy_call_defaults = defaults
    frange.stypy_call_varargs = varargs
    frange.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'frange', ['xini', 'xfin', 'delta'], None, 'kw', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'frange', localization, ['xini', 'xfin', 'delta'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'frange(...)' code ##################

    unicode_90958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2156, (-1)), 'unicode', u"\n    frange([start,] stop[, step, keywords]) -> array of floats\n\n    Return a numpy ndarray containing a progression of floats. Similar to\n    :func:`numpy.arange`, but defaults to a closed interval.\n\n    ``frange(x0, x1)`` returns ``[x0, x0+1, x0+2, ..., x1]``; *start*\n    defaults to 0, and the endpoint *is included*. This behavior is\n    different from that of :func:`range` and\n    :func:`numpy.arange`. This is deliberate, since :func:`frange`\n    will probably be more useful for generating lists of points for\n    function evaluation, and endpoints are often desired in this\n    use. The usual behavior of :func:`range` can be obtained by\n    setting the keyword *closed* = 0, in this case, :func:`frange`\n    basically becomes :func:numpy.arange`.\n\n    When *step* is given, it specifies the increment (or\n    decrement). All arguments can be floating point numbers.\n\n    ``frange(x0,x1,d)`` returns ``[x0,x0+d,x0+2d,...,xfin]`` where\n    *xfin* <= *x1*.\n\n    :func:`frange` can also be called with the keyword *npts*. This\n    sets the number of points the list should contain (and overrides\n    the value *step* might have been given). :func:`numpy.arange`\n    doesn't offer this option.\n\n    Examples::\n\n      >>> frange(3)\n      array([ 0.,  1.,  2.,  3.])\n      >>> frange(3,closed=0)\n      array([ 0.,  1.,  2.])\n      >>> frange(1,6,2)\n      array([1, 3, 5])   or 1,3,5,7, depending on floating point vagueries\n      >>> frange(1,6.5,npts=5)\n      array([ 1.   ,  2.375,  3.75 ,  5.125,  6.5  ])\n    ")
    
    # Call to setdefault(...): (line 2159)
    # Processing the call arguments (line 2159)
    unicode_90961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2159, 18), 'unicode', u'closed')
    int_90962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2159, 28), 'int')
    # Processing the call keyword arguments (line 2159)
    kwargs_90963 = {}
    # Getting the type of 'kw' (line 2159)
    kw_90959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 4), 'kw', False)
    # Obtaining the member 'setdefault' of a type (line 2159)
    setdefault_90960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2159, 4), kw_90959, 'setdefault')
    # Calling setdefault(args, kwargs) (line 2159)
    setdefault_call_result_90964 = invoke(stypy.reporting.localization.Localization(__file__, 2159, 4), setdefault_90960, *[unicode_90961, int_90962], **kwargs_90963)
    
    
    # Assigning a Compare to a Name (line 2160):
    
    # Assigning a Compare to a Name (line 2160):
    
    # Assigning a Compare to a Name (line 2160):
    
    
    # Obtaining the type of the subscript
    unicode_90965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2160, 18), 'unicode', u'closed')
    # Getting the type of 'kw' (line 2160)
    kw_90966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 15), 'kw')
    # Obtaining the member '__getitem__' of a type (line 2160)
    getitem___90967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2160, 15), kw_90966, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2160)
    subscript_call_result_90968 = invoke(stypy.reporting.localization.Localization(__file__, 2160, 15), getitem___90967, unicode_90965)
    
    int_90969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2160, 31), 'int')
    # Applying the binary operator '!=' (line 2160)
    result_ne_90970 = python_operator(stypy.reporting.localization.Localization(__file__, 2160, 15), '!=', subscript_call_result_90968, int_90969)
    
    # Assigning a type to the variable 'endpoint' (line 2160)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2160, 4), 'endpoint', result_ne_90970)
    
    # Type idiom detected: calculating its left and rigth part (line 2165)
    # Getting the type of 'xfin' (line 2165)
    xfin_90971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 7), 'xfin')
    # Getting the type of 'None' (line 2165)
    None_90972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 15), 'None')
    
    (may_be_90973, more_types_in_union_90974) = may_be_none(xfin_90971, None_90972)

    if may_be_90973:

        if more_types_in_union_90974:
            # Runtime conditional SSA (line 2165)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 2166):
        
        # Assigning a BinOp to a Name (line 2166):
        
        # Assigning a BinOp to a Name (line 2166):
        # Getting the type of 'xini' (line 2166)
        xini_90975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 15), 'xini')
        float_90976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2166, 22), 'float')
        # Applying the binary operator '+' (line 2166)
        result_add_90977 = python_operator(stypy.reporting.localization.Localization(__file__, 2166, 15), '+', xini_90975, float_90976)
        
        # Assigning a type to the variable 'xfin' (line 2166)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2166, 8), 'xfin', result_add_90977)
        
        # Assigning a Num to a Name (line 2167):
        
        # Assigning a Num to a Name (line 2167):
        
        # Assigning a Num to a Name (line 2167):
        float_90978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2167, 15), 'float')
        # Assigning a type to the variable 'xini' (line 2167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2167, 8), 'xini', float_90978)

        if more_types_in_union_90974:
            # SSA join for if statement (line 2165)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 2169)
    # Getting the type of 'delta' (line 2169)
    delta_90979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 7), 'delta')
    # Getting the type of 'None' (line 2169)
    None_90980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 16), 'None')
    
    (may_be_90981, more_types_in_union_90982) = may_be_none(delta_90979, None_90980)

    if may_be_90981:

        if more_types_in_union_90982:
            # Runtime conditional SSA (line 2169)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 2170):
        
        # Assigning a Num to a Name (line 2170):
        
        # Assigning a Num to a Name (line 2170):
        float_90983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2170, 16), 'float')
        # Assigning a type to the variable 'delta' (line 2170)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2170, 8), 'delta', float_90983)

        if more_types_in_union_90982:
            # SSA join for if statement (line 2169)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # SSA begins for try-except statement (line 2173)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Subscript to a Name (line 2174):
    
    # Assigning a Subscript to a Name (line 2174):
    
    # Assigning a Subscript to a Name (line 2174):
    
    # Obtaining the type of the subscript
    unicode_90984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2174, 18), 'unicode', u'npts')
    # Getting the type of 'kw' (line 2174)
    kw_90985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 15), 'kw')
    # Obtaining the member '__getitem__' of a type (line 2174)
    getitem___90986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2174, 15), kw_90985, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2174)
    subscript_call_result_90987 = invoke(stypy.reporting.localization.Localization(__file__, 2174, 15), getitem___90986, unicode_90984)
    
    # Assigning a type to the variable 'npts' (line 2174)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2174, 8), 'npts', subscript_call_result_90987)
    
    # Assigning a BinOp to a Name (line 2175):
    
    # Assigning a BinOp to a Name (line 2175):
    
    # Assigning a BinOp to a Name (line 2175):
    # Getting the type of 'xfin' (line 2175)
    xfin_90988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 17), 'xfin')
    # Getting the type of 'xini' (line 2175)
    xini_90989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 22), 'xini')
    # Applying the binary operator '-' (line 2175)
    result_sub_90990 = python_operator(stypy.reporting.localization.Localization(__file__, 2175, 17), '-', xfin_90988, xini_90989)
    
    
    # Call to float(...): (line 2175)
    # Processing the call arguments (line 2175)
    # Getting the type of 'npts' (line 2175)
    npts_90992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 34), 'npts', False)
    # Getting the type of 'endpoint' (line 2175)
    endpoint_90993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 39), 'endpoint', False)
    # Applying the binary operator '-' (line 2175)
    result_sub_90994 = python_operator(stypy.reporting.localization.Localization(__file__, 2175, 34), '-', npts_90992, endpoint_90993)
    
    # Processing the call keyword arguments (line 2175)
    kwargs_90995 = {}
    # Getting the type of 'float' (line 2175)
    float_90991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 28), 'float', False)
    # Calling float(args, kwargs) (line 2175)
    float_call_result_90996 = invoke(stypy.reporting.localization.Localization(__file__, 2175, 28), float_90991, *[result_sub_90994], **kwargs_90995)
    
    # Applying the binary operator 'div' (line 2175)
    result_div_90997 = python_operator(stypy.reporting.localization.Localization(__file__, 2175, 16), 'div', result_sub_90990, float_call_result_90996)
    
    # Assigning a type to the variable 'delta' (line 2175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2175, 8), 'delta', result_div_90997)
    # SSA branch for the except part of a try statement (line 2173)
    # SSA branch for the except 'KeyError' branch of a try statement (line 2173)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a BinOp to a Name (line 2177):
    
    # Assigning a BinOp to a Name (line 2177):
    
    # Assigning a BinOp to a Name (line 2177):
    
    # Call to int(...): (line 2177)
    # Processing the call arguments (line 2177)
    
    # Call to round(...): (line 2177)
    # Processing the call arguments (line 2177)
    # Getting the type of 'xfin' (line 2177)
    xfin_91001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 29), 'xfin', False)
    # Getting the type of 'xini' (line 2177)
    xini_91002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 34), 'xini', False)
    # Applying the binary operator '-' (line 2177)
    result_sub_91003 = python_operator(stypy.reporting.localization.Localization(__file__, 2177, 29), '-', xfin_91001, xini_91002)
    
    # Getting the type of 'delta' (line 2177)
    delta_91004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 40), 'delta', False)
    # Applying the binary operator 'div' (line 2177)
    result_div_91005 = python_operator(stypy.reporting.localization.Localization(__file__, 2177, 28), 'div', result_sub_91003, delta_91004)
    
    # Processing the call keyword arguments (line 2177)
    kwargs_91006 = {}
    # Getting the type of 'np' (line 2177)
    np_90999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 19), 'np', False)
    # Obtaining the member 'round' of a type (line 2177)
    round_91000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2177, 19), np_90999, 'round')
    # Calling round(args, kwargs) (line 2177)
    round_call_result_91007 = invoke(stypy.reporting.localization.Localization(__file__, 2177, 19), round_91000, *[result_div_91005], **kwargs_91006)
    
    # Processing the call keyword arguments (line 2177)
    kwargs_91008 = {}
    # Getting the type of 'int' (line 2177)
    int_90998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 15), 'int', False)
    # Calling int(args, kwargs) (line 2177)
    int_call_result_91009 = invoke(stypy.reporting.localization.Localization(__file__, 2177, 15), int_90998, *[round_call_result_91007], **kwargs_91008)
    
    # Getting the type of 'endpoint' (line 2177)
    endpoint_91010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 50), 'endpoint')
    # Applying the binary operator '+' (line 2177)
    result_add_91011 = python_operator(stypy.reporting.localization.Localization(__file__, 2177, 15), '+', int_call_result_91009, endpoint_91010)
    
    # Assigning a type to the variable 'npts' (line 2177)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2177, 8), 'npts', result_add_91011)
    # SSA join for try-except statement (line 2173)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to arange(...): (line 2181)
    # Processing the call arguments (line 2181)
    # Getting the type of 'npts' (line 2181)
    npts_91014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 21), 'npts', False)
    # Processing the call keyword arguments (line 2181)
    kwargs_91015 = {}
    # Getting the type of 'np' (line 2181)
    np_91012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 11), 'np', False)
    # Obtaining the member 'arange' of a type (line 2181)
    arange_91013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2181, 11), np_91012, 'arange')
    # Calling arange(args, kwargs) (line 2181)
    arange_call_result_91016 = invoke(stypy.reporting.localization.Localization(__file__, 2181, 11), arange_91013, *[npts_91014], **kwargs_91015)
    
    # Getting the type of 'delta' (line 2181)
    delta_91017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 27), 'delta')
    # Applying the binary operator '*' (line 2181)
    result_mul_91018 = python_operator(stypy.reporting.localization.Localization(__file__, 2181, 11), '*', arange_call_result_91016, delta_91017)
    
    # Getting the type of 'xini' (line 2181)
    xini_91019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 33), 'xini')
    # Applying the binary operator '+' (line 2181)
    result_add_91020 = python_operator(stypy.reporting.localization.Localization(__file__, 2181, 11), '+', result_mul_91018, xini_91019)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2181, 4), 'stypy_return_type', result_add_91020)
    
    # ################# End of 'frange(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'frange' in the type store
    # Getting the type of 'stypy_return_type' (line 2118)
    stypy_return_type_91021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2118, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_91021)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'frange'
    return stypy_return_type_91021

# Assigning a type to the variable 'frange' (line 2118)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2118, 0), 'frange', frange)

@norecursion
def identity(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_91022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2185, 21), 'int')
    unicode_91023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2185, 30), 'unicode', u'l')
    # Getting the type of 'None' (line 2185)
    None_91024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 44), 'None')
    defaults = [int_91022, unicode_91023, None_91024]
    # Create a new context for function 'identity'
    module_type_store = module_type_store.open_function_context('identity', 2185, 0, False)
    
    # Passed parameters checking function
    identity.stypy_localization = localization
    identity.stypy_type_of_self = None
    identity.stypy_type_store = module_type_store
    identity.stypy_function_name = 'identity'
    identity.stypy_param_names_list = ['n', 'rank', 'dtype', 'typecode']
    identity.stypy_varargs_param_name = None
    identity.stypy_kwargs_param_name = None
    identity.stypy_call_defaults = defaults
    identity.stypy_call_varargs = varargs
    identity.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'identity', ['n', 'rank', 'dtype', 'typecode'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'identity', localization, ['n', 'rank', 'dtype', 'typecode'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'identity(...)' code ##################

    unicode_91025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2201, (-1)), 'unicode', u"\n    Returns the identity matrix of shape (*n*, *n*, ..., *n*) (rank *r*).\n\n    For ranks higher than 2, this object is simply a multi-index Kronecker\n    delta::\n\n                            /  1  if i0=i1=...=iR,\n        id[i0,i1,...,iR] = -|\n                            \\  0  otherwise.\n\n    Optionally a *dtype* (or typecode) may be given (it defaults to 'l').\n\n    Since rank defaults to 2, this function behaves in the default case (when\n    only *n* is given) like ``numpy.identity(n)`` -- but surprisingly, it is\n    much faster.\n    ")
    
    # Type idiom detected: calculating its left and rigth part (line 2202)
    # Getting the type of 'typecode' (line 2202)
    typecode_91026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 4), 'typecode')
    # Getting the type of 'None' (line 2202)
    None_91027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 23), 'None')
    
    (may_be_91028, more_types_in_union_91029) = may_not_be_none(typecode_91026, None_91027)

    if may_be_91028:

        if more_types_in_union_91029:
            # Runtime conditional SSA (line 2202)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Name (line 2203):
        
        # Assigning a Name to a Name (line 2203):
        
        # Assigning a Name to a Name (line 2203):
        # Getting the type of 'typecode' (line 2203)
        typecode_91030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 16), 'typecode')
        # Assigning a type to the variable 'dtype' (line 2203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2203, 8), 'dtype', typecode_91030)

        if more_types_in_union_91029:
            # SSA join for if statement (line 2202)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 2204):
    
    # Assigning a Call to a Name (line 2204):
    
    # Assigning a Call to a Name (line 2204):
    
    # Call to zeros(...): (line 2204)
    # Processing the call arguments (line 2204)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2204)
    tuple_91033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2204, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2204)
    # Adding element type (line 2204)
    # Getting the type of 'n' (line 2204)
    n_91034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 21), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2204, 21), tuple_91033, n_91034)
    
    # Getting the type of 'rank' (line 2204)
    rank_91035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 25), 'rank', False)
    # Applying the binary operator '*' (line 2204)
    result_mul_91036 = python_operator(stypy.reporting.localization.Localization(__file__, 2204, 20), '*', tuple_91033, rank_91035)
    
    # Getting the type of 'dtype' (line 2204)
    dtype_91037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 31), 'dtype', False)
    # Processing the call keyword arguments (line 2204)
    kwargs_91038 = {}
    # Getting the type of 'np' (line 2204)
    np_91031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 11), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2204)
    zeros_91032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2204, 11), np_91031, 'zeros')
    # Calling zeros(args, kwargs) (line 2204)
    zeros_call_result_91039 = invoke(stypy.reporting.localization.Localization(__file__, 2204, 11), zeros_91032, *[result_mul_91036, dtype_91037], **kwargs_91038)
    
    # Assigning a type to the variable 'iden' (line 2204)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2204, 4), 'iden', zeros_call_result_91039)
    
    
    # Call to range(...): (line 2205)
    # Processing the call arguments (line 2205)
    # Getting the type of 'n' (line 2205)
    n_91041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 19), 'n', False)
    # Processing the call keyword arguments (line 2205)
    kwargs_91042 = {}
    # Getting the type of 'range' (line 2205)
    range_91040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 13), 'range', False)
    # Calling range(args, kwargs) (line 2205)
    range_call_result_91043 = invoke(stypy.reporting.localization.Localization(__file__, 2205, 13), range_91040, *[n_91041], **kwargs_91042)
    
    # Testing the type of a for loop iterable (line 2205)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2205, 4), range_call_result_91043)
    # Getting the type of the for loop variable (line 2205)
    for_loop_var_91044 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2205, 4), range_call_result_91043)
    # Assigning a type to the variable 'i' (line 2205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2205, 4), 'i', for_loop_var_91044)
    # SSA begins for a for statement (line 2205)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 2206):
    
    # Assigning a BinOp to a Name (line 2206):
    
    # Assigning a BinOp to a Name (line 2206):
    
    # Obtaining an instance of the builtin type 'tuple' (line 2206)
    tuple_91045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2206, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2206)
    # Adding element type (line 2206)
    # Getting the type of 'i' (line 2206)
    i_91046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 15), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2206, 15), tuple_91045, i_91046)
    
    # Getting the type of 'rank' (line 2206)
    rank_91047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 19), 'rank')
    # Applying the binary operator '*' (line 2206)
    result_mul_91048 = python_operator(stypy.reporting.localization.Localization(__file__, 2206, 14), '*', tuple_91045, rank_91047)
    
    # Assigning a type to the variable 'idx' (line 2206)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2206, 8), 'idx', result_mul_91048)
    
    # Assigning a Num to a Subscript (line 2207):
    
    # Assigning a Num to a Subscript (line 2207):
    
    # Assigning a Num to a Subscript (line 2207):
    int_91049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2207, 20), 'int')
    # Getting the type of 'iden' (line 2207)
    iden_91050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 8), 'iden')
    # Getting the type of 'idx' (line 2207)
    idx_91051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 13), 'idx')
    # Storing an element on a container (line 2207)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2207, 8), iden_91050, (idx_91051, int_91049))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'iden' (line 2208)
    iden_91052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 11), 'iden')
    # Assigning a type to the variable 'stypy_return_type' (line 2208)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2208, 4), 'stypy_return_type', iden_91052)
    
    # ################# End of 'identity(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'identity' in the type store
    # Getting the type of 'stypy_return_type' (line 2185)
    stypy_return_type_91053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_91053)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'identity'
    return stypy_return_type_91053

# Assigning a type to the variable 'identity' (line 2185)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2185, 0), 'identity', identity)

@norecursion
def base_repr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_91054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2211, 27), 'int')
    int_91055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2211, 38), 'int')
    defaults = [int_91054, int_91055]
    # Create a new context for function 'base_repr'
    module_type_store = module_type_store.open_function_context('base_repr', 2211, 0, False)
    
    # Passed parameters checking function
    base_repr.stypy_localization = localization
    base_repr.stypy_type_of_self = None
    base_repr.stypy_type_store = module_type_store
    base_repr.stypy_function_name = 'base_repr'
    base_repr.stypy_param_names_list = ['number', 'base', 'padding']
    base_repr.stypy_varargs_param_name = None
    base_repr.stypy_kwargs_param_name = None
    base_repr.stypy_call_defaults = defaults
    base_repr.stypy_call_varargs = varargs
    base_repr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'base_repr', ['number', 'base', 'padding'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'base_repr', localization, ['number', 'base', 'padding'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'base_repr(...)' code ##################

    unicode_91056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2214, (-1)), 'unicode', u'\n    Return the representation of a *number* in any given *base*.\n    ')
    
    # Assigning a Str to a Name (line 2215):
    
    # Assigning a Str to a Name (line 2215):
    
    # Assigning a Str to a Name (line 2215):
    unicode_91057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2215, 12), 'unicode', u'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ')
    # Assigning a type to the variable 'chars' (line 2215)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2215, 4), 'chars', unicode_91057)
    
    
    # Getting the type of 'number' (line 2216)
    number_91058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2216, 7), 'number')
    # Getting the type of 'base' (line 2216)
    base_91059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2216, 16), 'base')
    # Applying the binary operator '<' (line 2216)
    result_lt_91060 = python_operator(stypy.reporting.localization.Localization(__file__, 2216, 7), '<', number_91058, base_91059)
    
    # Testing the type of an if condition (line 2216)
    if_condition_91061 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2216, 4), result_lt_91060)
    # Assigning a type to the variable 'if_condition_91061' (line 2216)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2216, 4), 'if_condition_91061', if_condition_91061)
    # SSA begins for if statement (line 2216)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'padding' (line 2217)
    padding_91062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 16), 'padding')
    int_91063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2217, 26), 'int')
    # Applying the binary operator '-' (line 2217)
    result_sub_91064 = python_operator(stypy.reporting.localization.Localization(__file__, 2217, 16), '-', padding_91062, int_91063)
    
    
    # Obtaining the type of the subscript
    int_91065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2217, 37), 'int')
    # Getting the type of 'chars' (line 2217)
    chars_91066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 31), 'chars')
    # Obtaining the member '__getitem__' of a type (line 2217)
    getitem___91067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2217, 31), chars_91066, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2217)
    subscript_call_result_91068 = invoke(stypy.reporting.localization.Localization(__file__, 2217, 31), getitem___91067, int_91065)
    
    # Applying the binary operator '*' (line 2217)
    result_mul_91069 = python_operator(stypy.reporting.localization.Localization(__file__, 2217, 15), '*', result_sub_91064, subscript_call_result_91068)
    
    
    # Obtaining the type of the subscript
    
    # Call to int(...): (line 2217)
    # Processing the call arguments (line 2217)
    # Getting the type of 'number' (line 2217)
    number_91071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 52), 'number', False)
    # Processing the call keyword arguments (line 2217)
    kwargs_91072 = {}
    # Getting the type of 'int' (line 2217)
    int_91070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 48), 'int', False)
    # Calling int(args, kwargs) (line 2217)
    int_call_result_91073 = invoke(stypy.reporting.localization.Localization(__file__, 2217, 48), int_91070, *[number_91071], **kwargs_91072)
    
    # Getting the type of 'chars' (line 2217)
    chars_91074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 42), 'chars')
    # Obtaining the member '__getitem__' of a type (line 2217)
    getitem___91075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2217, 42), chars_91074, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2217)
    subscript_call_result_91076 = invoke(stypy.reporting.localization.Localization(__file__, 2217, 42), getitem___91075, int_call_result_91073)
    
    # Applying the binary operator '+' (line 2217)
    result_add_91077 = python_operator(stypy.reporting.localization.Localization(__file__, 2217, 15), '+', result_mul_91069, subscript_call_result_91076)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2217)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2217, 8), 'stypy_return_type', result_add_91077)
    # SSA join for if statement (line 2216)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2218):
    
    # Assigning a Call to a Name (line 2218):
    
    # Assigning a Call to a Name (line 2218):
    
    # Call to int(...): (line 2218)
    # Processing the call arguments (line 2218)
    
    # Call to log(...): (line 2218)
    # Processing the call arguments (line 2218)
    # Getting the type of 'number' (line 2218)
    number_91081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 32), 'number', False)
    # Processing the call keyword arguments (line 2218)
    kwargs_91082 = {}
    # Getting the type of 'math' (line 2218)
    math_91079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 23), 'math', False)
    # Obtaining the member 'log' of a type (line 2218)
    log_91080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2218, 23), math_91079, 'log')
    # Calling log(args, kwargs) (line 2218)
    log_call_result_91083 = invoke(stypy.reporting.localization.Localization(__file__, 2218, 23), log_91080, *[number_91081], **kwargs_91082)
    
    
    # Call to log(...): (line 2218)
    # Processing the call arguments (line 2218)
    # Getting the type of 'base' (line 2218)
    base_91086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 49), 'base', False)
    # Processing the call keyword arguments (line 2218)
    kwargs_91087 = {}
    # Getting the type of 'math' (line 2218)
    math_91084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 40), 'math', False)
    # Obtaining the member 'log' of a type (line 2218)
    log_91085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2218, 40), math_91084, 'log')
    # Calling log(args, kwargs) (line 2218)
    log_call_result_91088 = invoke(stypy.reporting.localization.Localization(__file__, 2218, 40), log_91085, *[base_91086], **kwargs_91087)
    
    # Applying the binary operator 'div' (line 2218)
    result_div_91089 = python_operator(stypy.reporting.localization.Localization(__file__, 2218, 23), 'div', log_call_result_91083, log_call_result_91088)
    
    # Processing the call keyword arguments (line 2218)
    kwargs_91090 = {}
    # Getting the type of 'int' (line 2218)
    int_91078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 19), 'int', False)
    # Calling int(args, kwargs) (line 2218)
    int_call_result_91091 = invoke(stypy.reporting.localization.Localization(__file__, 2218, 19), int_91078, *[result_div_91089], **kwargs_91090)
    
    # Assigning a type to the variable 'max_exponent' (line 2218)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2218, 4), 'max_exponent', int_call_result_91091)
    
    # Assigning a BinOp to a Name (line 2219):
    
    # Assigning a BinOp to a Name (line 2219):
    
    # Assigning a BinOp to a Name (line 2219):
    
    # Call to long(...): (line 2219)
    # Processing the call arguments (line 2219)
    # Getting the type of 'base' (line 2219)
    base_91093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 21), 'base', False)
    # Processing the call keyword arguments (line 2219)
    kwargs_91094 = {}
    # Getting the type of 'long' (line 2219)
    long_91092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 16), 'long', False)
    # Calling long(args, kwargs) (line 2219)
    long_call_result_91095 = invoke(stypy.reporting.localization.Localization(__file__, 2219, 16), long_91092, *[base_91093], **kwargs_91094)
    
    # Getting the type of 'max_exponent' (line 2219)
    max_exponent_91096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 30), 'max_exponent')
    # Applying the binary operator '**' (line 2219)
    result_pow_91097 = python_operator(stypy.reporting.localization.Localization(__file__, 2219, 16), '**', long_call_result_91095, max_exponent_91096)
    
    # Assigning a type to the variable 'max_power' (line 2219)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2219, 4), 'max_power', result_pow_91097)
    
    # Assigning a Call to a Name (line 2220):
    
    # Assigning a Call to a Name (line 2220):
    
    # Assigning a Call to a Name (line 2220):
    
    # Call to int(...): (line 2220)
    # Processing the call arguments (line 2220)
    # Getting the type of 'number' (line 2220)
    number_91099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 21), 'number', False)
    # Getting the type of 'max_power' (line 2220)
    max_power_91100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 28), 'max_power', False)
    # Applying the binary operator 'div' (line 2220)
    result_div_91101 = python_operator(stypy.reporting.localization.Localization(__file__, 2220, 21), 'div', number_91099, max_power_91100)
    
    # Processing the call keyword arguments (line 2220)
    kwargs_91102 = {}
    # Getting the type of 'int' (line 2220)
    int_91098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 17), 'int', False)
    # Calling int(args, kwargs) (line 2220)
    int_call_result_91103 = invoke(stypy.reporting.localization.Localization(__file__, 2220, 17), int_91098, *[result_div_91101], **kwargs_91102)
    
    # Assigning a type to the variable 'lead_digit' (line 2220)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2220, 4), 'lead_digit', int_call_result_91103)
    
    # Obtaining the type of the subscript
    # Getting the type of 'lead_digit' (line 2221)
    lead_digit_91104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 18), 'lead_digit')
    # Getting the type of 'chars' (line 2221)
    chars_91105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 12), 'chars')
    # Obtaining the member '__getitem__' of a type (line 2221)
    getitem___91106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2221, 12), chars_91105, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2221)
    subscript_call_result_91107 = invoke(stypy.reporting.localization.Localization(__file__, 2221, 12), getitem___91106, lead_digit_91104)
    
    
    # Call to base_repr(...): (line 2222)
    # Processing the call arguments (line 2222)
    # Getting the type of 'number' (line 2222)
    number_91109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 22), 'number', False)
    # Getting the type of 'max_power' (line 2222)
    max_power_91110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 31), 'max_power', False)
    # Getting the type of 'lead_digit' (line 2222)
    lead_digit_91111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 43), 'lead_digit', False)
    # Applying the binary operator '*' (line 2222)
    result_mul_91112 = python_operator(stypy.reporting.localization.Localization(__file__, 2222, 31), '*', max_power_91110, lead_digit_91111)
    
    # Applying the binary operator '-' (line 2222)
    result_sub_91113 = python_operator(stypy.reporting.localization.Localization(__file__, 2222, 22), '-', number_91109, result_mul_91112)
    
    # Getting the type of 'base' (line 2222)
    base_91114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 55), 'base', False)
    
    # Call to max(...): (line 2223)
    # Processing the call arguments (line 2223)
    # Getting the type of 'padding' (line 2223)
    padding_91116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 26), 'padding', False)
    int_91117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2223, 36), 'int')
    # Applying the binary operator '-' (line 2223)
    result_sub_91118 = python_operator(stypy.reporting.localization.Localization(__file__, 2223, 26), '-', padding_91116, int_91117)
    
    # Getting the type of 'max_exponent' (line 2223)
    max_exponent_91119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 39), 'max_exponent', False)
    # Processing the call keyword arguments (line 2223)
    kwargs_91120 = {}
    # Getting the type of 'max' (line 2223)
    max_91115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 22), 'max', False)
    # Calling max(args, kwargs) (line 2223)
    max_call_result_91121 = invoke(stypy.reporting.localization.Localization(__file__, 2223, 22), max_91115, *[result_sub_91118, max_exponent_91119], **kwargs_91120)
    
    # Processing the call keyword arguments (line 2222)
    kwargs_91122 = {}
    # Getting the type of 'base_repr' (line 2222)
    base_repr_91108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 12), 'base_repr', False)
    # Calling base_repr(args, kwargs) (line 2222)
    base_repr_call_result_91123 = invoke(stypy.reporting.localization.Localization(__file__, 2222, 12), base_repr_91108, *[result_sub_91113, base_91114, max_call_result_91121], **kwargs_91122)
    
    # Applying the binary operator '+' (line 2221)
    result_add_91124 = python_operator(stypy.reporting.localization.Localization(__file__, 2221, 12), '+', subscript_call_result_91107, base_repr_call_result_91123)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2221, 4), 'stypy_return_type', result_add_91124)
    
    # ################# End of 'base_repr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'base_repr' in the type store
    # Getting the type of 'stypy_return_type' (line 2211)
    stypy_return_type_91125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_91125)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'base_repr'
    return stypy_return_type_91125

# Assigning a type to the variable 'base_repr' (line 2211)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2211, 0), 'base_repr', base_repr)

@norecursion
def binary_repr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_91126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2226, 35), 'int')
    defaults = [int_91126]
    # Create a new context for function 'binary_repr'
    module_type_store = module_type_store.open_function_context('binary_repr', 2226, 0, False)
    
    # Passed parameters checking function
    binary_repr.stypy_localization = localization
    binary_repr.stypy_type_of_self = None
    binary_repr.stypy_type_store = module_type_store
    binary_repr.stypy_function_name = 'binary_repr'
    binary_repr.stypy_param_names_list = ['number', 'max_length']
    binary_repr.stypy_varargs_param_name = None
    binary_repr.stypy_kwargs_param_name = None
    binary_repr.stypy_call_defaults = defaults
    binary_repr.stypy_call_varargs = varargs
    binary_repr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'binary_repr', ['number', 'max_length'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'binary_repr', localization, ['number', 'max_length'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'binary_repr(...)' code ##################

    unicode_91127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2236, (-1)), 'unicode', u'\n    Return the binary representation of the input *number* as a\n    string.\n\n    This is more efficient than using :func:`base_repr` with base 2.\n\n    Increase the value of max_length for very large numbers. Note that\n    on 32-bit machines, 2**1023 is the largest integer power of 2\n    which can be converted to a Python float.\n    ')
    
    # Assigning a Call to a Name (line 2239):
    
    # Assigning a Call to a Name (line 2239):
    
    # Assigning a Call to a Name (line 2239):
    
    # Call to map(...): (line 2239)
    # Processing the call arguments (line 2239)
    # Getting the type of 'operator' (line 2239)
    operator_91129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 17), 'operator', False)
    # Obtaining the member 'rshift' of a type (line 2239)
    rshift_91130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2239, 17), operator_91129, 'rshift')
    # Getting the type of 'max_length' (line 2239)
    max_length_91131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 34), 'max_length', False)
    
    # Obtaining an instance of the builtin type 'list' (line 2239)
    list_91132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2239, 47), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2239)
    # Adding element type (line 2239)
    # Getting the type of 'number' (line 2239)
    number_91133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 48), 'number', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2239, 47), list_91132, number_91133)
    
    # Applying the binary operator '*' (line 2239)
    result_mul_91134 = python_operator(stypy.reporting.localization.Localization(__file__, 2239, 34), '*', max_length_91131, list_91132)
    
    
    # Call to range(...): (line 2240)
    # Processing the call arguments (line 2240)
    # Getting the type of 'max_length' (line 2240)
    max_length_91136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 23), 'max_length', False)
    int_91137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2240, 36), 'int')
    # Applying the binary operator '-' (line 2240)
    result_sub_91138 = python_operator(stypy.reporting.localization.Localization(__file__, 2240, 23), '-', max_length_91136, int_91137)
    
    int_91139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2240, 39), 'int')
    int_91140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2240, 43), 'int')
    # Processing the call keyword arguments (line 2240)
    kwargs_91141 = {}
    # Getting the type of 'range' (line 2240)
    range_91135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 17), 'range', False)
    # Calling range(args, kwargs) (line 2240)
    range_call_result_91142 = invoke(stypy.reporting.localization.Localization(__file__, 2240, 17), range_91135, *[result_sub_91138, int_91139, int_91140], **kwargs_91141)
    
    # Processing the call keyword arguments (line 2239)
    kwargs_91143 = {}
    # Getting the type of 'map' (line 2239)
    map_91128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 13), 'map', False)
    # Calling map(args, kwargs) (line 2239)
    map_call_result_91144 = invoke(stypy.reporting.localization.Localization(__file__, 2239, 13), map_91128, *[rshift_91130, result_mul_91134, range_call_result_91142], **kwargs_91143)
    
    # Assigning a type to the variable 'shifts' (line 2239)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2239, 4), 'shifts', map_call_result_91144)
    
    # Assigning a Call to a Name (line 2241):
    
    # Assigning a Call to a Name (line 2241):
    
    # Assigning a Call to a Name (line 2241):
    
    # Call to list(...): (line 2241)
    # Processing the call arguments (line 2241)
    
    # Call to map(...): (line 2241)
    # Processing the call arguments (line 2241)
    # Getting the type of 'operator' (line 2241)
    operator_91147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 22), 'operator', False)
    # Obtaining the member 'mod' of a type (line 2241)
    mod_91148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2241, 22), operator_91147, 'mod')
    # Getting the type of 'shifts' (line 2241)
    shifts_91149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 36), 'shifts', False)
    # Getting the type of 'max_length' (line 2241)
    max_length_91150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 44), 'max_length', False)
    
    # Obtaining an instance of the builtin type 'list' (line 2241)
    list_91151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2241, 57), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2241)
    # Adding element type (line 2241)
    int_91152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2241, 58), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2241, 57), list_91151, int_91152)
    
    # Applying the binary operator '*' (line 2241)
    result_mul_91153 = python_operator(stypy.reporting.localization.Localization(__file__, 2241, 44), '*', max_length_91150, list_91151)
    
    # Processing the call keyword arguments (line 2241)
    kwargs_91154 = {}
    # Getting the type of 'map' (line 2241)
    map_91146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 18), 'map', False)
    # Calling map(args, kwargs) (line 2241)
    map_call_result_91155 = invoke(stypy.reporting.localization.Localization(__file__, 2241, 18), map_91146, *[mod_91148, shifts_91149, result_mul_91153], **kwargs_91154)
    
    # Processing the call keyword arguments (line 2241)
    kwargs_91156 = {}
    # Getting the type of 'list' (line 2241)
    list_91145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 13), 'list', False)
    # Calling list(args, kwargs) (line 2241)
    list_call_result_91157 = invoke(stypy.reporting.localization.Localization(__file__, 2241, 13), list_91145, *[map_call_result_91155], **kwargs_91156)
    
    # Assigning a type to the variable 'digits' (line 2241)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2241, 4), 'digits', list_call_result_91157)
    
    
    
    # Call to count(...): (line 2242)
    # Processing the call arguments (line 2242)
    int_91160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2242, 24), 'int')
    # Processing the call keyword arguments (line 2242)
    kwargs_91161 = {}
    # Getting the type of 'digits' (line 2242)
    digits_91158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 11), 'digits', False)
    # Obtaining the member 'count' of a type (line 2242)
    count_91159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2242, 11), digits_91158, 'count')
    # Calling count(args, kwargs) (line 2242)
    count_call_result_91162 = invoke(stypy.reporting.localization.Localization(__file__, 2242, 11), count_91159, *[int_91160], **kwargs_91161)
    
    # Applying the 'not' unary operator (line 2242)
    result_not__91163 = python_operator(stypy.reporting.localization.Localization(__file__, 2242, 7), 'not', count_call_result_91162)
    
    # Testing the type of an if condition (line 2242)
    if_condition_91164 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2242, 4), result_not__91163)
    # Assigning a type to the variable 'if_condition_91164' (line 2242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2242, 4), 'if_condition_91164', if_condition_91164)
    # SSA begins for if statement (line 2242)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    int_91165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2243, 15), 'int')
    # Assigning a type to the variable 'stypy_return_type' (line 2243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 8), 'stypy_return_type', int_91165)
    # SSA join for if statement (line 2242)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 2244):
    
    # Assigning a Subscript to a Name (line 2244):
    
    # Assigning a Subscript to a Name (line 2244):
    
    # Obtaining the type of the subscript
    
    # Call to index(...): (line 2244)
    # Processing the call arguments (line 2244)
    int_91168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2244, 33), 'int')
    # Processing the call keyword arguments (line 2244)
    kwargs_91169 = {}
    # Getting the type of 'digits' (line 2244)
    digits_91166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 20), 'digits', False)
    # Obtaining the member 'index' of a type (line 2244)
    index_91167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2244, 20), digits_91166, 'index')
    # Calling index(args, kwargs) (line 2244)
    index_call_result_91170 = invoke(stypy.reporting.localization.Localization(__file__, 2244, 20), index_91167, *[int_91168], **kwargs_91169)
    
    slice_91171 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2244, 13), index_call_result_91170, None, None)
    # Getting the type of 'digits' (line 2244)
    digits_91172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 13), 'digits')
    # Obtaining the member '__getitem__' of a type (line 2244)
    getitem___91173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2244, 13), digits_91172, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2244)
    subscript_call_result_91174 = invoke(stypy.reporting.localization.Localization(__file__, 2244, 13), getitem___91173, slice_91171)
    
    # Assigning a type to the variable 'digits' (line 2244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2244, 4), 'digits', subscript_call_result_91174)
    
    # Call to replace(...): (line 2245)
    # Processing the call arguments (line 2245)
    unicode_91185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2245, 46), 'unicode', u'L')
    unicode_91186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2245, 51), 'unicode', u'')
    # Processing the call keyword arguments (line 2245)
    kwargs_91187 = {}
    
    # Call to join(...): (line 2245)
    # Processing the call arguments (line 2245)
    
    # Call to map(...): (line 2245)
    # Processing the call arguments (line 2245)
    # Getting the type of 'repr' (line 2245)
    repr_91178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 23), 'repr', False)
    # Getting the type of 'digits' (line 2245)
    digits_91179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 29), 'digits', False)
    # Processing the call keyword arguments (line 2245)
    kwargs_91180 = {}
    # Getting the type of 'map' (line 2245)
    map_91177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 19), 'map', False)
    # Calling map(args, kwargs) (line 2245)
    map_call_result_91181 = invoke(stypy.reporting.localization.Localization(__file__, 2245, 19), map_91177, *[repr_91178, digits_91179], **kwargs_91180)
    
    # Processing the call keyword arguments (line 2245)
    kwargs_91182 = {}
    unicode_91175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2245, 11), 'unicode', u'')
    # Obtaining the member 'join' of a type (line 2245)
    join_91176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2245, 11), unicode_91175, 'join')
    # Calling join(args, kwargs) (line 2245)
    join_call_result_91183 = invoke(stypy.reporting.localization.Localization(__file__, 2245, 11), join_91176, *[map_call_result_91181], **kwargs_91182)
    
    # Obtaining the member 'replace' of a type (line 2245)
    replace_91184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2245, 11), join_call_result_91183, 'replace')
    # Calling replace(args, kwargs) (line 2245)
    replace_call_result_91188 = invoke(stypy.reporting.localization.Localization(__file__, 2245, 11), replace_91184, *[unicode_91185, unicode_91186], **kwargs_91187)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2245, 4), 'stypy_return_type', replace_call_result_91188)
    
    # ################# End of 'binary_repr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'binary_repr' in the type store
    # Getting the type of 'stypy_return_type' (line 2226)
    stypy_return_type_91189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_91189)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'binary_repr'
    return stypy_return_type_91189

# Assigning a type to the variable 'binary_repr' (line 2226)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2226, 0), 'binary_repr', binary_repr)

@norecursion
def log2(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Call to log(...): (line 2248)
    # Processing the call arguments (line 2248)
    float_91192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2248, 25), 'float')
    # Processing the call keyword arguments (line 2248)
    kwargs_91193 = {}
    # Getting the type of 'math' (line 2248)
    math_91190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2248, 16), 'math', False)
    # Obtaining the member 'log' of a type (line 2248)
    log_91191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2248, 16), math_91190, 'log')
    # Calling log(args, kwargs) (line 2248)
    log_call_result_91194 = invoke(stypy.reporting.localization.Localization(__file__, 2248, 16), log_91191, *[float_91192], **kwargs_91193)
    
    defaults = [log_call_result_91194]
    # Create a new context for function 'log2'
    module_type_store = module_type_store.open_function_context('log2', 2248, 0, False)
    
    # Passed parameters checking function
    log2.stypy_localization = localization
    log2.stypy_type_of_self = None
    log2.stypy_type_store = module_type_store
    log2.stypy_function_name = 'log2'
    log2.stypy_param_names_list = ['x', 'ln2']
    log2.stypy_varargs_param_name = None
    log2.stypy_kwargs_param_name = None
    log2.stypy_call_defaults = defaults
    log2.stypy_call_varargs = varargs
    log2.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'log2', ['x', 'ln2'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'log2', localization, ['x', 'ln2'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'log2(...)' code ##################

    unicode_91195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2254, (-1)), 'unicode', u'\n    Return the log(*x*) in base 2.\n\n    This is a _slow_ function but which is guaranteed to return the correct\n    integer value if the input is an integer exact power of 2.\n    ')
    
    
    # SSA begins for try-except statement (line 2255)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Subscript to a Name (line 2256):
    
    # Assigning a Subscript to a Name (line 2256):
    
    # Assigning a Subscript to a Name (line 2256):
    
    # Obtaining the type of the subscript
    int_91196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2256, 31), 'int')
    slice_91197 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2256, 16), int_91196, None, None)
    
    # Call to binary_repr(...): (line 2256)
    # Processing the call arguments (line 2256)
    # Getting the type of 'x' (line 2256)
    x_91199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 28), 'x', False)
    # Processing the call keyword arguments (line 2256)
    kwargs_91200 = {}
    # Getting the type of 'binary_repr' (line 2256)
    binary_repr_91198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 16), 'binary_repr', False)
    # Calling binary_repr(args, kwargs) (line 2256)
    binary_repr_call_result_91201 = invoke(stypy.reporting.localization.Localization(__file__, 2256, 16), binary_repr_91198, *[x_91199], **kwargs_91200)
    
    # Obtaining the member '__getitem__' of a type (line 2256)
    getitem___91202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2256, 16), binary_repr_call_result_91201, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2256)
    subscript_call_result_91203 = invoke(stypy.reporting.localization.Localization(__file__, 2256, 16), getitem___91202, slice_91197)
    
    # Assigning a type to the variable 'bin_n' (line 2256)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2256, 8), 'bin_n', subscript_call_result_91203)
    # SSA branch for the except part of a try statement (line 2255)
    # SSA branch for the except 'Tuple' branch of a try statement (line 2255)
    module_type_store.open_ssa_branch('except')
    
    # Call to log(...): (line 2258)
    # Processing the call arguments (line 2258)
    # Getting the type of 'x' (line 2258)
    x_91206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 24), 'x', False)
    # Processing the call keyword arguments (line 2258)
    kwargs_91207 = {}
    # Getting the type of 'math' (line 2258)
    math_91204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 15), 'math', False)
    # Obtaining the member 'log' of a type (line 2258)
    log_91205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2258, 15), math_91204, 'log')
    # Calling log(args, kwargs) (line 2258)
    log_call_result_91208 = invoke(stypy.reporting.localization.Localization(__file__, 2258, 15), log_91205, *[x_91206], **kwargs_91207)
    
    # Getting the type of 'ln2' (line 2258)
    ln2_91209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 27), 'ln2')
    # Applying the binary operator 'div' (line 2258)
    result_div_91210 = python_operator(stypy.reporting.localization.Localization(__file__, 2258, 15), 'div', log_call_result_91208, ln2_91209)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2258)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2258, 8), 'stypy_return_type', result_div_91210)
    # SSA branch for the else branch of a try statement (line 2255)
    module_type_store.open_ssa_branch('except else')
    
    
    unicode_91211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2260, 11), 'unicode', u'1')
    # Getting the type of 'bin_n' (line 2260)
    bin_n_91212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 18), 'bin_n')
    # Applying the binary operator 'in' (line 2260)
    result_contains_91213 = python_operator(stypy.reporting.localization.Localization(__file__, 2260, 11), 'in', unicode_91211, bin_n_91212)
    
    # Testing the type of an if condition (line 2260)
    if_condition_91214 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2260, 8), result_contains_91213)
    # Assigning a type to the variable 'if_condition_91214' (line 2260)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2260, 8), 'if_condition_91214', if_condition_91214)
    # SSA begins for if statement (line 2260)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to log(...): (line 2261)
    # Processing the call arguments (line 2261)
    # Getting the type of 'x' (line 2261)
    x_91217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 28), 'x', False)
    # Processing the call keyword arguments (line 2261)
    kwargs_91218 = {}
    # Getting the type of 'math' (line 2261)
    math_91215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 19), 'math', False)
    # Obtaining the member 'log' of a type (line 2261)
    log_91216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2261, 19), math_91215, 'log')
    # Calling log(args, kwargs) (line 2261)
    log_call_result_91219 = invoke(stypy.reporting.localization.Localization(__file__, 2261, 19), log_91216, *[x_91217], **kwargs_91218)
    
    # Getting the type of 'ln2' (line 2261)
    ln2_91220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 31), 'ln2')
    # Applying the binary operator 'div' (line 2261)
    result_div_91221 = python_operator(stypy.reporting.localization.Localization(__file__, 2261, 19), 'div', log_call_result_91219, ln2_91220)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2261)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2261, 12), 'stypy_return_type', result_div_91221)
    # SSA branch for the else part of an if statement (line 2260)
    module_type_store.open_ssa_branch('else')
    
    # Call to len(...): (line 2263)
    # Processing the call arguments (line 2263)
    # Getting the type of 'bin_n' (line 2263)
    bin_n_91223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 23), 'bin_n', False)
    # Processing the call keyword arguments (line 2263)
    kwargs_91224 = {}
    # Getting the type of 'len' (line 2263)
    len_91222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 19), 'len', False)
    # Calling len(args, kwargs) (line 2263)
    len_call_result_91225 = invoke(stypy.reporting.localization.Localization(__file__, 2263, 19), len_91222, *[bin_n_91223], **kwargs_91224)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2263)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2263, 12), 'stypy_return_type', len_call_result_91225)
    # SSA join for if statement (line 2260)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for try-except statement (line 2255)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'log2(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'log2' in the type store
    # Getting the type of 'stypy_return_type' (line 2248)
    stypy_return_type_91226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2248, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_91226)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'log2'
    return stypy_return_type_91226

# Assigning a type to the variable 'log2' (line 2248)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2248, 0), 'log2', log2)

@norecursion
def ispower2(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ispower2'
    module_type_store = module_type_store.open_function_context('ispower2', 2266, 0, False)
    
    # Passed parameters checking function
    ispower2.stypy_localization = localization
    ispower2.stypy_type_of_self = None
    ispower2.stypy_type_store = module_type_store
    ispower2.stypy_function_name = 'ispower2'
    ispower2.stypy_param_names_list = ['n']
    ispower2.stypy_varargs_param_name = None
    ispower2.stypy_kwargs_param_name = None
    ispower2.stypy_call_defaults = defaults
    ispower2.stypy_call_varargs = varargs
    ispower2.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ispower2', ['n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ispower2', localization, ['n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ispower2(...)' code ##################

    unicode_91227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2271, (-1)), 'unicode', u'\n    Returns the log base 2 of *n* if *n* is a power of 2, zero otherwise.\n\n    Note the potential ambiguity if *n* == 1: 2**0 == 1, interpret accordingly.\n    ')
    
    # Assigning a Subscript to a Name (line 2273):
    
    # Assigning a Subscript to a Name (line 2273):
    
    # Assigning a Subscript to a Name (line 2273):
    
    # Obtaining the type of the subscript
    int_91228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2273, 27), 'int')
    slice_91229 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2273, 12), int_91228, None, None)
    
    # Call to binary_repr(...): (line 2273)
    # Processing the call arguments (line 2273)
    # Getting the type of 'n' (line 2273)
    n_91231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 24), 'n', False)
    # Processing the call keyword arguments (line 2273)
    kwargs_91232 = {}
    # Getting the type of 'binary_repr' (line 2273)
    binary_repr_91230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 12), 'binary_repr', False)
    # Calling binary_repr(args, kwargs) (line 2273)
    binary_repr_call_result_91233 = invoke(stypy.reporting.localization.Localization(__file__, 2273, 12), binary_repr_91230, *[n_91231], **kwargs_91232)
    
    # Obtaining the member '__getitem__' of a type (line 2273)
    getitem___91234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2273, 12), binary_repr_call_result_91233, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2273)
    subscript_call_result_91235 = invoke(stypy.reporting.localization.Localization(__file__, 2273, 12), getitem___91234, slice_91229)
    
    # Assigning a type to the variable 'bin_n' (line 2273)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2273, 4), 'bin_n', subscript_call_result_91235)
    
    
    unicode_91236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2274, 7), 'unicode', u'1')
    # Getting the type of 'bin_n' (line 2274)
    bin_n_91237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2274, 14), 'bin_n')
    # Applying the binary operator 'in' (line 2274)
    result_contains_91238 = python_operator(stypy.reporting.localization.Localization(__file__, 2274, 7), 'in', unicode_91236, bin_n_91237)
    
    # Testing the type of an if condition (line 2274)
    if_condition_91239 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2274, 4), result_contains_91238)
    # Assigning a type to the variable 'if_condition_91239' (line 2274)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2274, 4), 'if_condition_91239', if_condition_91239)
    # SSA begins for if statement (line 2274)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    int_91240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2275, 15), 'int')
    # Assigning a type to the variable 'stypy_return_type' (line 2275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2275, 8), 'stypy_return_type', int_91240)
    # SSA branch for the else part of an if statement (line 2274)
    module_type_store.open_ssa_branch('else')
    
    # Call to len(...): (line 2277)
    # Processing the call arguments (line 2277)
    # Getting the type of 'bin_n' (line 2277)
    bin_n_91242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2277, 19), 'bin_n', False)
    # Processing the call keyword arguments (line 2277)
    kwargs_91243 = {}
    # Getting the type of 'len' (line 2277)
    len_91241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2277, 15), 'len', False)
    # Calling len(args, kwargs) (line 2277)
    len_call_result_91244 = invoke(stypy.reporting.localization.Localization(__file__, 2277, 15), len_91241, *[bin_n_91242], **kwargs_91243)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2277)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2277, 8), 'stypy_return_type', len_call_result_91244)
    # SSA join for if statement (line 2274)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'ispower2(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ispower2' in the type store
    # Getting the type of 'stypy_return_type' (line 2266)
    stypy_return_type_91245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_91245)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ispower2'
    return stypy_return_type_91245

# Assigning a type to the variable 'ispower2' (line 2266)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2266, 0), 'ispower2', ispower2)

@norecursion
def isvector(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'isvector'
    module_type_store = module_type_store.open_function_context('isvector', 2280, 0, False)
    
    # Passed parameters checking function
    isvector.stypy_localization = localization
    isvector.stypy_type_of_self = None
    isvector.stypy_type_store = module_type_store
    isvector.stypy_function_name = 'isvector'
    isvector.stypy_param_names_list = ['X']
    isvector.stypy_varargs_param_name = None
    isvector.stypy_kwargs_param_name = None
    isvector.stypy_call_defaults = defaults
    isvector.stypy_call_varargs = varargs
    isvector.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'isvector', ['X'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'isvector', localization, ['X'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'isvector(...)' code ##################

    unicode_91246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2289, (-1)), 'unicode', u'\n    Like the MATLAB function with the same name, returns *True*\n    if the supplied numpy array or matrix *X* looks like a vector,\n    meaning it has a one non-singleton axis (i.e., it can have\n    multiple axes, but all must have length 1, except for one of\n    them).\n\n    If you just want to see if the array has 1 axis, use X.ndim == 1.\n    ')
    
    
    # Call to prod(...): (line 2290)
    # Processing the call arguments (line 2290)
    # Getting the type of 'X' (line 2290)
    X_91249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 19), 'X', False)
    # Obtaining the member 'shape' of a type (line 2290)
    shape_91250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2290, 19), X_91249, 'shape')
    # Processing the call keyword arguments (line 2290)
    kwargs_91251 = {}
    # Getting the type of 'np' (line 2290)
    np_91247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 11), 'np', False)
    # Obtaining the member 'prod' of a type (line 2290)
    prod_91248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2290, 11), np_91247, 'prod')
    # Calling prod(args, kwargs) (line 2290)
    prod_call_result_91252 = invoke(stypy.reporting.localization.Localization(__file__, 2290, 11), prod_91248, *[shape_91250], **kwargs_91251)
    
    
    # Call to max(...): (line 2290)
    # Processing the call arguments (line 2290)
    # Getting the type of 'X' (line 2290)
    X_91255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 38), 'X', False)
    # Obtaining the member 'shape' of a type (line 2290)
    shape_91256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2290, 38), X_91255, 'shape')
    # Processing the call keyword arguments (line 2290)
    kwargs_91257 = {}
    # Getting the type of 'np' (line 2290)
    np_91253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 31), 'np', False)
    # Obtaining the member 'max' of a type (line 2290)
    max_91254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2290, 31), np_91253, 'max')
    # Calling max(args, kwargs) (line 2290)
    max_call_result_91258 = invoke(stypy.reporting.localization.Localization(__file__, 2290, 31), max_91254, *[shape_91256], **kwargs_91257)
    
    # Applying the binary operator '==' (line 2290)
    result_eq_91259 = python_operator(stypy.reporting.localization.Localization(__file__, 2290, 11), '==', prod_call_result_91252, max_call_result_91258)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2290)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2290, 4), 'stypy_return_type', result_eq_91259)
    
    # ################# End of 'isvector(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'isvector' in the type store
    # Getting the type of 'stypy_return_type' (line 2280)
    stypy_return_type_91260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2280, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_91260)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'isvector'
    return stypy_return_type_91260

# Assigning a type to the variable 'isvector' (line 2280)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2280, 0), 'isvector', isvector)

@norecursion
def safe_isnan(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'safe_isnan'
    module_type_store = module_type_store.open_function_context('safe_isnan', 2297, 0, False)
    
    # Passed parameters checking function
    safe_isnan.stypy_localization = localization
    safe_isnan.stypy_type_of_self = None
    safe_isnan.stypy_type_store = module_type_store
    safe_isnan.stypy_function_name = 'safe_isnan'
    safe_isnan.stypy_param_names_list = ['x']
    safe_isnan.stypy_varargs_param_name = None
    safe_isnan.stypy_kwargs_param_name = None
    safe_isnan.stypy_call_defaults = defaults
    safe_isnan.stypy_call_varargs = varargs
    safe_isnan.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'safe_isnan', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'safe_isnan', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'safe_isnan(...)' code ##################

    unicode_91261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2298, 4), 'unicode', u':func:`numpy.isnan` for arbitrary types')
    
    
    # Call to isinstance(...): (line 2299)
    # Processing the call arguments (line 2299)
    # Getting the type of 'x' (line 2299)
    x_91263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 18), 'x', False)
    # Getting the type of 'six' (line 2299)
    six_91264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 21), 'six', False)
    # Obtaining the member 'string_types' of a type (line 2299)
    string_types_91265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2299, 21), six_91264, 'string_types')
    # Processing the call keyword arguments (line 2299)
    kwargs_91266 = {}
    # Getting the type of 'isinstance' (line 2299)
    isinstance_91262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2299)
    isinstance_call_result_91267 = invoke(stypy.reporting.localization.Localization(__file__, 2299, 7), isinstance_91262, *[x_91263, string_types_91265], **kwargs_91266)
    
    # Testing the type of an if condition (line 2299)
    if_condition_91268 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2299, 4), isinstance_call_result_91267)
    # Assigning a type to the variable 'if_condition_91268' (line 2299)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2299, 4), 'if_condition_91268', if_condition_91268)
    # SSA begins for if statement (line 2299)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 2300)
    False_91269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 2300)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2300, 8), 'stypy_return_type', False_91269)
    # SSA join for if statement (line 2299)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 2301)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 2302):
    
    # Assigning a Call to a Name (line 2302):
    
    # Assigning a Call to a Name (line 2302):
    
    # Call to isnan(...): (line 2302)
    # Processing the call arguments (line 2302)
    # Getting the type of 'x' (line 2302)
    x_91272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 21), 'x', False)
    # Processing the call keyword arguments (line 2302)
    kwargs_91273 = {}
    # Getting the type of 'np' (line 2302)
    np_91270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 12), 'np', False)
    # Obtaining the member 'isnan' of a type (line 2302)
    isnan_91271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2302, 12), np_91270, 'isnan')
    # Calling isnan(args, kwargs) (line 2302)
    isnan_call_result_91274 = invoke(stypy.reporting.localization.Localization(__file__, 2302, 12), isnan_91271, *[x_91272], **kwargs_91273)
    
    # Assigning a type to the variable 'b' (line 2302)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2302, 8), 'b', isnan_call_result_91274)
    # SSA branch for the except part of a try statement (line 2301)
    # SSA branch for the except 'NotImplementedError' branch of a try statement (line 2301)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'False' (line 2304)
    False_91275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 2304)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2304, 8), 'stypy_return_type', False_91275)
    # SSA branch for the except 'TypeError' branch of a try statement (line 2301)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'False' (line 2306)
    False_91276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 2306)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2306, 8), 'stypy_return_type', False_91276)
    # SSA branch for the else branch of a try statement (line 2301)
    module_type_store.open_ssa_branch('except else')
    # Getting the type of 'b' (line 2308)
    b_91277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 15), 'b')
    # Assigning a type to the variable 'stypy_return_type' (line 2308)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2308, 8), 'stypy_return_type', b_91277)
    # SSA join for try-except statement (line 2301)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'safe_isnan(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'safe_isnan' in the type store
    # Getting the type of 'stypy_return_type' (line 2297)
    stypy_return_type_91278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_91278)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'safe_isnan'
    return stypy_return_type_91278

# Assigning a type to the variable 'safe_isnan' (line 2297)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2297, 0), 'safe_isnan', safe_isnan)

@norecursion
def safe_isinf(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'safe_isinf'
    module_type_store = module_type_store.open_function_context('safe_isinf', 2311, 0, False)
    
    # Passed parameters checking function
    safe_isinf.stypy_localization = localization
    safe_isinf.stypy_type_of_self = None
    safe_isinf.stypy_type_store = module_type_store
    safe_isinf.stypy_function_name = 'safe_isinf'
    safe_isinf.stypy_param_names_list = ['x']
    safe_isinf.stypy_varargs_param_name = None
    safe_isinf.stypy_kwargs_param_name = None
    safe_isinf.stypy_call_defaults = defaults
    safe_isinf.stypy_call_varargs = varargs
    safe_isinf.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'safe_isinf', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'safe_isinf', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'safe_isinf(...)' code ##################

    unicode_91279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2312, 4), 'unicode', u':func:`numpy.isinf` for arbitrary types')
    
    
    # Call to isinstance(...): (line 2313)
    # Processing the call arguments (line 2313)
    # Getting the type of 'x' (line 2313)
    x_91281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 18), 'x', False)
    # Getting the type of 'six' (line 2313)
    six_91282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 21), 'six', False)
    # Obtaining the member 'string_types' of a type (line 2313)
    string_types_91283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2313, 21), six_91282, 'string_types')
    # Processing the call keyword arguments (line 2313)
    kwargs_91284 = {}
    # Getting the type of 'isinstance' (line 2313)
    isinstance_91280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2313)
    isinstance_call_result_91285 = invoke(stypy.reporting.localization.Localization(__file__, 2313, 7), isinstance_91280, *[x_91281, string_types_91283], **kwargs_91284)
    
    # Testing the type of an if condition (line 2313)
    if_condition_91286 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2313, 4), isinstance_call_result_91285)
    # Assigning a type to the variable 'if_condition_91286' (line 2313)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2313, 4), 'if_condition_91286', if_condition_91286)
    # SSA begins for if statement (line 2313)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 2314)
    False_91287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 2314)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2314, 8), 'stypy_return_type', False_91287)
    # SSA join for if statement (line 2313)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 2315)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 2316):
    
    # Assigning a Call to a Name (line 2316):
    
    # Assigning a Call to a Name (line 2316):
    
    # Call to isinf(...): (line 2316)
    # Processing the call arguments (line 2316)
    # Getting the type of 'x' (line 2316)
    x_91290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 21), 'x', False)
    # Processing the call keyword arguments (line 2316)
    kwargs_91291 = {}
    # Getting the type of 'np' (line 2316)
    np_91288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 12), 'np', False)
    # Obtaining the member 'isinf' of a type (line 2316)
    isinf_91289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2316, 12), np_91288, 'isinf')
    # Calling isinf(args, kwargs) (line 2316)
    isinf_call_result_91292 = invoke(stypy.reporting.localization.Localization(__file__, 2316, 12), isinf_91289, *[x_91290], **kwargs_91291)
    
    # Assigning a type to the variable 'b' (line 2316)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2316, 8), 'b', isinf_call_result_91292)
    # SSA branch for the except part of a try statement (line 2315)
    # SSA branch for the except 'NotImplementedError' branch of a try statement (line 2315)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'False' (line 2318)
    False_91293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 2318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2318, 8), 'stypy_return_type', False_91293)
    # SSA branch for the except 'TypeError' branch of a try statement (line 2315)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'False' (line 2320)
    False_91294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2320, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 2320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2320, 8), 'stypy_return_type', False_91294)
    # SSA branch for the else branch of a try statement (line 2315)
    module_type_store.open_ssa_branch('except else')
    # Getting the type of 'b' (line 2322)
    b_91295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 15), 'b')
    # Assigning a type to the variable 'stypy_return_type' (line 2322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2322, 8), 'stypy_return_type', b_91295)
    # SSA join for try-except statement (line 2315)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'safe_isinf(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'safe_isinf' in the type store
    # Getting the type of 'stypy_return_type' (line 2311)
    stypy_return_type_91296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_91296)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'safe_isinf'
    return stypy_return_type_91296

# Assigning a type to the variable 'safe_isinf' (line 2311)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2311, 0), 'safe_isinf', safe_isinf)

@norecursion
def rec_append_fields(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2325)
    None_91297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 47), 'None')
    defaults = [None_91297]
    # Create a new context for function 'rec_append_fields'
    module_type_store = module_type_store.open_function_context('rec_append_fields', 2325, 0, False)
    
    # Passed parameters checking function
    rec_append_fields.stypy_localization = localization
    rec_append_fields.stypy_type_of_self = None
    rec_append_fields.stypy_type_store = module_type_store
    rec_append_fields.stypy_function_name = 'rec_append_fields'
    rec_append_fields.stypy_param_names_list = ['rec', 'names', 'arrs', 'dtypes']
    rec_append_fields.stypy_varargs_param_name = None
    rec_append_fields.stypy_kwargs_param_name = None
    rec_append_fields.stypy_call_defaults = defaults
    rec_append_fields.stypy_call_varargs = varargs
    rec_append_fields.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rec_append_fields', ['rec', 'names', 'arrs', 'dtypes'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rec_append_fields', localization, ['rec', 'names', 'arrs', 'dtypes'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rec_append_fields(...)' code ##################

    unicode_91298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2331, (-1)), 'unicode', u'\n    Return a new record array with field names populated with data\n    from arrays in *arrs*.  If appending a single field, then *names*,\n    *arrs* and *dtypes* do not have to be lists. They can just be the\n    values themselves.\n    ')
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2332)
    tuple_91299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2332, 8), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2332)
    # Adding element type (line 2332)
    
    # Evaluating a boolean operation
    
    
    # Call to isinstance(...): (line 2332)
    # Processing the call arguments (line 2332)
    # Getting the type of 'names' (line 2332)
    names_91301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 23), 'names', False)
    # Getting the type of 'six' (line 2332)
    six_91302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 30), 'six', False)
    # Obtaining the member 'string_types' of a type (line 2332)
    string_types_91303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2332, 30), six_91302, 'string_types')
    # Processing the call keyword arguments (line 2332)
    kwargs_91304 = {}
    # Getting the type of 'isinstance' (line 2332)
    isinstance_91300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 12), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2332)
    isinstance_call_result_91305 = invoke(stypy.reporting.localization.Localization(__file__, 2332, 12), isinstance_91300, *[names_91301, string_types_91303], **kwargs_91304)
    
    # Applying the 'not' unary operator (line 2332)
    result_not__91306 = python_operator(stypy.reporting.localization.Localization(__file__, 2332, 8), 'not', isinstance_call_result_91305)
    
    
    # Call to iterable(...): (line 2332)
    # Processing the call arguments (line 2332)
    # Getting the type of 'names' (line 2332)
    names_91309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 67), 'names', False)
    # Processing the call keyword arguments (line 2332)
    kwargs_91310 = {}
    # Getting the type of 'cbook' (line 2332)
    cbook_91307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 52), 'cbook', False)
    # Obtaining the member 'iterable' of a type (line 2332)
    iterable_91308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2332, 52), cbook_91307, 'iterable')
    # Calling iterable(args, kwargs) (line 2332)
    iterable_call_result_91311 = invoke(stypy.reporting.localization.Localization(__file__, 2332, 52), iterable_91308, *[names_91309], **kwargs_91310)
    
    # Applying the binary operator 'and' (line 2332)
    result_and_keyword_91312 = python_operator(stypy.reporting.localization.Localization(__file__, 2332, 8), 'and', result_not__91306, iterable_call_result_91311)
    
    # Call to len(...): (line 2333)
    # Processing the call arguments (line 2333)
    # Getting the type of 'names' (line 2333)
    names_91314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 20), 'names', False)
    # Processing the call keyword arguments (line 2333)
    kwargs_91315 = {}
    # Getting the type of 'len' (line 2333)
    len_91313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 16), 'len', False)
    # Calling len(args, kwargs) (line 2333)
    len_call_result_91316 = invoke(stypy.reporting.localization.Localization(__file__, 2333, 16), len_91313, *[names_91314], **kwargs_91315)
    
    # Applying the binary operator 'and' (line 2332)
    result_and_keyword_91317 = python_operator(stypy.reporting.localization.Localization(__file__, 2332, 8), 'and', result_and_keyword_91312, len_call_result_91316)
    
    # Call to isinstance(...): (line 2333)
    # Processing the call arguments (line 2333)
    
    # Obtaining the type of the subscript
    int_91319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2333, 48), 'int')
    # Getting the type of 'names' (line 2333)
    names_91320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 42), 'names', False)
    # Obtaining the member '__getitem__' of a type (line 2333)
    getitem___91321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2333, 42), names_91320, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2333)
    subscript_call_result_91322 = invoke(stypy.reporting.localization.Localization(__file__, 2333, 42), getitem___91321, int_91319)
    
    # Processing the call keyword arguments (line 2333)
    kwargs_91323 = {}
    # Getting the type of 'isinstance' (line 2333)
    isinstance_91318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 31), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2333)
    isinstance_call_result_91324 = invoke(stypy.reporting.localization.Localization(__file__, 2333, 31), isinstance_91318, *[subscript_call_result_91322], **kwargs_91323)
    
    # Applying the binary operator 'and' (line 2332)
    result_and_keyword_91325 = python_operator(stypy.reporting.localization.Localization(__file__, 2332, 8), 'and', result_and_keyword_91317, isinstance_call_result_91324)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2332, 8), tuple_91299, result_and_keyword_91325)
    # Adding element type (line 2332)
    # Getting the type of 'six' (line 2333)
    six_91326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 53), 'six')
    # Obtaining the member 'string_types' of a type (line 2333)
    string_types_91327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2333, 53), six_91326, 'string_types')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2332, 8), tuple_91299, string_types_91327)
    
    # Testing the type of an if condition (line 2332)
    if_condition_91328 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2332, 4), tuple_91299)
    # Assigning a type to the variable 'if_condition_91328' (line 2332)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2332, 4), 'if_condition_91328', if_condition_91328)
    # SSA begins for if statement (line 2332)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Call to len(...): (line 2334)
    # Processing the call arguments (line 2334)
    # Getting the type of 'names' (line 2334)
    names_91330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 15), 'names', False)
    # Processing the call keyword arguments (line 2334)
    kwargs_91331 = {}
    # Getting the type of 'len' (line 2334)
    len_91329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 11), 'len', False)
    # Calling len(args, kwargs) (line 2334)
    len_call_result_91332 = invoke(stypy.reporting.localization.Localization(__file__, 2334, 11), len_91329, *[names_91330], **kwargs_91331)
    
    
    # Call to len(...): (line 2334)
    # Processing the call arguments (line 2334)
    # Getting the type of 'arrs' (line 2334)
    arrs_91334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 29), 'arrs', False)
    # Processing the call keyword arguments (line 2334)
    kwargs_91335 = {}
    # Getting the type of 'len' (line 2334)
    len_91333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 25), 'len', False)
    # Calling len(args, kwargs) (line 2334)
    len_call_result_91336 = invoke(stypy.reporting.localization.Localization(__file__, 2334, 25), len_91333, *[arrs_91334], **kwargs_91335)
    
    # Applying the binary operator '!=' (line 2334)
    result_ne_91337 = python_operator(stypy.reporting.localization.Localization(__file__, 2334, 11), '!=', len_call_result_91332, len_call_result_91336)
    
    # Testing the type of an if condition (line 2334)
    if_condition_91338 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2334, 8), result_ne_91337)
    # Assigning a type to the variable 'if_condition_91338' (line 2334)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2334, 8), 'if_condition_91338', if_condition_91338)
    # SSA begins for if statement (line 2334)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2335)
    # Processing the call arguments (line 2335)
    unicode_91340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2335, 29), 'unicode', u'number of arrays do not match number of names')
    # Processing the call keyword arguments (line 2335)
    kwargs_91341 = {}
    # Getting the type of 'ValueError' (line 2335)
    ValueError_91339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2335, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2335)
    ValueError_call_result_91342 = invoke(stypy.reporting.localization.Localization(__file__, 2335, 18), ValueError_91339, *[unicode_91340], **kwargs_91341)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2335, 12), ValueError_call_result_91342, 'raise parameter', BaseException)
    # SSA join for if statement (line 2334)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2332)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a List to a Name (line 2337):
    
    # Assigning a List to a Name (line 2337):
    
    # Assigning a List to a Name (line 2337):
    
    # Obtaining an instance of the builtin type 'list' (line 2337)
    list_91343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2337, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2337)
    # Adding element type (line 2337)
    # Getting the type of 'names' (line 2337)
    names_91344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2337, 17), 'names')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2337, 16), list_91343, names_91344)
    
    # Assigning a type to the variable 'names' (line 2337)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2337, 8), 'names', list_91343)
    
    # Assigning a List to a Name (line 2338):
    
    # Assigning a List to a Name (line 2338):
    
    # Assigning a List to a Name (line 2338):
    
    # Obtaining an instance of the builtin type 'list' (line 2338)
    list_91345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2338, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2338)
    # Adding element type (line 2338)
    # Getting the type of 'arrs' (line 2338)
    arrs_91346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2338, 16), 'arrs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2338, 15), list_91345, arrs_91346)
    
    # Assigning a type to the variable 'arrs' (line 2338)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2338, 8), 'arrs', list_91345)
    # SSA join for if statement (line 2332)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2339):
    
    # Assigning a Call to a Name (line 2339):
    
    # Assigning a Call to a Name (line 2339):
    
    # Call to list(...): (line 2339)
    # Processing the call arguments (line 2339)
    
    # Call to map(...): (line 2339)
    # Processing the call arguments (line 2339)
    # Getting the type of 'np' (line 2339)
    np_91349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2339, 20), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2339)
    asarray_91350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2339, 20), np_91349, 'asarray')
    # Getting the type of 'arrs' (line 2339)
    arrs_91351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2339, 32), 'arrs', False)
    # Processing the call keyword arguments (line 2339)
    kwargs_91352 = {}
    # Getting the type of 'map' (line 2339)
    map_91348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2339, 16), 'map', False)
    # Calling map(args, kwargs) (line 2339)
    map_call_result_91353 = invoke(stypy.reporting.localization.Localization(__file__, 2339, 16), map_91348, *[asarray_91350, arrs_91351], **kwargs_91352)
    
    # Processing the call keyword arguments (line 2339)
    kwargs_91354 = {}
    # Getting the type of 'list' (line 2339)
    list_91347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2339, 11), 'list', False)
    # Calling list(args, kwargs) (line 2339)
    list_call_result_91355 = invoke(stypy.reporting.localization.Localization(__file__, 2339, 11), list_91347, *[map_call_result_91353], **kwargs_91354)
    
    # Assigning a type to the variable 'arrs' (line 2339)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2339, 4), 'arrs', list_call_result_91355)
    
    # Type idiom detected: calculating its left and rigth part (line 2340)
    # Getting the type of 'dtypes' (line 2340)
    dtypes_91356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2340, 7), 'dtypes')
    # Getting the type of 'None' (line 2340)
    None_91357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2340, 17), 'None')
    
    (may_be_91358, more_types_in_union_91359) = may_be_none(dtypes_91356, None_91357)

    if may_be_91358:

        if more_types_in_union_91359:
            # Runtime conditional SSA (line 2340)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a ListComp to a Name (line 2341):
        
        # Assigning a ListComp to a Name (line 2341):
        
        # Assigning a ListComp to a Name (line 2341):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'arrs' (line 2341)
        arrs_91362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2341, 35), 'arrs')
        comprehension_91363 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2341, 18), arrs_91362)
        # Assigning a type to the variable 'a' (line 2341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2341, 18), 'a', comprehension_91363)
        # Getting the type of 'a' (line 2341)
        a_91360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2341, 18), 'a')
        # Obtaining the member 'dtype' of a type (line 2341)
        dtype_91361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2341, 18), a_91360, 'dtype')
        list_91364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2341, 18), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2341, 18), list_91364, dtype_91361)
        # Assigning a type to the variable 'dtypes' (line 2341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2341, 8), 'dtypes', list_91364)

        if more_types_in_union_91359:
            # Runtime conditional SSA for else branch (line 2340)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_91358) or more_types_in_union_91359):
        
        
        
        # Call to iterable(...): (line 2342)
        # Processing the call arguments (line 2342)
        # Getting the type of 'dtypes' (line 2342)
        dtypes_91367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2342, 28), 'dtypes', False)
        # Processing the call keyword arguments (line 2342)
        kwargs_91368 = {}
        # Getting the type of 'cbook' (line 2342)
        cbook_91365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2342, 13), 'cbook', False)
        # Obtaining the member 'iterable' of a type (line 2342)
        iterable_91366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2342, 13), cbook_91365, 'iterable')
        # Calling iterable(args, kwargs) (line 2342)
        iterable_call_result_91369 = invoke(stypy.reporting.localization.Localization(__file__, 2342, 13), iterable_91366, *[dtypes_91367], **kwargs_91368)
        
        # Applying the 'not' unary operator (line 2342)
        result_not__91370 = python_operator(stypy.reporting.localization.Localization(__file__, 2342, 9), 'not', iterable_call_result_91369)
        
        # Testing the type of an if condition (line 2342)
        if_condition_91371 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2342, 9), result_not__91370)
        # Assigning a type to the variable 'if_condition_91371' (line 2342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2342, 9), 'if_condition_91371', if_condition_91371)
        # SSA begins for if statement (line 2342)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 2343):
        
        # Assigning a List to a Name (line 2343):
        
        # Assigning a List to a Name (line 2343):
        
        # Obtaining an instance of the builtin type 'list' (line 2343)
        list_91372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2343, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2343)
        # Adding element type (line 2343)
        # Getting the type of 'dtypes' (line 2343)
        dtypes_91373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2343, 18), 'dtypes')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2343, 17), list_91372, dtypes_91373)
        
        # Assigning a type to the variable 'dtypes' (line 2343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2343, 8), 'dtypes', list_91372)
        # SSA join for if statement (line 2342)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_91358 and more_types_in_union_91359):
            # SSA join for if statement (line 2340)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    
    # Call to len(...): (line 2344)
    # Processing the call arguments (line 2344)
    # Getting the type of 'arrs' (line 2344)
    arrs_91375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2344, 11), 'arrs', False)
    # Processing the call keyword arguments (line 2344)
    kwargs_91376 = {}
    # Getting the type of 'len' (line 2344)
    len_91374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2344, 7), 'len', False)
    # Calling len(args, kwargs) (line 2344)
    len_call_result_91377 = invoke(stypy.reporting.localization.Localization(__file__, 2344, 7), len_91374, *[arrs_91375], **kwargs_91376)
    
    
    # Call to len(...): (line 2344)
    # Processing the call arguments (line 2344)
    # Getting the type of 'dtypes' (line 2344)
    dtypes_91379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2344, 24), 'dtypes', False)
    # Processing the call keyword arguments (line 2344)
    kwargs_91380 = {}
    # Getting the type of 'len' (line 2344)
    len_91378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2344, 20), 'len', False)
    # Calling len(args, kwargs) (line 2344)
    len_call_result_91381 = invoke(stypy.reporting.localization.Localization(__file__, 2344, 20), len_91378, *[dtypes_91379], **kwargs_91380)
    
    # Applying the binary operator '!=' (line 2344)
    result_ne_91382 = python_operator(stypy.reporting.localization.Localization(__file__, 2344, 7), '!=', len_call_result_91377, len_call_result_91381)
    
    # Testing the type of an if condition (line 2344)
    if_condition_91383 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2344, 4), result_ne_91382)
    # Assigning a type to the variable 'if_condition_91383' (line 2344)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2344, 4), 'if_condition_91383', if_condition_91383)
    # SSA begins for if statement (line 2344)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Call to len(...): (line 2345)
    # Processing the call arguments (line 2345)
    # Getting the type of 'dtypes' (line 2345)
    dtypes_91385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2345, 15), 'dtypes', False)
    # Processing the call keyword arguments (line 2345)
    kwargs_91386 = {}
    # Getting the type of 'len' (line 2345)
    len_91384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2345, 11), 'len', False)
    # Calling len(args, kwargs) (line 2345)
    len_call_result_91387 = invoke(stypy.reporting.localization.Localization(__file__, 2345, 11), len_91384, *[dtypes_91385], **kwargs_91386)
    
    int_91388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2345, 26), 'int')
    # Applying the binary operator '==' (line 2345)
    result_eq_91389 = python_operator(stypy.reporting.localization.Localization(__file__, 2345, 11), '==', len_call_result_91387, int_91388)
    
    # Testing the type of an if condition (line 2345)
    if_condition_91390 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2345, 8), result_eq_91389)
    # Assigning a type to the variable 'if_condition_91390' (line 2345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2345, 8), 'if_condition_91390', if_condition_91390)
    # SSA begins for if statement (line 2345)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2346):
    
    # Assigning a BinOp to a Name (line 2346):
    
    # Assigning a BinOp to a Name (line 2346):
    # Getting the type of 'dtypes' (line 2346)
    dtypes_91391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 21), 'dtypes')
    
    # Call to len(...): (line 2346)
    # Processing the call arguments (line 2346)
    # Getting the type of 'arrs' (line 2346)
    arrs_91393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 34), 'arrs', False)
    # Processing the call keyword arguments (line 2346)
    kwargs_91394 = {}
    # Getting the type of 'len' (line 2346)
    len_91392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 30), 'len', False)
    # Calling len(args, kwargs) (line 2346)
    len_call_result_91395 = invoke(stypy.reporting.localization.Localization(__file__, 2346, 30), len_91392, *[arrs_91393], **kwargs_91394)
    
    # Applying the binary operator '*' (line 2346)
    result_mul_91396 = python_operator(stypy.reporting.localization.Localization(__file__, 2346, 21), '*', dtypes_91391, len_call_result_91395)
    
    # Assigning a type to the variable 'dtypes' (line 2346)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2346, 12), 'dtypes', result_mul_91396)
    # SSA branch for the else part of an if statement (line 2345)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 2348)
    # Processing the call arguments (line 2348)
    unicode_91398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2348, 29), 'unicode', u'dtypes must be None, a single dtype or a list')
    # Processing the call keyword arguments (line 2348)
    kwargs_91399 = {}
    # Getting the type of 'ValueError' (line 2348)
    ValueError_91397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2348)
    ValueError_call_result_91400 = invoke(stypy.reporting.localization.Localization(__file__, 2348, 18), ValueError_91397, *[unicode_91398], **kwargs_91399)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2348, 12), ValueError_call_result_91400, 'raise parameter', BaseException)
    # SSA join for if statement (line 2345)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2344)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Name (line 2349):
    
    # Assigning a Attribute to a Name (line 2349):
    
    # Assigning a Attribute to a Name (line 2349):
    # Getting the type of 'rec' (line 2349)
    rec_91401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2349, 17), 'rec')
    # Obtaining the member 'dtype' of a type (line 2349)
    dtype_91402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2349, 17), rec_91401, 'dtype')
    # Obtaining the member 'descr' of a type (line 2349)
    descr_91403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2349, 17), dtype_91402, 'descr')
    # Assigning a type to the variable 'old_dtypes' (line 2349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2349, 4), 'old_dtypes', descr_91403)
    
    # Getting the type of 'six' (line 2350)
    six_91404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2350, 7), 'six')
    # Obtaining the member 'PY2' of a type (line 2350)
    PY2_91405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2350, 7), six_91404, 'PY2')
    # Testing the type of an if condition (line 2350)
    if_condition_91406 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2350, 4), PY2_91405)
    # Assigning a type to the variable 'if_condition_91406' (line 2350)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2350, 4), 'if_condition_91406', if_condition_91406)
    # SSA begins for if statement (line 2350)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a ListComp to a Name (line 2351):
    
    # Assigning a ListComp to a Name (line 2351):
    
    # Assigning a ListComp to a Name (line 2351):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'old_dtypes' (line 2351)
    old_dtypes_91414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 65), 'old_dtypes')
    comprehension_91415 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2351, 22), old_dtypes_91414)
    # Assigning a type to the variable 'name' (line 2351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2351, 22), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2351, 22), comprehension_91415))
    # Assigning a type to the variable 'dt' (line 2351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2351, 22), 'dt', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2351, 22), comprehension_91415))
    
    # Obtaining an instance of the builtin type 'tuple' (line 2351)
    tuple_91407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2351, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2351)
    # Adding element type (line 2351)
    
    # Call to encode(...): (line 2351)
    # Processing the call arguments (line 2351)
    unicode_91410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2351, 35), 'unicode', u'utf-8')
    # Processing the call keyword arguments (line 2351)
    kwargs_91411 = {}
    # Getting the type of 'name' (line 2351)
    name_91408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 23), 'name', False)
    # Obtaining the member 'encode' of a type (line 2351)
    encode_91409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2351, 23), name_91408, 'encode')
    # Calling encode(args, kwargs) (line 2351)
    encode_call_result_91412 = invoke(stypy.reporting.localization.Localization(__file__, 2351, 23), encode_91409, *[unicode_91410], **kwargs_91411)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2351, 23), tuple_91407, encode_call_result_91412)
    # Adding element type (line 2351)
    # Getting the type of 'dt' (line 2351)
    dt_91413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 45), 'dt')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2351, 23), tuple_91407, dt_91413)
    
    list_91416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2351, 22), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2351, 22), list_91416, tuple_91407)
    # Assigning a type to the variable 'old_dtypes' (line 2351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2351, 8), 'old_dtypes', list_91416)
    # SSA join for if statement (line 2350)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2352):
    
    # Assigning a Call to a Name (line 2352):
    
    # Assigning a Call to a Name (line 2352):
    
    # Call to dtype(...): (line 2352)
    # Processing the call arguments (line 2352)
    # Getting the type of 'old_dtypes' (line 2352)
    old_dtypes_91419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 24), 'old_dtypes', False)
    
    # Call to list(...): (line 2352)
    # Processing the call arguments (line 2352)
    
    # Call to zip(...): (line 2352)
    # Processing the call arguments (line 2352)
    # Getting the type of 'names' (line 2352)
    names_91422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 46), 'names', False)
    # Getting the type of 'dtypes' (line 2352)
    dtypes_91423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 53), 'dtypes', False)
    # Processing the call keyword arguments (line 2352)
    kwargs_91424 = {}
    # Getting the type of 'zip' (line 2352)
    zip_91421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 42), 'zip', False)
    # Calling zip(args, kwargs) (line 2352)
    zip_call_result_91425 = invoke(stypy.reporting.localization.Localization(__file__, 2352, 42), zip_91421, *[names_91422, dtypes_91423], **kwargs_91424)
    
    # Processing the call keyword arguments (line 2352)
    kwargs_91426 = {}
    # Getting the type of 'list' (line 2352)
    list_91420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 37), 'list', False)
    # Calling list(args, kwargs) (line 2352)
    list_call_result_91427 = invoke(stypy.reporting.localization.Localization(__file__, 2352, 37), list_91420, *[zip_call_result_91425], **kwargs_91426)
    
    # Applying the binary operator '+' (line 2352)
    result_add_91428 = python_operator(stypy.reporting.localization.Localization(__file__, 2352, 24), '+', old_dtypes_91419, list_call_result_91427)
    
    # Processing the call keyword arguments (line 2352)
    kwargs_91429 = {}
    # Getting the type of 'np' (line 2352)
    np_91417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 15), 'np', False)
    # Obtaining the member 'dtype' of a type (line 2352)
    dtype_91418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2352, 15), np_91417, 'dtype')
    # Calling dtype(args, kwargs) (line 2352)
    dtype_call_result_91430 = invoke(stypy.reporting.localization.Localization(__file__, 2352, 15), dtype_91418, *[result_add_91428], **kwargs_91429)
    
    # Assigning a type to the variable 'newdtype' (line 2352)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2352, 4), 'newdtype', dtype_call_result_91430)
    
    # Assigning a Call to a Name (line 2353):
    
    # Assigning a Call to a Name (line 2353):
    
    # Assigning a Call to a Name (line 2353):
    
    # Call to recarray(...): (line 2353)
    # Processing the call arguments (line 2353)
    # Getting the type of 'rec' (line 2353)
    rec_91433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 25), 'rec', False)
    # Obtaining the member 'shape' of a type (line 2353)
    shape_91434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2353, 25), rec_91433, 'shape')
    # Processing the call keyword arguments (line 2353)
    # Getting the type of 'newdtype' (line 2353)
    newdtype_91435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 42), 'newdtype', False)
    keyword_91436 = newdtype_91435
    kwargs_91437 = {'dtype': keyword_91436}
    # Getting the type of 'np' (line 2353)
    np_91431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 13), 'np', False)
    # Obtaining the member 'recarray' of a type (line 2353)
    recarray_91432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2353, 13), np_91431, 'recarray')
    # Calling recarray(args, kwargs) (line 2353)
    recarray_call_result_91438 = invoke(stypy.reporting.localization.Localization(__file__, 2353, 13), recarray_91432, *[shape_91434], **kwargs_91437)
    
    # Assigning a type to the variable 'newrec' (line 2353)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2353, 4), 'newrec', recarray_call_result_91438)
    
    # Getting the type of 'rec' (line 2354)
    rec_91439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 17), 'rec')
    # Obtaining the member 'dtype' of a type (line 2354)
    dtype_91440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2354, 17), rec_91439, 'dtype')
    # Obtaining the member 'fields' of a type (line 2354)
    fields_91441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2354, 17), dtype_91440, 'fields')
    # Testing the type of a for loop iterable (line 2354)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2354, 4), fields_91441)
    # Getting the type of the for loop variable (line 2354)
    for_loop_var_91442 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2354, 4), fields_91441)
    # Assigning a type to the variable 'field' (line 2354)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2354, 4), 'field', for_loop_var_91442)
    # SSA begins for a for statement (line 2354)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Subscript (line 2355):
    
    # Assigning a Subscript to a Subscript (line 2355):
    
    # Assigning a Subscript to a Subscript (line 2355):
    
    # Obtaining the type of the subscript
    # Getting the type of 'field' (line 2355)
    field_91443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 28), 'field')
    # Getting the type of 'rec' (line 2355)
    rec_91444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 24), 'rec')
    # Obtaining the member '__getitem__' of a type (line 2355)
    getitem___91445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2355, 24), rec_91444, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2355)
    subscript_call_result_91446 = invoke(stypy.reporting.localization.Localization(__file__, 2355, 24), getitem___91445, field_91443)
    
    # Getting the type of 'newrec' (line 2355)
    newrec_91447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 8), 'newrec')
    # Getting the type of 'field' (line 2355)
    field_91448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 15), 'field')
    # Storing an element on a container (line 2355)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2355, 8), newrec_91447, (field_91448, subscript_call_result_91446))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to zip(...): (line 2356)
    # Processing the call arguments (line 2356)
    # Getting the type of 'names' (line 2356)
    names_91450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 25), 'names', False)
    # Getting the type of 'arrs' (line 2356)
    arrs_91451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 32), 'arrs', False)
    # Processing the call keyword arguments (line 2356)
    kwargs_91452 = {}
    # Getting the type of 'zip' (line 2356)
    zip_91449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 21), 'zip', False)
    # Calling zip(args, kwargs) (line 2356)
    zip_call_result_91453 = invoke(stypy.reporting.localization.Localization(__file__, 2356, 21), zip_91449, *[names_91450, arrs_91451], **kwargs_91452)
    
    # Testing the type of a for loop iterable (line 2356)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2356, 4), zip_call_result_91453)
    # Getting the type of the for loop variable (line 2356)
    for_loop_var_91454 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2356, 4), zip_call_result_91453)
    # Assigning a type to the variable 'name' (line 2356)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2356, 4), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2356, 4), for_loop_var_91454))
    # Assigning a type to the variable 'arr' (line 2356)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2356, 4), 'arr', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2356, 4), for_loop_var_91454))
    # SSA begins for a for statement (line 2356)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Name to a Subscript (line 2357):
    
    # Assigning a Name to a Subscript (line 2357):
    
    # Assigning a Name to a Subscript (line 2357):
    # Getting the type of 'arr' (line 2357)
    arr_91455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 23), 'arr')
    # Getting the type of 'newrec' (line 2357)
    newrec_91456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 8), 'newrec')
    # Getting the type of 'name' (line 2357)
    name_91457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 15), 'name')
    # Storing an element on a container (line 2357)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2357, 8), newrec_91456, (name_91457, arr_91455))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'newrec' (line 2358)
    newrec_91458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2358, 11), 'newrec')
    # Assigning a type to the variable 'stypy_return_type' (line 2358)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2358, 4), 'stypy_return_type', newrec_91458)
    
    # ################# End of 'rec_append_fields(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rec_append_fields' in the type store
    # Getting the type of 'stypy_return_type' (line 2325)
    stypy_return_type_91459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_91459)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rec_append_fields'
    return stypy_return_type_91459

# Assigning a type to the variable 'rec_append_fields' (line 2325)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2325, 0), 'rec_append_fields', rec_append_fields)

@norecursion
def rec_drop_fields(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rec_drop_fields'
    module_type_store = module_type_store.open_function_context('rec_drop_fields', 2361, 0, False)
    
    # Passed parameters checking function
    rec_drop_fields.stypy_localization = localization
    rec_drop_fields.stypy_type_of_self = None
    rec_drop_fields.stypy_type_store = module_type_store
    rec_drop_fields.stypy_function_name = 'rec_drop_fields'
    rec_drop_fields.stypy_param_names_list = ['rec', 'names']
    rec_drop_fields.stypy_varargs_param_name = None
    rec_drop_fields.stypy_kwargs_param_name = None
    rec_drop_fields.stypy_call_defaults = defaults
    rec_drop_fields.stypy_call_varargs = varargs
    rec_drop_fields.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rec_drop_fields', ['rec', 'names'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rec_drop_fields', localization, ['rec', 'names'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rec_drop_fields(...)' code ##################

    unicode_91460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2364, (-1)), 'unicode', u'\n    Return a new numpy record array with fields in *names* dropped.\n    ')
    
    # Assigning a Call to a Name (line 2366):
    
    # Assigning a Call to a Name (line 2366):
    
    # Assigning a Call to a Name (line 2366):
    
    # Call to set(...): (line 2366)
    # Processing the call arguments (line 2366)
    # Getting the type of 'names' (line 2366)
    names_91462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 16), 'names', False)
    # Processing the call keyword arguments (line 2366)
    kwargs_91463 = {}
    # Getting the type of 'set' (line 2366)
    set_91461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 12), 'set', False)
    # Calling set(args, kwargs) (line 2366)
    set_call_result_91464 = invoke(stypy.reporting.localization.Localization(__file__, 2366, 12), set_91461, *[names_91462], **kwargs_91463)
    
    # Assigning a type to the variable 'names' (line 2366)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2366, 4), 'names', set_call_result_91464)
    
    # Assigning a Call to a Name (line 2368):
    
    # Assigning a Call to a Name (line 2368):
    
    # Assigning a Call to a Name (line 2368):
    
    # Call to dtype(...): (line 2368)
    # Processing the call arguments (line 2368)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'rec' (line 2368)
    rec_91477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 61), 'rec', False)
    # Obtaining the member 'dtype' of a type (line 2368)
    dtype_91478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2368, 61), rec_91477, 'dtype')
    # Obtaining the member 'names' of a type (line 2368)
    names_91479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2368, 61), dtype_91478, 'names')
    comprehension_91480 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2368, 25), names_91479)
    # Assigning a type to the variable 'name' (line 2368)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2368, 25), 'name', comprehension_91480)
    
    # Getting the type of 'name' (line 2369)
    name_91474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 28), 'name', False)
    # Getting the type of 'names' (line 2369)
    names_91475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 40), 'names', False)
    # Applying the binary operator 'notin' (line 2369)
    result_contains_91476 = python_operator(stypy.reporting.localization.Localization(__file__, 2369, 28), 'notin', name_91474, names_91475)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2368)
    tuple_91467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2368, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2368)
    # Adding element type (line 2368)
    # Getting the type of 'name' (line 2368)
    name_91468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 26), 'name', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2368, 26), tuple_91467, name_91468)
    # Adding element type (line 2368)
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 2368)
    name_91469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 42), 'name', False)
    # Getting the type of 'rec' (line 2368)
    rec_91470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 32), 'rec', False)
    # Obtaining the member 'dtype' of a type (line 2368)
    dtype_91471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2368, 32), rec_91470, 'dtype')
    # Obtaining the member '__getitem__' of a type (line 2368)
    getitem___91472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2368, 32), dtype_91471, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2368)
    subscript_call_result_91473 = invoke(stypy.reporting.localization.Localization(__file__, 2368, 32), getitem___91472, name_91469)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2368, 26), tuple_91467, subscript_call_result_91473)
    
    list_91481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2368, 25), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2368, 25), list_91481, tuple_91467)
    # Processing the call keyword arguments (line 2368)
    kwargs_91482 = {}
    # Getting the type of 'np' (line 2368)
    np_91465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 15), 'np', False)
    # Obtaining the member 'dtype' of a type (line 2368)
    dtype_91466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2368, 15), np_91465, 'dtype')
    # Calling dtype(args, kwargs) (line 2368)
    dtype_call_result_91483 = invoke(stypy.reporting.localization.Localization(__file__, 2368, 15), dtype_91466, *[list_91481], **kwargs_91482)
    
    # Assigning a type to the variable 'newdtype' (line 2368)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2368, 4), 'newdtype', dtype_call_result_91483)
    
    # Assigning a Call to a Name (line 2371):
    
    # Assigning a Call to a Name (line 2371):
    
    # Assigning a Call to a Name (line 2371):
    
    # Call to recarray(...): (line 2371)
    # Processing the call arguments (line 2371)
    # Getting the type of 'rec' (line 2371)
    rec_91486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 25), 'rec', False)
    # Obtaining the member 'shape' of a type (line 2371)
    shape_91487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2371, 25), rec_91486, 'shape')
    # Processing the call keyword arguments (line 2371)
    # Getting the type of 'newdtype' (line 2371)
    newdtype_91488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 42), 'newdtype', False)
    keyword_91489 = newdtype_91488
    kwargs_91490 = {'dtype': keyword_91489}
    # Getting the type of 'np' (line 2371)
    np_91484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 13), 'np', False)
    # Obtaining the member 'recarray' of a type (line 2371)
    recarray_91485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2371, 13), np_91484, 'recarray')
    # Calling recarray(args, kwargs) (line 2371)
    recarray_call_result_91491 = invoke(stypy.reporting.localization.Localization(__file__, 2371, 13), recarray_91485, *[shape_91487], **kwargs_91490)
    
    # Assigning a type to the variable 'newrec' (line 2371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2371, 4), 'newrec', recarray_call_result_91491)
    
    # Getting the type of 'newdtype' (line 2372)
    newdtype_91492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 17), 'newdtype')
    # Obtaining the member 'names' of a type (line 2372)
    names_91493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2372, 17), newdtype_91492, 'names')
    # Testing the type of a for loop iterable (line 2372)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2372, 4), names_91493)
    # Getting the type of the for loop variable (line 2372)
    for_loop_var_91494 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2372, 4), names_91493)
    # Assigning a type to the variable 'field' (line 2372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2372, 4), 'field', for_loop_var_91494)
    # SSA begins for a for statement (line 2372)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Subscript (line 2373):
    
    # Assigning a Subscript to a Subscript (line 2373):
    
    # Assigning a Subscript to a Subscript (line 2373):
    
    # Obtaining the type of the subscript
    # Getting the type of 'field' (line 2373)
    field_91495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 28), 'field')
    # Getting the type of 'rec' (line 2373)
    rec_91496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 24), 'rec')
    # Obtaining the member '__getitem__' of a type (line 2373)
    getitem___91497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2373, 24), rec_91496, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2373)
    subscript_call_result_91498 = invoke(stypy.reporting.localization.Localization(__file__, 2373, 24), getitem___91497, field_91495)
    
    # Getting the type of 'newrec' (line 2373)
    newrec_91499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 8), 'newrec')
    # Getting the type of 'field' (line 2373)
    field_91500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 15), 'field')
    # Storing an element on a container (line 2373)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2373, 8), newrec_91499, (field_91500, subscript_call_result_91498))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'newrec' (line 2375)
    newrec_91501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 11), 'newrec')
    # Assigning a type to the variable 'stypy_return_type' (line 2375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2375, 4), 'stypy_return_type', newrec_91501)
    
    # ################# End of 'rec_drop_fields(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rec_drop_fields' in the type store
    # Getting the type of 'stypy_return_type' (line 2361)
    stypy_return_type_91502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2361, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_91502)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rec_drop_fields'
    return stypy_return_type_91502

# Assigning a type to the variable 'rec_drop_fields' (line 2361)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2361, 0), 'rec_drop_fields', rec_drop_fields)

@norecursion
def rec_keep_fields(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rec_keep_fields'
    module_type_store = module_type_store.open_function_context('rec_keep_fields', 2378, 0, False)
    
    # Passed parameters checking function
    rec_keep_fields.stypy_localization = localization
    rec_keep_fields.stypy_type_of_self = None
    rec_keep_fields.stypy_type_store = module_type_store
    rec_keep_fields.stypy_function_name = 'rec_keep_fields'
    rec_keep_fields.stypy_param_names_list = ['rec', 'names']
    rec_keep_fields.stypy_varargs_param_name = None
    rec_keep_fields.stypy_kwargs_param_name = None
    rec_keep_fields.stypy_call_defaults = defaults
    rec_keep_fields.stypy_call_varargs = varargs
    rec_keep_fields.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rec_keep_fields', ['rec', 'names'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rec_keep_fields', localization, ['rec', 'names'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rec_keep_fields(...)' code ##################

    unicode_91503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2381, (-1)), 'unicode', u'\n    Return a new numpy record array with only fields listed in names\n    ')
    
    
    # Call to isinstance(...): (line 2383)
    # Processing the call arguments (line 2383)
    # Getting the type of 'names' (line 2383)
    names_91505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 18), 'names', False)
    # Getting the type of 'six' (line 2383)
    six_91506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 25), 'six', False)
    # Obtaining the member 'string_types' of a type (line 2383)
    string_types_91507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2383, 25), six_91506, 'string_types')
    # Processing the call keyword arguments (line 2383)
    kwargs_91508 = {}
    # Getting the type of 'isinstance' (line 2383)
    isinstance_91504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2383)
    isinstance_call_result_91509 = invoke(stypy.reporting.localization.Localization(__file__, 2383, 7), isinstance_91504, *[names_91505, string_types_91507], **kwargs_91508)
    
    # Testing the type of an if condition (line 2383)
    if_condition_91510 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2383, 4), isinstance_call_result_91509)
    # Assigning a type to the variable 'if_condition_91510' (line 2383)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2383, 4), 'if_condition_91510', if_condition_91510)
    # SSA begins for if statement (line 2383)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2384):
    
    # Assigning a Call to a Name (line 2384):
    
    # Assigning a Call to a Name (line 2384):
    
    # Call to split(...): (line 2384)
    # Processing the call arguments (line 2384)
    unicode_91513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2384, 28), 'unicode', u',')
    # Processing the call keyword arguments (line 2384)
    kwargs_91514 = {}
    # Getting the type of 'names' (line 2384)
    names_91511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2384, 16), 'names', False)
    # Obtaining the member 'split' of a type (line 2384)
    split_91512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2384, 16), names_91511, 'split')
    # Calling split(args, kwargs) (line 2384)
    split_call_result_91515 = invoke(stypy.reporting.localization.Localization(__file__, 2384, 16), split_91512, *[unicode_91513], **kwargs_91514)
    
    # Assigning a type to the variable 'names' (line 2384)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2384, 8), 'names', split_call_result_91515)
    # SSA join for if statement (line 2383)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 2386):
    
    # Assigning a List to a Name (line 2386):
    
    # Assigning a List to a Name (line 2386):
    
    # Obtaining an instance of the builtin type 'list' (line 2386)
    list_91516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2386, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2386)
    
    # Assigning a type to the variable 'arrays' (line 2386)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2386, 4), 'arrays', list_91516)
    
    # Getting the type of 'names' (line 2387)
    names_91517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2387, 16), 'names')
    # Testing the type of a for loop iterable (line 2387)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2387, 4), names_91517)
    # Getting the type of the for loop variable (line 2387)
    for_loop_var_91518 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2387, 4), names_91517)
    # Assigning a type to the variable 'name' (line 2387)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2387, 4), 'name', for_loop_var_91518)
    # SSA begins for a for statement (line 2387)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to append(...): (line 2388)
    # Processing the call arguments (line 2388)
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 2388)
    name_91521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 26), 'name', False)
    # Getting the type of 'rec' (line 2388)
    rec_91522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 22), 'rec', False)
    # Obtaining the member '__getitem__' of a type (line 2388)
    getitem___91523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2388, 22), rec_91522, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2388)
    subscript_call_result_91524 = invoke(stypy.reporting.localization.Localization(__file__, 2388, 22), getitem___91523, name_91521)
    
    # Processing the call keyword arguments (line 2388)
    kwargs_91525 = {}
    # Getting the type of 'arrays' (line 2388)
    arrays_91519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 8), 'arrays', False)
    # Obtaining the member 'append' of a type (line 2388)
    append_91520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2388, 8), arrays_91519, 'append')
    # Calling append(args, kwargs) (line 2388)
    append_call_result_91526 = invoke(stypy.reporting.localization.Localization(__file__, 2388, 8), append_91520, *[subscript_call_result_91524], **kwargs_91525)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to fromarrays(...): (line 2390)
    # Processing the call arguments (line 2390)
    # Getting the type of 'arrays' (line 2390)
    arrays_91530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 29), 'arrays', False)
    # Processing the call keyword arguments (line 2390)
    # Getting the type of 'names' (line 2390)
    names_91531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 43), 'names', False)
    keyword_91532 = names_91531
    kwargs_91533 = {'names': keyword_91532}
    # Getting the type of 'np' (line 2390)
    np_91527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 11), 'np', False)
    # Obtaining the member 'rec' of a type (line 2390)
    rec_91528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2390, 11), np_91527, 'rec')
    # Obtaining the member 'fromarrays' of a type (line 2390)
    fromarrays_91529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2390, 11), rec_91528, 'fromarrays')
    # Calling fromarrays(args, kwargs) (line 2390)
    fromarrays_call_result_91534 = invoke(stypy.reporting.localization.Localization(__file__, 2390, 11), fromarrays_91529, *[arrays_91530], **kwargs_91533)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2390)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2390, 4), 'stypy_return_type', fromarrays_call_result_91534)
    
    # ################# End of 'rec_keep_fields(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rec_keep_fields' in the type store
    # Getting the type of 'stypy_return_type' (line 2378)
    stypy_return_type_91535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2378, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_91535)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rec_keep_fields'
    return stypy_return_type_91535

# Assigning a type to the variable 'rec_keep_fields' (line 2378)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2378, 0), 'rec_keep_fields', rec_keep_fields)

@norecursion
def rec_groupby(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rec_groupby'
    module_type_store = module_type_store.open_function_context('rec_groupby', 2393, 0, False)
    
    # Passed parameters checking function
    rec_groupby.stypy_localization = localization
    rec_groupby.stypy_type_of_self = None
    rec_groupby.stypy_type_store = module_type_store
    rec_groupby.stypy_function_name = 'rec_groupby'
    rec_groupby.stypy_param_names_list = ['r', 'groupby', 'stats']
    rec_groupby.stypy_varargs_param_name = None
    rec_groupby.stypy_kwargs_param_name = None
    rec_groupby.stypy_call_defaults = defaults
    rec_groupby.stypy_call_varargs = varargs
    rec_groupby.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rec_groupby', ['r', 'groupby', 'stats'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rec_groupby', localization, ['r', 'groupby', 'stats'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rec_groupby(...)' code ##################

    unicode_91536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2410, (-1)), 'unicode', u"\n    *r* is a numpy record array\n\n    *groupby* is a sequence of record array attribute names that\n    together form the grouping key.  e.g., ('date', 'productcode')\n\n    *stats* is a sequence of (*attr*, *func*, *outname*) tuples which\n    will call ``x = func(attr)`` and assign *x* to the record array\n    output with attribute *outname*.  For example::\n\n      stats = ( ('sales', len, 'numsales'), ('sales', np.mean, 'avgsale') )\n\n    Return record array has *dtype* names for each attribute name in\n    the *groupby* argument, with the associated group values, and\n    for each outname name in the *stats* argument, with the associated\n    stat summary output.\n    ")
    
    # Assigning a Dict to a Name (line 2413):
    
    # Assigning a Dict to a Name (line 2413):
    
    # Assigning a Dict to a Name (line 2413):
    
    # Obtaining an instance of the builtin type 'dict' (line 2413)
    dict_91537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2413, 11), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 2413)
    
    # Assigning a type to the variable 'rowd' (line 2413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2413, 4), 'rowd', dict_91537)
    
    
    # Call to enumerate(...): (line 2414)
    # Processing the call arguments (line 2414)
    # Getting the type of 'r' (line 2414)
    r_91539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2414, 28), 'r', False)
    # Processing the call keyword arguments (line 2414)
    kwargs_91540 = {}
    # Getting the type of 'enumerate' (line 2414)
    enumerate_91538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2414, 18), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 2414)
    enumerate_call_result_91541 = invoke(stypy.reporting.localization.Localization(__file__, 2414, 18), enumerate_91538, *[r_91539], **kwargs_91540)
    
    # Testing the type of a for loop iterable (line 2414)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2414, 4), enumerate_call_result_91541)
    # Getting the type of the for loop variable (line 2414)
    for_loop_var_91542 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2414, 4), enumerate_call_result_91541)
    # Assigning a type to the variable 'i' (line 2414)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2414, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2414, 4), for_loop_var_91542))
    # Assigning a type to the variable 'row' (line 2414)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2414, 4), 'row', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2414, 4), for_loop_var_91542))
    # SSA begins for a for statement (line 2414)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 2415):
    
    # Assigning a Call to a Name (line 2415):
    
    # Assigning a Call to a Name (line 2415):
    
    # Call to tuple(...): (line 2415)
    # Processing the call arguments (line 2415)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'groupby' (line 2415)
    groupby_91548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 43), 'groupby', False)
    comprehension_91549 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2415, 21), groupby_91548)
    # Assigning a type to the variable 'attr' (line 2415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2415, 21), 'attr', comprehension_91549)
    
    # Obtaining the type of the subscript
    # Getting the type of 'attr' (line 2415)
    attr_91544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 25), 'attr', False)
    # Getting the type of 'row' (line 2415)
    row_91545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 21), 'row', False)
    # Obtaining the member '__getitem__' of a type (line 2415)
    getitem___91546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2415, 21), row_91545, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2415)
    subscript_call_result_91547 = invoke(stypy.reporting.localization.Localization(__file__, 2415, 21), getitem___91546, attr_91544)
    
    list_91550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2415, 21), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2415, 21), list_91550, subscript_call_result_91547)
    # Processing the call keyword arguments (line 2415)
    kwargs_91551 = {}
    # Getting the type of 'tuple' (line 2415)
    tuple_91543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 14), 'tuple', False)
    # Calling tuple(args, kwargs) (line 2415)
    tuple_call_result_91552 = invoke(stypy.reporting.localization.Localization(__file__, 2415, 14), tuple_91543, *[list_91550], **kwargs_91551)
    
    # Assigning a type to the variable 'key' (line 2415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2415, 8), 'key', tuple_call_result_91552)
    
    # Call to append(...): (line 2416)
    # Processing the call arguments (line 2416)
    # Getting the type of 'i' (line 2416)
    i_91560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2416, 40), 'i', False)
    # Processing the call keyword arguments (line 2416)
    kwargs_91561 = {}
    
    # Call to setdefault(...): (line 2416)
    # Processing the call arguments (line 2416)
    # Getting the type of 'key' (line 2416)
    key_91555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2416, 24), 'key', False)
    
    # Obtaining an instance of the builtin type 'list' (line 2416)
    list_91556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2416, 29), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2416)
    
    # Processing the call keyword arguments (line 2416)
    kwargs_91557 = {}
    # Getting the type of 'rowd' (line 2416)
    rowd_91553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2416, 8), 'rowd', False)
    # Obtaining the member 'setdefault' of a type (line 2416)
    setdefault_91554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2416, 8), rowd_91553, 'setdefault')
    # Calling setdefault(args, kwargs) (line 2416)
    setdefault_call_result_91558 = invoke(stypy.reporting.localization.Localization(__file__, 2416, 8), setdefault_91554, *[key_91555, list_91556], **kwargs_91557)
    
    # Obtaining the member 'append' of a type (line 2416)
    append_91559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2416, 8), setdefault_call_result_91558, 'append')
    # Calling append(args, kwargs) (line 2416)
    append_call_result_91562 = invoke(stypy.reporting.localization.Localization(__file__, 2416, 8), append_91559, *[i_91560], **kwargs_91561)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 2418):
    
    # Assigning a List to a Name (line 2418):
    
    # Assigning a List to a Name (line 2418):
    
    # Obtaining an instance of the builtin type 'list' (line 2418)
    list_91563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2418, 11), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2418)
    
    # Assigning a type to the variable 'rows' (line 2418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2418, 4), 'rows', list_91563)
    
    
    # Call to sorted(...): (line 2420)
    # Processing the call arguments (line 2420)
    # Getting the type of 'rowd' (line 2420)
    rowd_91565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 22), 'rowd', False)
    # Processing the call keyword arguments (line 2420)
    kwargs_91566 = {}
    # Getting the type of 'sorted' (line 2420)
    sorted_91564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 15), 'sorted', False)
    # Calling sorted(args, kwargs) (line 2420)
    sorted_call_result_91567 = invoke(stypy.reporting.localization.Localization(__file__, 2420, 15), sorted_91564, *[rowd_91565], **kwargs_91566)
    
    # Testing the type of a for loop iterable (line 2420)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2420, 4), sorted_call_result_91567)
    # Getting the type of the for loop variable (line 2420)
    for_loop_var_91568 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2420, 4), sorted_call_result_91567)
    # Assigning a type to the variable 'key' (line 2420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2420, 4), 'key', for_loop_var_91568)
    # SSA begins for a for statement (line 2420)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 2421):
    
    # Assigning a Call to a Name (line 2421):
    
    # Assigning a Call to a Name (line 2421):
    
    # Call to list(...): (line 2421)
    # Processing the call arguments (line 2421)
    # Getting the type of 'key' (line 2421)
    key_91570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 19), 'key', False)
    # Processing the call keyword arguments (line 2421)
    kwargs_91571 = {}
    # Getting the type of 'list' (line 2421)
    list_91569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 14), 'list', False)
    # Calling list(args, kwargs) (line 2421)
    list_call_result_91572 = invoke(stypy.reporting.localization.Localization(__file__, 2421, 14), list_91569, *[key_91570], **kwargs_91571)
    
    # Assigning a type to the variable 'row' (line 2421)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2421, 8), 'row', list_call_result_91572)
    
    # Assigning a Subscript to a Name (line 2423):
    
    # Assigning a Subscript to a Name (line 2423):
    
    # Assigning a Subscript to a Name (line 2423):
    
    # Obtaining the type of the subscript
    # Getting the type of 'key' (line 2423)
    key_91573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2423, 19), 'key')
    # Getting the type of 'rowd' (line 2423)
    rowd_91574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2423, 14), 'rowd')
    # Obtaining the member '__getitem__' of a type (line 2423)
    getitem___91575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2423, 14), rowd_91574, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2423)
    subscript_call_result_91576 = invoke(stypy.reporting.localization.Localization(__file__, 2423, 14), getitem___91575, key_91573)
    
    # Assigning a type to the variable 'ind' (line 2423)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2423, 8), 'ind', subscript_call_result_91576)
    
    # Assigning a Subscript to a Name (line 2424):
    
    # Assigning a Subscript to a Name (line 2424):
    
    # Assigning a Subscript to a Name (line 2424):
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind' (line 2424)
    ind_91577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2424, 18), 'ind')
    # Getting the type of 'r' (line 2424)
    r_91578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2424, 16), 'r')
    # Obtaining the member '__getitem__' of a type (line 2424)
    getitem___91579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2424, 16), r_91578, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2424)
    subscript_call_result_91580 = invoke(stypy.reporting.localization.Localization(__file__, 2424, 16), getitem___91579, ind_91577)
    
    # Assigning a type to the variable 'thisr' (line 2424)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2424, 8), 'thisr', subscript_call_result_91580)
    
    # Call to extend(...): (line 2426)
    # Processing the call arguments (line 2426)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'stats' (line 2426)
    stats_91590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2426, 65), 'stats', False)
    comprehension_91591 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2426, 20), stats_91590)
    # Assigning a type to the variable 'attr' (line 2426)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2426, 20), 'attr', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2426, 20), comprehension_91591))
    # Assigning a type to the variable 'func' (line 2426)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2426, 20), 'func', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2426, 20), comprehension_91591))
    # Assigning a type to the variable 'outname' (line 2426)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2426, 20), 'outname', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2426, 20), comprehension_91591))
    
    # Call to func(...): (line 2426)
    # Processing the call arguments (line 2426)
    
    # Obtaining the type of the subscript
    # Getting the type of 'attr' (line 2426)
    attr_91584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2426, 31), 'attr', False)
    # Getting the type of 'thisr' (line 2426)
    thisr_91585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2426, 25), 'thisr', False)
    # Obtaining the member '__getitem__' of a type (line 2426)
    getitem___91586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2426, 25), thisr_91585, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2426)
    subscript_call_result_91587 = invoke(stypy.reporting.localization.Localization(__file__, 2426, 25), getitem___91586, attr_91584)
    
    # Processing the call keyword arguments (line 2426)
    kwargs_91588 = {}
    # Getting the type of 'func' (line 2426)
    func_91583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2426, 20), 'func', False)
    # Calling func(args, kwargs) (line 2426)
    func_call_result_91589 = invoke(stypy.reporting.localization.Localization(__file__, 2426, 20), func_91583, *[subscript_call_result_91587], **kwargs_91588)
    
    list_91592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2426, 20), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2426, 20), list_91592, func_call_result_91589)
    # Processing the call keyword arguments (line 2426)
    kwargs_91593 = {}
    # Getting the type of 'row' (line 2426)
    row_91581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2426, 8), 'row', False)
    # Obtaining the member 'extend' of a type (line 2426)
    extend_91582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2426, 8), row_91581, 'extend')
    # Calling extend(args, kwargs) (line 2426)
    extend_call_result_91594 = invoke(stypy.reporting.localization.Localization(__file__, 2426, 8), extend_91582, *[list_91592], **kwargs_91593)
    
    
    # Call to append(...): (line 2427)
    # Processing the call arguments (line 2427)
    # Getting the type of 'row' (line 2427)
    row_91597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2427, 20), 'row', False)
    # Processing the call keyword arguments (line 2427)
    kwargs_91598 = {}
    # Getting the type of 'rows' (line 2427)
    rows_91595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2427, 8), 'rows', False)
    # Obtaining the member 'append' of a type (line 2427)
    append_91596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2427, 8), rows_91595, 'append')
    # Calling append(args, kwargs) (line 2427)
    append_call_result_91599 = invoke(stypy.reporting.localization.Localization(__file__, 2427, 8), append_91596, *[row_91597], **kwargs_91598)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 2430):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to list(...): (line 2430)
    # Processing the call arguments (line 2430)
    
    # Call to zip(...): (line 2430)
    # Getting the type of 'stats' (line 2430)
    stats_91602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 39), 'stats', False)
    # Processing the call keyword arguments (line 2430)
    kwargs_91603 = {}
    # Getting the type of 'zip' (line 2430)
    zip_91601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 34), 'zip', False)
    # Calling zip(args, kwargs) (line 2430)
    zip_call_result_91604 = invoke(stypy.reporting.localization.Localization(__file__, 2430, 34), zip_91601, *[stats_91602], **kwargs_91603)
    
    # Processing the call keyword arguments (line 2430)
    kwargs_91605 = {}
    # Getting the type of 'list' (line 2430)
    list_91600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 29), 'list', False)
    # Calling list(args, kwargs) (line 2430)
    list_call_result_91606 = invoke(stypy.reporting.localization.Localization(__file__, 2430, 29), list_91600, *[zip_call_result_91604], **kwargs_91605)
    
    # Assigning a type to the variable 'call_assignment_87277' (line 2430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2430, 4), 'call_assignment_87277', list_call_result_91606)
    
    # Assigning a Call to a Name (line 2430):
    
    # Assigning a Call to a Name (line 2430):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_91609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2430, 4), 'int')
    # Processing the call keyword arguments
    kwargs_91610 = {}
    # Getting the type of 'call_assignment_87277' (line 2430)
    call_assignment_87277_91607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 4), 'call_assignment_87277', False)
    # Obtaining the member '__getitem__' of a type (line 2430)
    getitem___91608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2430, 4), call_assignment_87277_91607, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_91611 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___91608, *[int_91609], **kwargs_91610)
    
    # Assigning a type to the variable 'call_assignment_87278' (line 2430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2430, 4), 'call_assignment_87278', getitem___call_result_91611)
    
    # Assigning a Name to a Name (line 2430):
    
    # Assigning a Name to a Name (line 2430):
    # Getting the type of 'call_assignment_87278' (line 2430)
    call_assignment_87278_91612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 4), 'call_assignment_87278')
    # Assigning a type to the variable 'attrs' (line 2430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2430, 4), 'attrs', call_assignment_87278_91612)
    
    # Assigning a Call to a Name (line 2430):
    
    # Assigning a Call to a Name (line 2430):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_91615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2430, 4), 'int')
    # Processing the call keyword arguments
    kwargs_91616 = {}
    # Getting the type of 'call_assignment_87277' (line 2430)
    call_assignment_87277_91613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 4), 'call_assignment_87277', False)
    # Obtaining the member '__getitem__' of a type (line 2430)
    getitem___91614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2430, 4), call_assignment_87277_91613, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_91617 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___91614, *[int_91615], **kwargs_91616)
    
    # Assigning a type to the variable 'call_assignment_87279' (line 2430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2430, 4), 'call_assignment_87279', getitem___call_result_91617)
    
    # Assigning a Name to a Name (line 2430):
    
    # Assigning a Name to a Name (line 2430):
    # Getting the type of 'call_assignment_87279' (line 2430)
    call_assignment_87279_91618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 4), 'call_assignment_87279')
    # Assigning a type to the variable 'funcs' (line 2430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2430, 11), 'funcs', call_assignment_87279_91618)
    
    # Assigning a Call to a Name (line 2430):
    
    # Assigning a Call to a Name (line 2430):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_91621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2430, 4), 'int')
    # Processing the call keyword arguments
    kwargs_91622 = {}
    # Getting the type of 'call_assignment_87277' (line 2430)
    call_assignment_87277_91619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 4), 'call_assignment_87277', False)
    # Obtaining the member '__getitem__' of a type (line 2430)
    getitem___91620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2430, 4), call_assignment_87277_91619, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_91623 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___91620, *[int_91621], **kwargs_91622)
    
    # Assigning a type to the variable 'call_assignment_87280' (line 2430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2430, 4), 'call_assignment_87280', getitem___call_result_91623)
    
    # Assigning a Name to a Name (line 2430):
    
    # Assigning a Name to a Name (line 2430):
    # Getting the type of 'call_assignment_87280' (line 2430)
    call_assignment_87280_91624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 4), 'call_assignment_87280')
    # Assigning a type to the variable 'outnames' (line 2430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2430, 18), 'outnames', call_assignment_87280_91624)
    
    # Assigning a Call to a Name (line 2431):
    
    # Assigning a Call to a Name (line 2431):
    
    # Assigning a Call to a Name (line 2431):
    
    # Call to list(...): (line 2431)
    # Processing the call arguments (line 2431)
    # Getting the type of 'groupby' (line 2431)
    groupby_91626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2431, 17), 'groupby', False)
    # Processing the call keyword arguments (line 2431)
    kwargs_91627 = {}
    # Getting the type of 'list' (line 2431)
    list_91625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2431, 12), 'list', False)
    # Calling list(args, kwargs) (line 2431)
    list_call_result_91628 = invoke(stypy.reporting.localization.Localization(__file__, 2431, 12), list_91625, *[groupby_91626], **kwargs_91627)
    
    # Assigning a type to the variable 'names' (line 2431)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2431, 4), 'names', list_call_result_91628)
    
    # Call to extend(...): (line 2432)
    # Processing the call arguments (line 2432)
    # Getting the type of 'outnames' (line 2432)
    outnames_91631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2432, 17), 'outnames', False)
    # Processing the call keyword arguments (line 2432)
    kwargs_91632 = {}
    # Getting the type of 'names' (line 2432)
    names_91629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2432, 4), 'names', False)
    # Obtaining the member 'extend' of a type (line 2432)
    extend_91630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2432, 4), names_91629, 'extend')
    # Calling extend(args, kwargs) (line 2432)
    extend_call_result_91633 = invoke(stypy.reporting.localization.Localization(__file__, 2432, 4), extend_91630, *[outnames_91631], **kwargs_91632)
    
    
    # Call to fromrecords(...): (line 2433)
    # Processing the call arguments (line 2433)
    # Getting the type of 'rows' (line 2433)
    rows_91637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2433, 30), 'rows', False)
    # Processing the call keyword arguments (line 2433)
    # Getting the type of 'names' (line 2433)
    names_91638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2433, 42), 'names', False)
    keyword_91639 = names_91638
    kwargs_91640 = {'names': keyword_91639}
    # Getting the type of 'np' (line 2433)
    np_91634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2433, 11), 'np', False)
    # Obtaining the member 'rec' of a type (line 2433)
    rec_91635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2433, 11), np_91634, 'rec')
    # Obtaining the member 'fromrecords' of a type (line 2433)
    fromrecords_91636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2433, 11), rec_91635, 'fromrecords')
    # Calling fromrecords(args, kwargs) (line 2433)
    fromrecords_call_result_91641 = invoke(stypy.reporting.localization.Localization(__file__, 2433, 11), fromrecords_91636, *[rows_91637], **kwargs_91640)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2433, 4), 'stypy_return_type', fromrecords_call_result_91641)
    
    # ################# End of 'rec_groupby(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rec_groupby' in the type store
    # Getting the type of 'stypy_return_type' (line 2393)
    stypy_return_type_91642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_91642)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rec_groupby'
    return stypy_return_type_91642

# Assigning a type to the variable 'rec_groupby' (line 2393)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2393, 0), 'rec_groupby', rec_groupby)

@norecursion
def rec_summarize(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rec_summarize'
    module_type_store = module_type_store.open_function_context('rec_summarize', 2436, 0, False)
    
    # Passed parameters checking function
    rec_summarize.stypy_localization = localization
    rec_summarize.stypy_type_of_self = None
    rec_summarize.stypy_type_store = module_type_store
    rec_summarize.stypy_function_name = 'rec_summarize'
    rec_summarize.stypy_param_names_list = ['r', 'summaryfuncs']
    rec_summarize.stypy_varargs_param_name = None
    rec_summarize.stypy_kwargs_param_name = None
    rec_summarize.stypy_call_defaults = defaults
    rec_summarize.stypy_call_varargs = varargs
    rec_summarize.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rec_summarize', ['r', 'summaryfuncs'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rec_summarize', localization, ['r', 'summaryfuncs'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rec_summarize(...)' code ##################

    unicode_91643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2446, (-1)), 'unicode', u'\n    *r* is a numpy record array\n\n    *summaryfuncs* is a list of (*attr*, *func*, *outname*) tuples\n    which will apply *func* to the array *r*[attr] and assign the\n    output to a new attribute name *outname*.  The returned record\n    array is identical to *r*, with extra arrays for each element in\n    *summaryfuncs*.\n\n    ')
    
    # Assigning a Call to a Name (line 2448):
    
    # Assigning a Call to a Name (line 2448):
    
    # Assigning a Call to a Name (line 2448):
    
    # Call to list(...): (line 2448)
    # Processing the call arguments (line 2448)
    # Getting the type of 'r' (line 2448)
    r_91645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2448, 17), 'r', False)
    # Obtaining the member 'dtype' of a type (line 2448)
    dtype_91646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2448, 17), r_91645, 'dtype')
    # Obtaining the member 'names' of a type (line 2448)
    names_91647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2448, 17), dtype_91646, 'names')
    # Processing the call keyword arguments (line 2448)
    kwargs_91648 = {}
    # Getting the type of 'list' (line 2448)
    list_91644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2448, 12), 'list', False)
    # Calling list(args, kwargs) (line 2448)
    list_call_result_91649 = invoke(stypy.reporting.localization.Localization(__file__, 2448, 12), list_91644, *[names_91647], **kwargs_91648)
    
    # Assigning a type to the variable 'names' (line 2448)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2448, 4), 'names', list_call_result_91649)
    
    # Assigning a ListComp to a Name (line 2449):
    
    # Assigning a ListComp to a Name (line 2449):
    
    # Assigning a ListComp to a Name (line 2449):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'names' (line 2449)
    names_91654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2449, 34), 'names')
    comprehension_91655 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2449, 14), names_91654)
    # Assigning a type to the variable 'name' (line 2449)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2449, 14), 'name', comprehension_91655)
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 2449)
    name_91650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2449, 16), 'name')
    # Getting the type of 'r' (line 2449)
    r_91651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2449, 14), 'r')
    # Obtaining the member '__getitem__' of a type (line 2449)
    getitem___91652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2449, 14), r_91651, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2449)
    subscript_call_result_91653 = invoke(stypy.reporting.localization.Localization(__file__, 2449, 14), getitem___91652, name_91650)
    
    list_91656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2449, 14), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2449, 14), list_91656, subscript_call_result_91653)
    # Assigning a type to the variable 'arrays' (line 2449)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2449, 4), 'arrays', list_91656)
    
    # Getting the type of 'summaryfuncs' (line 2451)
    summaryfuncs_91657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 31), 'summaryfuncs')
    # Testing the type of a for loop iterable (line 2451)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2451, 4), summaryfuncs_91657)
    # Getting the type of the for loop variable (line 2451)
    for_loop_var_91658 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2451, 4), summaryfuncs_91657)
    # Assigning a type to the variable 'attr' (line 2451)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2451, 4), 'attr', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2451, 4), for_loop_var_91658))
    # Assigning a type to the variable 'func' (line 2451)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2451, 4), 'func', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2451, 4), for_loop_var_91658))
    # Assigning a type to the variable 'outname' (line 2451)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2451, 4), 'outname', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2451, 4), for_loop_var_91658))
    # SSA begins for a for statement (line 2451)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to append(...): (line 2452)
    # Processing the call arguments (line 2452)
    # Getting the type of 'outname' (line 2452)
    outname_91661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2452, 21), 'outname', False)
    # Processing the call keyword arguments (line 2452)
    kwargs_91662 = {}
    # Getting the type of 'names' (line 2452)
    names_91659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2452, 8), 'names', False)
    # Obtaining the member 'append' of a type (line 2452)
    append_91660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2452, 8), names_91659, 'append')
    # Calling append(args, kwargs) (line 2452)
    append_call_result_91663 = invoke(stypy.reporting.localization.Localization(__file__, 2452, 8), append_91660, *[outname_91661], **kwargs_91662)
    
    
    # Call to append(...): (line 2453)
    # Processing the call arguments (line 2453)
    
    # Call to asarray(...): (line 2453)
    # Processing the call arguments (line 2453)
    
    # Call to func(...): (line 2453)
    # Processing the call arguments (line 2453)
    
    # Obtaining the type of the subscript
    # Getting the type of 'attr' (line 2453)
    attr_91669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2453, 40), 'attr', False)
    # Getting the type of 'r' (line 2453)
    r_91670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2453, 38), 'r', False)
    # Obtaining the member '__getitem__' of a type (line 2453)
    getitem___91671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2453, 38), r_91670, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2453)
    subscript_call_result_91672 = invoke(stypy.reporting.localization.Localization(__file__, 2453, 38), getitem___91671, attr_91669)
    
    # Processing the call keyword arguments (line 2453)
    kwargs_91673 = {}
    # Getting the type of 'func' (line 2453)
    func_91668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2453, 33), 'func', False)
    # Calling func(args, kwargs) (line 2453)
    func_call_result_91674 = invoke(stypy.reporting.localization.Localization(__file__, 2453, 33), func_91668, *[subscript_call_result_91672], **kwargs_91673)
    
    # Processing the call keyword arguments (line 2453)
    kwargs_91675 = {}
    # Getting the type of 'np' (line 2453)
    np_91666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2453, 22), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2453)
    asarray_91667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2453, 22), np_91666, 'asarray')
    # Calling asarray(args, kwargs) (line 2453)
    asarray_call_result_91676 = invoke(stypy.reporting.localization.Localization(__file__, 2453, 22), asarray_91667, *[func_call_result_91674], **kwargs_91675)
    
    # Processing the call keyword arguments (line 2453)
    kwargs_91677 = {}
    # Getting the type of 'arrays' (line 2453)
    arrays_91664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2453, 8), 'arrays', False)
    # Obtaining the member 'append' of a type (line 2453)
    append_91665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2453, 8), arrays_91664, 'append')
    # Calling append(args, kwargs) (line 2453)
    append_call_result_91678 = invoke(stypy.reporting.localization.Localization(__file__, 2453, 8), append_91665, *[asarray_call_result_91676], **kwargs_91677)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to fromarrays(...): (line 2455)
    # Processing the call arguments (line 2455)
    # Getting the type of 'arrays' (line 2455)
    arrays_91682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 29), 'arrays', False)
    # Processing the call keyword arguments (line 2455)
    # Getting the type of 'names' (line 2455)
    names_91683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 43), 'names', False)
    keyword_91684 = names_91683
    kwargs_91685 = {'names': keyword_91684}
    # Getting the type of 'np' (line 2455)
    np_91679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 11), 'np', False)
    # Obtaining the member 'rec' of a type (line 2455)
    rec_91680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2455, 11), np_91679, 'rec')
    # Obtaining the member 'fromarrays' of a type (line 2455)
    fromarrays_91681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2455, 11), rec_91680, 'fromarrays')
    # Calling fromarrays(args, kwargs) (line 2455)
    fromarrays_call_result_91686 = invoke(stypy.reporting.localization.Localization(__file__, 2455, 11), fromarrays_91681, *[arrays_91682], **kwargs_91685)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2455)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2455, 4), 'stypy_return_type', fromarrays_call_result_91686)
    
    # ################# End of 'rec_summarize(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rec_summarize' in the type store
    # Getting the type of 'stypy_return_type' (line 2436)
    stypy_return_type_91687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_91687)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rec_summarize'
    return stypy_return_type_91687

# Assigning a type to the variable 'rec_summarize' (line 2436)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2436, 0), 'rec_summarize', rec_summarize)

@norecursion
def rec_join(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    unicode_91688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2458, 35), 'unicode', u'inner')
    # Getting the type of 'None' (line 2458)
    None_91689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 53), 'None')
    unicode_91690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2458, 69), 'unicode', u'1')
    unicode_91691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2459, 23), 'unicode', u'2')
    defaults = [unicode_91688, None_91689, unicode_91690, unicode_91691]
    # Create a new context for function 'rec_join'
    module_type_store = module_type_store.open_function_context('rec_join', 2458, 0, False)
    
    # Passed parameters checking function
    rec_join.stypy_localization = localization
    rec_join.stypy_type_of_self = None
    rec_join.stypy_type_store = module_type_store
    rec_join.stypy_function_name = 'rec_join'
    rec_join.stypy_param_names_list = ['key', 'r1', 'r2', 'jointype', 'defaults', 'r1postfix', 'r2postfix']
    rec_join.stypy_varargs_param_name = None
    rec_join.stypy_kwargs_param_name = None
    rec_join.stypy_call_defaults = defaults
    rec_join.stypy_call_varargs = varargs
    rec_join.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rec_join', ['key', 'r1', 'r2', 'jointype', 'defaults', 'r1postfix', 'r2postfix'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rec_join', localization, ['key', 'r1', 'r2', 'jointype', 'defaults', 'r1postfix', 'r2postfix'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rec_join(...)' code ##################

    unicode_91692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2478, (-1)), 'unicode', u"\n    Join record arrays *r1* and *r2* on *key*; *key* is a tuple of\n    field names -- if *key* is a string it is assumed to be a single\n    attribute name. If *r1* and *r2* have equal values on all the keys\n    in the *key* tuple, then their fields will be merged into a new\n    record array containing the intersection of the fields of *r1* and\n    *r2*.\n\n    *r1* (also *r2*) must not have any duplicate keys.\n\n    The *jointype* keyword can be 'inner', 'outer', 'leftouter'.  To\n    do a rightouter join just reverse *r1* and *r2*.\n\n    The *defaults* keyword is a dictionary filled with\n    ``{column_name:default_value}`` pairs.\n\n    The keywords *r1postfix* and *r2postfix* are postfixed to column names\n    (other than keys) that are both in *r1* and *r2*.\n    ")
    
    
    # Call to isinstance(...): (line 2480)
    # Processing the call arguments (line 2480)
    # Getting the type of 'key' (line 2480)
    key_91694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 18), 'key', False)
    # Getting the type of 'six' (line 2480)
    six_91695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 23), 'six', False)
    # Obtaining the member 'string_types' of a type (line 2480)
    string_types_91696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2480, 23), six_91695, 'string_types')
    # Processing the call keyword arguments (line 2480)
    kwargs_91697 = {}
    # Getting the type of 'isinstance' (line 2480)
    isinstance_91693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2480)
    isinstance_call_result_91698 = invoke(stypy.reporting.localization.Localization(__file__, 2480, 7), isinstance_91693, *[key_91694, string_types_91696], **kwargs_91697)
    
    # Testing the type of an if condition (line 2480)
    if_condition_91699 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2480, 4), isinstance_call_result_91698)
    # Assigning a type to the variable 'if_condition_91699' (line 2480)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2480, 4), 'if_condition_91699', if_condition_91699)
    # SSA begins for if statement (line 2480)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 2481):
    
    # Assigning a Tuple to a Name (line 2481):
    
    # Assigning a Tuple to a Name (line 2481):
    
    # Obtaining an instance of the builtin type 'tuple' (line 2481)
    tuple_91700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2481, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2481)
    # Adding element type (line 2481)
    # Getting the type of 'key' (line 2481)
    key_91701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2481, 15), 'key')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2481, 15), tuple_91700, key_91701)
    
    # Assigning a type to the variable 'key' (line 2481)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2481, 8), 'key', tuple_91700)
    # SSA join for if statement (line 2480)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'key' (line 2483)
    key_91702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2483, 16), 'key')
    # Testing the type of a for loop iterable (line 2483)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2483, 4), key_91702)
    # Getting the type of the for loop variable (line 2483)
    for_loop_var_91703 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2483, 4), key_91702)
    # Assigning a type to the variable 'name' (line 2483)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2483, 4), 'name', for_loop_var_91703)
    # SSA begins for a for statement (line 2483)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'name' (line 2484)
    name_91704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2484, 11), 'name')
    # Getting the type of 'r1' (line 2484)
    r1_91705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2484, 23), 'r1')
    # Obtaining the member 'dtype' of a type (line 2484)
    dtype_91706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2484, 23), r1_91705, 'dtype')
    # Obtaining the member 'names' of a type (line 2484)
    names_91707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2484, 23), dtype_91706, 'names')
    # Applying the binary operator 'notin' (line 2484)
    result_contains_91708 = python_operator(stypy.reporting.localization.Localization(__file__, 2484, 11), 'notin', name_91704, names_91707)
    
    # Testing the type of an if condition (line 2484)
    if_condition_91709 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2484, 8), result_contains_91708)
    # Assigning a type to the variable 'if_condition_91709' (line 2484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2484, 8), 'if_condition_91709', if_condition_91709)
    # SSA begins for if statement (line 2484)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2485)
    # Processing the call arguments (line 2485)
    unicode_91711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2485, 29), 'unicode', u'r1 does not have key field %s')
    # Getting the type of 'name' (line 2485)
    name_91712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2485, 63), 'name', False)
    # Applying the binary operator '%' (line 2485)
    result_mod_91713 = python_operator(stypy.reporting.localization.Localization(__file__, 2485, 29), '%', unicode_91711, name_91712)
    
    # Processing the call keyword arguments (line 2485)
    kwargs_91714 = {}
    # Getting the type of 'ValueError' (line 2485)
    ValueError_91710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2485, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2485)
    ValueError_call_result_91715 = invoke(stypy.reporting.localization.Localization(__file__, 2485, 18), ValueError_91710, *[result_mod_91713], **kwargs_91714)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2485, 12), ValueError_call_result_91715, 'raise parameter', BaseException)
    # SSA join for if statement (line 2484)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'name' (line 2486)
    name_91716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2486, 11), 'name')
    # Getting the type of 'r2' (line 2486)
    r2_91717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2486, 23), 'r2')
    # Obtaining the member 'dtype' of a type (line 2486)
    dtype_91718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2486, 23), r2_91717, 'dtype')
    # Obtaining the member 'names' of a type (line 2486)
    names_91719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2486, 23), dtype_91718, 'names')
    # Applying the binary operator 'notin' (line 2486)
    result_contains_91720 = python_operator(stypy.reporting.localization.Localization(__file__, 2486, 11), 'notin', name_91716, names_91719)
    
    # Testing the type of an if condition (line 2486)
    if_condition_91721 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2486, 8), result_contains_91720)
    # Assigning a type to the variable 'if_condition_91721' (line 2486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2486, 8), 'if_condition_91721', if_condition_91721)
    # SSA begins for if statement (line 2486)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2487)
    # Processing the call arguments (line 2487)
    unicode_91723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2487, 29), 'unicode', u'r2 does not have key field %s')
    # Getting the type of 'name' (line 2487)
    name_91724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 63), 'name', False)
    # Applying the binary operator '%' (line 2487)
    result_mod_91725 = python_operator(stypy.reporting.localization.Localization(__file__, 2487, 29), '%', unicode_91723, name_91724)
    
    # Processing the call keyword arguments (line 2487)
    kwargs_91726 = {}
    # Getting the type of 'ValueError' (line 2487)
    ValueError_91722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2487)
    ValueError_call_result_91727 = invoke(stypy.reporting.localization.Localization(__file__, 2487, 18), ValueError_91722, *[result_mod_91725], **kwargs_91726)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2487, 12), ValueError_call_result_91727, 'raise parameter', BaseException)
    # SSA join for if statement (line 2486)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    

    @norecursion
    def makekey(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'makekey'
        module_type_store = module_type_store.open_function_context('makekey', 2489, 4, False)
        
        # Passed parameters checking function
        makekey.stypy_localization = localization
        makekey.stypy_type_of_self = None
        makekey.stypy_type_store = module_type_store
        makekey.stypy_function_name = 'makekey'
        makekey.stypy_param_names_list = ['row']
        makekey.stypy_varargs_param_name = None
        makekey.stypy_kwargs_param_name = None
        makekey.stypy_call_defaults = defaults
        makekey.stypy_call_varargs = varargs
        makekey.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'makekey', ['row'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'makekey', localization, ['row'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'makekey(...)' code ##################

        
        # Call to tuple(...): (line 2490)
        # Processing the call arguments (line 2490)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'key' (line 2490)
        key_91733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 44), 'key', False)
        comprehension_91734 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2490, 22), key_91733)
        # Assigning a type to the variable 'name' (line 2490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2490, 22), 'name', comprehension_91734)
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 2490)
        name_91729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 26), 'name', False)
        # Getting the type of 'row' (line 2490)
        row_91730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 22), 'row', False)
        # Obtaining the member '__getitem__' of a type (line 2490)
        getitem___91731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2490, 22), row_91730, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2490)
        subscript_call_result_91732 = invoke(stypy.reporting.localization.Localization(__file__, 2490, 22), getitem___91731, name_91729)
        
        list_91735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2490, 22), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2490, 22), list_91735, subscript_call_result_91732)
        # Processing the call keyword arguments (line 2490)
        kwargs_91736 = {}
        # Getting the type of 'tuple' (line 2490)
        tuple_91728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 15), 'tuple', False)
        # Calling tuple(args, kwargs) (line 2490)
        tuple_call_result_91737 = invoke(stypy.reporting.localization.Localization(__file__, 2490, 15), tuple_91728, *[list_91735], **kwargs_91736)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2490, 8), 'stypy_return_type', tuple_call_result_91737)
        
        # ################# End of 'makekey(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'makekey' in the type store
        # Getting the type of 'stypy_return_type' (line 2489)
        stypy_return_type_91738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2489, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_91738)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'makekey'
        return stypy_return_type_91738

    # Assigning a type to the variable 'makekey' (line 2489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2489, 4), 'makekey', makekey)
    
    # Assigning a DictComp to a Name (line 2492):
    
    # Assigning a DictComp to a Name (line 2492):
    
    # Assigning a DictComp to a Name (line 2492):
    # Calculating dict comprehension
    module_type_store = module_type_store.open_function_context('dict comprehension expression', 2492, 11, True)
    # Calculating comprehension expression
    
    # Call to enumerate(...): (line 2492)
    # Processing the call arguments (line 2492)
    # Getting the type of 'r1' (line 2492)
    r1_91745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2492, 51), 'r1', False)
    # Processing the call keyword arguments (line 2492)
    kwargs_91746 = {}
    # Getting the type of 'enumerate' (line 2492)
    enumerate_91744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2492, 41), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 2492)
    enumerate_call_result_91747 = invoke(stypy.reporting.localization.Localization(__file__, 2492, 41), enumerate_91744, *[r1_91745], **kwargs_91746)
    
    comprehension_91748 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2492, 11), enumerate_call_result_91747)
    # Assigning a type to the variable 'i' (line 2492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2492, 11), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2492, 11), comprehension_91748))
    # Assigning a type to the variable 'row' (line 2492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2492, 11), 'row', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2492, 11), comprehension_91748))
    
    # Call to makekey(...): (line 2492)
    # Processing the call arguments (line 2492)
    # Getting the type of 'row' (line 2492)
    row_91740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2492, 19), 'row', False)
    # Processing the call keyword arguments (line 2492)
    kwargs_91741 = {}
    # Getting the type of 'makekey' (line 2492)
    makekey_91739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2492, 11), 'makekey', False)
    # Calling makekey(args, kwargs) (line 2492)
    makekey_call_result_91742 = invoke(stypy.reporting.localization.Localization(__file__, 2492, 11), makekey_91739, *[row_91740], **kwargs_91741)
    
    # Getting the type of 'i' (line 2492)
    i_91743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2492, 25), 'i')
    dict_91749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2492, 11), 'dict')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2492, 11), dict_91749, (makekey_call_result_91742, i_91743))
    # Assigning a type to the variable 'r1d' (line 2492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2492, 4), 'r1d', dict_91749)
    
    # Assigning a DictComp to a Name (line 2493):
    
    # Assigning a DictComp to a Name (line 2493):
    
    # Assigning a DictComp to a Name (line 2493):
    # Calculating dict comprehension
    module_type_store = module_type_store.open_function_context('dict comprehension expression', 2493, 11, True)
    # Calculating comprehension expression
    
    # Call to enumerate(...): (line 2493)
    # Processing the call arguments (line 2493)
    # Getting the type of 'r2' (line 2493)
    r2_91756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2493, 51), 'r2', False)
    # Processing the call keyword arguments (line 2493)
    kwargs_91757 = {}
    # Getting the type of 'enumerate' (line 2493)
    enumerate_91755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2493, 41), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 2493)
    enumerate_call_result_91758 = invoke(stypy.reporting.localization.Localization(__file__, 2493, 41), enumerate_91755, *[r2_91756], **kwargs_91757)
    
    comprehension_91759 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2493, 11), enumerate_call_result_91758)
    # Assigning a type to the variable 'i' (line 2493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2493, 11), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2493, 11), comprehension_91759))
    # Assigning a type to the variable 'row' (line 2493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2493, 11), 'row', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2493, 11), comprehension_91759))
    
    # Call to makekey(...): (line 2493)
    # Processing the call arguments (line 2493)
    # Getting the type of 'row' (line 2493)
    row_91751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2493, 19), 'row', False)
    # Processing the call keyword arguments (line 2493)
    kwargs_91752 = {}
    # Getting the type of 'makekey' (line 2493)
    makekey_91750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2493, 11), 'makekey', False)
    # Calling makekey(args, kwargs) (line 2493)
    makekey_call_result_91753 = invoke(stypy.reporting.localization.Localization(__file__, 2493, 11), makekey_91750, *[row_91751], **kwargs_91752)
    
    # Getting the type of 'i' (line 2493)
    i_91754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2493, 25), 'i')
    dict_91760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2493, 11), 'dict')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2493, 11), dict_91760, (makekey_call_result_91753, i_91754))
    # Assigning a type to the variable 'r2d' (line 2493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2493, 4), 'r2d', dict_91760)
    
    # Assigning a Call to a Name (line 2495):
    
    # Assigning a Call to a Name (line 2495):
    
    # Assigning a Call to a Name (line 2495):
    
    # Call to set(...): (line 2495)
    # Processing the call arguments (line 2495)
    # Getting the type of 'r1d' (line 2495)
    r1d_91762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 17), 'r1d', False)
    # Processing the call keyword arguments (line 2495)
    kwargs_91763 = {}
    # Getting the type of 'set' (line 2495)
    set_91761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 13), 'set', False)
    # Calling set(args, kwargs) (line 2495)
    set_call_result_91764 = invoke(stypy.reporting.localization.Localization(__file__, 2495, 13), set_91761, *[r1d_91762], **kwargs_91763)
    
    # Assigning a type to the variable 'r1keys' (line 2495)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2495, 4), 'r1keys', set_call_result_91764)
    
    # Assigning a Call to a Name (line 2496):
    
    # Assigning a Call to a Name (line 2496):
    
    # Assigning a Call to a Name (line 2496):
    
    # Call to set(...): (line 2496)
    # Processing the call arguments (line 2496)
    # Getting the type of 'r2d' (line 2496)
    r2d_91766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2496, 17), 'r2d', False)
    # Processing the call keyword arguments (line 2496)
    kwargs_91767 = {}
    # Getting the type of 'set' (line 2496)
    set_91765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2496, 13), 'set', False)
    # Calling set(args, kwargs) (line 2496)
    set_call_result_91768 = invoke(stypy.reporting.localization.Localization(__file__, 2496, 13), set_91765, *[r2d_91766], **kwargs_91767)
    
    # Assigning a type to the variable 'r2keys' (line 2496)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2496, 4), 'r2keys', set_call_result_91768)
    
    # Assigning a BinOp to a Name (line 2498):
    
    # Assigning a BinOp to a Name (line 2498):
    
    # Assigning a BinOp to a Name (line 2498):
    # Getting the type of 'r1keys' (line 2498)
    r1keys_91769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2498, 18), 'r1keys')
    # Getting the type of 'r2keys' (line 2498)
    r2keys_91770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2498, 27), 'r2keys')
    # Applying the binary operator '&' (line 2498)
    result_and__91771 = python_operator(stypy.reporting.localization.Localization(__file__, 2498, 18), '&', r1keys_91769, r2keys_91770)
    
    # Assigning a type to the variable 'common_keys' (line 2498)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2498, 4), 'common_keys', result_and__91771)
    
    # Assigning a Call to a Name (line 2500):
    
    # Assigning a Call to a Name (line 2500):
    
    # Assigning a Call to a Name (line 2500):
    
    # Call to array(...): (line 2500)
    # Processing the call arguments (line 2500)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'common_keys' (line 2500)
    common_keys_91778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 38), 'common_keys', False)
    comprehension_91779 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2500, 22), common_keys_91778)
    # Assigning a type to the variable 'k' (line 2500)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2500, 22), 'k', comprehension_91779)
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2500)
    k_91774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 26), 'k', False)
    # Getting the type of 'r1d' (line 2500)
    r1d_91775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 22), 'r1d', False)
    # Obtaining the member '__getitem__' of a type (line 2500)
    getitem___91776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2500, 22), r1d_91775, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2500)
    subscript_call_result_91777 = invoke(stypy.reporting.localization.Localization(__file__, 2500, 22), getitem___91776, k_91774)
    
    list_91780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2500, 22), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2500, 22), list_91780, subscript_call_result_91777)
    # Processing the call keyword arguments (line 2500)
    kwargs_91781 = {}
    # Getting the type of 'np' (line 2500)
    np_91772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 12), 'np', False)
    # Obtaining the member 'array' of a type (line 2500)
    array_91773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2500, 12), np_91772, 'array')
    # Calling array(args, kwargs) (line 2500)
    array_call_result_91782 = invoke(stypy.reporting.localization.Localization(__file__, 2500, 12), array_91773, *[list_91780], **kwargs_91781)
    
    # Assigning a type to the variable 'r1ind' (line 2500)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2500, 4), 'r1ind', array_call_result_91782)
    
    # Assigning a Call to a Name (line 2501):
    
    # Assigning a Call to a Name (line 2501):
    
    # Assigning a Call to a Name (line 2501):
    
    # Call to array(...): (line 2501)
    # Processing the call arguments (line 2501)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'common_keys' (line 2501)
    common_keys_91789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2501, 38), 'common_keys', False)
    comprehension_91790 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2501, 22), common_keys_91789)
    # Assigning a type to the variable 'k' (line 2501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2501, 22), 'k', comprehension_91790)
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2501)
    k_91785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2501, 26), 'k', False)
    # Getting the type of 'r2d' (line 2501)
    r2d_91786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2501, 22), 'r2d', False)
    # Obtaining the member '__getitem__' of a type (line 2501)
    getitem___91787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2501, 22), r2d_91786, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2501)
    subscript_call_result_91788 = invoke(stypy.reporting.localization.Localization(__file__, 2501, 22), getitem___91787, k_91785)
    
    list_91791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2501, 22), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2501, 22), list_91791, subscript_call_result_91788)
    # Processing the call keyword arguments (line 2501)
    kwargs_91792 = {}
    # Getting the type of 'np' (line 2501)
    np_91783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2501, 12), 'np', False)
    # Obtaining the member 'array' of a type (line 2501)
    array_91784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2501, 12), np_91783, 'array')
    # Calling array(args, kwargs) (line 2501)
    array_call_result_91793 = invoke(stypy.reporting.localization.Localization(__file__, 2501, 12), array_91784, *[list_91791], **kwargs_91792)
    
    # Assigning a type to the variable 'r2ind' (line 2501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2501, 4), 'r2ind', array_call_result_91793)
    
    # Assigning a Call to a Name (line 2503):
    
    # Assigning a Call to a Name (line 2503):
    
    # Assigning a Call to a Name (line 2503):
    
    # Call to len(...): (line 2503)
    # Processing the call arguments (line 2503)
    # Getting the type of 'common_keys' (line 2503)
    common_keys_91795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 21), 'common_keys', False)
    # Processing the call keyword arguments (line 2503)
    kwargs_91796 = {}
    # Getting the type of 'len' (line 2503)
    len_91794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 17), 'len', False)
    # Calling len(args, kwargs) (line 2503)
    len_call_result_91797 = invoke(stypy.reporting.localization.Localization(__file__, 2503, 17), len_91794, *[common_keys_91795], **kwargs_91796)
    
    # Assigning a type to the variable 'common_len' (line 2503)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2503, 4), 'common_len', len_call_result_91797)
    
    # Multiple assignment of 2 elements.
    
    # Assigning a Num to a Name (line 2504):
    
    # Assigning a Num to a Name (line 2504):
    int_91798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2504, 27), 'int')
    # Assigning a type to the variable 'right_len' (line 2504)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2504, 15), 'right_len', int_91798)
    
    # Assigning a Name to a Name (line 2504):
    
    # Assigning a Name to a Name (line 2504):
    # Getting the type of 'right_len' (line 2504)
    right_len_91799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2504, 15), 'right_len')
    # Assigning a type to the variable 'left_len' (line 2504)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2504, 4), 'left_len', right_len_91799)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'jointype' (line 2505)
    jointype_91800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 7), 'jointype')
    unicode_91801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2505, 19), 'unicode', u'outer')
    # Applying the binary operator '==' (line 2505)
    result_eq_91802 = python_operator(stypy.reporting.localization.Localization(__file__, 2505, 7), '==', jointype_91800, unicode_91801)
    
    
    # Getting the type of 'jointype' (line 2505)
    jointype_91803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 30), 'jointype')
    unicode_91804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2505, 42), 'unicode', u'leftouter')
    # Applying the binary operator '==' (line 2505)
    result_eq_91805 = python_operator(stypy.reporting.localization.Localization(__file__, 2505, 30), '==', jointype_91803, unicode_91804)
    
    # Applying the binary operator 'or' (line 2505)
    result_or_keyword_91806 = python_operator(stypy.reporting.localization.Localization(__file__, 2505, 7), 'or', result_eq_91802, result_eq_91805)
    
    # Testing the type of an if condition (line 2505)
    if_condition_91807 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2505, 4), result_or_keyword_91806)
    # Assigning a type to the variable 'if_condition_91807' (line 2505)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2505, 4), 'if_condition_91807', if_condition_91807)
    # SSA begins for if statement (line 2505)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2506):
    
    # Assigning a Call to a Name (line 2506):
    
    # Assigning a Call to a Name (line 2506):
    
    # Call to difference(...): (line 2506)
    # Processing the call arguments (line 2506)
    # Getting the type of 'r2keys' (line 2506)
    r2keys_91810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2506, 38), 'r2keys', False)
    # Processing the call keyword arguments (line 2506)
    kwargs_91811 = {}
    # Getting the type of 'r1keys' (line 2506)
    r1keys_91808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2506, 20), 'r1keys', False)
    # Obtaining the member 'difference' of a type (line 2506)
    difference_91809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2506, 20), r1keys_91808, 'difference')
    # Calling difference(args, kwargs) (line 2506)
    difference_call_result_91812 = invoke(stypy.reporting.localization.Localization(__file__, 2506, 20), difference_91809, *[r2keys_91810], **kwargs_91811)
    
    # Assigning a type to the variable 'left_keys' (line 2506)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2506, 8), 'left_keys', difference_call_result_91812)
    
    # Assigning a Call to a Name (line 2507):
    
    # Assigning a Call to a Name (line 2507):
    
    # Assigning a Call to a Name (line 2507):
    
    # Call to array(...): (line 2507)
    # Processing the call arguments (line 2507)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'left_keys' (line 2507)
    left_keys_91819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2507, 45), 'left_keys', False)
    comprehension_91820 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2507, 29), left_keys_91819)
    # Assigning a type to the variable 'k' (line 2507)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2507, 29), 'k', comprehension_91820)
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2507)
    k_91815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2507, 33), 'k', False)
    # Getting the type of 'r1d' (line 2507)
    r1d_91816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2507, 29), 'r1d', False)
    # Obtaining the member '__getitem__' of a type (line 2507)
    getitem___91817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2507, 29), r1d_91816, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2507)
    subscript_call_result_91818 = invoke(stypy.reporting.localization.Localization(__file__, 2507, 29), getitem___91817, k_91815)
    
    list_91821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2507, 29), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2507, 29), list_91821, subscript_call_result_91818)
    # Processing the call keyword arguments (line 2507)
    kwargs_91822 = {}
    # Getting the type of 'np' (line 2507)
    np_91813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2507, 19), 'np', False)
    # Obtaining the member 'array' of a type (line 2507)
    array_91814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2507, 19), np_91813, 'array')
    # Calling array(args, kwargs) (line 2507)
    array_call_result_91823 = invoke(stypy.reporting.localization.Localization(__file__, 2507, 19), array_91814, *[list_91821], **kwargs_91822)
    
    # Assigning a type to the variable 'left_ind' (line 2507)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2507, 8), 'left_ind', array_call_result_91823)
    
    # Assigning a Call to a Name (line 2508):
    
    # Assigning a Call to a Name (line 2508):
    
    # Assigning a Call to a Name (line 2508):
    
    # Call to len(...): (line 2508)
    # Processing the call arguments (line 2508)
    # Getting the type of 'left_ind' (line 2508)
    left_ind_91825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2508, 23), 'left_ind', False)
    # Processing the call keyword arguments (line 2508)
    kwargs_91826 = {}
    # Getting the type of 'len' (line 2508)
    len_91824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2508, 19), 'len', False)
    # Calling len(args, kwargs) (line 2508)
    len_call_result_91827 = invoke(stypy.reporting.localization.Localization(__file__, 2508, 19), len_91824, *[left_ind_91825], **kwargs_91826)
    
    # Assigning a type to the variable 'left_len' (line 2508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2508, 8), 'left_len', len_call_result_91827)
    # SSA join for if statement (line 2505)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'jointype' (line 2509)
    jointype_91828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2509, 7), 'jointype')
    unicode_91829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2509, 19), 'unicode', u'outer')
    # Applying the binary operator '==' (line 2509)
    result_eq_91830 = python_operator(stypy.reporting.localization.Localization(__file__, 2509, 7), '==', jointype_91828, unicode_91829)
    
    # Testing the type of an if condition (line 2509)
    if_condition_91831 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2509, 4), result_eq_91830)
    # Assigning a type to the variable 'if_condition_91831' (line 2509)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2509, 4), 'if_condition_91831', if_condition_91831)
    # SSA begins for if statement (line 2509)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2510):
    
    # Assigning a Call to a Name (line 2510):
    
    # Assigning a Call to a Name (line 2510):
    
    # Call to difference(...): (line 2510)
    # Processing the call arguments (line 2510)
    # Getting the type of 'r1keys' (line 2510)
    r1keys_91834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2510, 39), 'r1keys', False)
    # Processing the call keyword arguments (line 2510)
    kwargs_91835 = {}
    # Getting the type of 'r2keys' (line 2510)
    r2keys_91832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2510, 21), 'r2keys', False)
    # Obtaining the member 'difference' of a type (line 2510)
    difference_91833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2510, 21), r2keys_91832, 'difference')
    # Calling difference(args, kwargs) (line 2510)
    difference_call_result_91836 = invoke(stypy.reporting.localization.Localization(__file__, 2510, 21), difference_91833, *[r1keys_91834], **kwargs_91835)
    
    # Assigning a type to the variable 'right_keys' (line 2510)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2510, 8), 'right_keys', difference_call_result_91836)
    
    # Assigning a Call to a Name (line 2511):
    
    # Assigning a Call to a Name (line 2511):
    
    # Assigning a Call to a Name (line 2511):
    
    # Call to array(...): (line 2511)
    # Processing the call arguments (line 2511)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'right_keys' (line 2511)
    right_keys_91843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2511, 46), 'right_keys', False)
    comprehension_91844 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2511, 30), right_keys_91843)
    # Assigning a type to the variable 'k' (line 2511)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2511, 30), 'k', comprehension_91844)
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2511)
    k_91839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2511, 34), 'k', False)
    # Getting the type of 'r2d' (line 2511)
    r2d_91840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2511, 30), 'r2d', False)
    # Obtaining the member '__getitem__' of a type (line 2511)
    getitem___91841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2511, 30), r2d_91840, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2511)
    subscript_call_result_91842 = invoke(stypy.reporting.localization.Localization(__file__, 2511, 30), getitem___91841, k_91839)
    
    list_91845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2511, 30), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2511, 30), list_91845, subscript_call_result_91842)
    # Processing the call keyword arguments (line 2511)
    kwargs_91846 = {}
    # Getting the type of 'np' (line 2511)
    np_91837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2511, 20), 'np', False)
    # Obtaining the member 'array' of a type (line 2511)
    array_91838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2511, 20), np_91837, 'array')
    # Calling array(args, kwargs) (line 2511)
    array_call_result_91847 = invoke(stypy.reporting.localization.Localization(__file__, 2511, 20), array_91838, *[list_91845], **kwargs_91846)
    
    # Assigning a type to the variable 'right_ind' (line 2511)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2511, 8), 'right_ind', array_call_result_91847)
    
    # Assigning a Call to a Name (line 2512):
    
    # Assigning a Call to a Name (line 2512):
    
    # Assigning a Call to a Name (line 2512):
    
    # Call to len(...): (line 2512)
    # Processing the call arguments (line 2512)
    # Getting the type of 'right_ind' (line 2512)
    right_ind_91849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2512, 24), 'right_ind', False)
    # Processing the call keyword arguments (line 2512)
    kwargs_91850 = {}
    # Getting the type of 'len' (line 2512)
    len_91848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2512, 20), 'len', False)
    # Calling len(args, kwargs) (line 2512)
    len_call_result_91851 = invoke(stypy.reporting.localization.Localization(__file__, 2512, 20), len_91848, *[right_ind_91849], **kwargs_91850)
    
    # Assigning a type to the variable 'right_len' (line 2512)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2512, 8), 'right_len', len_call_result_91851)
    # SSA join for if statement (line 2509)
    module_type_store = module_type_store.join_ssa_context()
    

    @norecursion
    def key_desc(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'key_desc'
        module_type_store = module_type_store.open_function_context('key_desc', 2514, 4, False)
        
        # Passed parameters checking function
        key_desc.stypy_localization = localization
        key_desc.stypy_type_of_self = None
        key_desc.stypy_type_store = module_type_store
        key_desc.stypy_function_name = 'key_desc'
        key_desc.stypy_param_names_list = ['name']
        key_desc.stypy_varargs_param_name = None
        key_desc.stypy_kwargs_param_name = None
        key_desc.stypy_call_defaults = defaults
        key_desc.stypy_call_varargs = varargs
        key_desc.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'key_desc', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'key_desc', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'key_desc(...)' code ##################

        unicode_91852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2518, (-1)), 'unicode', u'\n        if name is a string key, use the larger size of r1 or r2 before\n        merging\n        ')
        
        # Assigning a Subscript to a Name (line 2519):
        
        # Assigning a Subscript to a Name (line 2519):
        
        # Assigning a Subscript to a Name (line 2519):
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 2519)
        name_91853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2519, 23), 'name')
        # Getting the type of 'r1' (line 2519)
        r1_91854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2519, 14), 'r1')
        # Obtaining the member 'dtype' of a type (line 2519)
        dtype_91855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2519, 14), r1_91854, 'dtype')
        # Obtaining the member '__getitem__' of a type (line 2519)
        getitem___91856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2519, 14), dtype_91855, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2519)
        subscript_call_result_91857 = invoke(stypy.reporting.localization.Localization(__file__, 2519, 14), getitem___91856, name_91853)
        
        # Assigning a type to the variable 'dt1' (line 2519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2519, 8), 'dt1', subscript_call_result_91857)
        
        
        # Getting the type of 'dt1' (line 2520)
        dt1_91858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 11), 'dt1')
        # Obtaining the member 'type' of a type (line 2520)
        type_91859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2520, 11), dt1_91858, 'type')
        # Getting the type of 'np' (line 2520)
        np_91860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 23), 'np')
        # Obtaining the member 'string_' of a type (line 2520)
        string__91861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2520, 23), np_91860, 'string_')
        # Applying the binary operator '!=' (line 2520)
        result_ne_91862 = python_operator(stypy.reporting.localization.Localization(__file__, 2520, 11), '!=', type_91859, string__91861)
        
        # Testing the type of an if condition (line 2520)
        if_condition_91863 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2520, 8), result_ne_91862)
        # Assigning a type to the variable 'if_condition_91863' (line 2520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2520, 8), 'if_condition_91863', if_condition_91863)
        # SSA begins for if statement (line 2520)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2521)
        tuple_91864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2521, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2521)
        # Adding element type (line 2521)
        # Getting the type of 'name' (line 2521)
        name_91865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 20), 'name')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2521, 20), tuple_91864, name_91865)
        # Adding element type (line 2521)
        
        # Obtaining the type of the subscript
        int_91866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2521, 39), 'int')
        
        # Obtaining the type of the subscript
        int_91867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2521, 36), 'int')
        # Getting the type of 'dt1' (line 2521)
        dt1_91868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 26), 'dt1')
        # Obtaining the member 'descr' of a type (line 2521)
        descr_91869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2521, 26), dt1_91868, 'descr')
        # Obtaining the member '__getitem__' of a type (line 2521)
        getitem___91870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2521, 26), descr_91869, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2521)
        subscript_call_result_91871 = invoke(stypy.reporting.localization.Localization(__file__, 2521, 26), getitem___91870, int_91867)
        
        # Obtaining the member '__getitem__' of a type (line 2521)
        getitem___91872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2521, 26), subscript_call_result_91871, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2521)
        subscript_call_result_91873 = invoke(stypy.reporting.localization.Localization(__file__, 2521, 26), getitem___91872, int_91866)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2521, 20), tuple_91864, subscript_call_result_91873)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2521)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2521, 12), 'stypy_return_type', tuple_91864)
        # SSA join for if statement (line 2520)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 2523):
        
        # Assigning a Subscript to a Name (line 2523):
        
        # Assigning a Subscript to a Name (line 2523):
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 2523)
        name_91874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2523, 23), 'name')
        # Getting the type of 'r2' (line 2523)
        r2_91875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2523, 14), 'r2')
        # Obtaining the member 'dtype' of a type (line 2523)
        dtype_91876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2523, 14), r2_91875, 'dtype')
        # Obtaining the member '__getitem__' of a type (line 2523)
        getitem___91877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2523, 14), dtype_91876, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2523)
        subscript_call_result_91878 = invoke(stypy.reporting.localization.Localization(__file__, 2523, 14), getitem___91877, name_91874)
        
        # Assigning a type to the variable 'dt2' (line 2523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2523, 8), 'dt2', subscript_call_result_91878)
        
        
        # Getting the type of 'dt1' (line 2524)
        dt1_91879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2524, 11), 'dt1')
        # Getting the type of 'dt2' (line 2524)
        dt2_91880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2524, 18), 'dt2')
        # Applying the binary operator '!=' (line 2524)
        result_ne_91881 = python_operator(stypy.reporting.localization.Localization(__file__, 2524, 11), '!=', dt1_91879, dt2_91880)
        
        # Testing the type of an if condition (line 2524)
        if_condition_91882 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2524, 8), result_ne_91881)
        # Assigning a type to the variable 'if_condition_91882' (line 2524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2524, 8), 'if_condition_91882', if_condition_91882)
        # SSA begins for if statement (line 2524)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 2525):
        
        # Assigning a Str to a Name (line 2525):
        
        # Assigning a Str to a Name (line 2525):
        unicode_91883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2525, 18), 'unicode', u"The '{0}' fields in arrays 'r1' and 'r2' must have the same")
        # Assigning a type to the variable 'msg' (line 2525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2525, 12), 'msg', unicode_91883)
        
        # Getting the type of 'msg' (line 2526)
        msg_91884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2526, 12), 'msg')
        unicode_91885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2526, 19), 'unicode', u' dtype.')
        # Applying the binary operator '+=' (line 2526)
        result_iadd_91886 = python_operator(stypy.reporting.localization.Localization(__file__, 2526, 12), '+=', msg_91884, unicode_91885)
        # Assigning a type to the variable 'msg' (line 2526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2526, 12), 'msg', result_iadd_91886)
        
        
        # Call to ValueError(...): (line 2527)
        # Processing the call arguments (line 2527)
        
        # Call to format(...): (line 2527)
        # Processing the call arguments (line 2527)
        # Getting the type of 'name' (line 2527)
        name_91890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2527, 40), 'name', False)
        # Processing the call keyword arguments (line 2527)
        kwargs_91891 = {}
        # Getting the type of 'msg' (line 2527)
        msg_91888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2527, 29), 'msg', False)
        # Obtaining the member 'format' of a type (line 2527)
        format_91889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2527, 29), msg_91888, 'format')
        # Calling format(args, kwargs) (line 2527)
        format_call_result_91892 = invoke(stypy.reporting.localization.Localization(__file__, 2527, 29), format_91889, *[name_91890], **kwargs_91891)
        
        # Processing the call keyword arguments (line 2527)
        kwargs_91893 = {}
        # Getting the type of 'ValueError' (line 2527)
        ValueError_91887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2527, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2527)
        ValueError_call_result_91894 = invoke(stypy.reporting.localization.Localization(__file__, 2527, 18), ValueError_91887, *[format_call_result_91892], **kwargs_91893)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2527, 12), ValueError_call_result_91894, 'raise parameter', BaseException)
        # SSA join for if statement (line 2524)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'dt1' (line 2528)
        dt1_91895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2528, 11), 'dt1')
        # Obtaining the member 'num' of a type (line 2528)
        num_91896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2528, 11), dt1_91895, 'num')
        # Getting the type of 'dt2' (line 2528)
        dt2_91897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2528, 21), 'dt2')
        # Obtaining the member 'num' of a type (line 2528)
        num_91898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2528, 21), dt2_91897, 'num')
        # Applying the binary operator '>' (line 2528)
        result_gt_91899 = python_operator(stypy.reporting.localization.Localization(__file__, 2528, 11), '>', num_91896, num_91898)
        
        # Testing the type of an if condition (line 2528)
        if_condition_91900 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2528, 8), result_gt_91899)
        # Assigning a type to the variable 'if_condition_91900' (line 2528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2528, 8), 'if_condition_91900', if_condition_91900)
        # SSA begins for if statement (line 2528)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2529)
        tuple_91901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2529, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2529)
        # Adding element type (line 2529)
        # Getting the type of 'name' (line 2529)
        name_91902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2529, 20), 'name')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2529, 20), tuple_91901, name_91902)
        # Adding element type (line 2529)
        
        # Obtaining the type of the subscript
        int_91903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2529, 39), 'int')
        
        # Obtaining the type of the subscript
        int_91904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2529, 36), 'int')
        # Getting the type of 'dt1' (line 2529)
        dt1_91905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2529, 26), 'dt1')
        # Obtaining the member 'descr' of a type (line 2529)
        descr_91906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2529, 26), dt1_91905, 'descr')
        # Obtaining the member '__getitem__' of a type (line 2529)
        getitem___91907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2529, 26), descr_91906, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2529)
        subscript_call_result_91908 = invoke(stypy.reporting.localization.Localization(__file__, 2529, 26), getitem___91907, int_91904)
        
        # Obtaining the member '__getitem__' of a type (line 2529)
        getitem___91909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2529, 26), subscript_call_result_91908, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2529)
        subscript_call_result_91910 = invoke(stypy.reporting.localization.Localization(__file__, 2529, 26), getitem___91909, int_91903)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2529, 20), tuple_91901, subscript_call_result_91910)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2529, 12), 'stypy_return_type', tuple_91901)
        # SSA branch for the else part of an if statement (line 2528)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2531)
        tuple_91911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2531, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2531)
        # Adding element type (line 2531)
        # Getting the type of 'name' (line 2531)
        name_91912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2531, 20), 'name')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2531, 20), tuple_91911, name_91912)
        # Adding element type (line 2531)
        
        # Obtaining the type of the subscript
        int_91913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2531, 39), 'int')
        
        # Obtaining the type of the subscript
        int_91914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2531, 36), 'int')
        # Getting the type of 'dt2' (line 2531)
        dt2_91915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2531, 26), 'dt2')
        # Obtaining the member 'descr' of a type (line 2531)
        descr_91916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2531, 26), dt2_91915, 'descr')
        # Obtaining the member '__getitem__' of a type (line 2531)
        getitem___91917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2531, 26), descr_91916, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2531)
        subscript_call_result_91918 = invoke(stypy.reporting.localization.Localization(__file__, 2531, 26), getitem___91917, int_91914)
        
        # Obtaining the member '__getitem__' of a type (line 2531)
        getitem___91919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2531, 26), subscript_call_result_91918, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2531)
        subscript_call_result_91920 = invoke(stypy.reporting.localization.Localization(__file__, 2531, 26), getitem___91919, int_91913)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2531, 20), tuple_91911, subscript_call_result_91920)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2531, 12), 'stypy_return_type', tuple_91911)
        # SSA join for if statement (line 2528)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'key_desc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'key_desc' in the type store
        # Getting the type of 'stypy_return_type' (line 2514)
        stypy_return_type_91921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2514, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_91921)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'key_desc'
        return stypy_return_type_91921

    # Assigning a type to the variable 'key_desc' (line 2514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2514, 4), 'key_desc', key_desc)
    
    # Assigning a ListComp to a Name (line 2533):
    
    # Assigning a ListComp to a Name (line 2533):
    
    # Assigning a ListComp to a Name (line 2533):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'key' (line 2533)
    key_91926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2533, 42), 'key')
    comprehension_91927 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2533, 15), key_91926)
    # Assigning a type to the variable 'name' (line 2533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2533, 15), 'name', comprehension_91927)
    
    # Call to key_desc(...): (line 2533)
    # Processing the call arguments (line 2533)
    # Getting the type of 'name' (line 2533)
    name_91923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2533, 24), 'name', False)
    # Processing the call keyword arguments (line 2533)
    kwargs_91924 = {}
    # Getting the type of 'key_desc' (line 2533)
    key_desc_91922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2533, 15), 'key_desc', False)
    # Calling key_desc(args, kwargs) (line 2533)
    key_desc_call_result_91925 = invoke(stypy.reporting.localization.Localization(__file__, 2533, 15), key_desc_91922, *[name_91923], **kwargs_91924)
    
    list_91928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2533, 15), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2533, 15), list_91928, key_desc_call_result_91925)
    # Assigning a type to the variable 'keydesc' (line 2533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2533, 4), 'keydesc', list_91928)

    @norecursion
    def mapped_r1field(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mapped_r1field'
        module_type_store = module_type_store.open_function_context('mapped_r1field', 2535, 4, False)
        
        # Passed parameters checking function
        mapped_r1field.stypy_localization = localization
        mapped_r1field.stypy_type_of_self = None
        mapped_r1field.stypy_type_store = module_type_store
        mapped_r1field.stypy_function_name = 'mapped_r1field'
        mapped_r1field.stypy_param_names_list = ['name']
        mapped_r1field.stypy_varargs_param_name = None
        mapped_r1field.stypy_kwargs_param_name = None
        mapped_r1field.stypy_call_defaults = defaults
        mapped_r1field.stypy_call_varargs = varargs
        mapped_r1field.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'mapped_r1field', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mapped_r1field', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mapped_r1field(...)' code ##################

        unicode_91929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2538, (-1)), 'unicode', u'\n        The column name in *newrec* that corresponds to the column in *r1*.\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'name' (line 2539)
        name_91930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2539, 11), 'name')
        # Getting the type of 'key' (line 2539)
        key_91931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2539, 19), 'key')
        # Applying the binary operator 'in' (line 2539)
        result_contains_91932 = python_operator(stypy.reporting.localization.Localization(__file__, 2539, 11), 'in', name_91930, key_91931)
        
        
        # Getting the type of 'name' (line 2539)
        name_91933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2539, 26), 'name')
        # Getting the type of 'r2' (line 2539)
        r2_91934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2539, 38), 'r2')
        # Obtaining the member 'dtype' of a type (line 2539)
        dtype_91935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2539, 38), r2_91934, 'dtype')
        # Obtaining the member 'names' of a type (line 2539)
        names_91936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2539, 38), dtype_91935, 'names')
        # Applying the binary operator 'notin' (line 2539)
        result_contains_91937 = python_operator(stypy.reporting.localization.Localization(__file__, 2539, 26), 'notin', name_91933, names_91936)
        
        # Applying the binary operator 'or' (line 2539)
        result_or_keyword_91938 = python_operator(stypy.reporting.localization.Localization(__file__, 2539, 11), 'or', result_contains_91932, result_contains_91937)
        
        # Testing the type of an if condition (line 2539)
        if_condition_91939 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2539, 8), result_or_keyword_91938)
        # Assigning a type to the variable 'if_condition_91939' (line 2539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2539, 8), 'if_condition_91939', if_condition_91939)
        # SSA begins for if statement (line 2539)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'name' (line 2540)
        name_91940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2540, 19), 'name')
        # Assigning a type to the variable 'stypy_return_type' (line 2540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2540, 12), 'stypy_return_type', name_91940)
        # SSA branch for the else part of an if statement (line 2539)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'name' (line 2542)
        name_91941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2542, 19), 'name')
        # Getting the type of 'r1postfix' (line 2542)
        r1postfix_91942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2542, 26), 'r1postfix')
        # Applying the binary operator '+' (line 2542)
        result_add_91943 = python_operator(stypy.reporting.localization.Localization(__file__, 2542, 19), '+', name_91941, r1postfix_91942)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2542, 12), 'stypy_return_type', result_add_91943)
        # SSA join for if statement (line 2539)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'mapped_r1field(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mapped_r1field' in the type store
        # Getting the type of 'stypy_return_type' (line 2535)
        stypy_return_type_91944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2535, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_91944)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mapped_r1field'
        return stypy_return_type_91944

    # Assigning a type to the variable 'mapped_r1field' (line 2535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2535, 4), 'mapped_r1field', mapped_r1field)

    @norecursion
    def mapped_r2field(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mapped_r2field'
        module_type_store = module_type_store.open_function_context('mapped_r2field', 2544, 4, False)
        
        # Passed parameters checking function
        mapped_r2field.stypy_localization = localization
        mapped_r2field.stypy_type_of_self = None
        mapped_r2field.stypy_type_store = module_type_store
        mapped_r2field.stypy_function_name = 'mapped_r2field'
        mapped_r2field.stypy_param_names_list = ['name']
        mapped_r2field.stypy_varargs_param_name = None
        mapped_r2field.stypy_kwargs_param_name = None
        mapped_r2field.stypy_call_defaults = defaults
        mapped_r2field.stypy_call_varargs = varargs
        mapped_r2field.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'mapped_r2field', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mapped_r2field', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mapped_r2field(...)' code ##################

        unicode_91945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2547, (-1)), 'unicode', u'\n        The column name in *newrec* that corresponds to the column in *r2*.\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'name' (line 2548)
        name_91946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2548, 11), 'name')
        # Getting the type of 'key' (line 2548)
        key_91947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2548, 19), 'key')
        # Applying the binary operator 'in' (line 2548)
        result_contains_91948 = python_operator(stypy.reporting.localization.Localization(__file__, 2548, 11), 'in', name_91946, key_91947)
        
        
        # Getting the type of 'name' (line 2548)
        name_91949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2548, 26), 'name')
        # Getting the type of 'r1' (line 2548)
        r1_91950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2548, 38), 'r1')
        # Obtaining the member 'dtype' of a type (line 2548)
        dtype_91951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2548, 38), r1_91950, 'dtype')
        # Obtaining the member 'names' of a type (line 2548)
        names_91952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2548, 38), dtype_91951, 'names')
        # Applying the binary operator 'notin' (line 2548)
        result_contains_91953 = python_operator(stypy.reporting.localization.Localization(__file__, 2548, 26), 'notin', name_91949, names_91952)
        
        # Applying the binary operator 'or' (line 2548)
        result_or_keyword_91954 = python_operator(stypy.reporting.localization.Localization(__file__, 2548, 11), 'or', result_contains_91948, result_contains_91953)
        
        # Testing the type of an if condition (line 2548)
        if_condition_91955 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2548, 8), result_or_keyword_91954)
        # Assigning a type to the variable 'if_condition_91955' (line 2548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2548, 8), 'if_condition_91955', if_condition_91955)
        # SSA begins for if statement (line 2548)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'name' (line 2549)
        name_91956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2549, 19), 'name')
        # Assigning a type to the variable 'stypy_return_type' (line 2549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2549, 12), 'stypy_return_type', name_91956)
        # SSA branch for the else part of an if statement (line 2548)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'name' (line 2551)
        name_91957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 19), 'name')
        # Getting the type of 'r2postfix' (line 2551)
        r2postfix_91958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 26), 'r2postfix')
        # Applying the binary operator '+' (line 2551)
        result_add_91959 = python_operator(stypy.reporting.localization.Localization(__file__, 2551, 19), '+', name_91957, r2postfix_91958)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2551, 12), 'stypy_return_type', result_add_91959)
        # SSA join for if statement (line 2548)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'mapped_r2field(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mapped_r2field' in the type store
        # Getting the type of 'stypy_return_type' (line 2544)
        stypy_return_type_91960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_91960)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mapped_r2field'
        return stypy_return_type_91960

    # Assigning a type to the variable 'mapped_r2field' (line 2544)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2544, 4), 'mapped_r2field', mapped_r2field)
    
    # Assigning a ListComp to a Name (line 2553):
    
    # Assigning a ListComp to a Name (line 2553):
    
    # Assigning a ListComp to a Name (line 2553):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'r1' (line 2553)
    r1_91979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 61), 'r1')
    # Obtaining the member 'dtype' of a type (line 2553)
    dtype_91980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2553, 61), r1_91979, 'dtype')
    # Obtaining the member 'descr' of a type (line 2553)
    descr_91981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2553, 61), dtype_91980, 'descr')
    comprehension_91982 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2553, 14), descr_91981)
    # Assigning a type to the variable 'desc' (line 2553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2553, 14), 'desc', comprehension_91982)
    
    
    # Obtaining the type of the subscript
    int_91973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2554, 22), 'int')
    # Getting the type of 'desc' (line 2554)
    desc_91974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 17), 'desc')
    # Obtaining the member '__getitem__' of a type (line 2554)
    getitem___91975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2554, 17), desc_91974, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2554)
    subscript_call_result_91976 = invoke(stypy.reporting.localization.Localization(__file__, 2554, 17), getitem___91975, int_91973)
    
    # Getting the type of 'key' (line 2554)
    key_91977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 32), 'key')
    # Applying the binary operator 'notin' (line 2554)
    result_contains_91978 = python_operator(stypy.reporting.localization.Localization(__file__, 2554, 17), 'notin', subscript_call_result_91976, key_91977)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2553)
    tuple_91961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2553, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2553)
    # Adding element type (line 2553)
    
    # Call to mapped_r1field(...): (line 2553)
    # Processing the call arguments (line 2553)
    
    # Obtaining the type of the subscript
    int_91963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2553, 35), 'int')
    # Getting the type of 'desc' (line 2553)
    desc_91964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 30), 'desc', False)
    # Obtaining the member '__getitem__' of a type (line 2553)
    getitem___91965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2553, 30), desc_91964, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2553)
    subscript_call_result_91966 = invoke(stypy.reporting.localization.Localization(__file__, 2553, 30), getitem___91965, int_91963)
    
    # Processing the call keyword arguments (line 2553)
    kwargs_91967 = {}
    # Getting the type of 'mapped_r1field' (line 2553)
    mapped_r1field_91962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 15), 'mapped_r1field', False)
    # Calling mapped_r1field(args, kwargs) (line 2553)
    mapped_r1field_call_result_91968 = invoke(stypy.reporting.localization.Localization(__file__, 2553, 15), mapped_r1field_91962, *[subscript_call_result_91966], **kwargs_91967)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2553, 15), tuple_91961, mapped_r1field_call_result_91968)
    # Adding element type (line 2553)
    
    # Obtaining the type of the subscript
    int_91969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2553, 45), 'int')
    # Getting the type of 'desc' (line 2553)
    desc_91970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 40), 'desc')
    # Obtaining the member '__getitem__' of a type (line 2553)
    getitem___91971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2553, 40), desc_91970, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2553)
    subscript_call_result_91972 = invoke(stypy.reporting.localization.Localization(__file__, 2553, 40), getitem___91971, int_91969)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2553, 15), tuple_91961, subscript_call_result_91972)
    
    list_91983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2553, 14), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2553, 14), list_91983, tuple_91961)
    # Assigning a type to the variable 'r1desc' (line 2553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2553, 4), 'r1desc', list_91983)
    
    # Assigning a ListComp to a Name (line 2555):
    
    # Assigning a ListComp to a Name (line 2555):
    
    # Assigning a ListComp to a Name (line 2555):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'r2' (line 2555)
    r2_92002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 61), 'r2')
    # Obtaining the member 'dtype' of a type (line 2555)
    dtype_92003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2555, 61), r2_92002, 'dtype')
    # Obtaining the member 'descr' of a type (line 2555)
    descr_92004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2555, 61), dtype_92003, 'descr')
    comprehension_92005 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2555, 14), descr_92004)
    # Assigning a type to the variable 'desc' (line 2555)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2555, 14), 'desc', comprehension_92005)
    
    
    # Obtaining the type of the subscript
    int_91996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2556, 22), 'int')
    # Getting the type of 'desc' (line 2556)
    desc_91997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 17), 'desc')
    # Obtaining the member '__getitem__' of a type (line 2556)
    getitem___91998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2556, 17), desc_91997, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2556)
    subscript_call_result_91999 = invoke(stypy.reporting.localization.Localization(__file__, 2556, 17), getitem___91998, int_91996)
    
    # Getting the type of 'key' (line 2556)
    key_92000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 32), 'key')
    # Applying the binary operator 'notin' (line 2556)
    result_contains_92001 = python_operator(stypy.reporting.localization.Localization(__file__, 2556, 17), 'notin', subscript_call_result_91999, key_92000)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2555)
    tuple_91984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2555, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2555)
    # Adding element type (line 2555)
    
    # Call to mapped_r2field(...): (line 2555)
    # Processing the call arguments (line 2555)
    
    # Obtaining the type of the subscript
    int_91986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2555, 35), 'int')
    # Getting the type of 'desc' (line 2555)
    desc_91987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 30), 'desc', False)
    # Obtaining the member '__getitem__' of a type (line 2555)
    getitem___91988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2555, 30), desc_91987, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2555)
    subscript_call_result_91989 = invoke(stypy.reporting.localization.Localization(__file__, 2555, 30), getitem___91988, int_91986)
    
    # Processing the call keyword arguments (line 2555)
    kwargs_91990 = {}
    # Getting the type of 'mapped_r2field' (line 2555)
    mapped_r2field_91985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 15), 'mapped_r2field', False)
    # Calling mapped_r2field(args, kwargs) (line 2555)
    mapped_r2field_call_result_91991 = invoke(stypy.reporting.localization.Localization(__file__, 2555, 15), mapped_r2field_91985, *[subscript_call_result_91989], **kwargs_91990)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2555, 15), tuple_91984, mapped_r2field_call_result_91991)
    # Adding element type (line 2555)
    
    # Obtaining the type of the subscript
    int_91992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2555, 45), 'int')
    # Getting the type of 'desc' (line 2555)
    desc_91993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 40), 'desc')
    # Obtaining the member '__getitem__' of a type (line 2555)
    getitem___91994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2555, 40), desc_91993, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2555)
    subscript_call_result_91995 = invoke(stypy.reporting.localization.Localization(__file__, 2555, 40), getitem___91994, int_91992)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2555, 15), tuple_91984, subscript_call_result_91995)
    
    list_92006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2555, 14), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2555, 14), list_92006, tuple_91984)
    # Assigning a type to the variable 'r2desc' (line 2555)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2555, 4), 'r2desc', list_92006)
    
    # Assigning a BinOp to a Name (line 2557):
    
    # Assigning a BinOp to a Name (line 2557):
    
    # Assigning a BinOp to a Name (line 2557):
    # Getting the type of 'keydesc' (line 2557)
    keydesc_92007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 17), 'keydesc')
    # Getting the type of 'r1desc' (line 2557)
    r1desc_92008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 27), 'r1desc')
    # Applying the binary operator '+' (line 2557)
    result_add_92009 = python_operator(stypy.reporting.localization.Localization(__file__, 2557, 17), '+', keydesc_92007, r1desc_92008)
    
    # Getting the type of 'r2desc' (line 2557)
    r2desc_92010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 36), 'r2desc')
    # Applying the binary operator '+' (line 2557)
    result_add_92011 = python_operator(stypy.reporting.localization.Localization(__file__, 2557, 34), '+', result_add_92009, r2desc_92010)
    
    # Assigning a type to the variable 'all_dtypes' (line 2557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2557, 4), 'all_dtypes', result_add_92011)
    
    # Getting the type of 'six' (line 2558)
    six_92012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 7), 'six')
    # Obtaining the member 'PY2' of a type (line 2558)
    PY2_92013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2558, 7), six_92012, 'PY2')
    # Testing the type of an if condition (line 2558)
    if_condition_92014 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2558, 4), PY2_92013)
    # Assigning a type to the variable 'if_condition_92014' (line 2558)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2558, 4), 'if_condition_92014', if_condition_92014)
    # SSA begins for if statement (line 2558)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a ListComp to a Name (line 2559):
    
    # Assigning a ListComp to a Name (line 2559):
    
    # Assigning a ListComp to a Name (line 2559):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'all_dtypes' (line 2559)
    all_dtypes_92022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2559, 65), 'all_dtypes')
    comprehension_92023 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2559, 22), all_dtypes_92022)
    # Assigning a type to the variable 'name' (line 2559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2559, 22), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2559, 22), comprehension_92023))
    # Assigning a type to the variable 'dt' (line 2559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2559, 22), 'dt', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2559, 22), comprehension_92023))
    
    # Obtaining an instance of the builtin type 'tuple' (line 2559)
    tuple_92015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2559, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2559)
    # Adding element type (line 2559)
    
    # Call to encode(...): (line 2559)
    # Processing the call arguments (line 2559)
    unicode_92018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2559, 35), 'unicode', u'utf-8')
    # Processing the call keyword arguments (line 2559)
    kwargs_92019 = {}
    # Getting the type of 'name' (line 2559)
    name_92016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2559, 23), 'name', False)
    # Obtaining the member 'encode' of a type (line 2559)
    encode_92017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2559, 23), name_92016, 'encode')
    # Calling encode(args, kwargs) (line 2559)
    encode_call_result_92020 = invoke(stypy.reporting.localization.Localization(__file__, 2559, 23), encode_92017, *[unicode_92018], **kwargs_92019)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2559, 23), tuple_92015, encode_call_result_92020)
    # Adding element type (line 2559)
    # Getting the type of 'dt' (line 2559)
    dt_92021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2559, 45), 'dt')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2559, 23), tuple_92015, dt_92021)
    
    list_92024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2559, 22), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2559, 22), list_92024, tuple_92015)
    # Assigning a type to the variable 'all_dtypes' (line 2559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2559, 8), 'all_dtypes', list_92024)
    # SSA join for if statement (line 2558)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2560):
    
    # Assigning a Call to a Name (line 2560):
    
    # Assigning a Call to a Name (line 2560):
    
    # Call to dtype(...): (line 2560)
    # Processing the call arguments (line 2560)
    # Getting the type of 'all_dtypes' (line 2560)
    all_dtypes_92027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 24), 'all_dtypes', False)
    # Processing the call keyword arguments (line 2560)
    kwargs_92028 = {}
    # Getting the type of 'np' (line 2560)
    np_92025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 15), 'np', False)
    # Obtaining the member 'dtype' of a type (line 2560)
    dtype_92026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2560, 15), np_92025, 'dtype')
    # Calling dtype(args, kwargs) (line 2560)
    dtype_call_result_92029 = invoke(stypy.reporting.localization.Localization(__file__, 2560, 15), dtype_92026, *[all_dtypes_92027], **kwargs_92028)
    
    # Assigning a type to the variable 'newdtype' (line 2560)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2560, 4), 'newdtype', dtype_call_result_92029)
    
    # Assigning a Call to a Name (line 2561):
    
    # Assigning a Call to a Name (line 2561):
    
    # Assigning a Call to a Name (line 2561):
    
    # Call to recarray(...): (line 2561)
    # Processing the call arguments (line 2561)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2561)
    tuple_92032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2561, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2561)
    # Adding element type (line 2561)
    # Getting the type of 'common_len' (line 2561)
    common_len_92033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 26), 'common_len', False)
    # Getting the type of 'left_len' (line 2561)
    left_len_92034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 39), 'left_len', False)
    # Applying the binary operator '+' (line 2561)
    result_add_92035 = python_operator(stypy.reporting.localization.Localization(__file__, 2561, 26), '+', common_len_92033, left_len_92034)
    
    # Getting the type of 'right_len' (line 2561)
    right_len_92036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 50), 'right_len', False)
    # Applying the binary operator '+' (line 2561)
    result_add_92037 = python_operator(stypy.reporting.localization.Localization(__file__, 2561, 48), '+', result_add_92035, right_len_92036)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2561, 26), tuple_92032, result_add_92037)
    
    # Processing the call keyword arguments (line 2561)
    # Getting the type of 'newdtype' (line 2561)
    newdtype_92038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 69), 'newdtype', False)
    keyword_92039 = newdtype_92038
    kwargs_92040 = {'dtype': keyword_92039}
    # Getting the type of 'np' (line 2561)
    np_92030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 13), 'np', False)
    # Obtaining the member 'recarray' of a type (line 2561)
    recarray_92031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2561, 13), np_92030, 'recarray')
    # Calling recarray(args, kwargs) (line 2561)
    recarray_call_result_92041 = invoke(stypy.reporting.localization.Localization(__file__, 2561, 13), recarray_92031, *[tuple_92032], **kwargs_92040)
    
    # Assigning a type to the variable 'newrec' (line 2561)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2561, 4), 'newrec', recarray_call_result_92041)
    
    # Type idiom detected: calculating its left and rigth part (line 2563)
    # Getting the type of 'defaults' (line 2563)
    defaults_92042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 4), 'defaults')
    # Getting the type of 'None' (line 2563)
    None_92043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 23), 'None')
    
    (may_be_92044, more_types_in_union_92045) = may_not_be_none(defaults_92042, None_92043)

    if may_be_92044:

        if more_types_in_union_92045:
            # Runtime conditional SSA (line 2563)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Getting the type of 'defaults' (line 2564)
        defaults_92046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 23), 'defaults')
        # Testing the type of a for loop iterable (line 2564)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2564, 8), defaults_92046)
        # Getting the type of the for loop variable (line 2564)
        for_loop_var_92047 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2564, 8), defaults_92046)
        # Assigning a type to the variable 'thiskey' (line 2564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2564, 8), 'thiskey', for_loop_var_92047)
        # SSA begins for a for statement (line 2564)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'thiskey' (line 2565)
        thiskey_92048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2565, 15), 'thiskey')
        # Getting the type of 'newdtype' (line 2565)
        newdtype_92049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2565, 30), 'newdtype')
        # Obtaining the member 'names' of a type (line 2565)
        names_92050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2565, 30), newdtype_92049, 'names')
        # Applying the binary operator 'notin' (line 2565)
        result_contains_92051 = python_operator(stypy.reporting.localization.Localization(__file__, 2565, 15), 'notin', thiskey_92048, names_92050)
        
        # Testing the type of an if condition (line 2565)
        if_condition_92052 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2565, 12), result_contains_92051)
        # Assigning a type to the variable 'if_condition_92052' (line 2565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2565, 12), 'if_condition_92052', if_condition_92052)
        # SSA begins for if statement (line 2565)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 2566)
        # Processing the call arguments (line 2566)
        unicode_92055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2566, 30), 'unicode', u'rec_join defaults key="%s" not in new dtype names "%s"')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2567)
        tuple_92056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2567, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2567)
        # Adding element type (line 2567)
        # Getting the type of 'thiskey' (line 2567)
        thiskey_92057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2567, 46), 'thiskey', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2567, 46), tuple_92056, thiskey_92057)
        # Adding element type (line 2567)
        # Getting the type of 'newdtype' (line 2567)
        newdtype_92058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2567, 55), 'newdtype', False)
        # Obtaining the member 'names' of a type (line 2567)
        names_92059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2567, 55), newdtype_92058, 'names')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2567, 46), tuple_92056, names_92059)
        
        # Applying the binary operator '%' (line 2566)
        result_mod_92060 = python_operator(stypy.reporting.localization.Localization(__file__, 2566, 30), '%', unicode_92055, tuple_92056)
        
        # Processing the call keyword arguments (line 2566)
        kwargs_92061 = {}
        # Getting the type of 'warnings' (line 2566)
        warnings_92053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2566, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2566)
        warn_92054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2566, 16), warnings_92053, 'warn')
        # Calling warn(args, kwargs) (line 2566)
        warn_call_result_92062 = invoke(stypy.reporting.localization.Localization(__file__, 2566, 16), warn_92054, *[result_mod_92060], **kwargs_92061)
        
        # SSA join for if statement (line 2565)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_92045:
            # SSA join for if statement (line 2563)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Getting the type of 'newdtype' (line 2569)
    newdtype_92063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2569, 16), 'newdtype')
    # Obtaining the member 'names' of a type (line 2569)
    names_92064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2569, 16), newdtype_92063, 'names')
    # Testing the type of a for loop iterable (line 2569)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2569, 4), names_92064)
    # Getting the type of the for loop variable (line 2569)
    for_loop_var_92065 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2569, 4), names_92064)
    # Assigning a type to the variable 'name' (line 2569)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2569, 4), 'name', for_loop_var_92065)
    # SSA begins for a for statement (line 2569)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 2570):
    
    # Assigning a Subscript to a Name (line 2570):
    
    # Assigning a Subscript to a Name (line 2570):
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 2570)
    name_92066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 22), 'name')
    # Getting the type of 'newdtype' (line 2570)
    newdtype_92067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 13), 'newdtype')
    # Obtaining the member '__getitem__' of a type (line 2570)
    getitem___92068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2570, 13), newdtype_92067, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2570)
    subscript_call_result_92069 = invoke(stypy.reporting.localization.Localization(__file__, 2570, 13), getitem___92068, name_92066)
    
    # Assigning a type to the variable 'dt' (line 2570)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2570, 8), 'dt', subscript_call_result_92069)
    
    
    # Getting the type of 'dt' (line 2571)
    dt_92070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 11), 'dt')
    # Obtaining the member 'kind' of a type (line 2571)
    kind_92071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2571, 11), dt_92070, 'kind')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2571)
    tuple_92072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2571, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2571)
    # Adding element type (line 2571)
    unicode_92073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2571, 23), 'unicode', u'f')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2571, 23), tuple_92072, unicode_92073)
    # Adding element type (line 2571)
    unicode_92074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2571, 28), 'unicode', u'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2571, 23), tuple_92072, unicode_92074)
    
    # Applying the binary operator 'in' (line 2571)
    result_contains_92075 = python_operator(stypy.reporting.localization.Localization(__file__, 2571, 11), 'in', kind_92071, tuple_92072)
    
    # Testing the type of an if condition (line 2571)
    if_condition_92076 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2571, 8), result_contains_92075)
    # Assigning a type to the variable 'if_condition_92076' (line 2571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2571, 8), 'if_condition_92076', if_condition_92076)
    # SSA begins for if statement (line 2571)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Subscript (line 2572):
    
    # Assigning a Num to a Subscript (line 2572):
    
    # Assigning a Num to a Subscript (line 2572):
    int_92077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 27), 'int')
    # Getting the type of 'newrec' (line 2572)
    newrec_92078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 12), 'newrec')
    # Getting the type of 'name' (line 2572)
    name_92079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 19), 'name')
    # Storing an element on a container (line 2572)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2572, 12), newrec_92078, (name_92079, int_92077))
    # SSA join for if statement (line 2571)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'jointype' (line 2574)
    jointype_92080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 7), 'jointype')
    unicode_92081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2574, 19), 'unicode', u'inner')
    # Applying the binary operator '!=' (line 2574)
    result_ne_92082 = python_operator(stypy.reporting.localization.Localization(__file__, 2574, 7), '!=', jointype_92080, unicode_92081)
    
    
    # Getting the type of 'defaults' (line 2574)
    defaults_92083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 31), 'defaults')
    # Getting the type of 'None' (line 2574)
    None_92084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 47), 'None')
    # Applying the binary operator 'isnot' (line 2574)
    result_is_not_92085 = python_operator(stypy.reporting.localization.Localization(__file__, 2574, 31), 'isnot', defaults_92083, None_92084)
    
    # Applying the binary operator 'and' (line 2574)
    result_and_keyword_92086 = python_operator(stypy.reporting.localization.Localization(__file__, 2574, 7), 'and', result_ne_92082, result_is_not_92085)
    
    # Testing the type of an if condition (line 2574)
    if_condition_92087 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2574, 4), result_and_keyword_92086)
    # Assigning a type to the variable 'if_condition_92087' (line 2574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2574, 4), 'if_condition_92087', if_condition_92087)
    # SSA begins for if statement (line 2574)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2576):
    
    # Assigning a Call to a Name (line 2576):
    
    # Assigning a Call to a Name (line 2576):
    
    # Call to list(...): (line 2576)
    # Processing the call arguments (line 2576)
    # Getting the type of 'newrec' (line 2576)
    newrec_92089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 29), 'newrec', False)
    # Obtaining the member 'dtype' of a type (line 2576)
    dtype_92090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2576, 29), newrec_92089, 'dtype')
    # Obtaining the member 'fields' of a type (line 2576)
    fields_92091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2576, 29), dtype_92090, 'fields')
    # Processing the call keyword arguments (line 2576)
    kwargs_92092 = {}
    # Getting the type of 'list' (line 2576)
    list_92088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 24), 'list', False)
    # Calling list(args, kwargs) (line 2576)
    list_call_result_92093 = invoke(stypy.reporting.localization.Localization(__file__, 2576, 24), list_92088, *[fields_92091], **kwargs_92092)
    
    # Assigning a type to the variable 'newrec_fields' (line 2576)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2576, 8), 'newrec_fields', list_call_result_92093)
    
    
    # Call to iteritems(...): (line 2577)
    # Processing the call arguments (line 2577)
    # Getting the type of 'defaults' (line 2577)
    defaults_92096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2577, 34), 'defaults', False)
    # Processing the call keyword arguments (line 2577)
    kwargs_92097 = {}
    # Getting the type of 'six' (line 2577)
    six_92094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2577, 20), 'six', False)
    # Obtaining the member 'iteritems' of a type (line 2577)
    iteritems_92095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2577, 20), six_92094, 'iteritems')
    # Calling iteritems(args, kwargs) (line 2577)
    iteritems_call_result_92098 = invoke(stypy.reporting.localization.Localization(__file__, 2577, 20), iteritems_92095, *[defaults_92096], **kwargs_92097)
    
    # Testing the type of a for loop iterable (line 2577)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2577, 8), iteritems_call_result_92098)
    # Getting the type of the for loop variable (line 2577)
    for_loop_var_92099 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2577, 8), iteritems_call_result_92098)
    # Assigning a type to the variable 'k' (line 2577)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2577, 8), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2577, 8), for_loop_var_92099))
    # Assigning a type to the variable 'v' (line 2577)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2577, 8), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2577, 8), for_loop_var_92099))
    # SSA begins for a for statement (line 2577)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'k' (line 2578)
    k_92100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 15), 'k')
    # Getting the type of 'newrec_fields' (line 2578)
    newrec_fields_92101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 20), 'newrec_fields')
    # Applying the binary operator 'in' (line 2578)
    result_contains_92102 = python_operator(stypy.reporting.localization.Localization(__file__, 2578, 15), 'in', k_92100, newrec_fields_92101)
    
    # Testing the type of an if condition (line 2578)
    if_condition_92103 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2578, 12), result_contains_92102)
    # Assigning a type to the variable 'if_condition_92103' (line 2578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2578, 12), 'if_condition_92103', if_condition_92103)
    # SSA begins for if statement (line 2578)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 2579):
    
    # Assigning a Name to a Subscript (line 2579):
    
    # Assigning a Name to a Subscript (line 2579):
    # Getting the type of 'v' (line 2579)
    v_92104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 28), 'v')
    # Getting the type of 'newrec' (line 2579)
    newrec_92105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 16), 'newrec')
    # Getting the type of 'k' (line 2579)
    k_92106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 23), 'k')
    # Storing an element on a container (line 2579)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2579, 16), newrec_92105, (k_92106, v_92104))
    # SSA join for if statement (line 2578)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2574)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'r1' (line 2581)
    r1_92107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2581, 17), 'r1')
    # Obtaining the member 'dtype' of a type (line 2581)
    dtype_92108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2581, 17), r1_92107, 'dtype')
    # Obtaining the member 'names' of a type (line 2581)
    names_92109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2581, 17), dtype_92108, 'names')
    # Testing the type of a for loop iterable (line 2581)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2581, 4), names_92109)
    # Getting the type of the for loop variable (line 2581)
    for_loop_var_92110 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2581, 4), names_92109)
    # Assigning a type to the variable 'field' (line 2581)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2581, 4), 'field', for_loop_var_92110)
    # SSA begins for a for statement (line 2581)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 2582):
    
    # Assigning a Call to a Name (line 2582):
    
    # Assigning a Call to a Name (line 2582):
    
    # Call to mapped_r1field(...): (line 2582)
    # Processing the call arguments (line 2582)
    # Getting the type of 'field' (line 2582)
    field_92112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 34), 'field', False)
    # Processing the call keyword arguments (line 2582)
    kwargs_92113 = {}
    # Getting the type of 'mapped_r1field' (line 2582)
    mapped_r1field_92111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 19), 'mapped_r1field', False)
    # Calling mapped_r1field(args, kwargs) (line 2582)
    mapped_r1field_call_result_92114 = invoke(stypy.reporting.localization.Localization(__file__, 2582, 19), mapped_r1field_92111, *[field_92112], **kwargs_92113)
    
    # Assigning a type to the variable 'newfield' (line 2582)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2582, 8), 'newfield', mapped_r1field_call_result_92114)
    
    # Getting the type of 'common_len' (line 2583)
    common_len_92115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2583, 11), 'common_len')
    # Testing the type of an if condition (line 2583)
    if_condition_92116 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2583, 8), common_len_92115)
    # Assigning a type to the variable 'if_condition_92116' (line 2583)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2583, 8), 'if_condition_92116', if_condition_92116)
    # SSA begins for if statement (line 2583)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Subscript (line 2584):
    
    # Assigning a Subscript to a Subscript (line 2584):
    
    # Assigning a Subscript to a Subscript (line 2584):
    
    # Obtaining the type of the subscript
    # Getting the type of 'r1ind' (line 2584)
    r1ind_92117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2584, 54), 'r1ind')
    
    # Obtaining the type of the subscript
    # Getting the type of 'field' (line 2584)
    field_92118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2584, 47), 'field')
    # Getting the type of 'r1' (line 2584)
    r1_92119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2584, 44), 'r1')
    # Obtaining the member '__getitem__' of a type (line 2584)
    getitem___92120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2584, 44), r1_92119, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2584)
    subscript_call_result_92121 = invoke(stypy.reporting.localization.Localization(__file__, 2584, 44), getitem___92120, field_92118)
    
    # Obtaining the member '__getitem__' of a type (line 2584)
    getitem___92122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2584, 44), subscript_call_result_92121, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2584)
    subscript_call_result_92123 = invoke(stypy.reporting.localization.Localization(__file__, 2584, 44), getitem___92122, r1ind_92117)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'newfield' (line 2584)
    newfield_92124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2584, 19), 'newfield')
    # Getting the type of 'newrec' (line 2584)
    newrec_92125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2584, 12), 'newrec')
    # Obtaining the member '__getitem__' of a type (line 2584)
    getitem___92126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2584, 12), newrec_92125, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2584)
    subscript_call_result_92127 = invoke(stypy.reporting.localization.Localization(__file__, 2584, 12), getitem___92126, newfield_92124)
    
    # Getting the type of 'common_len' (line 2584)
    common_len_92128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2584, 30), 'common_len')
    slice_92129 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2584, 12), None, common_len_92128, None)
    # Storing an element on a container (line 2584)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2584, 12), subscript_call_result_92127, (slice_92129, subscript_call_result_92123))
    # SSA join for if statement (line 2583)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Evaluating a boolean operation
    
    # Getting the type of 'jointype' (line 2585)
    jointype_92130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2585, 12), 'jointype')
    unicode_92131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2585, 24), 'unicode', u'outer')
    # Applying the binary operator '==' (line 2585)
    result_eq_92132 = python_operator(stypy.reporting.localization.Localization(__file__, 2585, 12), '==', jointype_92130, unicode_92131)
    
    
    # Getting the type of 'jointype' (line 2585)
    jointype_92133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2585, 35), 'jointype')
    unicode_92134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2585, 47), 'unicode', u'leftouter')
    # Applying the binary operator '==' (line 2585)
    result_eq_92135 = python_operator(stypy.reporting.localization.Localization(__file__, 2585, 35), '==', jointype_92133, unicode_92134)
    
    # Applying the binary operator 'or' (line 2585)
    result_or_keyword_92136 = python_operator(stypy.reporting.localization.Localization(__file__, 2585, 12), 'or', result_eq_92132, result_eq_92135)
    
    # Getting the type of 'left_len' (line 2585)
    left_len_92137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2585, 64), 'left_len')
    # Applying the binary operator 'and' (line 2585)
    result_and_keyword_92138 = python_operator(stypy.reporting.localization.Localization(__file__, 2585, 11), 'and', result_or_keyword_92136, left_len_92137)
    
    # Testing the type of an if condition (line 2585)
    if_condition_92139 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2585, 8), result_and_keyword_92138)
    # Assigning a type to the variable 'if_condition_92139' (line 2585)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2585, 8), 'if_condition_92139', if_condition_92139)
    # SSA begins for if statement (line 2585)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Subscript (line 2586):
    
    # Assigning a Subscript to a Subscript (line 2586):
    
    # Assigning a Subscript to a Subscript (line 2586):
    
    # Obtaining the type of the subscript
    # Getting the type of 'left_ind' (line 2587)
    left_ind_92140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 26), 'left_ind')
    
    # Obtaining the type of the subscript
    # Getting the type of 'field' (line 2587)
    field_92141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 19), 'field')
    # Getting the type of 'r1' (line 2587)
    r1_92142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 16), 'r1')
    # Obtaining the member '__getitem__' of a type (line 2587)
    getitem___92143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2587, 16), r1_92142, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2587)
    subscript_call_result_92144 = invoke(stypy.reporting.localization.Localization(__file__, 2587, 16), getitem___92143, field_92141)
    
    # Obtaining the member '__getitem__' of a type (line 2587)
    getitem___92145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2587, 16), subscript_call_result_92144, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2587)
    subscript_call_result_92146 = invoke(stypy.reporting.localization.Localization(__file__, 2587, 16), getitem___92145, left_ind_92140)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'newfield' (line 2586)
    newfield_92147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 19), 'newfield')
    # Getting the type of 'newrec' (line 2586)
    newrec_92148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 12), 'newrec')
    # Obtaining the member '__getitem__' of a type (line 2586)
    getitem___92149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2586, 12), newrec_92148, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2586)
    subscript_call_result_92150 = invoke(stypy.reporting.localization.Localization(__file__, 2586, 12), getitem___92149, newfield_92147)
    
    # Getting the type of 'common_len' (line 2586)
    common_len_92151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 29), 'common_len')
    # Getting the type of 'common_len' (line 2586)
    common_len_92152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 41), 'common_len')
    # Getting the type of 'left_len' (line 2586)
    left_len_92153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 52), 'left_len')
    # Applying the binary operator '+' (line 2586)
    result_add_92154 = python_operator(stypy.reporting.localization.Localization(__file__, 2586, 41), '+', common_len_92152, left_len_92153)
    
    slice_92155 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2586, 12), common_len_92151, result_add_92154, None)
    # Storing an element on a container (line 2586)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2586, 12), subscript_call_result_92150, (slice_92155, subscript_call_result_92146))
    # SSA join for if statement (line 2585)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'r2' (line 2590)
    r2_92156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 17), 'r2')
    # Obtaining the member 'dtype' of a type (line 2590)
    dtype_92157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2590, 17), r2_92156, 'dtype')
    # Obtaining the member 'names' of a type (line 2590)
    names_92158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2590, 17), dtype_92157, 'names')
    # Testing the type of a for loop iterable (line 2590)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2590, 4), names_92158)
    # Getting the type of the for loop variable (line 2590)
    for_loop_var_92159 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2590, 4), names_92158)
    # Assigning a type to the variable 'field' (line 2590)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2590, 4), 'field', for_loop_var_92159)
    # SSA begins for a for statement (line 2590)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 2591):
    
    # Assigning a Call to a Name (line 2591):
    
    # Assigning a Call to a Name (line 2591):
    
    # Call to mapped_r2field(...): (line 2591)
    # Processing the call arguments (line 2591)
    # Getting the type of 'field' (line 2591)
    field_92161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2591, 34), 'field', False)
    # Processing the call keyword arguments (line 2591)
    kwargs_92162 = {}
    # Getting the type of 'mapped_r2field' (line 2591)
    mapped_r2field_92160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2591, 19), 'mapped_r2field', False)
    # Calling mapped_r2field(args, kwargs) (line 2591)
    mapped_r2field_call_result_92163 = invoke(stypy.reporting.localization.Localization(__file__, 2591, 19), mapped_r2field_92160, *[field_92161], **kwargs_92162)
    
    # Assigning a type to the variable 'newfield' (line 2591)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2591, 8), 'newfield', mapped_r2field_call_result_92163)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'field' (line 2592)
    field_92164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 11), 'field')
    # Getting the type of 'key' (line 2592)
    key_92165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 24), 'key')
    # Applying the binary operator 'notin' (line 2592)
    result_contains_92166 = python_operator(stypy.reporting.localization.Localization(__file__, 2592, 11), 'notin', field_92164, key_92165)
    
    # Getting the type of 'common_len' (line 2592)
    common_len_92167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 32), 'common_len')
    # Applying the binary operator 'and' (line 2592)
    result_and_keyword_92168 = python_operator(stypy.reporting.localization.Localization(__file__, 2592, 11), 'and', result_contains_92166, common_len_92167)
    
    # Testing the type of an if condition (line 2592)
    if_condition_92169 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2592, 8), result_and_keyword_92168)
    # Assigning a type to the variable 'if_condition_92169' (line 2592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2592, 8), 'if_condition_92169', if_condition_92169)
    # SSA begins for if statement (line 2592)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Subscript (line 2593):
    
    # Assigning a Subscript to a Subscript (line 2593):
    
    # Assigning a Subscript to a Subscript (line 2593):
    
    # Obtaining the type of the subscript
    # Getting the type of 'r2ind' (line 2593)
    r2ind_92170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 54), 'r2ind')
    
    # Obtaining the type of the subscript
    # Getting the type of 'field' (line 2593)
    field_92171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 47), 'field')
    # Getting the type of 'r2' (line 2593)
    r2_92172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 44), 'r2')
    # Obtaining the member '__getitem__' of a type (line 2593)
    getitem___92173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2593, 44), r2_92172, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2593)
    subscript_call_result_92174 = invoke(stypy.reporting.localization.Localization(__file__, 2593, 44), getitem___92173, field_92171)
    
    # Obtaining the member '__getitem__' of a type (line 2593)
    getitem___92175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2593, 44), subscript_call_result_92174, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2593)
    subscript_call_result_92176 = invoke(stypy.reporting.localization.Localization(__file__, 2593, 44), getitem___92175, r2ind_92170)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'newfield' (line 2593)
    newfield_92177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 19), 'newfield')
    # Getting the type of 'newrec' (line 2593)
    newrec_92178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 12), 'newrec')
    # Obtaining the member '__getitem__' of a type (line 2593)
    getitem___92179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2593, 12), newrec_92178, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2593)
    subscript_call_result_92180 = invoke(stypy.reporting.localization.Localization(__file__, 2593, 12), getitem___92179, newfield_92177)
    
    # Getting the type of 'common_len' (line 2593)
    common_len_92181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 30), 'common_len')
    slice_92182 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2593, 12), None, common_len_92181, None)
    # Storing an element on a container (line 2593)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2593, 12), subscript_call_result_92180, (slice_92182, subscript_call_result_92176))
    # SSA join for if statement (line 2592)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'jointype' (line 2594)
    jointype_92183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2594, 11), 'jointype')
    unicode_92184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2594, 23), 'unicode', u'outer')
    # Applying the binary operator '==' (line 2594)
    result_eq_92185 = python_operator(stypy.reporting.localization.Localization(__file__, 2594, 11), '==', jointype_92183, unicode_92184)
    
    # Getting the type of 'right_len' (line 2594)
    right_len_92186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2594, 35), 'right_len')
    # Applying the binary operator 'and' (line 2594)
    result_and_keyword_92187 = python_operator(stypy.reporting.localization.Localization(__file__, 2594, 11), 'and', result_eq_92185, right_len_92186)
    
    # Testing the type of an if condition (line 2594)
    if_condition_92188 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2594, 8), result_and_keyword_92187)
    # Assigning a type to the variable 'if_condition_92188' (line 2594)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2594, 8), 'if_condition_92188', if_condition_92188)
    # SSA begins for if statement (line 2594)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Subscript (line 2595):
    
    # Assigning a Subscript to a Subscript (line 2595):
    
    # Assigning a Subscript to a Subscript (line 2595):
    
    # Obtaining the type of the subscript
    # Getting the type of 'right_ind' (line 2595)
    right_ind_92189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 54), 'right_ind')
    
    # Obtaining the type of the subscript
    # Getting the type of 'field' (line 2595)
    field_92190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 47), 'field')
    # Getting the type of 'r2' (line 2595)
    r2_92191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 44), 'r2')
    # Obtaining the member '__getitem__' of a type (line 2595)
    getitem___92192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2595, 44), r2_92191, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2595)
    subscript_call_result_92193 = invoke(stypy.reporting.localization.Localization(__file__, 2595, 44), getitem___92192, field_92190)
    
    # Obtaining the member '__getitem__' of a type (line 2595)
    getitem___92194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2595, 44), subscript_call_result_92193, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2595)
    subscript_call_result_92195 = invoke(stypy.reporting.localization.Localization(__file__, 2595, 44), getitem___92194, right_ind_92189)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'newfield' (line 2595)
    newfield_92196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 19), 'newfield')
    # Getting the type of 'newrec' (line 2595)
    newrec_92197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 12), 'newrec')
    # Obtaining the member '__getitem__' of a type (line 2595)
    getitem___92198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2595, 12), newrec_92197, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2595)
    subscript_call_result_92199 = invoke(stypy.reporting.localization.Localization(__file__, 2595, 12), getitem___92198, newfield_92196)
    
    
    # Getting the type of 'right_len' (line 2595)
    right_len_92200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 30), 'right_len')
    # Applying the 'usub' unary operator (line 2595)
    result___neg___92201 = python_operator(stypy.reporting.localization.Localization(__file__, 2595, 29), 'usub', right_len_92200)
    
    slice_92202 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2595, 12), result___neg___92201, None, None)
    # Storing an element on a container (line 2595)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2595, 12), subscript_call_result_92199, (slice_92202, subscript_call_result_92195))
    # SSA join for if statement (line 2594)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to sort(...): (line 2597)
    # Processing the call keyword arguments (line 2597)
    # Getting the type of 'key' (line 2597)
    key_92205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 22), 'key', False)
    keyword_92206 = key_92205
    kwargs_92207 = {'order': keyword_92206}
    # Getting the type of 'newrec' (line 2597)
    newrec_92203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 4), 'newrec', False)
    # Obtaining the member 'sort' of a type (line 2597)
    sort_92204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2597, 4), newrec_92203, 'sort')
    # Calling sort(args, kwargs) (line 2597)
    sort_call_result_92208 = invoke(stypy.reporting.localization.Localization(__file__, 2597, 4), sort_92204, *[], **kwargs_92207)
    
    # Getting the type of 'newrec' (line 2599)
    newrec_92209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 11), 'newrec')
    # Assigning a type to the variable 'stypy_return_type' (line 2599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2599, 4), 'stypy_return_type', newrec_92209)
    
    # ################# End of 'rec_join(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rec_join' in the type store
    # Getting the type of 'stypy_return_type' (line 2458)
    stypy_return_type_92210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_92210)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rec_join'
    return stypy_return_type_92210

# Assigning a type to the variable 'rec_join' (line 2458)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2458, 0), 'rec_join', rec_join)

@norecursion
def recs_join(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    unicode_92211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2602, 40), 'unicode', u'outer')
    float_92212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2602, 57), 'float')
    # Getting the type of 'None' (line 2602)
    None_92213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 71), 'None')
    defaults = [unicode_92211, float_92212, None_92213]
    # Create a new context for function 'recs_join'
    module_type_store = module_type_store.open_function_context('recs_join', 2602, 0, False)
    
    # Passed parameters checking function
    recs_join.stypy_localization = localization
    recs_join.stypy_type_of_self = None
    recs_join.stypy_type_store = module_type_store
    recs_join.stypy_function_name = 'recs_join'
    recs_join.stypy_param_names_list = ['key', 'name', 'recs', 'jointype', 'missing', 'postfixes']
    recs_join.stypy_varargs_param_name = None
    recs_join.stypy_kwargs_param_name = None
    recs_join.stypy_call_defaults = defaults
    recs_join.stypy_call_varargs = varargs
    recs_join.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'recs_join', ['key', 'name', 'recs', 'jointype', 'missing', 'postfixes'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'recs_join', localization, ['key', 'name', 'recs', 'jointype', 'missing', 'postfixes'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'recs_join(...)' code ##################

    unicode_92214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2634, (-1)), 'unicode', u'\n    Join a sequence of record arrays on single column key.\n\n    This function only joins a single column of the multiple record arrays\n\n    *key*\n      is the column name that acts as a key\n\n    *name*\n      is the name of the column that we want to join\n\n    *recs*\n      is a list of record arrays to join\n\n    *jointype*\n      is a string \'inner\' or \'outer\'\n\n    *missing*\n      is what any missing field is replaced by\n\n    *postfixes*\n      if not None, a len recs sequence of postfixes\n\n    returns a record array with columns [rowkey, name0, name1, ... namen-1].\n    or if postfixes [PF0, PF1, ..., PFN-1] are supplied,\n    [rowkey, namePF0, namePF1, ... namePFN-1].\n\n    Example::\n\n      r = recs_join("date", "close", recs=[r0, r1], missing=0.)\n\n    ')
    
    # Assigning a List to a Name (line 2635):
    
    # Assigning a List to a Name (line 2635):
    
    # Assigning a List to a Name (line 2635):
    
    # Obtaining an instance of the builtin type 'list' (line 2635)
    list_92215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2635, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2635)
    
    # Assigning a type to the variable 'results' (line 2635)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2635, 4), 'results', list_92215)
    
    # Assigning a Call to a Name (line 2636):
    
    # Assigning a Call to a Name (line 2636):
    
    # Assigning a Call to a Name (line 2636):
    
    # Call to align_iterators(...): (line 2636)
    # Processing the call arguments (line 2636)
    
    # Call to attrgetter(...): (line 2636)
    # Processing the call arguments (line 2636)
    # Getting the type of 'key' (line 2636)
    key_92220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 62), 'key', False)
    # Processing the call keyword arguments (line 2636)
    kwargs_92221 = {}
    # Getting the type of 'operator' (line 2636)
    operator_92218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 42), 'operator', False)
    # Obtaining the member 'attrgetter' of a type (line 2636)
    attrgetter_92219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2636, 42), operator_92218, 'attrgetter')
    # Calling attrgetter(args, kwargs) (line 2636)
    attrgetter_call_result_92222 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 42), attrgetter_92219, *[key_92220], **kwargs_92221)
    
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'recs' (line 2637)
    recs_92227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 61), 'recs', False)
    comprehension_92228 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2637, 44), recs_92227)
    # Assigning a type to the variable 'r' (line 2637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2637, 44), 'r', comprehension_92228)
    
    # Call to iter(...): (line 2637)
    # Processing the call arguments (line 2637)
    # Getting the type of 'r' (line 2637)
    r_92224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 49), 'r', False)
    # Processing the call keyword arguments (line 2637)
    kwargs_92225 = {}
    # Getting the type of 'iter' (line 2637)
    iter_92223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 44), 'iter', False)
    # Calling iter(args, kwargs) (line 2637)
    iter_call_result_92226 = invoke(stypy.reporting.localization.Localization(__file__, 2637, 44), iter_92223, *[r_92224], **kwargs_92225)
    
    list_92229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2637, 44), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2637, 44), list_92229, iter_call_result_92226)
    # Processing the call keyword arguments (line 2636)
    kwargs_92230 = {}
    # Getting the type of 'cbook' (line 2636)
    cbook_92216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 20), 'cbook', False)
    # Obtaining the member 'align_iterators' of a type (line 2636)
    align_iterators_92217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2636, 20), cbook_92216, 'align_iterators')
    # Calling align_iterators(args, kwargs) (line 2636)
    align_iterators_call_result_92231 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 20), align_iterators_92217, *[attrgetter_call_result_92222, list_92229], **kwargs_92230)
    
    # Assigning a type to the variable 'aligned_iters' (line 2636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 4), 'aligned_iters', align_iterators_call_result_92231)

    @norecursion
    def extract(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'extract'
        module_type_store = module_type_store.open_function_context('extract', 2639, 4, False)
        
        # Passed parameters checking function
        extract.stypy_localization = localization
        extract.stypy_type_of_self = None
        extract.stypy_type_store = module_type_store
        extract.stypy_function_name = 'extract'
        extract.stypy_param_names_list = ['r']
        extract.stypy_varargs_param_name = None
        extract.stypy_kwargs_param_name = None
        extract.stypy_call_defaults = defaults
        extract.stypy_call_varargs = varargs
        extract.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'extract', ['r'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'extract', localization, ['r'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'extract(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 2640)
        # Getting the type of 'r' (line 2640)
        r_92232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 11), 'r')
        # Getting the type of 'None' (line 2640)
        None_92233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 16), 'None')
        
        (may_be_92234, more_types_in_union_92235) = may_be_none(r_92232, None_92233)

        if may_be_92234:

            if more_types_in_union_92235:
                # Runtime conditional SSA (line 2640)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'missing' (line 2641)
            missing_92236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2641, 19), 'missing')
            # Assigning a type to the variable 'stypy_return_type' (line 2641)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2641, 12), 'stypy_return_type', missing_92236)

            if more_types_in_union_92235:
                # Runtime conditional SSA for else branch (line 2640)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_92234) or more_types_in_union_92235):
            
            # Obtaining the type of the subscript
            # Getting the type of 'name' (line 2643)
            name_92237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 21), 'name')
            # Getting the type of 'r' (line 2643)
            r_92238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 19), 'r')
            # Obtaining the member '__getitem__' of a type (line 2643)
            getitem___92239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2643, 19), r_92238, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2643)
            subscript_call_result_92240 = invoke(stypy.reporting.localization.Localization(__file__, 2643, 19), getitem___92239, name_92237)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2643)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2643, 12), 'stypy_return_type', subscript_call_result_92240)

            if (may_be_92234 and more_types_in_union_92235):
                # SSA join for if statement (line 2640)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'extract(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'extract' in the type store
        # Getting the type of 'stypy_return_type' (line 2639)
        stypy_return_type_92241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_92241)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'extract'
        return stypy_return_type_92241

    # Assigning a type to the variable 'extract' (line 2639)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2639, 4), 'extract', extract)
    
    
    # Getting the type of 'jointype' (line 2645)
    jointype_92242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 7), 'jointype')
    unicode_92243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2645, 19), 'unicode', u'outer')
    # Applying the binary operator '==' (line 2645)
    result_eq_92244 = python_operator(stypy.reporting.localization.Localization(__file__, 2645, 7), '==', jointype_92242, unicode_92243)
    
    # Testing the type of an if condition (line 2645)
    if_condition_92245 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2645, 4), result_eq_92244)
    # Assigning a type to the variable 'if_condition_92245' (line 2645)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2645, 4), 'if_condition_92245', if_condition_92245)
    # SSA begins for if statement (line 2645)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'aligned_iters' (line 2646)
    aligned_iters_92246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 27), 'aligned_iters')
    # Testing the type of a for loop iterable (line 2646)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2646, 8), aligned_iters_92246)
    # Getting the type of the for loop variable (line 2646)
    for_loop_var_92247 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2646, 8), aligned_iters_92246)
    # Assigning a type to the variable 'rowkey' (line 2646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2646, 8), 'rowkey', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2646, 8), for_loop_var_92247))
    # Assigning a type to the variable 'row' (line 2646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2646, 8), 'row', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2646, 8), for_loop_var_92247))
    # SSA begins for a for statement (line 2646)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to append(...): (line 2647)
    # Processing the call arguments (line 2647)
    
    # Obtaining an instance of the builtin type 'list' (line 2647)
    list_92250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2647, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2647)
    # Adding element type (line 2647)
    # Getting the type of 'rowkey' (line 2647)
    rowkey_92251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 28), 'rowkey', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2647, 27), list_92250, rowkey_92251)
    
    
    # Call to list(...): (line 2647)
    # Processing the call arguments (line 2647)
    
    # Call to map(...): (line 2647)
    # Processing the call arguments (line 2647)
    # Getting the type of 'extract' (line 2647)
    extract_92254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 47), 'extract', False)
    # Getting the type of 'row' (line 2647)
    row_92255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 56), 'row', False)
    # Processing the call keyword arguments (line 2647)
    kwargs_92256 = {}
    # Getting the type of 'map' (line 2647)
    map_92253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 43), 'map', False)
    # Calling map(args, kwargs) (line 2647)
    map_call_result_92257 = invoke(stypy.reporting.localization.Localization(__file__, 2647, 43), map_92253, *[extract_92254, row_92255], **kwargs_92256)
    
    # Processing the call keyword arguments (line 2647)
    kwargs_92258 = {}
    # Getting the type of 'list' (line 2647)
    list_92252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 38), 'list', False)
    # Calling list(args, kwargs) (line 2647)
    list_call_result_92259 = invoke(stypy.reporting.localization.Localization(__file__, 2647, 38), list_92252, *[map_call_result_92257], **kwargs_92258)
    
    # Applying the binary operator '+' (line 2647)
    result_add_92260 = python_operator(stypy.reporting.localization.Localization(__file__, 2647, 27), '+', list_92250, list_call_result_92259)
    
    # Processing the call keyword arguments (line 2647)
    kwargs_92261 = {}
    # Getting the type of 'results' (line 2647)
    results_92248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 12), 'results', False)
    # Obtaining the member 'append' of a type (line 2647)
    append_92249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2647, 12), results_92248, 'append')
    # Calling append(args, kwargs) (line 2647)
    append_call_result_92262 = invoke(stypy.reporting.localization.Localization(__file__, 2647, 12), append_92249, *[result_add_92260], **kwargs_92261)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2645)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'jointype' (line 2648)
    jointype_92263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 9), 'jointype')
    unicode_92264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2648, 21), 'unicode', u'inner')
    # Applying the binary operator '==' (line 2648)
    result_eq_92265 = python_operator(stypy.reporting.localization.Localization(__file__, 2648, 9), '==', jointype_92263, unicode_92264)
    
    # Testing the type of an if condition (line 2648)
    if_condition_92266 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2648, 9), result_eq_92265)
    # Assigning a type to the variable 'if_condition_92266' (line 2648)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2648, 9), 'if_condition_92266', if_condition_92266)
    # SSA begins for if statement (line 2648)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'aligned_iters' (line 2649)
    aligned_iters_92267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 27), 'aligned_iters')
    # Testing the type of a for loop iterable (line 2649)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2649, 8), aligned_iters_92267)
    # Getting the type of the for loop variable (line 2649)
    for_loop_var_92268 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2649, 8), aligned_iters_92267)
    # Assigning a type to the variable 'rowkey' (line 2649)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2649, 8), 'rowkey', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2649, 8), for_loop_var_92268))
    # Assigning a type to the variable 'row' (line 2649)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2649, 8), 'row', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2649, 8), for_loop_var_92268))
    # SSA begins for a for statement (line 2649)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'None' (line 2650)
    None_92269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 15), 'None')
    # Getting the type of 'row' (line 2650)
    row_92270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 27), 'row')
    # Applying the binary operator 'notin' (line 2650)
    result_contains_92271 = python_operator(stypy.reporting.localization.Localization(__file__, 2650, 15), 'notin', None_92269, row_92270)
    
    # Testing the type of an if condition (line 2650)
    if_condition_92272 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2650, 12), result_contains_92271)
    # Assigning a type to the variable 'if_condition_92272' (line 2650)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2650, 12), 'if_condition_92272', if_condition_92272)
    # SSA begins for if statement (line 2650)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 2651)
    # Processing the call arguments (line 2651)
    
    # Obtaining an instance of the builtin type 'list' (line 2651)
    list_92275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2651, 31), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2651)
    # Adding element type (line 2651)
    # Getting the type of 'rowkey' (line 2651)
    rowkey_92276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 32), 'rowkey', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2651, 31), list_92275, rowkey_92276)
    
    
    # Call to list(...): (line 2651)
    # Processing the call arguments (line 2651)
    
    # Call to map(...): (line 2651)
    # Processing the call arguments (line 2651)
    # Getting the type of 'extract' (line 2651)
    extract_92279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 51), 'extract', False)
    # Getting the type of 'row' (line 2651)
    row_92280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 60), 'row', False)
    # Processing the call keyword arguments (line 2651)
    kwargs_92281 = {}
    # Getting the type of 'map' (line 2651)
    map_92278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 47), 'map', False)
    # Calling map(args, kwargs) (line 2651)
    map_call_result_92282 = invoke(stypy.reporting.localization.Localization(__file__, 2651, 47), map_92278, *[extract_92279, row_92280], **kwargs_92281)
    
    # Processing the call keyword arguments (line 2651)
    kwargs_92283 = {}
    # Getting the type of 'list' (line 2651)
    list_92277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 42), 'list', False)
    # Calling list(args, kwargs) (line 2651)
    list_call_result_92284 = invoke(stypy.reporting.localization.Localization(__file__, 2651, 42), list_92277, *[map_call_result_92282], **kwargs_92283)
    
    # Applying the binary operator '+' (line 2651)
    result_add_92285 = python_operator(stypy.reporting.localization.Localization(__file__, 2651, 31), '+', list_92275, list_call_result_92284)
    
    # Processing the call keyword arguments (line 2651)
    kwargs_92286 = {}
    # Getting the type of 'results' (line 2651)
    results_92273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 16), 'results', False)
    # Obtaining the member 'append' of a type (line 2651)
    append_92274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2651, 16), results_92273, 'append')
    # Calling append(args, kwargs) (line 2651)
    append_call_result_92287 = invoke(stypy.reporting.localization.Localization(__file__, 2651, 16), append_92274, *[result_add_92285], **kwargs_92286)
    
    # SSA join for if statement (line 2650)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2648)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2645)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 2653)
    # Getting the type of 'postfixes' (line 2653)
    postfixes_92288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 7), 'postfixes')
    # Getting the type of 'None' (line 2653)
    None_92289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 20), 'None')
    
    (may_be_92290, more_types_in_union_92291) = may_be_none(postfixes_92288, None_92289)

    if may_be_92290:

        if more_types_in_union_92291:
            # Runtime conditional SSA (line 2653)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a ListComp to a Name (line 2654):
        
        # Assigning a ListComp to a Name (line 2654):
        
        # Assigning a ListComp to a Name (line 2654):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to range(...): (line 2654)
        # Processing the call arguments (line 2654)
        
        # Call to len(...): (line 2654)
        # Processing the call arguments (line 2654)
        # Getting the type of 'recs' (line 2654)
        recs_92297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2654, 49), 'recs', False)
        # Processing the call keyword arguments (line 2654)
        kwargs_92298 = {}
        # Getting the type of 'len' (line 2654)
        len_92296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2654, 45), 'len', False)
        # Calling len(args, kwargs) (line 2654)
        len_call_result_92299 = invoke(stypy.reporting.localization.Localization(__file__, 2654, 45), len_92296, *[recs_92297], **kwargs_92298)
        
        # Processing the call keyword arguments (line 2654)
        kwargs_92300 = {}
        # Getting the type of 'range' (line 2654)
        range_92295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2654, 39), 'range', False)
        # Calling range(args, kwargs) (line 2654)
        range_call_result_92301 = invoke(stypy.reporting.localization.Localization(__file__, 2654, 39), range_92295, *[len_call_result_92299], **kwargs_92300)
        
        comprehension_92302 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2654, 21), range_call_result_92301)
        # Assigning a type to the variable 'i' (line 2654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2654, 21), 'i', comprehension_92302)
        unicode_92292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2654, 21), 'unicode', u'%d')
        # Getting the type of 'i' (line 2654)
        i_92293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2654, 28), 'i')
        # Applying the binary operator '%' (line 2654)
        result_mod_92294 = python_operator(stypy.reporting.localization.Localization(__file__, 2654, 21), '%', unicode_92292, i_92293)
        
        list_92303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2654, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2654, 21), list_92303, result_mod_92294)
        # Assigning a type to the variable 'postfixes' (line 2654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2654, 8), 'postfixes', list_92303)

        if more_types_in_union_92291:
            # SSA join for if statement (line 2653)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 2655):
    
    # Assigning a Call to a Name (line 2655):
    
    # Assigning a Call to a Name (line 2655):
    
    # Call to join(...): (line 2655)
    # Processing the call arguments (line 2655)
    
    # Obtaining an instance of the builtin type 'list' (line 2655)
    list_92306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2655, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2655)
    # Adding element type (line 2655)
    # Getting the type of 'key' (line 2655)
    key_92307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2655, 22), 'key', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2655, 21), list_92306, key_92307)
    
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'postfixes' (line 2656)
    postfixes_92313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2656, 45), 'postfixes', False)
    comprehension_92314 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2655, 30), postfixes_92313)
    # Assigning a type to the variable 'postfix' (line 2655)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2655, 30), 'postfix', comprehension_92314)
    unicode_92308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2655, 30), 'unicode', u'%s%s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2655)
    tuple_92309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2655, 40), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2655)
    # Adding element type (line 2655)
    # Getting the type of 'name' (line 2655)
    name_92310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2655, 40), 'name', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2655, 40), tuple_92309, name_92310)
    # Adding element type (line 2655)
    # Getting the type of 'postfix' (line 2655)
    postfix_92311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2655, 46), 'postfix', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2655, 40), tuple_92309, postfix_92311)
    
    # Applying the binary operator '%' (line 2655)
    result_mod_92312 = python_operator(stypy.reporting.localization.Localization(__file__, 2655, 30), '%', unicode_92308, tuple_92309)
    
    list_92315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2655, 30), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2655, 30), list_92315, result_mod_92312)
    # Applying the binary operator '+' (line 2655)
    result_add_92316 = python_operator(stypy.reporting.localization.Localization(__file__, 2655, 21), '+', list_92306, list_92315)
    
    # Processing the call keyword arguments (line 2655)
    kwargs_92317 = {}
    unicode_92304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2655, 12), 'unicode', u',')
    # Obtaining the member 'join' of a type (line 2655)
    join_92305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2655, 12), unicode_92304, 'join')
    # Calling join(args, kwargs) (line 2655)
    join_call_result_92318 = invoke(stypy.reporting.localization.Localization(__file__, 2655, 12), join_92305, *[result_add_92316], **kwargs_92317)
    
    # Assigning a type to the variable 'names' (line 2655)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2655, 4), 'names', join_call_result_92318)
    
    # Call to fromrecords(...): (line 2657)
    # Processing the call arguments (line 2657)
    # Getting the type of 'results' (line 2657)
    results_92322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2657, 30), 'results', False)
    # Processing the call keyword arguments (line 2657)
    # Getting the type of 'names' (line 2657)
    names_92323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2657, 45), 'names', False)
    keyword_92324 = names_92323
    kwargs_92325 = {'names': keyword_92324}
    # Getting the type of 'np' (line 2657)
    np_92319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2657, 11), 'np', False)
    # Obtaining the member 'rec' of a type (line 2657)
    rec_92320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2657, 11), np_92319, 'rec')
    # Obtaining the member 'fromrecords' of a type (line 2657)
    fromrecords_92321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2657, 11), rec_92320, 'fromrecords')
    # Calling fromrecords(args, kwargs) (line 2657)
    fromrecords_call_result_92326 = invoke(stypy.reporting.localization.Localization(__file__, 2657, 11), fromrecords_92321, *[results_92322], **kwargs_92325)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2657)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2657, 4), 'stypy_return_type', fromrecords_call_result_92326)
    
    # ################# End of 'recs_join(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'recs_join' in the type store
    # Getting the type of 'stypy_return_type' (line 2602)
    stypy_return_type_92327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_92327)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'recs_join'
    return stypy_return_type_92327

# Assigning a type to the variable 'recs_join' (line 2602)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2602, 0), 'recs_join', recs_join)

@norecursion
def csv2rec(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    unicode_92328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2660, 28), 'unicode', u'#')
    int_92329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2660, 42), 'int')
    int_92330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2660, 55), 'int')
    unicode_92331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2660, 68), 'unicode', u',')
    # Getting the type of 'None' (line 2661)
    None_92332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 23), 'None')
    # Getting the type of 'None' (line 2661)
    None_92333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 35), 'None')
    unicode_92334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2661, 49), 'unicode', u'')
    # Getting the type of 'None' (line 2661)
    None_92335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 62), 'None')
    # Getting the type of 'False' (line 2662)
    False_92336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 25), 'False')
    # Getting the type of 'False' (line 2662)
    False_92337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 41), 'False')
    # Getting the type of 'False' (line 2662)
    False_92338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 58), 'False')
    defaults = [unicode_92328, int_92329, int_92330, unicode_92331, None_92332, None_92333, unicode_92334, None_92335, False_92336, False_92337, False_92338]
    # Create a new context for function 'csv2rec'
    module_type_store = module_type_store.open_function_context('csv2rec', 2660, 0, False)
    
    # Passed parameters checking function
    csv2rec.stypy_localization = localization
    csv2rec.stypy_type_of_self = None
    csv2rec.stypy_type_store = module_type_store
    csv2rec.stypy_function_name = 'csv2rec'
    csv2rec.stypy_param_names_list = ['fname', 'comments', 'skiprows', 'checkrows', 'delimiter', 'converterd', 'names', 'missing', 'missingd', 'use_mrecords', 'dayfirst', 'yearfirst']
    csv2rec.stypy_varargs_param_name = None
    csv2rec.stypy_kwargs_param_name = None
    csv2rec.stypy_call_defaults = defaults
    csv2rec.stypy_call_varargs = varargs
    csv2rec.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'csv2rec', ['fname', 'comments', 'skiprows', 'checkrows', 'delimiter', 'converterd', 'names', 'missing', 'missingd', 'use_mrecords', 'dayfirst', 'yearfirst'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'csv2rec', localization, ['fname', 'comments', 'skiprows', 'checkrows', 'delimiter', 'converterd', 'names', 'missing', 'missingd', 'use_mrecords', 'dayfirst', 'yearfirst'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'csv2rec(...)' code ##################

    unicode_92339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2713, (-1)), 'unicode', u"\n    Load data from comma/space/tab delimited file in *fname* into a\n    numpy record array and return the record array.\n\n    If *names* is *None*, a header row is required to automatically\n    assign the recarray names.  The headers will be lower cased,\n    spaces will be converted to underscores, and illegal attribute\n    name characters removed.  If *names* is not *None*, it is a\n    sequence of names to use for the column names.  In this case, it\n    is assumed there is no header row.\n\n\n    - *fname*: can be a filename or a file handle.  Support for gzipped\n      files is automatic, if the filename ends in '.gz'\n\n    - *comments*: the character used to indicate the start of a comment\n      in the file, or *None* to switch off the removal of comments\n\n    - *skiprows*: is the number of rows from the top to skip\n\n    - *checkrows*: is the number of rows to check to validate the column\n      data type.  When set to zero all rows are validated.\n\n    - *converterd*: if not *None*, is a dictionary mapping column number or\n      munged column name to a converter function.\n\n    - *names*: if not None, is a list of header names.  In this case, no\n      header will be read from the file\n\n    - *missingd* is a dictionary mapping munged column names to field values\n      which signify that the field does not contain actual data and should\n      be masked, e.g., '0000-00-00' or 'unused'\n\n    - *missing*: a string whose value signals a missing field regardless of\n      the column it appears in\n\n    - *use_mrecords*: if True, return an mrecords.fromrecords record array if\n      any of the data are missing\n\n    - *dayfirst*: default is False so that MM-DD-YY has precedence over\n      DD-MM-YY.  See\n      http://labix.org/python-dateutil#head-b95ce2094d189a89f80f5ae52a05b4ab7b41af47\n      for further information.\n\n    - *yearfirst*: default is False so that MM-DD-YY has precedence over\n      YY-MM-DD. See\n      http://labix.org/python-dateutil#head-b95ce2094d189a89f80f5ae52a05b4ab7b41af47\n      for further information.\n\n      If no rows are found, *None* is returned\n    ")
    
    # Type idiom detected: calculating its left and rigth part (line 2715)
    # Getting the type of 'converterd' (line 2715)
    converterd_92340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2715, 7), 'converterd')
    # Getting the type of 'None' (line 2715)
    None_92341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2715, 21), 'None')
    
    (may_be_92342, more_types_in_union_92343) = may_be_none(converterd_92340, None_92341)

    if may_be_92342:

        if more_types_in_union_92343:
            # Runtime conditional SSA (line 2715)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2716):
        
        # Assigning a Call to a Name (line 2716):
        
        # Assigning a Call to a Name (line 2716):
        
        # Call to dict(...): (line 2716)
        # Processing the call keyword arguments (line 2716)
        kwargs_92345 = {}
        # Getting the type of 'dict' (line 2716)
        dict_92344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2716, 21), 'dict', False)
        # Calling dict(args, kwargs) (line 2716)
        dict_call_result_92346 = invoke(stypy.reporting.localization.Localization(__file__, 2716, 21), dict_92344, *[], **kwargs_92345)
        
        # Assigning a type to the variable 'converterd' (line 2716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2716, 8), 'converterd', dict_call_result_92346)

        if more_types_in_union_92343:
            # SSA join for if statement (line 2715)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 2718)
    # Getting the type of 'missingd' (line 2718)
    missingd_92347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 7), 'missingd')
    # Getting the type of 'None' (line 2718)
    None_92348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 19), 'None')
    
    (may_be_92349, more_types_in_union_92350) = may_be_none(missingd_92347, None_92348)

    if may_be_92349:

        if more_types_in_union_92350:
            # Runtime conditional SSA (line 2718)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Dict to a Name (line 2719):
        
        # Assigning a Dict to a Name (line 2719):
        
        # Assigning a Dict to a Name (line 2719):
        
        # Obtaining an instance of the builtin type 'dict' (line 2719)
        dict_92351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2719, 19), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 2719)
        
        # Assigning a type to the variable 'missingd' (line 2719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2719, 8), 'missingd', dict_92351)

        if more_types_in_union_92350:
            # SSA join for if statement (line 2718)
            module_type_store = module_type_store.join_ssa_context()


    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2721, 4))
    
    # 'import dateutil.parser' statement (line 2721)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_92352 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2721, 4), 'dateutil.parser')

    if (type(import_92352) is not StypyTypeError):

        if (import_92352 != 'pyd_module'):
            __import__(import_92352)
            sys_modules_92353 = sys.modules[import_92352]
            import_module(stypy.reporting.localization.Localization(__file__, 2721, 4), 'dateutil.parser', sys_modules_92353.module_type_store, module_type_store)
        else:
            import dateutil.parser

            import_module(stypy.reporting.localization.Localization(__file__, 2721, 4), 'dateutil.parser', dateutil.parser, module_type_store)

    else:
        # Assigning a type to the variable 'dateutil.parser' (line 2721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2721, 4), 'dateutil.parser', import_92352)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2722, 4))
    
    # 'import datetime' statement (line 2722)
    import datetime

    import_module(stypy.reporting.localization.Localization(__file__, 2722, 4), 'datetime', datetime, module_type_store)
    
    
    # Assigning a Call to a Name (line 2724):
    
    # Assigning a Call to a Name (line 2724):
    
    # Assigning a Call to a Name (line 2724):
    
    # Call to to_filehandle(...): (line 2724)
    # Processing the call arguments (line 2724)
    # Getting the type of 'fname' (line 2724)
    fname_92356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2724, 29), 'fname', False)
    # Processing the call keyword arguments (line 2724)
    kwargs_92357 = {}
    # Getting the type of 'cbook' (line 2724)
    cbook_92354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2724, 9), 'cbook', False)
    # Obtaining the member 'to_filehandle' of a type (line 2724)
    to_filehandle_92355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2724, 9), cbook_92354, 'to_filehandle')
    # Calling to_filehandle(args, kwargs) (line 2724)
    to_filehandle_call_result_92358 = invoke(stypy.reporting.localization.Localization(__file__, 2724, 9), to_filehandle_92355, *[fname_92356], **kwargs_92357)
    
    # Assigning a type to the variable 'fh' (line 2724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2724, 4), 'fh', to_filehandle_call_result_92358)
    
    # Assigning a Call to a Name (line 2726):
    
    # Assigning a Call to a Name (line 2726):
    
    # Assigning a Call to a Name (line 2726):
    
    # Call to str(...): (line 2726)
    # Processing the call arguments (line 2726)
    # Getting the type of 'delimiter' (line 2726)
    delimiter_92360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2726, 20), 'delimiter', False)
    # Processing the call keyword arguments (line 2726)
    kwargs_92361 = {}
    # Getting the type of 'str' (line 2726)
    str_92359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2726, 16), 'str', False)
    # Calling str(args, kwargs) (line 2726)
    str_call_result_92362 = invoke(stypy.reporting.localization.Localization(__file__, 2726, 16), str_92359, *[delimiter_92360], **kwargs_92361)
    
    # Assigning a type to the variable 'delimiter' (line 2726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2726, 4), 'delimiter', str_call_result_92362)
    # Declaration of the 'FH' class

    class FH:
        unicode_92363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2735, (-1)), 'unicode', u'\n        For space-delimited files, we want different behavior than\n        comma or tab.  Generally, we want multiple spaces to be\n        treated as a single separator, whereas with comma and tab we\n        want multiple commas to return multiple (empty) fields.  The\n        join/strip trick below effects this.\n        ')

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 2736, 8, False)
            # Assigning a type to the variable 'self' (line 2737)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2737, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'FH.__init__', ['fh'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['fh'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            
            # Assigning a Name to a Attribute (line 2737):
            
            # Assigning a Name to a Attribute (line 2737):
            
            # Assigning a Name to a Attribute (line 2737):
            # Getting the type of 'fh' (line 2737)
            fh_92364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 22), 'fh')
            # Getting the type of 'self' (line 2737)
            self_92365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 12), 'self')
            # Setting the type of the member 'fh' of a type (line 2737)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2737, 12), self_92365, 'fh', fh_92364)
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def close(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'close'
            module_type_store = module_type_store.open_function_context('close', 2739, 8, False)
            # Assigning a type to the variable 'self' (line 2740)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2740, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            FH.close.__dict__.__setitem__('stypy_localization', localization)
            FH.close.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            FH.close.__dict__.__setitem__('stypy_type_store', module_type_store)
            FH.close.__dict__.__setitem__('stypy_function_name', 'FH.close')
            FH.close.__dict__.__setitem__('stypy_param_names_list', [])
            FH.close.__dict__.__setitem__('stypy_varargs_param_name', None)
            FH.close.__dict__.__setitem__('stypy_kwargs_param_name', None)
            FH.close.__dict__.__setitem__('stypy_call_defaults', defaults)
            FH.close.__dict__.__setitem__('stypy_call_varargs', varargs)
            FH.close.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            FH.close.__dict__.__setitem__('stypy_declared_arg_number', 1)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'FH.close', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'close', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'close(...)' code ##################

            
            # Call to close(...): (line 2740)
            # Processing the call keyword arguments (line 2740)
            kwargs_92369 = {}
            # Getting the type of 'self' (line 2740)
            self_92366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 12), 'self', False)
            # Obtaining the member 'fh' of a type (line 2740)
            fh_92367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2740, 12), self_92366, 'fh')
            # Obtaining the member 'close' of a type (line 2740)
            close_92368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2740, 12), fh_92367, 'close')
            # Calling close(args, kwargs) (line 2740)
            close_call_result_92370 = invoke(stypy.reporting.localization.Localization(__file__, 2740, 12), close_92368, *[], **kwargs_92369)
            
            
            # ################# End of 'close(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'close' in the type store
            # Getting the type of 'stypy_return_type' (line 2739)
            stypy_return_type_92371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2739, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_92371)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'close'
            return stypy_return_type_92371


        @norecursion
        def seek(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'seek'
            module_type_store = module_type_store.open_function_context('seek', 2742, 8, False)
            # Assigning a type to the variable 'self' (line 2743)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2743, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            FH.seek.__dict__.__setitem__('stypy_localization', localization)
            FH.seek.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            FH.seek.__dict__.__setitem__('stypy_type_store', module_type_store)
            FH.seek.__dict__.__setitem__('stypy_function_name', 'FH.seek')
            FH.seek.__dict__.__setitem__('stypy_param_names_list', ['arg'])
            FH.seek.__dict__.__setitem__('stypy_varargs_param_name', None)
            FH.seek.__dict__.__setitem__('stypy_kwargs_param_name', None)
            FH.seek.__dict__.__setitem__('stypy_call_defaults', defaults)
            FH.seek.__dict__.__setitem__('stypy_call_varargs', varargs)
            FH.seek.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            FH.seek.__dict__.__setitem__('stypy_declared_arg_number', 2)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'FH.seek', ['arg'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'seek', localization, ['arg'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'seek(...)' code ##################

            
            # Call to seek(...): (line 2743)
            # Processing the call arguments (line 2743)
            # Getting the type of 'arg' (line 2743)
            arg_92375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2743, 25), 'arg', False)
            # Processing the call keyword arguments (line 2743)
            kwargs_92376 = {}
            # Getting the type of 'self' (line 2743)
            self_92372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2743, 12), 'self', False)
            # Obtaining the member 'fh' of a type (line 2743)
            fh_92373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2743, 12), self_92372, 'fh')
            # Obtaining the member 'seek' of a type (line 2743)
            seek_92374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2743, 12), fh_92373, 'seek')
            # Calling seek(args, kwargs) (line 2743)
            seek_call_result_92377 = invoke(stypy.reporting.localization.Localization(__file__, 2743, 12), seek_92374, *[arg_92375], **kwargs_92376)
            
            
            # ################# End of 'seek(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'seek' in the type store
            # Getting the type of 'stypy_return_type' (line 2742)
            stypy_return_type_92378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_92378)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'seek'
            return stypy_return_type_92378


        @norecursion
        def fix(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'fix'
            module_type_store = module_type_store.open_function_context('fix', 2745, 8, False)
            # Assigning a type to the variable 'self' (line 2746)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2746, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            FH.fix.__dict__.__setitem__('stypy_localization', localization)
            FH.fix.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            FH.fix.__dict__.__setitem__('stypy_type_store', module_type_store)
            FH.fix.__dict__.__setitem__('stypy_function_name', 'FH.fix')
            FH.fix.__dict__.__setitem__('stypy_param_names_list', ['s'])
            FH.fix.__dict__.__setitem__('stypy_varargs_param_name', None)
            FH.fix.__dict__.__setitem__('stypy_kwargs_param_name', None)
            FH.fix.__dict__.__setitem__('stypy_call_defaults', defaults)
            FH.fix.__dict__.__setitem__('stypy_call_varargs', varargs)
            FH.fix.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            FH.fix.__dict__.__setitem__('stypy_declared_arg_number', 2)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'FH.fix', ['s'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'fix', localization, ['s'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'fix(...)' code ##################

            
            # Call to join(...): (line 2746)
            # Processing the call arguments (line 2746)
            
            # Call to split(...): (line 2746)
            # Processing the call keyword arguments (line 2746)
            kwargs_92383 = {}
            # Getting the type of 's' (line 2746)
            s_92381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 28), 's', False)
            # Obtaining the member 'split' of a type (line 2746)
            split_92382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2746, 28), s_92381, 'split')
            # Calling split(args, kwargs) (line 2746)
            split_call_result_92384 = invoke(stypy.reporting.localization.Localization(__file__, 2746, 28), split_92382, *[], **kwargs_92383)
            
            # Processing the call keyword arguments (line 2746)
            kwargs_92385 = {}
            unicode_92379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2746, 19), 'unicode', u' ')
            # Obtaining the member 'join' of a type (line 2746)
            join_92380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2746, 19), unicode_92379, 'join')
            # Calling join(args, kwargs) (line 2746)
            join_call_result_92386 = invoke(stypy.reporting.localization.Localization(__file__, 2746, 19), join_92380, *[split_call_result_92384], **kwargs_92385)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2746)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2746, 12), 'stypy_return_type', join_call_result_92386)
            
            # ################# End of 'fix(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'fix' in the type store
            # Getting the type of 'stypy_return_type' (line 2745)
            stypy_return_type_92387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2745, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_92387)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'fix'
            return stypy_return_type_92387


        @norecursion
        def __next__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__next__'
            module_type_store = module_type_store.open_function_context('__next__', 2748, 8, False)
            # Assigning a type to the variable 'self' (line 2749)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2749, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            FH.__next__.__dict__.__setitem__('stypy_localization', localization)
            FH.__next__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            FH.__next__.__dict__.__setitem__('stypy_type_store', module_type_store)
            FH.__next__.__dict__.__setitem__('stypy_function_name', 'FH.__next__')
            FH.__next__.__dict__.__setitem__('stypy_param_names_list', [])
            FH.__next__.__dict__.__setitem__('stypy_varargs_param_name', None)
            FH.__next__.__dict__.__setitem__('stypy_kwargs_param_name', None)
            FH.__next__.__dict__.__setitem__('stypy_call_defaults', defaults)
            FH.__next__.__dict__.__setitem__('stypy_call_varargs', varargs)
            FH.__next__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            FH.__next__.__dict__.__setitem__('stypy_declared_arg_number', 1)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'FH.__next__', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '__next__', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__next__(...)' code ##################

            
            # Call to fix(...): (line 2749)
            # Processing the call arguments (line 2749)
            
            # Call to next(...): (line 2749)
            # Processing the call arguments (line 2749)
            # Getting the type of 'self' (line 2749)
            self_92391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 33), 'self', False)
            # Obtaining the member 'fh' of a type (line 2749)
            fh_92392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2749, 33), self_92391, 'fh')
            # Processing the call keyword arguments (line 2749)
            kwargs_92393 = {}
            # Getting the type of 'next' (line 2749)
            next_92390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 28), 'next', False)
            # Calling next(args, kwargs) (line 2749)
            next_call_result_92394 = invoke(stypy.reporting.localization.Localization(__file__, 2749, 28), next_92390, *[fh_92392], **kwargs_92393)
            
            # Processing the call keyword arguments (line 2749)
            kwargs_92395 = {}
            # Getting the type of 'self' (line 2749)
            self_92388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 19), 'self', False)
            # Obtaining the member 'fix' of a type (line 2749)
            fix_92389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2749, 19), self_92388, 'fix')
            # Calling fix(args, kwargs) (line 2749)
            fix_call_result_92396 = invoke(stypy.reporting.localization.Localization(__file__, 2749, 19), fix_92389, *[next_call_result_92394], **kwargs_92395)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2749)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2749, 12), 'stypy_return_type', fix_call_result_92396)
            
            # ################# End of '__next__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '__next__' in the type store
            # Getting the type of 'stypy_return_type' (line 2748)
            stypy_return_type_92397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2748, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_92397)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '__next__'
            return stypy_return_type_92397


        @norecursion
        def __iter__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__iter__'
            module_type_store = module_type_store.open_function_context('__iter__', 2751, 8, False)
            # Assigning a type to the variable 'self' (line 2752)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2752, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            FH.__iter__.__dict__.__setitem__('stypy_localization', localization)
            FH.__iter__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            FH.__iter__.__dict__.__setitem__('stypy_type_store', module_type_store)
            FH.__iter__.__dict__.__setitem__('stypy_function_name', 'FH.__iter__')
            FH.__iter__.__dict__.__setitem__('stypy_param_names_list', [])
            FH.__iter__.__dict__.__setitem__('stypy_varargs_param_name', None)
            FH.__iter__.__dict__.__setitem__('stypy_kwargs_param_name', None)
            FH.__iter__.__dict__.__setitem__('stypy_call_defaults', defaults)
            FH.__iter__.__dict__.__setitem__('stypy_call_varargs', varargs)
            FH.__iter__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            FH.__iter__.__dict__.__setitem__('stypy_declared_arg_number', 1)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'FH.__iter__', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '__iter__', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__iter__(...)' code ##################

            
            # Getting the type of 'self' (line 2752)
            self_92398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 24), 'self')
            # Obtaining the member 'fh' of a type (line 2752)
            fh_92399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2752, 24), self_92398, 'fh')
            # Testing the type of a for loop iterable (line 2752)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2752, 12), fh_92399)
            # Getting the type of the for loop variable (line 2752)
            for_loop_var_92400 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2752, 12), fh_92399)
            # Assigning a type to the variable 'line' (line 2752)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2752, 12), 'line', for_loop_var_92400)
            # SSA begins for a for statement (line 2752)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            # Creating a generator
            
            # Call to fix(...): (line 2753)
            # Processing the call arguments (line 2753)
            # Getting the type of 'line' (line 2753)
            line_92403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 31), 'line', False)
            # Processing the call keyword arguments (line 2753)
            kwargs_92404 = {}
            # Getting the type of 'self' (line 2753)
            self_92401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 22), 'self', False)
            # Obtaining the member 'fix' of a type (line 2753)
            fix_92402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2753, 22), self_92401, 'fix')
            # Calling fix(args, kwargs) (line 2753)
            fix_call_result_92405 = invoke(stypy.reporting.localization.Localization(__file__, 2753, 22), fix_92402, *[line_92403], **kwargs_92404)
            
            GeneratorType_92406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2753, 16), 'GeneratorType')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2753, 16), GeneratorType_92406, fix_call_result_92405)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2753, 16), 'stypy_return_type', GeneratorType_92406)
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            
            # ################# End of '__iter__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '__iter__' in the type store
            # Getting the type of 'stypy_return_type' (line 2751)
            stypy_return_type_92407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2751, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_92407)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '__iter__'
            return stypy_return_type_92407

    
    # Assigning a type to the variable 'FH' (line 2728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2728, 4), 'FH', FH)
    
    
    # Getting the type of 'delimiter' (line 2755)
    delimiter_92408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 7), 'delimiter')
    unicode_92409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2755, 20), 'unicode', u' ')
    # Applying the binary operator '==' (line 2755)
    result_eq_92410 = python_operator(stypy.reporting.localization.Localization(__file__, 2755, 7), '==', delimiter_92408, unicode_92409)
    
    # Testing the type of an if condition (line 2755)
    if_condition_92411 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2755, 4), result_eq_92410)
    # Assigning a type to the variable 'if_condition_92411' (line 2755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2755, 4), 'if_condition_92411', if_condition_92411)
    # SSA begins for if statement (line 2755)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2756):
    
    # Assigning a Call to a Name (line 2756):
    
    # Assigning a Call to a Name (line 2756):
    
    # Call to FH(...): (line 2756)
    # Processing the call arguments (line 2756)
    # Getting the type of 'fh' (line 2756)
    fh_92413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2756, 16), 'fh', False)
    # Processing the call keyword arguments (line 2756)
    kwargs_92414 = {}
    # Getting the type of 'FH' (line 2756)
    FH_92412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2756, 13), 'FH', False)
    # Calling FH(args, kwargs) (line 2756)
    FH_call_result_92415 = invoke(stypy.reporting.localization.Localization(__file__, 2756, 13), FH_92412, *[fh_92413], **kwargs_92414)
    
    # Assigning a type to the variable 'fh' (line 2756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2756, 8), 'fh', FH_call_result_92415)
    # SSA join for if statement (line 2755)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2758):
    
    # Assigning a Call to a Name (line 2758):
    
    # Assigning a Call to a Name (line 2758):
    
    # Call to reader(...): (line 2758)
    # Processing the call arguments (line 2758)
    # Getting the type of 'fh' (line 2758)
    fh_92418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2758, 24), 'fh', False)
    # Processing the call keyword arguments (line 2758)
    # Getting the type of 'delimiter' (line 2758)
    delimiter_92419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2758, 38), 'delimiter', False)
    keyword_92420 = delimiter_92419
    kwargs_92421 = {'delimiter': keyword_92420}
    # Getting the type of 'csv' (line 2758)
    csv_92416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2758, 13), 'csv', False)
    # Obtaining the member 'reader' of a type (line 2758)
    reader_92417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2758, 13), csv_92416, 'reader')
    # Calling reader(args, kwargs) (line 2758)
    reader_call_result_92422 = invoke(stypy.reporting.localization.Localization(__file__, 2758, 13), reader_92417, *[fh_92418], **kwargs_92421)
    
    # Assigning a type to the variable 'reader' (line 2758)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2758, 4), 'reader', reader_call_result_92422)

    @norecursion
    def process_skiprows(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'process_skiprows'
        module_type_store = module_type_store.open_function_context('process_skiprows', 2760, 4, False)
        
        # Passed parameters checking function
        process_skiprows.stypy_localization = localization
        process_skiprows.stypy_type_of_self = None
        process_skiprows.stypy_type_store = module_type_store
        process_skiprows.stypy_function_name = 'process_skiprows'
        process_skiprows.stypy_param_names_list = ['reader']
        process_skiprows.stypy_varargs_param_name = None
        process_skiprows.stypy_kwargs_param_name = None
        process_skiprows.stypy_call_defaults = defaults
        process_skiprows.stypy_call_varargs = varargs
        process_skiprows.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'process_skiprows', ['reader'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'process_skiprows', localization, ['reader'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'process_skiprows(...)' code ##################

        
        # Getting the type of 'skiprows' (line 2761)
        skiprows_92423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2761, 11), 'skiprows')
        # Testing the type of an if condition (line 2761)
        if_condition_92424 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2761, 8), skiprows_92423)
        # Assigning a type to the variable 'if_condition_92424' (line 2761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2761, 8), 'if_condition_92424', if_condition_92424)
        # SSA begins for if statement (line 2761)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to enumerate(...): (line 2762)
        # Processing the call arguments (line 2762)
        # Getting the type of 'reader' (line 2762)
        reader_92426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2762, 36), 'reader', False)
        # Processing the call keyword arguments (line 2762)
        kwargs_92427 = {}
        # Getting the type of 'enumerate' (line 2762)
        enumerate_92425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2762, 26), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 2762)
        enumerate_call_result_92428 = invoke(stypy.reporting.localization.Localization(__file__, 2762, 26), enumerate_92425, *[reader_92426], **kwargs_92427)
        
        # Testing the type of a for loop iterable (line 2762)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2762, 12), enumerate_call_result_92428)
        # Getting the type of the for loop variable (line 2762)
        for_loop_var_92429 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2762, 12), enumerate_call_result_92428)
        # Assigning a type to the variable 'i' (line 2762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2762, 12), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2762, 12), for_loop_var_92429))
        # Assigning a type to the variable 'row' (line 2762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2762, 12), 'row', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2762, 12), for_loop_var_92429))
        # SSA begins for a for statement (line 2762)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'i' (line 2763)
        i_92430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2763, 19), 'i')
        # Getting the type of 'skiprows' (line 2763)
        skiprows_92431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2763, 25), 'skiprows')
        int_92432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2763, 34), 'int')
        # Applying the binary operator '-' (line 2763)
        result_sub_92433 = python_operator(stypy.reporting.localization.Localization(__file__, 2763, 25), '-', skiprows_92431, int_92432)
        
        # Applying the binary operator '>=' (line 2763)
        result_ge_92434 = python_operator(stypy.reporting.localization.Localization(__file__, 2763, 19), '>=', i_92430, result_sub_92433)
        
        # Testing the type of an if condition (line 2763)
        if_condition_92435 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2763, 16), result_ge_92434)
        # Assigning a type to the variable 'if_condition_92435' (line 2763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2763, 16), 'if_condition_92435', if_condition_92435)
        # SSA begins for if statement (line 2763)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 2763)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2761)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 2766)
        tuple_92436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2766, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2766)
        # Adding element type (line 2766)
        # Getting the type of 'fh' (line 2766)
        fh_92437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2766, 15), 'fh')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2766, 15), tuple_92436, fh_92437)
        # Adding element type (line 2766)
        # Getting the type of 'reader' (line 2766)
        reader_92438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2766, 19), 'reader')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2766, 15), tuple_92436, reader_92438)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2766, 8), 'stypy_return_type', tuple_92436)
        
        # ################# End of 'process_skiprows(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'process_skiprows' in the type store
        # Getting the type of 'stypy_return_type' (line 2760)
        stypy_return_type_92439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2760, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_92439)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'process_skiprows'
        return stypy_return_type_92439

    # Assigning a type to the variable 'process_skiprows' (line 2760)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2760, 4), 'process_skiprows', process_skiprows)
    
    # Call to process_skiprows(...): (line 2768)
    # Processing the call arguments (line 2768)
    # Getting the type of 'reader' (line 2768)
    reader_92441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2768, 21), 'reader', False)
    # Processing the call keyword arguments (line 2768)
    kwargs_92442 = {}
    # Getting the type of 'process_skiprows' (line 2768)
    process_skiprows_92440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2768, 4), 'process_skiprows', False)
    # Calling process_skiprows(args, kwargs) (line 2768)
    process_skiprows_call_result_92443 = invoke(stypy.reporting.localization.Localization(__file__, 2768, 4), process_skiprows_92440, *[reader_92441], **kwargs_92442)
    

    @norecursion
    def ismissing(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'ismissing'
        module_type_store = module_type_store.open_function_context('ismissing', 2770, 4, False)
        
        # Passed parameters checking function
        ismissing.stypy_localization = localization
        ismissing.stypy_type_of_self = None
        ismissing.stypy_type_store = module_type_store
        ismissing.stypy_function_name = 'ismissing'
        ismissing.stypy_param_names_list = ['name', 'val']
        ismissing.stypy_varargs_param_name = None
        ismissing.stypy_kwargs_param_name = None
        ismissing.stypy_call_defaults = defaults
        ismissing.stypy_call_varargs = varargs
        ismissing.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'ismissing', ['name', 'val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ismissing', localization, ['name', 'val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ismissing(...)' code ##################

        unicode_92444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2771, 8), 'unicode', u'Should the value val in column name be masked?')
        
        # Evaluating a boolean operation
        
        # Getting the type of 'val' (line 2772)
        val_92445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 15), 'val')
        # Getting the type of 'missing' (line 2772)
        missing_92446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 22), 'missing')
        # Applying the binary operator '==' (line 2772)
        result_eq_92447 = python_operator(stypy.reporting.localization.Localization(__file__, 2772, 15), '==', val_92445, missing_92446)
        
        
        # Getting the type of 'val' (line 2772)
        val_92448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 33), 'val')
        
        # Call to get(...): (line 2772)
        # Processing the call arguments (line 2772)
        # Getting the type of 'name' (line 2772)
        name_92451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 53), 'name', False)
        # Processing the call keyword arguments (line 2772)
        kwargs_92452 = {}
        # Getting the type of 'missingd' (line 2772)
        missingd_92449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 40), 'missingd', False)
        # Obtaining the member 'get' of a type (line 2772)
        get_92450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2772, 40), missingd_92449, 'get')
        # Calling get(args, kwargs) (line 2772)
        get_call_result_92453 = invoke(stypy.reporting.localization.Localization(__file__, 2772, 40), get_92450, *[name_92451], **kwargs_92452)
        
        # Applying the binary operator '==' (line 2772)
        result_eq_92454 = python_operator(stypy.reporting.localization.Localization(__file__, 2772, 33), '==', val_92448, get_call_result_92453)
        
        # Applying the binary operator 'or' (line 2772)
        result_or_keyword_92455 = python_operator(stypy.reporting.localization.Localization(__file__, 2772, 15), 'or', result_eq_92447, result_eq_92454)
        
        # Getting the type of 'val' (line 2772)
        val_92456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 62), 'val')
        unicode_92457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2772, 69), 'unicode', u'')
        # Applying the binary operator '==' (line 2772)
        result_eq_92458 = python_operator(stypy.reporting.localization.Localization(__file__, 2772, 62), '==', val_92456, unicode_92457)
        
        # Applying the binary operator 'or' (line 2772)
        result_or_keyword_92459 = python_operator(stypy.reporting.localization.Localization(__file__, 2772, 15), 'or', result_or_keyword_92455, result_eq_92458)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2772, 8), 'stypy_return_type', result_or_keyword_92459)
        
        # ################# End of 'ismissing(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ismissing' in the type store
        # Getting the type of 'stypy_return_type' (line 2770)
        stypy_return_type_92460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_92460)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ismissing'
        return stypy_return_type_92460

    # Assigning a type to the variable 'ismissing' (line 2770)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2770, 4), 'ismissing', ismissing)

    @norecursion
    def with_default_value(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'with_default_value'
        module_type_store = module_type_store.open_function_context('with_default_value', 2774, 4, False)
        
        # Passed parameters checking function
        with_default_value.stypy_localization = localization
        with_default_value.stypy_type_of_self = None
        with_default_value.stypy_type_store = module_type_store
        with_default_value.stypy_function_name = 'with_default_value'
        with_default_value.stypy_param_names_list = ['func', 'default']
        with_default_value.stypy_varargs_param_name = None
        with_default_value.stypy_kwargs_param_name = None
        with_default_value.stypy_call_defaults = defaults
        with_default_value.stypy_call_varargs = varargs
        with_default_value.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'with_default_value', ['func', 'default'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'with_default_value', localization, ['func', 'default'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'with_default_value(...)' code ##################


        @norecursion
        def newfunc(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'newfunc'
            module_type_store = module_type_store.open_function_context('newfunc', 2775, 8, False)
            
            # Passed parameters checking function
            newfunc.stypy_localization = localization
            newfunc.stypy_type_of_self = None
            newfunc.stypy_type_store = module_type_store
            newfunc.stypy_function_name = 'newfunc'
            newfunc.stypy_param_names_list = ['name', 'val']
            newfunc.stypy_varargs_param_name = None
            newfunc.stypy_kwargs_param_name = None
            newfunc.stypy_call_defaults = defaults
            newfunc.stypy_call_varargs = varargs
            newfunc.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'newfunc', ['name', 'val'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'newfunc', localization, ['name', 'val'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'newfunc(...)' code ##################

            
            
            # Call to ismissing(...): (line 2776)
            # Processing the call arguments (line 2776)
            # Getting the type of 'name' (line 2776)
            name_92462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 25), 'name', False)
            # Getting the type of 'val' (line 2776)
            val_92463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 31), 'val', False)
            # Processing the call keyword arguments (line 2776)
            kwargs_92464 = {}
            # Getting the type of 'ismissing' (line 2776)
            ismissing_92461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 15), 'ismissing', False)
            # Calling ismissing(args, kwargs) (line 2776)
            ismissing_call_result_92465 = invoke(stypy.reporting.localization.Localization(__file__, 2776, 15), ismissing_92461, *[name_92462, val_92463], **kwargs_92464)
            
            # Testing the type of an if condition (line 2776)
            if_condition_92466 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2776, 12), ismissing_call_result_92465)
            # Assigning a type to the variable 'if_condition_92466' (line 2776)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2776, 12), 'if_condition_92466', if_condition_92466)
            # SSA begins for if statement (line 2776)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # Getting the type of 'default' (line 2777)
            default_92467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2777, 23), 'default')
            # Assigning a type to the variable 'stypy_return_type' (line 2777)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2777, 16), 'stypy_return_type', default_92467)
            # SSA branch for the else part of an if statement (line 2776)
            module_type_store.open_ssa_branch('else')
            
            # Call to func(...): (line 2779)
            # Processing the call arguments (line 2779)
            # Getting the type of 'val' (line 2779)
            val_92469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2779, 28), 'val', False)
            # Processing the call keyword arguments (line 2779)
            kwargs_92470 = {}
            # Getting the type of 'func' (line 2779)
            func_92468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2779, 23), 'func', False)
            # Calling func(args, kwargs) (line 2779)
            func_call_result_92471 = invoke(stypy.reporting.localization.Localization(__file__, 2779, 23), func_92468, *[val_92469], **kwargs_92470)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2779)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2779, 16), 'stypy_return_type', func_call_result_92471)
            # SSA join for if statement (line 2776)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # ################# End of 'newfunc(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'newfunc' in the type store
            # Getting the type of 'stypy_return_type' (line 2775)
            stypy_return_type_92472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_92472)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'newfunc'
            return stypy_return_type_92472

        # Assigning a type to the variable 'newfunc' (line 2775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2775, 8), 'newfunc', newfunc)
        # Getting the type of 'newfunc' (line 2780)
        newfunc_92473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 15), 'newfunc')
        # Assigning a type to the variable 'stypy_return_type' (line 2780)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2780, 8), 'stypy_return_type', newfunc_92473)
        
        # ################# End of 'with_default_value(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'with_default_value' in the type store
        # Getting the type of 'stypy_return_type' (line 2774)
        stypy_return_type_92474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2774, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_92474)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'with_default_value'
        return stypy_return_type_92474

    # Assigning a type to the variable 'with_default_value' (line 2774)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2774, 4), 'with_default_value', with_default_value)

    @norecursion
    def mybool(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mybool'
        module_type_store = module_type_store.open_function_context('mybool', 2782, 4, False)
        
        # Passed parameters checking function
        mybool.stypy_localization = localization
        mybool.stypy_type_of_self = None
        mybool.stypy_type_store = module_type_store
        mybool.stypy_function_name = 'mybool'
        mybool.stypy_param_names_list = ['x']
        mybool.stypy_varargs_param_name = None
        mybool.stypy_kwargs_param_name = None
        mybool.stypy_call_defaults = defaults
        mybool.stypy_call_varargs = varargs
        mybool.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'mybool', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mybool', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mybool(...)' code ##################

        
        
        # Getting the type of 'x' (line 2783)
        x_92475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2783, 11), 'x')
        unicode_92476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2783, 16), 'unicode', u'True')
        # Applying the binary operator '==' (line 2783)
        result_eq_92477 = python_operator(stypy.reporting.localization.Localization(__file__, 2783, 11), '==', x_92475, unicode_92476)
        
        # Testing the type of an if condition (line 2783)
        if_condition_92478 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2783, 8), result_eq_92477)
        # Assigning a type to the variable 'if_condition_92478' (line 2783)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2783, 8), 'if_condition_92478', if_condition_92478)
        # SSA begins for if statement (line 2783)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'True' (line 2784)
        True_92479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 19), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 2784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2784, 12), 'stypy_return_type', True_92479)
        # SSA branch for the else part of an if statement (line 2783)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'x' (line 2785)
        x_92480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2785, 13), 'x')
        unicode_92481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2785, 18), 'unicode', u'False')
        # Applying the binary operator '==' (line 2785)
        result_eq_92482 = python_operator(stypy.reporting.localization.Localization(__file__, 2785, 13), '==', x_92480, unicode_92481)
        
        # Testing the type of an if condition (line 2785)
        if_condition_92483 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2785, 13), result_eq_92482)
        # Assigning a type to the variable 'if_condition_92483' (line 2785)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2785, 13), 'if_condition_92483', if_condition_92483)
        # SSA begins for if statement (line 2785)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'False' (line 2786)
        False_92484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 19), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 2786)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2786, 12), 'stypy_return_type', False_92484)
        # SSA branch for the else part of an if statement (line 2785)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 2788)
        # Processing the call arguments (line 2788)
        unicode_92486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2788, 29), 'unicode', u'invalid bool')
        # Processing the call keyword arguments (line 2788)
        kwargs_92487 = {}
        # Getting the type of 'ValueError' (line 2788)
        ValueError_92485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2788, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2788)
        ValueError_call_result_92488 = invoke(stypy.reporting.localization.Localization(__file__, 2788, 18), ValueError_92485, *[unicode_92486], **kwargs_92487)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2788, 12), ValueError_call_result_92488, 'raise parameter', BaseException)
        # SSA join for if statement (line 2785)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2783)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'mybool(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mybool' in the type store
        # Getting the type of 'stypy_return_type' (line 2782)
        stypy_return_type_92489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2782, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_92489)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mybool'
        return stypy_return_type_92489

    # Assigning a type to the variable 'mybool' (line 2782)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2782, 4), 'mybool', mybool)
    
    # Assigning a Attribute to a Name (line 2790):
    
    # Assigning a Attribute to a Name (line 2790):
    
    # Assigning a Attribute to a Name (line 2790):
    # Getting the type of 'dateutil' (line 2790)
    dateutil_92490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2790, 17), 'dateutil')
    # Obtaining the member 'parser' of a type (line 2790)
    parser_92491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2790, 17), dateutil_92490, 'parser')
    # Obtaining the member 'parse' of a type (line 2790)
    parse_92492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2790, 17), parser_92491, 'parse')
    # Assigning a type to the variable 'dateparser' (line 2790)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2790, 4), 'dateparser', parse_92492)

    @norecursion
    def mydateparser(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mydateparser'
        module_type_store = module_type_store.open_function_context('mydateparser', 2792, 4, False)
        
        # Passed parameters checking function
        mydateparser.stypy_localization = localization
        mydateparser.stypy_type_of_self = None
        mydateparser.stypy_type_store = module_type_store
        mydateparser.stypy_function_name = 'mydateparser'
        mydateparser.stypy_param_names_list = ['x']
        mydateparser.stypy_varargs_param_name = None
        mydateparser.stypy_kwargs_param_name = None
        mydateparser.stypy_call_defaults = defaults
        mydateparser.stypy_call_varargs = varargs
        mydateparser.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'mydateparser', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mydateparser', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mydateparser(...)' code ##################

        
        # Assigning a Call to a Name (line 2794):
        
        # Assigning a Call to a Name (line 2794):
        
        # Assigning a Call to a Name (line 2794):
        
        # Call to dateparser(...): (line 2794)
        # Processing the call arguments (line 2794)
        # Getting the type of 'x' (line 2794)
        x_92494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2794, 23), 'x', False)
        # Processing the call keyword arguments (line 2794)
        # Getting the type of 'dayfirst' (line 2794)
        dayfirst_92495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2794, 35), 'dayfirst', False)
        keyword_92496 = dayfirst_92495
        # Getting the type of 'yearfirst' (line 2794)
        yearfirst_92497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2794, 55), 'yearfirst', False)
        keyword_92498 = yearfirst_92497
        kwargs_92499 = {'dayfirst': keyword_92496, 'yearfirst': keyword_92498}
        # Getting the type of 'dateparser' (line 2794)
        dateparser_92493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2794, 12), 'dateparser', False)
        # Calling dateparser(args, kwargs) (line 2794)
        dateparser_call_result_92500 = invoke(stypy.reporting.localization.Localization(__file__, 2794, 12), dateparser_92493, *[x_92494], **kwargs_92499)
        
        # Assigning a type to the variable 'd' (line 2794)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2794, 8), 'd', dateparser_call_result_92500)
        # Getting the type of 'd' (line 2795)
        d_92501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2795, 15), 'd')
        # Assigning a type to the variable 'stypy_return_type' (line 2795)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2795, 8), 'stypy_return_type', d_92501)
        
        # ################# End of 'mydateparser(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mydateparser' in the type store
        # Getting the type of 'stypy_return_type' (line 2792)
        stypy_return_type_92502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2792, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_92502)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mydateparser'
        return stypy_return_type_92502

    # Assigning a type to the variable 'mydateparser' (line 2792)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2792, 4), 'mydateparser', mydateparser)
    
    # Assigning a Call to a Name (line 2797):
    
    # Assigning a Call to a Name (line 2797):
    
    # Assigning a Call to a Name (line 2797):
    
    # Call to with_default_value(...): (line 2797)
    # Processing the call arguments (line 2797)
    # Getting the type of 'mydateparser' (line 2797)
    mydateparser_92504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 38), 'mydateparser', False)
    
    # Call to datetime(...): (line 2797)
    # Processing the call arguments (line 2797)
    int_92507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2797, 70), 'int')
    int_92508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2797, 73), 'int')
    int_92509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2797, 76), 'int')
    # Processing the call keyword arguments (line 2797)
    kwargs_92510 = {}
    # Getting the type of 'datetime' (line 2797)
    datetime_92505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 52), 'datetime', False)
    # Obtaining the member 'datetime' of a type (line 2797)
    datetime_92506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2797, 52), datetime_92505, 'datetime')
    # Calling datetime(args, kwargs) (line 2797)
    datetime_call_result_92511 = invoke(stypy.reporting.localization.Localization(__file__, 2797, 52), datetime_92506, *[int_92507, int_92508, int_92509], **kwargs_92510)
    
    # Processing the call keyword arguments (line 2797)
    kwargs_92512 = {}
    # Getting the type of 'with_default_value' (line 2797)
    with_default_value_92503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 19), 'with_default_value', False)
    # Calling with_default_value(args, kwargs) (line 2797)
    with_default_value_call_result_92513 = invoke(stypy.reporting.localization.Localization(__file__, 2797, 19), with_default_value_92503, *[mydateparser_92504, datetime_call_result_92511], **kwargs_92512)
    
    # Assigning a type to the variable 'mydateparser' (line 2797)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2797, 4), 'mydateparser', with_default_value_call_result_92513)
    
    # Assigning a Call to a Name (line 2799):
    
    # Assigning a Call to a Name (line 2799):
    
    # Assigning a Call to a Name (line 2799):
    
    # Call to with_default_value(...): (line 2799)
    # Processing the call arguments (line 2799)
    # Getting the type of 'float' (line 2799)
    float_92515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2799, 33), 'float', False)
    # Getting the type of 'np' (line 2799)
    np_92516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2799, 40), 'np', False)
    # Obtaining the member 'nan' of a type (line 2799)
    nan_92517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2799, 40), np_92516, 'nan')
    # Processing the call keyword arguments (line 2799)
    kwargs_92518 = {}
    # Getting the type of 'with_default_value' (line 2799)
    with_default_value_92514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2799, 14), 'with_default_value', False)
    # Calling with_default_value(args, kwargs) (line 2799)
    with_default_value_call_result_92519 = invoke(stypy.reporting.localization.Localization(__file__, 2799, 14), with_default_value_92514, *[float_92515, nan_92517], **kwargs_92518)
    
    # Assigning a type to the variable 'myfloat' (line 2799)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2799, 4), 'myfloat', with_default_value_call_result_92519)
    
    # Assigning a Call to a Name (line 2800):
    
    # Assigning a Call to a Name (line 2800):
    
    # Assigning a Call to a Name (line 2800):
    
    # Call to with_default_value(...): (line 2800)
    # Processing the call arguments (line 2800)
    # Getting the type of 'int' (line 2800)
    int_92521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2800, 31), 'int', False)
    int_92522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2800, 36), 'int')
    # Processing the call keyword arguments (line 2800)
    kwargs_92523 = {}
    # Getting the type of 'with_default_value' (line 2800)
    with_default_value_92520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2800, 12), 'with_default_value', False)
    # Calling with_default_value(args, kwargs) (line 2800)
    with_default_value_call_result_92524 = invoke(stypy.reporting.localization.Localization(__file__, 2800, 12), with_default_value_92520, *[int_92521, int_92522], **kwargs_92523)
    
    # Assigning a type to the variable 'myint' (line 2800)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2800, 4), 'myint', with_default_value_call_result_92524)
    
    # Assigning a Call to a Name (line 2801):
    
    # Assigning a Call to a Name (line 2801):
    
    # Assigning a Call to a Name (line 2801):
    
    # Call to with_default_value(...): (line 2801)
    # Processing the call arguments (line 2801)
    # Getting the type of 'str' (line 2801)
    str_92526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2801, 31), 'str', False)
    unicode_92527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2801, 36), 'unicode', u'')
    # Processing the call keyword arguments (line 2801)
    kwargs_92528 = {}
    # Getting the type of 'with_default_value' (line 2801)
    with_default_value_92525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2801, 12), 'with_default_value', False)
    # Calling with_default_value(args, kwargs) (line 2801)
    with_default_value_call_result_92529 = invoke(stypy.reporting.localization.Localization(__file__, 2801, 12), with_default_value_92525, *[str_92526, unicode_92527], **kwargs_92528)
    
    # Assigning a type to the variable 'mystr' (line 2801)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2801, 4), 'mystr', with_default_value_call_result_92529)
    
    # Assigning a Call to a Name (line 2802):
    
    # Assigning a Call to a Name (line 2802):
    
    # Assigning a Call to a Name (line 2802):
    
    # Call to with_default_value(...): (line 2802)
    # Processing the call arguments (line 2802)
    # Getting the type of 'mybool' (line 2802)
    mybool_92531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2802, 32), 'mybool', False)
    # Getting the type of 'None' (line 2802)
    None_92532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2802, 40), 'None', False)
    # Processing the call keyword arguments (line 2802)
    kwargs_92533 = {}
    # Getting the type of 'with_default_value' (line 2802)
    with_default_value_92530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2802, 13), 'with_default_value', False)
    # Calling with_default_value(args, kwargs) (line 2802)
    with_default_value_call_result_92534 = invoke(stypy.reporting.localization.Localization(__file__, 2802, 13), with_default_value_92530, *[mybool_92531, None_92532], **kwargs_92533)
    
    # Assigning a type to the variable 'mybool' (line 2802)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2802, 4), 'mybool', with_default_value_call_result_92534)

    @norecursion
    def mydate(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mydate'
        module_type_store = module_type_store.open_function_context('mydate', 2804, 4, False)
        
        # Passed parameters checking function
        mydate.stypy_localization = localization
        mydate.stypy_type_of_self = None
        mydate.stypy_type_store = module_type_store
        mydate.stypy_function_name = 'mydate'
        mydate.stypy_param_names_list = ['x']
        mydate.stypy_varargs_param_name = None
        mydate.stypy_kwargs_param_name = None
        mydate.stypy_call_defaults = defaults
        mydate.stypy_call_varargs = varargs
        mydate.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'mydate', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mydate', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mydate(...)' code ##################

        
        # Assigning a Call to a Name (line 2806):
        
        # Assigning a Call to a Name (line 2806):
        
        # Assigning a Call to a Name (line 2806):
        
        # Call to dateparser(...): (line 2806)
        # Processing the call arguments (line 2806)
        # Getting the type of 'x' (line 2806)
        x_92536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2806, 23), 'x', False)
        # Processing the call keyword arguments (line 2806)
        # Getting the type of 'dayfirst' (line 2806)
        dayfirst_92537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2806, 35), 'dayfirst', False)
        keyword_92538 = dayfirst_92537
        # Getting the type of 'yearfirst' (line 2806)
        yearfirst_92539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2806, 55), 'yearfirst', False)
        keyword_92540 = yearfirst_92539
        kwargs_92541 = {'dayfirst': keyword_92538, 'yearfirst': keyword_92540}
        # Getting the type of 'dateparser' (line 2806)
        dateparser_92535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2806, 12), 'dateparser', False)
        # Calling dateparser(args, kwargs) (line 2806)
        dateparser_call_result_92542 = invoke(stypy.reporting.localization.Localization(__file__, 2806, 12), dateparser_92535, *[x_92536], **kwargs_92541)
        
        # Assigning a type to the variable 'd' (line 2806)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2806, 8), 'd', dateparser_call_result_92542)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'd' (line 2808)
        d_92543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 11), 'd')
        # Obtaining the member 'hour' of a type (line 2808)
        hour_92544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2808, 11), d_92543, 'hour')
        int_92545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2808, 20), 'int')
        # Applying the binary operator '>' (line 2808)
        result_gt_92546 = python_operator(stypy.reporting.localization.Localization(__file__, 2808, 11), '>', hour_92544, int_92545)
        
        
        # Getting the type of 'd' (line 2808)
        d_92547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 25), 'd')
        # Obtaining the member 'minute' of a type (line 2808)
        minute_92548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2808, 25), d_92547, 'minute')
        int_92549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2808, 36), 'int')
        # Applying the binary operator '>' (line 2808)
        result_gt_92550 = python_operator(stypy.reporting.localization.Localization(__file__, 2808, 25), '>', minute_92548, int_92549)
        
        # Applying the binary operator 'or' (line 2808)
        result_or_keyword_92551 = python_operator(stypy.reporting.localization.Localization(__file__, 2808, 11), 'or', result_gt_92546, result_gt_92550)
        
        # Getting the type of 'd' (line 2808)
        d_92552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 41), 'd')
        # Obtaining the member 'second' of a type (line 2808)
        second_92553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2808, 41), d_92552, 'second')
        int_92554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2808, 52), 'int')
        # Applying the binary operator '>' (line 2808)
        result_gt_92555 = python_operator(stypy.reporting.localization.Localization(__file__, 2808, 41), '>', second_92553, int_92554)
        
        # Applying the binary operator 'or' (line 2808)
        result_or_keyword_92556 = python_operator(stypy.reporting.localization.Localization(__file__, 2808, 11), 'or', result_or_keyword_92551, result_gt_92555)
        
        # Testing the type of an if condition (line 2808)
        if_condition_92557 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2808, 8), result_or_keyword_92556)
        # Assigning a type to the variable 'if_condition_92557' (line 2808)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2808, 8), 'if_condition_92557', if_condition_92557)
        # SSA begins for if statement (line 2808)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2809)
        # Processing the call arguments (line 2809)
        unicode_92559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2809, 29), 'unicode', u'not a date')
        # Processing the call keyword arguments (line 2809)
        kwargs_92560 = {}
        # Getting the type of 'ValueError' (line 2809)
        ValueError_92558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2809, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2809)
        ValueError_call_result_92561 = invoke(stypy.reporting.localization.Localization(__file__, 2809, 18), ValueError_92558, *[unicode_92559], **kwargs_92560)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2809, 12), ValueError_call_result_92561, 'raise parameter', BaseException)
        # SSA join for if statement (line 2808)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to date(...): (line 2810)
        # Processing the call keyword arguments (line 2810)
        kwargs_92564 = {}
        # Getting the type of 'd' (line 2810)
        d_92562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2810, 15), 'd', False)
        # Obtaining the member 'date' of a type (line 2810)
        date_92563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2810, 15), d_92562, 'date')
        # Calling date(args, kwargs) (line 2810)
        date_call_result_92565 = invoke(stypy.reporting.localization.Localization(__file__, 2810, 15), date_92563, *[], **kwargs_92564)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2810)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2810, 8), 'stypy_return_type', date_call_result_92565)
        
        # ################# End of 'mydate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mydate' in the type store
        # Getting the type of 'stypy_return_type' (line 2804)
        stypy_return_type_92566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2804, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_92566)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mydate'
        return stypy_return_type_92566

    # Assigning a type to the variable 'mydate' (line 2804)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2804, 4), 'mydate', mydate)
    
    # Assigning a Call to a Name (line 2811):
    
    # Assigning a Call to a Name (line 2811):
    
    # Assigning a Call to a Name (line 2811):
    
    # Call to with_default_value(...): (line 2811)
    # Processing the call arguments (line 2811)
    # Getting the type of 'mydate' (line 2811)
    mydate_92568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2811, 32), 'mydate', False)
    
    # Call to date(...): (line 2811)
    # Processing the call arguments (line 2811)
    int_92571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2811, 54), 'int')
    int_92572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2811, 57), 'int')
    int_92573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2811, 60), 'int')
    # Processing the call keyword arguments (line 2811)
    kwargs_92574 = {}
    # Getting the type of 'datetime' (line 2811)
    datetime_92569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2811, 40), 'datetime', False)
    # Obtaining the member 'date' of a type (line 2811)
    date_92570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2811, 40), datetime_92569, 'date')
    # Calling date(args, kwargs) (line 2811)
    date_call_result_92575 = invoke(stypy.reporting.localization.Localization(__file__, 2811, 40), date_92570, *[int_92571, int_92572, int_92573], **kwargs_92574)
    
    # Processing the call keyword arguments (line 2811)
    kwargs_92576 = {}
    # Getting the type of 'with_default_value' (line 2811)
    with_default_value_92567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2811, 13), 'with_default_value', False)
    # Calling with_default_value(args, kwargs) (line 2811)
    with_default_value_call_result_92577 = invoke(stypy.reporting.localization.Localization(__file__, 2811, 13), with_default_value_92567, *[mydate_92568, date_call_result_92575], **kwargs_92576)
    
    # Assigning a type to the variable 'mydate' (line 2811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2811, 4), 'mydate', with_default_value_call_result_92577)

    @norecursion
    def get_func(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_func'
        module_type_store = module_type_store.open_function_context('get_func', 2813, 4, False)
        
        # Passed parameters checking function
        get_func.stypy_localization = localization
        get_func.stypy_type_of_self = None
        get_func.stypy_type_store = module_type_store
        get_func.stypy_function_name = 'get_func'
        get_func.stypy_param_names_list = ['name', 'item', 'func']
        get_func.stypy_varargs_param_name = None
        get_func.stypy_kwargs_param_name = None
        get_func.stypy_call_defaults = defaults
        get_func.stypy_call_varargs = varargs
        get_func.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'get_func', ['name', 'item', 'func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_func', localization, ['name', 'item', 'func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_func(...)' code ##################

        
        # Assigning a List to a Name (line 2815):
        
        # Assigning a List to a Name (line 2815):
        
        # Assigning a List to a Name (line 2815):
        
        # Obtaining an instance of the builtin type 'list' (line 2815)
        list_92578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2815, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2815)
        # Adding element type (line 2815)
        # Getting the type of 'mybool' (line 2815)
        mybool_92579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 17), 'mybool')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2815, 16), list_92578, mybool_92579)
        # Adding element type (line 2815)
        # Getting the type of 'myint' (line 2815)
        myint_92580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 25), 'myint')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2815, 16), list_92578, myint_92580)
        # Adding element type (line 2815)
        # Getting the type of 'myfloat' (line 2815)
        myfloat_92581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 32), 'myfloat')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2815, 16), list_92578, myfloat_92581)
        # Adding element type (line 2815)
        # Getting the type of 'mydate' (line 2815)
        mydate_92582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 41), 'mydate')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2815, 16), list_92578, mydate_92582)
        # Adding element type (line 2815)
        # Getting the type of 'mydateparser' (line 2815)
        mydateparser_92583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 49), 'mydateparser')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2815, 16), list_92578, mydateparser_92583)
        # Adding element type (line 2815)
        # Getting the type of 'mystr' (line 2815)
        mystr_92584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 63), 'mystr')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2815, 16), list_92578, mystr_92584)
        
        # Assigning a type to the variable 'funcs' (line 2815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2815, 8), 'funcs', list_92578)
        
        
        # Obtaining the type of the subscript
        
        # Call to index(...): (line 2816)
        # Processing the call arguments (line 2816)
        # Getting the type of 'func' (line 2816)
        func_92587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2816, 38), 'func', False)
        # Processing the call keyword arguments (line 2816)
        kwargs_92588 = {}
        # Getting the type of 'funcs' (line 2816)
        funcs_92585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2816, 26), 'funcs', False)
        # Obtaining the member 'index' of a type (line 2816)
        index_92586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2816, 26), funcs_92585, 'index')
        # Calling index(args, kwargs) (line 2816)
        index_call_result_92589 = invoke(stypy.reporting.localization.Localization(__file__, 2816, 26), index_92586, *[func_92587], **kwargs_92588)
        
        slice_92590 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2816, 20), index_call_result_92589, None, None)
        # Getting the type of 'funcs' (line 2816)
        funcs_92591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2816, 20), 'funcs')
        # Obtaining the member '__getitem__' of a type (line 2816)
        getitem___92592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2816, 20), funcs_92591, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2816)
        subscript_call_result_92593 = invoke(stypy.reporting.localization.Localization(__file__, 2816, 20), getitem___92592, slice_92590)
        
        # Testing the type of a for loop iterable (line 2816)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2816, 8), subscript_call_result_92593)
        # Getting the type of the for loop variable (line 2816)
        for_loop_var_92594 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2816, 8), subscript_call_result_92593)
        # Assigning a type to the variable 'func' (line 2816)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2816, 8), 'func', for_loop_var_92594)
        # SSA begins for a for statement (line 2816)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # SSA begins for try-except statement (line 2817)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to func(...): (line 2818)
        # Processing the call arguments (line 2818)
        # Getting the type of 'name' (line 2818)
        name_92596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 21), 'name', False)
        # Getting the type of 'item' (line 2818)
        item_92597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 27), 'item', False)
        # Processing the call keyword arguments (line 2818)
        kwargs_92598 = {}
        # Getting the type of 'func' (line 2818)
        func_92595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 16), 'func', False)
        # Calling func(args, kwargs) (line 2818)
        func_call_result_92599 = invoke(stypy.reporting.localization.Localization(__file__, 2818, 16), func_92595, *[name_92596, item_92597], **kwargs_92598)
        
        # SSA branch for the except part of a try statement (line 2817)
        # SSA branch for the except 'Exception' branch of a try statement (line 2817)
        module_type_store.open_ssa_branch('except')
        # SSA join for try-except statement (line 2817)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'func' (line 2821)
        func_92600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 19), 'func')
        # Assigning a type to the variable 'stypy_return_type' (line 2821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2821, 12), 'stypy_return_type', func_92600)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to ValueError(...): (line 2822)
        # Processing the call arguments (line 2822)
        unicode_92602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2822, 25), 'unicode', u'Could not find a working conversion function')
        # Processing the call keyword arguments (line 2822)
        kwargs_92603 = {}
        # Getting the type of 'ValueError' (line 2822)
        ValueError_92601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2822, 14), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2822)
        ValueError_call_result_92604 = invoke(stypy.reporting.localization.Localization(__file__, 2822, 14), ValueError_92601, *[unicode_92602], **kwargs_92603)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2822, 8), ValueError_call_result_92604, 'raise parameter', BaseException)
        
        # ################# End of 'get_func(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_func' in the type store
        # Getting the type of 'stypy_return_type' (line 2813)
        stypy_return_type_92605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2813, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_92605)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_func'
        return stypy_return_type_92605

    # Assigning a type to the variable 'get_func' (line 2813)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2813, 4), 'get_func', get_func)
    
    # Assigning a Dict to a Name (line 2825):
    
    # Assigning a Dict to a Name (line 2825):
    
    # Assigning a Dict to a Name (line 2825):
    
    # Obtaining an instance of the builtin type 'dict' (line 2825)
    dict_92606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2825, 12), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 2825)
    # Adding element type (key, value) (line 2825)
    unicode_92607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2826, 8), 'unicode', u'return')
    unicode_92608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2826, 18), 'unicode', u'return_')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2825, 12), dict_92606, (unicode_92607, unicode_92608))
    # Adding element type (key, value) (line 2825)
    unicode_92609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2827, 8), 'unicode', u'file')
    unicode_92610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2827, 18), 'unicode', u'file_')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2825, 12), dict_92606, (unicode_92609, unicode_92610))
    # Adding element type (key, value) (line 2825)
    unicode_92611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2828, 8), 'unicode', u'print')
    unicode_92612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2828, 18), 'unicode', u'print_')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2825, 12), dict_92606, (unicode_92611, unicode_92612))
    
    # Assigning a type to the variable 'itemd' (line 2825)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2825, 4), 'itemd', dict_92606)

    @norecursion
    def get_converters(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_converters'
        module_type_store = module_type_store.open_function_context('get_converters', 2831, 4, False)
        
        # Passed parameters checking function
        get_converters.stypy_localization = localization
        get_converters.stypy_type_of_self = None
        get_converters.stypy_type_store = module_type_store
        get_converters.stypy_function_name = 'get_converters'
        get_converters.stypy_param_names_list = ['reader', 'comments']
        get_converters.stypy_varargs_param_name = None
        get_converters.stypy_kwargs_param_name = None
        get_converters.stypy_call_defaults = defaults
        get_converters.stypy_call_varargs = varargs
        get_converters.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'get_converters', ['reader', 'comments'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_converters', localization, ['reader', 'comments'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_converters(...)' code ##################

        
        # Assigning a Name to a Name (line 2833):
        
        # Assigning a Name to a Name (line 2833):
        
        # Assigning a Name to a Name (line 2833):
        # Getting the type of 'None' (line 2833)
        None_92613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 21), 'None')
        # Assigning a type to the variable 'converters' (line 2833)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2833, 8), 'converters', None_92613)
        
        # Assigning a Num to a Name (line 2834):
        
        # Assigning a Num to a Name (line 2834):
        
        # Assigning a Num to a Name (line 2834):
        int_92614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2834, 12), 'int')
        # Assigning a type to the variable 'i' (line 2834)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2834, 8), 'i', int_92614)
        
        # Getting the type of 'reader' (line 2835)
        reader_92615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2835, 19), 'reader')
        # Testing the type of a for loop iterable (line 2835)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2835, 8), reader_92615)
        # Getting the type of the for loop variable (line 2835)
        for_loop_var_92616 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2835, 8), reader_92615)
        # Assigning a type to the variable 'row' (line 2835)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2835, 8), 'row', for_loop_var_92616)
        # SSA begins for a for statement (line 2835)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Evaluating a boolean operation
        
        # Call to len(...): (line 2836)
        # Processing the call arguments (line 2836)
        # Getting the type of 'row' (line 2836)
        row_92618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2836, 20), 'row', False)
        # Processing the call keyword arguments (line 2836)
        kwargs_92619 = {}
        # Getting the type of 'len' (line 2836)
        len_92617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2836, 16), 'len', False)
        # Calling len(args, kwargs) (line 2836)
        len_call_result_92620 = invoke(stypy.reporting.localization.Localization(__file__, 2836, 16), len_92617, *[row_92618], **kwargs_92619)
        
        
        # Getting the type of 'comments' (line 2836)
        comments_92621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2836, 29), 'comments')
        # Getting the type of 'None' (line 2836)
        None_92622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2836, 45), 'None')
        # Applying the binary operator 'isnot' (line 2836)
        result_is_not_92623 = python_operator(stypy.reporting.localization.Localization(__file__, 2836, 29), 'isnot', comments_92621, None_92622)
        
        # Applying the binary operator 'and' (line 2836)
        result_and_keyword_92624 = python_operator(stypy.reporting.localization.Localization(__file__, 2836, 16), 'and', len_call_result_92620, result_is_not_92623)
        
        # Call to startswith(...): (line 2837)
        # Processing the call arguments (line 2837)
        # Getting the type of 'comments' (line 2837)
        comments_92630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2837, 38), 'comments', False)
        # Processing the call keyword arguments (line 2837)
        kwargs_92631 = {}
        
        # Obtaining the type of the subscript
        int_92625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2837, 24), 'int')
        # Getting the type of 'row' (line 2837)
        row_92626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2837, 20), 'row', False)
        # Obtaining the member '__getitem__' of a type (line 2837)
        getitem___92627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2837, 20), row_92626, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2837)
        subscript_call_result_92628 = invoke(stypy.reporting.localization.Localization(__file__, 2837, 20), getitem___92627, int_92625)
        
        # Obtaining the member 'startswith' of a type (line 2837)
        startswith_92629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2837, 20), subscript_call_result_92628, 'startswith')
        # Calling startswith(args, kwargs) (line 2837)
        startswith_call_result_92632 = invoke(stypy.reporting.localization.Localization(__file__, 2837, 20), startswith_92629, *[comments_92630], **kwargs_92631)
        
        # Applying the binary operator 'and' (line 2836)
        result_and_keyword_92633 = python_operator(stypy.reporting.localization.Localization(__file__, 2836, 16), 'and', result_and_keyword_92624, startswith_call_result_92632)
        
        # Testing the type of an if condition (line 2836)
        if_condition_92634 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2836, 12), result_and_keyword_92633)
        # Assigning a type to the variable 'if_condition_92634' (line 2836)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2836, 12), 'if_condition_92634', if_condition_92634)
        # SSA begins for if statement (line 2836)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 2836)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'i' (line 2839)
        i_92635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2839, 15), 'i')
        int_92636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2839, 20), 'int')
        # Applying the binary operator '==' (line 2839)
        result_eq_92637 = python_operator(stypy.reporting.localization.Localization(__file__, 2839, 15), '==', i_92635, int_92636)
        
        # Testing the type of an if condition (line 2839)
        if_condition_92638 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2839, 12), result_eq_92637)
        # Assigning a type to the variable 'if_condition_92638' (line 2839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2839, 12), 'if_condition_92638', if_condition_92638)
        # SSA begins for if statement (line 2839)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 2840):
        
        # Assigning a BinOp to a Name (line 2840):
        
        # Assigning a BinOp to a Name (line 2840):
        
        # Obtaining an instance of the builtin type 'list' (line 2840)
        list_92639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2840, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2840)
        # Adding element type (line 2840)
        # Getting the type of 'mybool' (line 2840)
        mybool_92640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 30), 'mybool')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2840, 29), list_92639, mybool_92640)
        
        
        # Call to len(...): (line 2840)
        # Processing the call arguments (line 2840)
        # Getting the type of 'row' (line 2840)
        row_92642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 42), 'row', False)
        # Processing the call keyword arguments (line 2840)
        kwargs_92643 = {}
        # Getting the type of 'len' (line 2840)
        len_92641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 38), 'len', False)
        # Calling len(args, kwargs) (line 2840)
        len_call_result_92644 = invoke(stypy.reporting.localization.Localization(__file__, 2840, 38), len_92641, *[row_92642], **kwargs_92643)
        
        # Applying the binary operator '*' (line 2840)
        result_mul_92645 = python_operator(stypy.reporting.localization.Localization(__file__, 2840, 29), '*', list_92639, len_call_result_92644)
        
        # Assigning a type to the variable 'converters' (line 2840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2840, 16), 'converters', result_mul_92645)
        # SSA join for if statement (line 2839)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'checkrows' (line 2841)
        checkrows_92646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2841, 15), 'checkrows')
        
        # Getting the type of 'i' (line 2841)
        i_92647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2841, 29), 'i')
        # Getting the type of 'checkrows' (line 2841)
        checkrows_92648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2841, 33), 'checkrows')
        # Applying the binary operator '>' (line 2841)
        result_gt_92649 = python_operator(stypy.reporting.localization.Localization(__file__, 2841, 29), '>', i_92647, checkrows_92648)
        
        # Applying the binary operator 'and' (line 2841)
        result_and_keyword_92650 = python_operator(stypy.reporting.localization.Localization(__file__, 2841, 15), 'and', checkrows_92646, result_gt_92649)
        
        # Testing the type of an if condition (line 2841)
        if_condition_92651 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2841, 12), result_and_keyword_92650)
        # Assigning a type to the variable 'if_condition_92651' (line 2841)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2841, 12), 'if_condition_92651', if_condition_92651)
        # SSA begins for if statement (line 2841)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 2841)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'i' (line 2843)
        i_92652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 12), 'i')
        int_92653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2843, 17), 'int')
        # Applying the binary operator '+=' (line 2843)
        result_iadd_92654 = python_operator(stypy.reporting.localization.Localization(__file__, 2843, 12), '+=', i_92652, int_92653)
        # Assigning a type to the variable 'i' (line 2843)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2843, 12), 'i', result_iadd_92654)
        
        
        
        # Call to enumerate(...): (line 2845)
        # Processing the call arguments (line 2845)
        
        # Call to zip(...): (line 2845)
        # Processing the call arguments (line 2845)
        # Getting the type of 'names' (line 2845)
        names_92657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2845, 49), 'names', False)
        # Getting the type of 'row' (line 2845)
        row_92658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2845, 56), 'row', False)
        # Processing the call keyword arguments (line 2845)
        kwargs_92659 = {}
        # Getting the type of 'zip' (line 2845)
        zip_92656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2845, 45), 'zip', False)
        # Calling zip(args, kwargs) (line 2845)
        zip_call_result_92660 = invoke(stypy.reporting.localization.Localization(__file__, 2845, 45), zip_92656, *[names_92657, row_92658], **kwargs_92659)
        
        # Processing the call keyword arguments (line 2845)
        kwargs_92661 = {}
        # Getting the type of 'enumerate' (line 2845)
        enumerate_92655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2845, 35), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 2845)
        enumerate_call_result_92662 = invoke(stypy.reporting.localization.Localization(__file__, 2845, 35), enumerate_92655, *[zip_call_result_92660], **kwargs_92661)
        
        # Testing the type of a for loop iterable (line 2845)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2845, 12), enumerate_call_result_92662)
        # Getting the type of the for loop variable (line 2845)
        for_loop_var_92663 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2845, 12), enumerate_call_result_92662)
        # Assigning a type to the variable 'j' (line 2845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2845, 12), 'j', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2845, 12), for_loop_var_92663))
        # Assigning a type to the variable 'name' (line 2845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2845, 12), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2845, 12), for_loop_var_92663))
        # Assigning a type to the variable 'item' (line 2845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2845, 12), 'item', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2845, 12), for_loop_var_92663))
        # SSA begins for a for statement (line 2845)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 2846):
        
        # Assigning a Call to a Name (line 2846):
        
        # Assigning a Call to a Name (line 2846):
        
        # Call to get(...): (line 2846)
        # Processing the call arguments (line 2846)
        # Getting the type of 'j' (line 2846)
        j_92666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2846, 38), 'j', False)
        # Processing the call keyword arguments (line 2846)
        kwargs_92667 = {}
        # Getting the type of 'converterd' (line 2846)
        converterd_92664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2846, 23), 'converterd', False)
        # Obtaining the member 'get' of a type (line 2846)
        get_92665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2846, 23), converterd_92664, 'get')
        # Calling get(args, kwargs) (line 2846)
        get_call_result_92668 = invoke(stypy.reporting.localization.Localization(__file__, 2846, 23), get_92665, *[j_92666], **kwargs_92667)
        
        # Assigning a type to the variable 'func' (line 2846)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2846, 16), 'func', get_call_result_92668)
        
        # Type idiom detected: calculating its left and rigth part (line 2847)
        # Getting the type of 'func' (line 2847)
        func_92669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 19), 'func')
        # Getting the type of 'None' (line 2847)
        None_92670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 27), 'None')
        
        (may_be_92671, more_types_in_union_92672) = may_be_none(func_92669, None_92670)

        if may_be_92671:

            if more_types_in_union_92672:
                # Runtime conditional SSA (line 2847)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 2848):
            
            # Assigning a Call to a Name (line 2848):
            
            # Assigning a Call to a Name (line 2848):
            
            # Call to get(...): (line 2848)
            # Processing the call arguments (line 2848)
            # Getting the type of 'name' (line 2848)
            name_92675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 42), 'name', False)
            # Processing the call keyword arguments (line 2848)
            kwargs_92676 = {}
            # Getting the type of 'converterd' (line 2848)
            converterd_92673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 27), 'converterd', False)
            # Obtaining the member 'get' of a type (line 2848)
            get_92674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2848, 27), converterd_92673, 'get')
            # Calling get(args, kwargs) (line 2848)
            get_call_result_92677 = invoke(stypy.reporting.localization.Localization(__file__, 2848, 27), get_92674, *[name_92675], **kwargs_92676)
            
            # Assigning a type to the variable 'func' (line 2848)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2848, 20), 'func', get_call_result_92677)

            if more_types_in_union_92672:
                # SSA join for if statement (line 2847)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2849)
        # Getting the type of 'func' (line 2849)
        func_92678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 19), 'func')
        # Getting the type of 'None' (line 2849)
        None_92679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 27), 'None')
        
        (may_be_92680, more_types_in_union_92681) = may_be_none(func_92678, None_92679)

        if may_be_92680:

            if more_types_in_union_92681:
                # Runtime conditional SSA (line 2849)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 2850):
            
            # Assigning a Subscript to a Name (line 2850):
            
            # Assigning a Subscript to a Name (line 2850):
            
            # Obtaining the type of the subscript
            # Getting the type of 'j' (line 2850)
            j_92682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2850, 38), 'j')
            # Getting the type of 'converters' (line 2850)
            converters_92683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2850, 27), 'converters')
            # Obtaining the member '__getitem__' of a type (line 2850)
            getitem___92684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2850, 27), converters_92683, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2850)
            subscript_call_result_92685 = invoke(stypy.reporting.localization.Localization(__file__, 2850, 27), getitem___92684, j_92682)
            
            # Assigning a type to the variable 'func' (line 2850)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2850, 20), 'func', subscript_call_result_92685)
            
            
            # Call to len(...): (line 2851)
            # Processing the call arguments (line 2851)
            
            # Call to strip(...): (line 2851)
            # Processing the call keyword arguments (line 2851)
            kwargs_92689 = {}
            # Getting the type of 'item' (line 2851)
            item_92687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 27), 'item', False)
            # Obtaining the member 'strip' of a type (line 2851)
            strip_92688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2851, 27), item_92687, 'strip')
            # Calling strip(args, kwargs) (line 2851)
            strip_call_result_92690 = invoke(stypy.reporting.localization.Localization(__file__, 2851, 27), strip_92688, *[], **kwargs_92689)
            
            # Processing the call keyword arguments (line 2851)
            kwargs_92691 = {}
            # Getting the type of 'len' (line 2851)
            len_92686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 23), 'len', False)
            # Calling len(args, kwargs) (line 2851)
            len_call_result_92692 = invoke(stypy.reporting.localization.Localization(__file__, 2851, 23), len_92686, *[strip_call_result_92690], **kwargs_92691)
            
            # Testing the type of an if condition (line 2851)
            if_condition_92693 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2851, 20), len_call_result_92692)
            # Assigning a type to the variable 'if_condition_92693' (line 2851)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2851, 20), 'if_condition_92693', if_condition_92693)
            # SSA begins for if statement (line 2851)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 2852):
            
            # Assigning a Call to a Name (line 2852):
            
            # Assigning a Call to a Name (line 2852):
            
            # Call to get_func(...): (line 2852)
            # Processing the call arguments (line 2852)
            # Getting the type of 'name' (line 2852)
            name_92695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 40), 'name', False)
            # Getting the type of 'item' (line 2852)
            item_92696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 46), 'item', False)
            # Getting the type of 'func' (line 2852)
            func_92697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 52), 'func', False)
            # Processing the call keyword arguments (line 2852)
            kwargs_92698 = {}
            # Getting the type of 'get_func' (line 2852)
            get_func_92694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 31), 'get_func', False)
            # Calling get_func(args, kwargs) (line 2852)
            get_func_call_result_92699 = invoke(stypy.reporting.localization.Localization(__file__, 2852, 31), get_func_92694, *[name_92695, item_92696, func_92697], **kwargs_92698)
            
            # Assigning a type to the variable 'func' (line 2852)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2852, 24), 'func', get_func_call_result_92699)
            # SSA join for if statement (line 2851)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_92681:
                # Runtime conditional SSA for else branch (line 2849)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_92680) or more_types_in_union_92681):
            
            # Assigning a Call to a Name (line 2855):
            
            # Assigning a Call to a Name (line 2855):
            
            # Assigning a Call to a Name (line 2855):
            
            # Call to with_default_value(...): (line 2855)
            # Processing the call arguments (line 2855)
            # Getting the type of 'func' (line 2855)
            func_92701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2855, 46), 'func', False)
            # Getting the type of 'None' (line 2855)
            None_92702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2855, 52), 'None', False)
            # Processing the call keyword arguments (line 2855)
            kwargs_92703 = {}
            # Getting the type of 'with_default_value' (line 2855)
            with_default_value_92700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2855, 27), 'with_default_value', False)
            # Calling with_default_value(args, kwargs) (line 2855)
            with_default_value_call_result_92704 = invoke(stypy.reporting.localization.Localization(__file__, 2855, 27), with_default_value_92700, *[func_92701, None_92702], **kwargs_92703)
            
            # Assigning a type to the variable 'func' (line 2855)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2855, 20), 'func', with_default_value_call_result_92704)

            if (may_be_92680 and more_types_in_union_92681):
                # SSA join for if statement (line 2849)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Subscript (line 2856):
        
        # Assigning a Name to a Subscript (line 2856):
        
        # Assigning a Name to a Subscript (line 2856):
        # Getting the type of 'func' (line 2856)
        func_92705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2856, 32), 'func')
        # Getting the type of 'converters' (line 2856)
        converters_92706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2856, 16), 'converters')
        # Getting the type of 'j' (line 2856)
        j_92707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2856, 27), 'j')
        # Storing an element on a container (line 2856)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2856, 16), converters_92706, (j_92707, func_92705))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'converters' (line 2857)
        converters_92708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2857, 15), 'converters')
        # Assigning a type to the variable 'stypy_return_type' (line 2857)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2857, 8), 'stypy_return_type', converters_92708)
        
        # ################# End of 'get_converters(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_converters' in the type store
        # Getting the type of 'stypy_return_type' (line 2831)
        stypy_return_type_92709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2831, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_92709)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_converters'
        return stypy_return_type_92709

    # Assigning a type to the variable 'get_converters' (line 2831)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2831, 4), 'get_converters', get_converters)
    
    # Assigning a Compare to a Name (line 2860):
    
    # Assigning a Compare to a Name (line 2860):
    
    # Assigning a Compare to a Name (line 2860):
    
    # Getting the type of 'names' (line 2860)
    names_92710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2860, 17), 'names')
    # Getting the type of 'None' (line 2860)
    None_92711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2860, 26), 'None')
    # Applying the binary operator 'is' (line 2860)
    result_is__92712 = python_operator(stypy.reporting.localization.Localization(__file__, 2860, 17), 'is', names_92710, None_92711)
    
    # Assigning a type to the variable 'needheader' (line 2860)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2860, 4), 'needheader', result_is__92712)
    
    # Getting the type of 'needheader' (line 2862)
    needheader_92713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2862, 7), 'needheader')
    # Testing the type of an if condition (line 2862)
    if_condition_92714 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2862, 4), needheader_92713)
    # Assigning a type to the variable 'if_condition_92714' (line 2862)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2862, 4), 'if_condition_92714', if_condition_92714)
    # SSA begins for if statement (line 2862)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'reader' (line 2863)
    reader_92715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2863, 19), 'reader')
    # Testing the type of a for loop iterable (line 2863)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2863, 8), reader_92715)
    # Getting the type of the for loop variable (line 2863)
    for_loop_var_92716 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2863, 8), reader_92715)
    # Assigning a type to the variable 'row' (line 2863)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2863, 8), 'row', for_loop_var_92716)
    # SSA begins for a for statement (line 2863)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Evaluating a boolean operation
    
    # Call to len(...): (line 2864)
    # Processing the call arguments (line 2864)
    # Getting the type of 'row' (line 2864)
    row_92718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2864, 20), 'row', False)
    # Processing the call keyword arguments (line 2864)
    kwargs_92719 = {}
    # Getting the type of 'len' (line 2864)
    len_92717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2864, 16), 'len', False)
    # Calling len(args, kwargs) (line 2864)
    len_call_result_92720 = invoke(stypy.reporting.localization.Localization(__file__, 2864, 16), len_92717, *[row_92718], **kwargs_92719)
    
    
    # Getting the type of 'comments' (line 2864)
    comments_92721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2864, 29), 'comments')
    # Getting the type of 'None' (line 2864)
    None_92722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2864, 45), 'None')
    # Applying the binary operator 'isnot' (line 2864)
    result_is_not_92723 = python_operator(stypy.reporting.localization.Localization(__file__, 2864, 29), 'isnot', comments_92721, None_92722)
    
    # Applying the binary operator 'and' (line 2864)
    result_and_keyword_92724 = python_operator(stypy.reporting.localization.Localization(__file__, 2864, 16), 'and', len_call_result_92720, result_is_not_92723)
    
    # Call to startswith(...): (line 2865)
    # Processing the call arguments (line 2865)
    # Getting the type of 'comments' (line 2865)
    comments_92730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2865, 38), 'comments', False)
    # Processing the call keyword arguments (line 2865)
    kwargs_92731 = {}
    
    # Obtaining the type of the subscript
    int_92725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2865, 24), 'int')
    # Getting the type of 'row' (line 2865)
    row_92726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2865, 20), 'row', False)
    # Obtaining the member '__getitem__' of a type (line 2865)
    getitem___92727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2865, 20), row_92726, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2865)
    subscript_call_result_92728 = invoke(stypy.reporting.localization.Localization(__file__, 2865, 20), getitem___92727, int_92725)
    
    # Obtaining the member 'startswith' of a type (line 2865)
    startswith_92729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2865, 20), subscript_call_result_92728, 'startswith')
    # Calling startswith(args, kwargs) (line 2865)
    startswith_call_result_92732 = invoke(stypy.reporting.localization.Localization(__file__, 2865, 20), startswith_92729, *[comments_92730], **kwargs_92731)
    
    # Applying the binary operator 'and' (line 2864)
    result_and_keyword_92733 = python_operator(stypy.reporting.localization.Localization(__file__, 2864, 16), 'and', result_and_keyword_92724, startswith_call_result_92732)
    
    # Testing the type of an if condition (line 2864)
    if_condition_92734 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2864, 12), result_and_keyword_92733)
    # Assigning a type to the variable 'if_condition_92734' (line 2864)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2864, 12), 'if_condition_92734', if_condition_92734)
    # SSA begins for if statement (line 2864)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 2864)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 2867):
    
    # Assigning a Name to a Name (line 2867):
    
    # Assigning a Name to a Name (line 2867):
    # Getting the type of 'row' (line 2867)
    row_92735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2867, 22), 'row')
    # Assigning a type to the variable 'headers' (line 2867)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2867, 12), 'headers', row_92735)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2871):
    
    # Assigning a Call to a Name (line 2871):
    
    # Assigning a Call to a Name (line 2871):
    
    # Call to set(...): (line 2871)
    # Processing the call arguments (line 2871)
    unicode_92737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2871, 21), 'unicode', u"~!@#$%^&*()-=+~\\|]}[{';: /?.>,<")
    # Processing the call keyword arguments (line 2871)
    kwargs_92738 = {}
    # Getting the type of 'set' (line 2871)
    set_92736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2871, 17), 'set', False)
    # Calling set(args, kwargs) (line 2871)
    set_call_result_92739 = invoke(stypy.reporting.localization.Localization(__file__, 2871, 17), set_92736, *[unicode_92737], **kwargs_92738)
    
    # Assigning a type to the variable 'delete' (line 2871)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2871, 8), 'delete', set_call_result_92739)
    
    # Call to add(...): (line 2872)
    # Processing the call arguments (line 2872)
    unicode_92742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2872, 19), 'unicode', u'"')
    # Processing the call keyword arguments (line 2872)
    kwargs_92743 = {}
    # Getting the type of 'delete' (line 2872)
    delete_92740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2872, 8), 'delete', False)
    # Obtaining the member 'add' of a type (line 2872)
    add_92741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2872, 8), delete_92740, 'add')
    # Calling add(args, kwargs) (line 2872)
    add_call_result_92744 = invoke(stypy.reporting.localization.Localization(__file__, 2872, 8), add_92741, *[unicode_92742], **kwargs_92743)
    
    
    # Assigning a List to a Name (line 2874):
    
    # Assigning a List to a Name (line 2874):
    
    # Assigning a List to a Name (line 2874):
    
    # Obtaining an instance of the builtin type 'list' (line 2874)
    list_92745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2874, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2874)
    
    # Assigning a type to the variable 'names' (line 2874)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2874, 8), 'names', list_92745)
    
    # Assigning a Call to a Name (line 2875):
    
    # Assigning a Call to a Name (line 2875):
    
    # Assigning a Call to a Name (line 2875):
    
    # Call to dict(...): (line 2875)
    # Processing the call keyword arguments (line 2875)
    kwargs_92747 = {}
    # Getting the type of 'dict' (line 2875)
    dict_92746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2875, 15), 'dict', False)
    # Calling dict(args, kwargs) (line 2875)
    dict_call_result_92748 = invoke(stypy.reporting.localization.Localization(__file__, 2875, 15), dict_92746, *[], **kwargs_92747)
    
    # Assigning a type to the variable 'seen' (line 2875)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2875, 8), 'seen', dict_call_result_92748)
    
    
    # Call to enumerate(...): (line 2876)
    # Processing the call arguments (line 2876)
    # Getting the type of 'headers' (line 2876)
    headers_92750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2876, 33), 'headers', False)
    # Processing the call keyword arguments (line 2876)
    kwargs_92751 = {}
    # Getting the type of 'enumerate' (line 2876)
    enumerate_92749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2876, 23), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 2876)
    enumerate_call_result_92752 = invoke(stypy.reporting.localization.Localization(__file__, 2876, 23), enumerate_92749, *[headers_92750], **kwargs_92751)
    
    # Testing the type of a for loop iterable (line 2876)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2876, 8), enumerate_call_result_92752)
    # Getting the type of the for loop variable (line 2876)
    for_loop_var_92753 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2876, 8), enumerate_call_result_92752)
    # Assigning a type to the variable 'i' (line 2876)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2876, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2876, 8), for_loop_var_92753))
    # Assigning a type to the variable 'item' (line 2876)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2876, 8), 'item', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2876, 8), for_loop_var_92753))
    # SSA begins for a for statement (line 2876)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 2877):
    
    # Assigning a Call to a Name (line 2877):
    
    # Assigning a Call to a Name (line 2877):
    
    # Call to replace(...): (line 2877)
    # Processing the call arguments (line 2877)
    unicode_92762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2877, 48), 'unicode', u' ')
    unicode_92763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2877, 53), 'unicode', u'_')
    # Processing the call keyword arguments (line 2877)
    kwargs_92764 = {}
    
    # Call to lower(...): (line 2877)
    # Processing the call keyword arguments (line 2877)
    kwargs_92759 = {}
    
    # Call to strip(...): (line 2877)
    # Processing the call keyword arguments (line 2877)
    kwargs_92756 = {}
    # Getting the type of 'item' (line 2877)
    item_92754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2877, 19), 'item', False)
    # Obtaining the member 'strip' of a type (line 2877)
    strip_92755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2877, 19), item_92754, 'strip')
    # Calling strip(args, kwargs) (line 2877)
    strip_call_result_92757 = invoke(stypy.reporting.localization.Localization(__file__, 2877, 19), strip_92755, *[], **kwargs_92756)
    
    # Obtaining the member 'lower' of a type (line 2877)
    lower_92758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2877, 19), strip_call_result_92757, 'lower')
    # Calling lower(args, kwargs) (line 2877)
    lower_call_result_92760 = invoke(stypy.reporting.localization.Localization(__file__, 2877, 19), lower_92758, *[], **kwargs_92759)
    
    # Obtaining the member 'replace' of a type (line 2877)
    replace_92761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2877, 19), lower_call_result_92760, 'replace')
    # Calling replace(args, kwargs) (line 2877)
    replace_call_result_92765 = invoke(stypy.reporting.localization.Localization(__file__, 2877, 19), replace_92761, *[unicode_92762, unicode_92763], **kwargs_92764)
    
    # Assigning a type to the variable 'item' (line 2877)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2877, 12), 'item', replace_call_result_92765)
    
    # Assigning a Call to a Name (line 2878):
    
    # Assigning a Call to a Name (line 2878):
    
    # Assigning a Call to a Name (line 2878):
    
    # Call to join(...): (line 2878)
    # Processing the call arguments (line 2878)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'item' (line 2878)
    item_92772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2878, 39), 'item', False)
    comprehension_92773 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2878, 28), item_92772)
    # Assigning a type to the variable 'c' (line 2878)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2878, 28), 'c', comprehension_92773)
    
    # Getting the type of 'c' (line 2878)
    c_92769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2878, 47), 'c', False)
    # Getting the type of 'delete' (line 2878)
    delete_92770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2878, 56), 'delete', False)
    # Applying the binary operator 'notin' (line 2878)
    result_contains_92771 = python_operator(stypy.reporting.localization.Localization(__file__, 2878, 47), 'notin', c_92769, delete_92770)
    
    # Getting the type of 'c' (line 2878)
    c_92768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2878, 28), 'c', False)
    list_92774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2878, 28), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2878, 28), list_92774, c_92768)
    # Processing the call keyword arguments (line 2878)
    kwargs_92775 = {}
    unicode_92766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2878, 19), 'unicode', u'')
    # Obtaining the member 'join' of a type (line 2878)
    join_92767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2878, 19), unicode_92766, 'join')
    # Calling join(args, kwargs) (line 2878)
    join_call_result_92776 = invoke(stypy.reporting.localization.Localization(__file__, 2878, 19), join_92767, *[list_92774], **kwargs_92775)
    
    # Assigning a type to the variable 'item' (line 2878)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2878, 12), 'item', join_call_result_92776)
    
    
    
    # Call to len(...): (line 2879)
    # Processing the call arguments (line 2879)
    # Getting the type of 'item' (line 2879)
    item_92778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2879, 23), 'item', False)
    # Processing the call keyword arguments (line 2879)
    kwargs_92779 = {}
    # Getting the type of 'len' (line 2879)
    len_92777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2879, 19), 'len', False)
    # Calling len(args, kwargs) (line 2879)
    len_call_result_92780 = invoke(stypy.reporting.localization.Localization(__file__, 2879, 19), len_92777, *[item_92778], **kwargs_92779)
    
    # Applying the 'not' unary operator (line 2879)
    result_not__92781 = python_operator(stypy.reporting.localization.Localization(__file__, 2879, 15), 'not', len_call_result_92780)
    
    # Testing the type of an if condition (line 2879)
    if_condition_92782 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2879, 12), result_not__92781)
    # Assigning a type to the variable 'if_condition_92782' (line 2879)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2879, 12), 'if_condition_92782', if_condition_92782)
    # SSA begins for if statement (line 2879)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2880):
    
    # Assigning a BinOp to a Name (line 2880):
    
    # Assigning a BinOp to a Name (line 2880):
    unicode_92783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2880, 23), 'unicode', u'column%d')
    # Getting the type of 'i' (line 2880)
    i_92784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2880, 36), 'i')
    # Applying the binary operator '%' (line 2880)
    result_mod_92785 = python_operator(stypy.reporting.localization.Localization(__file__, 2880, 23), '%', unicode_92783, i_92784)
    
    # Assigning a type to the variable 'item' (line 2880)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2880, 16), 'item', result_mod_92785)
    # SSA join for if statement (line 2879)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2882):
    
    # Assigning a Call to a Name (line 2882):
    
    # Assigning a Call to a Name (line 2882):
    
    # Call to get(...): (line 2882)
    # Processing the call arguments (line 2882)
    # Getting the type of 'item' (line 2882)
    item_92788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2882, 29), 'item', False)
    # Getting the type of 'item' (line 2882)
    item_92789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2882, 35), 'item', False)
    # Processing the call keyword arguments (line 2882)
    kwargs_92790 = {}
    # Getting the type of 'itemd' (line 2882)
    itemd_92786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2882, 19), 'itemd', False)
    # Obtaining the member 'get' of a type (line 2882)
    get_92787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2882, 19), itemd_92786, 'get')
    # Calling get(args, kwargs) (line 2882)
    get_call_result_92791 = invoke(stypy.reporting.localization.Localization(__file__, 2882, 19), get_92787, *[item_92788, item_92789], **kwargs_92790)
    
    # Assigning a type to the variable 'item' (line 2882)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2882, 12), 'item', get_call_result_92791)
    
    # Assigning a Call to a Name (line 2883):
    
    # Assigning a Call to a Name (line 2883):
    
    # Assigning a Call to a Name (line 2883):
    
    # Call to get(...): (line 2883)
    # Processing the call arguments (line 2883)
    # Getting the type of 'item' (line 2883)
    item_92794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2883, 27), 'item', False)
    int_92795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2883, 33), 'int')
    # Processing the call keyword arguments (line 2883)
    kwargs_92796 = {}
    # Getting the type of 'seen' (line 2883)
    seen_92792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2883, 18), 'seen', False)
    # Obtaining the member 'get' of a type (line 2883)
    get_92793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2883, 18), seen_92792, 'get')
    # Calling get(args, kwargs) (line 2883)
    get_call_result_92797 = invoke(stypy.reporting.localization.Localization(__file__, 2883, 18), get_92793, *[item_92794, int_92795], **kwargs_92796)
    
    # Assigning a type to the variable 'cnt' (line 2883)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2883, 12), 'cnt', get_call_result_92797)
    
    
    # Getting the type of 'cnt' (line 2884)
    cnt_92798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2884, 15), 'cnt')
    int_92799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2884, 21), 'int')
    # Applying the binary operator '>' (line 2884)
    result_gt_92800 = python_operator(stypy.reporting.localization.Localization(__file__, 2884, 15), '>', cnt_92798, int_92799)
    
    # Testing the type of an if condition (line 2884)
    if_condition_92801 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2884, 12), result_gt_92800)
    # Assigning a type to the variable 'if_condition_92801' (line 2884)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2884, 12), 'if_condition_92801', if_condition_92801)
    # SSA begins for if statement (line 2884)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 2885)
    # Processing the call arguments (line 2885)
    # Getting the type of 'item' (line 2885)
    item_92804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2885, 29), 'item', False)
    unicode_92805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2885, 36), 'unicode', u'_%d')
    # Getting the type of 'cnt' (line 2885)
    cnt_92806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2885, 44), 'cnt', False)
    # Applying the binary operator '%' (line 2885)
    result_mod_92807 = python_operator(stypy.reporting.localization.Localization(__file__, 2885, 36), '%', unicode_92805, cnt_92806)
    
    # Applying the binary operator '+' (line 2885)
    result_add_92808 = python_operator(stypy.reporting.localization.Localization(__file__, 2885, 29), '+', item_92804, result_mod_92807)
    
    # Processing the call keyword arguments (line 2885)
    kwargs_92809 = {}
    # Getting the type of 'names' (line 2885)
    names_92802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2885, 16), 'names', False)
    # Obtaining the member 'append' of a type (line 2885)
    append_92803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2885, 16), names_92802, 'append')
    # Calling append(args, kwargs) (line 2885)
    append_call_result_92810 = invoke(stypy.reporting.localization.Localization(__file__, 2885, 16), append_92803, *[result_add_92808], **kwargs_92809)
    
    # SSA branch for the else part of an if statement (line 2884)
    module_type_store.open_ssa_branch('else')
    
    # Call to append(...): (line 2887)
    # Processing the call arguments (line 2887)
    # Getting the type of 'item' (line 2887)
    item_92813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2887, 29), 'item', False)
    # Processing the call keyword arguments (line 2887)
    kwargs_92814 = {}
    # Getting the type of 'names' (line 2887)
    names_92811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2887, 16), 'names', False)
    # Obtaining the member 'append' of a type (line 2887)
    append_92812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2887, 16), names_92811, 'append')
    # Calling append(args, kwargs) (line 2887)
    append_call_result_92815 = invoke(stypy.reporting.localization.Localization(__file__, 2887, 16), append_92812, *[item_92813], **kwargs_92814)
    
    # SSA join for if statement (line 2884)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Subscript (line 2888):
    
    # Assigning a BinOp to a Subscript (line 2888):
    
    # Assigning a BinOp to a Subscript (line 2888):
    # Getting the type of 'cnt' (line 2888)
    cnt_92816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2888, 25), 'cnt')
    int_92817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2888, 29), 'int')
    # Applying the binary operator '+' (line 2888)
    result_add_92818 = python_operator(stypy.reporting.localization.Localization(__file__, 2888, 25), '+', cnt_92816, int_92817)
    
    # Getting the type of 'seen' (line 2888)
    seen_92819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2888, 12), 'seen')
    # Getting the type of 'item' (line 2888)
    item_92820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2888, 17), 'item')
    # Storing an element on a container (line 2888)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2888, 12), seen_92819, (item_92820, result_add_92818))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2862)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 2891)
    # Processing the call arguments (line 2891)
    # Getting the type of 'names' (line 2891)
    names_92822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2891, 22), 'names', False)
    # Getting the type of 'six' (line 2891)
    six_92823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2891, 29), 'six', False)
    # Obtaining the member 'string_types' of a type (line 2891)
    string_types_92824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2891, 29), six_92823, 'string_types')
    # Processing the call keyword arguments (line 2891)
    kwargs_92825 = {}
    # Getting the type of 'isinstance' (line 2891)
    isinstance_92821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2891, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2891)
    isinstance_call_result_92826 = invoke(stypy.reporting.localization.Localization(__file__, 2891, 11), isinstance_92821, *[names_92822, string_types_92824], **kwargs_92825)
    
    # Testing the type of an if condition (line 2891)
    if_condition_92827 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2891, 8), isinstance_call_result_92826)
    # Assigning a type to the variable 'if_condition_92827' (line 2891)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2891, 8), 'if_condition_92827', if_condition_92827)
    # SSA begins for if statement (line 2891)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a ListComp to a Name (line 2892):
    
    # Assigning a ListComp to a Name (line 2892):
    
    # Assigning a ListComp to a Name (line 2892):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to split(...): (line 2892)
    # Processing the call arguments (line 2892)
    unicode_92834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2892, 52), 'unicode', u',')
    # Processing the call keyword arguments (line 2892)
    kwargs_92835 = {}
    # Getting the type of 'names' (line 2892)
    names_92832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2892, 40), 'names', False)
    # Obtaining the member 'split' of a type (line 2892)
    split_92833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2892, 40), names_92832, 'split')
    # Calling split(args, kwargs) (line 2892)
    split_call_result_92836 = invoke(stypy.reporting.localization.Localization(__file__, 2892, 40), split_92833, *[unicode_92834], **kwargs_92835)
    
    comprehension_92837 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2892, 21), split_call_result_92836)
    # Assigning a type to the variable 'n' (line 2892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2892, 21), 'n', comprehension_92837)
    
    # Call to strip(...): (line 2892)
    # Processing the call keyword arguments (line 2892)
    kwargs_92830 = {}
    # Getting the type of 'n' (line 2892)
    n_92828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2892, 21), 'n', False)
    # Obtaining the member 'strip' of a type (line 2892)
    strip_92829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2892, 21), n_92828, 'strip')
    # Calling strip(args, kwargs) (line 2892)
    strip_call_result_92831 = invoke(stypy.reporting.localization.Localization(__file__, 2892, 21), strip_92829, *[], **kwargs_92830)
    
    list_92838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2892, 21), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2892, 21), list_92838, strip_call_result_92831)
    # Assigning a type to the variable 'names' (line 2892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2892, 12), 'names', list_92838)
    # SSA join for if statement (line 2891)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2862)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2895):
    
    # Assigning a Call to a Name (line 2895):
    
    # Assigning a Call to a Name (line 2895):
    
    # Call to get_converters(...): (line 2895)
    # Processing the call arguments (line 2895)
    # Getting the type of 'reader' (line 2895)
    reader_92840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2895, 32), 'reader', False)
    # Getting the type of 'comments' (line 2895)
    comments_92841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2895, 40), 'comments', False)
    # Processing the call keyword arguments (line 2895)
    kwargs_92842 = {}
    # Getting the type of 'get_converters' (line 2895)
    get_converters_92839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2895, 17), 'get_converters', False)
    # Calling get_converters(args, kwargs) (line 2895)
    get_converters_call_result_92843 = invoke(stypy.reporting.localization.Localization(__file__, 2895, 17), get_converters_92839, *[reader_92840, comments_92841], **kwargs_92842)
    
    # Assigning a type to the variable 'converters' (line 2895)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2895, 4), 'converters', get_converters_call_result_92843)
    
    # Type idiom detected: calculating its left and rigth part (line 2896)
    # Getting the type of 'converters' (line 2896)
    converters_92844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2896, 7), 'converters')
    # Getting the type of 'None' (line 2896)
    None_92845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2896, 21), 'None')
    
    (may_be_92846, more_types_in_union_92847) = may_be_none(converters_92844, None_92845)

    if may_be_92846:

        if more_types_in_union_92847:
            # Runtime conditional SSA (line 2896)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to ValueError(...): (line 2897)
        # Processing the call arguments (line 2897)
        unicode_92849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2897, 25), 'unicode', u'Could not find any valid data in CSV file')
        # Processing the call keyword arguments (line 2897)
        kwargs_92850 = {}
        # Getting the type of 'ValueError' (line 2897)
        ValueError_92848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2897, 14), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2897)
        ValueError_call_result_92851 = invoke(stypy.reporting.localization.Localization(__file__, 2897, 14), ValueError_92848, *[unicode_92849], **kwargs_92850)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2897, 8), ValueError_call_result_92851, 'raise parameter', BaseException)

        if more_types_in_union_92847:
            # SSA join for if statement (line 2896)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to seek(...): (line 2900)
    # Processing the call arguments (line 2900)
    int_92854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2900, 12), 'int')
    # Processing the call keyword arguments (line 2900)
    kwargs_92855 = {}
    # Getting the type of 'fh' (line 2900)
    fh_92852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2900, 4), 'fh', False)
    # Obtaining the member 'seek' of a type (line 2900)
    seek_92853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2900, 4), fh_92852, 'seek')
    # Calling seek(args, kwargs) (line 2900)
    seek_call_result_92856 = invoke(stypy.reporting.localization.Localization(__file__, 2900, 4), seek_92853, *[int_92854], **kwargs_92855)
    
    
    # Assigning a Call to a Name (line 2901):
    
    # Assigning a Call to a Name (line 2901):
    
    # Assigning a Call to a Name (line 2901):
    
    # Call to reader(...): (line 2901)
    # Processing the call arguments (line 2901)
    # Getting the type of 'fh' (line 2901)
    fh_92859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 24), 'fh', False)
    # Processing the call keyword arguments (line 2901)
    # Getting the type of 'delimiter' (line 2901)
    delimiter_92860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 38), 'delimiter', False)
    keyword_92861 = delimiter_92860
    kwargs_92862 = {'delimiter': keyword_92861}
    # Getting the type of 'csv' (line 2901)
    csv_92857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 13), 'csv', False)
    # Obtaining the member 'reader' of a type (line 2901)
    reader_92858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2901, 13), csv_92857, 'reader')
    # Calling reader(args, kwargs) (line 2901)
    reader_call_result_92863 = invoke(stypy.reporting.localization.Localization(__file__, 2901, 13), reader_92858, *[fh_92859], **kwargs_92862)
    
    # Assigning a type to the variable 'reader' (line 2901)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2901, 4), 'reader', reader_call_result_92863)
    
    # Call to process_skiprows(...): (line 2902)
    # Processing the call arguments (line 2902)
    # Getting the type of 'reader' (line 2902)
    reader_92865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 21), 'reader', False)
    # Processing the call keyword arguments (line 2902)
    kwargs_92866 = {}
    # Getting the type of 'process_skiprows' (line 2902)
    process_skiprows_92864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 4), 'process_skiprows', False)
    # Calling process_skiprows(args, kwargs) (line 2902)
    process_skiprows_call_result_92867 = invoke(stypy.reporting.localization.Localization(__file__, 2902, 4), process_skiprows_92864, *[reader_92865], **kwargs_92866)
    
    
    # Getting the type of 'needheader' (line 2904)
    needheader_92868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2904, 7), 'needheader')
    # Testing the type of an if condition (line 2904)
    if_condition_92869 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2904, 4), needheader_92868)
    # Assigning a type to the variable 'if_condition_92869' (line 2904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2904, 4), 'if_condition_92869', if_condition_92869)
    # SSA begins for if statement (line 2904)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'True' (line 2905)
    True_92870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2905, 14), 'True')
    # Testing the type of an if condition (line 2905)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2905, 8), True_92870)
    # SSA begins for while statement (line 2905)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Call to a Name (line 2907):
    
    # Assigning a Call to a Name (line 2907):
    
    # Assigning a Call to a Name (line 2907):
    
    # Call to next(...): (line 2907)
    # Processing the call arguments (line 2907)
    # Getting the type of 'reader' (line 2907)
    reader_92872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2907, 23), 'reader', False)
    # Processing the call keyword arguments (line 2907)
    kwargs_92873 = {}
    # Getting the type of 'next' (line 2907)
    next_92871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2907, 18), 'next', False)
    # Calling next(args, kwargs) (line 2907)
    next_call_result_92874 = invoke(stypy.reporting.localization.Localization(__file__, 2907, 18), next_92871, *[reader_92872], **kwargs_92873)
    
    # Assigning a type to the variable 'row' (line 2907)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2907, 12), 'row', next_call_result_92874)
    
    
    # Evaluating a boolean operation
    
    # Call to len(...): (line 2908)
    # Processing the call arguments (line 2908)
    # Getting the type of 'row' (line 2908)
    row_92876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 20), 'row', False)
    # Processing the call keyword arguments (line 2908)
    kwargs_92877 = {}
    # Getting the type of 'len' (line 2908)
    len_92875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 16), 'len', False)
    # Calling len(args, kwargs) (line 2908)
    len_call_result_92878 = invoke(stypy.reporting.localization.Localization(__file__, 2908, 16), len_92875, *[row_92876], **kwargs_92877)
    
    
    # Getting the type of 'comments' (line 2908)
    comments_92879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 29), 'comments')
    # Getting the type of 'None' (line 2908)
    None_92880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 45), 'None')
    # Applying the binary operator 'isnot' (line 2908)
    result_is_not_92881 = python_operator(stypy.reporting.localization.Localization(__file__, 2908, 29), 'isnot', comments_92879, None_92880)
    
    # Applying the binary operator 'and' (line 2908)
    result_and_keyword_92882 = python_operator(stypy.reporting.localization.Localization(__file__, 2908, 16), 'and', len_call_result_92878, result_is_not_92881)
    
    # Call to startswith(...): (line 2909)
    # Processing the call arguments (line 2909)
    # Getting the type of 'comments' (line 2909)
    comments_92888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2909, 38), 'comments', False)
    # Processing the call keyword arguments (line 2909)
    kwargs_92889 = {}
    
    # Obtaining the type of the subscript
    int_92883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2909, 24), 'int')
    # Getting the type of 'row' (line 2909)
    row_92884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2909, 20), 'row', False)
    # Obtaining the member '__getitem__' of a type (line 2909)
    getitem___92885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2909, 20), row_92884, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2909)
    subscript_call_result_92886 = invoke(stypy.reporting.localization.Localization(__file__, 2909, 20), getitem___92885, int_92883)
    
    # Obtaining the member 'startswith' of a type (line 2909)
    startswith_92887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2909, 20), subscript_call_result_92886, 'startswith')
    # Calling startswith(args, kwargs) (line 2909)
    startswith_call_result_92890 = invoke(stypy.reporting.localization.Localization(__file__, 2909, 20), startswith_92887, *[comments_92888], **kwargs_92889)
    
    # Applying the binary operator 'and' (line 2908)
    result_and_keyword_92891 = python_operator(stypy.reporting.localization.Localization(__file__, 2908, 16), 'and', result_and_keyword_92882, startswith_call_result_92890)
    
    # Testing the type of an if condition (line 2908)
    if_condition_92892 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2908, 12), result_and_keyword_92891)
    # Assigning a type to the variable 'if_condition_92892' (line 2908)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2908, 12), 'if_condition_92892', if_condition_92892)
    # SSA begins for if statement (line 2908)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 2908)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for while statement (line 2905)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2904)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 2915):
    
    # Assigning a List to a Name (line 2915):
    
    # Assigning a List to a Name (line 2915):
    
    # Obtaining an instance of the builtin type 'list' (line 2915)
    list_92893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2915, 11), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2915)
    
    # Assigning a type to the variable 'rows' (line 2915)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2915, 4), 'rows', list_92893)
    
    # Assigning a List to a Name (line 2916):
    
    # Assigning a List to a Name (line 2916):
    
    # Assigning a List to a Name (line 2916):
    
    # Obtaining an instance of the builtin type 'list' (line 2916)
    list_92894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2916, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2916)
    
    # Assigning a type to the variable 'rowmasks' (line 2916)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2916, 4), 'rowmasks', list_92894)
    
    
    # Call to enumerate(...): (line 2917)
    # Processing the call arguments (line 2917)
    # Getting the type of 'reader' (line 2917)
    reader_92896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2917, 28), 'reader', False)
    # Processing the call keyword arguments (line 2917)
    kwargs_92897 = {}
    # Getting the type of 'enumerate' (line 2917)
    enumerate_92895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2917, 18), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 2917)
    enumerate_call_result_92898 = invoke(stypy.reporting.localization.Localization(__file__, 2917, 18), enumerate_92895, *[reader_92896], **kwargs_92897)
    
    # Testing the type of a for loop iterable (line 2917)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2917, 4), enumerate_call_result_92898)
    # Getting the type of the for loop variable (line 2917)
    for_loop_var_92899 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2917, 4), enumerate_call_result_92898)
    # Assigning a type to the variable 'i' (line 2917)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2917, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2917, 4), for_loop_var_92899))
    # Assigning a type to the variable 'row' (line 2917)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2917, 4), 'row', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2917, 4), for_loop_var_92899))
    # SSA begins for a for statement (line 2917)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to len(...): (line 2918)
    # Processing the call arguments (line 2918)
    # Getting the type of 'row' (line 2918)
    row_92901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2918, 19), 'row', False)
    # Processing the call keyword arguments (line 2918)
    kwargs_92902 = {}
    # Getting the type of 'len' (line 2918)
    len_92900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2918, 15), 'len', False)
    # Calling len(args, kwargs) (line 2918)
    len_call_result_92903 = invoke(stypy.reporting.localization.Localization(__file__, 2918, 15), len_92900, *[row_92901], **kwargs_92902)
    
    # Applying the 'not' unary operator (line 2918)
    result_not__92904 = python_operator(stypy.reporting.localization.Localization(__file__, 2918, 11), 'not', len_call_result_92903)
    
    # Testing the type of an if condition (line 2918)
    if_condition_92905 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2918, 8), result_not__92904)
    # Assigning a type to the variable 'if_condition_92905' (line 2918)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2918, 8), 'if_condition_92905', if_condition_92905)
    # SSA begins for if statement (line 2918)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 2918)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'comments' (line 2920)
    comments_92906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2920, 11), 'comments')
    # Getting the type of 'None' (line 2920)
    None_92907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2920, 27), 'None')
    # Applying the binary operator 'isnot' (line 2920)
    result_is_not_92908 = python_operator(stypy.reporting.localization.Localization(__file__, 2920, 11), 'isnot', comments_92906, None_92907)
    
    
    # Call to startswith(...): (line 2920)
    # Processing the call arguments (line 2920)
    # Getting the type of 'comments' (line 2920)
    comments_92914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2920, 54), 'comments', False)
    # Processing the call keyword arguments (line 2920)
    kwargs_92915 = {}
    
    # Obtaining the type of the subscript
    int_92909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2920, 40), 'int')
    # Getting the type of 'row' (line 2920)
    row_92910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2920, 36), 'row', False)
    # Obtaining the member '__getitem__' of a type (line 2920)
    getitem___92911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2920, 36), row_92910, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2920)
    subscript_call_result_92912 = invoke(stypy.reporting.localization.Localization(__file__, 2920, 36), getitem___92911, int_92909)
    
    # Obtaining the member 'startswith' of a type (line 2920)
    startswith_92913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2920, 36), subscript_call_result_92912, 'startswith')
    # Calling startswith(args, kwargs) (line 2920)
    startswith_call_result_92916 = invoke(stypy.reporting.localization.Localization(__file__, 2920, 36), startswith_92913, *[comments_92914], **kwargs_92915)
    
    # Applying the binary operator 'and' (line 2920)
    result_and_keyword_92917 = python_operator(stypy.reporting.localization.Localization(__file__, 2920, 11), 'and', result_is_not_92908, startswith_call_result_92916)
    
    # Testing the type of an if condition (line 2920)
    if_condition_92918 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2920, 8), result_and_keyword_92917)
    # Assigning a type to the variable 'if_condition_92918' (line 2920)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2920, 8), 'if_condition_92918', if_condition_92918)
    # SSA begins for if statement (line 2920)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 2920)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to extend(...): (line 2923)
    # Processing the call arguments (line 2923)
    
    # Obtaining an instance of the builtin type 'list' (line 2923)
    list_92921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2923, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2923)
    # Adding element type (line 2923)
    unicode_92922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2923, 20), 'unicode', u'')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2923, 19), list_92921, unicode_92922)
    
    
    # Call to len(...): (line 2923)
    # Processing the call arguments (line 2923)
    # Getting the type of 'converters' (line 2923)
    converters_92924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2923, 31), 'converters', False)
    # Processing the call keyword arguments (line 2923)
    kwargs_92925 = {}
    # Getting the type of 'len' (line 2923)
    len_92923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2923, 27), 'len', False)
    # Calling len(args, kwargs) (line 2923)
    len_call_result_92926 = invoke(stypy.reporting.localization.Localization(__file__, 2923, 27), len_92923, *[converters_92924], **kwargs_92925)
    
    
    # Call to len(...): (line 2923)
    # Processing the call arguments (line 2923)
    # Getting the type of 'row' (line 2923)
    row_92928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2923, 49), 'row', False)
    # Processing the call keyword arguments (line 2923)
    kwargs_92929 = {}
    # Getting the type of 'len' (line 2923)
    len_92927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2923, 45), 'len', False)
    # Calling len(args, kwargs) (line 2923)
    len_call_result_92930 = invoke(stypy.reporting.localization.Localization(__file__, 2923, 45), len_92927, *[row_92928], **kwargs_92929)
    
    # Applying the binary operator '-' (line 2923)
    result_sub_92931 = python_operator(stypy.reporting.localization.Localization(__file__, 2923, 27), '-', len_call_result_92926, len_call_result_92930)
    
    # Applying the binary operator '*' (line 2923)
    result_mul_92932 = python_operator(stypy.reporting.localization.Localization(__file__, 2923, 19), '*', list_92921, result_sub_92931)
    
    # Processing the call keyword arguments (line 2923)
    kwargs_92933 = {}
    # Getting the type of 'row' (line 2923)
    row_92919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2923, 8), 'row', False)
    # Obtaining the member 'extend' of a type (line 2923)
    extend_92920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2923, 8), row_92919, 'extend')
    # Calling extend(args, kwargs) (line 2923)
    extend_call_result_92934 = invoke(stypy.reporting.localization.Localization(__file__, 2923, 8), extend_92920, *[result_mul_92932], **kwargs_92933)
    
    
    # Call to append(...): (line 2924)
    # Processing the call arguments (line 2924)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to zip(...): (line 2925)
    # Processing the call arguments (line 2925)
    # Getting the type of 'converters' (line 2925)
    converters_92943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 48), 'converters', False)
    # Getting the type of 'names' (line 2925)
    names_92944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 60), 'names', False)
    # Getting the type of 'row' (line 2925)
    row_92945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 67), 'row', False)
    # Processing the call keyword arguments (line 2925)
    kwargs_92946 = {}
    # Getting the type of 'zip' (line 2925)
    zip_92942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 44), 'zip', False)
    # Calling zip(args, kwargs) (line 2925)
    zip_call_result_92947 = invoke(stypy.reporting.localization.Localization(__file__, 2925, 44), zip_92942, *[converters_92943, names_92944, row_92945], **kwargs_92946)
    
    comprehension_92948 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2924, 21), zip_call_result_92947)
    # Assigning a type to the variable 'func' (line 2924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2924, 21), 'func', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2924, 21), comprehension_92948))
    # Assigning a type to the variable 'name' (line 2924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2924, 21), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2924, 21), comprehension_92948))
    # Assigning a type to the variable 'val' (line 2924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2924, 21), 'val', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2924, 21), comprehension_92948))
    
    # Call to func(...): (line 2924)
    # Processing the call arguments (line 2924)
    # Getting the type of 'name' (line 2924)
    name_92938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2924, 26), 'name', False)
    # Getting the type of 'val' (line 2924)
    val_92939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2924, 32), 'val', False)
    # Processing the call keyword arguments (line 2924)
    kwargs_92940 = {}
    # Getting the type of 'func' (line 2924)
    func_92937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2924, 21), 'func', False)
    # Calling func(args, kwargs) (line 2924)
    func_call_result_92941 = invoke(stypy.reporting.localization.Localization(__file__, 2924, 21), func_92937, *[name_92938, val_92939], **kwargs_92940)
    
    list_92949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2924, 21), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2924, 21), list_92949, func_call_result_92941)
    # Processing the call keyword arguments (line 2924)
    kwargs_92950 = {}
    # Getting the type of 'rows' (line 2924)
    rows_92935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2924, 8), 'rows', False)
    # Obtaining the member 'append' of a type (line 2924)
    append_92936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2924, 8), rows_92935, 'append')
    # Calling append(args, kwargs) (line 2924)
    append_call_result_92951 = invoke(stypy.reporting.localization.Localization(__file__, 2924, 8), append_92936, *[list_92949], **kwargs_92950)
    
    
    # Call to append(...): (line 2926)
    # Processing the call arguments (line 2926)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to zip(...): (line 2927)
    # Processing the call arguments (line 2927)
    # Getting the type of 'names' (line 2927)
    names_92960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 46), 'names', False)
    # Getting the type of 'row' (line 2927)
    row_92961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 53), 'row', False)
    # Processing the call keyword arguments (line 2927)
    kwargs_92962 = {}
    # Getting the type of 'zip' (line 2927)
    zip_92959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 42), 'zip', False)
    # Calling zip(args, kwargs) (line 2927)
    zip_call_result_92963 = invoke(stypy.reporting.localization.Localization(__file__, 2927, 42), zip_92959, *[names_92960, row_92961], **kwargs_92962)
    
    comprehension_92964 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2926, 25), zip_call_result_92963)
    # Assigning a type to the variable 'name' (line 2926)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2926, 25), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2926, 25), comprehension_92964))
    # Assigning a type to the variable 'val' (line 2926)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2926, 25), 'val', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2926, 25), comprehension_92964))
    
    # Call to ismissing(...): (line 2926)
    # Processing the call arguments (line 2926)
    # Getting the type of 'name' (line 2926)
    name_92955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2926, 35), 'name', False)
    # Getting the type of 'val' (line 2926)
    val_92956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2926, 41), 'val', False)
    # Processing the call keyword arguments (line 2926)
    kwargs_92957 = {}
    # Getting the type of 'ismissing' (line 2926)
    ismissing_92954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2926, 25), 'ismissing', False)
    # Calling ismissing(args, kwargs) (line 2926)
    ismissing_call_result_92958 = invoke(stypy.reporting.localization.Localization(__file__, 2926, 25), ismissing_92954, *[name_92955, val_92956], **kwargs_92957)
    
    list_92965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2926, 25), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2926, 25), list_92965, ismissing_call_result_92958)
    # Processing the call keyword arguments (line 2926)
    kwargs_92966 = {}
    # Getting the type of 'rowmasks' (line 2926)
    rowmasks_92952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2926, 8), 'rowmasks', False)
    # Obtaining the member 'append' of a type (line 2926)
    append_92953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2926, 8), rowmasks_92952, 'append')
    # Calling append(args, kwargs) (line 2926)
    append_call_result_92967 = invoke(stypy.reporting.localization.Localization(__file__, 2926, 8), append_92953, *[list_92965], **kwargs_92966)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to close(...): (line 2928)
    # Processing the call keyword arguments (line 2928)
    kwargs_92970 = {}
    # Getting the type of 'fh' (line 2928)
    fh_92968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2928, 4), 'fh', False)
    # Obtaining the member 'close' of a type (line 2928)
    close_92969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2928, 4), fh_92968, 'close')
    # Calling close(args, kwargs) (line 2928)
    close_call_result_92971 = invoke(stypy.reporting.localization.Localization(__file__, 2928, 4), close_92969, *[], **kwargs_92970)
    
    
    
    
    # Call to len(...): (line 2930)
    # Processing the call arguments (line 2930)
    # Getting the type of 'rows' (line 2930)
    rows_92973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2930, 15), 'rows', False)
    # Processing the call keyword arguments (line 2930)
    kwargs_92974 = {}
    # Getting the type of 'len' (line 2930)
    len_92972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2930, 11), 'len', False)
    # Calling len(args, kwargs) (line 2930)
    len_call_result_92975 = invoke(stypy.reporting.localization.Localization(__file__, 2930, 11), len_92972, *[rows_92973], **kwargs_92974)
    
    # Applying the 'not' unary operator (line 2930)
    result_not__92976 = python_operator(stypy.reporting.localization.Localization(__file__, 2930, 7), 'not', len_call_result_92975)
    
    # Testing the type of an if condition (line 2930)
    if_condition_92977 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2930, 4), result_not__92976)
    # Assigning a type to the variable 'if_condition_92977' (line 2930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2930, 4), 'if_condition_92977', if_condition_92977)
    # SSA begins for if statement (line 2930)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'None' (line 2931)
    None_92978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2931, 15), 'None')
    # Assigning a type to the variable 'stypy_return_type' (line 2931)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2931, 8), 'stypy_return_type', None_92978)
    # SSA join for if statement (line 2930)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    # Getting the type of 'use_mrecords' (line 2933)
    use_mrecords_92979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2933, 7), 'use_mrecords')
    
    # Call to any(...): (line 2933)
    # Processing the call arguments (line 2933)
    # Getting the type of 'rowmasks' (line 2933)
    rowmasks_92982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2933, 31), 'rowmasks', False)
    # Processing the call keyword arguments (line 2933)
    kwargs_92983 = {}
    # Getting the type of 'np' (line 2933)
    np_92980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2933, 24), 'np', False)
    # Obtaining the member 'any' of a type (line 2933)
    any_92981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2933, 24), np_92980, 'any')
    # Calling any(args, kwargs) (line 2933)
    any_call_result_92984 = invoke(stypy.reporting.localization.Localization(__file__, 2933, 24), any_92981, *[rowmasks_92982], **kwargs_92983)
    
    # Applying the binary operator 'and' (line 2933)
    result_and_keyword_92985 = python_operator(stypy.reporting.localization.Localization(__file__, 2933, 7), 'and', use_mrecords_92979, any_call_result_92984)
    
    # Testing the type of an if condition (line 2933)
    if_condition_92986 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2933, 4), result_and_keyword_92985)
    # Assigning a type to the variable 'if_condition_92986' (line 2933)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2933, 4), 'if_condition_92986', if_condition_92986)
    # SSA begins for if statement (line 2933)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2934):
    
    # Assigning a Call to a Name (line 2934):
    
    # Assigning a Call to a Name (line 2934):
    
    # Call to fromrecords(...): (line 2934)
    # Processing the call arguments (line 2934)
    # Getting the type of 'rows' (line 2934)
    rows_92991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2934, 39), 'rows', False)
    # Processing the call keyword arguments (line 2934)
    # Getting the type of 'names' (line 2934)
    names_92992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2934, 51), 'names', False)
    keyword_92993 = names_92992
    # Getting the type of 'rowmasks' (line 2934)
    rowmasks_92994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2934, 63), 'rowmasks', False)
    keyword_92995 = rowmasks_92994
    kwargs_92996 = {'mask': keyword_92995, 'names': keyword_92993}
    # Getting the type of 'np' (line 2934)
    np_92987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2934, 12), 'np', False)
    # Obtaining the member 'ma' of a type (line 2934)
    ma_92988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2934, 12), np_92987, 'ma')
    # Obtaining the member 'mrecords' of a type (line 2934)
    mrecords_92989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2934, 12), ma_92988, 'mrecords')
    # Obtaining the member 'fromrecords' of a type (line 2934)
    fromrecords_92990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2934, 12), mrecords_92989, 'fromrecords')
    # Calling fromrecords(args, kwargs) (line 2934)
    fromrecords_call_result_92997 = invoke(stypy.reporting.localization.Localization(__file__, 2934, 12), fromrecords_92990, *[rows_92991], **kwargs_92996)
    
    # Assigning a type to the variable 'r' (line 2934)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2934, 8), 'r', fromrecords_call_result_92997)
    # SSA branch for the else part of an if statement (line 2933)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2936):
    
    # Assigning a Call to a Name (line 2936):
    
    # Assigning a Call to a Name (line 2936):
    
    # Call to fromrecords(...): (line 2936)
    # Processing the call arguments (line 2936)
    # Getting the type of 'rows' (line 2936)
    rows_93001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2936, 31), 'rows', False)
    # Processing the call keyword arguments (line 2936)
    # Getting the type of 'names' (line 2936)
    names_93002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2936, 43), 'names', False)
    keyword_93003 = names_93002
    kwargs_93004 = {'names': keyword_93003}
    # Getting the type of 'np' (line 2936)
    np_92998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2936, 12), 'np', False)
    # Obtaining the member 'rec' of a type (line 2936)
    rec_92999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2936, 12), np_92998, 'rec')
    # Obtaining the member 'fromrecords' of a type (line 2936)
    fromrecords_93000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2936, 12), rec_92999, 'fromrecords')
    # Calling fromrecords(args, kwargs) (line 2936)
    fromrecords_call_result_93005 = invoke(stypy.reporting.localization.Localization(__file__, 2936, 12), fromrecords_93000, *[rows_93001], **kwargs_93004)
    
    # Assigning a type to the variable 'r' (line 2936)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2936, 8), 'r', fromrecords_call_result_93005)
    # SSA join for if statement (line 2933)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'r' (line 2937)
    r_93006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2937, 11), 'r')
    # Assigning a type to the variable 'stypy_return_type' (line 2937)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2937, 4), 'stypy_return_type', r_93006)
    
    # ################# End of 'csv2rec(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'csv2rec' in the type store
    # Getting the type of 'stypy_return_type' (line 2660)
    stypy_return_type_93007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_93007)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'csv2rec'
    return stypy_return_type_93007

# Assigning a type to the variable 'csv2rec' (line 2660)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2660, 0), 'csv2rec', csv2rec)
# Declaration of the 'FormatObj' class

class FormatObj(object, ):

    @norecursion
    def tostr(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tostr'
        module_type_store = module_type_store.open_function_context('tostr', 2942, 4, False)
        # Assigning a type to the variable 'self' (line 2943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2943, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatObj.tostr.__dict__.__setitem__('stypy_localization', localization)
        FormatObj.tostr.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatObj.tostr.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatObj.tostr.__dict__.__setitem__('stypy_function_name', 'FormatObj.tostr')
        FormatObj.tostr.__dict__.__setitem__('stypy_param_names_list', ['x'])
        FormatObj.tostr.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatObj.tostr.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatObj.tostr.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatObj.tostr.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatObj.tostr.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatObj.tostr.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatObj.tostr', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tostr', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tostr(...)' code ##################

        
        # Call to toval(...): (line 2943)
        # Processing the call arguments (line 2943)
        # Getting the type of 'x' (line 2943)
        x_93010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2943, 26), 'x', False)
        # Processing the call keyword arguments (line 2943)
        kwargs_93011 = {}
        # Getting the type of 'self' (line 2943)
        self_93008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2943, 15), 'self', False)
        # Obtaining the member 'toval' of a type (line 2943)
        toval_93009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2943, 15), self_93008, 'toval')
        # Calling toval(args, kwargs) (line 2943)
        toval_call_result_93012 = invoke(stypy.reporting.localization.Localization(__file__, 2943, 15), toval_93009, *[x_93010], **kwargs_93011)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2943, 8), 'stypy_return_type', toval_call_result_93012)
        
        # ################# End of 'tostr(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tostr' in the type store
        # Getting the type of 'stypy_return_type' (line 2942)
        stypy_return_type_93013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2942, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93013)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tostr'
        return stypy_return_type_93013


    @norecursion
    def toval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'toval'
        module_type_store = module_type_store.open_function_context('toval', 2945, 4, False)
        # Assigning a type to the variable 'self' (line 2946)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2946, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatObj.toval.__dict__.__setitem__('stypy_localization', localization)
        FormatObj.toval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatObj.toval.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatObj.toval.__dict__.__setitem__('stypy_function_name', 'FormatObj.toval')
        FormatObj.toval.__dict__.__setitem__('stypy_param_names_list', ['x'])
        FormatObj.toval.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatObj.toval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatObj.toval.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatObj.toval.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatObj.toval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatObj.toval.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatObj.toval', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'toval', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'toval(...)' code ##################

        
        # Call to str(...): (line 2946)
        # Processing the call arguments (line 2946)
        # Getting the type of 'x' (line 2946)
        x_93015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2946, 19), 'x', False)
        # Processing the call keyword arguments (line 2946)
        kwargs_93016 = {}
        # Getting the type of 'str' (line 2946)
        str_93014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2946, 15), 'str', False)
        # Calling str(args, kwargs) (line 2946)
        str_call_result_93017 = invoke(stypy.reporting.localization.Localization(__file__, 2946, 15), str_93014, *[x_93015], **kwargs_93016)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2946)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2946, 8), 'stypy_return_type', str_call_result_93017)
        
        # ################# End of 'toval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'toval' in the type store
        # Getting the type of 'stypy_return_type' (line 2945)
        stypy_return_type_93018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93018)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'toval'
        return stypy_return_type_93018


    @norecursion
    def fromstr(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fromstr'
        module_type_store = module_type_store.open_function_context('fromstr', 2948, 4, False)
        # Assigning a type to the variable 'self' (line 2949)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2949, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatObj.fromstr.__dict__.__setitem__('stypy_localization', localization)
        FormatObj.fromstr.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatObj.fromstr.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatObj.fromstr.__dict__.__setitem__('stypy_function_name', 'FormatObj.fromstr')
        FormatObj.fromstr.__dict__.__setitem__('stypy_param_names_list', ['s'])
        FormatObj.fromstr.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatObj.fromstr.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatObj.fromstr.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatObj.fromstr.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatObj.fromstr.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatObj.fromstr.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatObj.fromstr', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fromstr', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fromstr(...)' code ##################

        # Getting the type of 's' (line 2949)
        s_93019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2949, 15), 's')
        # Assigning a type to the variable 'stypy_return_type' (line 2949)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2949, 8), 'stypy_return_type', s_93019)
        
        # ################# End of 'fromstr(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fromstr' in the type store
        # Getting the type of 'stypy_return_type' (line 2948)
        stypy_return_type_93020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93020)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fromstr'
        return stypy_return_type_93020


    @norecursion
    def stypy__hash__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__hash__'
        module_type_store = module_type_store.open_function_context('__hash__', 2951, 4, False)
        # Assigning a type to the variable 'self' (line 2952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2952, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatObj.stypy__hash__.__dict__.__setitem__('stypy_localization', localization)
        FormatObj.stypy__hash__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatObj.stypy__hash__.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatObj.stypy__hash__.__dict__.__setitem__('stypy_function_name', 'FormatObj.stypy__hash__')
        FormatObj.stypy__hash__.__dict__.__setitem__('stypy_param_names_list', [])
        FormatObj.stypy__hash__.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatObj.stypy__hash__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatObj.stypy__hash__.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatObj.stypy__hash__.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatObj.stypy__hash__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatObj.stypy__hash__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatObj.stypy__hash__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__hash__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__hash__(...)' code ##################

        unicode_93021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2955, (-1)), 'unicode', u"\n        override the hash function of any of the formatters, so that we don't\n        create duplicate excel format styles\n        ")
        
        # Call to hash(...): (line 2956)
        # Processing the call arguments (line 2956)
        # Getting the type of 'self' (line 2956)
        self_93023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 20), 'self', False)
        # Obtaining the member '__class__' of a type (line 2956)
        class___93024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2956, 20), self_93023, '__class__')
        # Processing the call keyword arguments (line 2956)
        kwargs_93025 = {}
        # Getting the type of 'hash' (line 2956)
        hash_93022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 15), 'hash', False)
        # Calling hash(args, kwargs) (line 2956)
        hash_call_result_93026 = invoke(stypy.reporting.localization.Localization(__file__, 2956, 15), hash_93022, *[class___93024], **kwargs_93025)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2956, 8), 'stypy_return_type', hash_call_result_93026)
        
        # ################# End of '__hash__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__hash__' in the type store
        # Getting the type of 'stypy_return_type' (line 2951)
        stypy_return_type_93027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2951, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93027)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__hash__'
        return stypy_return_type_93027


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2941, 0, False)
        # Assigning a type to the variable 'self' (line 2942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2942, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatObj.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'FormatObj' (line 2941)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2941, 0), 'FormatObj', FormatObj)
# Declaration of the 'FormatString' class
# Getting the type of 'FormatObj' (line 2959)
FormatObj_93028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2959, 19), 'FormatObj')

class FormatString(FormatObj_93028, ):

    @norecursion
    def tostr(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tostr'
        module_type_store = module_type_store.open_function_context('tostr', 2960, 4, False)
        # Assigning a type to the variable 'self' (line 2961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2961, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatString.tostr.__dict__.__setitem__('stypy_localization', localization)
        FormatString.tostr.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatString.tostr.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatString.tostr.__dict__.__setitem__('stypy_function_name', 'FormatString.tostr')
        FormatString.tostr.__dict__.__setitem__('stypy_param_names_list', ['x'])
        FormatString.tostr.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatString.tostr.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatString.tostr.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatString.tostr.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatString.tostr.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatString.tostr.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatString.tostr', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tostr', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tostr(...)' code ##################

        
        # Assigning a Call to a Name (line 2961):
        
        # Assigning a Call to a Name (line 2961):
        
        # Assigning a Call to a Name (line 2961):
        
        # Call to repr(...): (line 2961)
        # Processing the call arguments (line 2961)
        # Getting the type of 'x' (line 2961)
        x_93030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2961, 19), 'x', False)
        # Processing the call keyword arguments (line 2961)
        kwargs_93031 = {}
        # Getting the type of 'repr' (line 2961)
        repr_93029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2961, 14), 'repr', False)
        # Calling repr(args, kwargs) (line 2961)
        repr_call_result_93032 = invoke(stypy.reporting.localization.Localization(__file__, 2961, 14), repr_93029, *[x_93030], **kwargs_93031)
        
        # Assigning a type to the variable 'val' (line 2961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2961, 8), 'val', repr_call_result_93032)
        
        # Obtaining the type of the subscript
        int_93033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2962, 19), 'int')
        int_93034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2962, 21), 'int')
        slice_93035 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2962, 15), int_93033, int_93034, None)
        # Getting the type of 'val' (line 2962)
        val_93036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2962, 15), 'val')
        # Obtaining the member '__getitem__' of a type (line 2962)
        getitem___93037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2962, 15), val_93036, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2962)
        subscript_call_result_93038 = invoke(stypy.reporting.localization.Localization(__file__, 2962, 15), getitem___93037, slice_93035)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2962, 8), 'stypy_return_type', subscript_call_result_93038)
        
        # ################# End of 'tostr(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tostr' in the type store
        # Getting the type of 'stypy_return_type' (line 2960)
        stypy_return_type_93039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2960, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93039)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tostr'
        return stypy_return_type_93039


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2959, 0, False)
        # Assigning a type to the variable 'self' (line 2960)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2960, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatString.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'FormatString' (line 2959)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2959, 0), 'FormatString', FormatString)
# Declaration of the 'FormatFormatStr' class
# Getting the type of 'FormatObj' (line 2965)
FormatObj_93040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2965, 22), 'FormatObj')

class FormatFormatStr(FormatObj_93040, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2966, 4, False)
        # Assigning a type to the variable 'self' (line 2967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2967, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatFormatStr.__init__', ['fmt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fmt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 2967):
        
        # Assigning a Name to a Attribute (line 2967):
        
        # Assigning a Name to a Attribute (line 2967):
        # Getting the type of 'fmt' (line 2967)
        fmt_93041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2967, 19), 'fmt')
        # Getting the type of 'self' (line 2967)
        self_93042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2967, 8), 'self')
        # Setting the type of the member 'fmt' of a type (line 2967)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2967, 8), self_93042, 'fmt', fmt_93041)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def tostr(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tostr'
        module_type_store = module_type_store.open_function_context('tostr', 2969, 4, False)
        # Assigning a type to the variable 'self' (line 2970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2970, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatFormatStr.tostr.__dict__.__setitem__('stypy_localization', localization)
        FormatFormatStr.tostr.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatFormatStr.tostr.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatFormatStr.tostr.__dict__.__setitem__('stypy_function_name', 'FormatFormatStr.tostr')
        FormatFormatStr.tostr.__dict__.__setitem__('stypy_param_names_list', ['x'])
        FormatFormatStr.tostr.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatFormatStr.tostr.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatFormatStr.tostr.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatFormatStr.tostr.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatFormatStr.tostr.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatFormatStr.tostr.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatFormatStr.tostr', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tostr', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tostr(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 2970)
        # Getting the type of 'x' (line 2970)
        x_93043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2970, 11), 'x')
        # Getting the type of 'None' (line 2970)
        None_93044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2970, 16), 'None')
        
        (may_be_93045, more_types_in_union_93046) = may_be_none(x_93043, None_93044)

        if may_be_93045:

            if more_types_in_union_93046:
                # Runtime conditional SSA (line 2970)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            unicode_93047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2971, 19), 'unicode', u'None')
            # Assigning a type to the variable 'stypy_return_type' (line 2971)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2971, 12), 'stypy_return_type', unicode_93047)

            if more_types_in_union_93046:
                # SSA join for if statement (line 2970)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 2972)
        self_93048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 15), 'self')
        # Obtaining the member 'fmt' of a type (line 2972)
        fmt_93049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2972, 15), self_93048, 'fmt')
        
        # Call to toval(...): (line 2972)
        # Processing the call arguments (line 2972)
        # Getting the type of 'x' (line 2972)
        x_93052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 37), 'x', False)
        # Processing the call keyword arguments (line 2972)
        kwargs_93053 = {}
        # Getting the type of 'self' (line 2972)
        self_93050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 26), 'self', False)
        # Obtaining the member 'toval' of a type (line 2972)
        toval_93051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2972, 26), self_93050, 'toval')
        # Calling toval(args, kwargs) (line 2972)
        toval_call_result_93054 = invoke(stypy.reporting.localization.Localization(__file__, 2972, 26), toval_93051, *[x_93052], **kwargs_93053)
        
        # Applying the binary operator '%' (line 2972)
        result_mod_93055 = python_operator(stypy.reporting.localization.Localization(__file__, 2972, 15), '%', fmt_93049, toval_call_result_93054)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2972, 8), 'stypy_return_type', result_mod_93055)
        
        # ################# End of 'tostr(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tostr' in the type store
        # Getting the type of 'stypy_return_type' (line 2969)
        stypy_return_type_93056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2969, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93056)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tostr'
        return stypy_return_type_93056


# Assigning a type to the variable 'FormatFormatStr' (line 2965)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2965, 0), 'FormatFormatStr', FormatFormatStr)
# Declaration of the 'FormatFloat' class
# Getting the type of 'FormatFormatStr' (line 2975)
FormatFormatStr_93057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2975, 18), 'FormatFormatStr')

class FormatFloat(FormatFormatStr_93057, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_93058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2976, 33), 'int')
        float_93059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2976, 42), 'float')
        defaults = [int_93058, float_93059]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2976, 4, False)
        # Assigning a type to the variable 'self' (line 2977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2977, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatFloat.__init__', ['precision', 'scale'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['precision', 'scale'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 2977)
        # Processing the call arguments (line 2977)
        # Getting the type of 'self' (line 2977)
        self_93062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2977, 33), 'self', False)
        unicode_93063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2977, 39), 'unicode', u'%%1.%df')
        # Getting the type of 'precision' (line 2977)
        precision_93064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2977, 51), 'precision', False)
        # Applying the binary operator '%' (line 2977)
        result_mod_93065 = python_operator(stypy.reporting.localization.Localization(__file__, 2977, 39), '%', unicode_93063, precision_93064)
        
        # Processing the call keyword arguments (line 2977)
        kwargs_93066 = {}
        # Getting the type of 'FormatFormatStr' (line 2977)
        FormatFormatStr_93060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2977, 8), 'FormatFormatStr', False)
        # Obtaining the member '__init__' of a type (line 2977)
        init___93061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2977, 8), FormatFormatStr_93060, '__init__')
        # Calling __init__(args, kwargs) (line 2977)
        init___call_result_93067 = invoke(stypy.reporting.localization.Localization(__file__, 2977, 8), init___93061, *[self_93062, result_mod_93065], **kwargs_93066)
        
        
        # Assigning a Name to a Attribute (line 2978):
        
        # Assigning a Name to a Attribute (line 2978):
        
        # Assigning a Name to a Attribute (line 2978):
        # Getting the type of 'precision' (line 2978)
        precision_93068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2978, 25), 'precision')
        # Getting the type of 'self' (line 2978)
        self_93069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2978, 8), 'self')
        # Setting the type of the member 'precision' of a type (line 2978)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2978, 8), self_93069, 'precision', precision_93068)
        
        # Assigning a Name to a Attribute (line 2979):
        
        # Assigning a Name to a Attribute (line 2979):
        
        # Assigning a Name to a Attribute (line 2979):
        # Getting the type of 'scale' (line 2979)
        scale_93070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2979, 21), 'scale')
        # Getting the type of 'self' (line 2979)
        self_93071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2979, 8), 'self')
        # Setting the type of the member 'scale' of a type (line 2979)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2979, 8), self_93071, 'scale', scale_93070)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__hash__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__hash__'
        module_type_store = module_type_store.open_function_context('__hash__', 2981, 4, False)
        # Assigning a type to the variable 'self' (line 2982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2982, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatFloat.stypy__hash__.__dict__.__setitem__('stypy_localization', localization)
        FormatFloat.stypy__hash__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatFloat.stypy__hash__.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatFloat.stypy__hash__.__dict__.__setitem__('stypy_function_name', 'FormatFloat.stypy__hash__')
        FormatFloat.stypy__hash__.__dict__.__setitem__('stypy_param_names_list', [])
        FormatFloat.stypy__hash__.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatFloat.stypy__hash__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatFloat.stypy__hash__.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatFloat.stypy__hash__.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatFloat.stypy__hash__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatFloat.stypy__hash__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatFloat.stypy__hash__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__hash__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__hash__(...)' code ##################

        
        # Call to hash(...): (line 2982)
        # Processing the call arguments (line 2982)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2982)
        tuple_93073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2982, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2982)
        # Adding element type (line 2982)
        # Getting the type of 'self' (line 2982)
        self_93074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2982, 21), 'self', False)
        # Obtaining the member '__class__' of a type (line 2982)
        class___93075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2982, 21), self_93074, '__class__')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2982, 21), tuple_93073, class___93075)
        # Adding element type (line 2982)
        # Getting the type of 'self' (line 2982)
        self_93076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2982, 37), 'self', False)
        # Obtaining the member 'precision' of a type (line 2982)
        precision_93077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2982, 37), self_93076, 'precision')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2982, 21), tuple_93073, precision_93077)
        # Adding element type (line 2982)
        # Getting the type of 'self' (line 2982)
        self_93078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2982, 53), 'self', False)
        # Obtaining the member 'scale' of a type (line 2982)
        scale_93079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2982, 53), self_93078, 'scale')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2982, 21), tuple_93073, scale_93079)
        
        # Processing the call keyword arguments (line 2982)
        kwargs_93080 = {}
        # Getting the type of 'hash' (line 2982)
        hash_93072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2982, 15), 'hash', False)
        # Calling hash(args, kwargs) (line 2982)
        hash_call_result_93081 = invoke(stypy.reporting.localization.Localization(__file__, 2982, 15), hash_93072, *[tuple_93073], **kwargs_93080)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2982, 8), 'stypy_return_type', hash_call_result_93081)
        
        # ################# End of '__hash__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__hash__' in the type store
        # Getting the type of 'stypy_return_type' (line 2981)
        stypy_return_type_93082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2981, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93082)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__hash__'
        return stypy_return_type_93082


    @norecursion
    def toval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'toval'
        module_type_store = module_type_store.open_function_context('toval', 2984, 4, False)
        # Assigning a type to the variable 'self' (line 2985)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2985, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatFloat.toval.__dict__.__setitem__('stypy_localization', localization)
        FormatFloat.toval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatFloat.toval.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatFloat.toval.__dict__.__setitem__('stypy_function_name', 'FormatFloat.toval')
        FormatFloat.toval.__dict__.__setitem__('stypy_param_names_list', ['x'])
        FormatFloat.toval.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatFloat.toval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatFloat.toval.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatFloat.toval.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatFloat.toval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatFloat.toval.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatFloat.toval', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'toval', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'toval(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 2985)
        # Getting the type of 'x' (line 2985)
        x_93083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2985, 8), 'x')
        # Getting the type of 'None' (line 2985)
        None_93084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2985, 20), 'None')
        
        (may_be_93085, more_types_in_union_93086) = may_not_be_none(x_93083, None_93084)

        if may_be_93085:

            if more_types_in_union_93086:
                # Runtime conditional SSA (line 2985)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Name (line 2986):
            
            # Assigning a BinOp to a Name (line 2986):
            
            # Assigning a BinOp to a Name (line 2986):
            # Getting the type of 'x' (line 2986)
            x_93087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2986, 16), 'x')
            # Getting the type of 'self' (line 2986)
            self_93088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2986, 20), 'self')
            # Obtaining the member 'scale' of a type (line 2986)
            scale_93089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2986, 20), self_93088, 'scale')
            # Applying the binary operator '*' (line 2986)
            result_mul_93090 = python_operator(stypy.reporting.localization.Localization(__file__, 2986, 16), '*', x_93087, scale_93089)
            
            # Assigning a type to the variable 'x' (line 2986)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2986, 12), 'x', result_mul_93090)

            if more_types_in_union_93086:
                # SSA join for if statement (line 2985)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'x' (line 2987)
        x_93091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 15), 'x')
        # Assigning a type to the variable 'stypy_return_type' (line 2987)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2987, 8), 'stypy_return_type', x_93091)
        
        # ################# End of 'toval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'toval' in the type store
        # Getting the type of 'stypy_return_type' (line 2984)
        stypy_return_type_93092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2984, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93092)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'toval'
        return stypy_return_type_93092


    @norecursion
    def fromstr(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fromstr'
        module_type_store = module_type_store.open_function_context('fromstr', 2989, 4, False)
        # Assigning a type to the variable 'self' (line 2990)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2990, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatFloat.fromstr.__dict__.__setitem__('stypy_localization', localization)
        FormatFloat.fromstr.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatFloat.fromstr.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatFloat.fromstr.__dict__.__setitem__('stypy_function_name', 'FormatFloat.fromstr')
        FormatFloat.fromstr.__dict__.__setitem__('stypy_param_names_list', ['s'])
        FormatFloat.fromstr.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatFloat.fromstr.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatFloat.fromstr.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatFloat.fromstr.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatFloat.fromstr.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatFloat.fromstr.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatFloat.fromstr', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fromstr', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fromstr(...)' code ##################

        
        # Call to float(...): (line 2990)
        # Processing the call arguments (line 2990)
        # Getting the type of 's' (line 2990)
        s_93094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2990, 21), 's', False)
        # Processing the call keyword arguments (line 2990)
        kwargs_93095 = {}
        # Getting the type of 'float' (line 2990)
        float_93093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2990, 15), 'float', False)
        # Calling float(args, kwargs) (line 2990)
        float_call_result_93096 = invoke(stypy.reporting.localization.Localization(__file__, 2990, 15), float_93093, *[s_93094], **kwargs_93095)
        
        # Getting the type of 'self' (line 2990)
        self_93097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2990, 24), 'self')
        # Obtaining the member 'scale' of a type (line 2990)
        scale_93098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2990, 24), self_93097, 'scale')
        # Applying the binary operator 'div' (line 2990)
        result_div_93099 = python_operator(stypy.reporting.localization.Localization(__file__, 2990, 15), 'div', float_call_result_93096, scale_93098)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2990)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2990, 8), 'stypy_return_type', result_div_93099)
        
        # ################# End of 'fromstr(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fromstr' in the type store
        # Getting the type of 'stypy_return_type' (line 2989)
        stypy_return_type_93100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2989, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93100)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fromstr'
        return stypy_return_type_93100


# Assigning a type to the variable 'FormatFloat' (line 2975)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2975, 0), 'FormatFloat', FormatFloat)
# Declaration of the 'FormatInt' class
# Getting the type of 'FormatObj' (line 2993)
FormatObj_93101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2993, 16), 'FormatObj')

class FormatInt(FormatObj_93101, ):

    @norecursion
    def tostr(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tostr'
        module_type_store = module_type_store.open_function_context('tostr', 2995, 4, False)
        # Assigning a type to the variable 'self' (line 2996)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2996, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatInt.tostr.__dict__.__setitem__('stypy_localization', localization)
        FormatInt.tostr.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatInt.tostr.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatInt.tostr.__dict__.__setitem__('stypy_function_name', 'FormatInt.tostr')
        FormatInt.tostr.__dict__.__setitem__('stypy_param_names_list', ['x'])
        FormatInt.tostr.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatInt.tostr.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatInt.tostr.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatInt.tostr.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatInt.tostr.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatInt.tostr.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatInt.tostr', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tostr', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tostr(...)' code ##################

        unicode_93102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2996, 15), 'unicode', u'%d')
        
        # Call to int(...): (line 2996)
        # Processing the call arguments (line 2996)
        # Getting the type of 'x' (line 2996)
        x_93104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2996, 26), 'x', False)
        # Processing the call keyword arguments (line 2996)
        kwargs_93105 = {}
        # Getting the type of 'int' (line 2996)
        int_93103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2996, 22), 'int', False)
        # Calling int(args, kwargs) (line 2996)
        int_call_result_93106 = invoke(stypy.reporting.localization.Localization(__file__, 2996, 22), int_93103, *[x_93104], **kwargs_93105)
        
        # Applying the binary operator '%' (line 2996)
        result_mod_93107 = python_operator(stypy.reporting.localization.Localization(__file__, 2996, 15), '%', unicode_93102, int_call_result_93106)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2996)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2996, 8), 'stypy_return_type', result_mod_93107)
        
        # ################# End of 'tostr(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tostr' in the type store
        # Getting the type of 'stypy_return_type' (line 2995)
        stypy_return_type_93108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93108)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tostr'
        return stypy_return_type_93108


    @norecursion
    def toval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'toval'
        module_type_store = module_type_store.open_function_context('toval', 2998, 4, False)
        # Assigning a type to the variable 'self' (line 2999)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2999, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatInt.toval.__dict__.__setitem__('stypy_localization', localization)
        FormatInt.toval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatInt.toval.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatInt.toval.__dict__.__setitem__('stypy_function_name', 'FormatInt.toval')
        FormatInt.toval.__dict__.__setitem__('stypy_param_names_list', ['x'])
        FormatInt.toval.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatInt.toval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatInt.toval.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatInt.toval.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatInt.toval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatInt.toval.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatInt.toval', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'toval', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'toval(...)' code ##################

        
        # Call to int(...): (line 2999)
        # Processing the call arguments (line 2999)
        # Getting the type of 'x' (line 2999)
        x_93110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2999, 19), 'x', False)
        # Processing the call keyword arguments (line 2999)
        kwargs_93111 = {}
        # Getting the type of 'int' (line 2999)
        int_93109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2999, 15), 'int', False)
        # Calling int(args, kwargs) (line 2999)
        int_call_result_93112 = invoke(stypy.reporting.localization.Localization(__file__, 2999, 15), int_93109, *[x_93110], **kwargs_93111)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2999)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2999, 8), 'stypy_return_type', int_call_result_93112)
        
        # ################# End of 'toval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'toval' in the type store
        # Getting the type of 'stypy_return_type' (line 2998)
        stypy_return_type_93113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2998, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93113)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'toval'
        return stypy_return_type_93113


    @norecursion
    def fromstr(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fromstr'
        module_type_store = module_type_store.open_function_context('fromstr', 3001, 4, False)
        # Assigning a type to the variable 'self' (line 3002)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3002, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatInt.fromstr.__dict__.__setitem__('stypy_localization', localization)
        FormatInt.fromstr.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatInt.fromstr.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatInt.fromstr.__dict__.__setitem__('stypy_function_name', 'FormatInt.fromstr')
        FormatInt.fromstr.__dict__.__setitem__('stypy_param_names_list', ['s'])
        FormatInt.fromstr.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatInt.fromstr.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatInt.fromstr.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatInt.fromstr.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatInt.fromstr.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatInt.fromstr.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatInt.fromstr', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fromstr', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fromstr(...)' code ##################

        
        # Call to int(...): (line 3002)
        # Processing the call arguments (line 3002)
        # Getting the type of 's' (line 3002)
        s_93115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3002, 19), 's', False)
        # Processing the call keyword arguments (line 3002)
        kwargs_93116 = {}
        # Getting the type of 'int' (line 3002)
        int_93114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3002, 15), 'int', False)
        # Calling int(args, kwargs) (line 3002)
        int_call_result_93117 = invoke(stypy.reporting.localization.Localization(__file__, 3002, 15), int_93114, *[s_93115], **kwargs_93116)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3002)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3002, 8), 'stypy_return_type', int_call_result_93117)
        
        # ################# End of 'fromstr(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fromstr' in the type store
        # Getting the type of 'stypy_return_type' (line 3001)
        stypy_return_type_93118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3001, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93118)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fromstr'
        return stypy_return_type_93118


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2993, 0, False)
        # Assigning a type to the variable 'self' (line 2994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2994, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatInt.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'FormatInt' (line 2993)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2993, 0), 'FormatInt', FormatInt)
# Declaration of the 'FormatBool' class
# Getting the type of 'FormatObj' (line 3005)
FormatObj_93119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 17), 'FormatObj')

class FormatBool(FormatObj_93119, ):

    @norecursion
    def toval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'toval'
        module_type_store = module_type_store.open_function_context('toval', 3006, 4, False)
        # Assigning a type to the variable 'self' (line 3007)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3007, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatBool.toval.__dict__.__setitem__('stypy_localization', localization)
        FormatBool.toval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatBool.toval.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatBool.toval.__dict__.__setitem__('stypy_function_name', 'FormatBool.toval')
        FormatBool.toval.__dict__.__setitem__('stypy_param_names_list', ['x'])
        FormatBool.toval.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatBool.toval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatBool.toval.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatBool.toval.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatBool.toval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatBool.toval.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatBool.toval', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'toval', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'toval(...)' code ##################

        
        # Call to str(...): (line 3007)
        # Processing the call arguments (line 3007)
        # Getting the type of 'x' (line 3007)
        x_93121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3007, 19), 'x', False)
        # Processing the call keyword arguments (line 3007)
        kwargs_93122 = {}
        # Getting the type of 'str' (line 3007)
        str_93120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3007, 15), 'str', False)
        # Calling str(args, kwargs) (line 3007)
        str_call_result_93123 = invoke(stypy.reporting.localization.Localization(__file__, 3007, 15), str_93120, *[x_93121], **kwargs_93122)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3007)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3007, 8), 'stypy_return_type', str_call_result_93123)
        
        # ################# End of 'toval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'toval' in the type store
        # Getting the type of 'stypy_return_type' (line 3006)
        stypy_return_type_93124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93124)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'toval'
        return stypy_return_type_93124


    @norecursion
    def fromstr(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fromstr'
        module_type_store = module_type_store.open_function_context('fromstr', 3009, 4, False)
        # Assigning a type to the variable 'self' (line 3010)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3010, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatBool.fromstr.__dict__.__setitem__('stypy_localization', localization)
        FormatBool.fromstr.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatBool.fromstr.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatBool.fromstr.__dict__.__setitem__('stypy_function_name', 'FormatBool.fromstr')
        FormatBool.fromstr.__dict__.__setitem__('stypy_param_names_list', ['s'])
        FormatBool.fromstr.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatBool.fromstr.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatBool.fromstr.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatBool.fromstr.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatBool.fromstr.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatBool.fromstr.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatBool.fromstr', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fromstr', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fromstr(...)' code ##################

        
        # Call to bool(...): (line 3010)
        # Processing the call arguments (line 3010)
        # Getting the type of 's' (line 3010)
        s_93126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3010, 20), 's', False)
        # Processing the call keyword arguments (line 3010)
        kwargs_93127 = {}
        # Getting the type of 'bool' (line 3010)
        bool_93125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3010, 15), 'bool', False)
        # Calling bool(args, kwargs) (line 3010)
        bool_call_result_93128 = invoke(stypy.reporting.localization.Localization(__file__, 3010, 15), bool_93125, *[s_93126], **kwargs_93127)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3010)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3010, 8), 'stypy_return_type', bool_call_result_93128)
        
        # ################# End of 'fromstr(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fromstr' in the type store
        # Getting the type of 'stypy_return_type' (line 3009)
        stypy_return_type_93129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3009, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93129)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fromstr'
        return stypy_return_type_93129


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 3005, 0, False)
        # Assigning a type to the variable 'self' (line 3006)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3006, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatBool.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'FormatBool' (line 3005)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3005, 0), 'FormatBool', FormatBool)
# Declaration of the 'FormatPercent' class
# Getting the type of 'FormatFloat' (line 3013)
FormatFloat_93130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 20), 'FormatFloat')

class FormatPercent(FormatFloat_93130, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_93131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3014, 33), 'int')
        defaults = [int_93131]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 3014, 4, False)
        # Assigning a type to the variable 'self' (line 3015)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3015, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatPercent.__init__', ['precision'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['precision'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 3015)
        # Processing the call arguments (line 3015)
        # Getting the type of 'self' (line 3015)
        self_93134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3015, 29), 'self', False)
        # Getting the type of 'precision' (line 3015)
        precision_93135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3015, 35), 'precision', False)
        # Processing the call keyword arguments (line 3015)
        float_93136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3015, 52), 'float')
        keyword_93137 = float_93136
        kwargs_93138 = {'scale': keyword_93137}
        # Getting the type of 'FormatFloat' (line 3015)
        FormatFloat_93132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3015, 8), 'FormatFloat', False)
        # Obtaining the member '__init__' of a type (line 3015)
        init___93133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3015, 8), FormatFloat_93132, '__init__')
        # Calling __init__(args, kwargs) (line 3015)
        init___call_result_93139 = invoke(stypy.reporting.localization.Localization(__file__, 3015, 8), init___93133, *[self_93134, precision_93135], **kwargs_93138)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'FormatPercent' (line 3013)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3013, 0), 'FormatPercent', FormatPercent)
# Declaration of the 'FormatThousands' class
# Getting the type of 'FormatFloat' (line 3018)
FormatFloat_93140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 22), 'FormatFloat')

class FormatThousands(FormatFloat_93140, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_93141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3019, 33), 'int')
        defaults = [int_93141]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 3019, 4, False)
        # Assigning a type to the variable 'self' (line 3020)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3020, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatThousands.__init__', ['precision'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['precision'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 3020)
        # Processing the call arguments (line 3020)
        # Getting the type of 'self' (line 3020)
        self_93144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 29), 'self', False)
        # Getting the type of 'precision' (line 3020)
        precision_93145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 35), 'precision', False)
        # Processing the call keyword arguments (line 3020)
        float_93146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3020, 52), 'float')
        keyword_93147 = float_93146
        kwargs_93148 = {'scale': keyword_93147}
        # Getting the type of 'FormatFloat' (line 3020)
        FormatFloat_93142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 8), 'FormatFloat', False)
        # Obtaining the member '__init__' of a type (line 3020)
        init___93143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3020, 8), FormatFloat_93142, '__init__')
        # Calling __init__(args, kwargs) (line 3020)
        init___call_result_93149 = invoke(stypy.reporting.localization.Localization(__file__, 3020, 8), init___93143, *[self_93144, precision_93145], **kwargs_93148)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'FormatThousands' (line 3018)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3018, 0), 'FormatThousands', FormatThousands)
# Declaration of the 'FormatMillions' class
# Getting the type of 'FormatFloat' (line 3023)
FormatFloat_93150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3023, 21), 'FormatFloat')

class FormatMillions(FormatFloat_93150, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_93151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3024, 33), 'int')
        defaults = [int_93151]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 3024, 4, False)
        # Assigning a type to the variable 'self' (line 3025)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3025, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatMillions.__init__', ['precision'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['precision'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 3025)
        # Processing the call arguments (line 3025)
        # Getting the type of 'self' (line 3025)
        self_93154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 29), 'self', False)
        # Getting the type of 'precision' (line 3025)
        precision_93155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 35), 'precision', False)
        # Processing the call keyword arguments (line 3025)
        float_93156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3025, 52), 'float')
        keyword_93157 = float_93156
        kwargs_93158 = {'scale': keyword_93157}
        # Getting the type of 'FormatFloat' (line 3025)
        FormatFloat_93152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 8), 'FormatFloat', False)
        # Obtaining the member '__init__' of a type (line 3025)
        init___93153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3025, 8), FormatFloat_93152, '__init__')
        # Calling __init__(args, kwargs) (line 3025)
        init___call_result_93159 = invoke(stypy.reporting.localization.Localization(__file__, 3025, 8), init___93153, *[self_93154, precision_93155], **kwargs_93158)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'FormatMillions' (line 3023)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3023, 0), 'FormatMillions', FormatMillions)
# Declaration of the 'FormatDate' class
# Getting the type of 'FormatObj' (line 3028)
FormatObj_93160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3028, 17), 'FormatObj')

class FormatDate(FormatObj_93160, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 3029, 4, False)
        # Assigning a type to the variable 'self' (line 3030)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3030, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatDate.__init__', ['fmt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fmt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 3030):
        
        # Assigning a Name to a Attribute (line 3030):
        
        # Assigning a Name to a Attribute (line 3030):
        # Getting the type of 'fmt' (line 3030)
        fmt_93161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3030, 19), 'fmt')
        # Getting the type of 'self' (line 3030)
        self_93162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3030, 8), 'self')
        # Setting the type of the member 'fmt' of a type (line 3030)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3030, 8), self_93162, 'fmt', fmt_93161)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__hash__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__hash__'
        module_type_store = module_type_store.open_function_context('__hash__', 3032, 4, False)
        # Assigning a type to the variable 'self' (line 3033)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3033, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatDate.stypy__hash__.__dict__.__setitem__('stypy_localization', localization)
        FormatDate.stypy__hash__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatDate.stypy__hash__.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatDate.stypy__hash__.__dict__.__setitem__('stypy_function_name', 'FormatDate.stypy__hash__')
        FormatDate.stypy__hash__.__dict__.__setitem__('stypy_param_names_list', [])
        FormatDate.stypy__hash__.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatDate.stypy__hash__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatDate.stypy__hash__.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatDate.stypy__hash__.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatDate.stypy__hash__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatDate.stypy__hash__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatDate.stypy__hash__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__hash__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__hash__(...)' code ##################

        
        # Call to hash(...): (line 3033)
        # Processing the call arguments (line 3033)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3033)
        tuple_93164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3033, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3033)
        # Adding element type (line 3033)
        # Getting the type of 'self' (line 3033)
        self_93165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3033, 21), 'self', False)
        # Obtaining the member '__class__' of a type (line 3033)
        class___93166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3033, 21), self_93165, '__class__')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3033, 21), tuple_93164, class___93166)
        # Adding element type (line 3033)
        # Getting the type of 'self' (line 3033)
        self_93167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3033, 37), 'self', False)
        # Obtaining the member 'fmt' of a type (line 3033)
        fmt_93168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3033, 37), self_93167, 'fmt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3033, 21), tuple_93164, fmt_93168)
        
        # Processing the call keyword arguments (line 3033)
        kwargs_93169 = {}
        # Getting the type of 'hash' (line 3033)
        hash_93163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3033, 15), 'hash', False)
        # Calling hash(args, kwargs) (line 3033)
        hash_call_result_93170 = invoke(stypy.reporting.localization.Localization(__file__, 3033, 15), hash_93163, *[tuple_93164], **kwargs_93169)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3033)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3033, 8), 'stypy_return_type', hash_call_result_93170)
        
        # ################# End of '__hash__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__hash__' in the type store
        # Getting the type of 'stypy_return_type' (line 3032)
        stypy_return_type_93171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3032, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93171)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__hash__'
        return stypy_return_type_93171


    @norecursion
    def toval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'toval'
        module_type_store = module_type_store.open_function_context('toval', 3035, 4, False)
        # Assigning a type to the variable 'self' (line 3036)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3036, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatDate.toval.__dict__.__setitem__('stypy_localization', localization)
        FormatDate.toval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatDate.toval.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatDate.toval.__dict__.__setitem__('stypy_function_name', 'FormatDate.toval')
        FormatDate.toval.__dict__.__setitem__('stypy_param_names_list', ['x'])
        FormatDate.toval.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatDate.toval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatDate.toval.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatDate.toval.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatDate.toval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatDate.toval.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatDate.toval', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'toval', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'toval(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 3036)
        # Getting the type of 'x' (line 3036)
        x_93172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3036, 11), 'x')
        # Getting the type of 'None' (line 3036)
        None_93173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3036, 16), 'None')
        
        (may_be_93174, more_types_in_union_93175) = may_be_none(x_93172, None_93173)

        if may_be_93174:

            if more_types_in_union_93175:
                # Runtime conditional SSA (line 3036)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            unicode_93176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3037, 19), 'unicode', u'None')
            # Assigning a type to the variable 'stypy_return_type' (line 3037)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3037, 12), 'stypy_return_type', unicode_93176)

            if more_types_in_union_93175:
                # SSA join for if statement (line 3036)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to strftime(...): (line 3038)
        # Processing the call arguments (line 3038)
        # Getting the type of 'self' (line 3038)
        self_93179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3038, 26), 'self', False)
        # Obtaining the member 'fmt' of a type (line 3038)
        fmt_93180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3038, 26), self_93179, 'fmt')
        # Processing the call keyword arguments (line 3038)
        kwargs_93181 = {}
        # Getting the type of 'x' (line 3038)
        x_93177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3038, 15), 'x', False)
        # Obtaining the member 'strftime' of a type (line 3038)
        strftime_93178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3038, 15), x_93177, 'strftime')
        # Calling strftime(args, kwargs) (line 3038)
        strftime_call_result_93182 = invoke(stypy.reporting.localization.Localization(__file__, 3038, 15), strftime_93178, *[fmt_93180], **kwargs_93181)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3038)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3038, 8), 'stypy_return_type', strftime_call_result_93182)
        
        # ################# End of 'toval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'toval' in the type store
        # Getting the type of 'stypy_return_type' (line 3035)
        stypy_return_type_93183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3035, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93183)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'toval'
        return stypy_return_type_93183


    @norecursion
    def fromstr(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fromstr'
        module_type_store = module_type_store.open_function_context('fromstr', 3040, 4, False)
        # Assigning a type to the variable 'self' (line 3041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3041, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatDate.fromstr.__dict__.__setitem__('stypy_localization', localization)
        FormatDate.fromstr.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatDate.fromstr.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatDate.fromstr.__dict__.__setitem__('stypy_function_name', 'FormatDate.fromstr')
        FormatDate.fromstr.__dict__.__setitem__('stypy_param_names_list', ['x'])
        FormatDate.fromstr.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatDate.fromstr.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatDate.fromstr.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatDate.fromstr.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatDate.fromstr.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatDate.fromstr.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatDate.fromstr', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fromstr', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fromstr(...)' code ##################

        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3041, 8))
        
        # 'import dateutil.parser' statement (line 3041)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_93184 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3041, 8), 'dateutil.parser')

        if (type(import_93184) is not StypyTypeError):

            if (import_93184 != 'pyd_module'):
                __import__(import_93184)
                sys_modules_93185 = sys.modules[import_93184]
                import_module(stypy.reporting.localization.Localization(__file__, 3041, 8), 'dateutil.parser', sys_modules_93185.module_type_store, module_type_store)
            else:
                import dateutil.parser

                import_module(stypy.reporting.localization.Localization(__file__, 3041, 8), 'dateutil.parser', dateutil.parser, module_type_store)

        else:
            # Assigning a type to the variable 'dateutil.parser' (line 3041)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3041, 8), 'dateutil.parser', import_93184)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to date(...): (line 3042)
        # Processing the call keyword arguments (line 3042)
        kwargs_93193 = {}
        
        # Call to parse(...): (line 3042)
        # Processing the call arguments (line 3042)
        # Getting the type of 'x' (line 3042)
        x_93189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3042, 37), 'x', False)
        # Processing the call keyword arguments (line 3042)
        kwargs_93190 = {}
        # Getting the type of 'dateutil' (line 3042)
        dateutil_93186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3042, 15), 'dateutil', False)
        # Obtaining the member 'parser' of a type (line 3042)
        parser_93187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3042, 15), dateutil_93186, 'parser')
        # Obtaining the member 'parse' of a type (line 3042)
        parse_93188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3042, 15), parser_93187, 'parse')
        # Calling parse(args, kwargs) (line 3042)
        parse_call_result_93191 = invoke(stypy.reporting.localization.Localization(__file__, 3042, 15), parse_93188, *[x_93189], **kwargs_93190)
        
        # Obtaining the member 'date' of a type (line 3042)
        date_93192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3042, 15), parse_call_result_93191, 'date')
        # Calling date(args, kwargs) (line 3042)
        date_call_result_93194 = invoke(stypy.reporting.localization.Localization(__file__, 3042, 15), date_93192, *[], **kwargs_93193)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3042)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3042, 8), 'stypy_return_type', date_call_result_93194)
        
        # ################# End of 'fromstr(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fromstr' in the type store
        # Getting the type of 'stypy_return_type' (line 3040)
        stypy_return_type_93195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3040, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93195)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fromstr'
        return stypy_return_type_93195


# Assigning a type to the variable 'FormatDate' (line 3028)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3028, 0), 'FormatDate', FormatDate)
# Declaration of the 'FormatDatetime' class
# Getting the type of 'FormatDate' (line 3045)
FormatDate_93196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3045, 21), 'FormatDate')

class FormatDatetime(FormatDate_93196, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_93197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3046, 27), 'unicode', u'%Y-%m-%d %H:%M:%S')
        defaults = [unicode_93197]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 3046, 4, False)
        # Assigning a type to the variable 'self' (line 3047)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3047, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatDatetime.__init__', ['fmt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fmt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 3047)
        # Processing the call arguments (line 3047)
        # Getting the type of 'self' (line 3047)
        self_93200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3047, 28), 'self', False)
        # Getting the type of 'fmt' (line 3047)
        fmt_93201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3047, 34), 'fmt', False)
        # Processing the call keyword arguments (line 3047)
        kwargs_93202 = {}
        # Getting the type of 'FormatDate' (line 3047)
        FormatDate_93198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3047, 8), 'FormatDate', False)
        # Obtaining the member '__init__' of a type (line 3047)
        init___93199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3047, 8), FormatDate_93198, '__init__')
        # Calling __init__(args, kwargs) (line 3047)
        init___call_result_93203 = invoke(stypy.reporting.localization.Localization(__file__, 3047, 8), init___93199, *[self_93200, fmt_93201], **kwargs_93202)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def fromstr(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fromstr'
        module_type_store = module_type_store.open_function_context('fromstr', 3049, 4, False)
        # Assigning a type to the variable 'self' (line 3050)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3050, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FormatDatetime.fromstr.__dict__.__setitem__('stypy_localization', localization)
        FormatDatetime.fromstr.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FormatDatetime.fromstr.__dict__.__setitem__('stypy_type_store', module_type_store)
        FormatDatetime.fromstr.__dict__.__setitem__('stypy_function_name', 'FormatDatetime.fromstr')
        FormatDatetime.fromstr.__dict__.__setitem__('stypy_param_names_list', ['x'])
        FormatDatetime.fromstr.__dict__.__setitem__('stypy_varargs_param_name', None)
        FormatDatetime.fromstr.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FormatDatetime.fromstr.__dict__.__setitem__('stypy_call_defaults', defaults)
        FormatDatetime.fromstr.__dict__.__setitem__('stypy_call_varargs', varargs)
        FormatDatetime.fromstr.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FormatDatetime.fromstr.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FormatDatetime.fromstr', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fromstr', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fromstr(...)' code ##################

        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3050, 8))
        
        # 'import dateutil.parser' statement (line 3050)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_93204 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3050, 8), 'dateutil.parser')

        if (type(import_93204) is not StypyTypeError):

            if (import_93204 != 'pyd_module'):
                __import__(import_93204)
                sys_modules_93205 = sys.modules[import_93204]
                import_module(stypy.reporting.localization.Localization(__file__, 3050, 8), 'dateutil.parser', sys_modules_93205.module_type_store, module_type_store)
            else:
                import dateutil.parser

                import_module(stypy.reporting.localization.Localization(__file__, 3050, 8), 'dateutil.parser', dateutil.parser, module_type_store)

        else:
            # Assigning a type to the variable 'dateutil.parser' (line 3050)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3050, 8), 'dateutil.parser', import_93204)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to parse(...): (line 3051)
        # Processing the call arguments (line 3051)
        # Getting the type of 'x' (line 3051)
        x_93209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 37), 'x', False)
        # Processing the call keyword arguments (line 3051)
        kwargs_93210 = {}
        # Getting the type of 'dateutil' (line 3051)
        dateutil_93206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 15), 'dateutil', False)
        # Obtaining the member 'parser' of a type (line 3051)
        parser_93207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3051, 15), dateutil_93206, 'parser')
        # Obtaining the member 'parse' of a type (line 3051)
        parse_93208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3051, 15), parser_93207, 'parse')
        # Calling parse(args, kwargs) (line 3051)
        parse_call_result_93211 = invoke(stypy.reporting.localization.Localization(__file__, 3051, 15), parse_93208, *[x_93209], **kwargs_93210)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3051, 8), 'stypy_return_type', parse_call_result_93211)
        
        # ################# End of 'fromstr(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fromstr' in the type store
        # Getting the type of 'stypy_return_type' (line 3049)
        stypy_return_type_93212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3049, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93212)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fromstr'
        return stypy_return_type_93212


# Assigning a type to the variable 'FormatDatetime' (line 3045)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3045, 0), 'FormatDatetime', FormatDatetime)

# Assigning a Dict to a Name (line 3054):

# Assigning a Dict to a Name (line 3054):

# Assigning a Dict to a Name (line 3054):

# Obtaining an instance of the builtin type 'dict' (line 3054)
dict_93213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3054, 17), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 3054)
# Adding element type (key, value) (line 3054)
# Getting the type of 'np' (line 3055)
np_93214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3055, 4), 'np')
# Obtaining the member 'bool_' of a type (line 3055)
bool__93215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3055, 4), np_93214, 'bool_')

# Call to FormatBool(...): (line 3055)
# Processing the call keyword arguments (line 3055)
kwargs_93217 = {}
# Getting the type of 'FormatBool' (line 3055)
FormatBool_93216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3055, 16), 'FormatBool', False)
# Calling FormatBool(args, kwargs) (line 3055)
FormatBool_call_result_93218 = invoke(stypy.reporting.localization.Localization(__file__, 3055, 16), FormatBool_93216, *[], **kwargs_93217)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3054, 17), dict_93213, (bool__93215, FormatBool_call_result_93218))
# Adding element type (key, value) (line 3054)
# Getting the type of 'np' (line 3056)
np_93219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3056, 4), 'np')
# Obtaining the member 'int16' of a type (line 3056)
int16_93220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3056, 4), np_93219, 'int16')

# Call to FormatInt(...): (line 3056)
# Processing the call keyword arguments (line 3056)
kwargs_93222 = {}
# Getting the type of 'FormatInt' (line 3056)
FormatInt_93221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3056, 16), 'FormatInt', False)
# Calling FormatInt(args, kwargs) (line 3056)
FormatInt_call_result_93223 = invoke(stypy.reporting.localization.Localization(__file__, 3056, 16), FormatInt_93221, *[], **kwargs_93222)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3054, 17), dict_93213, (int16_93220, FormatInt_call_result_93223))
# Adding element type (key, value) (line 3054)
# Getting the type of 'np' (line 3057)
np_93224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3057, 4), 'np')
# Obtaining the member 'int32' of a type (line 3057)
int32_93225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3057, 4), np_93224, 'int32')

# Call to FormatInt(...): (line 3057)
# Processing the call keyword arguments (line 3057)
kwargs_93227 = {}
# Getting the type of 'FormatInt' (line 3057)
FormatInt_93226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3057, 16), 'FormatInt', False)
# Calling FormatInt(args, kwargs) (line 3057)
FormatInt_call_result_93228 = invoke(stypy.reporting.localization.Localization(__file__, 3057, 16), FormatInt_93226, *[], **kwargs_93227)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3054, 17), dict_93213, (int32_93225, FormatInt_call_result_93228))
# Adding element type (key, value) (line 3054)
# Getting the type of 'np' (line 3058)
np_93229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3058, 4), 'np')
# Obtaining the member 'int64' of a type (line 3058)
int64_93230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3058, 4), np_93229, 'int64')

# Call to FormatInt(...): (line 3058)
# Processing the call keyword arguments (line 3058)
kwargs_93232 = {}
# Getting the type of 'FormatInt' (line 3058)
FormatInt_93231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3058, 16), 'FormatInt', False)
# Calling FormatInt(args, kwargs) (line 3058)
FormatInt_call_result_93233 = invoke(stypy.reporting.localization.Localization(__file__, 3058, 16), FormatInt_93231, *[], **kwargs_93232)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3054, 17), dict_93213, (int64_93230, FormatInt_call_result_93233))
# Adding element type (key, value) (line 3054)
# Getting the type of 'np' (line 3059)
np_93234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3059, 4), 'np')
# Obtaining the member 'float32' of a type (line 3059)
float32_93235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3059, 4), np_93234, 'float32')

# Call to FormatFloat(...): (line 3059)
# Processing the call keyword arguments (line 3059)
kwargs_93237 = {}
# Getting the type of 'FormatFloat' (line 3059)
FormatFloat_93236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3059, 16), 'FormatFloat', False)
# Calling FormatFloat(args, kwargs) (line 3059)
FormatFloat_call_result_93238 = invoke(stypy.reporting.localization.Localization(__file__, 3059, 16), FormatFloat_93236, *[], **kwargs_93237)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3054, 17), dict_93213, (float32_93235, FormatFloat_call_result_93238))
# Adding element type (key, value) (line 3054)
# Getting the type of 'np' (line 3060)
np_93239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3060, 4), 'np')
# Obtaining the member 'float64' of a type (line 3060)
float64_93240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3060, 4), np_93239, 'float64')

# Call to FormatFloat(...): (line 3060)
# Processing the call keyword arguments (line 3060)
kwargs_93242 = {}
# Getting the type of 'FormatFloat' (line 3060)
FormatFloat_93241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3060, 16), 'FormatFloat', False)
# Calling FormatFloat(args, kwargs) (line 3060)
FormatFloat_call_result_93243 = invoke(stypy.reporting.localization.Localization(__file__, 3060, 16), FormatFloat_93241, *[], **kwargs_93242)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3054, 17), dict_93213, (float64_93240, FormatFloat_call_result_93243))
# Adding element type (key, value) (line 3054)
# Getting the type of 'np' (line 3061)
np_93244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3061, 4), 'np')
# Obtaining the member 'object_' of a type (line 3061)
object__93245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3061, 4), np_93244, 'object_')

# Call to FormatObj(...): (line 3061)
# Processing the call keyword arguments (line 3061)
kwargs_93247 = {}
# Getting the type of 'FormatObj' (line 3061)
FormatObj_93246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3061, 16), 'FormatObj', False)
# Calling FormatObj(args, kwargs) (line 3061)
FormatObj_call_result_93248 = invoke(stypy.reporting.localization.Localization(__file__, 3061, 16), FormatObj_93246, *[], **kwargs_93247)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3054, 17), dict_93213, (object__93245, FormatObj_call_result_93248))
# Adding element type (key, value) (line 3054)
# Getting the type of 'np' (line 3062)
np_93249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3062, 4), 'np')
# Obtaining the member 'string_' of a type (line 3062)
string__93250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3062, 4), np_93249, 'string_')

# Call to FormatString(...): (line 3062)
# Processing the call keyword arguments (line 3062)
kwargs_93252 = {}
# Getting the type of 'FormatString' (line 3062)
FormatString_93251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3062, 16), 'FormatString', False)
# Calling FormatString(args, kwargs) (line 3062)
FormatString_call_result_93253 = invoke(stypy.reporting.localization.Localization(__file__, 3062, 16), FormatString_93251, *[], **kwargs_93252)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3054, 17), dict_93213, (string__93250, FormatString_call_result_93253))

# Assigning a type to the variable 'defaultformatd' (line 3054)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3054, 0), 'defaultformatd', dict_93213)

@norecursion
def get_formatd(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3066)
    None_93254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3066, 27), 'None')
    defaults = [None_93254]
    # Create a new context for function 'get_formatd'
    module_type_store = module_type_store.open_function_context('get_formatd', 3066, 0, False)
    
    # Passed parameters checking function
    get_formatd.stypy_localization = localization
    get_formatd.stypy_type_of_self = None
    get_formatd.stypy_type_store = module_type_store
    get_formatd.stypy_function_name = 'get_formatd'
    get_formatd.stypy_param_names_list = ['r', 'formatd']
    get_formatd.stypy_varargs_param_name = None
    get_formatd.stypy_kwargs_param_name = None
    get_formatd.stypy_call_defaults = defaults
    get_formatd.stypy_call_varargs = varargs
    get_formatd.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_formatd', ['r', 'formatd'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_formatd', localization, ['r', 'formatd'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_formatd(...)' code ##################

    unicode_93255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3067, 4), 'unicode', u'build a formatd guaranteed to have a key for every dtype name')
    
    # Type idiom detected: calculating its left and rigth part (line 3068)
    # Getting the type of 'formatd' (line 3068)
    formatd_93256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3068, 7), 'formatd')
    # Getting the type of 'None' (line 3068)
    None_93257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3068, 18), 'None')
    
    (may_be_93258, more_types_in_union_93259) = may_be_none(formatd_93256, None_93257)

    if may_be_93258:

        if more_types_in_union_93259:
            # Runtime conditional SSA (line 3068)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 3069):
        
        # Assigning a Call to a Name (line 3069):
        
        # Assigning a Call to a Name (line 3069):
        
        # Call to dict(...): (line 3069)
        # Processing the call keyword arguments (line 3069)
        kwargs_93261 = {}
        # Getting the type of 'dict' (line 3069)
        dict_93260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3069, 18), 'dict', False)
        # Calling dict(args, kwargs) (line 3069)
        dict_call_result_93262 = invoke(stypy.reporting.localization.Localization(__file__, 3069, 18), dict_93260, *[], **kwargs_93261)
        
        # Assigning a type to the variable 'formatd' (line 3069)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3069, 8), 'formatd', dict_call_result_93262)

        if more_types_in_union_93259:
            # SSA join for if statement (line 3068)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Call to enumerate(...): (line 3071)
    # Processing the call arguments (line 3071)
    # Getting the type of 'r' (line 3071)
    r_93264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3071, 29), 'r', False)
    # Obtaining the member 'dtype' of a type (line 3071)
    dtype_93265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3071, 29), r_93264, 'dtype')
    # Obtaining the member 'names' of a type (line 3071)
    names_93266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3071, 29), dtype_93265, 'names')
    # Processing the call keyword arguments (line 3071)
    kwargs_93267 = {}
    # Getting the type of 'enumerate' (line 3071)
    enumerate_93263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3071, 19), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 3071)
    enumerate_call_result_93268 = invoke(stypy.reporting.localization.Localization(__file__, 3071, 19), enumerate_93263, *[names_93266], **kwargs_93267)
    
    # Testing the type of a for loop iterable (line 3071)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3071, 4), enumerate_call_result_93268)
    # Getting the type of the for loop variable (line 3071)
    for_loop_var_93269 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3071, 4), enumerate_call_result_93268)
    # Assigning a type to the variable 'i' (line 3071)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3071, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3071, 4), for_loop_var_93269))
    # Assigning a type to the variable 'name' (line 3071)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3071, 4), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3071, 4), for_loop_var_93269))
    # SSA begins for a for statement (line 3071)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 3072):
    
    # Assigning a Subscript to a Name (line 3072):
    
    # Assigning a Subscript to a Name (line 3072):
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 3072)
    name_93270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3072, 21), 'name')
    # Getting the type of 'r' (line 3072)
    r_93271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3072, 13), 'r')
    # Obtaining the member 'dtype' of a type (line 3072)
    dtype_93272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3072, 13), r_93271, 'dtype')
    # Obtaining the member '__getitem__' of a type (line 3072)
    getitem___93273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3072, 13), dtype_93272, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3072)
    subscript_call_result_93274 = invoke(stypy.reporting.localization.Localization(__file__, 3072, 13), getitem___93273, name_93270)
    
    # Assigning a type to the variable 'dt' (line 3072)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3072, 8), 'dt', subscript_call_result_93274)
    
    # Assigning a Call to a Name (line 3073):
    
    # Assigning a Call to a Name (line 3073):
    
    # Assigning a Call to a Name (line 3073):
    
    # Call to get(...): (line 3073)
    # Processing the call arguments (line 3073)
    # Getting the type of 'name' (line 3073)
    name_93277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3073, 29), 'name', False)
    # Processing the call keyword arguments (line 3073)
    kwargs_93278 = {}
    # Getting the type of 'formatd' (line 3073)
    formatd_93275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3073, 17), 'formatd', False)
    # Obtaining the member 'get' of a type (line 3073)
    get_93276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3073, 17), formatd_93275, 'get')
    # Calling get(args, kwargs) (line 3073)
    get_call_result_93279 = invoke(stypy.reporting.localization.Localization(__file__, 3073, 17), get_93276, *[name_93277], **kwargs_93278)
    
    # Assigning a type to the variable 'format' (line 3073)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3073, 8), 'format', get_call_result_93279)
    
    # Type idiom detected: calculating its left and rigth part (line 3074)
    # Getting the type of 'format' (line 3074)
    format_93280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3074, 11), 'format')
    # Getting the type of 'None' (line 3074)
    None_93281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3074, 21), 'None')
    
    (may_be_93282, more_types_in_union_93283) = may_be_none(format_93280, None_93281)

    if may_be_93282:

        if more_types_in_union_93283:
            # Runtime conditional SSA (line 3074)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 3075):
        
        # Assigning a Call to a Name (line 3075):
        
        # Assigning a Call to a Name (line 3075):
        
        # Call to get(...): (line 3075)
        # Processing the call arguments (line 3075)
        # Getting the type of 'dt' (line 3075)
        dt_93286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3075, 40), 'dt', False)
        # Obtaining the member 'type' of a type (line 3075)
        type_93287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3075, 40), dt_93286, 'type')
        
        # Call to FormatObj(...): (line 3075)
        # Processing the call keyword arguments (line 3075)
        kwargs_93289 = {}
        # Getting the type of 'FormatObj' (line 3075)
        FormatObj_93288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3075, 49), 'FormatObj', False)
        # Calling FormatObj(args, kwargs) (line 3075)
        FormatObj_call_result_93290 = invoke(stypy.reporting.localization.Localization(__file__, 3075, 49), FormatObj_93288, *[], **kwargs_93289)
        
        # Processing the call keyword arguments (line 3075)
        kwargs_93291 = {}
        # Getting the type of 'defaultformatd' (line 3075)
        defaultformatd_93284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3075, 21), 'defaultformatd', False)
        # Obtaining the member 'get' of a type (line 3075)
        get_93285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3075, 21), defaultformatd_93284, 'get')
        # Calling get(args, kwargs) (line 3075)
        get_call_result_93292 = invoke(stypy.reporting.localization.Localization(__file__, 3075, 21), get_93285, *[type_93287, FormatObj_call_result_93290], **kwargs_93291)
        
        # Assigning a type to the variable 'format' (line 3075)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3075, 12), 'format', get_call_result_93292)

        if more_types_in_union_93283:
            # SSA join for if statement (line 3074)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Subscript (line 3076):
    
    # Assigning a Name to a Subscript (line 3076):
    
    # Assigning a Name to a Subscript (line 3076):
    # Getting the type of 'format' (line 3076)
    format_93293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 24), 'format')
    # Getting the type of 'formatd' (line 3076)
    formatd_93294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 8), 'formatd')
    # Getting the type of 'name' (line 3076)
    name_93295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 16), 'name')
    # Storing an element on a container (line 3076)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3076, 8), formatd_93294, (name_93295, format_93293))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'formatd' (line 3077)
    formatd_93296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3077, 11), 'formatd')
    # Assigning a type to the variable 'stypy_return_type' (line 3077)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3077, 4), 'stypy_return_type', formatd_93296)
    
    # ################# End of 'get_formatd(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_formatd' in the type store
    # Getting the type of 'stypy_return_type' (line 3066)
    stypy_return_type_93297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3066, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_93297)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_formatd'
    return stypy_return_type_93297

# Assigning a type to the variable 'get_formatd' (line 3066)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3066, 0), 'get_formatd', get_formatd)

@norecursion
def csvformat_factory(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'csvformat_factory'
    module_type_store = module_type_store.open_function_context('csvformat_factory', 3080, 0, False)
    
    # Passed parameters checking function
    csvformat_factory.stypy_localization = localization
    csvformat_factory.stypy_type_of_self = None
    csvformat_factory.stypy_type_store = module_type_store
    csvformat_factory.stypy_function_name = 'csvformat_factory'
    csvformat_factory.stypy_param_names_list = ['format']
    csvformat_factory.stypy_varargs_param_name = None
    csvformat_factory.stypy_kwargs_param_name = None
    csvformat_factory.stypy_call_defaults = defaults
    csvformat_factory.stypy_call_varargs = varargs
    csvformat_factory.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'csvformat_factory', ['format'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'csvformat_factory', localization, ['format'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'csvformat_factory(...)' code ##################

    
    # Assigning a Call to a Name (line 3081):
    
    # Assigning a Call to a Name (line 3081):
    
    # Assigning a Call to a Name (line 3081):
    
    # Call to deepcopy(...): (line 3081)
    # Processing the call arguments (line 3081)
    # Getting the type of 'format' (line 3081)
    format_93300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3081, 27), 'format', False)
    # Processing the call keyword arguments (line 3081)
    kwargs_93301 = {}
    # Getting the type of 'copy' (line 3081)
    copy_93298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3081, 13), 'copy', False)
    # Obtaining the member 'deepcopy' of a type (line 3081)
    deepcopy_93299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3081, 13), copy_93298, 'deepcopy')
    # Calling deepcopy(args, kwargs) (line 3081)
    deepcopy_call_result_93302 = invoke(stypy.reporting.localization.Localization(__file__, 3081, 13), deepcopy_93299, *[format_93300], **kwargs_93301)
    
    # Assigning a type to the variable 'format' (line 3081)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3081, 4), 'format', deepcopy_call_result_93302)
    
    
    # Call to isinstance(...): (line 3082)
    # Processing the call arguments (line 3082)
    # Getting the type of 'format' (line 3082)
    format_93304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3082, 18), 'format', False)
    # Getting the type of 'FormatFloat' (line 3082)
    FormatFloat_93305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3082, 26), 'FormatFloat', False)
    # Processing the call keyword arguments (line 3082)
    kwargs_93306 = {}
    # Getting the type of 'isinstance' (line 3082)
    isinstance_93303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3082, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 3082)
    isinstance_call_result_93307 = invoke(stypy.reporting.localization.Localization(__file__, 3082, 7), isinstance_93303, *[format_93304, FormatFloat_93305], **kwargs_93306)
    
    # Testing the type of an if condition (line 3082)
    if_condition_93308 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3082, 4), isinstance_call_result_93307)
    # Assigning a type to the variable 'if_condition_93308' (line 3082)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3082, 4), 'if_condition_93308', if_condition_93308)
    # SSA begins for if statement (line 3082)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Attribute (line 3083):
    
    # Assigning a Num to a Attribute (line 3083):
    
    # Assigning a Num to a Attribute (line 3083):
    float_93309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3083, 23), 'float')
    # Getting the type of 'format' (line 3083)
    format_93310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3083, 8), 'format')
    # Setting the type of the member 'scale' of a type (line 3083)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3083, 8), format_93310, 'scale', float_93309)
    
    # Assigning a Str to a Attribute (line 3084):
    
    # Assigning a Str to a Attribute (line 3084):
    
    # Assigning a Str to a Attribute (line 3084):
    unicode_93311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3084, 21), 'unicode', u'%r')
    # Getting the type of 'format' (line 3084)
    format_93312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3084, 8), 'format')
    # Setting the type of the member 'fmt' of a type (line 3084)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3084, 8), format_93312, 'fmt', unicode_93311)
    # SSA join for if statement (line 3082)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'format' (line 3085)
    format_93313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3085, 11), 'format')
    # Assigning a type to the variable 'stypy_return_type' (line 3085)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3085, 4), 'stypy_return_type', format_93313)
    
    # ################# End of 'csvformat_factory(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'csvformat_factory' in the type store
    # Getting the type of 'stypy_return_type' (line 3080)
    stypy_return_type_93314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3080, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_93314)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'csvformat_factory'
    return stypy_return_type_93314

# Assigning a type to the variable 'csvformat_factory' (line 3080)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3080, 0), 'csvformat_factory', csvformat_factory)

@norecursion
def rec2txt(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3088)
    None_93315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3088, 22), 'None')
    int_93316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3088, 36), 'int')
    int_93317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3088, 49), 'int')
    # Getting the type of 'None' (line 3088)
    None_93318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3088, 59), 'None')
    defaults = [None_93315, int_93316, int_93317, None_93318]
    # Create a new context for function 'rec2txt'
    module_type_store = module_type_store.open_function_context('rec2txt', 3088, 0, False)
    
    # Passed parameters checking function
    rec2txt.stypy_localization = localization
    rec2txt.stypy_type_of_self = None
    rec2txt.stypy_type_store = module_type_store
    rec2txt.stypy_function_name = 'rec2txt'
    rec2txt.stypy_param_names_list = ['r', 'header', 'padding', 'precision', 'fields']
    rec2txt.stypy_varargs_param_name = None
    rec2txt.stypy_kwargs_param_name = None
    rec2txt.stypy_call_defaults = defaults
    rec2txt.stypy_call_varargs = varargs
    rec2txt.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rec2txt', ['r', 'header', 'padding', 'precision', 'fields'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rec2txt', localization, ['r', 'header', 'padding', 'precision', 'fields'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rec2txt(...)' code ##################

    unicode_93319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3120, (-1)), 'unicode', u"\n    Returns a textual representation of a record array.\n\n    Parameters\n    ----------\n    r: numpy recarray\n\n    header: list\n        column headers\n\n    padding:\n        space between each column\n\n    precision: number of decimal places to use for floats.\n        Set to an integer to apply to all floats.  Set to a\n        list of integers to apply precision individually.\n        Precision for non-floats is simply ignored.\n\n    fields : list\n        If not None, a list of field names to print.  fields\n        can be a list of strings like ['field1', 'field2'] or a single\n        comma separated string like 'field1,field2'\n\n    Examples\n    --------\n\n    For ``precision=[0,2,3]``, the output is ::\n\n      ID    Price   Return\n      ABC   12.54    0.234\n      XYZ    6.32   -0.076\n    ")
    
    # Type idiom detected: calculating its left and rigth part (line 3122)
    # Getting the type of 'fields' (line 3122)
    fields_93320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3122, 4), 'fields')
    # Getting the type of 'None' (line 3122)
    None_93321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3122, 21), 'None')
    
    (may_be_93322, more_types_in_union_93323) = may_not_be_none(fields_93320, None_93321)

    if may_be_93322:

        if more_types_in_union_93323:
            # Runtime conditional SSA (line 3122)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 3123):
        
        # Assigning a Call to a Name (line 3123):
        
        # Assigning a Call to a Name (line 3123):
        
        # Call to rec_keep_fields(...): (line 3123)
        # Processing the call arguments (line 3123)
        # Getting the type of 'r' (line 3123)
        r_93325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 28), 'r', False)
        # Getting the type of 'fields' (line 3123)
        fields_93326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 31), 'fields', False)
        # Processing the call keyword arguments (line 3123)
        kwargs_93327 = {}
        # Getting the type of 'rec_keep_fields' (line 3123)
        rec_keep_fields_93324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 12), 'rec_keep_fields', False)
        # Calling rec_keep_fields(args, kwargs) (line 3123)
        rec_keep_fields_call_result_93328 = invoke(stypy.reporting.localization.Localization(__file__, 3123, 12), rec_keep_fields_93324, *[r_93325, fields_93326], **kwargs_93327)
        
        # Assigning a type to the variable 'r' (line 3123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3123, 8), 'r', rec_keep_fields_call_result_93328)

        if more_types_in_union_93323:
            # SSA join for if statement (line 3122)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Call to is_numlike(...): (line 3125)
    # Processing the call arguments (line 3125)
    # Getting the type of 'precision' (line 3125)
    precision_93331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 24), 'precision', False)
    # Processing the call keyword arguments (line 3125)
    kwargs_93332 = {}
    # Getting the type of 'cbook' (line 3125)
    cbook_93329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 7), 'cbook', False)
    # Obtaining the member 'is_numlike' of a type (line 3125)
    is_numlike_93330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3125, 7), cbook_93329, 'is_numlike')
    # Calling is_numlike(args, kwargs) (line 3125)
    is_numlike_call_result_93333 = invoke(stypy.reporting.localization.Localization(__file__, 3125, 7), is_numlike_93330, *[precision_93331], **kwargs_93332)
    
    # Testing the type of an if condition (line 3125)
    if_condition_93334 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3125, 4), is_numlike_call_result_93333)
    # Assigning a type to the variable 'if_condition_93334' (line 3125)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3125, 4), 'if_condition_93334', if_condition_93334)
    # SSA begins for if statement (line 3125)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3126):
    
    # Assigning a BinOp to a Name (line 3126):
    
    # Assigning a BinOp to a Name (line 3126):
    
    # Obtaining an instance of the builtin type 'list' (line 3126)
    list_93335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3126, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3126)
    # Adding element type (line 3126)
    # Getting the type of 'precision' (line 3126)
    precision_93336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3126, 21), 'precision')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3126, 20), list_93335, precision_93336)
    
    
    # Call to len(...): (line 3126)
    # Processing the call arguments (line 3126)
    # Getting the type of 'r' (line 3126)
    r_93338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3126, 36), 'r', False)
    # Obtaining the member 'dtype' of a type (line 3126)
    dtype_93339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3126, 36), r_93338, 'dtype')
    # Processing the call keyword arguments (line 3126)
    kwargs_93340 = {}
    # Getting the type of 'len' (line 3126)
    len_93337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3126, 32), 'len', False)
    # Calling len(args, kwargs) (line 3126)
    len_call_result_93341 = invoke(stypy.reporting.localization.Localization(__file__, 3126, 32), len_93337, *[dtype_93339], **kwargs_93340)
    
    # Applying the binary operator '*' (line 3126)
    result_mul_93342 = python_operator(stypy.reporting.localization.Localization(__file__, 3126, 20), '*', list_93335, len_call_result_93341)
    
    # Assigning a type to the variable 'precision' (line 3126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3126, 8), 'precision', result_mul_93342)
    # SSA join for if statement (line 3125)
    module_type_store = module_type_store.join_ssa_context()
    

    @norecursion
    def get_type(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'int' (line 3128)
        int_93343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3128, 29), 'int')
        defaults = [int_93343]
        # Create a new context for function 'get_type'
        module_type_store = module_type_store.open_function_context('get_type', 3128, 4, False)
        
        # Passed parameters checking function
        get_type.stypy_localization = localization
        get_type.stypy_type_of_self = None
        get_type.stypy_type_store = module_type_store
        get_type.stypy_function_name = 'get_type'
        get_type.stypy_param_names_list = ['item', 'atype']
        get_type.stypy_varargs_param_name = None
        get_type.stypy_kwargs_param_name = None
        get_type.stypy_call_defaults = defaults
        get_type.stypy_call_varargs = varargs
        get_type.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'get_type', ['item', 'atype'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_type', localization, ['item', 'atype'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_type(...)' code ##################

        
        # Assigning a Dict to a Name (line 3129):
        
        # Assigning a Dict to a Name (line 3129):
        
        # Assigning a Dict to a Name (line 3129):
        
        # Obtaining an instance of the builtin type 'dict' (line 3129)
        dict_93344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3129, 16), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 3129)
        # Adding element type (key, value) (line 3129)
        # Getting the type of 'None' (line 3129)
        None_93345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 17), 'None')
        # Getting the type of 'int' (line 3129)
        int_93346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 23), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3129, 16), dict_93344, (None_93345, int_93346))
        # Adding element type (key, value) (line 3129)
        # Getting the type of 'int' (line 3129)
        int_93347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 28), 'int')
        # Getting the type of 'float' (line 3129)
        float_93348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 33), 'float')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3129, 16), dict_93344, (int_93347, float_93348))
        # Adding element type (key, value) (line 3129)
        # Getting the type of 'float' (line 3129)
        float_93349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 40), 'float')
        # Getting the type of 'str' (line 3129)
        str_93350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 47), 'str')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3129, 16), dict_93344, (float_93349, str_93350))
        
        # Assigning a type to the variable 'tdict' (line 3129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3129, 8), 'tdict', dict_93344)
        
        
        # SSA begins for try-except statement (line 3130)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to atype(...): (line 3131)
        # Processing the call arguments (line 3131)
        
        # Call to str(...): (line 3131)
        # Processing the call arguments (line 3131)
        # Getting the type of 'item' (line 3131)
        item_93353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 22), 'item', False)
        # Processing the call keyword arguments (line 3131)
        kwargs_93354 = {}
        # Getting the type of 'str' (line 3131)
        str_93352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 18), 'str', False)
        # Calling str(args, kwargs) (line 3131)
        str_call_result_93355 = invoke(stypy.reporting.localization.Localization(__file__, 3131, 18), str_93352, *[item_93353], **kwargs_93354)
        
        # Processing the call keyword arguments (line 3131)
        kwargs_93356 = {}
        # Getting the type of 'atype' (line 3131)
        atype_93351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 12), 'atype', False)
        # Calling atype(args, kwargs) (line 3131)
        atype_call_result_93357 = invoke(stypy.reporting.localization.Localization(__file__, 3131, 12), atype_93351, *[str_call_result_93355], **kwargs_93356)
        
        # SSA branch for the except part of a try statement (line 3130)
        # SSA branch for the except '<any exception>' branch of a try statement (line 3130)
        module_type_store.open_ssa_branch('except')
        
        # Call to get_type(...): (line 3133)
        # Processing the call arguments (line 3133)
        # Getting the type of 'item' (line 3133)
        item_93359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3133, 28), 'item', False)
        
        # Obtaining the type of the subscript
        # Getting the type of 'atype' (line 3133)
        atype_93360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3133, 40), 'atype', False)
        # Getting the type of 'tdict' (line 3133)
        tdict_93361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3133, 34), 'tdict', False)
        # Obtaining the member '__getitem__' of a type (line 3133)
        getitem___93362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3133, 34), tdict_93361, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3133)
        subscript_call_result_93363 = invoke(stypy.reporting.localization.Localization(__file__, 3133, 34), getitem___93362, atype_93360)
        
        # Processing the call keyword arguments (line 3133)
        kwargs_93364 = {}
        # Getting the type of 'get_type' (line 3133)
        get_type_93358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3133, 19), 'get_type', False)
        # Calling get_type(args, kwargs) (line 3133)
        get_type_call_result_93365 = invoke(stypy.reporting.localization.Localization(__file__, 3133, 19), get_type_93358, *[item_93359, subscript_call_result_93363], **kwargs_93364)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3133, 12), 'stypy_return_type', get_type_call_result_93365)
        # SSA join for try-except statement (line 3130)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'atype' (line 3134)
        atype_93366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 15), 'atype')
        # Assigning a type to the variable 'stypy_return_type' (line 3134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3134, 8), 'stypy_return_type', atype_93366)
        
        # ################# End of 'get_type(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_type' in the type store
        # Getting the type of 'stypy_return_type' (line 3128)
        stypy_return_type_93367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3128, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93367)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_type'
        return stypy_return_type_93367

    # Assigning a type to the variable 'get_type' (line 3128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3128, 4), 'get_type', get_type)

    @norecursion
    def get_justify(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_justify'
        module_type_store = module_type_store.open_function_context('get_justify', 3136, 4, False)
        
        # Passed parameters checking function
        get_justify.stypy_localization = localization
        get_justify.stypy_type_of_self = None
        get_justify.stypy_type_store = module_type_store
        get_justify.stypy_function_name = 'get_justify'
        get_justify.stypy_param_names_list = ['colname', 'column', 'precision']
        get_justify.stypy_varargs_param_name = None
        get_justify.stypy_kwargs_param_name = None
        get_justify.stypy_call_defaults = defaults
        get_justify.stypy_call_varargs = varargs
        get_justify.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'get_justify', ['colname', 'column', 'precision'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_justify', localization, ['colname', 'column', 'precision'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_justify(...)' code ##################

        
        # Assigning a Attribute to a Name (line 3137):
        
        # Assigning a Attribute to a Name (line 3137):
        
        # Assigning a Attribute to a Name (line 3137):
        # Getting the type of 'column' (line 3137)
        column_93368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3137, 16), 'column')
        # Obtaining the member 'dtype' of a type (line 3137)
        dtype_93369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3137, 16), column_93368, 'dtype')
        # Assigning a type to the variable 'ntype' (line 3137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3137, 8), 'ntype', dtype_93369)
        
        
        # Call to issubdtype(...): (line 3139)
        # Processing the call arguments (line 3139)
        # Getting the type of 'ntype' (line 3139)
        ntype_93372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3139, 25), 'ntype', False)
        # Getting the type of 'np' (line 3139)
        np_93373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3139, 32), 'np', False)
        # Obtaining the member 'character' of a type (line 3139)
        character_93374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3139, 32), np_93373, 'character')
        # Processing the call keyword arguments (line 3139)
        kwargs_93375 = {}
        # Getting the type of 'np' (line 3139)
        np_93370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3139, 11), 'np', False)
        # Obtaining the member 'issubdtype' of a type (line 3139)
        issubdtype_93371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3139, 11), np_93370, 'issubdtype')
        # Calling issubdtype(args, kwargs) (line 3139)
        issubdtype_call_result_93376 = invoke(stypy.reporting.localization.Localization(__file__, 3139, 11), issubdtype_93371, *[ntype_93372, character_93374], **kwargs_93375)
        
        # Testing the type of an if condition (line 3139)
        if_condition_93377 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3139, 8), issubdtype_call_result_93376)
        # Assigning a type to the variable 'if_condition_93377' (line 3139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3139, 8), 'if_condition_93377', if_condition_93377)
        # SSA begins for if statement (line 3139)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 3140):
        
        # Assigning a Call to a Name (line 3140):
        
        # Assigning a Call to a Name (line 3140):
        
        # Call to int(...): (line 3140)
        # Processing the call arguments (line 3140)
        
        # Obtaining the type of the subscript
        int_93379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3140, 40), 'int')
        slice_93380 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3140, 30), int_93379, None, None)
        # Getting the type of 'ntype' (line 3140)
        ntype_93381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3140, 30), 'ntype', False)
        # Obtaining the member 'str' of a type (line 3140)
        str_93382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3140, 30), ntype_93381, 'str')
        # Obtaining the member '__getitem__' of a type (line 3140)
        getitem___93383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3140, 30), str_93382, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3140)
        subscript_call_result_93384 = invoke(stypy.reporting.localization.Localization(__file__, 3140, 30), getitem___93383, slice_93380)
        
        # Processing the call keyword arguments (line 3140)
        kwargs_93385 = {}
        # Getting the type of 'int' (line 3140)
        int_93378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3140, 26), 'int', False)
        # Calling int(args, kwargs) (line 3140)
        int_call_result_93386 = invoke(stypy.reporting.localization.Localization(__file__, 3140, 26), int_93378, *[subscript_call_result_93384], **kwargs_93385)
        
        # Assigning a type to the variable 'fixed_width' (line 3140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3140, 12), 'fixed_width', int_call_result_93386)
        
        # Assigning a Call to a Name (line 3141):
        
        # Assigning a Call to a Name (line 3141):
        
        # Assigning a Call to a Name (line 3141):
        
        # Call to max(...): (line 3141)
        # Processing the call arguments (line 3141)
        
        # Call to len(...): (line 3141)
        # Processing the call arguments (line 3141)
        # Getting the type of 'colname' (line 3141)
        colname_93389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 29), 'colname', False)
        # Processing the call keyword arguments (line 3141)
        kwargs_93390 = {}
        # Getting the type of 'len' (line 3141)
        len_93388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 25), 'len', False)
        # Calling len(args, kwargs) (line 3141)
        len_call_result_93391 = invoke(stypy.reporting.localization.Localization(__file__, 3141, 25), len_93388, *[colname_93389], **kwargs_93390)
        
        # Getting the type of 'fixed_width' (line 3141)
        fixed_width_93392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 39), 'fixed_width', False)
        # Processing the call keyword arguments (line 3141)
        kwargs_93393 = {}
        # Getting the type of 'max' (line 3141)
        max_93387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 21), 'max', False)
        # Calling max(args, kwargs) (line 3141)
        max_call_result_93394 = invoke(stypy.reporting.localization.Localization(__file__, 3141, 21), max_93387, *[len_call_result_93391, fixed_width_93392], **kwargs_93393)
        
        # Assigning a type to the variable 'length' (line 3141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3141, 12), 'length', max_call_result_93394)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3142)
        tuple_93395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3142, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3142)
        # Adding element type (line 3142)
        int_93396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3142, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3142, 19), tuple_93395, int_93396)
        # Adding element type (line 3142)
        # Getting the type of 'length' (line 3142)
        length_93397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3142, 22), 'length')
        # Getting the type of 'padding' (line 3142)
        padding_93398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3142, 29), 'padding')
        # Applying the binary operator '+' (line 3142)
        result_add_93399 = python_operator(stypy.reporting.localization.Localization(__file__, 3142, 22), '+', length_93397, padding_93398)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3142, 19), tuple_93395, result_add_93399)
        # Adding element type (line 3142)
        unicode_93400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3142, 38), 'unicode', u'%s')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3142, 19), tuple_93395, unicode_93400)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3142, 12), 'stypy_return_type', tuple_93395)
        # SSA join for if statement (line 3139)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to issubdtype(...): (line 3144)
        # Processing the call arguments (line 3144)
        # Getting the type of 'ntype' (line 3144)
        ntype_93403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3144, 25), 'ntype', False)
        # Getting the type of 'np' (line 3144)
        np_93404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3144, 32), 'np', False)
        # Obtaining the member 'integer' of a type (line 3144)
        integer_93405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3144, 32), np_93404, 'integer')
        # Processing the call keyword arguments (line 3144)
        kwargs_93406 = {}
        # Getting the type of 'np' (line 3144)
        np_93401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3144, 11), 'np', False)
        # Obtaining the member 'issubdtype' of a type (line 3144)
        issubdtype_93402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3144, 11), np_93401, 'issubdtype')
        # Calling issubdtype(args, kwargs) (line 3144)
        issubdtype_call_result_93407 = invoke(stypy.reporting.localization.Localization(__file__, 3144, 11), issubdtype_93402, *[ntype_93403, integer_93405], **kwargs_93406)
        
        # Testing the type of an if condition (line 3144)
        if_condition_93408 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3144, 8), issubdtype_call_result_93407)
        # Assigning a type to the variable 'if_condition_93408' (line 3144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3144, 8), 'if_condition_93408', if_condition_93408)
        # SSA begins for if statement (line 3144)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 3145):
        
        # Assigning a Call to a Name (line 3145):
        
        # Assigning a Call to a Name (line 3145):
        
        # Call to max(...): (line 3145)
        # Processing the call arguments (line 3145)
        
        # Call to len(...): (line 3145)
        # Processing the call arguments (line 3145)
        # Getting the type of 'colname' (line 3145)
        colname_93411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3145, 29), 'colname', False)
        # Processing the call keyword arguments (line 3145)
        kwargs_93412 = {}
        # Getting the type of 'len' (line 3145)
        len_93410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3145, 25), 'len', False)
        # Calling len(args, kwargs) (line 3145)
        len_call_result_93413 = invoke(stypy.reporting.localization.Localization(__file__, 3145, 25), len_93410, *[colname_93411], **kwargs_93412)
        
        
        # Call to max(...): (line 3146)
        # Processing the call arguments (line 3146)
        
        # Call to list(...): (line 3146)
        # Processing the call arguments (line 3146)
        
        # Call to map(...): (line 3146)
        # Processing the call arguments (line 3146)
        # Getting the type of 'len' (line 3146)
        len_93418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 41), 'len', False)
        
        # Call to list(...): (line 3146)
        # Processing the call arguments (line 3146)
        
        # Call to map(...): (line 3146)
        # Processing the call arguments (line 3146)
        # Getting the type of 'str' (line 3146)
        str_93421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 55), 'str', False)
        # Getting the type of 'column' (line 3146)
        column_93422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 60), 'column', False)
        # Processing the call keyword arguments (line 3146)
        kwargs_93423 = {}
        # Getting the type of 'map' (line 3146)
        map_93420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 51), 'map', False)
        # Calling map(args, kwargs) (line 3146)
        map_call_result_93424 = invoke(stypy.reporting.localization.Localization(__file__, 3146, 51), map_93420, *[str_93421, column_93422], **kwargs_93423)
        
        # Processing the call keyword arguments (line 3146)
        kwargs_93425 = {}
        # Getting the type of 'list' (line 3146)
        list_93419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 46), 'list', False)
        # Calling list(args, kwargs) (line 3146)
        list_call_result_93426 = invoke(stypy.reporting.localization.Localization(__file__, 3146, 46), list_93419, *[map_call_result_93424], **kwargs_93425)
        
        # Processing the call keyword arguments (line 3146)
        kwargs_93427 = {}
        # Getting the type of 'map' (line 3146)
        map_93417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 37), 'map', False)
        # Calling map(args, kwargs) (line 3146)
        map_call_result_93428 = invoke(stypy.reporting.localization.Localization(__file__, 3146, 37), map_93417, *[len_93418, list_call_result_93426], **kwargs_93427)
        
        # Processing the call keyword arguments (line 3146)
        kwargs_93429 = {}
        # Getting the type of 'list' (line 3146)
        list_93416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 32), 'list', False)
        # Calling list(args, kwargs) (line 3146)
        list_call_result_93430 = invoke(stypy.reporting.localization.Localization(__file__, 3146, 32), list_93416, *[map_call_result_93428], **kwargs_93429)
        
        # Processing the call keyword arguments (line 3146)
        kwargs_93431 = {}
        # Getting the type of 'np' (line 3146)
        np_93414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 25), 'np', False)
        # Obtaining the member 'max' of a type (line 3146)
        max_93415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3146, 25), np_93414, 'max')
        # Calling max(args, kwargs) (line 3146)
        max_call_result_93432 = invoke(stypy.reporting.localization.Localization(__file__, 3146, 25), max_93415, *[list_call_result_93430], **kwargs_93431)
        
        # Processing the call keyword arguments (line 3145)
        kwargs_93433 = {}
        # Getting the type of 'max' (line 3145)
        max_93409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3145, 21), 'max', False)
        # Calling max(args, kwargs) (line 3145)
        max_call_result_93434 = invoke(stypy.reporting.localization.Localization(__file__, 3145, 21), max_93409, *[len_call_result_93413, max_call_result_93432], **kwargs_93433)
        
        # Assigning a type to the variable 'length' (line 3145)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3145, 12), 'length', max_call_result_93434)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3147)
        tuple_93435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3147, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3147)
        # Adding element type (line 3147)
        int_93436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3147, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3147, 19), tuple_93435, int_93436)
        # Adding element type (line 3147)
        # Getting the type of 'length' (line 3147)
        length_93437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 22), 'length')
        # Getting the type of 'padding' (line 3147)
        padding_93438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 29), 'padding')
        # Applying the binary operator '+' (line 3147)
        result_add_93439 = python_operator(stypy.reporting.localization.Localization(__file__, 3147, 22), '+', length_93437, padding_93438)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3147, 19), tuple_93435, result_add_93439)
        # Adding element type (line 3147)
        unicode_93440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3147, 38), 'unicode', u'%d')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3147, 19), tuple_93435, unicode_93440)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3147, 12), 'stypy_return_type', tuple_93435)
        # SSA join for if statement (line 3144)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to issubdtype(...): (line 3149)
        # Processing the call arguments (line 3149)
        # Getting the type of 'ntype' (line 3149)
        ntype_93443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3149, 25), 'ntype', False)
        # Getting the type of 'np' (line 3149)
        np_93444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3149, 32), 'np', False)
        # Obtaining the member 'floating' of a type (line 3149)
        floating_93445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3149, 32), np_93444, 'floating')
        # Processing the call keyword arguments (line 3149)
        kwargs_93446 = {}
        # Getting the type of 'np' (line 3149)
        np_93441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3149, 11), 'np', False)
        # Obtaining the member 'issubdtype' of a type (line 3149)
        issubdtype_93442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3149, 11), np_93441, 'issubdtype')
        # Calling issubdtype(args, kwargs) (line 3149)
        issubdtype_call_result_93447 = invoke(stypy.reporting.localization.Localization(__file__, 3149, 11), issubdtype_93442, *[ntype_93443, floating_93445], **kwargs_93446)
        
        # Testing the type of an if condition (line 3149)
        if_condition_93448 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3149, 8), issubdtype_call_result_93447)
        # Assigning a type to the variable 'if_condition_93448' (line 3149)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3149, 8), 'if_condition_93448', if_condition_93448)
        # SSA begins for if statement (line 3149)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 3150):
        
        # Assigning a BinOp to a Name (line 3150):
        
        # Assigning a BinOp to a Name (line 3150):
        unicode_93449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3150, 18), 'unicode', u'%.')
        
        # Call to str(...): (line 3150)
        # Processing the call arguments (line 3150)
        # Getting the type of 'precision' (line 3150)
        precision_93451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3150, 29), 'precision', False)
        # Processing the call keyword arguments (line 3150)
        kwargs_93452 = {}
        # Getting the type of 'str' (line 3150)
        str_93450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3150, 25), 'str', False)
        # Calling str(args, kwargs) (line 3150)
        str_call_result_93453 = invoke(stypy.reporting.localization.Localization(__file__, 3150, 25), str_93450, *[precision_93451], **kwargs_93452)
        
        # Applying the binary operator '+' (line 3150)
        result_add_93454 = python_operator(stypy.reporting.localization.Localization(__file__, 3150, 18), '+', unicode_93449, str_call_result_93453)
        
        unicode_93455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3150, 42), 'unicode', u'f')
        # Applying the binary operator '+' (line 3150)
        result_add_93456 = python_operator(stypy.reporting.localization.Localization(__file__, 3150, 40), '+', result_add_93454, unicode_93455)
        
        # Assigning a type to the variable 'fmt' (line 3150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3150, 12), 'fmt', result_add_93456)
        
        # Assigning a Call to a Name (line 3151):
        
        # Assigning a Call to a Name (line 3151):
        
        # Assigning a Call to a Name (line 3151):
        
        # Call to max(...): (line 3151)
        # Processing the call arguments (line 3151)
        
        # Call to len(...): (line 3152)
        # Processing the call arguments (line 3152)
        # Getting the type of 'colname' (line 3152)
        colname_93459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3152, 20), 'colname', False)
        # Processing the call keyword arguments (line 3152)
        kwargs_93460 = {}
        # Getting the type of 'len' (line 3152)
        len_93458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3152, 16), 'len', False)
        # Calling len(args, kwargs) (line 3152)
        len_call_result_93461 = invoke(stypy.reporting.localization.Localization(__file__, 3152, 16), len_93458, *[colname_93459], **kwargs_93460)
        
        
        # Call to max(...): (line 3153)
        # Processing the call arguments (line 3153)
        
        # Call to list(...): (line 3153)
        # Processing the call arguments (line 3153)
        
        # Call to map(...): (line 3153)
        # Processing the call arguments (line 3153)
        # Getting the type of 'len' (line 3153)
        len_93466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3153, 32), 'len', False)
        
        # Call to list(...): (line 3153)
        # Processing the call arguments (line 3153)
        
        # Call to map(...): (line 3153)
        # Processing the call arguments (line 3153)

        @norecursion
        def _stypy_temp_lambda_18(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_18'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_18', 3153, 46, True)
            # Passed parameters checking function
            _stypy_temp_lambda_18.stypy_localization = localization
            _stypy_temp_lambda_18.stypy_type_of_self = None
            _stypy_temp_lambda_18.stypy_type_store = module_type_store
            _stypy_temp_lambda_18.stypy_function_name = '_stypy_temp_lambda_18'
            _stypy_temp_lambda_18.stypy_param_names_list = ['x']
            _stypy_temp_lambda_18.stypy_varargs_param_name = None
            _stypy_temp_lambda_18.stypy_kwargs_param_name = None
            _stypy_temp_lambda_18.stypy_call_defaults = defaults
            _stypy_temp_lambda_18.stypy_call_varargs = varargs
            _stypy_temp_lambda_18.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_18', ['x'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_18', ['x'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            # Getting the type of 'fmt' (line 3153)
            fmt_93469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3153, 56), 'fmt', False)
            # Getting the type of 'x' (line 3153)
            x_93470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3153, 62), 'x', False)
            # Applying the binary operator '%' (line 3153)
            result_mod_93471 = python_operator(stypy.reporting.localization.Localization(__file__, 3153, 56), '%', fmt_93469, x_93470)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 3153)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3153, 46), 'stypy_return_type', result_mod_93471)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_18' in the type store
            # Getting the type of 'stypy_return_type' (line 3153)
            stypy_return_type_93472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3153, 46), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_93472)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_18'
            return stypy_return_type_93472

        # Assigning a type to the variable '_stypy_temp_lambda_18' (line 3153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3153, 46), '_stypy_temp_lambda_18', _stypy_temp_lambda_18)
        # Getting the type of '_stypy_temp_lambda_18' (line 3153)
        _stypy_temp_lambda_18_93473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3153, 46), '_stypy_temp_lambda_18')
        # Getting the type of 'column' (line 3153)
        column_93474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3153, 65), 'column', False)
        # Processing the call keyword arguments (line 3153)
        kwargs_93475 = {}
        # Getting the type of 'map' (line 3153)
        map_93468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3153, 42), 'map', False)
        # Calling map(args, kwargs) (line 3153)
        map_call_result_93476 = invoke(stypy.reporting.localization.Localization(__file__, 3153, 42), map_93468, *[_stypy_temp_lambda_18_93473, column_93474], **kwargs_93475)
        
        # Processing the call keyword arguments (line 3153)
        kwargs_93477 = {}
        # Getting the type of 'list' (line 3153)
        list_93467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3153, 37), 'list', False)
        # Calling list(args, kwargs) (line 3153)
        list_call_result_93478 = invoke(stypy.reporting.localization.Localization(__file__, 3153, 37), list_93467, *[map_call_result_93476], **kwargs_93477)
        
        # Processing the call keyword arguments (line 3153)
        kwargs_93479 = {}
        # Getting the type of 'map' (line 3153)
        map_93465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3153, 28), 'map', False)
        # Calling map(args, kwargs) (line 3153)
        map_call_result_93480 = invoke(stypy.reporting.localization.Localization(__file__, 3153, 28), map_93465, *[len_93466, list_call_result_93478], **kwargs_93479)
        
        # Processing the call keyword arguments (line 3153)
        kwargs_93481 = {}
        # Getting the type of 'list' (line 3153)
        list_93464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3153, 23), 'list', False)
        # Calling list(args, kwargs) (line 3153)
        list_call_result_93482 = invoke(stypy.reporting.localization.Localization(__file__, 3153, 23), list_93464, *[map_call_result_93480], **kwargs_93481)
        
        # Processing the call keyword arguments (line 3153)
        kwargs_93483 = {}
        # Getting the type of 'np' (line 3153)
        np_93462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3153, 16), 'np', False)
        # Obtaining the member 'max' of a type (line 3153)
        max_93463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3153, 16), np_93462, 'max')
        # Calling max(args, kwargs) (line 3153)
        max_call_result_93484 = invoke(stypy.reporting.localization.Localization(__file__, 3153, 16), max_93463, *[list_call_result_93482], **kwargs_93483)
        
        # Processing the call keyword arguments (line 3151)
        kwargs_93485 = {}
        # Getting the type of 'max' (line 3151)
        max_93457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3151, 21), 'max', False)
        # Calling max(args, kwargs) (line 3151)
        max_call_result_93486 = invoke(stypy.reporting.localization.Localization(__file__, 3151, 21), max_93457, *[len_call_result_93461, max_call_result_93484], **kwargs_93485)
        
        # Assigning a type to the variable 'length' (line 3151)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3151, 12), 'length', max_call_result_93486)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3155)
        tuple_93487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3155, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3155)
        # Adding element type (line 3155)
        int_93488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3155, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3155, 19), tuple_93487, int_93488)
        # Adding element type (line 3155)
        # Getting the type of 'length' (line 3155)
        length_93489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3155, 22), 'length')
        # Getting the type of 'padding' (line 3155)
        padding_93490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3155, 29), 'padding')
        # Applying the binary operator '+' (line 3155)
        result_add_93491 = python_operator(stypy.reporting.localization.Localization(__file__, 3155, 22), '+', length_93489, padding_93490)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3155, 19), tuple_93487, result_add_93491)
        # Adding element type (line 3155)
        # Getting the type of 'fmt' (line 3155)
        fmt_93492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3155, 38), 'fmt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3155, 19), tuple_93487, fmt_93492)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3155, 12), 'stypy_return_type', tuple_93487)
        # SSA join for if statement (line 3149)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 3157)
        tuple_93493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3157, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3157)
        # Adding element type (line 3157)
        int_93494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3157, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3157, 16), tuple_93493, int_93494)
        # Adding element type (line 3157)
        
        # Call to max(...): (line 3158)
        # Processing the call arguments (line 3158)
        
        # Call to len(...): (line 3158)
        # Processing the call arguments (line 3158)
        # Getting the type of 'colname' (line 3158)
        colname_93497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3158, 24), 'colname', False)
        # Processing the call keyword arguments (line 3158)
        kwargs_93498 = {}
        # Getting the type of 'len' (line 3158)
        len_93496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3158, 20), 'len', False)
        # Calling len(args, kwargs) (line 3158)
        len_call_result_93499 = invoke(stypy.reporting.localization.Localization(__file__, 3158, 20), len_93496, *[colname_93497], **kwargs_93498)
        
        
        # Call to max(...): (line 3159)
        # Processing the call arguments (line 3159)
        
        # Call to list(...): (line 3159)
        # Processing the call arguments (line 3159)
        
        # Call to map(...): (line 3159)
        # Processing the call arguments (line 3159)
        # Getting the type of 'len' (line 3159)
        len_93504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 36), 'len', False)
        
        # Call to list(...): (line 3159)
        # Processing the call arguments (line 3159)
        
        # Call to map(...): (line 3159)
        # Processing the call arguments (line 3159)
        # Getting the type of 'str' (line 3159)
        str_93507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 50), 'str', False)
        # Getting the type of 'column' (line 3159)
        column_93508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 55), 'column', False)
        # Processing the call keyword arguments (line 3159)
        kwargs_93509 = {}
        # Getting the type of 'map' (line 3159)
        map_93506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 46), 'map', False)
        # Calling map(args, kwargs) (line 3159)
        map_call_result_93510 = invoke(stypy.reporting.localization.Localization(__file__, 3159, 46), map_93506, *[str_93507, column_93508], **kwargs_93509)
        
        # Processing the call keyword arguments (line 3159)
        kwargs_93511 = {}
        # Getting the type of 'list' (line 3159)
        list_93505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 41), 'list', False)
        # Calling list(args, kwargs) (line 3159)
        list_call_result_93512 = invoke(stypy.reporting.localization.Localization(__file__, 3159, 41), list_93505, *[map_call_result_93510], **kwargs_93511)
        
        # Processing the call keyword arguments (line 3159)
        kwargs_93513 = {}
        # Getting the type of 'map' (line 3159)
        map_93503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 32), 'map', False)
        # Calling map(args, kwargs) (line 3159)
        map_call_result_93514 = invoke(stypy.reporting.localization.Localization(__file__, 3159, 32), map_93503, *[len_93504, list_call_result_93512], **kwargs_93513)
        
        # Processing the call keyword arguments (line 3159)
        kwargs_93515 = {}
        # Getting the type of 'list' (line 3159)
        list_93502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 27), 'list', False)
        # Calling list(args, kwargs) (line 3159)
        list_call_result_93516 = invoke(stypy.reporting.localization.Localization(__file__, 3159, 27), list_93502, *[map_call_result_93514], **kwargs_93515)
        
        # Processing the call keyword arguments (line 3159)
        kwargs_93517 = {}
        # Getting the type of 'np' (line 3159)
        np_93500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 20), 'np', False)
        # Obtaining the member 'max' of a type (line 3159)
        max_93501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3159, 20), np_93500, 'max')
        # Calling max(args, kwargs) (line 3159)
        max_call_result_93518 = invoke(stypy.reporting.localization.Localization(__file__, 3159, 20), max_93501, *[list_call_result_93516], **kwargs_93517)
        
        # Processing the call keyword arguments (line 3158)
        kwargs_93519 = {}
        # Getting the type of 'max' (line 3158)
        max_93495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3158, 16), 'max', False)
        # Calling max(args, kwargs) (line 3158)
        max_call_result_93520 = invoke(stypy.reporting.localization.Localization(__file__, 3158, 16), max_93495, *[len_call_result_93499, max_call_result_93518], **kwargs_93519)
        
        # Getting the type of 'padding' (line 3159)
        padding_93521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 68), 'padding')
        # Applying the binary operator '+' (line 3158)
        result_add_93522 = python_operator(stypy.reporting.localization.Localization(__file__, 3158, 16), '+', max_call_result_93520, padding_93521)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3157, 16), tuple_93493, result_add_93522)
        # Adding element type (line 3157)
        unicode_93523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3160, 16), 'unicode', u'%s')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3157, 16), tuple_93493, unicode_93523)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3157)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3157, 8), 'stypy_return_type', tuple_93493)
        
        # ################# End of 'get_justify(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_justify' in the type store
        # Getting the type of 'stypy_return_type' (line 3136)
        stypy_return_type_93524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93524)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_justify'
        return stypy_return_type_93524

    # Assigning a type to the variable 'get_justify' (line 3136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3136, 4), 'get_justify', get_justify)
    
    # Type idiom detected: calculating its left and rigth part (line 3162)
    # Getting the type of 'header' (line 3162)
    header_93525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3162, 7), 'header')
    # Getting the type of 'None' (line 3162)
    None_93526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3162, 17), 'None')
    
    (may_be_93527, more_types_in_union_93528) = may_be_none(header_93525, None_93526)

    if may_be_93527:

        if more_types_in_union_93528:
            # Runtime conditional SSA (line 3162)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Attribute to a Name (line 3163):
        
        # Assigning a Attribute to a Name (line 3163):
        
        # Assigning a Attribute to a Name (line 3163):
        # Getting the type of 'r' (line 3163)
        r_93529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3163, 17), 'r')
        # Obtaining the member 'dtype' of a type (line 3163)
        dtype_93530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3163, 17), r_93529, 'dtype')
        # Obtaining the member 'names' of a type (line 3163)
        names_93531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3163, 17), dtype_93530, 'names')
        # Assigning a type to the variable 'header' (line 3163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3163, 8), 'header', names_93531)

        if more_types_in_union_93528:
            # SSA join for if statement (line 3162)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a ListComp to a Name (line 3165):
    
    # Assigning a ListComp to a Name (line 3165):
    
    # Assigning a ListComp to a Name (line 3165):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to enumerate(...): (line 3167)
    # Processing the call arguments (line 3167)
    # Getting the type of 'r' (line 3167)
    r_93549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3167, 52), 'r', False)
    # Obtaining the member 'dtype' of a type (line 3167)
    dtype_93550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3167, 52), r_93549, 'dtype')
    # Obtaining the member 'names' of a type (line 3167)
    names_93551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3167, 52), dtype_93550, 'names')
    # Processing the call keyword arguments (line 3167)
    kwargs_93552 = {}
    # Getting the type of 'enumerate' (line 3167)
    enumerate_93548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3167, 42), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 3167)
    enumerate_call_result_93553 = invoke(stypy.reporting.localization.Localization(__file__, 3167, 42), enumerate_93548, *[names_93551], **kwargs_93552)
    
    comprehension_93554 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3165, 24), enumerate_call_result_93553)
    # Assigning a type to the variable 'i' (line 3165)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3165, 24), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3165, 24), comprehension_93554))
    # Assigning a type to the variable 'colname' (line 3165)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3165, 24), 'colname', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3165, 24), comprehension_93554))
    
    # Call to get_justify(...): (line 3165)
    # Processing the call arguments (line 3165)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 3165)
    i_93533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3165, 43), 'i', False)
    # Getting the type of 'header' (line 3165)
    header_93534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3165, 36), 'header', False)
    # Obtaining the member '__getitem__' of a type (line 3165)
    getitem___93535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3165, 36), header_93534, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3165)
    subscript_call_result_93536 = invoke(stypy.reporting.localization.Localization(__file__, 3165, 36), getitem___93535, i_93533)
    
    
    # Call to __getitem__(...): (line 3165)
    # Processing the call arguments (line 3165)
    # Getting the type of 'colname' (line 3165)
    colname_93539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3165, 61), 'colname', False)
    # Processing the call keyword arguments (line 3165)
    kwargs_93540 = {}
    # Getting the type of 'r' (line 3165)
    r_93537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3165, 47), 'r', False)
    # Obtaining the member '__getitem__' of a type (line 3165)
    getitem___93538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3165, 47), r_93537, '__getitem__')
    # Calling __getitem__(args, kwargs) (line 3165)
    getitem___call_result_93541 = invoke(stypy.reporting.localization.Localization(__file__, 3165, 47), getitem___93538, *[colname_93539], **kwargs_93540)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 3166)
    i_93542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3166, 46), 'i', False)
    # Getting the type of 'precision' (line 3166)
    precision_93543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3166, 36), 'precision', False)
    # Obtaining the member '__getitem__' of a type (line 3166)
    getitem___93544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3166, 36), precision_93543, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3166)
    subscript_call_result_93545 = invoke(stypy.reporting.localization.Localization(__file__, 3166, 36), getitem___93544, i_93542)
    
    # Processing the call keyword arguments (line 3165)
    kwargs_93546 = {}
    # Getting the type of 'get_justify' (line 3165)
    get_justify_93532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3165, 24), 'get_justify', False)
    # Calling get_justify(args, kwargs) (line 3165)
    get_justify_call_result_93547 = invoke(stypy.reporting.localization.Localization(__file__, 3165, 24), get_justify_93532, *[subscript_call_result_93536, getitem___call_result_93541, subscript_call_result_93545], **kwargs_93546)
    
    list_93555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3165, 24), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3165, 24), list_93555, get_justify_call_result_93547)
    # Assigning a type to the variable 'justify_pad_prec' (line 3165)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3165, 4), 'justify_pad_prec', list_93555)
    
    # Assigning a List to a Name (line 3169):
    
    # Assigning a List to a Name (line 3169):
    
    # Assigning a List to a Name (line 3169):
    
    # Obtaining an instance of the builtin type 'list' (line 3169)
    list_93556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3169, 30), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3169)
    
    # Assigning a type to the variable 'justify_pad_prec_spacer' (line 3169)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3169, 4), 'justify_pad_prec_spacer', list_93556)
    
    
    # Call to range(...): (line 3170)
    # Processing the call arguments (line 3170)
    
    # Call to len(...): (line 3170)
    # Processing the call arguments (line 3170)
    # Getting the type of 'justify_pad_prec' (line 3170)
    justify_pad_prec_93559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3170, 23), 'justify_pad_prec', False)
    # Processing the call keyword arguments (line 3170)
    kwargs_93560 = {}
    # Getting the type of 'len' (line 3170)
    len_93558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3170, 19), 'len', False)
    # Calling len(args, kwargs) (line 3170)
    len_call_result_93561 = invoke(stypy.reporting.localization.Localization(__file__, 3170, 19), len_93558, *[justify_pad_prec_93559], **kwargs_93560)
    
    # Processing the call keyword arguments (line 3170)
    kwargs_93562 = {}
    # Getting the type of 'range' (line 3170)
    range_93557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3170, 13), 'range', False)
    # Calling range(args, kwargs) (line 3170)
    range_call_result_93563 = invoke(stypy.reporting.localization.Localization(__file__, 3170, 13), range_93557, *[len_call_result_93561], **kwargs_93562)
    
    # Testing the type of a for loop iterable (line 3170)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3170, 4), range_call_result_93563)
    # Getting the type of the for loop variable (line 3170)
    for_loop_var_93564 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3170, 4), range_call_result_93563)
    # Assigning a type to the variable 'i' (line 3170)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3170, 4), 'i', for_loop_var_93564)
    # SSA begins for a for statement (line 3170)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Tuple (line 3171):
    
    # Assigning a Subscript to a Name (line 3171):
    
    # Assigning a Subscript to a Name (line 3171):
    
    # Obtaining the type of the subscript
    int_93565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3171, 8), 'int')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 3171)
    i_93566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3171, 43), 'i')
    # Getting the type of 'justify_pad_prec' (line 3171)
    justify_pad_prec_93567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3171, 26), 'justify_pad_prec')
    # Obtaining the member '__getitem__' of a type (line 3171)
    getitem___93568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3171, 26), justify_pad_prec_93567, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3171)
    subscript_call_result_93569 = invoke(stypy.reporting.localization.Localization(__file__, 3171, 26), getitem___93568, i_93566)
    
    # Obtaining the member '__getitem__' of a type (line 3171)
    getitem___93570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3171, 8), subscript_call_result_93569, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3171)
    subscript_call_result_93571 = invoke(stypy.reporting.localization.Localization(__file__, 3171, 8), getitem___93570, int_93565)
    
    # Assigning a type to the variable 'tuple_var_assignment_87281' (line 3171)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3171, 8), 'tuple_var_assignment_87281', subscript_call_result_93571)
    
    # Assigning a Subscript to a Name (line 3171):
    
    # Assigning a Subscript to a Name (line 3171):
    
    # Obtaining the type of the subscript
    int_93572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3171, 8), 'int')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 3171)
    i_93573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3171, 43), 'i')
    # Getting the type of 'justify_pad_prec' (line 3171)
    justify_pad_prec_93574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3171, 26), 'justify_pad_prec')
    # Obtaining the member '__getitem__' of a type (line 3171)
    getitem___93575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3171, 26), justify_pad_prec_93574, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3171)
    subscript_call_result_93576 = invoke(stypy.reporting.localization.Localization(__file__, 3171, 26), getitem___93575, i_93573)
    
    # Obtaining the member '__getitem__' of a type (line 3171)
    getitem___93577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3171, 8), subscript_call_result_93576, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3171)
    subscript_call_result_93578 = invoke(stypy.reporting.localization.Localization(__file__, 3171, 8), getitem___93577, int_93572)
    
    # Assigning a type to the variable 'tuple_var_assignment_87282' (line 3171)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3171, 8), 'tuple_var_assignment_87282', subscript_call_result_93578)
    
    # Assigning a Subscript to a Name (line 3171):
    
    # Assigning a Subscript to a Name (line 3171):
    
    # Obtaining the type of the subscript
    int_93579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3171, 8), 'int')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 3171)
    i_93580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3171, 43), 'i')
    # Getting the type of 'justify_pad_prec' (line 3171)
    justify_pad_prec_93581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3171, 26), 'justify_pad_prec')
    # Obtaining the member '__getitem__' of a type (line 3171)
    getitem___93582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3171, 26), justify_pad_prec_93581, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3171)
    subscript_call_result_93583 = invoke(stypy.reporting.localization.Localization(__file__, 3171, 26), getitem___93582, i_93580)
    
    # Obtaining the member '__getitem__' of a type (line 3171)
    getitem___93584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3171, 8), subscript_call_result_93583, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3171)
    subscript_call_result_93585 = invoke(stypy.reporting.localization.Localization(__file__, 3171, 8), getitem___93584, int_93579)
    
    # Assigning a type to the variable 'tuple_var_assignment_87283' (line 3171)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3171, 8), 'tuple_var_assignment_87283', subscript_call_result_93585)
    
    # Assigning a Name to a Name (line 3171):
    
    # Assigning a Name to a Name (line 3171):
    # Getting the type of 'tuple_var_assignment_87281' (line 3171)
    tuple_var_assignment_87281_93586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3171, 8), 'tuple_var_assignment_87281')
    # Assigning a type to the variable 'just' (line 3171)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3171, 8), 'just', tuple_var_assignment_87281_93586)
    
    # Assigning a Name to a Name (line 3171):
    
    # Assigning a Name to a Name (line 3171):
    # Getting the type of 'tuple_var_assignment_87282' (line 3171)
    tuple_var_assignment_87282_93587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3171, 8), 'tuple_var_assignment_87282')
    # Assigning a type to the variable 'pad' (line 3171)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3171, 14), 'pad', tuple_var_assignment_87282_93587)
    
    # Assigning a Name to a Name (line 3171):
    
    # Assigning a Name to a Name (line 3171):
    # Getting the type of 'tuple_var_assignment_87283' (line 3171)
    tuple_var_assignment_87283_93588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3171, 8), 'tuple_var_assignment_87283')
    # Assigning a type to the variable 'prec' (line 3171)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3171, 19), 'prec', tuple_var_assignment_87283_93588)
    
    
    # Getting the type of 'i' (line 3172)
    i_93589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3172, 11), 'i')
    int_93590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3172, 16), 'int')
    # Applying the binary operator '==' (line 3172)
    result_eq_93591 = python_operator(stypy.reporting.localization.Localization(__file__, 3172, 11), '==', i_93589, int_93590)
    
    # Testing the type of an if condition (line 3172)
    if_condition_93592 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3172, 8), result_eq_93591)
    # Assigning a type to the variable 'if_condition_93592' (line 3172)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3172, 8), 'if_condition_93592', if_condition_93592)
    # SSA begins for if statement (line 3172)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 3173)
    # Processing the call arguments (line 3173)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3173)
    tuple_93595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3173, 44), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3173)
    # Adding element type (line 3173)
    # Getting the type of 'just' (line 3173)
    just_93596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3173, 44), 'just', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3173, 44), tuple_93595, just_93596)
    # Adding element type (line 3173)
    # Getting the type of 'pad' (line 3173)
    pad_93597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3173, 50), 'pad', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3173, 44), tuple_93595, pad_93597)
    # Adding element type (line 3173)
    # Getting the type of 'prec' (line 3173)
    prec_93598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3173, 55), 'prec', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3173, 44), tuple_93595, prec_93598)
    # Adding element type (line 3173)
    int_93599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3173, 61), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3173, 44), tuple_93595, int_93599)
    
    # Processing the call keyword arguments (line 3173)
    kwargs_93600 = {}
    # Getting the type of 'justify_pad_prec_spacer' (line 3173)
    justify_pad_prec_spacer_93593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3173, 12), 'justify_pad_prec_spacer', False)
    # Obtaining the member 'append' of a type (line 3173)
    append_93594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3173, 12), justify_pad_prec_spacer_93593, 'append')
    # Calling append(args, kwargs) (line 3173)
    append_call_result_93601 = invoke(stypy.reporting.localization.Localization(__file__, 3173, 12), append_93594, *[tuple_93595], **kwargs_93600)
    
    # SSA branch for the else part of an if statement (line 3172)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Tuple (line 3175):
    
    # Assigning a Subscript to a Name (line 3175):
    
    # Assigning a Subscript to a Name (line 3175):
    
    # Obtaining the type of the subscript
    int_93602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3175, 12), 'int')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 3175)
    i_93603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3175, 50), 'i')
    int_93604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3175, 52), 'int')
    # Applying the binary operator '-' (line 3175)
    result_sub_93605 = python_operator(stypy.reporting.localization.Localization(__file__, 3175, 50), '-', i_93603, int_93604)
    
    # Getting the type of 'justify_pad_prec' (line 3175)
    justify_pad_prec_93606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3175, 33), 'justify_pad_prec')
    # Obtaining the member '__getitem__' of a type (line 3175)
    getitem___93607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3175, 33), justify_pad_prec_93606, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3175)
    subscript_call_result_93608 = invoke(stypy.reporting.localization.Localization(__file__, 3175, 33), getitem___93607, result_sub_93605)
    
    # Obtaining the member '__getitem__' of a type (line 3175)
    getitem___93609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3175, 12), subscript_call_result_93608, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3175)
    subscript_call_result_93610 = invoke(stypy.reporting.localization.Localization(__file__, 3175, 12), getitem___93609, int_93602)
    
    # Assigning a type to the variable 'tuple_var_assignment_87284' (line 3175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3175, 12), 'tuple_var_assignment_87284', subscript_call_result_93610)
    
    # Assigning a Subscript to a Name (line 3175):
    
    # Assigning a Subscript to a Name (line 3175):
    
    # Obtaining the type of the subscript
    int_93611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3175, 12), 'int')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 3175)
    i_93612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3175, 50), 'i')
    int_93613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3175, 52), 'int')
    # Applying the binary operator '-' (line 3175)
    result_sub_93614 = python_operator(stypy.reporting.localization.Localization(__file__, 3175, 50), '-', i_93612, int_93613)
    
    # Getting the type of 'justify_pad_prec' (line 3175)
    justify_pad_prec_93615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3175, 33), 'justify_pad_prec')
    # Obtaining the member '__getitem__' of a type (line 3175)
    getitem___93616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3175, 33), justify_pad_prec_93615, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3175)
    subscript_call_result_93617 = invoke(stypy.reporting.localization.Localization(__file__, 3175, 33), getitem___93616, result_sub_93614)
    
    # Obtaining the member '__getitem__' of a type (line 3175)
    getitem___93618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3175, 12), subscript_call_result_93617, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3175)
    subscript_call_result_93619 = invoke(stypy.reporting.localization.Localization(__file__, 3175, 12), getitem___93618, int_93611)
    
    # Assigning a type to the variable 'tuple_var_assignment_87285' (line 3175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3175, 12), 'tuple_var_assignment_87285', subscript_call_result_93619)
    
    # Assigning a Subscript to a Name (line 3175):
    
    # Assigning a Subscript to a Name (line 3175):
    
    # Obtaining the type of the subscript
    int_93620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3175, 12), 'int')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 3175)
    i_93621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3175, 50), 'i')
    int_93622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3175, 52), 'int')
    # Applying the binary operator '-' (line 3175)
    result_sub_93623 = python_operator(stypy.reporting.localization.Localization(__file__, 3175, 50), '-', i_93621, int_93622)
    
    # Getting the type of 'justify_pad_prec' (line 3175)
    justify_pad_prec_93624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3175, 33), 'justify_pad_prec')
    # Obtaining the member '__getitem__' of a type (line 3175)
    getitem___93625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3175, 33), justify_pad_prec_93624, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3175)
    subscript_call_result_93626 = invoke(stypy.reporting.localization.Localization(__file__, 3175, 33), getitem___93625, result_sub_93623)
    
    # Obtaining the member '__getitem__' of a type (line 3175)
    getitem___93627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3175, 12), subscript_call_result_93626, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3175)
    subscript_call_result_93628 = invoke(stypy.reporting.localization.Localization(__file__, 3175, 12), getitem___93627, int_93620)
    
    # Assigning a type to the variable 'tuple_var_assignment_87286' (line 3175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3175, 12), 'tuple_var_assignment_87286', subscript_call_result_93628)
    
    # Assigning a Name to a Name (line 3175):
    
    # Assigning a Name to a Name (line 3175):
    # Getting the type of 'tuple_var_assignment_87284' (line 3175)
    tuple_var_assignment_87284_93629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3175, 12), 'tuple_var_assignment_87284')
    # Assigning a type to the variable 'pjust' (line 3175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3175, 12), 'pjust', tuple_var_assignment_87284_93629)
    
    # Assigning a Name to a Name (line 3175):
    
    # Assigning a Name to a Name (line 3175):
    # Getting the type of 'tuple_var_assignment_87285' (line 3175)
    tuple_var_assignment_87285_93630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3175, 12), 'tuple_var_assignment_87285')
    # Assigning a type to the variable 'ppad' (line 3175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3175, 19), 'ppad', tuple_var_assignment_87285_93630)
    
    # Assigning a Name to a Name (line 3175):
    
    # Assigning a Name to a Name (line 3175):
    # Getting the type of 'tuple_var_assignment_87286' (line 3175)
    tuple_var_assignment_87286_93631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3175, 12), 'tuple_var_assignment_87286')
    # Assigning a type to the variable 'pprec' (line 3175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3175, 25), 'pprec', tuple_var_assignment_87286_93631)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'pjust' (line 3176)
    pjust_93632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3176, 15), 'pjust')
    int_93633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3176, 24), 'int')
    # Applying the binary operator '==' (line 3176)
    result_eq_93634 = python_operator(stypy.reporting.localization.Localization(__file__, 3176, 15), '==', pjust_93632, int_93633)
    
    
    # Getting the type of 'just' (line 3176)
    just_93635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3176, 30), 'just')
    int_93636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3176, 38), 'int')
    # Applying the binary operator '==' (line 3176)
    result_eq_93637 = python_operator(stypy.reporting.localization.Localization(__file__, 3176, 30), '==', just_93635, int_93636)
    
    # Applying the binary operator 'and' (line 3176)
    result_and_keyword_93638 = python_operator(stypy.reporting.localization.Localization(__file__, 3176, 15), 'and', result_eq_93634, result_eq_93637)
    
    # Testing the type of an if condition (line 3176)
    if_condition_93639 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3176, 12), result_and_keyword_93638)
    # Assigning a type to the variable 'if_condition_93639' (line 3176)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3176, 12), 'if_condition_93639', if_condition_93639)
    # SSA begins for if statement (line 3176)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 3177)
    # Processing the call arguments (line 3177)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3177)
    tuple_93642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3177, 48), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3177)
    # Adding element type (line 3177)
    # Getting the type of 'just' (line 3177)
    just_93643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3177, 48), 'just', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3177, 48), tuple_93642, just_93643)
    # Adding element type (line 3177)
    # Getting the type of 'pad' (line 3177)
    pad_93644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3177, 54), 'pad', False)
    # Getting the type of 'padding' (line 3177)
    padding_93645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3177, 58), 'padding', False)
    # Applying the binary operator '-' (line 3177)
    result_sub_93646 = python_operator(stypy.reporting.localization.Localization(__file__, 3177, 54), '-', pad_93644, padding_93645)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3177, 48), tuple_93642, result_sub_93646)
    # Adding element type (line 3177)
    # Getting the type of 'prec' (line 3177)
    prec_93647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3177, 67), 'prec', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3177, 48), tuple_93642, prec_93647)
    # Adding element type (line 3177)
    int_93648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3177, 73), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3177, 48), tuple_93642, int_93648)
    
    # Processing the call keyword arguments (line 3177)
    kwargs_93649 = {}
    # Getting the type of 'justify_pad_prec_spacer' (line 3177)
    justify_pad_prec_spacer_93640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3177, 16), 'justify_pad_prec_spacer', False)
    # Obtaining the member 'append' of a type (line 3177)
    append_93641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3177, 16), justify_pad_prec_spacer_93640, 'append')
    # Calling append(args, kwargs) (line 3177)
    append_call_result_93650 = invoke(stypy.reporting.localization.Localization(__file__, 3177, 16), append_93641, *[tuple_93642], **kwargs_93649)
    
    # SSA branch for the else part of an if statement (line 3176)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'pjust' (line 3178)
    pjust_93651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3178, 17), 'pjust')
    int_93652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3178, 26), 'int')
    # Applying the binary operator '==' (line 3178)
    result_eq_93653 = python_operator(stypy.reporting.localization.Localization(__file__, 3178, 17), '==', pjust_93651, int_93652)
    
    
    # Getting the type of 'just' (line 3178)
    just_93654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3178, 32), 'just')
    int_93655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3178, 40), 'int')
    # Applying the binary operator '==' (line 3178)
    result_eq_93656 = python_operator(stypy.reporting.localization.Localization(__file__, 3178, 32), '==', just_93654, int_93655)
    
    # Applying the binary operator 'and' (line 3178)
    result_and_keyword_93657 = python_operator(stypy.reporting.localization.Localization(__file__, 3178, 17), 'and', result_eq_93653, result_eq_93656)
    
    # Testing the type of an if condition (line 3178)
    if_condition_93658 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3178, 17), result_and_keyword_93657)
    # Assigning a type to the variable 'if_condition_93658' (line 3178)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3178, 17), 'if_condition_93658', if_condition_93658)
    # SSA begins for if statement (line 3178)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 3179)
    # Processing the call arguments (line 3179)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3179)
    tuple_93661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3179, 48), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3179)
    # Adding element type (line 3179)
    # Getting the type of 'just' (line 3179)
    just_93662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3179, 48), 'just', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3179, 48), tuple_93661, just_93662)
    # Adding element type (line 3179)
    # Getting the type of 'pad' (line 3179)
    pad_93663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3179, 54), 'pad', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3179, 48), tuple_93661, pad_93663)
    # Adding element type (line 3179)
    # Getting the type of 'prec' (line 3179)
    prec_93664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3179, 59), 'prec', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3179, 48), tuple_93661, prec_93664)
    # Adding element type (line 3179)
    # Getting the type of 'padding' (line 3179)
    padding_93665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3179, 65), 'padding', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3179, 48), tuple_93661, padding_93665)
    
    # Processing the call keyword arguments (line 3179)
    kwargs_93666 = {}
    # Getting the type of 'justify_pad_prec_spacer' (line 3179)
    justify_pad_prec_spacer_93659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3179, 16), 'justify_pad_prec_spacer', False)
    # Obtaining the member 'append' of a type (line 3179)
    append_93660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3179, 16), justify_pad_prec_spacer_93659, 'append')
    # Calling append(args, kwargs) (line 3179)
    append_call_result_93667 = invoke(stypy.reporting.localization.Localization(__file__, 3179, 16), append_93660, *[tuple_93661], **kwargs_93666)
    
    # SSA branch for the else part of an if statement (line 3178)
    module_type_store.open_ssa_branch('else')
    
    # Call to append(...): (line 3181)
    # Processing the call arguments (line 3181)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3181)
    tuple_93670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3181, 48), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3181)
    # Adding element type (line 3181)
    # Getting the type of 'just' (line 3181)
    just_93671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3181, 48), 'just', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3181, 48), tuple_93670, just_93671)
    # Adding element type (line 3181)
    # Getting the type of 'pad' (line 3181)
    pad_93672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3181, 54), 'pad', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3181, 48), tuple_93670, pad_93672)
    # Adding element type (line 3181)
    # Getting the type of 'prec' (line 3181)
    prec_93673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3181, 59), 'prec', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3181, 48), tuple_93670, prec_93673)
    # Adding element type (line 3181)
    int_93674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3181, 65), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3181, 48), tuple_93670, int_93674)
    
    # Processing the call keyword arguments (line 3181)
    kwargs_93675 = {}
    # Getting the type of 'justify_pad_prec_spacer' (line 3181)
    justify_pad_prec_spacer_93668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3181, 16), 'justify_pad_prec_spacer', False)
    # Obtaining the member 'append' of a type (line 3181)
    append_93669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3181, 16), justify_pad_prec_spacer_93668, 'append')
    # Calling append(args, kwargs) (line 3181)
    append_call_result_93676 = invoke(stypy.reporting.localization.Localization(__file__, 3181, 16), append_93669, *[tuple_93670], **kwargs_93675)
    
    # SSA join for if statement (line 3178)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3176)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3172)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    

    @norecursion
    def format(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'format'
        module_type_store = module_type_store.open_function_context('format', 3183, 4, False)
        
        # Passed parameters checking function
        format.stypy_localization = localization
        format.stypy_type_of_self = None
        format.stypy_type_store = module_type_store
        format.stypy_function_name = 'format'
        format.stypy_param_names_list = ['item', 'just_pad_prec_spacer']
        format.stypy_varargs_param_name = None
        format.stypy_kwargs_param_name = None
        format.stypy_call_defaults = defaults
        format.stypy_call_varargs = varargs
        format.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'format', ['item', 'just_pad_prec_spacer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'format', localization, ['item', 'just_pad_prec_spacer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'format(...)' code ##################

        
        # Assigning a Name to a Tuple (line 3184):
        
        # Assigning a Subscript to a Name (line 3184):
        
        # Assigning a Subscript to a Name (line 3184):
        
        # Obtaining the type of the subscript
        int_93677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3184, 8), 'int')
        # Getting the type of 'just_pad_prec_spacer' (line 3184)
        just_pad_prec_spacer_93678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3184, 34), 'just_pad_prec_spacer')
        # Obtaining the member '__getitem__' of a type (line 3184)
        getitem___93679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3184, 8), just_pad_prec_spacer_93678, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3184)
        subscript_call_result_93680 = invoke(stypy.reporting.localization.Localization(__file__, 3184, 8), getitem___93679, int_93677)
        
        # Assigning a type to the variable 'tuple_var_assignment_87287' (line 3184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3184, 8), 'tuple_var_assignment_87287', subscript_call_result_93680)
        
        # Assigning a Subscript to a Name (line 3184):
        
        # Assigning a Subscript to a Name (line 3184):
        
        # Obtaining the type of the subscript
        int_93681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3184, 8), 'int')
        # Getting the type of 'just_pad_prec_spacer' (line 3184)
        just_pad_prec_spacer_93682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3184, 34), 'just_pad_prec_spacer')
        # Obtaining the member '__getitem__' of a type (line 3184)
        getitem___93683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3184, 8), just_pad_prec_spacer_93682, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3184)
        subscript_call_result_93684 = invoke(stypy.reporting.localization.Localization(__file__, 3184, 8), getitem___93683, int_93681)
        
        # Assigning a type to the variable 'tuple_var_assignment_87288' (line 3184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3184, 8), 'tuple_var_assignment_87288', subscript_call_result_93684)
        
        # Assigning a Subscript to a Name (line 3184):
        
        # Assigning a Subscript to a Name (line 3184):
        
        # Obtaining the type of the subscript
        int_93685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3184, 8), 'int')
        # Getting the type of 'just_pad_prec_spacer' (line 3184)
        just_pad_prec_spacer_93686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3184, 34), 'just_pad_prec_spacer')
        # Obtaining the member '__getitem__' of a type (line 3184)
        getitem___93687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3184, 8), just_pad_prec_spacer_93686, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3184)
        subscript_call_result_93688 = invoke(stypy.reporting.localization.Localization(__file__, 3184, 8), getitem___93687, int_93685)
        
        # Assigning a type to the variable 'tuple_var_assignment_87289' (line 3184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3184, 8), 'tuple_var_assignment_87289', subscript_call_result_93688)
        
        # Assigning a Subscript to a Name (line 3184):
        
        # Assigning a Subscript to a Name (line 3184):
        
        # Obtaining the type of the subscript
        int_93689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3184, 8), 'int')
        # Getting the type of 'just_pad_prec_spacer' (line 3184)
        just_pad_prec_spacer_93690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3184, 34), 'just_pad_prec_spacer')
        # Obtaining the member '__getitem__' of a type (line 3184)
        getitem___93691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3184, 8), just_pad_prec_spacer_93690, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3184)
        subscript_call_result_93692 = invoke(stypy.reporting.localization.Localization(__file__, 3184, 8), getitem___93691, int_93689)
        
        # Assigning a type to the variable 'tuple_var_assignment_87290' (line 3184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3184, 8), 'tuple_var_assignment_87290', subscript_call_result_93692)
        
        # Assigning a Name to a Name (line 3184):
        
        # Assigning a Name to a Name (line 3184):
        # Getting the type of 'tuple_var_assignment_87287' (line 3184)
        tuple_var_assignment_87287_93693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3184, 8), 'tuple_var_assignment_87287')
        # Assigning a type to the variable 'just' (line 3184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3184, 8), 'just', tuple_var_assignment_87287_93693)
        
        # Assigning a Name to a Name (line 3184):
        
        # Assigning a Name to a Name (line 3184):
        # Getting the type of 'tuple_var_assignment_87288' (line 3184)
        tuple_var_assignment_87288_93694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3184, 8), 'tuple_var_assignment_87288')
        # Assigning a type to the variable 'pad' (line 3184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3184, 14), 'pad', tuple_var_assignment_87288_93694)
        
        # Assigning a Name to a Name (line 3184):
        
        # Assigning a Name to a Name (line 3184):
        # Getting the type of 'tuple_var_assignment_87289' (line 3184)
        tuple_var_assignment_87289_93695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3184, 8), 'tuple_var_assignment_87289')
        # Assigning a type to the variable 'prec' (line 3184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3184, 19), 'prec', tuple_var_assignment_87289_93695)
        
        # Assigning a Name to a Name (line 3184):
        
        # Assigning a Name to a Name (line 3184):
        # Getting the type of 'tuple_var_assignment_87290' (line 3184)
        tuple_var_assignment_87290_93696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3184, 8), 'tuple_var_assignment_87290')
        # Assigning a type to the variable 'spacer' (line 3184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3184, 25), 'spacer', tuple_var_assignment_87290_93696)
        
        
        # Getting the type of 'just' (line 3185)
        just_93697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3185, 11), 'just')
        int_93698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3185, 19), 'int')
        # Applying the binary operator '==' (line 3185)
        result_eq_93699 = python_operator(stypy.reporting.localization.Localization(__file__, 3185, 11), '==', just_93697, int_93698)
        
        # Testing the type of an if condition (line 3185)
        if_condition_93700 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3185, 8), result_eq_93699)
        # Assigning a type to the variable 'if_condition_93700' (line 3185)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3185, 8), 'if_condition_93700', if_condition_93700)
        # SSA begins for if statement (line 3185)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'spacer' (line 3186)
        spacer_93701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3186, 19), 'spacer')
        unicode_93702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3186, 26), 'unicode', u' ')
        # Applying the binary operator '*' (line 3186)
        result_mul_93703 = python_operator(stypy.reporting.localization.Localization(__file__, 3186, 19), '*', spacer_93701, unicode_93702)
        
        
        # Call to ljust(...): (line 3186)
        # Processing the call arguments (line 3186)
        # Getting the type of 'pad' (line 3186)
        pad_93709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3186, 48), 'pad', False)
        # Processing the call keyword arguments (line 3186)
        kwargs_93710 = {}
        
        # Call to str(...): (line 3186)
        # Processing the call arguments (line 3186)
        # Getting the type of 'item' (line 3186)
        item_93705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3186, 36), 'item', False)
        # Processing the call keyword arguments (line 3186)
        kwargs_93706 = {}
        # Getting the type of 'str' (line 3186)
        str_93704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3186, 32), 'str', False)
        # Calling str(args, kwargs) (line 3186)
        str_call_result_93707 = invoke(stypy.reporting.localization.Localization(__file__, 3186, 32), str_93704, *[item_93705], **kwargs_93706)
        
        # Obtaining the member 'ljust' of a type (line 3186)
        ljust_93708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3186, 32), str_call_result_93707, 'ljust')
        # Calling ljust(args, kwargs) (line 3186)
        ljust_call_result_93711 = invoke(stypy.reporting.localization.Localization(__file__, 3186, 32), ljust_93708, *[pad_93709], **kwargs_93710)
        
        # Applying the binary operator '+' (line 3186)
        result_add_93712 = python_operator(stypy.reporting.localization.Localization(__file__, 3186, 19), '+', result_mul_93703, ljust_call_result_93711)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3186, 12), 'stypy_return_type', result_add_93712)
        # SSA branch for the else part of an if statement (line 3185)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to get_type(...): (line 3188)
        # Processing the call arguments (line 3188)
        # Getting the type of 'item' (line 3188)
        item_93714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3188, 24), 'item', False)
        # Processing the call keyword arguments (line 3188)
        kwargs_93715 = {}
        # Getting the type of 'get_type' (line 3188)
        get_type_93713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3188, 15), 'get_type', False)
        # Calling get_type(args, kwargs) (line 3188)
        get_type_call_result_93716 = invoke(stypy.reporting.localization.Localization(__file__, 3188, 15), get_type_93713, *[item_93714], **kwargs_93715)
        
        # Getting the type of 'float' (line 3188)
        float_93717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3188, 33), 'float')
        # Applying the binary operator '==' (line 3188)
        result_eq_93718 = python_operator(stypy.reporting.localization.Localization(__file__, 3188, 15), '==', get_type_call_result_93716, float_93717)
        
        # Testing the type of an if condition (line 3188)
        if_condition_93719 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3188, 12), result_eq_93718)
        # Assigning a type to the variable 'if_condition_93719' (line 3188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3188, 12), 'if_condition_93719', if_condition_93719)
        # SSA begins for if statement (line 3188)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 3189):
        
        # Assigning a BinOp to a Name (line 3189):
        
        # Assigning a BinOp to a Name (line 3189):
        # Getting the type of 'prec' (line 3189)
        prec_93720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3189, 24), 'prec')
        
        # Call to float(...): (line 3189)
        # Processing the call arguments (line 3189)
        # Getting the type of 'item' (line 3189)
        item_93722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3189, 37), 'item', False)
        # Processing the call keyword arguments (line 3189)
        kwargs_93723 = {}
        # Getting the type of 'float' (line 3189)
        float_93721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3189, 31), 'float', False)
        # Calling float(args, kwargs) (line 3189)
        float_call_result_93724 = invoke(stypy.reporting.localization.Localization(__file__, 3189, 31), float_93721, *[item_93722], **kwargs_93723)
        
        # Applying the binary operator '%' (line 3189)
        result_mod_93725 = python_operator(stypy.reporting.localization.Localization(__file__, 3189, 24), '%', prec_93720, float_call_result_93724)
        
        # Assigning a type to the variable 'item' (line 3189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3189, 16), 'item', result_mod_93725)
        # SSA branch for the else part of an if statement (line 3188)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to get_type(...): (line 3190)
        # Processing the call arguments (line 3190)
        # Getting the type of 'item' (line 3190)
        item_93727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3190, 26), 'item', False)
        # Processing the call keyword arguments (line 3190)
        kwargs_93728 = {}
        # Getting the type of 'get_type' (line 3190)
        get_type_93726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3190, 17), 'get_type', False)
        # Calling get_type(args, kwargs) (line 3190)
        get_type_call_result_93729 = invoke(stypy.reporting.localization.Localization(__file__, 3190, 17), get_type_93726, *[item_93727], **kwargs_93728)
        
        # Getting the type of 'int' (line 3190)
        int_93730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3190, 35), 'int')
        # Applying the binary operator '==' (line 3190)
        result_eq_93731 = python_operator(stypy.reporting.localization.Localization(__file__, 3190, 17), '==', get_type_call_result_93729, int_93730)
        
        # Testing the type of an if condition (line 3190)
        if_condition_93732 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3190, 17), result_eq_93731)
        # Assigning a type to the variable 'if_condition_93732' (line 3190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3190, 17), 'if_condition_93732', if_condition_93732)
        # SSA begins for if statement (line 3190)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 3191):
        
        # Assigning a BinOp to a Name (line 3191):
        
        # Assigning a BinOp to a Name (line 3191):
        # Getting the type of 'prec' (line 3191)
        prec_93733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3191, 24), 'prec')
        
        # Call to int(...): (line 3191)
        # Processing the call arguments (line 3191)
        # Getting the type of 'item' (line 3191)
        item_93735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3191, 35), 'item', False)
        # Processing the call keyword arguments (line 3191)
        kwargs_93736 = {}
        # Getting the type of 'int' (line 3191)
        int_93734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3191, 31), 'int', False)
        # Calling int(args, kwargs) (line 3191)
        int_call_result_93737 = invoke(stypy.reporting.localization.Localization(__file__, 3191, 31), int_93734, *[item_93735], **kwargs_93736)
        
        # Applying the binary operator '%' (line 3191)
        result_mod_93738 = python_operator(stypy.reporting.localization.Localization(__file__, 3191, 24), '%', prec_93733, int_call_result_93737)
        
        # Assigning a type to the variable 'item' (line 3191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3191, 16), 'item', result_mod_93738)
        # SSA join for if statement (line 3190)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3188)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to rjust(...): (line 3193)
        # Processing the call arguments (line 3193)
        # Getting the type of 'pad' (line 3193)
        pad_93741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3193, 30), 'pad', False)
        # Processing the call keyword arguments (line 3193)
        kwargs_93742 = {}
        # Getting the type of 'item' (line 3193)
        item_93739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3193, 19), 'item', False)
        # Obtaining the member 'rjust' of a type (line 3193)
        rjust_93740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3193, 19), item_93739, 'rjust')
        # Calling rjust(args, kwargs) (line 3193)
        rjust_call_result_93743 = invoke(stypy.reporting.localization.Localization(__file__, 3193, 19), rjust_93740, *[pad_93741], **kwargs_93742)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3193, 12), 'stypy_return_type', rjust_call_result_93743)
        # SSA join for if statement (line 3185)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'format(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'format' in the type store
        # Getting the type of 'stypy_return_type' (line 3183)
        stypy_return_type_93744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3183, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93744)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'format'
        return stypy_return_type_93744

    # Assigning a type to the variable 'format' (line 3183)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3183, 4), 'format', format)
    
    # Assigning a List to a Name (line 3195):
    
    # Assigning a List to a Name (line 3195):
    
    # Assigning a List to a Name (line 3195):
    
    # Obtaining an instance of the builtin type 'list' (line 3195)
    list_93745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3195, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3195)
    
    # Assigning a type to the variable 'textl' (line 3195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3195, 4), 'textl', list_93745)
    
    # Call to append(...): (line 3196)
    # Processing the call arguments (line 3196)
    
    # Call to join(...): (line 3196)
    # Processing the call arguments (line 3196)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to enumerate(...): (line 3197)
    # Processing the call arguments (line 3197)
    # Getting the type of 'header' (line 3197)
    header_93759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3197, 54), 'header', False)
    # Processing the call keyword arguments (line 3197)
    kwargs_93760 = {}
    # Getting the type of 'enumerate' (line 3197)
    enumerate_93758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3197, 44), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 3197)
    enumerate_call_result_93761 = invoke(stypy.reporting.localization.Localization(__file__, 3197, 44), enumerate_93758, *[header_93759], **kwargs_93760)
    
    comprehension_93762 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3196, 26), enumerate_call_result_93761)
    # Assigning a type to the variable 'j' (line 3196)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3196, 26), 'j', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3196, 26), comprehension_93762))
    # Assigning a type to the variable 'colitem' (line 3196)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3196, 26), 'colitem', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3196, 26), comprehension_93762))
    
    # Call to format(...): (line 3196)
    # Processing the call arguments (line 3196)
    # Getting the type of 'colitem' (line 3196)
    colitem_93751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3196, 33), 'colitem', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 3196)
    j_93752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3196, 66), 'j', False)
    # Getting the type of 'justify_pad_prec_spacer' (line 3196)
    justify_pad_prec_spacer_93753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3196, 42), 'justify_pad_prec_spacer', False)
    # Obtaining the member '__getitem__' of a type (line 3196)
    getitem___93754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3196, 42), justify_pad_prec_spacer_93753, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3196)
    subscript_call_result_93755 = invoke(stypy.reporting.localization.Localization(__file__, 3196, 42), getitem___93754, j_93752)
    
    # Processing the call keyword arguments (line 3196)
    kwargs_93756 = {}
    # Getting the type of 'format' (line 3196)
    format_93750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3196, 26), 'format', False)
    # Calling format(args, kwargs) (line 3196)
    format_call_result_93757 = invoke(stypy.reporting.localization.Localization(__file__, 3196, 26), format_93750, *[colitem_93751, subscript_call_result_93755], **kwargs_93756)
    
    list_93763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3196, 26), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3196, 26), list_93763, format_call_result_93757)
    # Processing the call keyword arguments (line 3196)
    kwargs_93764 = {}
    unicode_93748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3196, 17), 'unicode', u'')
    # Obtaining the member 'join' of a type (line 3196)
    join_93749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3196, 17), unicode_93748, 'join')
    # Calling join(args, kwargs) (line 3196)
    join_call_result_93765 = invoke(stypy.reporting.localization.Localization(__file__, 3196, 17), join_93749, *[list_93763], **kwargs_93764)
    
    # Processing the call keyword arguments (line 3196)
    kwargs_93766 = {}
    # Getting the type of 'textl' (line 3196)
    textl_93746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3196, 4), 'textl', False)
    # Obtaining the member 'append' of a type (line 3196)
    append_93747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3196, 4), textl_93746, 'append')
    # Calling append(args, kwargs) (line 3196)
    append_call_result_93767 = invoke(stypy.reporting.localization.Localization(__file__, 3196, 4), append_93747, *[join_call_result_93765], **kwargs_93766)
    
    
    
    # Call to enumerate(...): (line 3198)
    # Processing the call arguments (line 3198)
    # Getting the type of 'r' (line 3198)
    r_93769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3198, 28), 'r', False)
    # Processing the call keyword arguments (line 3198)
    kwargs_93770 = {}
    # Getting the type of 'enumerate' (line 3198)
    enumerate_93768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3198, 18), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 3198)
    enumerate_call_result_93771 = invoke(stypy.reporting.localization.Localization(__file__, 3198, 18), enumerate_93768, *[r_93769], **kwargs_93770)
    
    # Testing the type of a for loop iterable (line 3198)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3198, 4), enumerate_call_result_93771)
    # Getting the type of the for loop variable (line 3198)
    for_loop_var_93772 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3198, 4), enumerate_call_result_93771)
    # Assigning a type to the variable 'i' (line 3198)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3198, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3198, 4), for_loop_var_93772))
    # Assigning a type to the variable 'row' (line 3198)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3198, 4), 'row', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3198, 4), for_loop_var_93772))
    # SSA begins for a for statement (line 3198)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to append(...): (line 3199)
    # Processing the call arguments (line 3199)
    
    # Call to join(...): (line 3199)
    # Processing the call arguments (line 3199)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to enumerate(...): (line 3200)
    # Processing the call arguments (line 3200)
    # Getting the type of 'row' (line 3200)
    row_93786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3200, 58), 'row', False)
    # Processing the call keyword arguments (line 3200)
    kwargs_93787 = {}
    # Getting the type of 'enumerate' (line 3200)
    enumerate_93785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3200, 48), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 3200)
    enumerate_call_result_93788 = invoke(stypy.reporting.localization.Localization(__file__, 3200, 48), enumerate_93785, *[row_93786], **kwargs_93787)
    
    comprehension_93789 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3199, 30), enumerate_call_result_93788)
    # Assigning a type to the variable 'j' (line 3199)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3199, 30), 'j', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3199, 30), comprehension_93789))
    # Assigning a type to the variable 'colitem' (line 3199)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3199, 30), 'colitem', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3199, 30), comprehension_93789))
    
    # Call to format(...): (line 3199)
    # Processing the call arguments (line 3199)
    # Getting the type of 'colitem' (line 3199)
    colitem_93778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3199, 37), 'colitem', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 3199)
    j_93779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3199, 70), 'j', False)
    # Getting the type of 'justify_pad_prec_spacer' (line 3199)
    justify_pad_prec_spacer_93780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3199, 46), 'justify_pad_prec_spacer', False)
    # Obtaining the member '__getitem__' of a type (line 3199)
    getitem___93781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3199, 46), justify_pad_prec_spacer_93780, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3199)
    subscript_call_result_93782 = invoke(stypy.reporting.localization.Localization(__file__, 3199, 46), getitem___93781, j_93779)
    
    # Processing the call keyword arguments (line 3199)
    kwargs_93783 = {}
    # Getting the type of 'format' (line 3199)
    format_93777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3199, 30), 'format', False)
    # Calling format(args, kwargs) (line 3199)
    format_call_result_93784 = invoke(stypy.reporting.localization.Localization(__file__, 3199, 30), format_93777, *[colitem_93778, subscript_call_result_93782], **kwargs_93783)
    
    list_93790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3199, 30), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3199, 30), list_93790, format_call_result_93784)
    # Processing the call keyword arguments (line 3199)
    kwargs_93791 = {}
    unicode_93775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3199, 21), 'unicode', u'')
    # Obtaining the member 'join' of a type (line 3199)
    join_93776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3199, 21), unicode_93775, 'join')
    # Calling join(args, kwargs) (line 3199)
    join_call_result_93792 = invoke(stypy.reporting.localization.Localization(__file__, 3199, 21), join_93776, *[list_93790], **kwargs_93791)
    
    # Processing the call keyword arguments (line 3199)
    kwargs_93793 = {}
    # Getting the type of 'textl' (line 3199)
    textl_93773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3199, 8), 'textl', False)
    # Obtaining the member 'append' of a type (line 3199)
    append_93774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3199, 8), textl_93773, 'append')
    # Calling append(args, kwargs) (line 3199)
    append_call_result_93794 = invoke(stypy.reporting.localization.Localization(__file__, 3199, 8), append_93774, *[join_call_result_93792], **kwargs_93793)
    
    
    
    # Getting the type of 'i' (line 3201)
    i_93795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3201, 11), 'i')
    int_93796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3201, 16), 'int')
    # Applying the binary operator '==' (line 3201)
    result_eq_93797 = python_operator(stypy.reporting.localization.Localization(__file__, 3201, 11), '==', i_93795, int_93796)
    
    # Testing the type of an if condition (line 3201)
    if_condition_93798 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3201, 8), result_eq_93797)
    # Assigning a type to the variable 'if_condition_93798' (line 3201)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3201, 8), 'if_condition_93798', if_condition_93798)
    # SSA begins for if statement (line 3201)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Subscript (line 3202):
    
    # Assigning a Call to a Subscript (line 3202):
    
    # Assigning a Call to a Subscript (line 3202):
    
    # Call to rstrip(...): (line 3202)
    # Processing the call keyword arguments (line 3202)
    kwargs_93804 = {}
    
    # Obtaining the type of the subscript
    int_93799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3202, 29), 'int')
    # Getting the type of 'textl' (line 3202)
    textl_93800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3202, 23), 'textl', False)
    # Obtaining the member '__getitem__' of a type (line 3202)
    getitem___93801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3202, 23), textl_93800, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3202)
    subscript_call_result_93802 = invoke(stypy.reporting.localization.Localization(__file__, 3202, 23), getitem___93801, int_93799)
    
    # Obtaining the member 'rstrip' of a type (line 3202)
    rstrip_93803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3202, 23), subscript_call_result_93802, 'rstrip')
    # Calling rstrip(args, kwargs) (line 3202)
    rstrip_call_result_93805 = invoke(stypy.reporting.localization.Localization(__file__, 3202, 23), rstrip_93803, *[], **kwargs_93804)
    
    # Getting the type of 'textl' (line 3202)
    textl_93806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3202, 12), 'textl')
    int_93807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3202, 18), 'int')
    # Storing an element on a container (line 3202)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3202, 12), textl_93806, (int_93807, rstrip_call_result_93805))
    # SSA join for if statement (line 3201)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3204):
    
    # Assigning a Call to a Name (line 3204):
    
    # Assigning a Call to a Name (line 3204):
    
    # Call to join(...): (line 3204)
    # Processing the call arguments (line 3204)
    # Getting the type of 'textl' (line 3204)
    textl_93811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3204, 27), 'textl', False)
    # Processing the call keyword arguments (line 3204)
    kwargs_93812 = {}
    # Getting the type of 'os' (line 3204)
    os_93808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3204, 11), 'os', False)
    # Obtaining the member 'linesep' of a type (line 3204)
    linesep_93809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3204, 11), os_93808, 'linesep')
    # Obtaining the member 'join' of a type (line 3204)
    join_93810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3204, 11), linesep_93809, 'join')
    # Calling join(args, kwargs) (line 3204)
    join_call_result_93813 = invoke(stypy.reporting.localization.Localization(__file__, 3204, 11), join_93810, *[textl_93811], **kwargs_93812)
    
    # Assigning a type to the variable 'text' (line 3204)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3204, 4), 'text', join_call_result_93813)
    # Getting the type of 'text' (line 3205)
    text_93814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3205, 11), 'text')
    # Assigning a type to the variable 'stypy_return_type' (line 3205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3205, 4), 'stypy_return_type', text_93814)
    
    # ################# End of 'rec2txt(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rec2txt' in the type store
    # Getting the type of 'stypy_return_type' (line 3088)
    stypy_return_type_93815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3088, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_93815)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rec2txt'
    return stypy_return_type_93815

# Assigning a type to the variable 'rec2txt' (line 3088)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3088, 0), 'rec2txt', rec2txt)

@norecursion
def rec2csv(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    unicode_93816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3208, 32), 'unicode', u',')
    # Getting the type of 'None' (line 3208)
    None_93817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3208, 45), 'None')
    unicode_93818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3208, 59), 'unicode', u'')
    # Getting the type of 'None' (line 3209)
    None_93819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3209, 21), 'None')
    # Getting the type of 'True' (line 3209)
    True_93820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3209, 38), 'True')
    defaults = [unicode_93816, None_93817, unicode_93818, None_93819, True_93820]
    # Create a new context for function 'rec2csv'
    module_type_store = module_type_store.open_function_context('rec2csv', 3208, 0, False)
    
    # Passed parameters checking function
    rec2csv.stypy_localization = localization
    rec2csv.stypy_type_of_self = None
    rec2csv.stypy_type_store = module_type_store
    rec2csv.stypy_function_name = 'rec2csv'
    rec2csv.stypy_param_names_list = ['r', 'fname', 'delimiter', 'formatd', 'missing', 'missingd', 'withheader']
    rec2csv.stypy_varargs_param_name = None
    rec2csv.stypy_kwargs_param_name = None
    rec2csv.stypy_call_defaults = defaults
    rec2csv.stypy_call_varargs = varargs
    rec2csv.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rec2csv', ['r', 'fname', 'delimiter', 'formatd', 'missing', 'missingd', 'withheader'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rec2csv', localization, ['r', 'fname', 'delimiter', 'formatd', 'missing', 'missingd', 'withheader'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rec2csv(...)' code ##################

    unicode_93821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3229, (-1)), 'unicode', u"\n    Save the data from numpy recarray *r* into a\n    comma-/space-/tab-delimited file.  The record array dtype names\n    will be used for column headers.\n\n    *fname*: can be a filename or a file handle.  Support for gzipped\n      files is automatic, if the filename ends in '.gz'\n\n    *withheader*: if withheader is False, do not write the attribute\n      names in the first row\n\n    for formatd type FormatFloat, we override the precision to store\n    full precision floats in the CSV file\n\n    See Also\n    --------\n    :func:`csv2rec`\n        For information about *missing* and *missingd*, which can be used to\n        fill in masked values into your CSV file.\n    ")
    
    # Assigning a Call to a Name (line 3231):
    
    # Assigning a Call to a Name (line 3231):
    
    # Assigning a Call to a Name (line 3231):
    
    # Call to str(...): (line 3231)
    # Processing the call arguments (line 3231)
    # Getting the type of 'delimiter' (line 3231)
    delimiter_93823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3231, 20), 'delimiter', False)
    # Processing the call keyword arguments (line 3231)
    kwargs_93824 = {}
    # Getting the type of 'str' (line 3231)
    str_93822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3231, 16), 'str', False)
    # Calling str(args, kwargs) (line 3231)
    str_call_result_93825 = invoke(stypy.reporting.localization.Localization(__file__, 3231, 16), str_93822, *[delimiter_93823], **kwargs_93824)
    
    # Assigning a type to the variable 'delimiter' (line 3231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3231, 4), 'delimiter', str_call_result_93825)
    
    # Type idiom detected: calculating its left and rigth part (line 3233)
    # Getting the type of 'missingd' (line 3233)
    missingd_93826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3233, 7), 'missingd')
    # Getting the type of 'None' (line 3233)
    None_93827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3233, 19), 'None')
    
    (may_be_93828, more_types_in_union_93829) = may_be_none(missingd_93826, None_93827)

    if may_be_93828:

        if more_types_in_union_93829:
            # Runtime conditional SSA (line 3233)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 3234):
        
        # Assigning a Call to a Name (line 3234):
        
        # Assigning a Call to a Name (line 3234):
        
        # Call to dict(...): (line 3234)
        # Processing the call keyword arguments (line 3234)
        kwargs_93831 = {}
        # Getting the type of 'dict' (line 3234)
        dict_93830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3234, 19), 'dict', False)
        # Calling dict(args, kwargs) (line 3234)
        dict_call_result_93832 = invoke(stypy.reporting.localization.Localization(__file__, 3234, 19), dict_93830, *[], **kwargs_93831)
        
        # Assigning a type to the variable 'missingd' (line 3234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3234, 8), 'missingd', dict_call_result_93832)

        if more_types_in_union_93829:
            # SSA join for if statement (line 3233)
            module_type_store = module_type_store.join_ssa_context()


    

    @norecursion
    def with_mask(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'with_mask'
        module_type_store = module_type_store.open_function_context('with_mask', 3236, 4, False)
        
        # Passed parameters checking function
        with_mask.stypy_localization = localization
        with_mask.stypy_type_of_self = None
        with_mask.stypy_type_store = module_type_store
        with_mask.stypy_function_name = 'with_mask'
        with_mask.stypy_param_names_list = ['func']
        with_mask.stypy_varargs_param_name = None
        with_mask.stypy_kwargs_param_name = None
        with_mask.stypy_call_defaults = defaults
        with_mask.stypy_call_varargs = varargs
        with_mask.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'with_mask', ['func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'with_mask', localization, ['func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'with_mask(...)' code ##################


        @norecursion
        def newfunc(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'newfunc'
            module_type_store = module_type_store.open_function_context('newfunc', 3237, 8, False)
            
            # Passed parameters checking function
            newfunc.stypy_localization = localization
            newfunc.stypy_type_of_self = None
            newfunc.stypy_type_store = module_type_store
            newfunc.stypy_function_name = 'newfunc'
            newfunc.stypy_param_names_list = ['val', 'mask', 'mval']
            newfunc.stypy_varargs_param_name = None
            newfunc.stypy_kwargs_param_name = None
            newfunc.stypy_call_defaults = defaults
            newfunc.stypy_call_varargs = varargs
            newfunc.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'newfunc', ['val', 'mask', 'mval'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'newfunc', localization, ['val', 'mask', 'mval'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'newfunc(...)' code ##################

            
            # Getting the type of 'mask' (line 3238)
            mask_93833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3238, 15), 'mask')
            # Testing the type of an if condition (line 3238)
            if_condition_93834 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3238, 12), mask_93833)
            # Assigning a type to the variable 'if_condition_93834' (line 3238)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3238, 12), 'if_condition_93834', if_condition_93834)
            # SSA begins for if statement (line 3238)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # Getting the type of 'mval' (line 3239)
            mval_93835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3239, 23), 'mval')
            # Assigning a type to the variable 'stypy_return_type' (line 3239)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3239, 16), 'stypy_return_type', mval_93835)
            # SSA branch for the else part of an if statement (line 3238)
            module_type_store.open_ssa_branch('else')
            
            # Call to func(...): (line 3241)
            # Processing the call arguments (line 3241)
            # Getting the type of 'val' (line 3241)
            val_93837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3241, 28), 'val', False)
            # Processing the call keyword arguments (line 3241)
            kwargs_93838 = {}
            # Getting the type of 'func' (line 3241)
            func_93836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3241, 23), 'func', False)
            # Calling func(args, kwargs) (line 3241)
            func_call_result_93839 = invoke(stypy.reporting.localization.Localization(__file__, 3241, 23), func_93836, *[val_93837], **kwargs_93838)
            
            # Assigning a type to the variable 'stypy_return_type' (line 3241)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3241, 16), 'stypy_return_type', func_call_result_93839)
            # SSA join for if statement (line 3238)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # ################# End of 'newfunc(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'newfunc' in the type store
            # Getting the type of 'stypy_return_type' (line 3237)
            stypy_return_type_93840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3237, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_93840)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'newfunc'
            return stypy_return_type_93840

        # Assigning a type to the variable 'newfunc' (line 3237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3237, 8), 'newfunc', newfunc)
        # Getting the type of 'newfunc' (line 3242)
        newfunc_93841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3242, 15), 'newfunc')
        # Assigning a type to the variable 'stypy_return_type' (line 3242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3242, 8), 'stypy_return_type', newfunc_93841)
        
        # ################# End of 'with_mask(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'with_mask' in the type store
        # Getting the type of 'stypy_return_type' (line 3236)
        stypy_return_type_93842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3236, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_93842)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'with_mask'
        return stypy_return_type_93842

    # Assigning a type to the variable 'with_mask' (line 3236)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3236, 4), 'with_mask', with_mask)
    
    
    # Getting the type of 'r' (line 3244)
    r_93843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3244, 7), 'r')
    # Obtaining the member 'ndim' of a type (line 3244)
    ndim_93844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3244, 7), r_93843, 'ndim')
    int_93845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3244, 17), 'int')
    # Applying the binary operator '!=' (line 3244)
    result_ne_93846 = python_operator(stypy.reporting.localization.Localization(__file__, 3244, 7), '!=', ndim_93844, int_93845)
    
    # Testing the type of an if condition (line 3244)
    if_condition_93847 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3244, 4), result_ne_93846)
    # Assigning a type to the variable 'if_condition_93847' (line 3244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3244, 4), 'if_condition_93847', if_condition_93847)
    # SSA begins for if statement (line 3244)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3245)
    # Processing the call arguments (line 3245)
    unicode_93849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3245, 25), 'unicode', u'rec2csv only operates on 1 dimensional recarrays')
    # Processing the call keyword arguments (line 3245)
    kwargs_93850 = {}
    # Getting the type of 'ValueError' (line 3245)
    ValueError_93848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3245, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3245)
    ValueError_call_result_93851 = invoke(stypy.reporting.localization.Localization(__file__, 3245, 14), ValueError_93848, *[unicode_93849], **kwargs_93850)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3245, 8), ValueError_call_result_93851, 'raise parameter', BaseException)
    # SSA join for if statement (line 3244)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3247):
    
    # Assigning a Call to a Name (line 3247):
    
    # Assigning a Call to a Name (line 3247):
    
    # Call to get_formatd(...): (line 3247)
    # Processing the call arguments (line 3247)
    # Getting the type of 'r' (line 3247)
    r_93853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3247, 26), 'r', False)
    # Getting the type of 'formatd' (line 3247)
    formatd_93854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3247, 29), 'formatd', False)
    # Processing the call keyword arguments (line 3247)
    kwargs_93855 = {}
    # Getting the type of 'get_formatd' (line 3247)
    get_formatd_93852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3247, 14), 'get_formatd', False)
    # Calling get_formatd(args, kwargs) (line 3247)
    get_formatd_call_result_93856 = invoke(stypy.reporting.localization.Localization(__file__, 3247, 14), get_formatd_93852, *[r_93853, formatd_93854], **kwargs_93855)
    
    # Assigning a type to the variable 'formatd' (line 3247)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3247, 4), 'formatd', get_formatd_call_result_93856)
    
    # Assigning a List to a Name (line 3248):
    
    # Assigning a List to a Name (line 3248):
    
    # Assigning a List to a Name (line 3248):
    
    # Obtaining an instance of the builtin type 'list' (line 3248)
    list_93857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3248, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3248)
    
    # Assigning a type to the variable 'funcs' (line 3248)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3248, 4), 'funcs', list_93857)
    
    
    # Call to enumerate(...): (line 3249)
    # Processing the call arguments (line 3249)
    # Getting the type of 'r' (line 3249)
    r_93859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3249, 29), 'r', False)
    # Obtaining the member 'dtype' of a type (line 3249)
    dtype_93860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3249, 29), r_93859, 'dtype')
    # Obtaining the member 'names' of a type (line 3249)
    names_93861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3249, 29), dtype_93860, 'names')
    # Processing the call keyword arguments (line 3249)
    kwargs_93862 = {}
    # Getting the type of 'enumerate' (line 3249)
    enumerate_93858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3249, 19), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 3249)
    enumerate_call_result_93863 = invoke(stypy.reporting.localization.Localization(__file__, 3249, 19), enumerate_93858, *[names_93861], **kwargs_93862)
    
    # Testing the type of a for loop iterable (line 3249)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3249, 4), enumerate_call_result_93863)
    # Getting the type of the for loop variable (line 3249)
    for_loop_var_93864 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3249, 4), enumerate_call_result_93863)
    # Assigning a type to the variable 'i' (line 3249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3249, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3249, 4), for_loop_var_93864))
    # Assigning a type to the variable 'name' (line 3249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3249, 4), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3249, 4), for_loop_var_93864))
    # SSA begins for a for statement (line 3249)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to append(...): (line 3250)
    # Processing the call arguments (line 3250)
    
    # Call to with_mask(...): (line 3250)
    # Processing the call arguments (line 3250)
    
    # Call to csvformat_factory(...): (line 3250)
    # Processing the call arguments (line 3250)
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 3250)
    name_93869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3250, 57), 'name', False)
    # Getting the type of 'formatd' (line 3250)
    formatd_93870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3250, 49), 'formatd', False)
    # Obtaining the member '__getitem__' of a type (line 3250)
    getitem___93871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3250, 49), formatd_93870, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3250)
    subscript_call_result_93872 = invoke(stypy.reporting.localization.Localization(__file__, 3250, 49), getitem___93871, name_93869)
    
    # Processing the call keyword arguments (line 3250)
    kwargs_93873 = {}
    # Getting the type of 'csvformat_factory' (line 3250)
    csvformat_factory_93868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3250, 31), 'csvformat_factory', False)
    # Calling csvformat_factory(args, kwargs) (line 3250)
    csvformat_factory_call_result_93874 = invoke(stypy.reporting.localization.Localization(__file__, 3250, 31), csvformat_factory_93868, *[subscript_call_result_93872], **kwargs_93873)
    
    # Obtaining the member 'tostr' of a type (line 3250)
    tostr_93875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3250, 31), csvformat_factory_call_result_93874, 'tostr')
    # Processing the call keyword arguments (line 3250)
    kwargs_93876 = {}
    # Getting the type of 'with_mask' (line 3250)
    with_mask_93867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3250, 21), 'with_mask', False)
    # Calling with_mask(args, kwargs) (line 3250)
    with_mask_call_result_93877 = invoke(stypy.reporting.localization.Localization(__file__, 3250, 21), with_mask_93867, *[tostr_93875], **kwargs_93876)
    
    # Processing the call keyword arguments (line 3250)
    kwargs_93878 = {}
    # Getting the type of 'funcs' (line 3250)
    funcs_93865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3250, 8), 'funcs', False)
    # Obtaining the member 'append' of a type (line 3250)
    append_93866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3250, 8), funcs_93865, 'append')
    # Calling append(args, kwargs) (line 3250)
    append_call_result_93879 = invoke(stypy.reporting.localization.Localization(__file__, 3250, 8), append_93866, *[with_mask_call_result_93877], **kwargs_93878)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 3252):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to to_filehandle(...): (line 3252)
    # Processing the call arguments (line 3252)
    # Getting the type of 'fname' (line 3252)
    fname_93882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3252, 37), 'fname', False)
    unicode_93883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3252, 44), 'unicode', u'wb')
    # Processing the call keyword arguments (line 3252)
    # Getting the type of 'True' (line 3252)
    True_93884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3252, 64), 'True', False)
    keyword_93885 = True_93884
    kwargs_93886 = {'return_opened': keyword_93885}
    # Getting the type of 'cbook' (line 3252)
    cbook_93880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3252, 17), 'cbook', False)
    # Obtaining the member 'to_filehandle' of a type (line 3252)
    to_filehandle_93881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3252, 17), cbook_93880, 'to_filehandle')
    # Calling to_filehandle(args, kwargs) (line 3252)
    to_filehandle_call_result_93887 = invoke(stypy.reporting.localization.Localization(__file__, 3252, 17), to_filehandle_93881, *[fname_93882, unicode_93883], **kwargs_93886)
    
    # Assigning a type to the variable 'call_assignment_87291' (line 3252)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3252, 4), 'call_assignment_87291', to_filehandle_call_result_93887)
    
    # Assigning a Call to a Name (line 3252):
    
    # Assigning a Call to a Name (line 3252):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_93890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3252, 4), 'int')
    # Processing the call keyword arguments
    kwargs_93891 = {}
    # Getting the type of 'call_assignment_87291' (line 3252)
    call_assignment_87291_93888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3252, 4), 'call_assignment_87291', False)
    # Obtaining the member '__getitem__' of a type (line 3252)
    getitem___93889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3252, 4), call_assignment_87291_93888, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_93892 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___93889, *[int_93890], **kwargs_93891)
    
    # Assigning a type to the variable 'call_assignment_87292' (line 3252)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3252, 4), 'call_assignment_87292', getitem___call_result_93892)
    
    # Assigning a Name to a Name (line 3252):
    
    # Assigning a Name to a Name (line 3252):
    # Getting the type of 'call_assignment_87292' (line 3252)
    call_assignment_87292_93893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3252, 4), 'call_assignment_87292')
    # Assigning a type to the variable 'fh' (line 3252)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3252, 4), 'fh', call_assignment_87292_93893)
    
    # Assigning a Call to a Name (line 3252):
    
    # Assigning a Call to a Name (line 3252):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_93896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3252, 4), 'int')
    # Processing the call keyword arguments
    kwargs_93897 = {}
    # Getting the type of 'call_assignment_87291' (line 3252)
    call_assignment_87291_93894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3252, 4), 'call_assignment_87291', False)
    # Obtaining the member '__getitem__' of a type (line 3252)
    getitem___93895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3252, 4), call_assignment_87291_93894, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_93898 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___93895, *[int_93896], **kwargs_93897)
    
    # Assigning a type to the variable 'call_assignment_87293' (line 3252)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3252, 4), 'call_assignment_87293', getitem___call_result_93898)
    
    # Assigning a Name to a Name (line 3252):
    
    # Assigning a Name to a Name (line 3252):
    # Getting the type of 'call_assignment_87293' (line 3252)
    call_assignment_87293_93899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3252, 4), 'call_assignment_87293')
    # Assigning a type to the variable 'opened' (line 3252)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3252, 8), 'opened', call_assignment_87293_93899)
    
    # Assigning a Call to a Name (line 3253):
    
    # Assigning a Call to a Name (line 3253):
    
    # Assigning a Call to a Name (line 3253):
    
    # Call to writer(...): (line 3253)
    # Processing the call arguments (line 3253)
    # Getting the type of 'fh' (line 3253)
    fh_93902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3253, 24), 'fh', False)
    # Processing the call keyword arguments (line 3253)
    # Getting the type of 'delimiter' (line 3253)
    delimiter_93903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3253, 38), 'delimiter', False)
    keyword_93904 = delimiter_93903
    kwargs_93905 = {'delimiter': keyword_93904}
    # Getting the type of 'csv' (line 3253)
    csv_93900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3253, 13), 'csv', False)
    # Obtaining the member 'writer' of a type (line 3253)
    writer_93901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3253, 13), csv_93900, 'writer')
    # Calling writer(args, kwargs) (line 3253)
    writer_call_result_93906 = invoke(stypy.reporting.localization.Localization(__file__, 3253, 13), writer_93901, *[fh_93902], **kwargs_93905)
    
    # Assigning a type to the variable 'writer' (line 3253)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3253, 4), 'writer', writer_call_result_93906)
    
    # Assigning a Attribute to a Name (line 3254):
    
    # Assigning a Attribute to a Name (line 3254):
    
    # Assigning a Attribute to a Name (line 3254):
    # Getting the type of 'r' (line 3254)
    r_93907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3254, 13), 'r')
    # Obtaining the member 'dtype' of a type (line 3254)
    dtype_93908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3254, 13), r_93907, 'dtype')
    # Obtaining the member 'names' of a type (line 3254)
    names_93909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3254, 13), dtype_93908, 'names')
    # Assigning a type to the variable 'header' (line 3254)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3254, 4), 'header', names_93909)
    
    # Getting the type of 'withheader' (line 3255)
    withheader_93910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3255, 7), 'withheader')
    # Testing the type of an if condition (line 3255)
    if_condition_93911 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3255, 4), withheader_93910)
    # Assigning a type to the variable 'if_condition_93911' (line 3255)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3255, 4), 'if_condition_93911', if_condition_93911)
    # SSA begins for if statement (line 3255)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to writerow(...): (line 3256)
    # Processing the call arguments (line 3256)
    # Getting the type of 'header' (line 3256)
    header_93914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3256, 24), 'header', False)
    # Processing the call keyword arguments (line 3256)
    kwargs_93915 = {}
    # Getting the type of 'writer' (line 3256)
    writer_93912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3256, 8), 'writer', False)
    # Obtaining the member 'writerow' of a type (line 3256)
    writerow_93913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3256, 8), writer_93912, 'writerow')
    # Calling writerow(args, kwargs) (line 3256)
    writerow_call_result_93916 = invoke(stypy.reporting.localization.Localization(__file__, 3256, 8), writerow_93913, *[header_93914], **kwargs_93915)
    
    # SSA join for if statement (line 3255)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 3259):
    
    # Assigning a List to a Name (line 3259):
    
    # Assigning a List to a Name (line 3259):
    
    # Obtaining an instance of the builtin type 'list' (line 3259)
    list_93917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3259, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3259)
    
    # Assigning a type to the variable 'mvals' (line 3259)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3259, 4), 'mvals', list_93917)
    
    # Getting the type of 'header' (line 3260)
    header_93918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3260, 16), 'header')
    # Testing the type of a for loop iterable (line 3260)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3260, 4), header_93918)
    # Getting the type of the for loop variable (line 3260)
    for_loop_var_93919 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3260, 4), header_93918)
    # Assigning a type to the variable 'name' (line 3260)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3260, 4), 'name', for_loop_var_93919)
    # SSA begins for a for statement (line 3260)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to append(...): (line 3261)
    # Processing the call arguments (line 3261)
    
    # Call to get(...): (line 3261)
    # Processing the call arguments (line 3261)
    # Getting the type of 'name' (line 3261)
    name_93924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3261, 34), 'name', False)
    # Getting the type of 'missing' (line 3261)
    missing_93925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3261, 40), 'missing', False)
    # Processing the call keyword arguments (line 3261)
    kwargs_93926 = {}
    # Getting the type of 'missingd' (line 3261)
    missingd_93922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3261, 21), 'missingd', False)
    # Obtaining the member 'get' of a type (line 3261)
    get_93923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3261, 21), missingd_93922, 'get')
    # Calling get(args, kwargs) (line 3261)
    get_call_result_93927 = invoke(stypy.reporting.localization.Localization(__file__, 3261, 21), get_93923, *[name_93924, missing_93925], **kwargs_93926)
    
    # Processing the call keyword arguments (line 3261)
    kwargs_93928 = {}
    # Getting the type of 'mvals' (line 3261)
    mvals_93920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3261, 8), 'mvals', False)
    # Obtaining the member 'append' of a type (line 3261)
    append_93921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3261, 8), mvals_93920, 'append')
    # Calling append(args, kwargs) (line 3261)
    append_call_result_93929 = invoke(stypy.reporting.localization.Localization(__file__, 3261, 8), append_93921, *[get_call_result_93927], **kwargs_93928)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 3263):
    
    # Assigning a Name to a Name (line 3263):
    
    # Assigning a Name to a Name (line 3263):
    # Getting the type of 'False' (line 3263)
    False_93930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3263, 15), 'False')
    # Assigning a type to the variable 'ismasked' (line 3263)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3263, 4), 'ismasked', False_93930)
    
    
    # Call to len(...): (line 3264)
    # Processing the call arguments (line 3264)
    # Getting the type of 'r' (line 3264)
    r_93932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3264, 11), 'r', False)
    # Processing the call keyword arguments (line 3264)
    kwargs_93933 = {}
    # Getting the type of 'len' (line 3264)
    len_93931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3264, 7), 'len', False)
    # Calling len(args, kwargs) (line 3264)
    len_call_result_93934 = invoke(stypy.reporting.localization.Localization(__file__, 3264, 7), len_93931, *[r_93932], **kwargs_93933)
    
    # Testing the type of an if condition (line 3264)
    if_condition_93935 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3264, 4), len_call_result_93934)
    # Assigning a type to the variable 'if_condition_93935' (line 3264)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3264, 4), 'if_condition_93935', if_condition_93935)
    # SSA begins for if statement (line 3264)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 3265):
    
    # Assigning a Subscript to a Name (line 3265):
    
    # Assigning a Subscript to a Name (line 3265):
    
    # Obtaining the type of the subscript
    int_93936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3265, 16), 'int')
    # Getting the type of 'r' (line 3265)
    r_93937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3265, 14), 'r')
    # Obtaining the member '__getitem__' of a type (line 3265)
    getitem___93938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3265, 14), r_93937, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3265)
    subscript_call_result_93939 = invoke(stypy.reporting.localization.Localization(__file__, 3265, 14), getitem___93938, int_93936)
    
    # Assigning a type to the variable 'row' (line 3265)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3265, 8), 'row', subscript_call_result_93939)
    
    # Assigning a Call to a Name (line 3266):
    
    # Assigning a Call to a Name (line 3266):
    
    # Assigning a Call to a Name (line 3266):
    
    # Call to hasattr(...): (line 3266)
    # Processing the call arguments (line 3266)
    # Getting the type of 'row' (line 3266)
    row_93941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3266, 27), 'row', False)
    unicode_93942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3266, 32), 'unicode', u'_fieldmask')
    # Processing the call keyword arguments (line 3266)
    kwargs_93943 = {}
    # Getting the type of 'hasattr' (line 3266)
    hasattr_93940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3266, 19), 'hasattr', False)
    # Calling hasattr(args, kwargs) (line 3266)
    hasattr_call_result_93944 = invoke(stypy.reporting.localization.Localization(__file__, 3266, 19), hasattr_93940, *[row_93941, unicode_93942], **kwargs_93943)
    
    # Assigning a type to the variable 'ismasked' (line 3266)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3266, 8), 'ismasked', hasattr_call_result_93944)
    # SSA join for if statement (line 3264)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'r' (line 3268)
    r_93945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3268, 15), 'r')
    # Testing the type of a for loop iterable (line 3268)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3268, 4), r_93945)
    # Getting the type of the for loop variable (line 3268)
    for_loop_var_93946 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3268, 4), r_93945)
    # Assigning a type to the variable 'row' (line 3268)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3268, 4), 'row', for_loop_var_93946)
    # SSA begins for a for statement (line 3268)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'ismasked' (line 3269)
    ismasked_93947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3269, 11), 'ismasked')
    # Testing the type of an if condition (line 3269)
    if_condition_93948 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3269, 8), ismasked_93947)
    # Assigning a type to the variable 'if_condition_93948' (line 3269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3269, 8), 'if_condition_93948', if_condition_93948)
    # SSA begins for if statement (line 3269)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 3270):
    
    # Assigning a Call to a Name (line 3270):
    
    # Assigning a Call to a Name (line 3270):
    
    # Call to item(...): (line 3270)
    # Processing the call keyword arguments (line 3270)
    kwargs_93951 = {}
    # Getting the type of 'row' (line 3270)
    row_93949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3270, 27), 'row', False)
    # Obtaining the member 'item' of a type (line 3270)
    item_93950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3270, 27), row_93949, 'item')
    # Calling item(args, kwargs) (line 3270)
    item_call_result_93952 = invoke(stypy.reporting.localization.Localization(__file__, 3270, 27), item_93950, *[], **kwargs_93951)
    
    # Assigning a type to the variable 'tuple_assignment_87294' (line 3270)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3270, 12), 'tuple_assignment_87294', item_call_result_93952)
    
    # Assigning a Call to a Name (line 3270):
    
    # Assigning a Call to a Name (line 3270):
    
    # Call to item(...): (line 3270)
    # Processing the call keyword arguments (line 3270)
    kwargs_93956 = {}
    # Getting the type of 'row' (line 3270)
    row_93953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3270, 39), 'row', False)
    # Obtaining the member '_fieldmask' of a type (line 3270)
    _fieldmask_93954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3270, 39), row_93953, '_fieldmask')
    # Obtaining the member 'item' of a type (line 3270)
    item_93955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3270, 39), _fieldmask_93954, 'item')
    # Calling item(args, kwargs) (line 3270)
    item_call_result_93957 = invoke(stypy.reporting.localization.Localization(__file__, 3270, 39), item_93955, *[], **kwargs_93956)
    
    # Assigning a type to the variable 'tuple_assignment_87295' (line 3270)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3270, 12), 'tuple_assignment_87295', item_call_result_93957)
    
    # Assigning a Name to a Name (line 3270):
    
    # Assigning a Name to a Name (line 3270):
    # Getting the type of 'tuple_assignment_87294' (line 3270)
    tuple_assignment_87294_93958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3270, 12), 'tuple_assignment_87294')
    # Assigning a type to the variable 'row' (line 3270)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3270, 12), 'row', tuple_assignment_87294_93958)
    
    # Assigning a Name to a Name (line 3270):
    
    # Assigning a Name to a Name (line 3270):
    # Getting the type of 'tuple_assignment_87295' (line 3270)
    tuple_assignment_87295_93959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3270, 12), 'tuple_assignment_87295')
    # Assigning a type to the variable 'rowmask' (line 3270)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3270, 17), 'rowmask', tuple_assignment_87295_93959)
    # SSA branch for the else part of an if statement (line 3269)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 3272):
    
    # Assigning a BinOp to a Name (line 3272):
    
    # Assigning a BinOp to a Name (line 3272):
    
    # Obtaining an instance of the builtin type 'list' (line 3272)
    list_93960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3272, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3272)
    # Adding element type (line 3272)
    # Getting the type of 'False' (line 3272)
    False_93961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3272, 23), 'False')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3272, 22), list_93960, False_93961)
    
    
    # Call to len(...): (line 3272)
    # Processing the call arguments (line 3272)
    # Getting the type of 'row' (line 3272)
    row_93963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3272, 36), 'row', False)
    # Processing the call keyword arguments (line 3272)
    kwargs_93964 = {}
    # Getting the type of 'len' (line 3272)
    len_93962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3272, 32), 'len', False)
    # Calling len(args, kwargs) (line 3272)
    len_call_result_93965 = invoke(stypy.reporting.localization.Localization(__file__, 3272, 32), len_93962, *[row_93963], **kwargs_93964)
    
    # Applying the binary operator '*' (line 3272)
    result_mul_93966 = python_operator(stypy.reporting.localization.Localization(__file__, 3272, 22), '*', list_93960, len_call_result_93965)
    
    # Assigning a type to the variable 'rowmask' (line 3272)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3272, 12), 'rowmask', result_mul_93966)
    # SSA join for if statement (line 3269)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to writerow(...): (line 3273)
    # Processing the call arguments (line 3273)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to zip(...): (line 3274)
    # Processing the call arguments (line 3274)
    # Getting the type of 'funcs' (line 3274)
    funcs_93976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 32), 'funcs', False)
    # Getting the type of 'row' (line 3274)
    row_93977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 39), 'row', False)
    # Getting the type of 'rowmask' (line 3274)
    rowmask_93978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 44), 'rowmask', False)
    # Getting the type of 'mvals' (line 3274)
    mvals_93979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 53), 'mvals', False)
    # Processing the call keyword arguments (line 3274)
    kwargs_93980 = {}
    # Getting the type of 'zip' (line 3274)
    zip_93975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 28), 'zip', False)
    # Calling zip(args, kwargs) (line 3274)
    zip_call_result_93981 = invoke(stypy.reporting.localization.Localization(__file__, 3274, 28), zip_93975, *[funcs_93976, row_93977, rowmask_93978, mvals_93979], **kwargs_93980)
    
    comprehension_93982 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3273, 25), zip_call_result_93981)
    # Assigning a type to the variable 'func' (line 3273)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3273, 25), 'func', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3273, 25), comprehension_93982))
    # Assigning a type to the variable 'val' (line 3273)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3273, 25), 'val', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3273, 25), comprehension_93982))
    # Assigning a type to the variable 'mask' (line 3273)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3273, 25), 'mask', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3273, 25), comprehension_93982))
    # Assigning a type to the variable 'mval' (line 3273)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3273, 25), 'mval', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3273, 25), comprehension_93982))
    
    # Call to func(...): (line 3273)
    # Processing the call arguments (line 3273)
    # Getting the type of 'val' (line 3273)
    val_93970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3273, 30), 'val', False)
    # Getting the type of 'mask' (line 3273)
    mask_93971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3273, 35), 'mask', False)
    # Getting the type of 'mval' (line 3273)
    mval_93972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3273, 41), 'mval', False)
    # Processing the call keyword arguments (line 3273)
    kwargs_93973 = {}
    # Getting the type of 'func' (line 3273)
    func_93969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3273, 25), 'func', False)
    # Calling func(args, kwargs) (line 3273)
    func_call_result_93974 = invoke(stypy.reporting.localization.Localization(__file__, 3273, 25), func_93969, *[val_93970, mask_93971, mval_93972], **kwargs_93973)
    
    list_93983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3273, 25), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3273, 25), list_93983, func_call_result_93974)
    # Processing the call keyword arguments (line 3273)
    kwargs_93984 = {}
    # Getting the type of 'writer' (line 3273)
    writer_93967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3273, 8), 'writer', False)
    # Obtaining the member 'writerow' of a type (line 3273)
    writerow_93968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3273, 8), writer_93967, 'writerow')
    # Calling writerow(args, kwargs) (line 3273)
    writerow_call_result_93985 = invoke(stypy.reporting.localization.Localization(__file__, 3273, 8), writerow_93968, *[list_93983], **kwargs_93984)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'opened' (line 3275)
    opened_93986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3275, 7), 'opened')
    # Testing the type of an if condition (line 3275)
    if_condition_93987 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3275, 4), opened_93986)
    # Assigning a type to the variable 'if_condition_93987' (line 3275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3275, 4), 'if_condition_93987', if_condition_93987)
    # SSA begins for if statement (line 3275)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to close(...): (line 3276)
    # Processing the call keyword arguments (line 3276)
    kwargs_93990 = {}
    # Getting the type of 'fh' (line 3276)
    fh_93988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3276, 8), 'fh', False)
    # Obtaining the member 'close' of a type (line 3276)
    close_93989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3276, 8), fh_93988, 'close')
    # Calling close(args, kwargs) (line 3276)
    close_call_result_93991 = invoke(stypy.reporting.localization.Localization(__file__, 3276, 8), close_93989, *[], **kwargs_93990)
    
    # SSA join for if statement (line 3275)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'rec2csv(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rec2csv' in the type store
    # Getting the type of 'stypy_return_type' (line 3208)
    stypy_return_type_93992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3208, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_93992)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rec2csv'
    return stypy_return_type_93992

# Assigning a type to the variable 'rec2csv' (line 3208)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3208, 0), 'rec2csv', rec2csv)

@norecursion
def griddata(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    unicode_93993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3279, 37), 'unicode', u'nn')
    defaults = [unicode_93993]
    # Create a new context for function 'griddata'
    module_type_store = module_type_store.open_function_context('griddata', 3279, 0, False)
    
    # Passed parameters checking function
    griddata.stypy_localization = localization
    griddata.stypy_type_of_self = None
    griddata.stypy_type_store = module_type_store
    griddata.stypy_function_name = 'griddata'
    griddata.stypy_param_names_list = ['x', 'y', 'z', 'xi', 'yi', 'interp']
    griddata.stypy_varargs_param_name = None
    griddata.stypy_kwargs_param_name = None
    griddata.stypy_call_defaults = defaults
    griddata.stypy_call_varargs = varargs
    griddata.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'griddata', ['x', 'y', 'z', 'xi', 'yi', 'interp'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'griddata', localization, ['x', 'y', 'z', 'xi', 'yi', 'interp'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'griddata(...)' code ##################

    unicode_93994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3320, (-1)), 'unicode', u"Interpolates from a nonuniformly spaced grid to some other\n    grid.\n\n    Fits a surface of the form z = f(`x`, `y`) to the data in the\n    (usually) nonuniformly spaced vectors (`x`, `y`, `z`), then\n    interpolates this surface at the points specified by\n    (`xi`, `yi`) to produce `zi`.\n\n    Parameters\n    ----------\n    x, y, z : 1d array_like\n        Coordinates of grid points to interpolate from.\n    xi, yi : 1d or 2d array_like\n        Coordinates of grid points to interpolate to.\n    interp : string key from {'nn', 'linear'}\n        Interpolation algorithm, either 'nn' for natural neighbor, or\n        'linear' for linear interpolation.\n\n    Returns\n    -------\n    2d float array\n        Array of values interpolated at (`xi`, `yi`) points.  Array\n        will be masked is any of (`xi`, `yi`) are outside the convex\n        hull of (`x`, `y`).\n\n    Notes\n    -----\n    If `interp` is 'nn' (the default), uses natural neighbor\n    interpolation based on Delaunay triangulation.  This option is\n    only available if the mpl_toolkits.natgrid module is installed.\n    This can be downloaded from https://github.com/matplotlib/natgrid.\n    The (`xi`, `yi`) grid must be regular and monotonically increasing\n    in this case.\n\n    If `interp` is 'linear', linear interpolation is used via\n    matplotlib.tri.LinearTriInterpolator.\n\n    Instead of using `griddata`, more flexible functionality and other\n    interpolation options are available using a\n    matplotlib.tri.Triangulation and a matplotlib.tri.TriInterpolator.\n    ")
    
    # Assigning a Call to a Name (line 3322):
    
    # Assigning a Call to a Name (line 3322):
    
    # Assigning a Call to a Name (line 3322):
    
    # Call to asanyarray(...): (line 3322)
    # Processing the call arguments (line 3322)
    # Getting the type of 'x' (line 3322)
    x_93997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3322, 22), 'x', False)
    # Processing the call keyword arguments (line 3322)
    # Getting the type of 'np' (line 3322)
    np_93998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3322, 31), 'np', False)
    # Obtaining the member 'float64' of a type (line 3322)
    float64_93999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3322, 31), np_93998, 'float64')
    keyword_94000 = float64_93999
    kwargs_94001 = {'dtype': keyword_94000}
    # Getting the type of 'np' (line 3322)
    np_93995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3322, 8), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 3322)
    asanyarray_93996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3322, 8), np_93995, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 3322)
    asanyarray_call_result_94002 = invoke(stypy.reporting.localization.Localization(__file__, 3322, 8), asanyarray_93996, *[x_93997], **kwargs_94001)
    
    # Assigning a type to the variable 'x' (line 3322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3322, 4), 'x', asanyarray_call_result_94002)
    
    # Assigning a Call to a Name (line 3323):
    
    # Assigning a Call to a Name (line 3323):
    
    # Assigning a Call to a Name (line 3323):
    
    # Call to asanyarray(...): (line 3323)
    # Processing the call arguments (line 3323)
    # Getting the type of 'y' (line 3323)
    y_94005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3323, 22), 'y', False)
    # Processing the call keyword arguments (line 3323)
    # Getting the type of 'np' (line 3323)
    np_94006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3323, 31), 'np', False)
    # Obtaining the member 'float64' of a type (line 3323)
    float64_94007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3323, 31), np_94006, 'float64')
    keyword_94008 = float64_94007
    kwargs_94009 = {'dtype': keyword_94008}
    # Getting the type of 'np' (line 3323)
    np_94003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3323, 8), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 3323)
    asanyarray_94004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3323, 8), np_94003, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 3323)
    asanyarray_call_result_94010 = invoke(stypy.reporting.localization.Localization(__file__, 3323, 8), asanyarray_94004, *[y_94005], **kwargs_94009)
    
    # Assigning a type to the variable 'y' (line 3323)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3323, 4), 'y', asanyarray_call_result_94010)
    
    # Assigning a Call to a Name (line 3324):
    
    # Assigning a Call to a Name (line 3324):
    
    # Assigning a Call to a Name (line 3324):
    
    # Call to asanyarray(...): (line 3324)
    # Processing the call arguments (line 3324)
    # Getting the type of 'z' (line 3324)
    z_94013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3324, 22), 'z', False)
    # Processing the call keyword arguments (line 3324)
    # Getting the type of 'np' (line 3324)
    np_94014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3324, 31), 'np', False)
    # Obtaining the member 'float64' of a type (line 3324)
    float64_94015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3324, 31), np_94014, 'float64')
    keyword_94016 = float64_94015
    kwargs_94017 = {'dtype': keyword_94016}
    # Getting the type of 'np' (line 3324)
    np_94011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3324, 8), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 3324)
    asanyarray_94012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3324, 8), np_94011, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 3324)
    asanyarray_call_result_94018 = invoke(stypy.reporting.localization.Localization(__file__, 3324, 8), asanyarray_94012, *[z_94013], **kwargs_94017)
    
    # Assigning a type to the variable 'z' (line 3324)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3324, 4), 'z', asanyarray_call_result_94018)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'x' (line 3325)
    x_94019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 7), 'x')
    # Obtaining the member 'shape' of a type (line 3325)
    shape_94020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3325, 7), x_94019, 'shape')
    # Getting the type of 'y' (line 3325)
    y_94021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 18), 'y')
    # Obtaining the member 'shape' of a type (line 3325)
    shape_94022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3325, 18), y_94021, 'shape')
    # Applying the binary operator '!=' (line 3325)
    result_ne_94023 = python_operator(stypy.reporting.localization.Localization(__file__, 3325, 7), '!=', shape_94020, shape_94022)
    
    
    # Getting the type of 'x' (line 3325)
    x_94024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 29), 'x')
    # Obtaining the member 'shape' of a type (line 3325)
    shape_94025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3325, 29), x_94024, 'shape')
    # Getting the type of 'z' (line 3325)
    z_94026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 40), 'z')
    # Obtaining the member 'shape' of a type (line 3325)
    shape_94027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3325, 40), z_94026, 'shape')
    # Applying the binary operator '!=' (line 3325)
    result_ne_94028 = python_operator(stypy.reporting.localization.Localization(__file__, 3325, 29), '!=', shape_94025, shape_94027)
    
    # Applying the binary operator 'or' (line 3325)
    result_or_keyword_94029 = python_operator(stypy.reporting.localization.Localization(__file__, 3325, 7), 'or', result_ne_94023, result_ne_94028)
    
    # Getting the type of 'x' (line 3325)
    x_94030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 51), 'x')
    # Obtaining the member 'ndim' of a type (line 3325)
    ndim_94031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3325, 51), x_94030, 'ndim')
    int_94032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3325, 61), 'int')
    # Applying the binary operator '!=' (line 3325)
    result_ne_94033 = python_operator(stypy.reporting.localization.Localization(__file__, 3325, 51), '!=', ndim_94031, int_94032)
    
    # Applying the binary operator 'or' (line 3325)
    result_or_keyword_94034 = python_operator(stypy.reporting.localization.Localization(__file__, 3325, 7), 'or', result_or_keyword_94029, result_ne_94033)
    
    # Testing the type of an if condition (line 3325)
    if_condition_94035 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3325, 4), result_or_keyword_94034)
    # Assigning a type to the variable 'if_condition_94035' (line 3325)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3325, 4), 'if_condition_94035', if_condition_94035)
    # SSA begins for if statement (line 3325)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3326)
    # Processing the call arguments (line 3326)
    unicode_94037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3326, 25), 'unicode', u'x, y and z must be equal-length 1-D arrays')
    # Processing the call keyword arguments (line 3326)
    kwargs_94038 = {}
    # Getting the type of 'ValueError' (line 3326)
    ValueError_94036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3326, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3326)
    ValueError_call_result_94039 = invoke(stypy.reporting.localization.Localization(__file__, 3326, 14), ValueError_94036, *[unicode_94037], **kwargs_94038)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3326, 8), ValueError_call_result_94039, 'raise parameter', BaseException)
    # SSA join for if statement (line 3325)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3328):
    
    # Assigning a Call to a Name (line 3328):
    
    # Assigning a Call to a Name (line 3328):
    
    # Call to asanyarray(...): (line 3328)
    # Processing the call arguments (line 3328)
    # Getting the type of 'xi' (line 3328)
    xi_94042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3328, 23), 'xi', False)
    # Processing the call keyword arguments (line 3328)
    # Getting the type of 'np' (line 3328)
    np_94043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3328, 33), 'np', False)
    # Obtaining the member 'float64' of a type (line 3328)
    float64_94044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3328, 33), np_94043, 'float64')
    keyword_94045 = float64_94044
    kwargs_94046 = {'dtype': keyword_94045}
    # Getting the type of 'np' (line 3328)
    np_94040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3328, 9), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 3328)
    asanyarray_94041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3328, 9), np_94040, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 3328)
    asanyarray_call_result_94047 = invoke(stypy.reporting.localization.Localization(__file__, 3328, 9), asanyarray_94041, *[xi_94042], **kwargs_94046)
    
    # Assigning a type to the variable 'xi' (line 3328)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3328, 4), 'xi', asanyarray_call_result_94047)
    
    # Assigning a Call to a Name (line 3329):
    
    # Assigning a Call to a Name (line 3329):
    
    # Assigning a Call to a Name (line 3329):
    
    # Call to asanyarray(...): (line 3329)
    # Processing the call arguments (line 3329)
    # Getting the type of 'yi' (line 3329)
    yi_94050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3329, 23), 'yi', False)
    # Processing the call keyword arguments (line 3329)
    # Getting the type of 'np' (line 3329)
    np_94051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3329, 33), 'np', False)
    # Obtaining the member 'float64' of a type (line 3329)
    float64_94052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3329, 33), np_94051, 'float64')
    keyword_94053 = float64_94052
    kwargs_94054 = {'dtype': keyword_94053}
    # Getting the type of 'np' (line 3329)
    np_94048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3329, 9), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 3329)
    asanyarray_94049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3329, 9), np_94048, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 3329)
    asanyarray_call_result_94055 = invoke(stypy.reporting.localization.Localization(__file__, 3329, 9), asanyarray_94049, *[yi_94050], **kwargs_94054)
    
    # Assigning a type to the variable 'yi' (line 3329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3329, 4), 'yi', asanyarray_call_result_94055)
    
    
    # Getting the type of 'xi' (line 3330)
    xi_94056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3330, 7), 'xi')
    # Obtaining the member 'ndim' of a type (line 3330)
    ndim_94057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3330, 7), xi_94056, 'ndim')
    # Getting the type of 'yi' (line 3330)
    yi_94058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3330, 18), 'yi')
    # Obtaining the member 'ndim' of a type (line 3330)
    ndim_94059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3330, 18), yi_94058, 'ndim')
    # Applying the binary operator '!=' (line 3330)
    result_ne_94060 = python_operator(stypy.reporting.localization.Localization(__file__, 3330, 7), '!=', ndim_94057, ndim_94059)
    
    # Testing the type of an if condition (line 3330)
    if_condition_94061 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3330, 4), result_ne_94060)
    # Assigning a type to the variable 'if_condition_94061' (line 3330)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3330, 4), 'if_condition_94061', if_condition_94061)
    # SSA begins for if statement (line 3330)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3331)
    # Processing the call arguments (line 3331)
    unicode_94063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3331, 25), 'unicode', u'xi and yi must be arrays with the same number of dimensions (1 or 2)')
    # Processing the call keyword arguments (line 3331)
    kwargs_94064 = {}
    # Getting the type of 'ValueError' (line 3331)
    ValueError_94062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3331, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3331)
    ValueError_call_result_94065 = invoke(stypy.reporting.localization.Localization(__file__, 3331, 14), ValueError_94062, *[unicode_94063], **kwargs_94064)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3331, 8), ValueError_call_result_94065, 'raise parameter', BaseException)
    # SSA join for if statement (line 3330)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'xi' (line 3333)
    xi_94066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3333, 7), 'xi')
    # Obtaining the member 'ndim' of a type (line 3333)
    ndim_94067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3333, 7), xi_94066, 'ndim')
    int_94068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3333, 18), 'int')
    # Applying the binary operator '==' (line 3333)
    result_eq_94069 = python_operator(stypy.reporting.localization.Localization(__file__, 3333, 7), '==', ndim_94067, int_94068)
    
    
    # Getting the type of 'xi' (line 3333)
    xi_94070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3333, 24), 'xi')
    # Obtaining the member 'shape' of a type (line 3333)
    shape_94071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3333, 24), xi_94070, 'shape')
    # Getting the type of 'yi' (line 3333)
    yi_94072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3333, 36), 'yi')
    # Obtaining the member 'shape' of a type (line 3333)
    shape_94073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3333, 36), yi_94072, 'shape')
    # Applying the binary operator '!=' (line 3333)
    result_ne_94074 = python_operator(stypy.reporting.localization.Localization(__file__, 3333, 24), '!=', shape_94071, shape_94073)
    
    # Applying the binary operator 'and' (line 3333)
    result_and_keyword_94075 = python_operator(stypy.reporting.localization.Localization(__file__, 3333, 7), 'and', result_eq_94069, result_ne_94074)
    
    # Testing the type of an if condition (line 3333)
    if_condition_94076 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3333, 4), result_and_keyword_94075)
    # Assigning a type to the variable 'if_condition_94076' (line 3333)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3333, 4), 'if_condition_94076', if_condition_94076)
    # SSA begins for if statement (line 3333)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3334)
    # Processing the call arguments (line 3334)
    unicode_94078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3334, 25), 'unicode', u'if xi and yi are 2D arrays, they must have the same shape')
    # Processing the call keyword arguments (line 3334)
    kwargs_94079 = {}
    # Getting the type of 'ValueError' (line 3334)
    ValueError_94077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3334, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3334)
    ValueError_call_result_94080 = invoke(stypy.reporting.localization.Localization(__file__, 3334, 14), ValueError_94077, *[unicode_94078], **kwargs_94079)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3334, 8), ValueError_call_result_94080, 'raise parameter', BaseException)
    # SSA join for if statement (line 3333)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'xi' (line 3336)
    xi_94081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 7), 'xi')
    # Obtaining the member 'ndim' of a type (line 3336)
    ndim_94082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3336, 7), xi_94081, 'ndim')
    int_94083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3336, 18), 'int')
    # Applying the binary operator '==' (line 3336)
    result_eq_94084 = python_operator(stypy.reporting.localization.Localization(__file__, 3336, 7), '==', ndim_94082, int_94083)
    
    # Testing the type of an if condition (line 3336)
    if_condition_94085 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3336, 4), result_eq_94084)
    # Assigning a type to the variable 'if_condition_94085' (line 3336)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3336, 4), 'if_condition_94085', if_condition_94085)
    # SSA begins for if statement (line 3336)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 3337):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to meshgrid(...): (line 3337)
    # Processing the call arguments (line 3337)
    # Getting the type of 'xi' (line 3337)
    xi_94088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3337, 29), 'xi', False)
    # Getting the type of 'yi' (line 3337)
    yi_94089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3337, 33), 'yi', False)
    # Processing the call keyword arguments (line 3337)
    kwargs_94090 = {}
    # Getting the type of 'np' (line 3337)
    np_94086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3337, 17), 'np', False)
    # Obtaining the member 'meshgrid' of a type (line 3337)
    meshgrid_94087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3337, 17), np_94086, 'meshgrid')
    # Calling meshgrid(args, kwargs) (line 3337)
    meshgrid_call_result_94091 = invoke(stypy.reporting.localization.Localization(__file__, 3337, 17), meshgrid_94087, *[xi_94088, yi_94089], **kwargs_94090)
    
    # Assigning a type to the variable 'call_assignment_87296' (line 3337)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3337, 8), 'call_assignment_87296', meshgrid_call_result_94091)
    
    # Assigning a Call to a Name (line 3337):
    
    # Assigning a Call to a Name (line 3337):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_94094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3337, 8), 'int')
    # Processing the call keyword arguments
    kwargs_94095 = {}
    # Getting the type of 'call_assignment_87296' (line 3337)
    call_assignment_87296_94092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3337, 8), 'call_assignment_87296', False)
    # Obtaining the member '__getitem__' of a type (line 3337)
    getitem___94093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3337, 8), call_assignment_87296_94092, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_94096 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___94093, *[int_94094], **kwargs_94095)
    
    # Assigning a type to the variable 'call_assignment_87297' (line 3337)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3337, 8), 'call_assignment_87297', getitem___call_result_94096)
    
    # Assigning a Name to a Name (line 3337):
    
    # Assigning a Name to a Name (line 3337):
    # Getting the type of 'call_assignment_87297' (line 3337)
    call_assignment_87297_94097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3337, 8), 'call_assignment_87297')
    # Assigning a type to the variable 'xi' (line 3337)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3337, 8), 'xi', call_assignment_87297_94097)
    
    # Assigning a Call to a Name (line 3337):
    
    # Assigning a Call to a Name (line 3337):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_94100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3337, 8), 'int')
    # Processing the call keyword arguments
    kwargs_94101 = {}
    # Getting the type of 'call_assignment_87296' (line 3337)
    call_assignment_87296_94098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3337, 8), 'call_assignment_87296', False)
    # Obtaining the member '__getitem__' of a type (line 3337)
    getitem___94099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3337, 8), call_assignment_87296_94098, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_94102 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___94099, *[int_94100], **kwargs_94101)
    
    # Assigning a type to the variable 'call_assignment_87298' (line 3337)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3337, 8), 'call_assignment_87298', getitem___call_result_94102)
    
    # Assigning a Name to a Name (line 3337):
    
    # Assigning a Name to a Name (line 3337):
    # Getting the type of 'call_assignment_87298' (line 3337)
    call_assignment_87298_94103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3337, 8), 'call_assignment_87298')
    # Assigning a type to the variable 'yi' (line 3337)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3337, 12), 'yi', call_assignment_87298_94103)
    # SSA join for if statement (line 3336)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'interp' (line 3339)
    interp_94104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3339, 7), 'interp')
    unicode_94105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3339, 17), 'unicode', u'nn')
    # Applying the binary operator '==' (line 3339)
    result_eq_94106 = python_operator(stypy.reporting.localization.Localization(__file__, 3339, 7), '==', interp_94104, unicode_94105)
    
    # Testing the type of an if condition (line 3339)
    if_condition_94107 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3339, 4), result_eq_94106)
    # Assigning a type to the variable 'if_condition_94107' (line 3339)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3339, 4), 'if_condition_94107', if_condition_94107)
    # SSA begins for if statement (line 3339)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 3340):
    
    # Assigning a Name to a Name (line 3340):
    
    # Assigning a Name to a Name (line 3340):
    # Getting the type of 'True' (line 3340)
    True_94108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 31), 'True')
    # Assigning a type to the variable 'use_nn_interpolation' (line 3340)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3340, 8), 'use_nn_interpolation', True_94108)
    # SSA branch for the else part of an if statement (line 3339)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'interp' (line 3341)
    interp_94109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3341, 9), 'interp')
    unicode_94110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3341, 19), 'unicode', u'linear')
    # Applying the binary operator '==' (line 3341)
    result_eq_94111 = python_operator(stypy.reporting.localization.Localization(__file__, 3341, 9), '==', interp_94109, unicode_94110)
    
    # Testing the type of an if condition (line 3341)
    if_condition_94112 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3341, 9), result_eq_94111)
    # Assigning a type to the variable 'if_condition_94112' (line 3341)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3341, 9), 'if_condition_94112', if_condition_94112)
    # SSA begins for if statement (line 3341)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 3342):
    
    # Assigning a Name to a Name (line 3342):
    
    # Assigning a Name to a Name (line 3342):
    # Getting the type of 'False' (line 3342)
    False_94113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3342, 31), 'False')
    # Assigning a type to the variable 'use_nn_interpolation' (line 3342)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3342, 8), 'use_nn_interpolation', False_94113)
    # SSA branch for the else part of an if statement (line 3341)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 3344)
    # Processing the call arguments (line 3344)
    unicode_94115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3344, 25), 'unicode', u"interp keyword must be one of 'linear' (for linear interpolation) or 'nn' (for natural neighbor interpolation).  Default is 'nn'.")
    # Processing the call keyword arguments (line 3344)
    kwargs_94116 = {}
    # Getting the type of 'ValueError' (line 3344)
    ValueError_94114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3344, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3344)
    ValueError_call_result_94117 = invoke(stypy.reporting.localization.Localization(__file__, 3344, 14), ValueError_94114, *[unicode_94115], **kwargs_94116)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3344, 8), ValueError_call_result_94117, 'raise parameter', BaseException)
    # SSA join for if statement (line 3341)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3339)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3349):
    
    # Assigning a Call to a Name (line 3349):
    
    # Assigning a Call to a Name (line 3349):
    
    # Call to getmask(...): (line 3349)
    # Processing the call arguments (line 3349)
    # Getting the type of 'z' (line 3349)
    z_94121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3349, 25), 'z', False)
    # Processing the call keyword arguments (line 3349)
    kwargs_94122 = {}
    # Getting the type of 'np' (line 3349)
    np_94118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3349, 11), 'np', False)
    # Obtaining the member 'ma' of a type (line 3349)
    ma_94119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3349, 11), np_94118, 'ma')
    # Obtaining the member 'getmask' of a type (line 3349)
    getmask_94120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3349, 11), ma_94119, 'getmask')
    # Calling getmask(args, kwargs) (line 3349)
    getmask_call_result_94123 = invoke(stypy.reporting.localization.Localization(__file__, 3349, 11), getmask_94120, *[z_94121], **kwargs_94122)
    
    # Assigning a type to the variable 'mask' (line 3349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3349, 4), 'mask', getmask_call_result_94123)
    
    
    # Getting the type of 'mask' (line 3350)
    mask_94124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3350, 7), 'mask')
    # Getting the type of 'np' (line 3350)
    np_94125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3350, 19), 'np')
    # Obtaining the member 'ma' of a type (line 3350)
    ma_94126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3350, 19), np_94125, 'ma')
    # Obtaining the member 'nomask' of a type (line 3350)
    nomask_94127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3350, 19), ma_94126, 'nomask')
    # Applying the binary operator 'isnot' (line 3350)
    result_is_not_94128 = python_operator(stypy.reporting.localization.Localization(__file__, 3350, 7), 'isnot', mask_94124, nomask_94127)
    
    # Testing the type of an if condition (line 3350)
    if_condition_94129 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3350, 4), result_is_not_94128)
    # Assigning a type to the variable 'if_condition_94129' (line 3350)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3350, 4), 'if_condition_94129', if_condition_94129)
    # SSA begins for if statement (line 3350)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3351):
    
    # Assigning a Call to a Name (line 3351):
    
    # Assigning a Call to a Name (line 3351):
    
    # Call to compress(...): (line 3351)
    # Processing the call arguments (line 3351)
    
    # Getting the type of 'mask' (line 3351)
    mask_94132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3351, 24), 'mask', False)
    # Applying the '~' unary operator (line 3351)
    result_inv_94133 = python_operator(stypy.reporting.localization.Localization(__file__, 3351, 23), '~', mask_94132)
    
    # Processing the call keyword arguments (line 3351)
    kwargs_94134 = {}
    # Getting the type of 'x' (line 3351)
    x_94130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3351, 12), 'x', False)
    # Obtaining the member 'compress' of a type (line 3351)
    compress_94131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3351, 12), x_94130, 'compress')
    # Calling compress(args, kwargs) (line 3351)
    compress_call_result_94135 = invoke(stypy.reporting.localization.Localization(__file__, 3351, 12), compress_94131, *[result_inv_94133], **kwargs_94134)
    
    # Assigning a type to the variable 'x' (line 3351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3351, 8), 'x', compress_call_result_94135)
    
    # Assigning a Call to a Name (line 3352):
    
    # Assigning a Call to a Name (line 3352):
    
    # Assigning a Call to a Name (line 3352):
    
    # Call to compress(...): (line 3352)
    # Processing the call arguments (line 3352)
    
    # Getting the type of 'mask' (line 3352)
    mask_94138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3352, 24), 'mask', False)
    # Applying the '~' unary operator (line 3352)
    result_inv_94139 = python_operator(stypy.reporting.localization.Localization(__file__, 3352, 23), '~', mask_94138)
    
    # Processing the call keyword arguments (line 3352)
    kwargs_94140 = {}
    # Getting the type of 'y' (line 3352)
    y_94136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3352, 12), 'y', False)
    # Obtaining the member 'compress' of a type (line 3352)
    compress_94137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3352, 12), y_94136, 'compress')
    # Calling compress(args, kwargs) (line 3352)
    compress_call_result_94141 = invoke(stypy.reporting.localization.Localization(__file__, 3352, 12), compress_94137, *[result_inv_94139], **kwargs_94140)
    
    # Assigning a type to the variable 'y' (line 3352)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3352, 8), 'y', compress_call_result_94141)
    
    # Assigning a Call to a Name (line 3353):
    
    # Assigning a Call to a Name (line 3353):
    
    # Assigning a Call to a Name (line 3353):
    
    # Call to compressed(...): (line 3353)
    # Processing the call keyword arguments (line 3353)
    kwargs_94144 = {}
    # Getting the type of 'z' (line 3353)
    z_94142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3353, 12), 'z', False)
    # Obtaining the member 'compressed' of a type (line 3353)
    compressed_94143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3353, 12), z_94142, 'compressed')
    # Calling compressed(args, kwargs) (line 3353)
    compressed_call_result_94145 = invoke(stypy.reporting.localization.Localization(__file__, 3353, 12), compressed_94143, *[], **kwargs_94144)
    
    # Assigning a type to the variable 'z' (line 3353)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3353, 8), 'z', compressed_call_result_94145)
    # SSA join for if statement (line 3350)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'use_nn_interpolation' (line 3355)
    use_nn_interpolation_94146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3355, 7), 'use_nn_interpolation')
    # Testing the type of an if condition (line 3355)
    if_condition_94147 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3355, 4), use_nn_interpolation_94146)
    # Assigning a type to the variable 'if_condition_94147' (line 3355)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3355, 4), 'if_condition_94147', if_condition_94147)
    # SSA begins for if statement (line 3355)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 3356)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3357, 12))
    
    # 'from mpl_toolkits.natgrid import _natgrid' statement (line 3357)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_94148 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3357, 12), 'mpl_toolkits.natgrid')

    if (type(import_94148) is not StypyTypeError):

        if (import_94148 != 'pyd_module'):
            __import__(import_94148)
            sys_modules_94149 = sys.modules[import_94148]
            import_from_module(stypy.reporting.localization.Localization(__file__, 3357, 12), 'mpl_toolkits.natgrid', sys_modules_94149.module_type_store, module_type_store, ['_natgrid'])
            nest_module(stypy.reporting.localization.Localization(__file__, 3357, 12), __file__, sys_modules_94149, sys_modules_94149.module_type_store, module_type_store)
        else:
            from mpl_toolkits.natgrid import _natgrid

            import_from_module(stypy.reporting.localization.Localization(__file__, 3357, 12), 'mpl_toolkits.natgrid', None, module_type_store, ['_natgrid'], [_natgrid])

    else:
        # Assigning a type to the variable 'mpl_toolkits.natgrid' (line 3357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3357, 12), 'mpl_toolkits.natgrid', import_94148)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    # SSA branch for the except part of a try statement (line 3356)
    # SSA branch for the except 'ImportError' branch of a try statement (line 3356)
    module_type_store.open_ssa_branch('except')
    
    # Call to RuntimeError(...): (line 3359)
    # Processing the call arguments (line 3359)
    unicode_94151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3360, 16), 'unicode', u"To use interp='nn' (Natural Neighbor interpolation) in griddata, natgrid must be installed. Either install it from http://github.com/matplotlib/natgrid or use interp='linear' instead.")
    # Processing the call keyword arguments (line 3359)
    kwargs_94152 = {}
    # Getting the type of 'RuntimeError' (line 3359)
    RuntimeError_94150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3359, 18), 'RuntimeError', False)
    # Calling RuntimeError(args, kwargs) (line 3359)
    RuntimeError_call_result_94153 = invoke(stypy.reporting.localization.Localization(__file__, 3359, 18), RuntimeError_94150, *[unicode_94151], **kwargs_94152)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3359, 12), RuntimeError_call_result_94153, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 3356)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'xi' (line 3365)
    xi_94154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3365, 11), 'xi')
    # Obtaining the member 'ndim' of a type (line 3365)
    ndim_94155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3365, 11), xi_94154, 'ndim')
    int_94156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3365, 22), 'int')
    # Applying the binary operator '==' (line 3365)
    result_eq_94157 = python_operator(stypy.reporting.localization.Localization(__file__, 3365, 11), '==', ndim_94155, int_94156)
    
    # Testing the type of an if condition (line 3365)
    if_condition_94158 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3365, 8), result_eq_94157)
    # Assigning a type to the variable 'if_condition_94158' (line 3365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3365, 8), 'if_condition_94158', if_condition_94158)
    # SSA begins for if statement (line 3365)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 3367):
    
    # Assigning a Subscript to a Name (line 3367):
    
    # Assigning a Subscript to a Name (line 3367):
    
    # Obtaining the type of the subscript
    int_94159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3367, 20), 'int')
    slice_94160 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3367, 17), None, None, None)
    # Getting the type of 'xi' (line 3367)
    xi_94161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3367, 17), 'xi')
    # Obtaining the member '__getitem__' of a type (line 3367)
    getitem___94162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3367, 17), xi_94161, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3367)
    subscript_call_result_94163 = invoke(stypy.reporting.localization.Localization(__file__, 3367, 17), getitem___94162, (int_94159, slice_94160))
    
    # Assigning a type to the variable 'xi' (line 3367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3367, 12), 'xi', subscript_call_result_94163)
    
    # Assigning a Subscript to a Name (line 3368):
    
    # Assigning a Subscript to a Name (line 3368):
    
    # Assigning a Subscript to a Name (line 3368):
    
    # Obtaining the type of the subscript
    slice_94164 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3368, 17), None, None, None)
    int_94165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3368, 23), 'int')
    # Getting the type of 'yi' (line 3368)
    yi_94166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3368, 17), 'yi')
    # Obtaining the member '__getitem__' of a type (line 3368)
    getitem___94167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3368, 17), yi_94166, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3368)
    subscript_call_result_94168 = invoke(stypy.reporting.localization.Localization(__file__, 3368, 17), getitem___94167, (slice_94164, int_94165))
    
    # Assigning a type to the variable 'yi' (line 3368)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3368, 12), 'yi', subscript_call_result_94168)
    # SSA join for if statement (line 3365)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to seti(...): (line 3371)
    # Processing the call arguments (line 3371)
    str_94171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3371, 22), 'str', 'ext')
    int_94172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3371, 30), 'int')
    # Processing the call keyword arguments (line 3371)
    kwargs_94173 = {}
    # Getting the type of '_natgrid' (line 3371)
    _natgrid_94169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3371, 8), '_natgrid', False)
    # Obtaining the member 'seti' of a type (line 3371)
    seti_94170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3371, 8), _natgrid_94169, 'seti')
    # Calling seti(args, kwargs) (line 3371)
    seti_call_result_94174 = invoke(stypy.reporting.localization.Localization(__file__, 3371, 8), seti_94170, *[str_94171, int_94172], **kwargs_94173)
    
    
    # Call to setr(...): (line 3372)
    # Processing the call arguments (line 3372)
    str_94177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3372, 22), 'str', 'nul')
    # Getting the type of 'np' (line 3372)
    np_94178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3372, 30), 'np', False)
    # Obtaining the member 'nan' of a type (line 3372)
    nan_94179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3372, 30), np_94178, 'nan')
    # Processing the call keyword arguments (line 3372)
    kwargs_94180 = {}
    # Getting the type of '_natgrid' (line 3372)
    _natgrid_94175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3372, 8), '_natgrid', False)
    # Obtaining the member 'setr' of a type (line 3372)
    setr_94176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3372, 8), _natgrid_94175, 'setr')
    # Calling setr(args, kwargs) (line 3372)
    setr_call_result_94181 = invoke(stypy.reporting.localization.Localization(__file__, 3372, 8), setr_94176, *[str_94177, nan_94179], **kwargs_94180)
    
    
    
    # Evaluating a boolean operation
    
    
    # Call to min(...): (line 3374)
    # Processing the call arguments (line 3374)
    
    # Call to diff(...): (line 3374)
    # Processing the call arguments (line 3374)
    # Getting the type of 'xi' (line 3374)
    xi_94186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3374, 26), 'xi', False)
    # Processing the call keyword arguments (line 3374)
    kwargs_94187 = {}
    # Getting the type of 'np' (line 3374)
    np_94184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3374, 18), 'np', False)
    # Obtaining the member 'diff' of a type (line 3374)
    diff_94185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3374, 18), np_94184, 'diff')
    # Calling diff(args, kwargs) (line 3374)
    diff_call_result_94188 = invoke(stypy.reporting.localization.Localization(__file__, 3374, 18), diff_94185, *[xi_94186], **kwargs_94187)
    
    # Processing the call keyword arguments (line 3374)
    kwargs_94189 = {}
    # Getting the type of 'np' (line 3374)
    np_94182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3374, 11), 'np', False)
    # Obtaining the member 'min' of a type (line 3374)
    min_94183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3374, 11), np_94182, 'min')
    # Calling min(args, kwargs) (line 3374)
    min_call_result_94190 = invoke(stypy.reporting.localization.Localization(__file__, 3374, 11), min_94183, *[diff_call_result_94188], **kwargs_94189)
    
    int_94191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3374, 33), 'int')
    # Applying the binary operator '<' (line 3374)
    result_lt_94192 = python_operator(stypy.reporting.localization.Localization(__file__, 3374, 11), '<', min_call_result_94190, int_94191)
    
    
    
    # Call to min(...): (line 3374)
    # Processing the call arguments (line 3374)
    
    # Call to diff(...): (line 3374)
    # Processing the call arguments (line 3374)
    # Getting the type of 'yi' (line 3374)
    yi_94197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3374, 53), 'yi', False)
    # Processing the call keyword arguments (line 3374)
    kwargs_94198 = {}
    # Getting the type of 'np' (line 3374)
    np_94195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3374, 45), 'np', False)
    # Obtaining the member 'diff' of a type (line 3374)
    diff_94196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3374, 45), np_94195, 'diff')
    # Calling diff(args, kwargs) (line 3374)
    diff_call_result_94199 = invoke(stypy.reporting.localization.Localization(__file__, 3374, 45), diff_94196, *[yi_94197], **kwargs_94198)
    
    # Processing the call keyword arguments (line 3374)
    kwargs_94200 = {}
    # Getting the type of 'np' (line 3374)
    np_94193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3374, 38), 'np', False)
    # Obtaining the member 'min' of a type (line 3374)
    min_94194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3374, 38), np_94193, 'min')
    # Calling min(args, kwargs) (line 3374)
    min_call_result_94201 = invoke(stypy.reporting.localization.Localization(__file__, 3374, 38), min_94194, *[diff_call_result_94199], **kwargs_94200)
    
    int_94202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3374, 60), 'int')
    # Applying the binary operator '<' (line 3374)
    result_lt_94203 = python_operator(stypy.reporting.localization.Localization(__file__, 3374, 38), '<', min_call_result_94201, int_94202)
    
    # Applying the binary operator 'or' (line 3374)
    result_or_keyword_94204 = python_operator(stypy.reporting.localization.Localization(__file__, 3374, 11), 'or', result_lt_94192, result_lt_94203)
    
    # Testing the type of an if condition (line 3374)
    if_condition_94205 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3374, 8), result_or_keyword_94204)
    # Assigning a type to the variable 'if_condition_94205' (line 3374)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3374, 8), 'if_condition_94205', if_condition_94205)
    # SSA begins for if statement (line 3374)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3375)
    # Processing the call arguments (line 3375)
    unicode_94207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3375, 29), 'unicode', u'Output grid defined by xi,yi must be monotone increasing')
    # Processing the call keyword arguments (line 3375)
    kwargs_94208 = {}
    # Getting the type of 'ValueError' (line 3375)
    ValueError_94206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3375, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3375)
    ValueError_call_result_94209 = invoke(stypy.reporting.localization.Localization(__file__, 3375, 18), ValueError_94206, *[unicode_94207], **kwargs_94208)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3375, 12), ValueError_call_result_94209, 'raise parameter', BaseException)
    # SSA join for if statement (line 3374)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3379):
    
    # Assigning a Call to a Name (line 3379):
    
    # Assigning a Call to a Name (line 3379):
    
    # Call to empty(...): (line 3379)
    # Processing the call arguments (line 3379)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3379)
    tuple_94212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3379, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3379)
    # Adding element type (line 3379)
    
    # Obtaining the type of the subscript
    int_94213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3379, 32), 'int')
    # Getting the type of 'yi' (line 3379)
    yi_94214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3379, 23), 'yi', False)
    # Obtaining the member 'shape' of a type (line 3379)
    shape_94215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3379, 23), yi_94214, 'shape')
    # Obtaining the member '__getitem__' of a type (line 3379)
    getitem___94216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3379, 23), shape_94215, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3379)
    subscript_call_result_94217 = invoke(stypy.reporting.localization.Localization(__file__, 3379, 23), getitem___94216, int_94213)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3379, 23), tuple_94212, subscript_call_result_94217)
    # Adding element type (line 3379)
    
    # Obtaining the type of the subscript
    int_94218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3379, 45), 'int')
    # Getting the type of 'xi' (line 3379)
    xi_94219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3379, 36), 'xi', False)
    # Obtaining the member 'shape' of a type (line 3379)
    shape_94220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3379, 36), xi_94219, 'shape')
    # Obtaining the member '__getitem__' of a type (line 3379)
    getitem___94221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3379, 36), shape_94220, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3379)
    subscript_call_result_94222 = invoke(stypy.reporting.localization.Localization(__file__, 3379, 36), getitem___94221, int_94218)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3379, 23), tuple_94212, subscript_call_result_94222)
    
    # Getting the type of 'np' (line 3379)
    np_94223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3379, 50), 'np', False)
    # Obtaining the member 'float64' of a type (line 3379)
    float64_94224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3379, 50), np_94223, 'float64')
    # Processing the call keyword arguments (line 3379)
    kwargs_94225 = {}
    # Getting the type of 'np' (line 3379)
    np_94210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3379, 13), 'np', False)
    # Obtaining the member 'empty' of a type (line 3379)
    empty_94211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3379, 13), np_94210, 'empty')
    # Calling empty(args, kwargs) (line 3379)
    empty_call_result_94226 = invoke(stypy.reporting.localization.Localization(__file__, 3379, 13), empty_94211, *[tuple_94212, float64_94224], **kwargs_94225)
    
    # Assigning a type to the variable 'zi' (line 3379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3379, 8), 'zi', empty_call_result_94226)
    
    # Assigning a Call to a Name (line 3384):
    
    # Assigning a Call to a Name (line 3384):
    
    # Assigning a Call to a Name (line 3384):
    
    # Call to require(...): (line 3384)
    # Processing the call arguments (line 3384)
    # Getting the type of 'x' (line 3384)
    x_94229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3384, 23), 'x', False)
    # Processing the call keyword arguments (line 3384)
    
    # Obtaining an instance of the builtin type 'list' (line 3384)
    list_94230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3384, 39), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3384)
    # Adding element type (line 3384)
    unicode_94231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3384, 40), 'unicode', u'C')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3384, 39), list_94230, unicode_94231)
    
    keyword_94232 = list_94230
    kwargs_94233 = {'requirements': keyword_94232}
    # Getting the type of 'np' (line 3384)
    np_94227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3384, 12), 'np', False)
    # Obtaining the member 'require' of a type (line 3384)
    require_94228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3384, 12), np_94227, 'require')
    # Calling require(args, kwargs) (line 3384)
    require_call_result_94234 = invoke(stypy.reporting.localization.Localization(__file__, 3384, 12), require_94228, *[x_94229], **kwargs_94233)
    
    # Assigning a type to the variable 'x' (line 3384)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3384, 8), 'x', require_call_result_94234)
    
    # Assigning a Call to a Name (line 3385):
    
    # Assigning a Call to a Name (line 3385):
    
    # Assigning a Call to a Name (line 3385):
    
    # Call to require(...): (line 3385)
    # Processing the call arguments (line 3385)
    # Getting the type of 'y' (line 3385)
    y_94237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3385, 23), 'y', False)
    # Processing the call keyword arguments (line 3385)
    
    # Obtaining an instance of the builtin type 'list' (line 3385)
    list_94238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3385, 39), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3385)
    # Adding element type (line 3385)
    unicode_94239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3385, 40), 'unicode', u'C')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3385, 39), list_94238, unicode_94239)
    
    keyword_94240 = list_94238
    kwargs_94241 = {'requirements': keyword_94240}
    # Getting the type of 'np' (line 3385)
    np_94235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3385, 12), 'np', False)
    # Obtaining the member 'require' of a type (line 3385)
    require_94236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3385, 12), np_94235, 'require')
    # Calling require(args, kwargs) (line 3385)
    require_call_result_94242 = invoke(stypy.reporting.localization.Localization(__file__, 3385, 12), require_94236, *[y_94237], **kwargs_94241)
    
    # Assigning a type to the variable 'y' (line 3385)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3385, 8), 'y', require_call_result_94242)
    
    # Assigning a Call to a Name (line 3386):
    
    # Assigning a Call to a Name (line 3386):
    
    # Assigning a Call to a Name (line 3386):
    
    # Call to require(...): (line 3386)
    # Processing the call arguments (line 3386)
    # Getting the type of 'z' (line 3386)
    z_94245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3386, 23), 'z', False)
    # Processing the call keyword arguments (line 3386)
    
    # Obtaining an instance of the builtin type 'list' (line 3386)
    list_94246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3386, 39), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3386)
    # Adding element type (line 3386)
    unicode_94247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3386, 40), 'unicode', u'C')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3386, 39), list_94246, unicode_94247)
    
    keyword_94248 = list_94246
    kwargs_94249 = {'requirements': keyword_94248}
    # Getting the type of 'np' (line 3386)
    np_94243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3386, 12), 'np', False)
    # Obtaining the member 'require' of a type (line 3386)
    require_94244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3386, 12), np_94243, 'require')
    # Calling require(args, kwargs) (line 3386)
    require_call_result_94250 = invoke(stypy.reporting.localization.Localization(__file__, 3386, 12), require_94244, *[z_94245], **kwargs_94249)
    
    # Assigning a type to the variable 'z' (line 3386)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3386, 8), 'z', require_call_result_94250)
    
    # Assigning a Call to a Name (line 3387):
    
    # Assigning a Call to a Name (line 3387):
    
    # Assigning a Call to a Name (line 3387):
    
    # Call to require(...): (line 3387)
    # Processing the call arguments (line 3387)
    # Getting the type of 'xi' (line 3387)
    xi_94253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3387, 24), 'xi', False)
    # Processing the call keyword arguments (line 3387)
    
    # Obtaining an instance of the builtin type 'list' (line 3387)
    list_94254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3387, 41), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3387)
    # Adding element type (line 3387)
    unicode_94255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3387, 42), 'unicode', u'C')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3387, 41), list_94254, unicode_94255)
    
    keyword_94256 = list_94254
    kwargs_94257 = {'requirements': keyword_94256}
    # Getting the type of 'np' (line 3387)
    np_94251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3387, 13), 'np', False)
    # Obtaining the member 'require' of a type (line 3387)
    require_94252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3387, 13), np_94251, 'require')
    # Calling require(args, kwargs) (line 3387)
    require_call_result_94258 = invoke(stypy.reporting.localization.Localization(__file__, 3387, 13), require_94252, *[xi_94253], **kwargs_94257)
    
    # Assigning a type to the variable 'xi' (line 3387)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3387, 8), 'xi', require_call_result_94258)
    
    # Assigning a Call to a Name (line 3388):
    
    # Assigning a Call to a Name (line 3388):
    
    # Assigning a Call to a Name (line 3388):
    
    # Call to require(...): (line 3388)
    # Processing the call arguments (line 3388)
    # Getting the type of 'yi' (line 3388)
    yi_94261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3388, 24), 'yi', False)
    # Processing the call keyword arguments (line 3388)
    
    # Obtaining an instance of the builtin type 'list' (line 3388)
    list_94262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3388, 41), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3388)
    # Adding element type (line 3388)
    unicode_94263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3388, 42), 'unicode', u'C')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3388, 41), list_94262, unicode_94263)
    
    keyword_94264 = list_94262
    kwargs_94265 = {'requirements': keyword_94264}
    # Getting the type of 'np' (line 3388)
    np_94259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3388, 13), 'np', False)
    # Obtaining the member 'require' of a type (line 3388)
    require_94260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3388, 13), np_94259, 'require')
    # Calling require(args, kwargs) (line 3388)
    require_call_result_94266 = invoke(stypy.reporting.localization.Localization(__file__, 3388, 13), require_94260, *[yi_94261], **kwargs_94265)
    
    # Assigning a type to the variable 'yi' (line 3388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3388, 8), 'yi', require_call_result_94266)
    
    # Call to natgridd(...): (line 3389)
    # Processing the call arguments (line 3389)
    # Getting the type of 'x' (line 3389)
    x_94269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3389, 26), 'x', False)
    # Getting the type of 'y' (line 3389)
    y_94270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3389, 29), 'y', False)
    # Getting the type of 'z' (line 3389)
    z_94271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3389, 32), 'z', False)
    # Getting the type of 'xi' (line 3389)
    xi_94272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3389, 35), 'xi', False)
    # Getting the type of 'yi' (line 3389)
    yi_94273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3389, 39), 'yi', False)
    # Getting the type of 'zi' (line 3389)
    zi_94274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3389, 43), 'zi', False)
    # Processing the call keyword arguments (line 3389)
    kwargs_94275 = {}
    # Getting the type of '_natgrid' (line 3389)
    _natgrid_94267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3389, 8), '_natgrid', False)
    # Obtaining the member 'natgridd' of a type (line 3389)
    natgridd_94268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3389, 8), _natgrid_94267, 'natgridd')
    # Calling natgridd(args, kwargs) (line 3389)
    natgridd_call_result_94276 = invoke(stypy.reporting.localization.Localization(__file__, 3389, 8), natgridd_94268, *[x_94269, y_94270, z_94271, xi_94272, yi_94273, zi_94274], **kwargs_94275)
    
    
    
    # Call to any(...): (line 3392)
    # Processing the call arguments (line 3392)
    
    # Call to isnan(...): (line 3392)
    # Processing the call arguments (line 3392)
    # Getting the type of 'zi' (line 3392)
    zi_94281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 27), 'zi', False)
    # Processing the call keyword arguments (line 3392)
    kwargs_94282 = {}
    # Getting the type of 'np' (line 3392)
    np_94279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 18), 'np', False)
    # Obtaining the member 'isnan' of a type (line 3392)
    isnan_94280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3392, 18), np_94279, 'isnan')
    # Calling isnan(args, kwargs) (line 3392)
    isnan_call_result_94283 = invoke(stypy.reporting.localization.Localization(__file__, 3392, 18), isnan_94280, *[zi_94281], **kwargs_94282)
    
    # Processing the call keyword arguments (line 3392)
    kwargs_94284 = {}
    # Getting the type of 'np' (line 3392)
    np_94277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 11), 'np', False)
    # Obtaining the member 'any' of a type (line 3392)
    any_94278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3392, 11), np_94277, 'any')
    # Calling any(args, kwargs) (line 3392)
    any_call_result_94285 = invoke(stypy.reporting.localization.Localization(__file__, 3392, 11), any_94278, *[isnan_call_result_94283], **kwargs_94284)
    
    # Testing the type of an if condition (line 3392)
    if_condition_94286 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3392, 8), any_call_result_94285)
    # Assigning a type to the variable 'if_condition_94286' (line 3392)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3392, 8), 'if_condition_94286', if_condition_94286)
    # SSA begins for if statement (line 3392)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3393):
    
    # Assigning a Call to a Name (line 3393):
    
    # Assigning a Call to a Name (line 3393):
    
    # Call to masked_where(...): (line 3393)
    # Processing the call arguments (line 3393)
    
    # Call to isnan(...): (line 3393)
    # Processing the call arguments (line 3393)
    # Getting the type of 'zi' (line 3393)
    zi_94292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3393, 45), 'zi', False)
    # Processing the call keyword arguments (line 3393)
    kwargs_94293 = {}
    # Getting the type of 'np' (line 3393)
    np_94290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3393, 36), 'np', False)
    # Obtaining the member 'isnan' of a type (line 3393)
    isnan_94291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3393, 36), np_94290, 'isnan')
    # Calling isnan(args, kwargs) (line 3393)
    isnan_call_result_94294 = invoke(stypy.reporting.localization.Localization(__file__, 3393, 36), isnan_94291, *[zi_94292], **kwargs_94293)
    
    # Getting the type of 'zi' (line 3393)
    zi_94295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3393, 50), 'zi', False)
    # Processing the call keyword arguments (line 3393)
    kwargs_94296 = {}
    # Getting the type of 'np' (line 3393)
    np_94287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3393, 17), 'np', False)
    # Obtaining the member 'ma' of a type (line 3393)
    ma_94288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3393, 17), np_94287, 'ma')
    # Obtaining the member 'masked_where' of a type (line 3393)
    masked_where_94289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3393, 17), ma_94288, 'masked_where')
    # Calling masked_where(args, kwargs) (line 3393)
    masked_where_call_result_94297 = invoke(stypy.reporting.localization.Localization(__file__, 3393, 17), masked_where_94289, *[isnan_call_result_94294, zi_94295], **kwargs_94296)
    
    # Assigning a type to the variable 'zi' (line 3393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3393, 12), 'zi', masked_where_call_result_94297)
    # SSA join for if statement (line 3392)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'zi' (line 3394)
    zi_94298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3394, 15), 'zi')
    # Assigning a type to the variable 'stypy_return_type' (line 3394)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3394, 8), 'stypy_return_type', zi_94298)
    # SSA branch for the else part of an if statement (line 3355)
    module_type_store.open_ssa_branch('else')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3398, 8))
    
    # 'from matplotlib.tri import Triangulation, LinearTriInterpolator' statement (line 3398)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_94299 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3398, 8), 'matplotlib.tri')

    if (type(import_94299) is not StypyTypeError):

        if (import_94299 != 'pyd_module'):
            __import__(import_94299)
            sys_modules_94300 = sys.modules[import_94299]
            import_from_module(stypy.reporting.localization.Localization(__file__, 3398, 8), 'matplotlib.tri', sys_modules_94300.module_type_store, module_type_store, ['Triangulation', 'LinearTriInterpolator'])
            nest_module(stypy.reporting.localization.Localization(__file__, 3398, 8), __file__, sys_modules_94300, sys_modules_94300.module_type_store, module_type_store)
        else:
            from matplotlib.tri import Triangulation, LinearTriInterpolator

            import_from_module(stypy.reporting.localization.Localization(__file__, 3398, 8), 'matplotlib.tri', None, module_type_store, ['Triangulation', 'LinearTriInterpolator'], [Triangulation, LinearTriInterpolator])

    else:
        # Assigning a type to the variable 'matplotlib.tri' (line 3398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3398, 8), 'matplotlib.tri', import_94299)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    # Assigning a Call to a Name (line 3399):
    
    # Assigning a Call to a Name (line 3399):
    
    # Assigning a Call to a Name (line 3399):
    
    # Call to Triangulation(...): (line 3399)
    # Processing the call arguments (line 3399)
    # Getting the type of 'x' (line 3399)
    x_94302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3399, 31), 'x', False)
    # Getting the type of 'y' (line 3399)
    y_94303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3399, 34), 'y', False)
    # Processing the call keyword arguments (line 3399)
    kwargs_94304 = {}
    # Getting the type of 'Triangulation' (line 3399)
    Triangulation_94301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3399, 17), 'Triangulation', False)
    # Calling Triangulation(args, kwargs) (line 3399)
    Triangulation_call_result_94305 = invoke(stypy.reporting.localization.Localization(__file__, 3399, 17), Triangulation_94301, *[x_94302, y_94303], **kwargs_94304)
    
    # Assigning a type to the variable 'triang' (line 3399)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3399, 8), 'triang', Triangulation_call_result_94305)
    
    # Assigning a Call to a Name (line 3400):
    
    # Assigning a Call to a Name (line 3400):
    
    # Assigning a Call to a Name (line 3400):
    
    # Call to LinearTriInterpolator(...): (line 3400)
    # Processing the call arguments (line 3400)
    # Getting the type of 'triang' (line 3400)
    triang_94307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3400, 45), 'triang', False)
    # Getting the type of 'z' (line 3400)
    z_94308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3400, 53), 'z', False)
    # Processing the call keyword arguments (line 3400)
    kwargs_94309 = {}
    # Getting the type of 'LinearTriInterpolator' (line 3400)
    LinearTriInterpolator_94306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3400, 23), 'LinearTriInterpolator', False)
    # Calling LinearTriInterpolator(args, kwargs) (line 3400)
    LinearTriInterpolator_call_result_94310 = invoke(stypy.reporting.localization.Localization(__file__, 3400, 23), LinearTriInterpolator_94306, *[triang_94307, z_94308], **kwargs_94309)
    
    # Assigning a type to the variable 'interpolator' (line 3400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3400, 8), 'interpolator', LinearTriInterpolator_call_result_94310)
    
    # Call to interpolator(...): (line 3401)
    # Processing the call arguments (line 3401)
    # Getting the type of 'xi' (line 3401)
    xi_94312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3401, 28), 'xi', False)
    # Getting the type of 'yi' (line 3401)
    yi_94313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3401, 32), 'yi', False)
    # Processing the call keyword arguments (line 3401)
    kwargs_94314 = {}
    # Getting the type of 'interpolator' (line 3401)
    interpolator_94311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3401, 15), 'interpolator', False)
    # Calling interpolator(args, kwargs) (line 3401)
    interpolator_call_result_94315 = invoke(stypy.reporting.localization.Localization(__file__, 3401, 15), interpolator_94311, *[xi_94312, yi_94313], **kwargs_94314)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3401)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3401, 8), 'stypy_return_type', interpolator_call_result_94315)
    # SSA join for if statement (line 3355)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'griddata(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'griddata' in the type store
    # Getting the type of 'stypy_return_type' (line 3279)
    stypy_return_type_94316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3279, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_94316)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'griddata'
    return stypy_return_type_94316

# Assigning a type to the variable 'griddata' (line 3279)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3279, 0), 'griddata', griddata)

@norecursion
def less_simple_linear_interpolation(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 3407)
    False_94317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3407, 54), 'False')
    defaults = [False_94317]
    # Create a new context for function 'less_simple_linear_interpolation'
    module_type_store = module_type_store.open_function_context('less_simple_linear_interpolation', 3407, 0, False)
    
    # Passed parameters checking function
    less_simple_linear_interpolation.stypy_localization = localization
    less_simple_linear_interpolation.stypy_type_of_self = None
    less_simple_linear_interpolation.stypy_type_store = module_type_store
    less_simple_linear_interpolation.stypy_function_name = 'less_simple_linear_interpolation'
    less_simple_linear_interpolation.stypy_param_names_list = ['x', 'y', 'xi', 'extrap']
    less_simple_linear_interpolation.stypy_varargs_param_name = None
    less_simple_linear_interpolation.stypy_kwargs_param_name = None
    less_simple_linear_interpolation.stypy_call_defaults = defaults
    less_simple_linear_interpolation.stypy_call_varargs = varargs
    less_simple_linear_interpolation.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'less_simple_linear_interpolation', ['x', 'y', 'xi', 'extrap'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'less_simple_linear_interpolation', localization, ['x', 'y', 'xi', 'extrap'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'less_simple_linear_interpolation(...)' code ##################

    unicode_94318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3418, (-1)), 'unicode', u'\n    This function provides simple (but somewhat less so than\n    :func:`cbook.simple_linear_interpolation`) linear interpolation.\n    :func:`simple_linear_interpolation` will give a list of point\n    between a start and an end, while this does true linear\n    interpolation at an arbitrary set of points.\n\n    This is very inefficient linear interpolation meant to be used\n    only for a small number of points in relatively non-intensive use\n    cases.  For real linear interpolation, use scipy.\n    ')
    
    # Assigning a Call to a Name (line 3419):
    
    # Assigning a Call to a Name (line 3419):
    
    # Assigning a Call to a Name (line 3419):
    
    # Call to asarray(...): (line 3419)
    # Processing the call arguments (line 3419)
    # Getting the type of 'x' (line 3419)
    x_94321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3419, 19), 'x', False)
    # Processing the call keyword arguments (line 3419)
    kwargs_94322 = {}
    # Getting the type of 'np' (line 3419)
    np_94319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3419, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3419)
    asarray_94320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3419, 8), np_94319, 'asarray')
    # Calling asarray(args, kwargs) (line 3419)
    asarray_call_result_94323 = invoke(stypy.reporting.localization.Localization(__file__, 3419, 8), asarray_94320, *[x_94321], **kwargs_94322)
    
    # Assigning a type to the variable 'x' (line 3419)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3419, 4), 'x', asarray_call_result_94323)
    
    # Assigning a Call to a Name (line 3420):
    
    # Assigning a Call to a Name (line 3420):
    
    # Assigning a Call to a Name (line 3420):
    
    # Call to asarray(...): (line 3420)
    # Processing the call arguments (line 3420)
    # Getting the type of 'y' (line 3420)
    y_94326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3420, 19), 'y', False)
    # Processing the call keyword arguments (line 3420)
    kwargs_94327 = {}
    # Getting the type of 'np' (line 3420)
    np_94324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3420, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3420)
    asarray_94325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3420, 8), np_94324, 'asarray')
    # Calling asarray(args, kwargs) (line 3420)
    asarray_call_result_94328 = invoke(stypy.reporting.localization.Localization(__file__, 3420, 8), asarray_94325, *[y_94326], **kwargs_94327)
    
    # Assigning a type to the variable 'y' (line 3420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3420, 4), 'y', asarray_call_result_94328)
    
    # Assigning a Call to a Name (line 3421):
    
    # Assigning a Call to a Name (line 3421):
    
    # Assigning a Call to a Name (line 3421):
    
    # Call to atleast_1d(...): (line 3421)
    # Processing the call arguments (line 3421)
    # Getting the type of 'xi' (line 3421)
    xi_94331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3421, 23), 'xi', False)
    # Processing the call keyword arguments (line 3421)
    kwargs_94332 = {}
    # Getting the type of 'np' (line 3421)
    np_94329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3421, 9), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 3421)
    atleast_1d_94330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3421, 9), np_94329, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 3421)
    atleast_1d_call_result_94333 = invoke(stypy.reporting.localization.Localization(__file__, 3421, 9), atleast_1d_94330, *[xi_94331], **kwargs_94332)
    
    # Assigning a type to the variable 'xi' (line 3421)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3421, 4), 'xi', atleast_1d_call_result_94333)
    
    # Assigning a Call to a Name (line 3423):
    
    # Assigning a Call to a Name (line 3423):
    
    # Assigning a Call to a Name (line 3423):
    
    # Call to list(...): (line 3423)
    # Processing the call arguments (line 3423)
    # Getting the type of 'y' (line 3423)
    y_94335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3423, 13), 'y', False)
    # Obtaining the member 'shape' of a type (line 3423)
    shape_94336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3423, 13), y_94335, 'shape')
    # Processing the call keyword arguments (line 3423)
    kwargs_94337 = {}
    # Getting the type of 'list' (line 3423)
    list_94334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3423, 8), 'list', False)
    # Calling list(args, kwargs) (line 3423)
    list_call_result_94338 = invoke(stypy.reporting.localization.Localization(__file__, 3423, 8), list_94334, *[shape_94336], **kwargs_94337)
    
    # Assigning a type to the variable 's' (line 3423)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3423, 4), 's', list_call_result_94338)
    
    # Assigning a Call to a Subscript (line 3424):
    
    # Assigning a Call to a Subscript (line 3424):
    
    # Assigning a Call to a Subscript (line 3424):
    
    # Call to len(...): (line 3424)
    # Processing the call arguments (line 3424)
    # Getting the type of 'xi' (line 3424)
    xi_94340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3424, 15), 'xi', False)
    # Processing the call keyword arguments (line 3424)
    kwargs_94341 = {}
    # Getting the type of 'len' (line 3424)
    len_94339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3424, 11), 'len', False)
    # Calling len(args, kwargs) (line 3424)
    len_call_result_94342 = invoke(stypy.reporting.localization.Localization(__file__, 3424, 11), len_94339, *[xi_94340], **kwargs_94341)
    
    # Getting the type of 's' (line 3424)
    s_94343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3424, 4), 's')
    int_94344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3424, 6), 'int')
    # Storing an element on a container (line 3424)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3424, 4), s_94343, (int_94344, len_call_result_94342))
    
    # Assigning a Call to a Name (line 3425):
    
    # Assigning a Call to a Name (line 3425):
    
    # Assigning a Call to a Name (line 3425):
    
    # Call to tile(...): (line 3425)
    # Processing the call arguments (line 3425)
    # Getting the type of 'np' (line 3425)
    np_94347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3425, 17), 'np', False)
    # Obtaining the member 'nan' of a type (line 3425)
    nan_94348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3425, 17), np_94347, 'nan')
    # Getting the type of 's' (line 3425)
    s_94349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3425, 25), 's', False)
    # Processing the call keyword arguments (line 3425)
    kwargs_94350 = {}
    # Getting the type of 'np' (line 3425)
    np_94345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3425, 9), 'np', False)
    # Obtaining the member 'tile' of a type (line 3425)
    tile_94346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3425, 9), np_94345, 'tile')
    # Calling tile(args, kwargs) (line 3425)
    tile_call_result_94351 = invoke(stypy.reporting.localization.Localization(__file__, 3425, 9), tile_94346, *[nan_94348, s_94349], **kwargs_94350)
    
    # Assigning a type to the variable 'yi' (line 3425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3425, 4), 'yi', tile_call_result_94351)
    
    
    # Call to enumerate(...): (line 3427)
    # Processing the call arguments (line 3427)
    # Getting the type of 'xi' (line 3427)
    xi_94353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3427, 28), 'xi', False)
    # Processing the call keyword arguments (line 3427)
    kwargs_94354 = {}
    # Getting the type of 'enumerate' (line 3427)
    enumerate_94352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3427, 18), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 3427)
    enumerate_call_result_94355 = invoke(stypy.reporting.localization.Localization(__file__, 3427, 18), enumerate_94352, *[xi_94353], **kwargs_94354)
    
    # Testing the type of a for loop iterable (line 3427)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3427, 4), enumerate_call_result_94355)
    # Getting the type of the for loop variable (line 3427)
    for_loop_var_94356 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3427, 4), enumerate_call_result_94355)
    # Assigning a type to the variable 'ii' (line 3427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3427, 4), 'ii', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3427, 4), for_loop_var_94356))
    # Assigning a type to the variable 'xx' (line 3427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3427, 4), 'xx', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3427, 4), for_loop_var_94356))
    # SSA begins for a for statement (line 3427)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Compare to a Name (line 3428):
    
    # Assigning a Compare to a Name (line 3428):
    
    # Assigning a Compare to a Name (line 3428):
    
    # Getting the type of 'x' (line 3428)
    x_94357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3428, 13), 'x')
    # Getting the type of 'xx' (line 3428)
    xx_94358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3428, 18), 'xx')
    # Applying the binary operator '==' (line 3428)
    result_eq_94359 = python_operator(stypy.reporting.localization.Localization(__file__, 3428, 13), '==', x_94357, xx_94358)
    
    # Assigning a type to the variable 'bb' (line 3428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3428, 8), 'bb', result_eq_94359)
    
    
    # Call to any(...): (line 3429)
    # Processing the call arguments (line 3429)
    # Getting the type of 'bb' (line 3429)
    bb_94362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3429, 18), 'bb', False)
    # Processing the call keyword arguments (line 3429)
    kwargs_94363 = {}
    # Getting the type of 'np' (line 3429)
    np_94360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3429, 11), 'np', False)
    # Obtaining the member 'any' of a type (line 3429)
    any_94361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3429, 11), np_94360, 'any')
    # Calling any(args, kwargs) (line 3429)
    any_call_result_94364 = invoke(stypy.reporting.localization.Localization(__file__, 3429, 11), any_94361, *[bb_94362], **kwargs_94363)
    
    # Testing the type of an if condition (line 3429)
    if_condition_94365 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3429, 8), any_call_result_94364)
    # Assigning a type to the variable 'if_condition_94365' (line 3429)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3429, 8), 'if_condition_94365', if_condition_94365)
    # SSA begins for if statement (line 3429)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 3430):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to nonzero(...): (line 3430)
    # Processing the call arguments (line 3430)
    # Getting the type of 'bb' (line 3430)
    bb_94368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3430, 29), 'bb', False)
    # Processing the call keyword arguments (line 3430)
    kwargs_94369 = {}
    # Getting the type of 'np' (line 3430)
    np_94366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3430, 18), 'np', False)
    # Obtaining the member 'nonzero' of a type (line 3430)
    nonzero_94367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3430, 18), np_94366, 'nonzero')
    # Calling nonzero(args, kwargs) (line 3430)
    nonzero_call_result_94370 = invoke(stypy.reporting.localization.Localization(__file__, 3430, 18), nonzero_94367, *[bb_94368], **kwargs_94369)
    
    # Assigning a type to the variable 'call_assignment_87299' (line 3430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3430, 12), 'call_assignment_87299', nonzero_call_result_94370)
    
    # Assigning a Call to a Name (line 3430):
    
    # Assigning a Call to a Name (line 3430):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_94373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3430, 12), 'int')
    # Processing the call keyword arguments
    kwargs_94374 = {}
    # Getting the type of 'call_assignment_87299' (line 3430)
    call_assignment_87299_94371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3430, 12), 'call_assignment_87299', False)
    # Obtaining the member '__getitem__' of a type (line 3430)
    getitem___94372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3430, 12), call_assignment_87299_94371, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_94375 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___94372, *[int_94373], **kwargs_94374)
    
    # Assigning a type to the variable 'call_assignment_87300' (line 3430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3430, 12), 'call_assignment_87300', getitem___call_result_94375)
    
    # Assigning a Name to a Name (line 3430):
    
    # Assigning a Name to a Name (line 3430):
    # Getting the type of 'call_assignment_87300' (line 3430)
    call_assignment_87300_94376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3430, 12), 'call_assignment_87300')
    # Assigning a type to the variable 'jj' (line 3430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3430, 12), 'jj', call_assignment_87300_94376)
    
    # Assigning a Subscript to a Subscript (line 3431):
    
    # Assigning a Subscript to a Subscript (line 3431):
    
    # Assigning a Subscript to a Subscript (line 3431):
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    int_94377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3431, 26), 'int')
    # Getting the type of 'jj' (line 3431)
    jj_94378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3431, 23), 'jj')
    # Obtaining the member '__getitem__' of a type (line 3431)
    getitem___94379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3431, 23), jj_94378, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3431)
    subscript_call_result_94380 = invoke(stypy.reporting.localization.Localization(__file__, 3431, 23), getitem___94379, int_94377)
    
    # Getting the type of 'y' (line 3431)
    y_94381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3431, 21), 'y')
    # Obtaining the member '__getitem__' of a type (line 3431)
    getitem___94382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3431, 21), y_94381, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3431)
    subscript_call_result_94383 = invoke(stypy.reporting.localization.Localization(__file__, 3431, 21), getitem___94382, subscript_call_result_94380)
    
    # Getting the type of 'yi' (line 3431)
    yi_94384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3431, 12), 'yi')
    # Getting the type of 'ii' (line 3431)
    ii_94385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3431, 15), 'ii')
    # Storing an element on a container (line 3431)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3431, 12), yi_94384, (ii_94385, subscript_call_result_94383))
    # SSA branch for the else part of an if statement (line 3429)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'xx' (line 3432)
    xx_94386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3432, 13), 'xx')
    
    # Obtaining the type of the subscript
    int_94387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3432, 20), 'int')
    # Getting the type of 'x' (line 3432)
    x_94388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3432, 18), 'x')
    # Obtaining the member '__getitem__' of a type (line 3432)
    getitem___94389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3432, 18), x_94388, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3432)
    subscript_call_result_94390 = invoke(stypy.reporting.localization.Localization(__file__, 3432, 18), getitem___94389, int_94387)
    
    # Applying the binary operator '<' (line 3432)
    result_lt_94391 = python_operator(stypy.reporting.localization.Localization(__file__, 3432, 13), '<', xx_94386, subscript_call_result_94390)
    
    # Testing the type of an if condition (line 3432)
    if_condition_94392 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3432, 13), result_lt_94391)
    # Assigning a type to the variable 'if_condition_94392' (line 3432)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3432, 13), 'if_condition_94392', if_condition_94392)
    # SSA begins for if statement (line 3432)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'extrap' (line 3433)
    extrap_94393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3433, 15), 'extrap')
    # Testing the type of an if condition (line 3433)
    if_condition_94394 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3433, 12), extrap_94393)
    # Assigning a type to the variable 'if_condition_94394' (line 3433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3433, 12), 'if_condition_94394', if_condition_94394)
    # SSA begins for if statement (line 3433)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Subscript (line 3434):
    
    # Assigning a Subscript to a Subscript (line 3434):
    
    # Assigning a Subscript to a Subscript (line 3434):
    
    # Obtaining the type of the subscript
    int_94395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3434, 27), 'int')
    # Getting the type of 'y' (line 3434)
    y_94396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3434, 25), 'y')
    # Obtaining the member '__getitem__' of a type (line 3434)
    getitem___94397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3434, 25), y_94396, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3434)
    subscript_call_result_94398 = invoke(stypy.reporting.localization.Localization(__file__, 3434, 25), getitem___94397, int_94395)
    
    # Getting the type of 'yi' (line 3434)
    yi_94399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3434, 16), 'yi')
    # Getting the type of 'ii' (line 3434)
    ii_94400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3434, 19), 'ii')
    # Storing an element on a container (line 3434)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3434, 16), yi_94399, (ii_94400, subscript_call_result_94398))
    # SSA join for if statement (line 3433)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 3432)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'xx' (line 3435)
    xx_94401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3435, 13), 'xx')
    
    # Obtaining the type of the subscript
    int_94402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3435, 20), 'int')
    # Getting the type of 'x' (line 3435)
    x_94403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3435, 18), 'x')
    # Obtaining the member '__getitem__' of a type (line 3435)
    getitem___94404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3435, 18), x_94403, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3435)
    subscript_call_result_94405 = invoke(stypy.reporting.localization.Localization(__file__, 3435, 18), getitem___94404, int_94402)
    
    # Applying the binary operator '>' (line 3435)
    result_gt_94406 = python_operator(stypy.reporting.localization.Localization(__file__, 3435, 13), '>', xx_94401, subscript_call_result_94405)
    
    # Testing the type of an if condition (line 3435)
    if_condition_94407 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3435, 13), result_gt_94406)
    # Assigning a type to the variable 'if_condition_94407' (line 3435)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3435, 13), 'if_condition_94407', if_condition_94407)
    # SSA begins for if statement (line 3435)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'extrap' (line 3436)
    extrap_94408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3436, 15), 'extrap')
    # Testing the type of an if condition (line 3436)
    if_condition_94409 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3436, 12), extrap_94408)
    # Assigning a type to the variable 'if_condition_94409' (line 3436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3436, 12), 'if_condition_94409', if_condition_94409)
    # SSA begins for if statement (line 3436)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Subscript (line 3437):
    
    # Assigning a Subscript to a Subscript (line 3437):
    
    # Assigning a Subscript to a Subscript (line 3437):
    
    # Obtaining the type of the subscript
    int_94410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3437, 27), 'int')
    # Getting the type of 'y' (line 3437)
    y_94411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3437, 25), 'y')
    # Obtaining the member '__getitem__' of a type (line 3437)
    getitem___94412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3437, 25), y_94411, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3437)
    subscript_call_result_94413 = invoke(stypy.reporting.localization.Localization(__file__, 3437, 25), getitem___94412, int_94410)
    
    # Getting the type of 'yi' (line 3437)
    yi_94414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3437, 16), 'yi')
    # Getting the type of 'ii' (line 3437)
    ii_94415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3437, 19), 'ii')
    # Storing an element on a container (line 3437)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3437, 16), yi_94414, (ii_94415, subscript_call_result_94413))
    # SSA join for if statement (line 3436)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 3435)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Tuple (line 3439):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to nonzero(...): (line 3439)
    # Processing the call arguments (line 3439)
    
    # Getting the type of 'x' (line 3439)
    x_94418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3439, 29), 'x', False)
    # Getting the type of 'xx' (line 3439)
    xx_94419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3439, 33), 'xx', False)
    # Applying the binary operator '<' (line 3439)
    result_lt_94420 = python_operator(stypy.reporting.localization.Localization(__file__, 3439, 29), '<', x_94418, xx_94419)
    
    # Processing the call keyword arguments (line 3439)
    kwargs_94421 = {}
    # Getting the type of 'np' (line 3439)
    np_94416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3439, 18), 'np', False)
    # Obtaining the member 'nonzero' of a type (line 3439)
    nonzero_94417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3439, 18), np_94416, 'nonzero')
    # Calling nonzero(args, kwargs) (line 3439)
    nonzero_call_result_94422 = invoke(stypy.reporting.localization.Localization(__file__, 3439, 18), nonzero_94417, *[result_lt_94420], **kwargs_94421)
    
    # Assigning a type to the variable 'call_assignment_87301' (line 3439)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3439, 12), 'call_assignment_87301', nonzero_call_result_94422)
    
    # Assigning a Call to a Name (line 3439):
    
    # Assigning a Call to a Name (line 3439):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_94425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3439, 12), 'int')
    # Processing the call keyword arguments
    kwargs_94426 = {}
    # Getting the type of 'call_assignment_87301' (line 3439)
    call_assignment_87301_94423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3439, 12), 'call_assignment_87301', False)
    # Obtaining the member '__getitem__' of a type (line 3439)
    getitem___94424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3439, 12), call_assignment_87301_94423, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_94427 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___94424, *[int_94425], **kwargs_94426)
    
    # Assigning a type to the variable 'call_assignment_87302' (line 3439)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3439, 12), 'call_assignment_87302', getitem___call_result_94427)
    
    # Assigning a Name to a Name (line 3439):
    
    # Assigning a Name to a Name (line 3439):
    # Getting the type of 'call_assignment_87302' (line 3439)
    call_assignment_87302_94428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3439, 12), 'call_assignment_87302')
    # Assigning a type to the variable 'jj' (line 3439)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3439, 12), 'jj', call_assignment_87302_94428)
    
    # Assigning a Call to a Name (line 3440):
    
    # Assigning a Call to a Name (line 3440):
    
    # Assigning a Call to a Name (line 3440):
    
    # Call to max(...): (line 3440)
    # Processing the call arguments (line 3440)
    # Getting the type of 'jj' (line 3440)
    jj_94430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3440, 21), 'jj', False)
    # Processing the call keyword arguments (line 3440)
    kwargs_94431 = {}
    # Getting the type of 'max' (line 3440)
    max_94429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3440, 17), 'max', False)
    # Calling max(args, kwargs) (line 3440)
    max_call_result_94432 = invoke(stypy.reporting.localization.Localization(__file__, 3440, 17), max_94429, *[jj_94430], **kwargs_94431)
    
    # Assigning a type to the variable 'jj' (line 3440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3440, 12), 'jj', max_call_result_94432)
    
    # Assigning a BinOp to a Subscript (line 3442):
    
    # Assigning a BinOp to a Subscript (line 3442):
    
    # Assigning a BinOp to a Subscript (line 3442):
    
    # Obtaining the type of the subscript
    # Getting the type of 'jj' (line 3442)
    jj_94433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 23), 'jj')
    # Getting the type of 'y' (line 3442)
    y_94434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 21), 'y')
    # Obtaining the member '__getitem__' of a type (line 3442)
    getitem___94435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3442, 21), y_94434, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3442)
    subscript_call_result_94436 = invoke(stypy.reporting.localization.Localization(__file__, 3442, 21), getitem___94435, jj_94433)
    
    # Getting the type of 'xx' (line 3442)
    xx_94437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 30), 'xx')
    
    # Obtaining the type of the subscript
    # Getting the type of 'jj' (line 3442)
    jj_94438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 35), 'jj')
    # Getting the type of 'x' (line 3442)
    x_94439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 33), 'x')
    # Obtaining the member '__getitem__' of a type (line 3442)
    getitem___94440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3442, 33), x_94439, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3442)
    subscript_call_result_94441 = invoke(stypy.reporting.localization.Localization(__file__, 3442, 33), getitem___94440, jj_94438)
    
    # Applying the binary operator '-' (line 3442)
    result_sub_94442 = python_operator(stypy.reporting.localization.Localization(__file__, 3442, 30), '-', xx_94437, subscript_call_result_94441)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'jj' (line 3442)
    jj_94443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 43), 'jj')
    int_94444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3442, 46), 'int')
    # Applying the binary operator '+' (line 3442)
    result_add_94445 = python_operator(stypy.reporting.localization.Localization(__file__, 3442, 43), '+', jj_94443, int_94444)
    
    # Getting the type of 'x' (line 3442)
    x_94446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 41), 'x')
    # Obtaining the member '__getitem__' of a type (line 3442)
    getitem___94447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3442, 41), x_94446, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3442)
    subscript_call_result_94448 = invoke(stypy.reporting.localization.Localization(__file__, 3442, 41), getitem___94447, result_add_94445)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'jj' (line 3442)
    jj_94449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 51), 'jj')
    # Getting the type of 'x' (line 3442)
    x_94450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 49), 'x')
    # Obtaining the member '__getitem__' of a type (line 3442)
    getitem___94451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3442, 49), x_94450, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3442)
    subscript_call_result_94452 = invoke(stypy.reporting.localization.Localization(__file__, 3442, 49), getitem___94451, jj_94449)
    
    # Applying the binary operator '-' (line 3442)
    result_sub_94453 = python_operator(stypy.reporting.localization.Localization(__file__, 3442, 41), '-', subscript_call_result_94448, subscript_call_result_94452)
    
    # Applying the binary operator 'div' (line 3442)
    result_div_94454 = python_operator(stypy.reporting.localization.Localization(__file__, 3442, 29), 'div', result_sub_94442, result_sub_94453)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'jj' (line 3442)
    jj_94455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 61), 'jj')
    int_94456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3442, 64), 'int')
    # Applying the binary operator '+' (line 3442)
    result_add_94457 = python_operator(stypy.reporting.localization.Localization(__file__, 3442, 61), '+', jj_94455, int_94456)
    
    # Getting the type of 'y' (line 3442)
    y_94458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 59), 'y')
    # Obtaining the member '__getitem__' of a type (line 3442)
    getitem___94459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3442, 59), y_94458, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3442)
    subscript_call_result_94460 = invoke(stypy.reporting.localization.Localization(__file__, 3442, 59), getitem___94459, result_add_94457)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'jj' (line 3442)
    jj_94461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 69), 'jj')
    # Getting the type of 'y' (line 3442)
    y_94462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 67), 'y')
    # Obtaining the member '__getitem__' of a type (line 3442)
    getitem___94463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3442, 67), y_94462, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3442)
    subscript_call_result_94464 = invoke(stypy.reporting.localization.Localization(__file__, 3442, 67), getitem___94463, jj_94461)
    
    # Applying the binary operator '-' (line 3442)
    result_sub_94465 = python_operator(stypy.reporting.localization.Localization(__file__, 3442, 59), '-', subscript_call_result_94460, subscript_call_result_94464)
    
    # Applying the binary operator '*' (line 3442)
    result_mul_94466 = python_operator(stypy.reporting.localization.Localization(__file__, 3442, 56), '*', result_div_94454, result_sub_94465)
    
    # Applying the binary operator '+' (line 3442)
    result_add_94467 = python_operator(stypy.reporting.localization.Localization(__file__, 3442, 21), '+', subscript_call_result_94436, result_mul_94466)
    
    # Getting the type of 'yi' (line 3442)
    yi_94468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 12), 'yi')
    # Getting the type of 'ii' (line 3442)
    ii_94469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 15), 'ii')
    # Storing an element on a container (line 3442)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3442, 12), yi_94468, (ii_94469, result_add_94467))
    # SSA join for if statement (line 3435)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3432)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3429)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'yi' (line 3444)
    yi_94470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3444, 11), 'yi')
    # Assigning a type to the variable 'stypy_return_type' (line 3444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3444, 4), 'stypy_return_type', yi_94470)
    
    # ################# End of 'less_simple_linear_interpolation(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'less_simple_linear_interpolation' in the type store
    # Getting the type of 'stypy_return_type' (line 3407)
    stypy_return_type_94471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3407, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_94471)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'less_simple_linear_interpolation'
    return stypy_return_type_94471

# Assigning a type to the variable 'less_simple_linear_interpolation' (line 3407)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3407, 0), 'less_simple_linear_interpolation', less_simple_linear_interpolation)

@norecursion
def slopes(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'slopes'
    module_type_store = module_type_store.open_function_context('slopes', 3447, 0, False)
    
    # Passed parameters checking function
    slopes.stypy_localization = localization
    slopes.stypy_type_of_self = None
    slopes.stypy_type_store = module_type_store
    slopes.stypy_function_name = 'slopes'
    slopes.stypy_param_names_list = ['x', 'y']
    slopes.stypy_varargs_param_name = None
    slopes.stypy_kwargs_param_name = None
    slopes.stypy_call_defaults = defaults
    slopes.stypy_call_varargs = varargs
    slopes.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'slopes', ['x', 'y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'slopes', localization, ['x', 'y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'slopes(...)' code ##################

    unicode_94472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3472, (-1)), 'unicode', u"\n    :func:`slopes` calculates the slope *y*'(*x*)\n\n    The slope is estimated using the slope obtained from that of a\n    parabola through any three consecutive points.\n\n    This method should be superior to that described in the appendix\n    of A CONSISTENTLY WELL BEHAVED METHOD OF INTERPOLATION by Russel\n    W. Stineman (Creative Computing July 1980) in at least one aspect:\n\n      Circles for interpolation demand a known aspect ratio between\n      *x*- and *y*-values.  For many functions, however, the abscissa\n      are given in different dimensions, so an aspect ratio is\n      completely arbitrary.\n\n    The parabola method gives very similar results to the circle\n    method for most regular cases but behaves much better in special\n    cases.\n\n    Norbert Nemec, Institute of Theoretical Physics, University or\n    Regensburg, April 2006 Norbert.Nemec at physik.uni-regensburg.de\n\n    (inspired by a original implementation by Halldor Bjornsson,\n    Icelandic Meteorological Office, March 2006 halldor at vedur.is)\n    ")
    
    # Assigning a Call to a Name (line 3474):
    
    # Assigning a Call to a Name (line 3474):
    
    # Assigning a Call to a Name (line 3474):
    
    # Call to asarray(...): (line 3474)
    # Processing the call arguments (line 3474)
    # Getting the type of 'x' (line 3474)
    x_94475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3474, 19), 'x', False)
    # Getting the type of 'float' (line 3474)
    float_94476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3474, 22), 'float', False)
    # Processing the call keyword arguments (line 3474)
    kwargs_94477 = {}
    # Getting the type of 'np' (line 3474)
    np_94473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3474, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3474)
    asarray_94474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3474, 8), np_94473, 'asarray')
    # Calling asarray(args, kwargs) (line 3474)
    asarray_call_result_94478 = invoke(stypy.reporting.localization.Localization(__file__, 3474, 8), asarray_94474, *[x_94475, float_94476], **kwargs_94477)
    
    # Assigning a type to the variable 'x' (line 3474)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3474, 4), 'x', asarray_call_result_94478)
    
    # Assigning a Call to a Name (line 3475):
    
    # Assigning a Call to a Name (line 3475):
    
    # Assigning a Call to a Name (line 3475):
    
    # Call to asarray(...): (line 3475)
    # Processing the call arguments (line 3475)
    # Getting the type of 'y' (line 3475)
    y_94481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3475, 19), 'y', False)
    # Getting the type of 'float' (line 3475)
    float_94482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3475, 22), 'float', False)
    # Processing the call keyword arguments (line 3475)
    kwargs_94483 = {}
    # Getting the type of 'np' (line 3475)
    np_94479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3475, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3475)
    asarray_94480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3475, 8), np_94479, 'asarray')
    # Calling asarray(args, kwargs) (line 3475)
    asarray_call_result_94484 = invoke(stypy.reporting.localization.Localization(__file__, 3475, 8), asarray_94480, *[y_94481, float_94482], **kwargs_94483)
    
    # Assigning a type to the variable 'y' (line 3475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3475, 4), 'y', asarray_call_result_94484)
    
    # Assigning a Call to a Name (line 3477):
    
    # Assigning a Call to a Name (line 3477):
    
    # Assigning a Call to a Name (line 3477):
    
    # Call to zeros(...): (line 3477)
    # Processing the call arguments (line 3477)
    # Getting the type of 'y' (line 3477)
    y_94487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3477, 18), 'y', False)
    # Obtaining the member 'shape' of a type (line 3477)
    shape_94488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3477, 18), y_94487, 'shape')
    # Getting the type of 'float' (line 3477)
    float_94489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3477, 27), 'float', False)
    # Processing the call keyword arguments (line 3477)
    kwargs_94490 = {}
    # Getting the type of 'np' (line 3477)
    np_94485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3477, 9), 'np', False)
    # Obtaining the member 'zeros' of a type (line 3477)
    zeros_94486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3477, 9), np_94485, 'zeros')
    # Calling zeros(args, kwargs) (line 3477)
    zeros_call_result_94491 = invoke(stypy.reporting.localization.Localization(__file__, 3477, 9), zeros_94486, *[shape_94488, float_94489], **kwargs_94490)
    
    # Assigning a type to the variable 'yp' (line 3477)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3477, 4), 'yp', zeros_call_result_94491)
    
    # Assigning a BinOp to a Name (line 3479):
    
    # Assigning a BinOp to a Name (line 3479):
    
    # Assigning a BinOp to a Name (line 3479):
    
    # Obtaining the type of the subscript
    int_94492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3479, 11), 'int')
    slice_94493 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3479, 9), int_94492, None, None)
    # Getting the type of 'x' (line 3479)
    x_94494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3479, 9), 'x')
    # Obtaining the member '__getitem__' of a type (line 3479)
    getitem___94495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3479, 9), x_94494, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3479)
    subscript_call_result_94496 = invoke(stypy.reporting.localization.Localization(__file__, 3479, 9), getitem___94495, slice_94493)
    
    
    # Obtaining the type of the subscript
    int_94497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3479, 20), 'int')
    slice_94498 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3479, 17), None, int_94497, None)
    # Getting the type of 'x' (line 3479)
    x_94499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3479, 17), 'x')
    # Obtaining the member '__getitem__' of a type (line 3479)
    getitem___94500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3479, 17), x_94499, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3479)
    subscript_call_result_94501 = invoke(stypy.reporting.localization.Localization(__file__, 3479, 17), getitem___94500, slice_94498)
    
    # Applying the binary operator '-' (line 3479)
    result_sub_94502 = python_operator(stypy.reporting.localization.Localization(__file__, 3479, 9), '-', subscript_call_result_94496, subscript_call_result_94501)
    
    # Assigning a type to the variable 'dx' (line 3479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3479, 4), 'dx', result_sub_94502)
    
    # Assigning a BinOp to a Name (line 3480):
    
    # Assigning a BinOp to a Name (line 3480):
    
    # Assigning a BinOp to a Name (line 3480):
    
    # Obtaining the type of the subscript
    int_94503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3480, 11), 'int')
    slice_94504 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3480, 9), int_94503, None, None)
    # Getting the type of 'y' (line 3480)
    y_94505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3480, 9), 'y')
    # Obtaining the member '__getitem__' of a type (line 3480)
    getitem___94506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3480, 9), y_94505, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3480)
    subscript_call_result_94507 = invoke(stypy.reporting.localization.Localization(__file__, 3480, 9), getitem___94506, slice_94504)
    
    
    # Obtaining the type of the subscript
    int_94508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3480, 20), 'int')
    slice_94509 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3480, 17), None, int_94508, None)
    # Getting the type of 'y' (line 3480)
    y_94510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3480, 17), 'y')
    # Obtaining the member '__getitem__' of a type (line 3480)
    getitem___94511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3480, 17), y_94510, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3480)
    subscript_call_result_94512 = invoke(stypy.reporting.localization.Localization(__file__, 3480, 17), getitem___94511, slice_94509)
    
    # Applying the binary operator '-' (line 3480)
    result_sub_94513 = python_operator(stypy.reporting.localization.Localization(__file__, 3480, 9), '-', subscript_call_result_94507, subscript_call_result_94512)
    
    # Assigning a type to the variable 'dy' (line 3480)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3480, 4), 'dy', result_sub_94513)
    
    # Assigning a BinOp to a Name (line 3481):
    
    # Assigning a BinOp to a Name (line 3481):
    
    # Assigning a BinOp to a Name (line 3481):
    # Getting the type of 'dy' (line 3481)
    dy_94514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3481, 11), 'dy')
    # Getting the type of 'dx' (line 3481)
    dx_94515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3481, 14), 'dx')
    # Applying the binary operator 'div' (line 3481)
    result_div_94516 = python_operator(stypy.reporting.localization.Localization(__file__, 3481, 11), 'div', dy_94514, dx_94515)
    
    # Assigning a type to the variable 'dydx' (line 3481)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3481, 4), 'dydx', result_div_94516)
    
    # Assigning a BinOp to a Subscript (line 3482):
    
    # Assigning a BinOp to a Subscript (line 3482):
    
    # Assigning a BinOp to a Subscript (line 3482):
    
    # Obtaining the type of the subscript
    int_94517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3482, 22), 'int')
    slice_94518 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3482, 16), None, int_94517, None)
    # Getting the type of 'dydx' (line 3482)
    dydx_94519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3482, 16), 'dydx')
    # Obtaining the member '__getitem__' of a type (line 3482)
    getitem___94520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3482, 16), dydx_94519, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3482)
    subscript_call_result_94521 = invoke(stypy.reporting.localization.Localization(__file__, 3482, 16), getitem___94520, slice_94518)
    
    
    # Obtaining the type of the subscript
    int_94522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3482, 31), 'int')
    slice_94523 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3482, 28), int_94522, None, None)
    # Getting the type of 'dx' (line 3482)
    dx_94524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3482, 28), 'dx')
    # Obtaining the member '__getitem__' of a type (line 3482)
    getitem___94525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3482, 28), dx_94524, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3482)
    subscript_call_result_94526 = invoke(stypy.reporting.localization.Localization(__file__, 3482, 28), getitem___94525, slice_94523)
    
    # Applying the binary operator '*' (line 3482)
    result_mul_94527 = python_operator(stypy.reporting.localization.Localization(__file__, 3482, 16), '*', subscript_call_result_94521, subscript_call_result_94526)
    
    
    # Obtaining the type of the subscript
    int_94528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3482, 42), 'int')
    slice_94529 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3482, 37), int_94528, None, None)
    # Getting the type of 'dydx' (line 3482)
    dydx_94530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3482, 37), 'dydx')
    # Obtaining the member '__getitem__' of a type (line 3482)
    getitem___94531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3482, 37), dydx_94530, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3482)
    subscript_call_result_94532 = invoke(stypy.reporting.localization.Localization(__file__, 3482, 37), getitem___94531, slice_94529)
    
    
    # Obtaining the type of the subscript
    int_94533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3482, 52), 'int')
    slice_94534 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3482, 48), None, int_94533, None)
    # Getting the type of 'dx' (line 3482)
    dx_94535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3482, 48), 'dx')
    # Obtaining the member '__getitem__' of a type (line 3482)
    getitem___94536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3482, 48), dx_94535, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3482)
    subscript_call_result_94537 = invoke(stypy.reporting.localization.Localization(__file__, 3482, 48), getitem___94536, slice_94534)
    
    # Applying the binary operator '*' (line 3482)
    result_mul_94538 = python_operator(stypy.reporting.localization.Localization(__file__, 3482, 37), '*', subscript_call_result_94532, subscript_call_result_94537)
    
    # Applying the binary operator '+' (line 3482)
    result_add_94539 = python_operator(stypy.reporting.localization.Localization(__file__, 3482, 16), '+', result_mul_94527, result_mul_94538)
    
    
    # Obtaining the type of the subscript
    int_94540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3482, 61), 'int')
    slice_94541 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3482, 58), int_94540, None, None)
    # Getting the type of 'dx' (line 3482)
    dx_94542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3482, 58), 'dx')
    # Obtaining the member '__getitem__' of a type (line 3482)
    getitem___94543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3482, 58), dx_94542, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3482)
    subscript_call_result_94544 = invoke(stypy.reporting.localization.Localization(__file__, 3482, 58), getitem___94543, slice_94541)
    
    
    # Obtaining the type of the subscript
    int_94545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3482, 71), 'int')
    slice_94546 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3482, 67), None, int_94545, None)
    # Getting the type of 'dx' (line 3482)
    dx_94547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3482, 67), 'dx')
    # Obtaining the member '__getitem__' of a type (line 3482)
    getitem___94548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3482, 67), dx_94547, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3482)
    subscript_call_result_94549 = invoke(stypy.reporting.localization.Localization(__file__, 3482, 67), getitem___94548, slice_94546)
    
    # Applying the binary operator '+' (line 3482)
    result_add_94550 = python_operator(stypy.reporting.localization.Localization(__file__, 3482, 58), '+', subscript_call_result_94544, subscript_call_result_94549)
    
    # Applying the binary operator 'div' (line 3482)
    result_div_94551 = python_operator(stypy.reporting.localization.Localization(__file__, 3482, 15), 'div', result_add_94539, result_add_94550)
    
    # Getting the type of 'yp' (line 3482)
    yp_94552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3482, 4), 'yp')
    int_94553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3482, 7), 'int')
    int_94554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3482, 9), 'int')
    slice_94555 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3482, 4), int_94553, int_94554, None)
    # Storing an element on a container (line 3482)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3482, 4), yp_94552, (slice_94555, result_div_94551))
    
    # Assigning a BinOp to a Subscript (line 3483):
    
    # Assigning a BinOp to a Subscript (line 3483):
    
    # Assigning a BinOp to a Subscript (line 3483):
    float_94556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3483, 12), 'float')
    
    # Obtaining the type of the subscript
    int_94557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3483, 21), 'int')
    # Getting the type of 'dy' (line 3483)
    dy_94558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3483, 18), 'dy')
    # Obtaining the member '__getitem__' of a type (line 3483)
    getitem___94559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3483, 18), dy_94558, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3483)
    subscript_call_result_94560 = invoke(stypy.reporting.localization.Localization(__file__, 3483, 18), getitem___94559, int_94557)
    
    # Applying the binary operator '*' (line 3483)
    result_mul_94561 = python_operator(stypy.reporting.localization.Localization(__file__, 3483, 12), '*', float_94556, subscript_call_result_94560)
    
    
    # Obtaining the type of the subscript
    int_94562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3483, 27), 'int')
    # Getting the type of 'dx' (line 3483)
    dx_94563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3483, 24), 'dx')
    # Obtaining the member '__getitem__' of a type (line 3483)
    getitem___94564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3483, 24), dx_94563, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3483)
    subscript_call_result_94565 = invoke(stypy.reporting.localization.Localization(__file__, 3483, 24), getitem___94564, int_94562)
    
    # Applying the binary operator 'div' (line 3483)
    result_div_94566 = python_operator(stypy.reporting.localization.Localization(__file__, 3483, 23), 'div', result_mul_94561, subscript_call_result_94565)
    
    
    # Obtaining the type of the subscript
    int_94567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3483, 35), 'int')
    # Getting the type of 'yp' (line 3483)
    yp_94568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3483, 32), 'yp')
    # Obtaining the member '__getitem__' of a type (line 3483)
    getitem___94569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3483, 32), yp_94568, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3483)
    subscript_call_result_94570 = invoke(stypy.reporting.localization.Localization(__file__, 3483, 32), getitem___94569, int_94567)
    
    # Applying the binary operator '-' (line 3483)
    result_sub_94571 = python_operator(stypy.reporting.localization.Localization(__file__, 3483, 12), '-', result_div_94566, subscript_call_result_94570)
    
    # Getting the type of 'yp' (line 3483)
    yp_94572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3483, 4), 'yp')
    int_94573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3483, 7), 'int')
    # Storing an element on a container (line 3483)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3483, 4), yp_94572, (int_94573, result_sub_94571))
    
    # Assigning a BinOp to a Subscript (line 3484):
    
    # Assigning a BinOp to a Subscript (line 3484):
    
    # Assigning a BinOp to a Subscript (line 3484):
    float_94574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3484, 13), 'float')
    
    # Obtaining the type of the subscript
    int_94575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3484, 22), 'int')
    # Getting the type of 'dy' (line 3484)
    dy_94576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3484, 19), 'dy')
    # Obtaining the member '__getitem__' of a type (line 3484)
    getitem___94577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3484, 19), dy_94576, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3484)
    subscript_call_result_94578 = invoke(stypy.reporting.localization.Localization(__file__, 3484, 19), getitem___94577, int_94575)
    
    # Applying the binary operator '*' (line 3484)
    result_mul_94579 = python_operator(stypy.reporting.localization.Localization(__file__, 3484, 13), '*', float_94574, subscript_call_result_94578)
    
    
    # Obtaining the type of the subscript
    int_94580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3484, 29), 'int')
    # Getting the type of 'dx' (line 3484)
    dx_94581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3484, 26), 'dx')
    # Obtaining the member '__getitem__' of a type (line 3484)
    getitem___94582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3484, 26), dx_94581, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3484)
    subscript_call_result_94583 = invoke(stypy.reporting.localization.Localization(__file__, 3484, 26), getitem___94582, int_94580)
    
    # Applying the binary operator 'div' (line 3484)
    result_div_94584 = python_operator(stypy.reporting.localization.Localization(__file__, 3484, 25), 'div', result_mul_94579, subscript_call_result_94583)
    
    
    # Obtaining the type of the subscript
    int_94585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3484, 38), 'int')
    # Getting the type of 'yp' (line 3484)
    yp_94586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3484, 35), 'yp')
    # Obtaining the member '__getitem__' of a type (line 3484)
    getitem___94587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3484, 35), yp_94586, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3484)
    subscript_call_result_94588 = invoke(stypy.reporting.localization.Localization(__file__, 3484, 35), getitem___94587, int_94585)
    
    # Applying the binary operator '-' (line 3484)
    result_sub_94589 = python_operator(stypy.reporting.localization.Localization(__file__, 3484, 13), '-', result_div_94584, subscript_call_result_94588)
    
    # Getting the type of 'yp' (line 3484)
    yp_94590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3484, 4), 'yp')
    int_94591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3484, 7), 'int')
    # Storing an element on a container (line 3484)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3484, 4), yp_94590, (int_94591, result_sub_94589))
    # Getting the type of 'yp' (line 3485)
    yp_94592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3485, 11), 'yp')
    # Assigning a type to the variable 'stypy_return_type' (line 3485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3485, 4), 'stypy_return_type', yp_94592)
    
    # ################# End of 'slopes(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'slopes' in the type store
    # Getting the type of 'stypy_return_type' (line 3447)
    stypy_return_type_94593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3447, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_94593)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'slopes'
    return stypy_return_type_94593

# Assigning a type to the variable 'slopes' (line 3447)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3447, 0), 'slopes', slopes)

@norecursion
def stineman_interp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3488)
    None_94594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3488, 33), 'None')
    defaults = [None_94594]
    # Create a new context for function 'stineman_interp'
    module_type_store = module_type_store.open_function_context('stineman_interp', 3488, 0, False)
    
    # Passed parameters checking function
    stineman_interp.stypy_localization = localization
    stineman_interp.stypy_type_of_self = None
    stineman_interp.stypy_type_store = module_type_store
    stineman_interp.stypy_function_name = 'stineman_interp'
    stineman_interp.stypy_param_names_list = ['xi', 'x', 'y', 'yp']
    stineman_interp.stypy_varargs_param_name = None
    stineman_interp.stypy_kwargs_param_name = None
    stineman_interp.stypy_call_defaults = defaults
    stineman_interp.stypy_call_varargs = varargs
    stineman_interp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'stineman_interp', ['xi', 'x', 'y', 'yp'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'stineman_interp', localization, ['xi', 'x', 'y', 'yp'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'stineman_interp(...)' code ##################

    unicode_94595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3528, (-1)), 'unicode', u'\n    Given data vectors *x* and *y*, the slope vector *yp* and a new\n    abscissa vector *xi*, the function :func:`stineman_interp` uses\n    Stineman interpolation to calculate a vector *yi* corresponding to\n    *xi*.\n\n    Here\'s an example that generates a coarse sine curve, then\n    interpolates over a finer abscissa::\n\n      x = linspace(0,2*pi,20);  y = sin(x); yp = cos(x)\n      xi = linspace(0,2*pi,40);\n      yi = stineman_interp(xi,x,y,yp);\n      plot(x,y,\'o\',xi,yi)\n\n    The interpolation method is described in the article A\n    CONSISTENTLY WELL BEHAVED METHOD OF INTERPOLATION by Russell\n    W. Stineman. The article appeared in the July 1980 issue of\n    Creative Computing with a note from the editor stating that while\n    they were:\n\n      not an academic journal but once in a while something serious\n      and original comes in adding that this was\n      "apparently a real solution" to a well known problem.\n\n    For *yp* = *None*, the routine automatically determines the slopes\n    using the :func:`slopes` routine.\n\n    *x* is assumed to be sorted in increasing order.\n\n    For values ``xi[j] < x[0]`` or ``xi[j] > x[-1]``, the routine\n    tries an extrapolation.  The relevance of the data obtained from\n    this, of course, is questionable...\n\n    Original implementation by Halldor Bjornsson, Icelandic\n    Meteorolocial Office, March 2006 halldor at vedur.is\n\n    Completely reworked and optimized for Python by Norbert Nemec,\n    Institute of Theoretical Physics, University or Regensburg, April\n    2006 Norbert.Nemec at physik.uni-regensburg.de\n    ')
    
    # Assigning a Call to a Name (line 3531):
    
    # Assigning a Call to a Name (line 3531):
    
    # Assigning a Call to a Name (line 3531):
    
    # Call to asarray(...): (line 3531)
    # Processing the call arguments (line 3531)
    # Getting the type of 'x' (line 3531)
    x_94598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3531, 19), 'x', False)
    # Getting the type of 'float' (line 3531)
    float_94599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3531, 22), 'float', False)
    # Processing the call keyword arguments (line 3531)
    kwargs_94600 = {}
    # Getting the type of 'np' (line 3531)
    np_94596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3531, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3531)
    asarray_94597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3531, 8), np_94596, 'asarray')
    # Calling asarray(args, kwargs) (line 3531)
    asarray_call_result_94601 = invoke(stypy.reporting.localization.Localization(__file__, 3531, 8), asarray_94597, *[x_94598, float_94599], **kwargs_94600)
    
    # Assigning a type to the variable 'x' (line 3531)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3531, 4), 'x', asarray_call_result_94601)
    
    # Assigning a Call to a Name (line 3532):
    
    # Assigning a Call to a Name (line 3532):
    
    # Assigning a Call to a Name (line 3532):
    
    # Call to asarray(...): (line 3532)
    # Processing the call arguments (line 3532)
    # Getting the type of 'y' (line 3532)
    y_94604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3532, 19), 'y', False)
    # Getting the type of 'float' (line 3532)
    float_94605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3532, 22), 'float', False)
    # Processing the call keyword arguments (line 3532)
    kwargs_94606 = {}
    # Getting the type of 'np' (line 3532)
    np_94602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3532, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3532)
    asarray_94603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3532, 8), np_94602, 'asarray')
    # Calling asarray(args, kwargs) (line 3532)
    asarray_call_result_94607 = invoke(stypy.reporting.localization.Localization(__file__, 3532, 8), asarray_94603, *[y_94604, float_94605], **kwargs_94606)
    
    # Assigning a type to the variable 'y' (line 3532)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3532, 4), 'y', asarray_call_result_94607)
    
    
    # Getting the type of 'x' (line 3533)
    x_94608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3533, 7), 'x')
    # Obtaining the member 'shape' of a type (line 3533)
    shape_94609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3533, 7), x_94608, 'shape')
    # Getting the type of 'y' (line 3533)
    y_94610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3533, 18), 'y')
    # Obtaining the member 'shape' of a type (line 3533)
    shape_94611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3533, 18), y_94610, 'shape')
    # Applying the binary operator '!=' (line 3533)
    result_ne_94612 = python_operator(stypy.reporting.localization.Localization(__file__, 3533, 7), '!=', shape_94609, shape_94611)
    
    # Testing the type of an if condition (line 3533)
    if_condition_94613 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3533, 4), result_ne_94612)
    # Assigning a type to the variable 'if_condition_94613' (line 3533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3533, 4), 'if_condition_94613', if_condition_94613)
    # SSA begins for if statement (line 3533)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3534)
    # Processing the call arguments (line 3534)
    unicode_94615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3534, 25), 'unicode', u"'x' and 'y' must be of same shape")
    # Processing the call keyword arguments (line 3534)
    kwargs_94616 = {}
    # Getting the type of 'ValueError' (line 3534)
    ValueError_94614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3534, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3534)
    ValueError_call_result_94617 = invoke(stypy.reporting.localization.Localization(__file__, 3534, 14), ValueError_94614, *[unicode_94615], **kwargs_94616)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3534, 8), ValueError_call_result_94617, 'raise parameter', BaseException)
    # SSA join for if statement (line 3533)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 3536)
    # Getting the type of 'yp' (line 3536)
    yp_94618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3536, 7), 'yp')
    # Getting the type of 'None' (line 3536)
    None_94619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3536, 13), 'None')
    
    (may_be_94620, more_types_in_union_94621) = may_be_none(yp_94618, None_94619)

    if may_be_94620:

        if more_types_in_union_94621:
            # Runtime conditional SSA (line 3536)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 3537):
        
        # Assigning a Call to a Name (line 3537):
        
        # Assigning a Call to a Name (line 3537):
        
        # Call to slopes(...): (line 3537)
        # Processing the call arguments (line 3537)
        # Getting the type of 'x' (line 3537)
        x_94623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 20), 'x', False)
        # Getting the type of 'y' (line 3537)
        y_94624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 23), 'y', False)
        # Processing the call keyword arguments (line 3537)
        kwargs_94625 = {}
        # Getting the type of 'slopes' (line 3537)
        slopes_94622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 13), 'slopes', False)
        # Calling slopes(args, kwargs) (line 3537)
        slopes_call_result_94626 = invoke(stypy.reporting.localization.Localization(__file__, 3537, 13), slopes_94622, *[x_94623, y_94624], **kwargs_94625)
        
        # Assigning a type to the variable 'yp' (line 3537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3537, 8), 'yp', slopes_call_result_94626)

        if more_types_in_union_94621:
            # Runtime conditional SSA for else branch (line 3536)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_94620) or more_types_in_union_94621):
        
        # Assigning a Call to a Name (line 3539):
        
        # Assigning a Call to a Name (line 3539):
        
        # Assigning a Call to a Name (line 3539):
        
        # Call to asarray(...): (line 3539)
        # Processing the call arguments (line 3539)
        # Getting the type of 'yp' (line 3539)
        yp_94629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3539, 24), 'yp', False)
        # Getting the type of 'float' (line 3539)
        float_94630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3539, 28), 'float', False)
        # Processing the call keyword arguments (line 3539)
        kwargs_94631 = {}
        # Getting the type of 'np' (line 3539)
        np_94627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3539, 13), 'np', False)
        # Obtaining the member 'asarray' of a type (line 3539)
        asarray_94628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3539, 13), np_94627, 'asarray')
        # Calling asarray(args, kwargs) (line 3539)
        asarray_call_result_94632 = invoke(stypy.reporting.localization.Localization(__file__, 3539, 13), asarray_94628, *[yp_94629, float_94630], **kwargs_94631)
        
        # Assigning a type to the variable 'yp' (line 3539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3539, 8), 'yp', asarray_call_result_94632)

        if (may_be_94620 and more_types_in_union_94621):
            # SSA join for if statement (line 3536)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 3541):
    
    # Assigning a Call to a Name (line 3541):
    
    # Assigning a Call to a Name (line 3541):
    
    # Call to asarray(...): (line 3541)
    # Processing the call arguments (line 3541)
    # Getting the type of 'xi' (line 3541)
    xi_94635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3541, 20), 'xi', False)
    # Getting the type of 'float' (line 3541)
    float_94636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3541, 24), 'float', False)
    # Processing the call keyword arguments (line 3541)
    kwargs_94637 = {}
    # Getting the type of 'np' (line 3541)
    np_94633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3541, 9), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3541)
    asarray_94634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3541, 9), np_94633, 'asarray')
    # Calling asarray(args, kwargs) (line 3541)
    asarray_call_result_94638 = invoke(stypy.reporting.localization.Localization(__file__, 3541, 9), asarray_94634, *[xi_94635, float_94636], **kwargs_94637)
    
    # Assigning a type to the variable 'xi' (line 3541)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3541, 4), 'xi', asarray_call_result_94638)
    
    # Assigning a Call to a Name (line 3542):
    
    # Assigning a Call to a Name (line 3542):
    
    # Assigning a Call to a Name (line 3542):
    
    # Call to zeros(...): (line 3542)
    # Processing the call arguments (line 3542)
    # Getting the type of 'xi' (line 3542)
    xi_94641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3542, 18), 'xi', False)
    # Obtaining the member 'shape' of a type (line 3542)
    shape_94642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3542, 18), xi_94641, 'shape')
    # Getting the type of 'float' (line 3542)
    float_94643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3542, 28), 'float', False)
    # Processing the call keyword arguments (line 3542)
    kwargs_94644 = {}
    # Getting the type of 'np' (line 3542)
    np_94639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3542, 9), 'np', False)
    # Obtaining the member 'zeros' of a type (line 3542)
    zeros_94640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3542, 9), np_94639, 'zeros')
    # Calling zeros(args, kwargs) (line 3542)
    zeros_call_result_94645 = invoke(stypy.reporting.localization.Localization(__file__, 3542, 9), zeros_94640, *[shape_94642, float_94643], **kwargs_94644)
    
    # Assigning a type to the variable 'yi' (line 3542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3542, 4), 'yi', zeros_call_result_94645)
    
    # Assigning a BinOp to a Name (line 3545):
    
    # Assigning a BinOp to a Name (line 3545):
    
    # Assigning a BinOp to a Name (line 3545):
    
    # Obtaining the type of the subscript
    int_94646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3545, 11), 'int')
    slice_94647 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3545, 9), int_94646, None, None)
    # Getting the type of 'x' (line 3545)
    x_94648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3545, 9), 'x')
    # Obtaining the member '__getitem__' of a type (line 3545)
    getitem___94649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3545, 9), x_94648, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3545)
    subscript_call_result_94650 = invoke(stypy.reporting.localization.Localization(__file__, 3545, 9), getitem___94649, slice_94647)
    
    
    # Obtaining the type of the subscript
    int_94651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3545, 20), 'int')
    slice_94652 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3545, 17), None, int_94651, None)
    # Getting the type of 'x' (line 3545)
    x_94653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3545, 17), 'x')
    # Obtaining the member '__getitem__' of a type (line 3545)
    getitem___94654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3545, 17), x_94653, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3545)
    subscript_call_result_94655 = invoke(stypy.reporting.localization.Localization(__file__, 3545, 17), getitem___94654, slice_94652)
    
    # Applying the binary operator '-' (line 3545)
    result_sub_94656 = python_operator(stypy.reporting.localization.Localization(__file__, 3545, 9), '-', subscript_call_result_94650, subscript_call_result_94655)
    
    # Assigning a type to the variable 'dx' (line 3545)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3545, 4), 'dx', result_sub_94656)
    
    # Assigning a BinOp to a Name (line 3546):
    
    # Assigning a BinOp to a Name (line 3546):
    
    # Assigning a BinOp to a Name (line 3546):
    
    # Obtaining the type of the subscript
    int_94657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3546, 11), 'int')
    slice_94658 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3546, 9), int_94657, None, None)
    # Getting the type of 'y' (line 3546)
    y_94659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3546, 9), 'y')
    # Obtaining the member '__getitem__' of a type (line 3546)
    getitem___94660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3546, 9), y_94659, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3546)
    subscript_call_result_94661 = invoke(stypy.reporting.localization.Localization(__file__, 3546, 9), getitem___94660, slice_94658)
    
    
    # Obtaining the type of the subscript
    int_94662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3546, 20), 'int')
    slice_94663 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3546, 17), None, int_94662, None)
    # Getting the type of 'y' (line 3546)
    y_94664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3546, 17), 'y')
    # Obtaining the member '__getitem__' of a type (line 3546)
    getitem___94665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3546, 17), y_94664, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3546)
    subscript_call_result_94666 = invoke(stypy.reporting.localization.Localization(__file__, 3546, 17), getitem___94665, slice_94663)
    
    # Applying the binary operator '-' (line 3546)
    result_sub_94667 = python_operator(stypy.reporting.localization.Localization(__file__, 3546, 9), '-', subscript_call_result_94661, subscript_call_result_94666)
    
    # Assigning a type to the variable 'dy' (line 3546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3546, 4), 'dy', result_sub_94667)
    
    # Assigning a BinOp to a Name (line 3547):
    
    # Assigning a BinOp to a Name (line 3547):
    
    # Assigning a BinOp to a Name (line 3547):
    # Getting the type of 'dy' (line 3547)
    dy_94668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3547, 8), 'dy')
    # Getting the type of 'dx' (line 3547)
    dx_94669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3547, 11), 'dx')
    # Applying the binary operator 'div' (line 3547)
    result_div_94670 = python_operator(stypy.reporting.localization.Localization(__file__, 3547, 8), 'div', dy_94668, dx_94669)
    
    # Assigning a type to the variable 's' (line 3547)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3547, 4), 's', result_div_94670)
    
    # Assigning a Call to a Name (line 3551):
    
    # Assigning a Call to a Name (line 3551):
    
    # Assigning a Call to a Name (line 3551):
    
    # Call to searchsorted(...): (line 3551)
    # Processing the call arguments (line 3551)
    
    # Obtaining the type of the subscript
    int_94673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3551, 28), 'int')
    int_94674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3551, 30), 'int')
    slice_94675 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3551, 26), int_94673, int_94674, None)
    # Getting the type of 'x' (line 3551)
    x_94676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3551, 26), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 3551)
    getitem___94677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3551, 26), x_94676, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3551)
    subscript_call_result_94678 = invoke(stypy.reporting.localization.Localization(__file__, 3551, 26), getitem___94677, slice_94675)
    
    # Getting the type of 'xi' (line 3551)
    xi_94679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3551, 35), 'xi', False)
    # Processing the call keyword arguments (line 3551)
    kwargs_94680 = {}
    # Getting the type of 'np' (line 3551)
    np_94671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3551, 10), 'np', False)
    # Obtaining the member 'searchsorted' of a type (line 3551)
    searchsorted_94672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3551, 10), np_94671, 'searchsorted')
    # Calling searchsorted(args, kwargs) (line 3551)
    searchsorted_call_result_94681 = invoke(stypy.reporting.localization.Localization(__file__, 3551, 10), searchsorted_94672, *[subscript_call_result_94678, xi_94679], **kwargs_94680)
    
    # Assigning a type to the variable 'idx' (line 3551)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3551, 4), 'idx', searchsorted_call_result_94681)
    
    # Assigning a Call to a Name (line 3558):
    
    # Assigning a Call to a Name (line 3558):
    
    # Assigning a Call to a Name (line 3558):
    
    # Call to take(...): (line 3558)
    # Processing the call arguments (line 3558)
    # Getting the type of 'idx' (line 3558)
    idx_94684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3558, 18), 'idx', False)
    # Processing the call keyword arguments (line 3558)
    kwargs_94685 = {}
    # Getting the type of 's' (line 3558)
    s_94682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3558, 11), 's', False)
    # Obtaining the member 'take' of a type (line 3558)
    take_94683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3558, 11), s_94682, 'take')
    # Calling take(args, kwargs) (line 3558)
    take_call_result_94686 = invoke(stypy.reporting.localization.Localization(__file__, 3558, 11), take_94683, *[idx_94684], **kwargs_94685)
    
    # Assigning a type to the variable 'sidx' (line 3558)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3558, 4), 'sidx', take_call_result_94686)
    
    # Assigning a Call to a Name (line 3559):
    
    # Assigning a Call to a Name (line 3559):
    
    # Assigning a Call to a Name (line 3559):
    
    # Call to take(...): (line 3559)
    # Processing the call arguments (line 3559)
    # Getting the type of 'idx' (line 3559)
    idx_94689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3559, 18), 'idx', False)
    # Processing the call keyword arguments (line 3559)
    kwargs_94690 = {}
    # Getting the type of 'x' (line 3559)
    x_94687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3559, 11), 'x', False)
    # Obtaining the member 'take' of a type (line 3559)
    take_94688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3559, 11), x_94687, 'take')
    # Calling take(args, kwargs) (line 3559)
    take_call_result_94691 = invoke(stypy.reporting.localization.Localization(__file__, 3559, 11), take_94688, *[idx_94689], **kwargs_94690)
    
    # Assigning a type to the variable 'xidx' (line 3559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3559, 4), 'xidx', take_call_result_94691)
    
    # Assigning a Call to a Name (line 3560):
    
    # Assigning a Call to a Name (line 3560):
    
    # Assigning a Call to a Name (line 3560):
    
    # Call to take(...): (line 3560)
    # Processing the call arguments (line 3560)
    # Getting the type of 'idx' (line 3560)
    idx_94694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3560, 18), 'idx', False)
    # Processing the call keyword arguments (line 3560)
    kwargs_94695 = {}
    # Getting the type of 'y' (line 3560)
    y_94692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3560, 11), 'y', False)
    # Obtaining the member 'take' of a type (line 3560)
    take_94693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3560, 11), y_94692, 'take')
    # Calling take(args, kwargs) (line 3560)
    take_call_result_94696 = invoke(stypy.reporting.localization.Localization(__file__, 3560, 11), take_94693, *[idx_94694], **kwargs_94695)
    
    # Assigning a type to the variable 'yidx' (line 3560)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3560, 4), 'yidx', take_call_result_94696)
    
    # Assigning a Call to a Name (line 3561):
    
    # Assigning a Call to a Name (line 3561):
    
    # Assigning a Call to a Name (line 3561):
    
    # Call to take(...): (line 3561)
    # Processing the call arguments (line 3561)
    # Getting the type of 'idx' (line 3561)
    idx_94699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3561, 20), 'idx', False)
    int_94700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3561, 24), 'int')
    # Applying the binary operator '+' (line 3561)
    result_add_94701 = python_operator(stypy.reporting.localization.Localization(__file__, 3561, 20), '+', idx_94699, int_94700)
    
    # Processing the call keyword arguments (line 3561)
    kwargs_94702 = {}
    # Getting the type of 'x' (line 3561)
    x_94697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3561, 13), 'x', False)
    # Obtaining the member 'take' of a type (line 3561)
    take_94698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3561, 13), x_94697, 'take')
    # Calling take(args, kwargs) (line 3561)
    take_call_result_94703 = invoke(stypy.reporting.localization.Localization(__file__, 3561, 13), take_94698, *[result_add_94701], **kwargs_94702)
    
    # Assigning a type to the variable 'xidxp1' (line 3561)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3561, 4), 'xidxp1', take_call_result_94703)
    
    # Assigning a BinOp to a Name (line 3562):
    
    # Assigning a BinOp to a Name (line 3562):
    
    # Assigning a BinOp to a Name (line 3562):
    # Getting the type of 'yidx' (line 3562)
    yidx_94704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3562, 9), 'yidx')
    # Getting the type of 'sidx' (line 3562)
    sidx_94705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3562, 16), 'sidx')
    # Getting the type of 'xi' (line 3562)
    xi_94706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3562, 24), 'xi')
    # Getting the type of 'xidx' (line 3562)
    xidx_94707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3562, 29), 'xidx')
    # Applying the binary operator '-' (line 3562)
    result_sub_94708 = python_operator(stypy.reporting.localization.Localization(__file__, 3562, 24), '-', xi_94706, xidx_94707)
    
    # Applying the binary operator '*' (line 3562)
    result_mul_94709 = python_operator(stypy.reporting.localization.Localization(__file__, 3562, 16), '*', sidx_94705, result_sub_94708)
    
    # Applying the binary operator '+' (line 3562)
    result_add_94710 = python_operator(stypy.reporting.localization.Localization(__file__, 3562, 9), '+', yidx_94704, result_mul_94709)
    
    # Assigning a type to the variable 'yo' (line 3562)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3562, 4), 'yo', result_add_94710)
    
    # Assigning a BinOp to a Name (line 3566):
    
    # Assigning a BinOp to a Name (line 3566):
    
    # Assigning a BinOp to a Name (line 3566):
    
    # Call to take(...): (line 3566)
    # Processing the call arguments (line 3566)
    # Getting the type of 'idx' (line 3566)
    idx_94713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 19), 'idx', False)
    # Processing the call keyword arguments (line 3566)
    kwargs_94714 = {}
    # Getting the type of 'yp' (line 3566)
    yp_94711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 11), 'yp', False)
    # Obtaining the member 'take' of a type (line 3566)
    take_94712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3566, 11), yp_94711, 'take')
    # Calling take(args, kwargs) (line 3566)
    take_call_result_94715 = invoke(stypy.reporting.localization.Localization(__file__, 3566, 11), take_94712, *[idx_94713], **kwargs_94714)
    
    # Getting the type of 'sidx' (line 3566)
    sidx_94716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 26), 'sidx')
    # Applying the binary operator '-' (line 3566)
    result_sub_94717 = python_operator(stypy.reporting.localization.Localization(__file__, 3566, 11), '-', take_call_result_94715, sidx_94716)
    
    # Getting the type of 'xi' (line 3566)
    xi_94718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 35), 'xi')
    # Getting the type of 'xidx' (line 3566)
    xidx_94719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 40), 'xidx')
    # Applying the binary operator '-' (line 3566)
    result_sub_94720 = python_operator(stypy.reporting.localization.Localization(__file__, 3566, 35), '-', xi_94718, xidx_94719)
    
    # Applying the binary operator '*' (line 3566)
    result_mul_94721 = python_operator(stypy.reporting.localization.Localization(__file__, 3566, 10), '*', result_sub_94717, result_sub_94720)
    
    # Assigning a type to the variable 'dy1' (line 3566)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3566, 4), 'dy1', result_mul_94721)
    
    # Assigning a BinOp to a Name (line 3568):
    
    # Assigning a BinOp to a Name (line 3568):
    
    # Assigning a BinOp to a Name (line 3568):
    
    # Call to take(...): (line 3568)
    # Processing the call arguments (line 3568)
    # Getting the type of 'idx' (line 3568)
    idx_94724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3568, 19), 'idx', False)
    int_94725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3568, 23), 'int')
    # Applying the binary operator '+' (line 3568)
    result_add_94726 = python_operator(stypy.reporting.localization.Localization(__file__, 3568, 19), '+', idx_94724, int_94725)
    
    # Processing the call keyword arguments (line 3568)
    kwargs_94727 = {}
    # Getting the type of 'yp' (line 3568)
    yp_94722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3568, 11), 'yp', False)
    # Obtaining the member 'take' of a type (line 3568)
    take_94723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3568, 11), yp_94722, 'take')
    # Calling take(args, kwargs) (line 3568)
    take_call_result_94728 = invoke(stypy.reporting.localization.Localization(__file__, 3568, 11), take_94723, *[result_add_94726], **kwargs_94727)
    
    # Getting the type of 'sidx' (line 3568)
    sidx_94729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3568, 26), 'sidx')
    # Applying the binary operator '-' (line 3568)
    result_sub_94730 = python_operator(stypy.reporting.localization.Localization(__file__, 3568, 11), '-', take_call_result_94728, sidx_94729)
    
    # Getting the type of 'xi' (line 3568)
    xi_94731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3568, 35), 'xi')
    # Getting the type of 'xidxp1' (line 3568)
    xidxp1_94732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3568, 40), 'xidxp1')
    # Applying the binary operator '-' (line 3568)
    result_sub_94733 = python_operator(stypy.reporting.localization.Localization(__file__, 3568, 35), '-', xi_94731, xidxp1_94732)
    
    # Applying the binary operator '*' (line 3568)
    result_mul_94734 = python_operator(stypy.reporting.localization.Localization(__file__, 3568, 10), '*', result_sub_94730, result_sub_94733)
    
    # Assigning a type to the variable 'dy2' (line 3568)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3568, 4), 'dy2', result_mul_94734)
    
    # Assigning a BinOp to a Name (line 3570):
    
    # Assigning a BinOp to a Name (line 3570):
    
    # Assigning a BinOp to a Name (line 3570):
    # Getting the type of 'dy1' (line 3570)
    dy1_94735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3570, 13), 'dy1')
    # Getting the type of 'dy2' (line 3570)
    dy2_94736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3570, 17), 'dy2')
    # Applying the binary operator '*' (line 3570)
    result_mul_94737 = python_operator(stypy.reporting.localization.Localization(__file__, 3570, 13), '*', dy1_94735, dy2_94736)
    
    # Assigning a type to the variable 'dy1dy2' (line 3570)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3570, 4), 'dy1dy2', result_mul_94737)
    
    # Assigning a BinOp to a Name (line 3575):
    
    # Assigning a BinOp to a Name (line 3575):
    
    # Assigning a BinOp to a Name (line 3575):
    # Getting the type of 'yo' (line 3575)
    yo_94738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 9), 'yo')
    # Getting the type of 'dy1dy2' (line 3575)
    dy1dy2_94739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 14), 'dy1dy2')
    
    # Call to choose(...): (line 3575)
    # Processing the call arguments (line 3575)
    
    # Call to array(...): (line 3575)
    # Processing the call arguments (line 3575)
    
    # Call to sign(...): (line 3575)
    # Processing the call arguments (line 3575)
    # Getting the type of 'dy1dy2' (line 3575)
    dy1dy2_94746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 50), 'dy1dy2', False)
    # Processing the call keyword arguments (line 3575)
    kwargs_94747 = {}
    # Getting the type of 'np' (line 3575)
    np_94744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 42), 'np', False)
    # Obtaining the member 'sign' of a type (line 3575)
    sign_94745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3575, 42), np_94744, 'sign')
    # Calling sign(args, kwargs) (line 3575)
    sign_call_result_94748 = invoke(stypy.reporting.localization.Localization(__file__, 3575, 42), sign_94745, *[dy1dy2_94746], **kwargs_94747)
    
    # Getting the type of 'np' (line 3575)
    np_94749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 59), 'np', False)
    # Obtaining the member 'int32' of a type (line 3575)
    int32_94750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3575, 59), np_94749, 'int32')
    # Processing the call keyword arguments (line 3575)
    kwargs_94751 = {}
    # Getting the type of 'np' (line 3575)
    np_94742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 33), 'np', False)
    # Obtaining the member 'array' of a type (line 3575)
    array_94743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3575, 33), np_94742, 'array')
    # Calling array(args, kwargs) (line 3575)
    array_call_result_94752 = invoke(stypy.reporting.localization.Localization(__file__, 3575, 33), array_94743, *[sign_call_result_94748, int32_94750], **kwargs_94751)
    
    int_94753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3575, 69), 'int')
    # Applying the binary operator '+' (line 3575)
    result_add_94754 = python_operator(stypy.reporting.localization.Localization(__file__, 3575, 33), '+', array_call_result_94752, int_94753)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 3576)
    tuple_94755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3576, 34), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3576)
    # Adding element type (line 3576)
    int_94756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3576, 35), 'int')
    # Getting the type of 'xi' (line 3576)
    xi_94757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3576, 37), 'xi', False)
    # Applying the binary operator '*' (line 3576)
    result_mul_94758 = python_operator(stypy.reporting.localization.Localization(__file__, 3576, 35), '*', int_94756, xi_94757)
    
    # Getting the type of 'xidx' (line 3576)
    xidx_94759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3576, 40), 'xidx', False)
    # Applying the binary operator '-' (line 3576)
    result_sub_94760 = python_operator(stypy.reporting.localization.Localization(__file__, 3576, 35), '-', result_mul_94758, xidx_94759)
    
    # Getting the type of 'xidxp1' (line 3576)
    xidxp1_94761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3576, 45), 'xidxp1', False)
    # Applying the binary operator '-' (line 3576)
    result_sub_94762 = python_operator(stypy.reporting.localization.Localization(__file__, 3576, 44), '-', result_sub_94760, xidxp1_94761)
    
    # Getting the type of 'dy1' (line 3576)
    dy1_94763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3576, 55), 'dy1', False)
    # Getting the type of 'dy2' (line 3576)
    dy2_94764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3576, 59), 'dy2', False)
    # Applying the binary operator '-' (line 3576)
    result_sub_94765 = python_operator(stypy.reporting.localization.Localization(__file__, 3576, 55), '-', dy1_94763, dy2_94764)
    
    # Getting the type of 'xidxp1' (line 3576)
    xidxp1_94766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3576, 65), 'xidxp1', False)
    # Getting the type of 'xidx' (line 3576)
    xidx_94767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3576, 72), 'xidx', False)
    # Applying the binary operator '-' (line 3576)
    result_sub_94768 = python_operator(stypy.reporting.localization.Localization(__file__, 3576, 65), '-', xidxp1_94766, xidx_94767)
    
    # Applying the binary operator '*' (line 3576)
    result_mul_94769 = python_operator(stypy.reporting.localization.Localization(__file__, 3576, 54), '*', result_sub_94765, result_sub_94768)
    
    # Applying the binary operator 'div' (line 3576)
    result_div_94770 = python_operator(stypy.reporting.localization.Localization(__file__, 3576, 34), 'div', result_sub_94762, result_mul_94769)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3576, 34), tuple_94755, result_div_94770)
    # Adding element type (line 3576)
    float_94771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3577, 34), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3576, 34), tuple_94755, float_94771)
    # Adding element type (line 3576)
    int_94772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3578, 34), 'int')
    # Getting the type of 'dy1' (line 3578)
    dy1_94773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3578, 37), 'dy1', False)
    # Getting the type of 'dy2' (line 3578)
    dy2_94774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3578, 41), 'dy2', False)
    # Applying the binary operator '+' (line 3578)
    result_add_94775 = python_operator(stypy.reporting.localization.Localization(__file__, 3578, 37), '+', dy1_94773, dy2_94774)
    
    # Applying the binary operator 'div' (line 3578)
    result_div_94776 = python_operator(stypy.reporting.localization.Localization(__file__, 3578, 34), 'div', int_94772, result_add_94775)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3576, 34), tuple_94755, result_div_94776)
    
    # Processing the call keyword arguments (line 3575)
    kwargs_94777 = {}
    # Getting the type of 'np' (line 3575)
    np_94740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 23), 'np', False)
    # Obtaining the member 'choose' of a type (line 3575)
    choose_94741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3575, 23), np_94740, 'choose')
    # Calling choose(args, kwargs) (line 3575)
    choose_call_result_94778 = invoke(stypy.reporting.localization.Localization(__file__, 3575, 23), choose_94741, *[result_add_94754, tuple_94755], **kwargs_94777)
    
    # Applying the binary operator '*' (line 3575)
    result_mul_94779 = python_operator(stypy.reporting.localization.Localization(__file__, 3575, 14), '*', dy1dy2_94739, choose_call_result_94778)
    
    # Applying the binary operator '+' (line 3575)
    result_add_94780 = python_operator(stypy.reporting.localization.Localization(__file__, 3575, 9), '+', yo_94738, result_mul_94779)
    
    # Assigning a type to the variable 'yi' (line 3575)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3575, 4), 'yi', result_add_94780)
    # Getting the type of 'yi' (line 3579)
    yi_94781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3579, 11), 'yi')
    # Assigning a type to the variable 'stypy_return_type' (line 3579)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3579, 4), 'stypy_return_type', yi_94781)
    
    # ################# End of 'stineman_interp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'stineman_interp' in the type store
    # Getting the type of 'stypy_return_type' (line 3488)
    stypy_return_type_94782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3488, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_94782)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'stineman_interp'
    return stypy_return_type_94782

# Assigning a type to the variable 'stineman_interp' (line 3488)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3488, 0), 'stineman_interp', stineman_interp)
# Declaration of the 'GaussianKDE' class

class GaussianKDE(object, ):
    unicode_94783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3629, (-1)), 'unicode', u"\n    Representation of a kernel-density estimate using Gaussian kernels.\n\n    Parameters\n    ----------\n    dataset : array_like\n        Datapoints to estimate from. In case of univariate data this is a 1-D\n        array, otherwise a 2-D array with shape (# of dims, # of data).\n\n    bw_method : str, scalar or callable, optional\n        The method used to calculate the estimator bandwidth.  This can be\n        'scott', 'silverman', a scalar constant or a callable.  If a\n        scalar, this will be used directly as `kde.factor`.  If a\n        callable, it should take a `GaussianKDE` instance as only\n        parameter and return a scalar. If None (default), 'scott' is used.\n\n    Attributes\n    ----------\n    dataset : ndarray\n        The dataset with which `gaussian_kde` was initialized.\n\n    dim : int\n        Number of dimensions.\n\n    num_dp : int\n        Number of datapoints.\n\n    factor : float\n        The bandwidth factor, obtained from `kde.covariance_factor`, with which\n        the covariance matrix is multiplied.\n\n    covariance : ndarray\n        The covariance matrix of `dataset`, scaled by the calculated bandwidth\n        (`kde.factor`).\n\n    inv_cov : ndarray\n        The inverse of `covariance`.\n\n    Methods\n    -------\n    kde.evaluate(points) : ndarray\n        Evaluate the estimated pdf on a provided set of points.\n\n    kde(points) : ndarray\n        Same as kde.evaluate(points)\n\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3634)
        None_94784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3634, 42), 'None')
        defaults = [None_94784]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 3634, 4, False)
        # Assigning a type to the variable 'self' (line 3635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3635, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GaussianKDE.__init__', ['dataset', 'bw_method'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['dataset', 'bw_method'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 3635):
        
        # Assigning a Call to a Attribute (line 3635):
        
        # Assigning a Call to a Attribute (line 3635):
        
        # Call to atleast_2d(...): (line 3635)
        # Processing the call arguments (line 3635)
        # Getting the type of 'dataset' (line 3635)
        dataset_94787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3635, 37), 'dataset', False)
        # Processing the call keyword arguments (line 3635)
        kwargs_94788 = {}
        # Getting the type of 'np' (line 3635)
        np_94785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3635, 23), 'np', False)
        # Obtaining the member 'atleast_2d' of a type (line 3635)
        atleast_2d_94786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3635, 23), np_94785, 'atleast_2d')
        # Calling atleast_2d(args, kwargs) (line 3635)
        atleast_2d_call_result_94789 = invoke(stypy.reporting.localization.Localization(__file__, 3635, 23), atleast_2d_94786, *[dataset_94787], **kwargs_94788)
        
        # Getting the type of 'self' (line 3635)
        self_94790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3635, 8), 'self')
        # Setting the type of the member 'dataset' of a type (line 3635)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3635, 8), self_94790, 'dataset', atleast_2d_call_result_94789)
        
        
        
        
        # Call to array(...): (line 3636)
        # Processing the call arguments (line 3636)
        # Getting the type of 'self' (line 3636)
        self_94793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3636, 24), 'self', False)
        # Obtaining the member 'dataset' of a type (line 3636)
        dataset_94794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3636, 24), self_94793, 'dataset')
        # Processing the call keyword arguments (line 3636)
        kwargs_94795 = {}
        # Getting the type of 'np' (line 3636)
        np_94791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3636, 15), 'np', False)
        # Obtaining the member 'array' of a type (line 3636)
        array_94792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3636, 15), np_94791, 'array')
        # Calling array(args, kwargs) (line 3636)
        array_call_result_94796 = invoke(stypy.reporting.localization.Localization(__file__, 3636, 15), array_94792, *[dataset_94794], **kwargs_94795)
        
        # Obtaining the member 'size' of a type (line 3636)
        size_94797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3636, 15), array_call_result_94796, 'size')
        int_94798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3636, 45), 'int')
        # Applying the binary operator '>' (line 3636)
        result_gt_94799 = python_operator(stypy.reporting.localization.Localization(__file__, 3636, 15), '>', size_94797, int_94798)
        
        # Applying the 'not' unary operator (line 3636)
        result_not__94800 = python_operator(stypy.reporting.localization.Localization(__file__, 3636, 11), 'not', result_gt_94799)
        
        # Testing the type of an if condition (line 3636)
        if_condition_94801 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3636, 8), result_not__94800)
        # Assigning a type to the variable 'if_condition_94801' (line 3636)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3636, 8), 'if_condition_94801', if_condition_94801)
        # SSA begins for if statement (line 3636)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 3637)
        # Processing the call arguments (line 3637)
        unicode_94803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3637, 29), 'unicode', u'`dataset` input should have multiple elements.')
        # Processing the call keyword arguments (line 3637)
        kwargs_94804 = {}
        # Getting the type of 'ValueError' (line 3637)
        ValueError_94802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3637, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 3637)
        ValueError_call_result_94805 = invoke(stypy.reporting.localization.Localization(__file__, 3637, 18), ValueError_94802, *[unicode_94803], **kwargs_94804)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3637, 12), ValueError_call_result_94805, 'raise parameter', BaseException)
        # SSA join for if statement (line 3636)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Tuple (line 3639):
        
        # Assigning a Subscript to a Name (line 3639):
        
        # Assigning a Subscript to a Name (line 3639):
        
        # Obtaining the type of the subscript
        int_94806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3639, 8), 'int')
        
        # Call to array(...): (line 3639)
        # Processing the call arguments (line 3639)
        # Getting the type of 'self' (line 3639)
        self_94809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 41), 'self', False)
        # Obtaining the member 'dataset' of a type (line 3639)
        dataset_94810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3639, 41), self_94809, 'dataset')
        # Processing the call keyword arguments (line 3639)
        kwargs_94811 = {}
        # Getting the type of 'np' (line 3639)
        np_94807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 32), 'np', False)
        # Obtaining the member 'array' of a type (line 3639)
        array_94808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3639, 32), np_94807, 'array')
        # Calling array(args, kwargs) (line 3639)
        array_call_result_94812 = invoke(stypy.reporting.localization.Localization(__file__, 3639, 32), array_94808, *[dataset_94810], **kwargs_94811)
        
        # Obtaining the member 'shape' of a type (line 3639)
        shape_94813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3639, 32), array_call_result_94812, 'shape')
        # Obtaining the member '__getitem__' of a type (line 3639)
        getitem___94814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3639, 8), shape_94813, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3639)
        subscript_call_result_94815 = invoke(stypy.reporting.localization.Localization(__file__, 3639, 8), getitem___94814, int_94806)
        
        # Assigning a type to the variable 'tuple_var_assignment_87303' (line 3639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3639, 8), 'tuple_var_assignment_87303', subscript_call_result_94815)
        
        # Assigning a Subscript to a Name (line 3639):
        
        # Assigning a Subscript to a Name (line 3639):
        
        # Obtaining the type of the subscript
        int_94816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3639, 8), 'int')
        
        # Call to array(...): (line 3639)
        # Processing the call arguments (line 3639)
        # Getting the type of 'self' (line 3639)
        self_94819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 41), 'self', False)
        # Obtaining the member 'dataset' of a type (line 3639)
        dataset_94820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3639, 41), self_94819, 'dataset')
        # Processing the call keyword arguments (line 3639)
        kwargs_94821 = {}
        # Getting the type of 'np' (line 3639)
        np_94817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 32), 'np', False)
        # Obtaining the member 'array' of a type (line 3639)
        array_94818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3639, 32), np_94817, 'array')
        # Calling array(args, kwargs) (line 3639)
        array_call_result_94822 = invoke(stypy.reporting.localization.Localization(__file__, 3639, 32), array_94818, *[dataset_94820], **kwargs_94821)
        
        # Obtaining the member 'shape' of a type (line 3639)
        shape_94823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3639, 32), array_call_result_94822, 'shape')
        # Obtaining the member '__getitem__' of a type (line 3639)
        getitem___94824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3639, 8), shape_94823, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3639)
        subscript_call_result_94825 = invoke(stypy.reporting.localization.Localization(__file__, 3639, 8), getitem___94824, int_94816)
        
        # Assigning a type to the variable 'tuple_var_assignment_87304' (line 3639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3639, 8), 'tuple_var_assignment_87304', subscript_call_result_94825)
        
        # Assigning a Name to a Attribute (line 3639):
        
        # Assigning a Name to a Attribute (line 3639):
        # Getting the type of 'tuple_var_assignment_87303' (line 3639)
        tuple_var_assignment_87303_94826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 8), 'tuple_var_assignment_87303')
        # Getting the type of 'self' (line 3639)
        self_94827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 8), 'self')
        # Setting the type of the member 'dim' of a type (line 3639)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3639, 8), self_94827, 'dim', tuple_var_assignment_87303_94826)
        
        # Assigning a Name to a Attribute (line 3639):
        
        # Assigning a Name to a Attribute (line 3639):
        # Getting the type of 'tuple_var_assignment_87304' (line 3639)
        tuple_var_assignment_87304_94828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 8), 'tuple_var_assignment_87304')
        # Getting the type of 'self' (line 3639)
        self_94829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 18), 'self')
        # Setting the type of the member 'num_dp' of a type (line 3639)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3639, 18), self_94829, 'num_dp', tuple_var_assignment_87304_94828)
        
        # Assigning a Call to a Name (line 3640):
        
        # Assigning a Call to a Name (line 3640):
        
        # Assigning a Call to a Name (line 3640):
        
        # Call to isinstance(...): (line 3640)
        # Processing the call arguments (line 3640)
        # Getting the type of 'bw_method' (line 3640)
        bw_method_94831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3640, 30), 'bw_method', False)
        # Getting the type of 'six' (line 3640)
        six_94832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3640, 41), 'six', False)
        # Obtaining the member 'string_types' of a type (line 3640)
        string_types_94833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3640, 41), six_94832, 'string_types')
        # Processing the call keyword arguments (line 3640)
        kwargs_94834 = {}
        # Getting the type of 'isinstance' (line 3640)
        isinstance_94830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3640, 19), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 3640)
        isinstance_call_result_94835 = invoke(stypy.reporting.localization.Localization(__file__, 3640, 19), isinstance_94830, *[bw_method_94831, string_types_94833], **kwargs_94834)
        
        # Assigning a type to the variable 'isString' (line 3640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3640, 8), 'isString', isinstance_call_result_94835)
        
        # Type idiom detected: calculating its left and rigth part (line 3642)
        # Getting the type of 'bw_method' (line 3642)
        bw_method_94836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3642, 11), 'bw_method')
        # Getting the type of 'None' (line 3642)
        None_94837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3642, 24), 'None')
        
        (may_be_94838, more_types_in_union_94839) = may_be_none(bw_method_94836, None_94837)

        if may_be_94838:

            if more_types_in_union_94839:
                # Runtime conditional SSA (line 3642)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            pass

            if more_types_in_union_94839:
                # Runtime conditional SSA for else branch (line 3642)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_94838) or more_types_in_union_94839):
            
            
            # Evaluating a boolean operation
            # Getting the type of 'isString' (line 3644)
            isString_94840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3644, 14), 'isString')
            
            # Getting the type of 'bw_method' (line 3644)
            bw_method_94841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3644, 27), 'bw_method')
            unicode_94842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3644, 40), 'unicode', u'scott')
            # Applying the binary operator '==' (line 3644)
            result_eq_94843 = python_operator(stypy.reporting.localization.Localization(__file__, 3644, 27), '==', bw_method_94841, unicode_94842)
            
            # Applying the binary operator 'and' (line 3644)
            result_and_keyword_94844 = python_operator(stypy.reporting.localization.Localization(__file__, 3644, 14), 'and', isString_94840, result_eq_94843)
            
            # Testing the type of an if condition (line 3644)
            if_condition_94845 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3644, 13), result_and_keyword_94844)
            # Assigning a type to the variable 'if_condition_94845' (line 3644)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3644, 13), 'if_condition_94845', if_condition_94845)
            # SSA begins for if statement (line 3644)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Attribute to a Attribute (line 3645):
            
            # Assigning a Attribute to a Attribute (line 3645):
            
            # Assigning a Attribute to a Attribute (line 3645):
            # Getting the type of 'self' (line 3645)
            self_94846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3645, 37), 'self')
            # Obtaining the member 'scotts_factor' of a type (line 3645)
            scotts_factor_94847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3645, 37), self_94846, 'scotts_factor')
            # Getting the type of 'self' (line 3645)
            self_94848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3645, 12), 'self')
            # Setting the type of the member 'covariance_factor' of a type (line 3645)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3645, 12), self_94848, 'covariance_factor', scotts_factor_94847)
            # SSA branch for the else part of an if statement (line 3644)
            module_type_store.open_ssa_branch('else')
            
            
            # Evaluating a boolean operation
            # Getting the type of 'isString' (line 3646)
            isString_94849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3646, 14), 'isString')
            
            # Getting the type of 'bw_method' (line 3646)
            bw_method_94850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3646, 27), 'bw_method')
            unicode_94851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3646, 40), 'unicode', u'silverman')
            # Applying the binary operator '==' (line 3646)
            result_eq_94852 = python_operator(stypy.reporting.localization.Localization(__file__, 3646, 27), '==', bw_method_94850, unicode_94851)
            
            # Applying the binary operator 'and' (line 3646)
            result_and_keyword_94853 = python_operator(stypy.reporting.localization.Localization(__file__, 3646, 14), 'and', isString_94849, result_eq_94852)
            
            # Testing the type of an if condition (line 3646)
            if_condition_94854 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3646, 13), result_and_keyword_94853)
            # Assigning a type to the variable 'if_condition_94854' (line 3646)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3646, 13), 'if_condition_94854', if_condition_94854)
            # SSA begins for if statement (line 3646)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Attribute to a Attribute (line 3647):
            
            # Assigning a Attribute to a Attribute (line 3647):
            
            # Assigning a Attribute to a Attribute (line 3647):
            # Getting the type of 'self' (line 3647)
            self_94855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3647, 37), 'self')
            # Obtaining the member 'silverman_factor' of a type (line 3647)
            silverman_factor_94856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3647, 37), self_94855, 'silverman_factor')
            # Getting the type of 'self' (line 3647)
            self_94857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3647, 12), 'self')
            # Setting the type of the member 'covariance_factor' of a type (line 3647)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3647, 12), self_94857, 'covariance_factor', silverman_factor_94856)
            # SSA branch for the else part of an if statement (line 3646)
            module_type_store.open_ssa_branch('else')
            
            
            # Evaluating a boolean operation
            
            # Call to isscalar(...): (line 3648)
            # Processing the call arguments (line 3648)
            # Getting the type of 'bw_method' (line 3648)
            bw_method_94860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3648, 26), 'bw_method', False)
            # Processing the call keyword arguments (line 3648)
            kwargs_94861 = {}
            # Getting the type of 'np' (line 3648)
            np_94858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3648, 14), 'np', False)
            # Obtaining the member 'isscalar' of a type (line 3648)
            isscalar_94859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3648, 14), np_94858, 'isscalar')
            # Calling isscalar(args, kwargs) (line 3648)
            isscalar_call_result_94862 = invoke(stypy.reporting.localization.Localization(__file__, 3648, 14), isscalar_94859, *[bw_method_94860], **kwargs_94861)
            
            
            # Getting the type of 'isString' (line 3648)
            isString_94863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3648, 45), 'isString')
            # Applying the 'not' unary operator (line 3648)
            result_not__94864 = python_operator(stypy.reporting.localization.Localization(__file__, 3648, 41), 'not', isString_94863)
            
            # Applying the binary operator 'and' (line 3648)
            result_and_keyword_94865 = python_operator(stypy.reporting.localization.Localization(__file__, 3648, 14), 'and', isscalar_call_result_94862, result_not__94864)
            
            # Testing the type of an if condition (line 3648)
            if_condition_94866 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3648, 13), result_and_keyword_94865)
            # Assigning a type to the variable 'if_condition_94866' (line 3648)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3648, 13), 'if_condition_94866', if_condition_94866)
            # SSA begins for if statement (line 3648)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Str to a Attribute (line 3649):
            
            # Assigning a Str to a Attribute (line 3649):
            
            # Assigning a Str to a Attribute (line 3649):
            unicode_94867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3649, 34), 'unicode', u'use constant')
            # Getting the type of 'self' (line 3649)
            self_94868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3649, 16), 'self')
            # Setting the type of the member '_bw_method' of a type (line 3649)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3649, 16), self_94868, '_bw_method', unicode_94867)
            
            # Assigning a Lambda to a Attribute (line 3650):
            
            # Assigning a Lambda to a Attribute (line 3650):
            
            # Assigning a Lambda to a Attribute (line 3650):

            @norecursion
            def _stypy_temp_lambda_19(localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function '_stypy_temp_lambda_19'
                module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_19', 3650, 41, True)
                # Passed parameters checking function
                _stypy_temp_lambda_19.stypy_localization = localization
                _stypy_temp_lambda_19.stypy_type_of_self = None
                _stypy_temp_lambda_19.stypy_type_store = module_type_store
                _stypy_temp_lambda_19.stypy_function_name = '_stypy_temp_lambda_19'
                _stypy_temp_lambda_19.stypy_param_names_list = []
                _stypy_temp_lambda_19.stypy_varargs_param_name = None
                _stypy_temp_lambda_19.stypy_kwargs_param_name = None
                _stypy_temp_lambda_19.stypy_call_defaults = defaults
                _stypy_temp_lambda_19.stypy_call_varargs = varargs
                _stypy_temp_lambda_19.stypy_call_kwargs = kwargs
                arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_19', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Stacktrace push for error reporting
                localization.set_stack_trace('_stypy_temp_lambda_19', [], arguments)
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of the lambda function code ##################

                # Getting the type of 'bw_method' (line 3650)
                bw_method_94869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3650, 49), 'bw_method')
                # Assigning the return type of the lambda function
                # Assigning a type to the variable 'stypy_return_type' (line 3650)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3650, 41), 'stypy_return_type', bw_method_94869)
                
                # ################# End of the lambda function code ##################

                # Stacktrace pop (error reporting)
                localization.unset_stack_trace()
                
                # Storing the return type of function '_stypy_temp_lambda_19' in the type store
                # Getting the type of 'stypy_return_type' (line 3650)
                stypy_return_type_94870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3650, 41), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_94870)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function '_stypy_temp_lambda_19'
                return stypy_return_type_94870

            # Assigning a type to the variable '_stypy_temp_lambda_19' (line 3650)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3650, 41), '_stypy_temp_lambda_19', _stypy_temp_lambda_19)
            # Getting the type of '_stypy_temp_lambda_19' (line 3650)
            _stypy_temp_lambda_19_94871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3650, 41), '_stypy_temp_lambda_19')
            # Getting the type of 'self' (line 3650)
            self_94872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3650, 16), 'self')
            # Setting the type of the member 'covariance_factor' of a type (line 3650)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3650, 16), self_94872, 'covariance_factor', _stypy_temp_lambda_19_94871)
            # SSA branch for the else part of an if statement (line 3648)
            module_type_store.open_ssa_branch('else')
            
            
            # Call to callable(...): (line 3651)
            # Processing the call arguments (line 3651)
            # Getting the type of 'bw_method' (line 3651)
            bw_method_94874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3651, 22), 'bw_method', False)
            # Processing the call keyword arguments (line 3651)
            kwargs_94875 = {}
            # Getting the type of 'callable' (line 3651)
            callable_94873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3651, 13), 'callable', False)
            # Calling callable(args, kwargs) (line 3651)
            callable_call_result_94876 = invoke(stypy.reporting.localization.Localization(__file__, 3651, 13), callable_94873, *[bw_method_94874], **kwargs_94875)
            
            # Testing the type of an if condition (line 3651)
            if_condition_94877 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3651, 13), callable_call_result_94876)
            # Assigning a type to the variable 'if_condition_94877' (line 3651)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3651, 13), 'if_condition_94877', if_condition_94877)
            # SSA begins for if statement (line 3651)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Attribute (line 3652):
            
            # Assigning a Name to a Attribute (line 3652):
            
            # Assigning a Name to a Attribute (line 3652):
            # Getting the type of 'bw_method' (line 3652)
            bw_method_94878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3652, 30), 'bw_method')
            # Getting the type of 'self' (line 3652)
            self_94879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3652, 12), 'self')
            # Setting the type of the member '_bw_method' of a type (line 3652)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3652, 12), self_94879, '_bw_method', bw_method_94878)
            
            # Assigning a Lambda to a Attribute (line 3653):
            
            # Assigning a Lambda to a Attribute (line 3653):
            
            # Assigning a Lambda to a Attribute (line 3653):

            @norecursion
            def _stypy_temp_lambda_20(localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function '_stypy_temp_lambda_20'
                module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_20', 3653, 37, True)
                # Passed parameters checking function
                _stypy_temp_lambda_20.stypy_localization = localization
                _stypy_temp_lambda_20.stypy_type_of_self = None
                _stypy_temp_lambda_20.stypy_type_store = module_type_store
                _stypy_temp_lambda_20.stypy_function_name = '_stypy_temp_lambda_20'
                _stypy_temp_lambda_20.stypy_param_names_list = []
                _stypy_temp_lambda_20.stypy_varargs_param_name = None
                _stypy_temp_lambda_20.stypy_kwargs_param_name = None
                _stypy_temp_lambda_20.stypy_call_defaults = defaults
                _stypy_temp_lambda_20.stypy_call_varargs = varargs
                _stypy_temp_lambda_20.stypy_call_kwargs = kwargs
                arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_20', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Stacktrace push for error reporting
                localization.set_stack_trace('_stypy_temp_lambda_20', [], arguments)
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of the lambda function code ##################

                
                # Call to _bw_method(...): (line 3653)
                # Processing the call arguments (line 3653)
                # Getting the type of 'self' (line 3653)
                self_94882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3653, 61), 'self', False)
                # Processing the call keyword arguments (line 3653)
                kwargs_94883 = {}
                # Getting the type of 'self' (line 3653)
                self_94880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3653, 45), 'self', False)
                # Obtaining the member '_bw_method' of a type (line 3653)
                _bw_method_94881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3653, 45), self_94880, '_bw_method')
                # Calling _bw_method(args, kwargs) (line 3653)
                _bw_method_call_result_94884 = invoke(stypy.reporting.localization.Localization(__file__, 3653, 45), _bw_method_94881, *[self_94882], **kwargs_94883)
                
                # Assigning the return type of the lambda function
                # Assigning a type to the variable 'stypy_return_type' (line 3653)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3653, 37), 'stypy_return_type', _bw_method_call_result_94884)
                
                # ################# End of the lambda function code ##################

                # Stacktrace pop (error reporting)
                localization.unset_stack_trace()
                
                # Storing the return type of function '_stypy_temp_lambda_20' in the type store
                # Getting the type of 'stypy_return_type' (line 3653)
                stypy_return_type_94885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3653, 37), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_94885)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function '_stypy_temp_lambda_20'
                return stypy_return_type_94885

            # Assigning a type to the variable '_stypy_temp_lambda_20' (line 3653)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3653, 37), '_stypy_temp_lambda_20', _stypy_temp_lambda_20)
            # Getting the type of '_stypy_temp_lambda_20' (line 3653)
            _stypy_temp_lambda_20_94886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3653, 37), '_stypy_temp_lambda_20')
            # Getting the type of 'self' (line 3653)
            self_94887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3653, 12), 'self')
            # Setting the type of the member 'covariance_factor' of a type (line 3653)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3653, 12), self_94887, 'covariance_factor', _stypy_temp_lambda_20_94886)
            # SSA branch for the else part of an if statement (line 3651)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Str to a Name (line 3655):
            
            # Assigning a Str to a Name (line 3655):
            
            # Assigning a Str to a Name (line 3655):
            unicode_94888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3655, 18), 'unicode', u"`bw_method` should be 'scott', 'silverman', a scalar or a callable.")
            # Assigning a type to the variable 'msg' (line 3655)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3655, 12), 'msg', unicode_94888)
            
            # Call to ValueError(...): (line 3657)
            # Processing the call arguments (line 3657)
            # Getting the type of 'msg' (line 3657)
            msg_94890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3657, 29), 'msg', False)
            # Processing the call keyword arguments (line 3657)
            kwargs_94891 = {}
            # Getting the type of 'ValueError' (line 3657)
            ValueError_94889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3657, 18), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 3657)
            ValueError_call_result_94892 = invoke(stypy.reporting.localization.Localization(__file__, 3657, 18), ValueError_94889, *[msg_94890], **kwargs_94891)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3657, 12), ValueError_call_result_94892, 'raise parameter', BaseException)
            # SSA join for if statement (line 3651)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 3648)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 3646)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 3644)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_94838 and more_types_in_union_94839):
                # SSA join for if statement (line 3642)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 3662):
        
        # Assigning a Call to a Attribute (line 3662):
        
        # Assigning a Call to a Attribute (line 3662):
        
        # Call to covariance_factor(...): (line 3662)
        # Processing the call keyword arguments (line 3662)
        kwargs_94895 = {}
        # Getting the type of 'self' (line 3662)
        self_94893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3662, 22), 'self', False)
        # Obtaining the member 'covariance_factor' of a type (line 3662)
        covariance_factor_94894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3662, 22), self_94893, 'covariance_factor')
        # Calling covariance_factor(args, kwargs) (line 3662)
        covariance_factor_call_result_94896 = invoke(stypy.reporting.localization.Localization(__file__, 3662, 22), covariance_factor_94894, *[], **kwargs_94895)
        
        # Getting the type of 'self' (line 3662)
        self_94897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3662, 8), 'self')
        # Setting the type of the member 'factor' of a type (line 3662)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3662, 8), self_94897, 'factor', covariance_factor_call_result_94896)
        
        # Type idiom detected: calculating its left and rigth part (line 3664)
        unicode_94898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3664, 29), 'unicode', u'_data_inv_cov')
        # Getting the type of 'self' (line 3664)
        self_94899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3664, 23), 'self')
        
        (may_be_94900, more_types_in_union_94901) = may_not_provide_member(unicode_94898, self_94899)

        if may_be_94900:

            if more_types_in_union_94901:
                # Runtime conditional SSA (line 3664)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 3664)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3664, 8), 'self', remove_member_provider_from_union(self_94899, u'_data_inv_cov'))
            
            # Assigning a Call to a Attribute (line 3665):
            
            # Assigning a Call to a Attribute (line 3665):
            
            # Assigning a Call to a Attribute (line 3665):
            
            # Call to atleast_2d(...): (line 3665)
            # Processing the call arguments (line 3665)
            
            # Call to cov(...): (line 3666)
            # Processing the call arguments (line 3666)
            # Getting the type of 'self' (line 3667)
            self_94906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3667, 20), 'self', False)
            # Obtaining the member 'dataset' of a type (line 3667)
            dataset_94907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3667, 20), self_94906, 'dataset')
            # Processing the call keyword arguments (line 3666)
            int_94908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3668, 27), 'int')
            keyword_94909 = int_94908
            # Getting the type of 'False' (line 3669)
            False_94910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3669, 25), 'False', False)
            keyword_94911 = False_94910
            kwargs_94912 = {'rowvar': keyword_94909, 'bias': keyword_94911}
            # Getting the type of 'np' (line 3666)
            np_94904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3666, 16), 'np', False)
            # Obtaining the member 'cov' of a type (line 3666)
            cov_94905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3666, 16), np_94904, 'cov')
            # Calling cov(args, kwargs) (line 3666)
            cov_call_result_94913 = invoke(stypy.reporting.localization.Localization(__file__, 3666, 16), cov_94905, *[dataset_94907], **kwargs_94912)
            
            # Processing the call keyword arguments (line 3665)
            kwargs_94914 = {}
            # Getting the type of 'np' (line 3665)
            np_94902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3665, 35), 'np', False)
            # Obtaining the member 'atleast_2d' of a type (line 3665)
            atleast_2d_94903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3665, 35), np_94902, 'atleast_2d')
            # Calling atleast_2d(args, kwargs) (line 3665)
            atleast_2d_call_result_94915 = invoke(stypy.reporting.localization.Localization(__file__, 3665, 35), atleast_2d_94903, *[cov_call_result_94913], **kwargs_94914)
            
            # Getting the type of 'self' (line 3665)
            self_94916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3665, 12), 'self')
            # Setting the type of the member 'data_covariance' of a type (line 3665)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3665, 12), self_94916, 'data_covariance', atleast_2d_call_result_94915)
            
            # Assigning a Call to a Attribute (line 3670):
            
            # Assigning a Call to a Attribute (line 3670):
            
            # Assigning a Call to a Attribute (line 3670):
            
            # Call to inv(...): (line 3670)
            # Processing the call arguments (line 3670)
            # Getting the type of 'self' (line 3670)
            self_94920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3670, 46), 'self', False)
            # Obtaining the member 'data_covariance' of a type (line 3670)
            data_covariance_94921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3670, 46), self_94920, 'data_covariance')
            # Processing the call keyword arguments (line 3670)
            kwargs_94922 = {}
            # Getting the type of 'np' (line 3670)
            np_94917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3670, 32), 'np', False)
            # Obtaining the member 'linalg' of a type (line 3670)
            linalg_94918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3670, 32), np_94917, 'linalg')
            # Obtaining the member 'inv' of a type (line 3670)
            inv_94919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3670, 32), linalg_94918, 'inv')
            # Calling inv(args, kwargs) (line 3670)
            inv_call_result_94923 = invoke(stypy.reporting.localization.Localization(__file__, 3670, 32), inv_94919, *[data_covariance_94921], **kwargs_94922)
            
            # Getting the type of 'self' (line 3670)
            self_94924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3670, 12), 'self')
            # Setting the type of the member 'data_inv_cov' of a type (line 3670)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3670, 12), self_94924, 'data_inv_cov', inv_call_result_94923)

            if more_types_in_union_94901:
                # SSA join for if statement (line 3664)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a BinOp to a Attribute (line 3672):
        
        # Assigning a BinOp to a Attribute (line 3672):
        
        # Assigning a BinOp to a Attribute (line 3672):
        # Getting the type of 'self' (line 3672)
        self_94925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3672, 26), 'self')
        # Obtaining the member 'data_covariance' of a type (line 3672)
        data_covariance_94926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3672, 26), self_94925, 'data_covariance')
        # Getting the type of 'self' (line 3672)
        self_94927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3672, 49), 'self')
        # Obtaining the member 'factor' of a type (line 3672)
        factor_94928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3672, 49), self_94927, 'factor')
        int_94929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3672, 64), 'int')
        # Applying the binary operator '**' (line 3672)
        result_pow_94930 = python_operator(stypy.reporting.localization.Localization(__file__, 3672, 49), '**', factor_94928, int_94929)
        
        # Applying the binary operator '*' (line 3672)
        result_mul_94931 = python_operator(stypy.reporting.localization.Localization(__file__, 3672, 26), '*', data_covariance_94926, result_pow_94930)
        
        # Getting the type of 'self' (line 3672)
        self_94932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3672, 8), 'self')
        # Setting the type of the member 'covariance' of a type (line 3672)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3672, 8), self_94932, 'covariance', result_mul_94931)
        
        # Assigning a BinOp to a Attribute (line 3673):
        
        # Assigning a BinOp to a Attribute (line 3673):
        
        # Assigning a BinOp to a Attribute (line 3673):
        # Getting the type of 'self' (line 3673)
        self_94933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3673, 23), 'self')
        # Obtaining the member 'data_inv_cov' of a type (line 3673)
        data_inv_cov_94934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3673, 23), self_94933, 'data_inv_cov')
        # Getting the type of 'self' (line 3673)
        self_94935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3673, 43), 'self')
        # Obtaining the member 'factor' of a type (line 3673)
        factor_94936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3673, 43), self_94935, 'factor')
        int_94937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3673, 58), 'int')
        # Applying the binary operator '**' (line 3673)
        result_pow_94938 = python_operator(stypy.reporting.localization.Localization(__file__, 3673, 43), '**', factor_94936, int_94937)
        
        # Applying the binary operator 'div' (line 3673)
        result_div_94939 = python_operator(stypy.reporting.localization.Localization(__file__, 3673, 23), 'div', data_inv_cov_94934, result_pow_94938)
        
        # Getting the type of 'self' (line 3673)
        self_94940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3673, 8), 'self')
        # Setting the type of the member 'inv_cov' of a type (line 3673)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3673, 8), self_94940, 'inv_cov', result_div_94939)
        
        # Assigning a BinOp to a Attribute (line 3674):
        
        # Assigning a BinOp to a Attribute (line 3674):
        
        # Assigning a BinOp to a Attribute (line 3674):
        
        # Call to sqrt(...): (line 3674)
        # Processing the call arguments (line 3674)
        
        # Call to det(...): (line 3675)
        # Processing the call arguments (line 3675)
        int_94946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3676, 16), 'int')
        # Getting the type of 'np' (line 3676)
        np_94947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3676, 20), 'np', False)
        # Obtaining the member 'pi' of a type (line 3676)
        pi_94948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3676, 20), np_94947, 'pi')
        # Applying the binary operator '*' (line 3676)
        result_mul_94949 = python_operator(stypy.reporting.localization.Localization(__file__, 3676, 16), '*', int_94946, pi_94948)
        
        # Getting the type of 'self' (line 3676)
        self_94950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3676, 28), 'self', False)
        # Obtaining the member 'covariance' of a type (line 3676)
        covariance_94951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3676, 28), self_94950, 'covariance')
        # Applying the binary operator '*' (line 3676)
        result_mul_94952 = python_operator(stypy.reporting.localization.Localization(__file__, 3676, 26), '*', result_mul_94949, covariance_94951)
        
        # Processing the call keyword arguments (line 3675)
        kwargs_94953 = {}
        # Getting the type of 'np' (line 3675)
        np_94943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3675, 12), 'np', False)
        # Obtaining the member 'linalg' of a type (line 3675)
        linalg_94944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3675, 12), np_94943, 'linalg')
        # Obtaining the member 'det' of a type (line 3675)
        det_94945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3675, 12), linalg_94944, 'det')
        # Calling det(args, kwargs) (line 3675)
        det_call_result_94954 = invoke(stypy.reporting.localization.Localization(__file__, 3675, 12), det_94945, *[result_mul_94952], **kwargs_94953)
        
        # Processing the call keyword arguments (line 3674)
        kwargs_94955 = {}
        # Getting the type of 'np' (line 3674)
        np_94941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3674, 27), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 3674)
        sqrt_94942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3674, 27), np_94941, 'sqrt')
        # Calling sqrt(args, kwargs) (line 3674)
        sqrt_call_result_94956 = invoke(stypy.reporting.localization.Localization(__file__, 3674, 27), sqrt_94942, *[det_call_result_94954], **kwargs_94955)
        
        # Getting the type of 'self' (line 3676)
        self_94957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3676, 48), 'self')
        # Obtaining the member 'num_dp' of a type (line 3676)
        num_dp_94958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3676, 48), self_94957, 'num_dp')
        # Applying the binary operator '*' (line 3674)
        result_mul_94959 = python_operator(stypy.reporting.localization.Localization(__file__, 3674, 27), '*', sqrt_call_result_94956, num_dp_94958)
        
        # Getting the type of 'self' (line 3674)
        self_94960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3674, 8), 'self')
        # Setting the type of the member 'norm_factor' of a type (line 3674)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3674, 8), self_94960, 'norm_factor', result_mul_94959)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def scotts_factor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'scotts_factor'
        module_type_store = module_type_store.open_function_context('scotts_factor', 3678, 4, False)
        # Assigning a type to the variable 'self' (line 3679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3679, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GaussianKDE.scotts_factor.__dict__.__setitem__('stypy_localization', localization)
        GaussianKDE.scotts_factor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GaussianKDE.scotts_factor.__dict__.__setitem__('stypy_type_store', module_type_store)
        GaussianKDE.scotts_factor.__dict__.__setitem__('stypy_function_name', 'GaussianKDE.scotts_factor')
        GaussianKDE.scotts_factor.__dict__.__setitem__('stypy_param_names_list', [])
        GaussianKDE.scotts_factor.__dict__.__setitem__('stypy_varargs_param_name', None)
        GaussianKDE.scotts_factor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GaussianKDE.scotts_factor.__dict__.__setitem__('stypy_call_defaults', defaults)
        GaussianKDE.scotts_factor.__dict__.__setitem__('stypy_call_varargs', varargs)
        GaussianKDE.scotts_factor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GaussianKDE.scotts_factor.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GaussianKDE.scotts_factor', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'scotts_factor', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'scotts_factor(...)' code ##################

        
        # Call to power(...): (line 3679)
        # Processing the call arguments (line 3679)
        # Getting the type of 'self' (line 3679)
        self_94963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3679, 24), 'self', False)
        # Obtaining the member 'num_dp' of a type (line 3679)
        num_dp_94964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3679, 24), self_94963, 'num_dp')
        float_94965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3679, 37), 'float')
        # Getting the type of 'self' (line 3679)
        self_94966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3679, 44), 'self', False)
        # Obtaining the member 'dim' of a type (line 3679)
        dim_94967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3679, 44), self_94966, 'dim')
        int_94968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3679, 55), 'int')
        # Applying the binary operator '+' (line 3679)
        result_add_94969 = python_operator(stypy.reporting.localization.Localization(__file__, 3679, 44), '+', dim_94967, int_94968)
        
        # Applying the binary operator 'div' (line 3679)
        result_div_94970 = python_operator(stypy.reporting.localization.Localization(__file__, 3679, 37), 'div', float_94965, result_add_94969)
        
        # Processing the call keyword arguments (line 3679)
        kwargs_94971 = {}
        # Getting the type of 'np' (line 3679)
        np_94961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3679, 15), 'np', False)
        # Obtaining the member 'power' of a type (line 3679)
        power_94962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3679, 15), np_94961, 'power')
        # Calling power(args, kwargs) (line 3679)
        power_call_result_94972 = invoke(stypy.reporting.localization.Localization(__file__, 3679, 15), power_94962, *[num_dp_94964, result_div_94970], **kwargs_94971)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3679, 8), 'stypy_return_type', power_call_result_94972)
        
        # ################# End of 'scotts_factor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'scotts_factor' in the type store
        # Getting the type of 'stypy_return_type' (line 3678)
        stypy_return_type_94973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3678, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_94973)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'scotts_factor'
        return stypy_return_type_94973


    @norecursion
    def silverman_factor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'silverman_factor'
        module_type_store = module_type_store.open_function_context('silverman_factor', 3681, 4, False)
        # Assigning a type to the variable 'self' (line 3682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3682, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GaussianKDE.silverman_factor.__dict__.__setitem__('stypy_localization', localization)
        GaussianKDE.silverman_factor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GaussianKDE.silverman_factor.__dict__.__setitem__('stypy_type_store', module_type_store)
        GaussianKDE.silverman_factor.__dict__.__setitem__('stypy_function_name', 'GaussianKDE.silverman_factor')
        GaussianKDE.silverman_factor.__dict__.__setitem__('stypy_param_names_list', [])
        GaussianKDE.silverman_factor.__dict__.__setitem__('stypy_varargs_param_name', None)
        GaussianKDE.silverman_factor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GaussianKDE.silverman_factor.__dict__.__setitem__('stypy_call_defaults', defaults)
        GaussianKDE.silverman_factor.__dict__.__setitem__('stypy_call_varargs', varargs)
        GaussianKDE.silverman_factor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GaussianKDE.silverman_factor.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GaussianKDE.silverman_factor', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'silverman_factor', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'silverman_factor(...)' code ##################

        
        # Call to power(...): (line 3682)
        # Processing the call arguments (line 3682)
        # Getting the type of 'self' (line 3683)
        self_94976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3683, 12), 'self', False)
        # Obtaining the member 'num_dp' of a type (line 3683)
        num_dp_94977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3683, 12), self_94976, 'num_dp')
        # Getting the type of 'self' (line 3683)
        self_94978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3683, 27), 'self', False)
        # Obtaining the member 'dim' of a type (line 3683)
        dim_94979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3683, 27), self_94978, 'dim')
        float_94980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3683, 38), 'float')
        # Applying the binary operator '+' (line 3683)
        result_add_94981 = python_operator(stypy.reporting.localization.Localization(__file__, 3683, 27), '+', dim_94979, float_94980)
        
        # Applying the binary operator '*' (line 3683)
        result_mul_94982 = python_operator(stypy.reporting.localization.Localization(__file__, 3683, 12), '*', num_dp_94977, result_add_94981)
        
        float_94983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3683, 45), 'float')
        # Applying the binary operator 'div' (line 3683)
        result_div_94984 = python_operator(stypy.reporting.localization.Localization(__file__, 3683, 43), 'div', result_mul_94982, float_94983)
        
        float_94985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3683, 50), 'float')
        # Getting the type of 'self' (line 3683)
        self_94986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3683, 57), 'self', False)
        # Obtaining the member 'dim' of a type (line 3683)
        dim_94987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3683, 57), self_94986, 'dim')
        int_94988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3683, 68), 'int')
        # Applying the binary operator '+' (line 3683)
        result_add_94989 = python_operator(stypy.reporting.localization.Localization(__file__, 3683, 57), '+', dim_94987, int_94988)
        
        # Applying the binary operator 'div' (line 3683)
        result_div_94990 = python_operator(stypy.reporting.localization.Localization(__file__, 3683, 50), 'div', float_94985, result_add_94989)
        
        # Processing the call keyword arguments (line 3682)
        kwargs_94991 = {}
        # Getting the type of 'np' (line 3682)
        np_94974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3682, 15), 'np', False)
        # Obtaining the member 'power' of a type (line 3682)
        power_94975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3682, 15), np_94974, 'power')
        # Calling power(args, kwargs) (line 3682)
        power_call_result_94992 = invoke(stypy.reporting.localization.Localization(__file__, 3682, 15), power_94975, *[result_div_94984, result_div_94990], **kwargs_94991)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3682, 8), 'stypy_return_type', power_call_result_94992)
        
        # ################# End of 'silverman_factor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'silverman_factor' in the type store
        # Getting the type of 'stypy_return_type' (line 3681)
        stypy_return_type_94993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3681, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_94993)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'silverman_factor'
        return stypy_return_type_94993

    
    # Assigning a Name to a Name (line 3686):
    
    # Assigning a Name to a Name (line 3686):

    @norecursion
    def evaluate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'evaluate'
        module_type_store = module_type_store.open_function_context('evaluate', 3688, 4, False)
        # Assigning a type to the variable 'self' (line 3689)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3689, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GaussianKDE.evaluate.__dict__.__setitem__('stypy_localization', localization)
        GaussianKDE.evaluate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GaussianKDE.evaluate.__dict__.__setitem__('stypy_type_store', module_type_store)
        GaussianKDE.evaluate.__dict__.__setitem__('stypy_function_name', 'GaussianKDE.evaluate')
        GaussianKDE.evaluate.__dict__.__setitem__('stypy_param_names_list', ['points'])
        GaussianKDE.evaluate.__dict__.__setitem__('stypy_varargs_param_name', None)
        GaussianKDE.evaluate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GaussianKDE.evaluate.__dict__.__setitem__('stypy_call_defaults', defaults)
        GaussianKDE.evaluate.__dict__.__setitem__('stypy_call_varargs', varargs)
        GaussianKDE.evaluate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GaussianKDE.evaluate.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GaussianKDE.evaluate', ['points'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'evaluate', localization, ['points'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'evaluate(...)' code ##################

        unicode_94994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3707, (-1)), 'unicode', u'Evaluate the estimated pdf on a set of points.\n\n        Parameters\n        ----------\n        points : (# of dimensions, # of points)-array\n            Alternatively, a (# of dimensions,) vector can be passed in and\n            treated as a single point.\n\n        Returns\n        -------\n        values : (# of points,)-array\n            The values at each point.\n\n        Raises\n        ------\n        ValueError : if the dimensionality of the input points is different\n                     than the dimensionality of the KDE.\n\n        ')
        
        # Assigning a Call to a Name (line 3708):
        
        # Assigning a Call to a Name (line 3708):
        
        # Assigning a Call to a Name (line 3708):
        
        # Call to atleast_2d(...): (line 3708)
        # Processing the call arguments (line 3708)
        # Getting the type of 'points' (line 3708)
        points_94997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3708, 31), 'points', False)
        # Processing the call keyword arguments (line 3708)
        kwargs_94998 = {}
        # Getting the type of 'np' (line 3708)
        np_94995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3708, 17), 'np', False)
        # Obtaining the member 'atleast_2d' of a type (line 3708)
        atleast_2d_94996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3708, 17), np_94995, 'atleast_2d')
        # Calling atleast_2d(args, kwargs) (line 3708)
        atleast_2d_call_result_94999 = invoke(stypy.reporting.localization.Localization(__file__, 3708, 17), atleast_2d_94996, *[points_94997], **kwargs_94998)
        
        # Assigning a type to the variable 'points' (line 3708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3708, 8), 'points', atleast_2d_call_result_94999)
        
        # Assigning a Attribute to a Tuple (line 3710):
        
        # Assigning a Subscript to a Name (line 3710):
        
        # Assigning a Subscript to a Name (line 3710):
        
        # Obtaining the type of the subscript
        int_95000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3710, 8), 'int')
        
        # Call to array(...): (line 3710)
        # Processing the call arguments (line 3710)
        # Getting the type of 'points' (line 3710)
        points_95003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3710, 30), 'points', False)
        # Processing the call keyword arguments (line 3710)
        kwargs_95004 = {}
        # Getting the type of 'np' (line 3710)
        np_95001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3710, 21), 'np', False)
        # Obtaining the member 'array' of a type (line 3710)
        array_95002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3710, 21), np_95001, 'array')
        # Calling array(args, kwargs) (line 3710)
        array_call_result_95005 = invoke(stypy.reporting.localization.Localization(__file__, 3710, 21), array_95002, *[points_95003], **kwargs_95004)
        
        # Obtaining the member 'shape' of a type (line 3710)
        shape_95006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3710, 21), array_call_result_95005, 'shape')
        # Obtaining the member '__getitem__' of a type (line 3710)
        getitem___95007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3710, 8), shape_95006, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3710)
        subscript_call_result_95008 = invoke(stypy.reporting.localization.Localization(__file__, 3710, 8), getitem___95007, int_95000)
        
        # Assigning a type to the variable 'tuple_var_assignment_87305' (line 3710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3710, 8), 'tuple_var_assignment_87305', subscript_call_result_95008)
        
        # Assigning a Subscript to a Name (line 3710):
        
        # Assigning a Subscript to a Name (line 3710):
        
        # Obtaining the type of the subscript
        int_95009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3710, 8), 'int')
        
        # Call to array(...): (line 3710)
        # Processing the call arguments (line 3710)
        # Getting the type of 'points' (line 3710)
        points_95012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3710, 30), 'points', False)
        # Processing the call keyword arguments (line 3710)
        kwargs_95013 = {}
        # Getting the type of 'np' (line 3710)
        np_95010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3710, 21), 'np', False)
        # Obtaining the member 'array' of a type (line 3710)
        array_95011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3710, 21), np_95010, 'array')
        # Calling array(args, kwargs) (line 3710)
        array_call_result_95014 = invoke(stypy.reporting.localization.Localization(__file__, 3710, 21), array_95011, *[points_95012], **kwargs_95013)
        
        # Obtaining the member 'shape' of a type (line 3710)
        shape_95015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3710, 21), array_call_result_95014, 'shape')
        # Obtaining the member '__getitem__' of a type (line 3710)
        getitem___95016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3710, 8), shape_95015, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3710)
        subscript_call_result_95017 = invoke(stypy.reporting.localization.Localization(__file__, 3710, 8), getitem___95016, int_95009)
        
        # Assigning a type to the variable 'tuple_var_assignment_87306' (line 3710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3710, 8), 'tuple_var_assignment_87306', subscript_call_result_95017)
        
        # Assigning a Name to a Name (line 3710):
        
        # Assigning a Name to a Name (line 3710):
        # Getting the type of 'tuple_var_assignment_87305' (line 3710)
        tuple_var_assignment_87305_95018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3710, 8), 'tuple_var_assignment_87305')
        # Assigning a type to the variable 'dim' (line 3710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3710, 8), 'dim', tuple_var_assignment_87305_95018)
        
        # Assigning a Name to a Name (line 3710):
        
        # Assigning a Name to a Name (line 3710):
        # Getting the type of 'tuple_var_assignment_87306' (line 3710)
        tuple_var_assignment_87306_95019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3710, 8), 'tuple_var_assignment_87306')
        # Assigning a type to the variable 'num_m' (line 3710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3710, 13), 'num_m', tuple_var_assignment_87306_95019)
        
        
        # Getting the type of 'dim' (line 3711)
        dim_95020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3711, 11), 'dim')
        # Getting the type of 'self' (line 3711)
        self_95021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3711, 18), 'self')
        # Obtaining the member 'dim' of a type (line 3711)
        dim_95022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3711, 18), self_95021, 'dim')
        # Applying the binary operator '!=' (line 3711)
        result_ne_95023 = python_operator(stypy.reporting.localization.Localization(__file__, 3711, 11), '!=', dim_95020, dim_95022)
        
        # Testing the type of an if condition (line 3711)
        if_condition_95024 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3711, 8), result_ne_95023)
        # Assigning a type to the variable 'if_condition_95024' (line 3711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3711, 8), 'if_condition_95024', if_condition_95024)
        # SSA begins for if statement (line 3711)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 3712):
        
        # Assigning a BinOp to a Name (line 3712):
        
        # Assigning a BinOp to a Name (line 3712):
        unicode_95025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3712, 18), 'unicode', u'points have dimension %s, dataset has dimension %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 3713)
        tuple_95026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3713, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3713)
        # Adding element type (line 3713)
        # Getting the type of 'dim' (line 3713)
        dim_95027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3713, 16), 'dim')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3713, 16), tuple_95026, dim_95027)
        # Adding element type (line 3713)
        # Getting the type of 'self' (line 3713)
        self_95028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3713, 21), 'self')
        # Obtaining the member 'dim' of a type (line 3713)
        dim_95029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3713, 21), self_95028, 'dim')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3713, 16), tuple_95026, dim_95029)
        
        # Applying the binary operator '%' (line 3712)
        result_mod_95030 = python_operator(stypy.reporting.localization.Localization(__file__, 3712, 18), '%', unicode_95025, tuple_95026)
        
        # Assigning a type to the variable 'msg' (line 3712)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3712, 12), 'msg', result_mod_95030)
        
        # Call to ValueError(...): (line 3714)
        # Processing the call arguments (line 3714)
        # Getting the type of 'msg' (line 3714)
        msg_95032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3714, 29), 'msg', False)
        # Processing the call keyword arguments (line 3714)
        kwargs_95033 = {}
        # Getting the type of 'ValueError' (line 3714)
        ValueError_95031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3714, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 3714)
        ValueError_call_result_95034 = invoke(stypy.reporting.localization.Localization(__file__, 3714, 18), ValueError_95031, *[msg_95032], **kwargs_95033)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3714, 12), ValueError_call_result_95034, 'raise parameter', BaseException)
        # SSA join for if statement (line 3711)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3716):
        
        # Assigning a Call to a Name (line 3716):
        
        # Assigning a Call to a Name (line 3716):
        
        # Call to zeros(...): (line 3716)
        # Processing the call arguments (line 3716)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3716)
        tuple_95037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3716, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3716)
        # Adding element type (line 3716)
        # Getting the type of 'num_m' (line 3716)
        num_m_95038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 27), 'num_m', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3716, 27), tuple_95037, num_m_95038)
        
        # Processing the call keyword arguments (line 3716)
        # Getting the type of 'float' (line 3716)
        float_95039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 42), 'float', False)
        keyword_95040 = float_95039
        kwargs_95041 = {'dtype': keyword_95040}
        # Getting the type of 'np' (line 3716)
        np_95035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 17), 'np', False)
        # Obtaining the member 'zeros' of a type (line 3716)
        zeros_95036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3716, 17), np_95035, 'zeros')
        # Calling zeros(args, kwargs) (line 3716)
        zeros_call_result_95042 = invoke(stypy.reporting.localization.Localization(__file__, 3716, 17), zeros_95036, *[tuple_95037], **kwargs_95041)
        
        # Assigning a type to the variable 'result' (line 3716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3716, 8), 'result', zeros_call_result_95042)
        
        
        # Getting the type of 'num_m' (line 3718)
        num_m_95043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3718, 11), 'num_m')
        # Getting the type of 'self' (line 3718)
        self_95044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3718, 20), 'self')
        # Obtaining the member 'num_dp' of a type (line 3718)
        num_dp_95045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3718, 20), self_95044, 'num_dp')
        # Applying the binary operator '>=' (line 3718)
        result_ge_95046 = python_operator(stypy.reporting.localization.Localization(__file__, 3718, 11), '>=', num_m_95043, num_dp_95045)
        
        # Testing the type of an if condition (line 3718)
        if_condition_95047 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3718, 8), result_ge_95046)
        # Assigning a type to the variable 'if_condition_95047' (line 3718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3718, 8), 'if_condition_95047', if_condition_95047)
        # SSA begins for if statement (line 3718)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to range(...): (line 3720)
        # Processing the call arguments (line 3720)
        # Getting the type of 'self' (line 3720)
        self_95049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3720, 27), 'self', False)
        # Obtaining the member 'num_dp' of a type (line 3720)
        num_dp_95050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3720, 27), self_95049, 'num_dp')
        # Processing the call keyword arguments (line 3720)
        kwargs_95051 = {}
        # Getting the type of 'range' (line 3720)
        range_95048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3720, 21), 'range', False)
        # Calling range(args, kwargs) (line 3720)
        range_call_result_95052 = invoke(stypy.reporting.localization.Localization(__file__, 3720, 21), range_95048, *[num_dp_95050], **kwargs_95051)
        
        # Testing the type of a for loop iterable (line 3720)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3720, 12), range_call_result_95052)
        # Getting the type of the for loop variable (line 3720)
        for_loop_var_95053 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3720, 12), range_call_result_95052)
        # Assigning a type to the variable 'i' (line 3720)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3720, 12), 'i', for_loop_var_95053)
        # SSA begins for a for statement (line 3720)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 3721):
        
        # Assigning a BinOp to a Name (line 3721):
        
        # Assigning a BinOp to a Name (line 3721):
        
        # Obtaining the type of the subscript
        slice_95054 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3721, 23), None, None, None)
        # Getting the type of 'i' (line 3721)
        i_95055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3721, 39), 'i')
        # Getting the type of 'np' (line 3721)
        np_95056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3721, 42), 'np')
        # Obtaining the member 'newaxis' of a type (line 3721)
        newaxis_95057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3721, 42), np_95056, 'newaxis')
        # Getting the type of 'self' (line 3721)
        self_95058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3721, 23), 'self')
        # Obtaining the member 'dataset' of a type (line 3721)
        dataset_95059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3721, 23), self_95058, 'dataset')
        # Obtaining the member '__getitem__' of a type (line 3721)
        getitem___95060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3721, 23), dataset_95059, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3721)
        subscript_call_result_95061 = invoke(stypy.reporting.localization.Localization(__file__, 3721, 23), getitem___95060, (slice_95054, i_95055, newaxis_95057))
        
        # Getting the type of 'points' (line 3721)
        points_95062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3721, 56), 'points')
        # Applying the binary operator '-' (line 3721)
        result_sub_95063 = python_operator(stypy.reporting.localization.Localization(__file__, 3721, 23), '-', subscript_call_result_95061, points_95062)
        
        # Assigning a type to the variable 'diff' (line 3721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3721, 16), 'diff', result_sub_95063)
        
        # Assigning a Call to a Name (line 3722):
        
        # Assigning a Call to a Name (line 3722):
        
        # Assigning a Call to a Name (line 3722):
        
        # Call to dot(...): (line 3722)
        # Processing the call arguments (line 3722)
        # Getting the type of 'self' (line 3722)
        self_95066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3722, 31), 'self', False)
        # Obtaining the member 'inv_cov' of a type (line 3722)
        inv_cov_95067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3722, 31), self_95066, 'inv_cov')
        # Getting the type of 'diff' (line 3722)
        diff_95068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3722, 45), 'diff', False)
        # Processing the call keyword arguments (line 3722)
        kwargs_95069 = {}
        # Getting the type of 'np' (line 3722)
        np_95064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3722, 24), 'np', False)
        # Obtaining the member 'dot' of a type (line 3722)
        dot_95065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3722, 24), np_95064, 'dot')
        # Calling dot(args, kwargs) (line 3722)
        dot_call_result_95070 = invoke(stypy.reporting.localization.Localization(__file__, 3722, 24), dot_95065, *[inv_cov_95067, diff_95068], **kwargs_95069)
        
        # Assigning a type to the variable 'tdiff' (line 3722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3722, 16), 'tdiff', dot_call_result_95070)
        
        # Assigning a BinOp to a Name (line 3723):
        
        # Assigning a BinOp to a Name (line 3723):
        
        # Assigning a BinOp to a Name (line 3723):
        
        # Call to sum(...): (line 3723)
        # Processing the call arguments (line 3723)
        # Getting the type of 'diff' (line 3723)
        diff_95073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3723, 32), 'diff', False)
        # Getting the type of 'tdiff' (line 3723)
        tdiff_95074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3723, 39), 'tdiff', False)
        # Applying the binary operator '*' (line 3723)
        result_mul_95075 = python_operator(stypy.reporting.localization.Localization(__file__, 3723, 32), '*', diff_95073, tdiff_95074)
        
        # Processing the call keyword arguments (line 3723)
        int_95076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3723, 51), 'int')
        keyword_95077 = int_95076
        kwargs_95078 = {'axis': keyword_95077}
        # Getting the type of 'np' (line 3723)
        np_95071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3723, 25), 'np', False)
        # Obtaining the member 'sum' of a type (line 3723)
        sum_95072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3723, 25), np_95071, 'sum')
        # Calling sum(args, kwargs) (line 3723)
        sum_call_result_95079 = invoke(stypy.reporting.localization.Localization(__file__, 3723, 25), sum_95072, *[result_mul_95075], **kwargs_95078)
        
        float_95080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3723, 56), 'float')
        # Applying the binary operator 'div' (line 3723)
        result_div_95081 = python_operator(stypy.reporting.localization.Localization(__file__, 3723, 25), 'div', sum_call_result_95079, float_95080)
        
        # Assigning a type to the variable 'energy' (line 3723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3723, 16), 'energy', result_div_95081)
        
        # Assigning a BinOp to a Name (line 3724):
        
        # Assigning a BinOp to a Name (line 3724):
        
        # Assigning a BinOp to a Name (line 3724):
        # Getting the type of 'result' (line 3724)
        result_95082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3724, 25), 'result')
        
        # Call to exp(...): (line 3724)
        # Processing the call arguments (line 3724)
        
        # Getting the type of 'energy' (line 3724)
        energy_95085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3724, 42), 'energy', False)
        # Applying the 'usub' unary operator (line 3724)
        result___neg___95086 = python_operator(stypy.reporting.localization.Localization(__file__, 3724, 41), 'usub', energy_95085)
        
        # Processing the call keyword arguments (line 3724)
        kwargs_95087 = {}
        # Getting the type of 'np' (line 3724)
        np_95083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3724, 34), 'np', False)
        # Obtaining the member 'exp' of a type (line 3724)
        exp_95084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3724, 34), np_95083, 'exp')
        # Calling exp(args, kwargs) (line 3724)
        exp_call_result_95088 = invoke(stypy.reporting.localization.Localization(__file__, 3724, 34), exp_95084, *[result___neg___95086], **kwargs_95087)
        
        # Applying the binary operator '+' (line 3724)
        result_add_95089 = python_operator(stypy.reporting.localization.Localization(__file__, 3724, 25), '+', result_95082, exp_call_result_95088)
        
        # Assigning a type to the variable 'result' (line 3724)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3724, 16), 'result', result_add_95089)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 3718)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to range(...): (line 3727)
        # Processing the call arguments (line 3727)
        # Getting the type of 'num_m' (line 3727)
        num_m_95091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3727, 27), 'num_m', False)
        # Processing the call keyword arguments (line 3727)
        kwargs_95092 = {}
        # Getting the type of 'range' (line 3727)
        range_95090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3727, 21), 'range', False)
        # Calling range(args, kwargs) (line 3727)
        range_call_result_95093 = invoke(stypy.reporting.localization.Localization(__file__, 3727, 21), range_95090, *[num_m_95091], **kwargs_95092)
        
        # Testing the type of a for loop iterable (line 3727)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3727, 12), range_call_result_95093)
        # Getting the type of the for loop variable (line 3727)
        for_loop_var_95094 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3727, 12), range_call_result_95093)
        # Assigning a type to the variable 'i' (line 3727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3727, 12), 'i', for_loop_var_95094)
        # SSA begins for a for statement (line 3727)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 3728):
        
        # Assigning a BinOp to a Name (line 3728):
        
        # Assigning a BinOp to a Name (line 3728):
        # Getting the type of 'self' (line 3728)
        self_95095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3728, 23), 'self')
        # Obtaining the member 'dataset' of a type (line 3728)
        dataset_95096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3728, 23), self_95095, 'dataset')
        
        # Obtaining the type of the subscript
        slice_95097 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3728, 38), None, None, None)
        # Getting the type of 'i' (line 3728)
        i_95098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3728, 48), 'i')
        # Getting the type of 'np' (line 3728)
        np_95099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3728, 51), 'np')
        # Obtaining the member 'newaxis' of a type (line 3728)
        newaxis_95100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3728, 51), np_95099, 'newaxis')
        # Getting the type of 'points' (line 3728)
        points_95101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3728, 38), 'points')
        # Obtaining the member '__getitem__' of a type (line 3728)
        getitem___95102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3728, 38), points_95101, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3728)
        subscript_call_result_95103 = invoke(stypy.reporting.localization.Localization(__file__, 3728, 38), getitem___95102, (slice_95097, i_95098, newaxis_95100))
        
        # Applying the binary operator '-' (line 3728)
        result_sub_95104 = python_operator(stypy.reporting.localization.Localization(__file__, 3728, 23), '-', dataset_95096, subscript_call_result_95103)
        
        # Assigning a type to the variable 'diff' (line 3728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3728, 16), 'diff', result_sub_95104)
        
        # Assigning a Call to a Name (line 3729):
        
        # Assigning a Call to a Name (line 3729):
        
        # Assigning a Call to a Name (line 3729):
        
        # Call to dot(...): (line 3729)
        # Processing the call arguments (line 3729)
        # Getting the type of 'self' (line 3729)
        self_95107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3729, 31), 'self', False)
        # Obtaining the member 'inv_cov' of a type (line 3729)
        inv_cov_95108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3729, 31), self_95107, 'inv_cov')
        # Getting the type of 'diff' (line 3729)
        diff_95109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3729, 45), 'diff', False)
        # Processing the call keyword arguments (line 3729)
        kwargs_95110 = {}
        # Getting the type of 'np' (line 3729)
        np_95105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3729, 24), 'np', False)
        # Obtaining the member 'dot' of a type (line 3729)
        dot_95106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3729, 24), np_95105, 'dot')
        # Calling dot(args, kwargs) (line 3729)
        dot_call_result_95111 = invoke(stypy.reporting.localization.Localization(__file__, 3729, 24), dot_95106, *[inv_cov_95108, diff_95109], **kwargs_95110)
        
        # Assigning a type to the variable 'tdiff' (line 3729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3729, 16), 'tdiff', dot_call_result_95111)
        
        # Assigning a BinOp to a Name (line 3730):
        
        # Assigning a BinOp to a Name (line 3730):
        
        # Assigning a BinOp to a Name (line 3730):
        
        # Call to sum(...): (line 3730)
        # Processing the call arguments (line 3730)
        # Getting the type of 'diff' (line 3730)
        diff_95114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3730, 32), 'diff', False)
        # Getting the type of 'tdiff' (line 3730)
        tdiff_95115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3730, 39), 'tdiff', False)
        # Applying the binary operator '*' (line 3730)
        result_mul_95116 = python_operator(stypy.reporting.localization.Localization(__file__, 3730, 32), '*', diff_95114, tdiff_95115)
        
        # Processing the call keyword arguments (line 3730)
        int_95117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3730, 51), 'int')
        keyword_95118 = int_95117
        kwargs_95119 = {'axis': keyword_95118}
        # Getting the type of 'np' (line 3730)
        np_95112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3730, 25), 'np', False)
        # Obtaining the member 'sum' of a type (line 3730)
        sum_95113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3730, 25), np_95112, 'sum')
        # Calling sum(args, kwargs) (line 3730)
        sum_call_result_95120 = invoke(stypy.reporting.localization.Localization(__file__, 3730, 25), sum_95113, *[result_mul_95116], **kwargs_95119)
        
        float_95121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3730, 56), 'float')
        # Applying the binary operator 'div' (line 3730)
        result_div_95122 = python_operator(stypy.reporting.localization.Localization(__file__, 3730, 25), 'div', sum_call_result_95120, float_95121)
        
        # Assigning a type to the variable 'energy' (line 3730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3730, 16), 'energy', result_div_95122)
        
        # Assigning a Call to a Subscript (line 3731):
        
        # Assigning a Call to a Subscript (line 3731):
        
        # Assigning a Call to a Subscript (line 3731):
        
        # Call to sum(...): (line 3731)
        # Processing the call arguments (line 3731)
        
        # Call to exp(...): (line 3731)
        # Processing the call arguments (line 3731)
        
        # Getting the type of 'energy' (line 3731)
        energy_95127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3731, 43), 'energy', False)
        # Applying the 'usub' unary operator (line 3731)
        result___neg___95128 = python_operator(stypy.reporting.localization.Localization(__file__, 3731, 42), 'usub', energy_95127)
        
        # Processing the call keyword arguments (line 3731)
        kwargs_95129 = {}
        # Getting the type of 'np' (line 3731)
        np_95125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3731, 35), 'np', False)
        # Obtaining the member 'exp' of a type (line 3731)
        exp_95126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3731, 35), np_95125, 'exp')
        # Calling exp(args, kwargs) (line 3731)
        exp_call_result_95130 = invoke(stypy.reporting.localization.Localization(__file__, 3731, 35), exp_95126, *[result___neg___95128], **kwargs_95129)
        
        # Processing the call keyword arguments (line 3731)
        int_95131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3731, 57), 'int')
        keyword_95132 = int_95131
        kwargs_95133 = {'axis': keyword_95132}
        # Getting the type of 'np' (line 3731)
        np_95123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3731, 28), 'np', False)
        # Obtaining the member 'sum' of a type (line 3731)
        sum_95124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3731, 28), np_95123, 'sum')
        # Calling sum(args, kwargs) (line 3731)
        sum_call_result_95134 = invoke(stypy.reporting.localization.Localization(__file__, 3731, 28), sum_95124, *[exp_call_result_95130], **kwargs_95133)
        
        # Getting the type of 'result' (line 3731)
        result_95135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3731, 16), 'result')
        # Getting the type of 'i' (line 3731)
        i_95136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3731, 23), 'i')
        # Storing an element on a container (line 3731)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3731, 16), result_95135, (i_95136, sum_call_result_95134))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3718)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 3733):
        
        # Assigning a BinOp to a Name (line 3733):
        
        # Assigning a BinOp to a Name (line 3733):
        # Getting the type of 'result' (line 3733)
        result_95137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3733, 17), 'result')
        # Getting the type of 'self' (line 3733)
        self_95138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3733, 26), 'self')
        # Obtaining the member 'norm_factor' of a type (line 3733)
        norm_factor_95139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3733, 26), self_95138, 'norm_factor')
        # Applying the binary operator 'div' (line 3733)
        result_div_95140 = python_operator(stypy.reporting.localization.Localization(__file__, 3733, 17), 'div', result_95137, norm_factor_95139)
        
        # Assigning a type to the variable 'result' (line 3733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3733, 8), 'result', result_div_95140)
        # Getting the type of 'result' (line 3735)
        result_95141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3735, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 3735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3735, 8), 'stypy_return_type', result_95141)
        
        # ################# End of 'evaluate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'evaluate' in the type store
        # Getting the type of 'stypy_return_type' (line 3688)
        stypy_return_type_95142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3688, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_95142)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'evaluate'
        return stypy_return_type_95142

    
    # Assigning a Name to a Name (line 3737):
    
    # Assigning a Name to a Name (line 3737):

# Assigning a type to the variable 'GaussianKDE' (line 3582)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3582, 0), 'GaussianKDE', GaussianKDE)

# Assigning a Name to a Name (line 3686):
# Getting the type of 'GaussianKDE'
GaussianKDE_95143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'GaussianKDE')
# Obtaining the member 'scotts_factor' of a type
scotts_factor_95144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), GaussianKDE_95143, 'scotts_factor')
# Getting the type of 'GaussianKDE'
GaussianKDE_95145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'GaussianKDE')
# Setting the type of the member 'covariance_factor' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), GaussianKDE_95145, 'covariance_factor', scotts_factor_95144)

# Assigning a Name to a Name (line 3737):
# Getting the type of 'GaussianKDE'
GaussianKDE_95146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'GaussianKDE')
# Obtaining the member 'evaluate' of a type
evaluate_95147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), GaussianKDE_95146, 'evaluate')
# Getting the type of 'GaussianKDE'
GaussianKDE_95148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'GaussianKDE')
# Setting the type of the member '__call__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), GaussianKDE_95148, '__call__', evaluate_95147)

@norecursion
def inside_poly(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'inside_poly'
    module_type_store = module_type_store.open_function_context('inside_poly', 3743, 0, False)
    
    # Passed parameters checking function
    inside_poly.stypy_localization = localization
    inside_poly.stypy_type_of_self = None
    inside_poly.stypy_type_store = module_type_store
    inside_poly.stypy_function_name = 'inside_poly'
    inside_poly.stypy_param_names_list = ['points', 'verts']
    inside_poly.stypy_varargs_param_name = None
    inside_poly.stypy_kwargs_param_name = None
    inside_poly.stypy_call_defaults = defaults
    inside_poly.stypy_call_varargs = varargs
    inside_poly.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'inside_poly', ['points', 'verts'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'inside_poly', localization, ['points', 'verts'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'inside_poly(...)' code ##################

    unicode_95149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3750, (-1)), 'unicode', u'\n    *points* is a sequence of *x*, *y* points.\n    *verts* is a sequence of *x*, *y* vertices of a polygon.\n\n    Return value is a sequence of indices into points for the points\n    that are inside the polygon.\n    ')
    
    # Assigning a Call to a Name (line 3752):
    
    # Assigning a Call to a Name (line 3752):
    
    # Assigning a Call to a Name (line 3752):
    
    # Call to Path(...): (line 3752)
    # Processing the call arguments (line 3752)
    # Getting the type of 'verts' (line 3752)
    verts_95151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3752, 16), 'verts', False)
    # Processing the call keyword arguments (line 3752)
    kwargs_95152 = {}
    # Getting the type of 'Path' (line 3752)
    Path_95150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3752, 11), 'Path', False)
    # Calling Path(args, kwargs) (line 3752)
    Path_call_result_95153 = invoke(stypy.reporting.localization.Localization(__file__, 3752, 11), Path_95150, *[verts_95151], **kwargs_95152)
    
    # Assigning a type to the variable 'poly' (line 3752)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3752, 4), 'poly', Path_call_result_95153)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to enumerate(...): (line 3755)
    # Processing the call arguments (line 3755)
    # Getting the type of 'points' (line 3755)
    points_95161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3755, 40), 'points', False)
    # Processing the call keyword arguments (line 3755)
    kwargs_95162 = {}
    # Getting the type of 'enumerate' (line 3755)
    enumerate_95160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3755, 30), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 3755)
    enumerate_call_result_95163 = invoke(stypy.reporting.localization.Localization(__file__, 3755, 30), enumerate_95160, *[points_95161], **kwargs_95162)
    
    comprehension_95164 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3755, 12), enumerate_call_result_95163)
    # Assigning a type to the variable 'idx' (line 3755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3755, 12), 'idx', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3755, 12), comprehension_95164))
    # Assigning a type to the variable 'p' (line 3755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3755, 12), 'p', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3755, 12), comprehension_95164))
    
    # Call to contains_point(...): (line 3755)
    # Processing the call arguments (line 3755)
    # Getting the type of 'p' (line 3755)
    p_95157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3755, 71), 'p', False)
    # Processing the call keyword arguments (line 3755)
    kwargs_95158 = {}
    # Getting the type of 'poly' (line 3755)
    poly_95155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3755, 51), 'poly', False)
    # Obtaining the member 'contains_point' of a type (line 3755)
    contains_point_95156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3755, 51), poly_95155, 'contains_point')
    # Calling contains_point(args, kwargs) (line 3755)
    contains_point_call_result_95159 = invoke(stypy.reporting.localization.Localization(__file__, 3755, 51), contains_point_95156, *[p_95157], **kwargs_95158)
    
    # Getting the type of 'idx' (line 3755)
    idx_95154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3755, 12), 'idx')
    list_95165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3755, 12), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3755, 12), list_95165, idx_95154)
    # Assigning a type to the variable 'stypy_return_type' (line 3755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3755, 4), 'stypy_return_type', list_95165)
    
    # ################# End of 'inside_poly(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'inside_poly' in the type store
    # Getting the type of 'stypy_return_type' (line 3743)
    stypy_return_type_95166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3743, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_95166)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'inside_poly'
    return stypy_return_type_95166

# Assigning a type to the variable 'inside_poly' (line 3743)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3743, 0), 'inside_poly', inside_poly)

@norecursion
def poly_below(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'poly_below'
    module_type_store = module_type_store.open_function_context('poly_below', 3758, 0, False)
    
    # Passed parameters checking function
    poly_below.stypy_localization = localization
    poly_below.stypy_type_of_self = None
    poly_below.stypy_type_store = module_type_store
    poly_below.stypy_function_name = 'poly_below'
    poly_below.stypy_param_names_list = ['xmin', 'xs', 'ys']
    poly_below.stypy_varargs_param_name = None
    poly_below.stypy_kwargs_param_name = None
    poly_below.stypy_call_defaults = defaults
    poly_below.stypy_call_varargs = varargs
    poly_below.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'poly_below', ['xmin', 'xs', 'ys'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'poly_below', localization, ['xmin', 'xs', 'ys'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'poly_below(...)' code ##################

    unicode_95167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3768, (-1)), 'unicode', u'\n    Given a sequence of *xs* and *ys*, return the vertices of a\n    polygon that has a horizontal base at *xmin* and an upper bound at\n    the *ys*.  *xmin* is a scalar.\n\n    Intended for use with :meth:`matplotlib.axes.Axes.fill`, e.g.,::\n\n      xv, yv = poly_below(0, x, y)\n      ax.fill(xv, yv)\n    ')
    
    
    # Call to any(...): (line 3769)
    # Processing the call arguments (line 3769)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 3769, 11, True)
    # Calculating comprehension expression
    
    # Obtaining an instance of the builtin type 'list' (line 3769)
    list_95176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3769, 57), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3769)
    # Adding element type (line 3769)
    # Getting the type of 'xs' (line 3769)
    xs_95177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3769, 58), 'xs', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3769, 57), list_95176, xs_95177)
    # Adding element type (line 3769)
    # Getting the type of 'ys' (line 3769)
    ys_95178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3769, 62), 'ys', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3769, 57), list_95176, ys_95178)
    
    comprehension_95179 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3769, 11), list_95176)
    # Assigning a type to the variable 'var' (line 3769)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3769, 11), 'var', comprehension_95179)
    
    # Call to isinstance(...): (line 3769)
    # Processing the call arguments (line 3769)
    # Getting the type of 'var' (line 3769)
    var_95170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3769, 22), 'var', False)
    # Getting the type of 'np' (line 3769)
    np_95171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3769, 27), 'np', False)
    # Obtaining the member 'ma' of a type (line 3769)
    ma_95172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3769, 27), np_95171, 'ma')
    # Obtaining the member 'MaskedArray' of a type (line 3769)
    MaskedArray_95173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3769, 27), ma_95172, 'MaskedArray')
    # Processing the call keyword arguments (line 3769)
    kwargs_95174 = {}
    # Getting the type of 'isinstance' (line 3769)
    isinstance_95169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3769, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 3769)
    isinstance_call_result_95175 = invoke(stypy.reporting.localization.Localization(__file__, 3769, 11), isinstance_95169, *[var_95170, MaskedArray_95173], **kwargs_95174)
    
    list_95180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3769, 11), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3769, 11), list_95180, isinstance_call_result_95175)
    # Processing the call keyword arguments (line 3769)
    kwargs_95181 = {}
    # Getting the type of 'any' (line 3769)
    any_95168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3769, 7), 'any', False)
    # Calling any(args, kwargs) (line 3769)
    any_call_result_95182 = invoke(stypy.reporting.localization.Localization(__file__, 3769, 7), any_95168, *[list_95180], **kwargs_95181)
    
    # Testing the type of an if condition (line 3769)
    if_condition_95183 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3769, 4), any_call_result_95182)
    # Assigning a type to the variable 'if_condition_95183' (line 3769)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3769, 4), 'if_condition_95183', if_condition_95183)
    # SSA begins for if statement (line 3769)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 3770):
    
    # Assigning a Attribute to a Name (line 3770):
    
    # Assigning a Attribute to a Name (line 3770):
    # Getting the type of 'np' (line 3770)
    np_95184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3770, 16), 'np')
    # Obtaining the member 'ma' of a type (line 3770)
    ma_95185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3770, 16), np_95184, 'ma')
    # Assigning a type to the variable 'numpy' (line 3770)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3770, 8), 'numpy', ma_95185)
    # SSA branch for the else part of an if statement (line 3769)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 3772):
    
    # Assigning a Name to a Name (line 3772):
    
    # Assigning a Name to a Name (line 3772):
    # Getting the type of 'np' (line 3772)
    np_95186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3772, 16), 'np')
    # Assigning a type to the variable 'numpy' (line 3772)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3772, 8), 'numpy', np_95186)
    # SSA join for if statement (line 3769)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3774):
    
    # Assigning a Call to a Name (line 3774):
    
    # Assigning a Call to a Name (line 3774):
    
    # Call to asarray(...): (line 3774)
    # Processing the call arguments (line 3774)
    # Getting the type of 'xs' (line 3774)
    xs_95189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3774, 23), 'xs', False)
    # Processing the call keyword arguments (line 3774)
    kwargs_95190 = {}
    # Getting the type of 'numpy' (line 3774)
    numpy_95187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3774, 9), 'numpy', False)
    # Obtaining the member 'asarray' of a type (line 3774)
    asarray_95188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3774, 9), numpy_95187, 'asarray')
    # Calling asarray(args, kwargs) (line 3774)
    asarray_call_result_95191 = invoke(stypy.reporting.localization.Localization(__file__, 3774, 9), asarray_95188, *[xs_95189], **kwargs_95190)
    
    # Assigning a type to the variable 'xs' (line 3774)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3774, 4), 'xs', asarray_call_result_95191)
    
    # Assigning a Call to a Name (line 3775):
    
    # Assigning a Call to a Name (line 3775):
    
    # Assigning a Call to a Name (line 3775):
    
    # Call to asarray(...): (line 3775)
    # Processing the call arguments (line 3775)
    # Getting the type of 'ys' (line 3775)
    ys_95194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3775, 23), 'ys', False)
    # Processing the call keyword arguments (line 3775)
    kwargs_95195 = {}
    # Getting the type of 'numpy' (line 3775)
    numpy_95192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3775, 9), 'numpy', False)
    # Obtaining the member 'asarray' of a type (line 3775)
    asarray_95193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3775, 9), numpy_95192, 'asarray')
    # Calling asarray(args, kwargs) (line 3775)
    asarray_call_result_95196 = invoke(stypy.reporting.localization.Localization(__file__, 3775, 9), asarray_95193, *[ys_95194], **kwargs_95195)
    
    # Assigning a type to the variable 'ys' (line 3775)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3775, 4), 'ys', asarray_call_result_95196)
    
    # Assigning a Call to a Name (line 3776):
    
    # Assigning a Call to a Name (line 3776):
    
    # Assigning a Call to a Name (line 3776):
    
    # Call to len(...): (line 3776)
    # Processing the call arguments (line 3776)
    # Getting the type of 'xs' (line 3776)
    xs_95198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3776, 13), 'xs', False)
    # Processing the call keyword arguments (line 3776)
    kwargs_95199 = {}
    # Getting the type of 'len' (line 3776)
    len_95197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3776, 9), 'len', False)
    # Calling len(args, kwargs) (line 3776)
    len_call_result_95200 = invoke(stypy.reporting.localization.Localization(__file__, 3776, 9), len_95197, *[xs_95198], **kwargs_95199)
    
    # Assigning a type to the variable 'Nx' (line 3776)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3776, 4), 'Nx', len_call_result_95200)
    
    # Assigning a Call to a Name (line 3777):
    
    # Assigning a Call to a Name (line 3777):
    
    # Assigning a Call to a Name (line 3777):
    
    # Call to len(...): (line 3777)
    # Processing the call arguments (line 3777)
    # Getting the type of 'ys' (line 3777)
    ys_95202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3777, 13), 'ys', False)
    # Processing the call keyword arguments (line 3777)
    kwargs_95203 = {}
    # Getting the type of 'len' (line 3777)
    len_95201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3777, 9), 'len', False)
    # Calling len(args, kwargs) (line 3777)
    len_call_result_95204 = invoke(stypy.reporting.localization.Localization(__file__, 3777, 9), len_95201, *[ys_95202], **kwargs_95203)
    
    # Assigning a type to the variable 'Ny' (line 3777)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3777, 4), 'Ny', len_call_result_95204)
    
    
    # Getting the type of 'Nx' (line 3778)
    Nx_95205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3778, 7), 'Nx')
    # Getting the type of 'Ny' (line 3778)
    Ny_95206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3778, 13), 'Ny')
    # Applying the binary operator '!=' (line 3778)
    result_ne_95207 = python_operator(stypy.reporting.localization.Localization(__file__, 3778, 7), '!=', Nx_95205, Ny_95206)
    
    # Testing the type of an if condition (line 3778)
    if_condition_95208 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3778, 4), result_ne_95207)
    # Assigning a type to the variable 'if_condition_95208' (line 3778)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3778, 4), 'if_condition_95208', if_condition_95208)
    # SSA begins for if statement (line 3778)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3779)
    # Processing the call arguments (line 3779)
    unicode_95210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3779, 25), 'unicode', u"'xs' and 'ys' must have the same length")
    # Processing the call keyword arguments (line 3779)
    kwargs_95211 = {}
    # Getting the type of 'ValueError' (line 3779)
    ValueError_95209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3779, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3779)
    ValueError_call_result_95212 = invoke(stypy.reporting.localization.Localization(__file__, 3779, 14), ValueError_95209, *[unicode_95210], **kwargs_95211)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3779, 8), ValueError_call_result_95212, 'raise parameter', BaseException)
    # SSA join for if statement (line 3778)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 3780):
    
    # Assigning a BinOp to a Name (line 3780):
    
    # Assigning a BinOp to a Name (line 3780):
    # Getting the type of 'xmin' (line 3780)
    xmin_95213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3780, 8), 'xmin')
    
    # Call to ones(...): (line 3780)
    # Processing the call arguments (line 3780)
    int_95216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3780, 24), 'int')
    # Getting the type of 'Nx' (line 3780)
    Nx_95217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3780, 26), 'Nx', False)
    # Applying the binary operator '*' (line 3780)
    result_mul_95218 = python_operator(stypy.reporting.localization.Localization(__file__, 3780, 24), '*', int_95216, Nx_95217)
    
    # Processing the call keyword arguments (line 3780)
    kwargs_95219 = {}
    # Getting the type of 'numpy' (line 3780)
    numpy_95214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3780, 13), 'numpy', False)
    # Obtaining the member 'ones' of a type (line 3780)
    ones_95215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3780, 13), numpy_95214, 'ones')
    # Calling ones(args, kwargs) (line 3780)
    ones_call_result_95220 = invoke(stypy.reporting.localization.Localization(__file__, 3780, 13), ones_95215, *[result_mul_95218], **kwargs_95219)
    
    # Applying the binary operator '*' (line 3780)
    result_mul_95221 = python_operator(stypy.reporting.localization.Localization(__file__, 3780, 8), '*', xmin_95213, ones_call_result_95220)
    
    # Assigning a type to the variable 'x' (line 3780)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3780, 4), 'x', result_mul_95221)
    
    # Assigning a Call to a Name (line 3781):
    
    # Assigning a Call to a Name (line 3781):
    
    # Assigning a Call to a Name (line 3781):
    
    # Call to ones(...): (line 3781)
    # Processing the call arguments (line 3781)
    int_95224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3781, 19), 'int')
    # Getting the type of 'Nx' (line 3781)
    Nx_95225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3781, 21), 'Nx', False)
    # Applying the binary operator '*' (line 3781)
    result_mul_95226 = python_operator(stypy.reporting.localization.Localization(__file__, 3781, 19), '*', int_95224, Nx_95225)
    
    # Processing the call keyword arguments (line 3781)
    kwargs_95227 = {}
    # Getting the type of 'numpy' (line 3781)
    numpy_95222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3781, 8), 'numpy', False)
    # Obtaining the member 'ones' of a type (line 3781)
    ones_95223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3781, 8), numpy_95222, 'ones')
    # Calling ones(args, kwargs) (line 3781)
    ones_call_result_95228 = invoke(stypy.reporting.localization.Localization(__file__, 3781, 8), ones_95223, *[result_mul_95226], **kwargs_95227)
    
    # Assigning a type to the variable 'y' (line 3781)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3781, 4), 'y', ones_call_result_95228)
    
    # Assigning a Name to a Subscript (line 3782):
    
    # Assigning a Name to a Subscript (line 3782):
    
    # Assigning a Name to a Subscript (line 3782):
    # Getting the type of 'xs' (line 3782)
    xs_95229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3782, 13), 'xs')
    # Getting the type of 'x' (line 3782)
    x_95230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3782, 4), 'x')
    # Getting the type of 'Nx' (line 3782)
    Nx_95231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3782, 7), 'Nx')
    slice_95232 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3782, 4), None, Nx_95231, None)
    # Storing an element on a container (line 3782)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3782, 4), x_95230, (slice_95232, xs_95229))
    
    # Assigning a Name to a Subscript (line 3783):
    
    # Assigning a Name to a Subscript (line 3783):
    
    # Assigning a Name to a Subscript (line 3783):
    # Getting the type of 'ys' (line 3783)
    ys_95233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3783, 13), 'ys')
    # Getting the type of 'y' (line 3783)
    y_95234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3783, 4), 'y')
    # Getting the type of 'Nx' (line 3783)
    Nx_95235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3783, 7), 'Nx')
    slice_95236 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3783, 4), None, Nx_95235, None)
    # Storing an element on a container (line 3783)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3783, 4), y_95234, (slice_95236, ys_95233))
    
    # Assigning a Subscript to a Subscript (line 3784):
    
    # Assigning a Subscript to a Subscript (line 3784):
    
    # Assigning a Subscript to a Subscript (line 3784):
    
    # Obtaining the type of the subscript
    int_95237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3784, 18), 'int')
    slice_95238 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3784, 13), None, None, int_95237)
    # Getting the type of 'ys' (line 3784)
    ys_95239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3784, 13), 'ys')
    # Obtaining the member '__getitem__' of a type (line 3784)
    getitem___95240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3784, 13), ys_95239, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3784)
    subscript_call_result_95241 = invoke(stypy.reporting.localization.Localization(__file__, 3784, 13), getitem___95240, slice_95238)
    
    # Getting the type of 'y' (line 3784)
    y_95242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3784, 4), 'y')
    # Getting the type of 'Nx' (line 3784)
    Nx_95243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3784, 6), 'Nx')
    slice_95244 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3784, 4), Nx_95243, None, None)
    # Storing an element on a container (line 3784)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3784, 4), y_95242, (slice_95244, subscript_call_result_95241))
    
    # Obtaining an instance of the builtin type 'tuple' (line 3785)
    tuple_95245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3785, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3785)
    # Adding element type (line 3785)
    # Getting the type of 'x' (line 3785)
    x_95246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3785, 11), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3785, 11), tuple_95245, x_95246)
    # Adding element type (line 3785)
    # Getting the type of 'y' (line 3785)
    y_95247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3785, 14), 'y')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3785, 11), tuple_95245, y_95247)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3785)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3785, 4), 'stypy_return_type', tuple_95245)
    
    # ################# End of 'poly_below(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'poly_below' in the type store
    # Getting the type of 'stypy_return_type' (line 3758)
    stypy_return_type_95248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3758, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_95248)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'poly_below'
    return stypy_return_type_95248

# Assigning a type to the variable 'poly_below' (line 3758)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3758, 0), 'poly_below', poly_below)

@norecursion
def poly_between(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'poly_between'
    module_type_store = module_type_store.open_function_context('poly_between', 3788, 0, False)
    
    # Passed parameters checking function
    poly_between.stypy_localization = localization
    poly_between.stypy_type_of_self = None
    poly_between.stypy_type_store = module_type_store
    poly_between.stypy_function_name = 'poly_between'
    poly_between.stypy_param_names_list = ['x', 'ylower', 'yupper']
    poly_between.stypy_varargs_param_name = None
    poly_between.stypy_kwargs_param_name = None
    poly_between.stypy_call_defaults = defaults
    poly_between.stypy_call_varargs = varargs
    poly_between.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'poly_between', ['x', 'ylower', 'yupper'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'poly_between', localization, ['x', 'ylower', 'yupper'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'poly_between(...)' code ##################

    unicode_95249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3797, (-1)), 'unicode', u'\n    Given a sequence of *x*, *ylower* and *yupper*, return the polygon\n    that fills the regions between them.  *ylower* or *yupper* can be\n    scalar or iterable.  If they are iterable, they must be equal in\n    length to *x*.\n\n    Return value is *x*, *y* arrays for use with\n    :meth:`matplotlib.axes.Axes.fill`.\n    ')
    
    
    # Call to any(...): (line 3798)
    # Processing the call arguments (line 3798)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 3798, 11, True)
    # Calculating comprehension expression
    
    # Obtaining an instance of the builtin type 'list' (line 3798)
    list_95258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3798, 57), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3798)
    # Adding element type (line 3798)
    # Getting the type of 'ylower' (line 3798)
    ylower_95259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3798, 58), 'ylower', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3798, 57), list_95258, ylower_95259)
    # Adding element type (line 3798)
    # Getting the type of 'yupper' (line 3798)
    yupper_95260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3798, 66), 'yupper', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3798, 57), list_95258, yupper_95260)
    # Adding element type (line 3798)
    # Getting the type of 'x' (line 3798)
    x_95261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3798, 74), 'x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3798, 57), list_95258, x_95261)
    
    comprehension_95262 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3798, 11), list_95258)
    # Assigning a type to the variable 'var' (line 3798)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3798, 11), 'var', comprehension_95262)
    
    # Call to isinstance(...): (line 3798)
    # Processing the call arguments (line 3798)
    # Getting the type of 'var' (line 3798)
    var_95252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3798, 22), 'var', False)
    # Getting the type of 'np' (line 3798)
    np_95253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3798, 27), 'np', False)
    # Obtaining the member 'ma' of a type (line 3798)
    ma_95254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3798, 27), np_95253, 'ma')
    # Obtaining the member 'MaskedArray' of a type (line 3798)
    MaskedArray_95255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3798, 27), ma_95254, 'MaskedArray')
    # Processing the call keyword arguments (line 3798)
    kwargs_95256 = {}
    # Getting the type of 'isinstance' (line 3798)
    isinstance_95251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3798, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 3798)
    isinstance_call_result_95257 = invoke(stypy.reporting.localization.Localization(__file__, 3798, 11), isinstance_95251, *[var_95252, MaskedArray_95255], **kwargs_95256)
    
    list_95263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3798, 11), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3798, 11), list_95263, isinstance_call_result_95257)
    # Processing the call keyword arguments (line 3798)
    kwargs_95264 = {}
    # Getting the type of 'any' (line 3798)
    any_95250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3798, 7), 'any', False)
    # Calling any(args, kwargs) (line 3798)
    any_call_result_95265 = invoke(stypy.reporting.localization.Localization(__file__, 3798, 7), any_95250, *[list_95263], **kwargs_95264)
    
    # Testing the type of an if condition (line 3798)
    if_condition_95266 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3798, 4), any_call_result_95265)
    # Assigning a type to the variable 'if_condition_95266' (line 3798)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3798, 4), 'if_condition_95266', if_condition_95266)
    # SSA begins for if statement (line 3798)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 3799):
    
    # Assigning a Attribute to a Name (line 3799):
    
    # Assigning a Attribute to a Name (line 3799):
    # Getting the type of 'np' (line 3799)
    np_95267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3799, 16), 'np')
    # Obtaining the member 'ma' of a type (line 3799)
    ma_95268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3799, 16), np_95267, 'ma')
    # Assigning a type to the variable 'numpy' (line 3799)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3799, 8), 'numpy', ma_95268)
    # SSA branch for the else part of an if statement (line 3798)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 3801):
    
    # Assigning a Name to a Name (line 3801):
    
    # Assigning a Name to a Name (line 3801):
    # Getting the type of 'np' (line 3801)
    np_95269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3801, 16), 'np')
    # Assigning a type to the variable 'numpy' (line 3801)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3801, 8), 'numpy', np_95269)
    # SSA join for if statement (line 3798)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3803):
    
    # Assigning a Call to a Name (line 3803):
    
    # Assigning a Call to a Name (line 3803):
    
    # Call to len(...): (line 3803)
    # Processing the call arguments (line 3803)
    # Getting the type of 'x' (line 3803)
    x_95271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3803, 13), 'x', False)
    # Processing the call keyword arguments (line 3803)
    kwargs_95272 = {}
    # Getting the type of 'len' (line 3803)
    len_95270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3803, 9), 'len', False)
    # Calling len(args, kwargs) (line 3803)
    len_call_result_95273 = invoke(stypy.reporting.localization.Localization(__file__, 3803, 9), len_95270, *[x_95271], **kwargs_95272)
    
    # Assigning a type to the variable 'Nx' (line 3803)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3803, 4), 'Nx', len_call_result_95273)
    
    
    
    # Call to iterable(...): (line 3804)
    # Processing the call arguments (line 3804)
    # Getting the type of 'ylower' (line 3804)
    ylower_95276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3804, 26), 'ylower', False)
    # Processing the call keyword arguments (line 3804)
    kwargs_95277 = {}
    # Getting the type of 'cbook' (line 3804)
    cbook_95274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3804, 11), 'cbook', False)
    # Obtaining the member 'iterable' of a type (line 3804)
    iterable_95275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3804, 11), cbook_95274, 'iterable')
    # Calling iterable(args, kwargs) (line 3804)
    iterable_call_result_95278 = invoke(stypy.reporting.localization.Localization(__file__, 3804, 11), iterable_95275, *[ylower_95276], **kwargs_95277)
    
    # Applying the 'not' unary operator (line 3804)
    result_not__95279 = python_operator(stypy.reporting.localization.Localization(__file__, 3804, 7), 'not', iterable_call_result_95278)
    
    # Testing the type of an if condition (line 3804)
    if_condition_95280 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3804, 4), result_not__95279)
    # Assigning a type to the variable 'if_condition_95280' (line 3804)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3804, 4), 'if_condition_95280', if_condition_95280)
    # SSA begins for if statement (line 3804)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3805):
    
    # Assigning a BinOp to a Name (line 3805):
    
    # Assigning a BinOp to a Name (line 3805):
    # Getting the type of 'ylower' (line 3805)
    ylower_95281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 17), 'ylower')
    
    # Call to ones(...): (line 3805)
    # Processing the call arguments (line 3805)
    # Getting the type of 'Nx' (line 3805)
    Nx_95284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 35), 'Nx', False)
    # Processing the call keyword arguments (line 3805)
    kwargs_95285 = {}
    # Getting the type of 'numpy' (line 3805)
    numpy_95282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 24), 'numpy', False)
    # Obtaining the member 'ones' of a type (line 3805)
    ones_95283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3805, 24), numpy_95282, 'ones')
    # Calling ones(args, kwargs) (line 3805)
    ones_call_result_95286 = invoke(stypy.reporting.localization.Localization(__file__, 3805, 24), ones_95283, *[Nx_95284], **kwargs_95285)
    
    # Applying the binary operator '*' (line 3805)
    result_mul_95287 = python_operator(stypy.reporting.localization.Localization(__file__, 3805, 17), '*', ylower_95281, ones_call_result_95286)
    
    # Assigning a type to the variable 'ylower' (line 3805)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3805, 8), 'ylower', result_mul_95287)
    # SSA join for if statement (line 3804)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to iterable(...): (line 3807)
    # Processing the call arguments (line 3807)
    # Getting the type of 'yupper' (line 3807)
    yupper_95290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3807, 26), 'yupper', False)
    # Processing the call keyword arguments (line 3807)
    kwargs_95291 = {}
    # Getting the type of 'cbook' (line 3807)
    cbook_95288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3807, 11), 'cbook', False)
    # Obtaining the member 'iterable' of a type (line 3807)
    iterable_95289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3807, 11), cbook_95288, 'iterable')
    # Calling iterable(args, kwargs) (line 3807)
    iterable_call_result_95292 = invoke(stypy.reporting.localization.Localization(__file__, 3807, 11), iterable_95289, *[yupper_95290], **kwargs_95291)
    
    # Applying the 'not' unary operator (line 3807)
    result_not__95293 = python_operator(stypy.reporting.localization.Localization(__file__, 3807, 7), 'not', iterable_call_result_95292)
    
    # Testing the type of an if condition (line 3807)
    if_condition_95294 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3807, 4), result_not__95293)
    # Assigning a type to the variable 'if_condition_95294' (line 3807)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3807, 4), 'if_condition_95294', if_condition_95294)
    # SSA begins for if statement (line 3807)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3808):
    
    # Assigning a BinOp to a Name (line 3808):
    
    # Assigning a BinOp to a Name (line 3808):
    # Getting the type of 'yupper' (line 3808)
    yupper_95295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3808, 17), 'yupper')
    
    # Call to ones(...): (line 3808)
    # Processing the call arguments (line 3808)
    # Getting the type of 'Nx' (line 3808)
    Nx_95298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3808, 35), 'Nx', False)
    # Processing the call keyword arguments (line 3808)
    kwargs_95299 = {}
    # Getting the type of 'numpy' (line 3808)
    numpy_95296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3808, 24), 'numpy', False)
    # Obtaining the member 'ones' of a type (line 3808)
    ones_95297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3808, 24), numpy_95296, 'ones')
    # Calling ones(args, kwargs) (line 3808)
    ones_call_result_95300 = invoke(stypy.reporting.localization.Localization(__file__, 3808, 24), ones_95297, *[Nx_95298], **kwargs_95299)
    
    # Applying the binary operator '*' (line 3808)
    result_mul_95301 = python_operator(stypy.reporting.localization.Localization(__file__, 3808, 17), '*', yupper_95295, ones_call_result_95300)
    
    # Assigning a type to the variable 'yupper' (line 3808)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3808, 8), 'yupper', result_mul_95301)
    # SSA join for if statement (line 3807)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3810):
    
    # Assigning a Call to a Name (line 3810):
    
    # Assigning a Call to a Name (line 3810):
    
    # Call to concatenate(...): (line 3810)
    # Processing the call arguments (line 3810)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3810)
    tuple_95304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3810, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3810)
    # Adding element type (line 3810)
    # Getting the type of 'x' (line 3810)
    x_95305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3810, 27), 'x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3810, 27), tuple_95304, x_95305)
    # Adding element type (line 3810)
    
    # Obtaining the type of the subscript
    int_95306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3810, 34), 'int')
    slice_95307 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3810, 30), None, None, int_95306)
    # Getting the type of 'x' (line 3810)
    x_95308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3810, 30), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 3810)
    getitem___95309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3810, 30), x_95308, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3810)
    subscript_call_result_95310 = invoke(stypy.reporting.localization.Localization(__file__, 3810, 30), getitem___95309, slice_95307)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3810, 27), tuple_95304, subscript_call_result_95310)
    
    # Processing the call keyword arguments (line 3810)
    kwargs_95311 = {}
    # Getting the type of 'numpy' (line 3810)
    numpy_95302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3810, 8), 'numpy', False)
    # Obtaining the member 'concatenate' of a type (line 3810)
    concatenate_95303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3810, 8), numpy_95302, 'concatenate')
    # Calling concatenate(args, kwargs) (line 3810)
    concatenate_call_result_95312 = invoke(stypy.reporting.localization.Localization(__file__, 3810, 8), concatenate_95303, *[tuple_95304], **kwargs_95311)
    
    # Assigning a type to the variable 'x' (line 3810)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3810, 4), 'x', concatenate_call_result_95312)
    
    # Assigning a Call to a Name (line 3811):
    
    # Assigning a Call to a Name (line 3811):
    
    # Assigning a Call to a Name (line 3811):
    
    # Call to concatenate(...): (line 3811)
    # Processing the call arguments (line 3811)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3811)
    tuple_95315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3811, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3811)
    # Adding element type (line 3811)
    # Getting the type of 'yupper' (line 3811)
    yupper_95316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 27), 'yupper', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3811, 27), tuple_95315, yupper_95316)
    # Adding element type (line 3811)
    
    # Obtaining the type of the subscript
    int_95317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3811, 44), 'int')
    slice_95318 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3811, 35), None, None, int_95317)
    # Getting the type of 'ylower' (line 3811)
    ylower_95319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 35), 'ylower', False)
    # Obtaining the member '__getitem__' of a type (line 3811)
    getitem___95320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3811, 35), ylower_95319, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3811)
    subscript_call_result_95321 = invoke(stypy.reporting.localization.Localization(__file__, 3811, 35), getitem___95320, slice_95318)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3811, 27), tuple_95315, subscript_call_result_95321)
    
    # Processing the call keyword arguments (line 3811)
    kwargs_95322 = {}
    # Getting the type of 'numpy' (line 3811)
    numpy_95313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 8), 'numpy', False)
    # Obtaining the member 'concatenate' of a type (line 3811)
    concatenate_95314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3811, 8), numpy_95313, 'concatenate')
    # Calling concatenate(args, kwargs) (line 3811)
    concatenate_call_result_95323 = invoke(stypy.reporting.localization.Localization(__file__, 3811, 8), concatenate_95314, *[tuple_95315], **kwargs_95322)
    
    # Assigning a type to the variable 'y' (line 3811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3811, 4), 'y', concatenate_call_result_95323)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3812)
    tuple_95324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3812, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3812)
    # Adding element type (line 3812)
    # Getting the type of 'x' (line 3812)
    x_95325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3812, 11), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3812, 11), tuple_95324, x_95325)
    # Adding element type (line 3812)
    # Getting the type of 'y' (line 3812)
    y_95326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3812, 14), 'y')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3812, 11), tuple_95324, y_95326)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3812)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3812, 4), 'stypy_return_type', tuple_95324)
    
    # ################# End of 'poly_between(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'poly_between' in the type store
    # Getting the type of 'stypy_return_type' (line 3788)
    stypy_return_type_95327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3788, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_95327)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'poly_between'
    return stypy_return_type_95327

# Assigning a type to the variable 'poly_between' (line 3788)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3788, 0), 'poly_between', poly_between)

@norecursion
def is_closed_polygon(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_closed_polygon'
    module_type_store = module_type_store.open_function_context('is_closed_polygon', 3815, 0, False)
    
    # Passed parameters checking function
    is_closed_polygon.stypy_localization = localization
    is_closed_polygon.stypy_type_of_self = None
    is_closed_polygon.stypy_type_store = module_type_store
    is_closed_polygon.stypy_function_name = 'is_closed_polygon'
    is_closed_polygon.stypy_param_names_list = ['X']
    is_closed_polygon.stypy_varargs_param_name = None
    is_closed_polygon.stypy_kwargs_param_name = None
    is_closed_polygon.stypy_call_defaults = defaults
    is_closed_polygon.stypy_call_varargs = varargs
    is_closed_polygon.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_closed_polygon', ['X'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_closed_polygon', localization, ['X'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_closed_polygon(...)' code ##################

    unicode_95328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3820, (-1)), 'unicode', u'\n    Tests whether first and last object in a sequence are the same.  These are\n    presumably coordinates on a polygonal curve, in which case this function\n    tests if that curve is closed.\n    ')
    
    # Call to all(...): (line 3821)
    # Processing the call arguments (line 3821)
    
    
    # Obtaining the type of the subscript
    int_95331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3821, 20), 'int')
    # Getting the type of 'X' (line 3821)
    X_95332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 18), 'X', False)
    # Obtaining the member '__getitem__' of a type (line 3821)
    getitem___95333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3821, 18), X_95332, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3821)
    subscript_call_result_95334 = invoke(stypy.reporting.localization.Localization(__file__, 3821, 18), getitem___95333, int_95331)
    
    
    # Obtaining the type of the subscript
    int_95335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3821, 28), 'int')
    # Getting the type of 'X' (line 3821)
    X_95336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 26), 'X', False)
    # Obtaining the member '__getitem__' of a type (line 3821)
    getitem___95337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3821, 26), X_95336, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3821)
    subscript_call_result_95338 = invoke(stypy.reporting.localization.Localization(__file__, 3821, 26), getitem___95337, int_95335)
    
    # Applying the binary operator '==' (line 3821)
    result_eq_95339 = python_operator(stypy.reporting.localization.Localization(__file__, 3821, 18), '==', subscript_call_result_95334, subscript_call_result_95338)
    
    # Processing the call keyword arguments (line 3821)
    kwargs_95340 = {}
    # Getting the type of 'np' (line 3821)
    np_95329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 11), 'np', False)
    # Obtaining the member 'all' of a type (line 3821)
    all_95330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3821, 11), np_95329, 'all')
    # Calling all(args, kwargs) (line 3821)
    all_call_result_95341 = invoke(stypy.reporting.localization.Localization(__file__, 3821, 11), all_95330, *[result_eq_95339], **kwargs_95340)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3821)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3821, 4), 'stypy_return_type', all_call_result_95341)
    
    # ################# End of 'is_closed_polygon(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_closed_polygon' in the type store
    # Getting the type of 'stypy_return_type' (line 3815)
    stypy_return_type_95342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3815, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_95342)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_closed_polygon'
    return stypy_return_type_95342

# Assigning a type to the variable 'is_closed_polygon' (line 3815)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3815, 0), 'is_closed_polygon', is_closed_polygon)

@norecursion
def contiguous_regions(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'contiguous_regions'
    module_type_store = module_type_store.open_function_context('contiguous_regions', 3824, 0, False)
    
    # Passed parameters checking function
    contiguous_regions.stypy_localization = localization
    contiguous_regions.stypy_type_of_self = None
    contiguous_regions.stypy_type_store = module_type_store
    contiguous_regions.stypy_function_name = 'contiguous_regions'
    contiguous_regions.stypy_param_names_list = ['mask']
    contiguous_regions.stypy_varargs_param_name = None
    contiguous_regions.stypy_kwargs_param_name = None
    contiguous_regions.stypy_call_defaults = defaults
    contiguous_regions.stypy_call_varargs = varargs
    contiguous_regions.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'contiguous_regions', ['mask'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'contiguous_regions', localization, ['mask'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'contiguous_regions(...)' code ##################

    unicode_95343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3828, (-1)), 'unicode', u'\n    return a list of (ind0, ind1) such that mask[ind0:ind1].all() is\n    True and we cover all such regions\n    ')
    
    # Assigning a Call to a Name (line 3829):
    
    # Assigning a Call to a Name (line 3829):
    
    # Assigning a Call to a Name (line 3829):
    
    # Call to asarray(...): (line 3829)
    # Processing the call arguments (line 3829)
    # Getting the type of 'mask' (line 3829)
    mask_95346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3829, 22), 'mask', False)
    # Processing the call keyword arguments (line 3829)
    # Getting the type of 'bool' (line 3829)
    bool_95347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3829, 34), 'bool', False)
    keyword_95348 = bool_95347
    kwargs_95349 = {'dtype': keyword_95348}
    # Getting the type of 'np' (line 3829)
    np_95344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3829, 11), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3829)
    asarray_95345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3829, 11), np_95344, 'asarray')
    # Calling asarray(args, kwargs) (line 3829)
    asarray_call_result_95350 = invoke(stypy.reporting.localization.Localization(__file__, 3829, 11), asarray_95345, *[mask_95346], **kwargs_95349)
    
    # Assigning a type to the variable 'mask' (line 3829)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3829, 4), 'mask', asarray_call_result_95350)
    
    
    # Getting the type of 'mask' (line 3831)
    mask_95351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3831, 11), 'mask')
    # Obtaining the member 'size' of a type (line 3831)
    size_95352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3831, 11), mask_95351, 'size')
    # Applying the 'not' unary operator (line 3831)
    result_not__95353 = python_operator(stypy.reporting.localization.Localization(__file__, 3831, 7), 'not', size_95352)
    
    # Testing the type of an if condition (line 3831)
    if_condition_95354 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3831, 4), result_not__95353)
    # Assigning a type to the variable 'if_condition_95354' (line 3831)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3831, 4), 'if_condition_95354', if_condition_95354)
    # SSA begins for if statement (line 3831)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'list' (line 3832)
    list_95355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3832, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3832)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3832)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3832, 8), 'stypy_return_type', list_95355)
    # SSA join for if statement (line 3831)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 3835):
    
    # Assigning a Call to a Name:
    
    # Assigning a Call to a Name:
    
    # Call to nonzero(...): (line 3835)
    # Processing the call arguments (line 3835)
    
    
    # Obtaining the type of the subscript
    int_95358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3835, 28), 'int')
    slice_95359 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3835, 22), None, int_95358, None)
    # Getting the type of 'mask' (line 3835)
    mask_95360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3835, 22), 'mask', False)
    # Obtaining the member '__getitem__' of a type (line 3835)
    getitem___95361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3835, 22), mask_95360, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3835)
    subscript_call_result_95362 = invoke(stypy.reporting.localization.Localization(__file__, 3835, 22), getitem___95361, slice_95359)
    
    
    # Obtaining the type of the subscript
    int_95363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3835, 40), 'int')
    slice_95364 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3835, 35), int_95363, None, None)
    # Getting the type of 'mask' (line 3835)
    mask_95365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3835, 35), 'mask', False)
    # Obtaining the member '__getitem__' of a type (line 3835)
    getitem___95366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3835, 35), mask_95365, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3835)
    subscript_call_result_95367 = invoke(stypy.reporting.localization.Localization(__file__, 3835, 35), getitem___95366, slice_95364)
    
    # Applying the binary operator '!=' (line 3835)
    result_ne_95368 = python_operator(stypy.reporting.localization.Localization(__file__, 3835, 22), '!=', subscript_call_result_95362, subscript_call_result_95367)
    
    # Processing the call keyword arguments (line 3835)
    kwargs_95369 = {}
    # Getting the type of 'np' (line 3835)
    np_95356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3835, 11), 'np', False)
    # Obtaining the member 'nonzero' of a type (line 3835)
    nonzero_95357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3835, 11), np_95356, 'nonzero')
    # Calling nonzero(args, kwargs) (line 3835)
    nonzero_call_result_95370 = invoke(stypy.reporting.localization.Localization(__file__, 3835, 11), nonzero_95357, *[result_ne_95368], **kwargs_95369)
    
    # Assigning a type to the variable 'call_assignment_87307' (line 3835)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3835, 4), 'call_assignment_87307', nonzero_call_result_95370)
    
    # Assigning a Call to a Name (line 3835):
    
    # Assigning a Call to a Name (line 3835):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_95373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3835, 4), 'int')
    # Processing the call keyword arguments
    kwargs_95374 = {}
    # Getting the type of 'call_assignment_87307' (line 3835)
    call_assignment_87307_95371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3835, 4), 'call_assignment_87307', False)
    # Obtaining the member '__getitem__' of a type (line 3835)
    getitem___95372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3835, 4), call_assignment_87307_95371, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_95375 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___95372, *[int_95373], **kwargs_95374)
    
    # Assigning a type to the variable 'call_assignment_87308' (line 3835)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3835, 4), 'call_assignment_87308', getitem___call_result_95375)
    
    # Assigning a Name to a Name (line 3835):
    
    # Assigning a Name to a Name (line 3835):
    # Getting the type of 'call_assignment_87308' (line 3835)
    call_assignment_87308_95376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3835, 4), 'call_assignment_87308')
    # Assigning a type to the variable 'idx' (line 3835)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3835, 4), 'idx', call_assignment_87308_95376)
    
    # Getting the type of 'idx' (line 3836)
    idx_95377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3836, 4), 'idx')
    int_95378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3836, 11), 'int')
    # Applying the binary operator '+=' (line 3836)
    result_iadd_95379 = python_operator(stypy.reporting.localization.Localization(__file__, 3836, 4), '+=', idx_95377, int_95378)
    # Assigning a type to the variable 'idx' (line 3836)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3836, 4), 'idx', result_iadd_95379)
    
    
    # Assigning a Call to a Name (line 3839):
    
    # Assigning a Call to a Name (line 3839):
    
    # Assigning a Call to a Name (line 3839):
    
    # Call to tolist(...): (line 3839)
    # Processing the call keyword arguments (line 3839)
    kwargs_95382 = {}
    # Getting the type of 'idx' (line 3839)
    idx_95380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3839, 10), 'idx', False)
    # Obtaining the member 'tolist' of a type (line 3839)
    tolist_95381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3839, 10), idx_95380, 'tolist')
    # Calling tolist(args, kwargs) (line 3839)
    tolist_call_result_95383 = invoke(stypy.reporting.localization.Localization(__file__, 3839, 10), tolist_95381, *[], **kwargs_95382)
    
    # Assigning a type to the variable 'idx' (line 3839)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3839, 4), 'idx', tolist_call_result_95383)
    
    
    # Obtaining the type of the subscript
    int_95384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3842, 12), 'int')
    # Getting the type of 'mask' (line 3842)
    mask_95385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3842, 7), 'mask')
    # Obtaining the member '__getitem__' of a type (line 3842)
    getitem___95386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3842, 7), mask_95385, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3842)
    subscript_call_result_95387 = invoke(stypy.reporting.localization.Localization(__file__, 3842, 7), getitem___95386, int_95384)
    
    # Testing the type of an if condition (line 3842)
    if_condition_95388 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3842, 4), subscript_call_result_95387)
    # Assigning a type to the variable 'if_condition_95388' (line 3842)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3842, 4), 'if_condition_95388', if_condition_95388)
    # SSA begins for if statement (line 3842)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3843):
    
    # Assigning a BinOp to a Name (line 3843):
    
    # Assigning a BinOp to a Name (line 3843):
    
    # Obtaining an instance of the builtin type 'list' (line 3843)
    list_95389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3843, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3843)
    # Adding element type (line 3843)
    int_95390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3843, 15), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3843, 14), list_95389, int_95390)
    
    # Getting the type of 'idx' (line 3843)
    idx_95391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3843, 20), 'idx')
    # Applying the binary operator '+' (line 3843)
    result_add_95392 = python_operator(stypy.reporting.localization.Localization(__file__, 3843, 14), '+', list_95389, idx_95391)
    
    # Assigning a type to the variable 'idx' (line 3843)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3843, 8), 'idx', result_add_95392)
    # SSA join for if statement (line 3842)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Obtaining the type of the subscript
    int_95393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3844, 12), 'int')
    # Getting the type of 'mask' (line 3844)
    mask_95394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3844, 7), 'mask')
    # Obtaining the member '__getitem__' of a type (line 3844)
    getitem___95395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3844, 7), mask_95394, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3844)
    subscript_call_result_95396 = invoke(stypy.reporting.localization.Localization(__file__, 3844, 7), getitem___95395, int_95393)
    
    # Testing the type of an if condition (line 3844)
    if_condition_95397 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3844, 4), subscript_call_result_95396)
    # Assigning a type to the variable 'if_condition_95397' (line 3844)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3844, 4), 'if_condition_95397', if_condition_95397)
    # SSA begins for if statement (line 3844)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 3845)
    # Processing the call arguments (line 3845)
    
    # Call to len(...): (line 3845)
    # Processing the call arguments (line 3845)
    # Getting the type of 'mask' (line 3845)
    mask_95401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3845, 23), 'mask', False)
    # Processing the call keyword arguments (line 3845)
    kwargs_95402 = {}
    # Getting the type of 'len' (line 3845)
    len_95400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3845, 19), 'len', False)
    # Calling len(args, kwargs) (line 3845)
    len_call_result_95403 = invoke(stypy.reporting.localization.Localization(__file__, 3845, 19), len_95400, *[mask_95401], **kwargs_95402)
    
    # Processing the call keyword arguments (line 3845)
    kwargs_95404 = {}
    # Getting the type of 'idx' (line 3845)
    idx_95398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3845, 8), 'idx', False)
    # Obtaining the member 'append' of a type (line 3845)
    append_95399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3845, 8), idx_95398, 'append')
    # Calling append(args, kwargs) (line 3845)
    append_call_result_95405 = invoke(stypy.reporting.localization.Localization(__file__, 3845, 8), append_95399, *[len_call_result_95403], **kwargs_95404)
    
    # SSA join for if statement (line 3844)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to list(...): (line 3847)
    # Processing the call arguments (line 3847)
    
    # Call to zip(...): (line 3847)
    # Processing the call arguments (line 3847)
    
    # Obtaining the type of the subscript
    int_95408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3847, 26), 'int')
    slice_95409 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3847, 20), None, None, int_95408)
    # Getting the type of 'idx' (line 3847)
    idx_95410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3847, 20), 'idx', False)
    # Obtaining the member '__getitem__' of a type (line 3847)
    getitem___95411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3847, 20), idx_95410, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3847)
    subscript_call_result_95412 = invoke(stypy.reporting.localization.Localization(__file__, 3847, 20), getitem___95411, slice_95409)
    
    
    # Obtaining the type of the subscript
    int_95413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3847, 34), 'int')
    int_95414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3847, 37), 'int')
    slice_95415 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3847, 30), int_95413, None, int_95414)
    # Getting the type of 'idx' (line 3847)
    idx_95416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3847, 30), 'idx', False)
    # Obtaining the member '__getitem__' of a type (line 3847)
    getitem___95417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3847, 30), idx_95416, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3847)
    subscript_call_result_95418 = invoke(stypy.reporting.localization.Localization(__file__, 3847, 30), getitem___95417, slice_95415)
    
    # Processing the call keyword arguments (line 3847)
    kwargs_95419 = {}
    # Getting the type of 'zip' (line 3847)
    zip_95407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3847, 16), 'zip', False)
    # Calling zip(args, kwargs) (line 3847)
    zip_call_result_95420 = invoke(stypy.reporting.localization.Localization(__file__, 3847, 16), zip_95407, *[subscript_call_result_95412, subscript_call_result_95418], **kwargs_95419)
    
    # Processing the call keyword arguments (line 3847)
    kwargs_95421 = {}
    # Getting the type of 'list' (line 3847)
    list_95406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3847, 11), 'list', False)
    # Calling list(args, kwargs) (line 3847)
    list_call_result_95422 = invoke(stypy.reporting.localization.Localization(__file__, 3847, 11), list_95406, *[zip_call_result_95420], **kwargs_95421)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3847)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3847, 4), 'stypy_return_type', list_call_result_95422)
    
    # ################# End of 'contiguous_regions(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'contiguous_regions' in the type store
    # Getting the type of 'stypy_return_type' (line 3824)
    stypy_return_type_95423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3824, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_95423)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'contiguous_regions'
    return stypy_return_type_95423

# Assigning a type to the variable 'contiguous_regions' (line 3824)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3824, 0), 'contiguous_regions', contiguous_regions)

@norecursion
def cross_from_below(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'cross_from_below'
    module_type_store = module_type_store.open_function_context('cross_from_below', 3850, 0, False)
    
    # Passed parameters checking function
    cross_from_below.stypy_localization = localization
    cross_from_below.stypy_type_of_self = None
    cross_from_below.stypy_type_store = module_type_store
    cross_from_below.stypy_function_name = 'cross_from_below'
    cross_from_below.stypy_param_names_list = ['x', 'threshold']
    cross_from_below.stypy_varargs_param_name = None
    cross_from_below.stypy_kwargs_param_name = None
    cross_from_below.stypy_call_defaults = defaults
    cross_from_below.stypy_call_varargs = varargs
    cross_from_below.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cross_from_below', ['x', 'threshold'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cross_from_below', localization, ['x', 'threshold'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cross_from_below(...)' code ##################

    unicode_95424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3882, (-1)), 'unicode', u"\n    return the indices into *x* where *x* crosses some threshold from\n    below, e.g., the i's where::\n\n      x[i-1]<threshold and x[i]>=threshold\n\n    Example code::\n\n        import matplotlib.pyplot as plt\n\n        t = np.arange(0.0, 2.0, 0.1)\n        s = np.sin(2*np.pi*t)\n\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n        ax.plot(t, s, '-o')\n        ax.axhline(0.5)\n        ax.axhline(-0.5)\n\n        ind = cross_from_below(s, 0.5)\n        ax.vlines(t[ind], -1, 1)\n\n        ind = cross_from_above(s, -0.5)\n        ax.vlines(t[ind], -1, 1)\n\n        plt.show()\n\n    See Also\n    --------\n    :func:`cross_from_above` and :func:`contiguous_regions`\n\n    ")
    
    # Assigning a Call to a Name (line 3883):
    
    # Assigning a Call to a Name (line 3883):
    
    # Assigning a Call to a Name (line 3883):
    
    # Call to asarray(...): (line 3883)
    # Processing the call arguments (line 3883)
    # Getting the type of 'x' (line 3883)
    x_95427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3883, 19), 'x', False)
    # Processing the call keyword arguments (line 3883)
    kwargs_95428 = {}
    # Getting the type of 'np' (line 3883)
    np_95425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3883, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3883)
    asarray_95426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3883, 8), np_95425, 'asarray')
    # Calling asarray(args, kwargs) (line 3883)
    asarray_call_result_95429 = invoke(stypy.reporting.localization.Localization(__file__, 3883, 8), asarray_95426, *[x_95427], **kwargs_95428)
    
    # Assigning a type to the variable 'x' (line 3883)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3883, 4), 'x', asarray_call_result_95429)
    
    # Assigning a Subscript to a Name (line 3884):
    
    # Assigning a Subscript to a Name (line 3884):
    
    # Assigning a Subscript to a Name (line 3884):
    
    # Obtaining the type of the subscript
    int_95430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3884, 66), 'int')
    
    # Call to nonzero(...): (line 3884)
    # Processing the call arguments (line 3884)
    
    
    # Obtaining the type of the subscript
    int_95433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3884, 25), 'int')
    slice_95434 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3884, 22), None, int_95433, None)
    # Getting the type of 'x' (line 3884)
    x_95435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3884, 22), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 3884)
    getitem___95436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3884, 22), x_95435, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3884)
    subscript_call_result_95437 = invoke(stypy.reporting.localization.Localization(__file__, 3884, 22), getitem___95436, slice_95434)
    
    # Getting the type of 'threshold' (line 3884)
    threshold_95438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3884, 31), 'threshold', False)
    # Applying the binary operator '<' (line 3884)
    result_lt_95439 = python_operator(stypy.reporting.localization.Localization(__file__, 3884, 22), '<', subscript_call_result_95437, threshold_95438)
    
    
    
    # Obtaining the type of the subscript
    int_95440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3884, 47), 'int')
    slice_95441 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3884, 45), int_95440, None, None)
    # Getting the type of 'x' (line 3884)
    x_95442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3884, 45), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 3884)
    getitem___95443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3884, 45), x_95442, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3884)
    subscript_call_result_95444 = invoke(stypy.reporting.localization.Localization(__file__, 3884, 45), getitem___95443, slice_95441)
    
    # Getting the type of 'threshold' (line 3884)
    threshold_95445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3884, 54), 'threshold', False)
    # Applying the binary operator '>=' (line 3884)
    result_ge_95446 = python_operator(stypy.reporting.localization.Localization(__file__, 3884, 45), '>=', subscript_call_result_95444, threshold_95445)
    
    # Applying the binary operator '&' (line 3884)
    result_and__95447 = python_operator(stypy.reporting.localization.Localization(__file__, 3884, 21), '&', result_lt_95439, result_ge_95446)
    
    # Processing the call keyword arguments (line 3884)
    kwargs_95448 = {}
    # Getting the type of 'np' (line 3884)
    np_95431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3884, 10), 'np', False)
    # Obtaining the member 'nonzero' of a type (line 3884)
    nonzero_95432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3884, 10), np_95431, 'nonzero')
    # Calling nonzero(args, kwargs) (line 3884)
    nonzero_call_result_95449 = invoke(stypy.reporting.localization.Localization(__file__, 3884, 10), nonzero_95432, *[result_and__95447], **kwargs_95448)
    
    # Obtaining the member '__getitem__' of a type (line 3884)
    getitem___95450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3884, 10), nonzero_call_result_95449, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3884)
    subscript_call_result_95451 = invoke(stypy.reporting.localization.Localization(__file__, 3884, 10), getitem___95450, int_95430)
    
    # Assigning a type to the variable 'ind' (line 3884)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3884, 4), 'ind', subscript_call_result_95451)
    
    
    # Call to len(...): (line 3885)
    # Processing the call arguments (line 3885)
    # Getting the type of 'ind' (line 3885)
    ind_95453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3885, 11), 'ind', False)
    # Processing the call keyword arguments (line 3885)
    kwargs_95454 = {}
    # Getting the type of 'len' (line 3885)
    len_95452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3885, 7), 'len', False)
    # Calling len(args, kwargs) (line 3885)
    len_call_result_95455 = invoke(stypy.reporting.localization.Localization(__file__, 3885, 7), len_95452, *[ind_95453], **kwargs_95454)
    
    # Testing the type of an if condition (line 3885)
    if_condition_95456 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3885, 4), len_call_result_95455)
    # Assigning a type to the variable 'if_condition_95456' (line 3885)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3885, 4), 'if_condition_95456', if_condition_95456)
    # SSA begins for if statement (line 3885)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'ind' (line 3886)
    ind_95457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3886, 15), 'ind')
    int_95458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3886, 19), 'int')
    # Applying the binary operator '+' (line 3886)
    result_add_95459 = python_operator(stypy.reporting.localization.Localization(__file__, 3886, 15), '+', ind_95457, int_95458)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3886)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3886, 8), 'stypy_return_type', result_add_95459)
    # SSA branch for the else part of an if statement (line 3885)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'ind' (line 3888)
    ind_95460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3888, 15), 'ind')
    # Assigning a type to the variable 'stypy_return_type' (line 3888)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3888, 8), 'stypy_return_type', ind_95460)
    # SSA join for if statement (line 3885)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'cross_from_below(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cross_from_below' in the type store
    # Getting the type of 'stypy_return_type' (line 3850)
    stypy_return_type_95461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3850, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_95461)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cross_from_below'
    return stypy_return_type_95461

# Assigning a type to the variable 'cross_from_below' (line 3850)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3850, 0), 'cross_from_below', cross_from_below)

@norecursion
def cross_from_above(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'cross_from_above'
    module_type_store = module_type_store.open_function_context('cross_from_above', 3891, 0, False)
    
    # Passed parameters checking function
    cross_from_above.stypy_localization = localization
    cross_from_above.stypy_type_of_self = None
    cross_from_above.stypy_type_store = module_type_store
    cross_from_above.stypy_function_name = 'cross_from_above'
    cross_from_above.stypy_param_names_list = ['x', 'threshold']
    cross_from_above.stypy_varargs_param_name = None
    cross_from_above.stypy_kwargs_param_name = None
    cross_from_above.stypy_call_defaults = defaults
    cross_from_above.stypy_call_varargs = varargs
    cross_from_above.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cross_from_above', ['x', 'threshold'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cross_from_above', localization, ['x', 'threshold'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cross_from_above(...)' code ##################

    unicode_95462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3902, (-1)), 'unicode', u"\n    return the indices into *x* where *x* crosses some threshold from\n    below, e.g., the i's where::\n\n      x[i-1]>threshold and x[i]<=threshold\n\n    See Also\n    --------\n    :func:`cross_from_below` and :func:`contiguous_regions`\n\n    ")
    
    # Assigning a Call to a Name (line 3903):
    
    # Assigning a Call to a Name (line 3903):
    
    # Assigning a Call to a Name (line 3903):
    
    # Call to asarray(...): (line 3903)
    # Processing the call arguments (line 3903)
    # Getting the type of 'x' (line 3903)
    x_95465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3903, 19), 'x', False)
    # Processing the call keyword arguments (line 3903)
    kwargs_95466 = {}
    # Getting the type of 'np' (line 3903)
    np_95463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3903, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3903)
    asarray_95464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3903, 8), np_95463, 'asarray')
    # Calling asarray(args, kwargs) (line 3903)
    asarray_call_result_95467 = invoke(stypy.reporting.localization.Localization(__file__, 3903, 8), asarray_95464, *[x_95465], **kwargs_95466)
    
    # Assigning a type to the variable 'x' (line 3903)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3903, 4), 'x', asarray_call_result_95467)
    
    # Assigning a Subscript to a Name (line 3904):
    
    # Assigning a Subscript to a Name (line 3904):
    
    # Assigning a Subscript to a Name (line 3904):
    
    # Obtaining the type of the subscript
    int_95468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3904, 66), 'int')
    
    # Call to nonzero(...): (line 3904)
    # Processing the call arguments (line 3904)
    
    
    # Obtaining the type of the subscript
    int_95471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3904, 25), 'int')
    slice_95472 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3904, 22), None, int_95471, None)
    # Getting the type of 'x' (line 3904)
    x_95473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3904, 22), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 3904)
    getitem___95474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3904, 22), x_95473, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3904)
    subscript_call_result_95475 = invoke(stypy.reporting.localization.Localization(__file__, 3904, 22), getitem___95474, slice_95472)
    
    # Getting the type of 'threshold' (line 3904)
    threshold_95476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3904, 32), 'threshold', False)
    # Applying the binary operator '>=' (line 3904)
    result_ge_95477 = python_operator(stypy.reporting.localization.Localization(__file__, 3904, 22), '>=', subscript_call_result_95475, threshold_95476)
    
    
    
    # Obtaining the type of the subscript
    int_95478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3904, 48), 'int')
    slice_95479 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3904, 46), int_95478, None, None)
    # Getting the type of 'x' (line 3904)
    x_95480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3904, 46), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 3904)
    getitem___95481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3904, 46), x_95480, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3904)
    subscript_call_result_95482 = invoke(stypy.reporting.localization.Localization(__file__, 3904, 46), getitem___95481, slice_95479)
    
    # Getting the type of 'threshold' (line 3904)
    threshold_95483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3904, 54), 'threshold', False)
    # Applying the binary operator '<' (line 3904)
    result_lt_95484 = python_operator(stypy.reporting.localization.Localization(__file__, 3904, 46), '<', subscript_call_result_95482, threshold_95483)
    
    # Applying the binary operator '&' (line 3904)
    result_and__95485 = python_operator(stypy.reporting.localization.Localization(__file__, 3904, 21), '&', result_ge_95477, result_lt_95484)
    
    # Processing the call keyword arguments (line 3904)
    kwargs_95486 = {}
    # Getting the type of 'np' (line 3904)
    np_95469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3904, 10), 'np', False)
    # Obtaining the member 'nonzero' of a type (line 3904)
    nonzero_95470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3904, 10), np_95469, 'nonzero')
    # Calling nonzero(args, kwargs) (line 3904)
    nonzero_call_result_95487 = invoke(stypy.reporting.localization.Localization(__file__, 3904, 10), nonzero_95470, *[result_and__95485], **kwargs_95486)
    
    # Obtaining the member '__getitem__' of a type (line 3904)
    getitem___95488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3904, 10), nonzero_call_result_95487, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3904)
    subscript_call_result_95489 = invoke(stypy.reporting.localization.Localization(__file__, 3904, 10), getitem___95488, int_95468)
    
    # Assigning a type to the variable 'ind' (line 3904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3904, 4), 'ind', subscript_call_result_95489)
    
    
    # Call to len(...): (line 3905)
    # Processing the call arguments (line 3905)
    # Getting the type of 'ind' (line 3905)
    ind_95491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3905, 11), 'ind', False)
    # Processing the call keyword arguments (line 3905)
    kwargs_95492 = {}
    # Getting the type of 'len' (line 3905)
    len_95490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3905, 7), 'len', False)
    # Calling len(args, kwargs) (line 3905)
    len_call_result_95493 = invoke(stypy.reporting.localization.Localization(__file__, 3905, 7), len_95490, *[ind_95491], **kwargs_95492)
    
    # Testing the type of an if condition (line 3905)
    if_condition_95494 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3905, 4), len_call_result_95493)
    # Assigning a type to the variable 'if_condition_95494' (line 3905)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3905, 4), 'if_condition_95494', if_condition_95494)
    # SSA begins for if statement (line 3905)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'ind' (line 3906)
    ind_95495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3906, 15), 'ind')
    int_95496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3906, 19), 'int')
    # Applying the binary operator '+' (line 3906)
    result_add_95497 = python_operator(stypy.reporting.localization.Localization(__file__, 3906, 15), '+', ind_95495, int_95496)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3906)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3906, 8), 'stypy_return_type', result_add_95497)
    # SSA branch for the else part of an if statement (line 3905)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'ind' (line 3908)
    ind_95498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3908, 15), 'ind')
    # Assigning a type to the variable 'stypy_return_type' (line 3908)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3908, 8), 'stypy_return_type', ind_95498)
    # SSA join for if statement (line 3905)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'cross_from_above(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cross_from_above' in the type store
    # Getting the type of 'stypy_return_type' (line 3891)
    stypy_return_type_95499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3891, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_95499)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cross_from_above'
    return stypy_return_type_95499

# Assigning a type to the variable 'cross_from_above' (line 3891)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3891, 0), 'cross_from_above', cross_from_above)

@norecursion
def vector_lengths(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_95500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3914, 24), 'float')
    # Getting the type of 'None' (line 3914)
    None_95501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3914, 33), 'None')
    defaults = [float_95500, None_95501]
    # Create a new context for function 'vector_lengths'
    module_type_store = module_type_store.open_function_context('vector_lengths', 3914, 0, False)
    
    # Passed parameters checking function
    vector_lengths.stypy_localization = localization
    vector_lengths.stypy_type_of_self = None
    vector_lengths.stypy_type_store = module_type_store
    vector_lengths.stypy_function_name = 'vector_lengths'
    vector_lengths.stypy_param_names_list = ['X', 'P', 'axis']
    vector_lengths.stypy_varargs_param_name = None
    vector_lengths.stypy_kwargs_param_name = None
    vector_lengths.stypy_call_defaults = defaults
    vector_lengths.stypy_call_varargs = varargs
    vector_lengths.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'vector_lengths', ['X', 'P', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'vector_lengths', localization, ['X', 'P', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'vector_lengths(...)' code ##################

    unicode_95502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3923, (-1)), 'unicode', u'\n    Finds the length of a set of vectors in *n* dimensions.  This is\n    like the :func:`numpy.norm` function for vectors, but has the ability to\n    work over a particular axis of the supplied array or matrix.\n\n    Computes ``(sum((x_i)^P))^(1/P)`` for each ``{x_i}`` being the\n    elements of *X* along the given axis.  If *axis* is *None*,\n    compute over all elements of *X*.\n    ')
    
    # Assigning a Call to a Name (line 3924):
    
    # Assigning a Call to a Name (line 3924):
    
    # Assigning a Call to a Name (line 3924):
    
    # Call to asarray(...): (line 3924)
    # Processing the call arguments (line 3924)
    # Getting the type of 'X' (line 3924)
    X_95505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3924, 19), 'X', False)
    # Processing the call keyword arguments (line 3924)
    kwargs_95506 = {}
    # Getting the type of 'np' (line 3924)
    np_95503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3924, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3924)
    asarray_95504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3924, 8), np_95503, 'asarray')
    # Calling asarray(args, kwargs) (line 3924)
    asarray_call_result_95507 = invoke(stypy.reporting.localization.Localization(__file__, 3924, 8), asarray_95504, *[X_95505], **kwargs_95506)
    
    # Assigning a type to the variable 'X' (line 3924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3924, 4), 'X', asarray_call_result_95507)
    
    # Call to sum(...): (line 3925)
    # Processing the call arguments (line 3925)
    # Getting the type of 'X' (line 3925)
    X_95510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3925, 19), 'X', False)
    # Getting the type of 'P' (line 3925)
    P_95511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3925, 23), 'P', False)
    # Applying the binary operator '**' (line 3925)
    result_pow_95512 = python_operator(stypy.reporting.localization.Localization(__file__, 3925, 19), '**', X_95510, P_95511)
    
    # Processing the call keyword arguments (line 3925)
    # Getting the type of 'axis' (line 3925)
    axis_95513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3925, 32), 'axis', False)
    keyword_95514 = axis_95513
    kwargs_95515 = {'axis': keyword_95514}
    # Getting the type of 'np' (line 3925)
    np_95508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3925, 12), 'np', False)
    # Obtaining the member 'sum' of a type (line 3925)
    sum_95509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3925, 12), np_95508, 'sum')
    # Calling sum(args, kwargs) (line 3925)
    sum_call_result_95516 = invoke(stypy.reporting.localization.Localization(__file__, 3925, 12), sum_95509, *[result_pow_95512], **kwargs_95515)
    
    float_95517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3925, 41), 'float')
    # Getting the type of 'P' (line 3925)
    P_95518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3925, 44), 'P')
    # Applying the binary operator 'div' (line 3925)
    result_div_95519 = python_operator(stypy.reporting.localization.Localization(__file__, 3925, 41), 'div', float_95517, P_95518)
    
    # Applying the binary operator '**' (line 3925)
    result_pow_95520 = python_operator(stypy.reporting.localization.Localization(__file__, 3925, 11), '**', sum_call_result_95516, result_div_95519)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3925)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3925, 4), 'stypy_return_type', result_pow_95520)
    
    # ################# End of 'vector_lengths(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'vector_lengths' in the type store
    # Getting the type of 'stypy_return_type' (line 3914)
    stypy_return_type_95521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3914, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_95521)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'vector_lengths'
    return stypy_return_type_95521

# Assigning a type to the variable 'vector_lengths' (line 3914)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3914, 0), 'vector_lengths', vector_lengths)

@norecursion
def distances_along_curve(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'distances_along_curve'
    module_type_store = module_type_store.open_function_context('distances_along_curve', 3928, 0, False)
    
    # Passed parameters checking function
    distances_along_curve.stypy_localization = localization
    distances_along_curve.stypy_type_of_self = None
    distances_along_curve.stypy_type_store = module_type_store
    distances_along_curve.stypy_function_name = 'distances_along_curve'
    distances_along_curve.stypy_param_names_list = ['X']
    distances_along_curve.stypy_varargs_param_name = None
    distances_along_curve.stypy_kwargs_param_name = None
    distances_along_curve.stypy_call_defaults = defaults
    distances_along_curve.stypy_call_varargs = varargs
    distances_along_curve.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'distances_along_curve', ['X'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'distances_along_curve', localization, ['X'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'distances_along_curve(...)' code ##################

    unicode_95522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3935, (-1)), 'unicode', u'\n    Computes the distance between a set of successive points in *N* dimensions.\n\n    Where *X* is an *M* x *N* array or matrix.  The distances between\n    successive rows is computed.  Distance is the standard Euclidean\n    distance.\n    ')
    
    # Assigning a Call to a Name (line 3936):
    
    # Assigning a Call to a Name (line 3936):
    
    # Assigning a Call to a Name (line 3936):
    
    # Call to diff(...): (line 3936)
    # Processing the call arguments (line 3936)
    # Getting the type of 'X' (line 3936)
    X_95525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3936, 16), 'X', False)
    # Processing the call keyword arguments (line 3936)
    int_95526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3936, 24), 'int')
    keyword_95527 = int_95526
    kwargs_95528 = {'axis': keyword_95527}
    # Getting the type of 'np' (line 3936)
    np_95523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3936, 8), 'np', False)
    # Obtaining the member 'diff' of a type (line 3936)
    diff_95524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3936, 8), np_95523, 'diff')
    # Calling diff(args, kwargs) (line 3936)
    diff_call_result_95529 = invoke(stypy.reporting.localization.Localization(__file__, 3936, 8), diff_95524, *[X_95525], **kwargs_95528)
    
    # Assigning a type to the variable 'X' (line 3936)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3936, 4), 'X', diff_call_result_95529)
    
    # Call to vector_lengths(...): (line 3937)
    # Processing the call arguments (line 3937)
    # Getting the type of 'X' (line 3937)
    X_95531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3937, 26), 'X', False)
    # Processing the call keyword arguments (line 3937)
    int_95532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3937, 34), 'int')
    keyword_95533 = int_95532
    kwargs_95534 = {'axis': keyword_95533}
    # Getting the type of 'vector_lengths' (line 3937)
    vector_lengths_95530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3937, 11), 'vector_lengths', False)
    # Calling vector_lengths(args, kwargs) (line 3937)
    vector_lengths_call_result_95535 = invoke(stypy.reporting.localization.Localization(__file__, 3937, 11), vector_lengths_95530, *[X_95531], **kwargs_95534)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3937)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3937, 4), 'stypy_return_type', vector_lengths_call_result_95535)
    
    # ################# End of 'distances_along_curve(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'distances_along_curve' in the type store
    # Getting the type of 'stypy_return_type' (line 3928)
    stypy_return_type_95536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3928, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_95536)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'distances_along_curve'
    return stypy_return_type_95536

# Assigning a type to the variable 'distances_along_curve' (line 3928)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3928, 0), 'distances_along_curve', distances_along_curve)

@norecursion
def path_length(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'path_length'
    module_type_store = module_type_store.open_function_context('path_length', 3940, 0, False)
    
    # Passed parameters checking function
    path_length.stypy_localization = localization
    path_length.stypy_type_of_self = None
    path_length.stypy_type_store = module_type_store
    path_length.stypy_function_name = 'path_length'
    path_length.stypy_param_names_list = ['X']
    path_length.stypy_varargs_param_name = None
    path_length.stypy_kwargs_param_name = None
    path_length.stypy_call_defaults = defaults
    path_length.stypy_call_varargs = varargs
    path_length.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'path_length', ['X'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'path_length', localization, ['X'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'path_length(...)' code ##################

    unicode_95537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3947, (-1)), 'unicode', u'\n    Computes the distance travelled along a polygonal curve in *N* dimensions.\n\n    Where *X* is an *M* x *N* array or matrix.  Returns an array of\n    length *M* consisting of the distance along the curve at each point\n    (i.e., the rows of *X*).\n    ')
    
    # Assigning a Call to a Name (line 3948):
    
    # Assigning a Call to a Name (line 3948):
    
    # Assigning a Call to a Name (line 3948):
    
    # Call to distances_along_curve(...): (line 3948)
    # Processing the call arguments (line 3948)
    # Getting the type of 'X' (line 3948)
    X_95539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3948, 30), 'X', False)
    # Processing the call keyword arguments (line 3948)
    kwargs_95540 = {}
    # Getting the type of 'distances_along_curve' (line 3948)
    distances_along_curve_95538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3948, 8), 'distances_along_curve', False)
    # Calling distances_along_curve(args, kwargs) (line 3948)
    distances_along_curve_call_result_95541 = invoke(stypy.reporting.localization.Localization(__file__, 3948, 8), distances_along_curve_95538, *[X_95539], **kwargs_95540)
    
    # Assigning a type to the variable 'X' (line 3948)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3948, 4), 'X', distances_along_curve_call_result_95541)
    
    # Call to concatenate(...): (line 3949)
    # Processing the call arguments (line 3949)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3949)
    tuple_95544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3949, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3949)
    # Adding element type (line 3949)
    
    # Call to zeros(...): (line 3949)
    # Processing the call arguments (line 3949)
    int_95547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3949, 36), 'int')
    # Processing the call keyword arguments (line 3949)
    kwargs_95548 = {}
    # Getting the type of 'np' (line 3949)
    np_95545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3949, 27), 'np', False)
    # Obtaining the member 'zeros' of a type (line 3949)
    zeros_95546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3949, 27), np_95545, 'zeros')
    # Calling zeros(args, kwargs) (line 3949)
    zeros_call_result_95549 = invoke(stypy.reporting.localization.Localization(__file__, 3949, 27), zeros_95546, *[int_95547], **kwargs_95548)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3949, 27), tuple_95544, zeros_call_result_95549)
    # Adding element type (line 3949)
    
    # Call to cumsum(...): (line 3949)
    # Processing the call arguments (line 3949)
    # Getting the type of 'X' (line 3949)
    X_95552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3949, 50), 'X', False)
    # Processing the call keyword arguments (line 3949)
    kwargs_95553 = {}
    # Getting the type of 'np' (line 3949)
    np_95550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3949, 40), 'np', False)
    # Obtaining the member 'cumsum' of a type (line 3949)
    cumsum_95551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3949, 40), np_95550, 'cumsum')
    # Calling cumsum(args, kwargs) (line 3949)
    cumsum_call_result_95554 = invoke(stypy.reporting.localization.Localization(__file__, 3949, 40), cumsum_95551, *[X_95552], **kwargs_95553)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3949, 27), tuple_95544, cumsum_call_result_95554)
    
    # Processing the call keyword arguments (line 3949)
    kwargs_95555 = {}
    # Getting the type of 'np' (line 3949)
    np_95542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3949, 11), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 3949)
    concatenate_95543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3949, 11), np_95542, 'concatenate')
    # Calling concatenate(args, kwargs) (line 3949)
    concatenate_call_result_95556 = invoke(stypy.reporting.localization.Localization(__file__, 3949, 11), concatenate_95543, *[tuple_95544], **kwargs_95555)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3949)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3949, 4), 'stypy_return_type', concatenate_call_result_95556)
    
    # ################# End of 'path_length(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'path_length' in the type store
    # Getting the type of 'stypy_return_type' (line 3940)
    stypy_return_type_95557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3940, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_95557)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'path_length'
    return stypy_return_type_95557

# Assigning a type to the variable 'path_length' (line 3940)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3940, 0), 'path_length', path_length)

@norecursion
def quad2cubic(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'quad2cubic'
    module_type_store = module_type_store.open_function_context('quad2cubic', 3952, 0, False)
    
    # Passed parameters checking function
    quad2cubic.stypy_localization = localization
    quad2cubic.stypy_type_of_self = None
    quad2cubic.stypy_type_store = module_type_store
    quad2cubic.stypy_function_name = 'quad2cubic'
    quad2cubic.stypy_param_names_list = ['q0x', 'q0y', 'q1x', 'q1y', 'q2x', 'q2y']
    quad2cubic.stypy_varargs_param_name = None
    quad2cubic.stypy_kwargs_param_name = None
    quad2cubic.stypy_call_defaults = defaults
    quad2cubic.stypy_call_varargs = varargs
    quad2cubic.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'quad2cubic', ['q0x', 'q0y', 'q1x', 'q1y', 'q2x', 'q2y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'quad2cubic', localization, ['q0x', 'q0y', 'q1x', 'q1y', 'q2x', 'q2y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'quad2cubic(...)' code ##################

    unicode_95558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3959, (-1)), 'unicode', u'\n    Converts a quadratic Bezier curve to a cubic approximation.\n\n    The inputs are the *x* and *y* coordinates of the three control\n    points of a quadratic curve, and the output is a tuple of *x* and\n    *y* coordinates of the four control points of the cubic curve.\n    ')
    
    # Assigning a Tuple to a Tuple (line 3963):
    
    # Assigning a BinOp to a Name (line 3963):
    
    # Assigning a BinOp to a Name (line 3963):
    # Getting the type of 'q0x' (line 3963)
    q0x_95559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3963, 15), 'q0x')
    float_95560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3963, 21), 'float')
    float_95561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3963, 24), 'float')
    # Applying the binary operator 'div' (line 3963)
    result_div_95562 = python_operator(stypy.reporting.localization.Localization(__file__, 3963, 21), 'div', float_95560, float_95561)
    
    # Getting the type of 'q1x' (line 3963)
    q1x_95563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3963, 30), 'q1x')
    # Getting the type of 'q0x' (line 3963)
    q0x_95564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3963, 36), 'q0x')
    # Applying the binary operator '-' (line 3963)
    result_sub_95565 = python_operator(stypy.reporting.localization.Localization(__file__, 3963, 30), '-', q1x_95563, q0x_95564)
    
    # Applying the binary operator '*' (line 3963)
    result_mul_95566 = python_operator(stypy.reporting.localization.Localization(__file__, 3963, 27), '*', result_div_95562, result_sub_95565)
    
    # Applying the binary operator '+' (line 3963)
    result_add_95567 = python_operator(stypy.reporting.localization.Localization(__file__, 3963, 15), '+', q0x_95559, result_mul_95566)
    
    # Assigning a type to the variable 'tuple_assignment_87309' (line 3963)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3963, 4), 'tuple_assignment_87309', result_add_95567)
    
    # Assigning a BinOp to a Name (line 3963):
    
    # Assigning a BinOp to a Name (line 3963):
    # Getting the type of 'q0y' (line 3963)
    q0y_95568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3963, 42), 'q0y')
    float_95569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3963, 48), 'float')
    float_95570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3963, 51), 'float')
    # Applying the binary operator 'div' (line 3963)
    result_div_95571 = python_operator(stypy.reporting.localization.Localization(__file__, 3963, 48), 'div', float_95569, float_95570)
    
    # Getting the type of 'q1y' (line 3963)
    q1y_95572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3963, 57), 'q1y')
    # Getting the type of 'q0y' (line 3963)
    q0y_95573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3963, 63), 'q0y')
    # Applying the binary operator '-' (line 3963)
    result_sub_95574 = python_operator(stypy.reporting.localization.Localization(__file__, 3963, 57), '-', q1y_95572, q0y_95573)
    
    # Applying the binary operator '*' (line 3963)
    result_mul_95575 = python_operator(stypy.reporting.localization.Localization(__file__, 3963, 54), '*', result_div_95571, result_sub_95574)
    
    # Applying the binary operator '+' (line 3963)
    result_add_95576 = python_operator(stypy.reporting.localization.Localization(__file__, 3963, 42), '+', q0y_95568, result_mul_95575)
    
    # Assigning a type to the variable 'tuple_assignment_87310' (line 3963)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3963, 4), 'tuple_assignment_87310', result_add_95576)
    
    # Assigning a Name to a Name (line 3963):
    
    # Assigning a Name to a Name (line 3963):
    # Getting the type of 'tuple_assignment_87309' (line 3963)
    tuple_assignment_87309_95577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3963, 4), 'tuple_assignment_87309')
    # Assigning a type to the variable 'c1x' (line 3963)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3963, 4), 'c1x', tuple_assignment_87309_95577)
    
    # Assigning a Name to a Name (line 3963):
    
    # Assigning a Name to a Name (line 3963):
    # Getting the type of 'tuple_assignment_87310' (line 3963)
    tuple_assignment_87310_95578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3963, 4), 'tuple_assignment_87310')
    # Assigning a type to the variable 'c1y' (line 3963)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3963, 9), 'c1y', tuple_assignment_87310_95578)
    
    # Assigning a Tuple to a Tuple (line 3964):
    
    # Assigning a BinOp to a Name (line 3964):
    
    # Assigning a BinOp to a Name (line 3964):
    # Getting the type of 'c1x' (line 3964)
    c1x_95579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3964, 15), 'c1x')
    float_95580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3964, 21), 'float')
    float_95581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3964, 24), 'float')
    # Applying the binary operator 'div' (line 3964)
    result_div_95582 = python_operator(stypy.reporting.localization.Localization(__file__, 3964, 21), 'div', float_95580, float_95581)
    
    # Getting the type of 'q2x' (line 3964)
    q2x_95583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3964, 30), 'q2x')
    # Getting the type of 'q0x' (line 3964)
    q0x_95584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3964, 36), 'q0x')
    # Applying the binary operator '-' (line 3964)
    result_sub_95585 = python_operator(stypy.reporting.localization.Localization(__file__, 3964, 30), '-', q2x_95583, q0x_95584)
    
    # Applying the binary operator '*' (line 3964)
    result_mul_95586 = python_operator(stypy.reporting.localization.Localization(__file__, 3964, 27), '*', result_div_95582, result_sub_95585)
    
    # Applying the binary operator '+' (line 3964)
    result_add_95587 = python_operator(stypy.reporting.localization.Localization(__file__, 3964, 15), '+', c1x_95579, result_mul_95586)
    
    # Assigning a type to the variable 'tuple_assignment_87311' (line 3964)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3964, 4), 'tuple_assignment_87311', result_add_95587)
    
    # Assigning a BinOp to a Name (line 3964):
    
    # Assigning a BinOp to a Name (line 3964):
    # Getting the type of 'c1y' (line 3964)
    c1y_95588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3964, 42), 'c1y')
    float_95589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3964, 48), 'float')
    float_95590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3964, 51), 'float')
    # Applying the binary operator 'div' (line 3964)
    result_div_95591 = python_operator(stypy.reporting.localization.Localization(__file__, 3964, 48), 'div', float_95589, float_95590)
    
    # Getting the type of 'q2y' (line 3964)
    q2y_95592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3964, 57), 'q2y')
    # Getting the type of 'q0y' (line 3964)
    q0y_95593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3964, 63), 'q0y')
    # Applying the binary operator '-' (line 3964)
    result_sub_95594 = python_operator(stypy.reporting.localization.Localization(__file__, 3964, 57), '-', q2y_95592, q0y_95593)
    
    # Applying the binary operator '*' (line 3964)
    result_mul_95595 = python_operator(stypy.reporting.localization.Localization(__file__, 3964, 54), '*', result_div_95591, result_sub_95594)
    
    # Applying the binary operator '+' (line 3964)
    result_add_95596 = python_operator(stypy.reporting.localization.Localization(__file__, 3964, 42), '+', c1y_95588, result_mul_95595)
    
    # Assigning a type to the variable 'tuple_assignment_87312' (line 3964)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3964, 4), 'tuple_assignment_87312', result_add_95596)
    
    # Assigning a Name to a Name (line 3964):
    
    # Assigning a Name to a Name (line 3964):
    # Getting the type of 'tuple_assignment_87311' (line 3964)
    tuple_assignment_87311_95597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3964, 4), 'tuple_assignment_87311')
    # Assigning a type to the variable 'c2x' (line 3964)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3964, 4), 'c2x', tuple_assignment_87311_95597)
    
    # Assigning a Name to a Name (line 3964):
    
    # Assigning a Name to a Name (line 3964):
    # Getting the type of 'tuple_assignment_87312' (line 3964)
    tuple_assignment_87312_95598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3964, 4), 'tuple_assignment_87312')
    # Assigning a type to the variable 'c2y' (line 3964)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3964, 9), 'c2y', tuple_assignment_87312_95598)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3966)
    tuple_95599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3966, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3966)
    # Adding element type (line 3966)
    # Getting the type of 'q0x' (line 3966)
    q0x_95600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3966, 11), 'q0x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3966, 11), tuple_95599, q0x_95600)
    # Adding element type (line 3966)
    # Getting the type of 'q0y' (line 3966)
    q0y_95601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3966, 16), 'q0y')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3966, 11), tuple_95599, q0y_95601)
    # Adding element type (line 3966)
    # Getting the type of 'c1x' (line 3966)
    c1x_95602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3966, 21), 'c1x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3966, 11), tuple_95599, c1x_95602)
    # Adding element type (line 3966)
    # Getting the type of 'c1y' (line 3966)
    c1y_95603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3966, 26), 'c1y')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3966, 11), tuple_95599, c1y_95603)
    # Adding element type (line 3966)
    # Getting the type of 'c2x' (line 3966)
    c2x_95604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3966, 31), 'c2x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3966, 11), tuple_95599, c2x_95604)
    # Adding element type (line 3966)
    # Getting the type of 'c2y' (line 3966)
    c2y_95605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3966, 36), 'c2y')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3966, 11), tuple_95599, c2y_95605)
    # Adding element type (line 3966)
    # Getting the type of 'q2x' (line 3966)
    q2x_95606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3966, 41), 'q2x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3966, 11), tuple_95599, q2x_95606)
    # Adding element type (line 3966)
    # Getting the type of 'q2y' (line 3966)
    q2y_95607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3966, 46), 'q2y')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3966, 11), tuple_95599, q2y_95607)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3966)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3966, 4), 'stypy_return_type', tuple_95599)
    
    # ################# End of 'quad2cubic(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'quad2cubic' in the type store
    # Getting the type of 'stypy_return_type' (line 3952)
    stypy_return_type_95608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3952, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_95608)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'quad2cubic'
    return stypy_return_type_95608

# Assigning a type to the variable 'quad2cubic' (line 3952)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3952, 0), 'quad2cubic', quad2cubic)

@norecursion
def offset_line(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'offset_line'
    module_type_store = module_type_store.open_function_context('offset_line', 3969, 0, False)
    
    # Passed parameters checking function
    offset_line.stypy_localization = localization
    offset_line.stypy_type_of_self = None
    offset_line.stypy_type_store = module_type_store
    offset_line.stypy_function_name = 'offset_line'
    offset_line.stypy_param_names_list = ['y', 'yerr']
    offset_line.stypy_varargs_param_name = None
    offset_line.stypy_kwargs_param_name = None
    offset_line.stypy_call_defaults = defaults
    offset_line.stypy_call_varargs = varargs
    offset_line.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'offset_line', ['y', 'yerr'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'offset_line', localization, ['y', 'yerr'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'offset_line(...)' code ##################

    unicode_95609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3990, (-1)), 'unicode', u'\n    Offsets an array *y* by +/- an error and returns a tuple\n    (y - err, y + err).\n\n    The error term can be:\n\n    * A scalar. In this case, the returned tuple is obvious.\n    * A vector of the same length as *y*. The quantities y +/- err are computed\n      component-wise.\n    * A tuple of length 2. In this case, yerr[0] is the error below *y* and\n      yerr[1] is error above *y*. For example::\n\n        from pylab import *\n        x = linspace(0, 2*pi, num=100, endpoint=True)\n        y = sin(x)\n        y_minus, y_plus = mlab.offset_line(y, 0.1)\n        plot(x, y)\n        fill_between(x, ym, y2=yp)\n        show()\n\n    ')
    
    
    # Evaluating a boolean operation
    
    # Call to is_numlike(...): (line 3991)
    # Processing the call arguments (line 3991)
    # Getting the type of 'yerr' (line 3991)
    yerr_95612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3991, 24), 'yerr', False)
    # Processing the call keyword arguments (line 3991)
    kwargs_95613 = {}
    # Getting the type of 'cbook' (line 3991)
    cbook_95610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3991, 7), 'cbook', False)
    # Obtaining the member 'is_numlike' of a type (line 3991)
    is_numlike_95611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3991, 7), cbook_95610, 'is_numlike')
    # Calling is_numlike(args, kwargs) (line 3991)
    is_numlike_call_result_95614 = invoke(stypy.reporting.localization.Localization(__file__, 3991, 7), is_numlike_95611, *[yerr_95612], **kwargs_95613)
    
    
    # Evaluating a boolean operation
    
    # Call to iterable(...): (line 3991)
    # Processing the call arguments (line 3991)
    # Getting the type of 'yerr' (line 3991)
    yerr_95617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3991, 49), 'yerr', False)
    # Processing the call keyword arguments (line 3991)
    kwargs_95618 = {}
    # Getting the type of 'cbook' (line 3991)
    cbook_95615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3991, 34), 'cbook', False)
    # Obtaining the member 'iterable' of a type (line 3991)
    iterable_95616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3991, 34), cbook_95615, 'iterable')
    # Calling iterable(args, kwargs) (line 3991)
    iterable_call_result_95619 = invoke(stypy.reporting.localization.Localization(__file__, 3991, 34), iterable_95616, *[yerr_95617], **kwargs_95618)
    
    
    
    # Call to len(...): (line 3992)
    # Processing the call arguments (line 3992)
    # Getting the type of 'yerr' (line 3992)
    yerr_95621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3992, 38), 'yerr', False)
    # Processing the call keyword arguments (line 3992)
    kwargs_95622 = {}
    # Getting the type of 'len' (line 3992)
    len_95620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3992, 34), 'len', False)
    # Calling len(args, kwargs) (line 3992)
    len_call_result_95623 = invoke(stypy.reporting.localization.Localization(__file__, 3992, 34), len_95620, *[yerr_95621], **kwargs_95622)
    
    
    # Call to len(...): (line 3992)
    # Processing the call arguments (line 3992)
    # Getting the type of 'y' (line 3992)
    y_95625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3992, 51), 'y', False)
    # Processing the call keyword arguments (line 3992)
    kwargs_95626 = {}
    # Getting the type of 'len' (line 3992)
    len_95624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3992, 47), 'len', False)
    # Calling len(args, kwargs) (line 3992)
    len_call_result_95627 = invoke(stypy.reporting.localization.Localization(__file__, 3992, 47), len_95624, *[y_95625], **kwargs_95626)
    
    # Applying the binary operator '==' (line 3992)
    result_eq_95628 = python_operator(stypy.reporting.localization.Localization(__file__, 3992, 34), '==', len_call_result_95623, len_call_result_95627)
    
    # Applying the binary operator 'and' (line 3991)
    result_and_keyword_95629 = python_operator(stypy.reporting.localization.Localization(__file__, 3991, 34), 'and', iterable_call_result_95619, result_eq_95628)
    
    # Applying the binary operator 'or' (line 3991)
    result_or_keyword_95630 = python_operator(stypy.reporting.localization.Localization(__file__, 3991, 7), 'or', is_numlike_call_result_95614, result_and_keyword_95629)
    
    # Testing the type of an if condition (line 3991)
    if_condition_95631 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3991, 4), result_or_keyword_95630)
    # Assigning a type to the variable 'if_condition_95631' (line 3991)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3991, 4), 'if_condition_95631', if_condition_95631)
    # SSA begins for if statement (line 3991)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3993):
    
    # Assigning a BinOp to a Name (line 3993):
    
    # Assigning a BinOp to a Name (line 3993):
    # Getting the type of 'y' (line 3993)
    y_95632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3993, 15), 'y')
    # Getting the type of 'yerr' (line 3993)
    yerr_95633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3993, 19), 'yerr')
    # Applying the binary operator '-' (line 3993)
    result_sub_95634 = python_operator(stypy.reporting.localization.Localization(__file__, 3993, 15), '-', y_95632, yerr_95633)
    
    # Assigning a type to the variable 'ymin' (line 3993)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3993, 8), 'ymin', result_sub_95634)
    
    # Assigning a BinOp to a Name (line 3994):
    
    # Assigning a BinOp to a Name (line 3994):
    
    # Assigning a BinOp to a Name (line 3994):
    # Getting the type of 'y' (line 3994)
    y_95635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3994, 15), 'y')
    # Getting the type of 'yerr' (line 3994)
    yerr_95636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3994, 19), 'yerr')
    # Applying the binary operator '+' (line 3994)
    result_add_95637 = python_operator(stypy.reporting.localization.Localization(__file__, 3994, 15), '+', y_95635, yerr_95636)
    
    # Assigning a type to the variable 'ymax' (line 3994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3994, 8), 'ymax', result_add_95637)
    # SSA branch for the else part of an if statement (line 3991)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to len(...): (line 3995)
    # Processing the call arguments (line 3995)
    # Getting the type of 'yerr' (line 3995)
    yerr_95639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3995, 13), 'yerr', False)
    # Processing the call keyword arguments (line 3995)
    kwargs_95640 = {}
    # Getting the type of 'len' (line 3995)
    len_95638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3995, 9), 'len', False)
    # Calling len(args, kwargs) (line 3995)
    len_call_result_95641 = invoke(stypy.reporting.localization.Localization(__file__, 3995, 9), len_95638, *[yerr_95639], **kwargs_95640)
    
    int_95642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3995, 22), 'int')
    # Applying the binary operator '==' (line 3995)
    result_eq_95643 = python_operator(stypy.reporting.localization.Localization(__file__, 3995, 9), '==', len_call_result_95641, int_95642)
    
    # Testing the type of an if condition (line 3995)
    if_condition_95644 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3995, 9), result_eq_95643)
    # Assigning a type to the variable 'if_condition_95644' (line 3995)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3995, 9), 'if_condition_95644', if_condition_95644)
    # SSA begins for if statement (line 3995)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 3996):
    
    # Assigning a BinOp to a Name (line 3996):
    
    # Assigning a BinOp to a Name (line 3996):
    # Getting the type of 'y' (line 3996)
    y_95645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3996, 21), 'y')
    
    # Obtaining the type of the subscript
    int_95646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3996, 30), 'int')
    # Getting the type of 'yerr' (line 3996)
    yerr_95647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3996, 25), 'yerr')
    # Obtaining the member '__getitem__' of a type (line 3996)
    getitem___95648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3996, 25), yerr_95647, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3996)
    subscript_call_result_95649 = invoke(stypy.reporting.localization.Localization(__file__, 3996, 25), getitem___95648, int_95646)
    
    # Applying the binary operator '-' (line 3996)
    result_sub_95650 = python_operator(stypy.reporting.localization.Localization(__file__, 3996, 21), '-', y_95645, subscript_call_result_95649)
    
    # Assigning a type to the variable 'tuple_assignment_87313' (line 3996)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3996, 8), 'tuple_assignment_87313', result_sub_95650)
    
    # Assigning a BinOp to a Name (line 3996):
    
    # Assigning a BinOp to a Name (line 3996):
    # Getting the type of 'y' (line 3996)
    y_95651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3996, 34), 'y')
    
    # Obtaining the type of the subscript
    int_95652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3996, 43), 'int')
    # Getting the type of 'yerr' (line 3996)
    yerr_95653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3996, 38), 'yerr')
    # Obtaining the member '__getitem__' of a type (line 3996)
    getitem___95654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3996, 38), yerr_95653, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3996)
    subscript_call_result_95655 = invoke(stypy.reporting.localization.Localization(__file__, 3996, 38), getitem___95654, int_95652)
    
    # Applying the binary operator '+' (line 3996)
    result_add_95656 = python_operator(stypy.reporting.localization.Localization(__file__, 3996, 34), '+', y_95651, subscript_call_result_95655)
    
    # Assigning a type to the variable 'tuple_assignment_87314' (line 3996)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3996, 8), 'tuple_assignment_87314', result_add_95656)
    
    # Assigning a Name to a Name (line 3996):
    
    # Assigning a Name to a Name (line 3996):
    # Getting the type of 'tuple_assignment_87313' (line 3996)
    tuple_assignment_87313_95657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3996, 8), 'tuple_assignment_87313')
    # Assigning a type to the variable 'ymin' (line 3996)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3996, 8), 'ymin', tuple_assignment_87313_95657)
    
    # Assigning a Name to a Name (line 3996):
    
    # Assigning a Name to a Name (line 3996):
    # Getting the type of 'tuple_assignment_87314' (line 3996)
    tuple_assignment_87314_95658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3996, 8), 'tuple_assignment_87314')
    # Assigning a type to the variable 'ymax' (line 3996)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3996, 14), 'ymax', tuple_assignment_87314_95658)
    # SSA branch for the else part of an if statement (line 3995)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 3998)
    # Processing the call arguments (line 3998)
    unicode_95660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3998, 25), 'unicode', u'yerr must be scalar, 1xN or 2xN')
    # Processing the call keyword arguments (line 3998)
    kwargs_95661 = {}
    # Getting the type of 'ValueError' (line 3998)
    ValueError_95659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3998, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3998)
    ValueError_call_result_95662 = invoke(stypy.reporting.localization.Localization(__file__, 3998, 14), ValueError_95659, *[unicode_95660], **kwargs_95661)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3998, 8), ValueError_call_result_95662, 'raise parameter', BaseException)
    # SSA join for if statement (line 3995)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3991)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 3999)
    tuple_95663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3999, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3999)
    # Adding element type (line 3999)
    # Getting the type of 'ymin' (line 3999)
    ymin_95664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3999, 11), 'ymin')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3999, 11), tuple_95663, ymin_95664)
    # Adding element type (line 3999)
    # Getting the type of 'ymax' (line 3999)
    ymax_95665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3999, 17), 'ymax')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3999, 11), tuple_95663, ymax_95665)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3999)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3999, 4), 'stypy_return_type', tuple_95663)
    
    # ################# End of 'offset_line(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'offset_line' in the type store
    # Getting the type of 'stypy_return_type' (line 3969)
    stypy_return_type_95666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3969, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_95666)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'offset_line'
    return stypy_return_type_95666

# Assigning a type to the variable 'offset_line' (line 3969)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3969, 0), 'offset_line', offset_line)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
