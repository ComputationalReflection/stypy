
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: Classes for the efficient drawing of large collections of objects that
3: share most properties, e.g., a large number of line segments or
4: polygons.
5: 
6: The classes are not meant to be as flexible as their single element
7: counterparts (e.g., you may not be able to select all line styles) but
8: they are meant to be fast for common use cases (e.g., a large set of solid
9: line segemnts)
10: '''
11: from __future__ import (absolute_import, division, print_function,
12:                         unicode_literals)
13: 
14: import six
15: from six.moves import zip
16: try:
17:     from math import gcd
18: except ImportError:
19:     # LPy workaround
20:     from fractions import gcd
21: 
22: import numpy as np
23: import matplotlib as mpl
24: import matplotlib.cbook as cbook
25: import matplotlib.colors as mcolors
26: import matplotlib.cm as cm
27: from matplotlib import docstring
28: import matplotlib.transforms as transforms
29: import matplotlib.artist as artist
30: from matplotlib.artist import allow_rasterization
31: import matplotlib.path as mpath
32: from matplotlib import _path
33: import matplotlib.mlab as mlab
34: import matplotlib.lines as mlines
35: 
36: CIRCLE_AREA_FACTOR = 1.0 / np.sqrt(np.pi)
37: 
38: 
39: _color_aliases = {'facecolors': ['facecolor'],
40:                   'edgecolors': ['edgecolor']}
41: 
42: 
43: class Collection(artist.Artist, cm.ScalarMappable):
44:     '''
45:     Base class for Collections.  Must be subclassed to be usable.
46: 
47:     All properties in a collection must be sequences or scalars;
48:     if scalars, they will be converted to sequences.  The
49:     property of the ith element of the collection is::
50: 
51:       prop[i % len(props)]
52: 
53:     Keyword arguments and default values:
54: 
55:         * *edgecolors*: None
56:         * *facecolors*: None
57:         * *linewidths*: None
58:         * *antialiaseds*: None
59:         * *offsets*: None
60:         * *transOffset*: transforms.IdentityTransform()
61:         * *offset_position*: 'screen' (default) or 'data'
62:         * *norm*: None (optional for
63:           :class:`matplotlib.cm.ScalarMappable`)
64:         * *cmap*: None (optional for
65:           :class:`matplotlib.cm.ScalarMappable`)
66:         * *hatch*: None
67:         * *zorder*: 1
68: 
69: 
70:     *offsets* and *transOffset* are used to translate the patch after
71:     rendering (default no offsets).  If offset_position is 'screen'
72:     (default) the offset is applied after the master transform has
73:     been applied, that is, the offsets are in screen coordinates.  If
74:     offset_position is 'data', the offset is applied before the master
75:     transform, i.e., the offsets are in data coordinates.
76: 
77:     If any of *edgecolors*, *facecolors*, *linewidths*, *antialiaseds*
78:     are None, they default to their :data:`matplotlib.rcParams` patch
79:     setting, in sequence form.
80: 
81:     The use of :class:`~matplotlib.cm.ScalarMappable` is optional.  If
82:     the :class:`~matplotlib.cm.ScalarMappable` matrix _A is not None
83:     (i.e., a call to set_array has been made), at draw time a call to
84:     scalar mappable will be made to set the face colors.
85:     '''
86:     _offsets = np.zeros((0, 2))
87:     _transOffset = transforms.IdentityTransform()
88:     #: Either a list of 3x3 arrays or an Nx3x3 array of transforms, suitable
89:     #: for the `all_transforms` argument to
90:     #: :meth:`~matplotlib.backend_bases.RendererBase.draw_path_collection`;
91:     #: each 3x3 array is used to initialize an
92:     #: :class:`~matplotlib.transforms.Affine2D` object.
93:     #: Each kind of collection defines this based on its arguments.
94:     _transforms = np.empty((0, 3, 3))
95: 
96:     # Whether to draw an edge by default.  Set on a
97:     # subclass-by-subclass basis.
98:     _edge_default = False
99: 
100:     def __init__(self,
101:                  edgecolors=None,
102:                  facecolors=None,
103:                  linewidths=None,
104:                  linestyles='solid',
105:                  antialiaseds=None,
106:                  offsets=None,
107:                  transOffset=None,
108:                  norm=None,  # optional for ScalarMappable
109:                  cmap=None,  # ditto
110:                  pickradius=5.0,
111:                  hatch=None,
112:                  urls=None,
113:                  offset_position='screen',
114:                  zorder=1,
115:                  **kwargs
116:                  ):
117:         '''
118:         Create a Collection
119: 
120:         %(Collection)s
121:         '''
122:         artist.Artist.__init__(self)
123:         cm.ScalarMappable.__init__(self, norm, cmap)
124:         # list of un-scaled dash patterns
125:         # this is needed scaling the dash pattern by linewidth
126:         self._us_linestyles = [(None, None)]
127:         # list of dash patterns
128:         self._linestyles = [(None, None)]
129:         # list of unbroadcast/scaled linewidths
130:         self._us_lw = [0]
131:         self._linewidths = [0]
132:         self._is_filled = True  # May be modified by set_facecolor().
133: 
134:         self._hatch_color = mcolors.to_rgba(mpl.rcParams['hatch.color'])
135:         self.set_facecolor(facecolors)
136:         self.set_edgecolor(edgecolors)
137:         self.set_linewidth(linewidths)
138:         self.set_linestyle(linestyles)
139:         self.set_antialiased(antialiaseds)
140:         self.set_pickradius(pickradius)
141:         self.set_urls(urls)
142:         self.set_hatch(hatch)
143:         self.set_offset_position(offset_position)
144:         self.set_zorder(zorder)
145: 
146:         self._offsets = np.zeros((1, 2))
147:         self._uniform_offsets = None
148:         if offsets is not None:
149:             offsets = np.asanyarray(offsets, float)
150:             # Broadcast (2,) -> (1, 2) but nothing else.
151:             if offsets.shape == (2,):
152:                 offsets = offsets[None, :]
153:             if transOffset is not None:
154:                 self._offsets = offsets
155:                 self._transOffset = transOffset
156:             else:
157:                 self._uniform_offsets = offsets
158: 
159:         self._path_effects = None
160:         self.update(kwargs)
161:         self._paths = None
162: 
163:     def get_paths(self):
164:         return self._paths
165: 
166:     def set_paths(self):
167:         raise NotImplementedError
168: 
169:     def get_transforms(self):
170:         return self._transforms
171: 
172:     def get_offset_transform(self):
173:         t = self._transOffset
174:         if (not isinstance(t, transforms.Transform)
175:                 and hasattr(t, '_as_mpl_transform')):
176:             t = t._as_mpl_transform(self.axes)
177:         return t
178: 
179:     def get_datalim(self, transData):
180:         transform = self.get_transform()
181:         transOffset = self.get_offset_transform()
182:         offsets = self._offsets
183:         paths = self.get_paths()
184: 
185:         if not transform.is_affine:
186:             paths = [transform.transform_path_non_affine(p) for p in paths]
187:             transform = transform.get_affine()
188:         if not transOffset.is_affine:
189:             offsets = transOffset.transform_non_affine(offsets)
190:             transOffset = transOffset.get_affine()
191: 
192:         if isinstance(offsets, np.ma.MaskedArray):
193:             offsets = offsets.filled(np.nan)
194:             # get_path_collection_extents handles nan but not masked arrays
195: 
196:         if len(paths) and len(offsets):
197:             result = mpath.get_path_collection_extents(
198:                 transform.frozen(), paths, self.get_transforms(),
199:                 offsets, transOffset.frozen())
200:             result = result.inverse_transformed(transData)
201:         else:
202:             result = transforms.Bbox.null()
203:         return result
204: 
205:     def get_window_extent(self, renderer):
206:         # TODO:check to ensure that this does not fail for
207:         # cases other than scatter plot legend
208:         return self.get_datalim(transforms.IdentityTransform())
209: 
210:     def _prepare_points(self):
211:         '''Point prep for drawing and hit testing'''
212: 
213:         transform = self.get_transform()
214:         transOffset = self.get_offset_transform()
215:         offsets = self._offsets
216:         paths = self.get_paths()
217: 
218:         if self.have_units():
219:             paths = []
220:             for path in self.get_paths():
221:                 vertices = path.vertices
222:                 xs, ys = vertices[:, 0], vertices[:, 1]
223:                 xs = self.convert_xunits(xs)
224:                 ys = self.convert_yunits(ys)
225:                 paths.append(mpath.Path(np.column_stack([xs, ys]), path.codes))
226: 
227:             if offsets.size > 0:
228:                 xs = self.convert_xunits(offsets[:, 0])
229:                 ys = self.convert_yunits(offsets[:, 1])
230:                 offsets = np.column_stack([xs, ys])
231: 
232:         if not transform.is_affine:
233:             paths = [transform.transform_path_non_affine(path)
234:                      for path in paths]
235:             transform = transform.get_affine()
236:         if not transOffset.is_affine:
237:             offsets = transOffset.transform_non_affine(offsets)
238:             # This might have changed an ndarray into a masked array.
239:             transOffset = transOffset.get_affine()
240: 
241:         if isinstance(offsets, np.ma.MaskedArray):
242:             offsets = offsets.filled(np.nan)
243:             # Changing from a masked array to nan-filled ndarray
244:             # is probably most efficient at this point.
245: 
246:         return transform, transOffset, offsets, paths
247: 
248:     @allow_rasterization
249:     def draw(self, renderer):
250:         if not self.get_visible():
251:             return
252:         renderer.open_group(self.__class__.__name__, self.get_gid())
253: 
254:         self.update_scalarmappable()
255: 
256:         transform, transOffset, offsets, paths = self._prepare_points()
257: 
258:         gc = renderer.new_gc()
259:         self._set_gc_clip(gc)
260:         gc.set_snap(self.get_snap())
261: 
262:         if self._hatch:
263:             gc.set_hatch(self._hatch)
264:             try:
265:                 gc.set_hatch_color(self._hatch_color)
266:             except AttributeError:
267:                 # if we end up with a GC that does not have this method
268:                 warnings.warn("Your backend does not support setting the "
269:                               "hatch color.")
270: 
271:         if self.get_sketch_params() is not None:
272:             gc.set_sketch_params(*self.get_sketch_params())
273: 
274:         if self.get_path_effects():
275:             from matplotlib.patheffects import PathEffectRenderer
276:             renderer = PathEffectRenderer(self.get_path_effects(), renderer)
277: 
278:         # If the collection is made up of a single shape/color/stroke,
279:         # it can be rendered once and blitted multiple times, using
280:         # `draw_markers` rather than `draw_path_collection`.  This is
281:         # *much* faster for Agg, and results in smaller file sizes in
282:         # PDF/SVG/PS.
283: 
284:         trans = self.get_transforms()
285:         facecolors = self.get_facecolor()
286:         edgecolors = self.get_edgecolor()
287:         do_single_path_optimization = False
288:         if (len(paths) == 1 and len(trans) <= 1 and
289:             len(facecolors) == 1 and len(edgecolors) == 1 and
290:             len(self._linewidths) == 1 and
291:             self._linestyles == [(None, None)] and
292:             len(self._antialiaseds) == 1 and len(self._urls) == 1 and
293:             self.get_hatch() is None):
294:             if len(trans):
295:                 combined_transform = (transforms.Affine2D(trans[0]) +
296:                                       transform)
297:             else:
298:                 combined_transform = transform
299:             extents = paths[0].get_extents(combined_transform)
300:             width, height = renderer.get_canvas_width_height()
301:             if (extents.width < width and
302:                 extents.height < height):
303:                 do_single_path_optimization = True
304: 
305:         if do_single_path_optimization:
306:             gc.set_foreground(tuple(edgecolors[0]))
307:             gc.set_linewidth(self._linewidths[0])
308:             gc.set_dashes(*self._linestyles[0])
309:             gc.set_antialiased(self._antialiaseds[0])
310:             gc.set_url(self._urls[0])
311:             renderer.draw_markers(
312:                 gc, paths[0], combined_transform.frozen(),
313:                 mpath.Path(offsets), transOffset, tuple(facecolors[0]))
314:         else:
315:             renderer.draw_path_collection(
316:                 gc, transform.frozen(), paths,
317:                 self.get_transforms(), offsets, transOffset,
318:                 self.get_facecolor(), self.get_edgecolor(),
319:                 self._linewidths, self._linestyles,
320:                 self._antialiaseds, self._urls,
321:                 self._offset_position)
322: 
323:         gc.restore()
324:         renderer.close_group(self.__class__.__name__)
325:         self.stale = False
326: 
327:     def set_pickradius(self, pr):
328:         self._pickradius = pr
329: 
330:     def get_pickradius(self):
331:         return self._pickradius
332: 
333:     def contains(self, mouseevent):
334:         '''
335:         Test whether the mouse event occurred in the collection.
336: 
337:         Returns True | False, ``dict(ind=itemlist)``, where every
338:         item in itemlist contains the event.
339:         '''
340:         if callable(self._contains):
341:             return self._contains(self, mouseevent)
342: 
343:         if not self.get_visible():
344:             return False, {}
345: 
346:         pickradius = (
347:             float(self._picker)
348:             if cbook.is_numlike(self._picker) and
349:                self._picker is not True  # the bool, not just nonzero or 1
350:             else self._pickradius)
351: 
352:         transform, transOffset, offsets, paths = self._prepare_points()
353: 
354:         ind = _path.point_in_path_collection(
355:             mouseevent.x, mouseevent.y, pickradius,
356:             transform.frozen(), paths, self.get_transforms(),
357:             offsets, transOffset, pickradius <= 0,
358:             self.get_offset_position())
359: 
360:         return len(ind) > 0, dict(ind=ind)
361: 
362:     def set_urls(self, urls):
363:         if urls is None:
364:             self._urls = [None, ]
365:         else:
366:             self._urls = urls
367:         self.stale = True
368: 
369:     def get_urls(self):
370:         return self._urls
371: 
372:     def set_hatch(self, hatch):
373:         r'''
374:         Set the hatching pattern
375: 
376:         *hatch* can be one of::
377: 
378:           /   - diagonal hatching
379:           \   - back diagonal
380:           |   - vertical
381:           -   - horizontal
382:           +   - crossed
383:           x   - crossed diagonal
384:           o   - small circle
385:           O   - large circle
386:           .   - dots
387:           *   - stars
388: 
389:         Letters can be combined, in which case all the specified
390:         hatchings are done.  If same letter repeats, it increases the
391:         density of hatching of that pattern.
392: 
393:         Hatching is supported in the PostScript, PDF, SVG and Agg
394:         backends only.
395: 
396:         Unlike other properties such as linewidth and colors, hatching
397:         can only be specified for the collection as a whole, not separately
398:         for each member.
399: 
400:         ACCEPTS: [ '/' | '\\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*' ]
401:         '''
402:         self._hatch = hatch
403:         self.stale = True
404: 
405:     def get_hatch(self):
406:         '''Return the current hatching pattern.'''
407:         return self._hatch
408: 
409:     def set_offsets(self, offsets):
410:         '''
411:         Set the offsets for the collection.  *offsets* can be a scalar
412:         or a sequence.
413: 
414:         ACCEPTS: float or sequence of floats
415:         '''
416:         offsets = np.asanyarray(offsets, float)
417:         if offsets.shape == (2,):  # Broadcast (2,) -> (1, 2) but nothing else.
418:             offsets = offsets[None, :]
419:         # This decision is based on how they are initialized above in __init__.
420:         if self._uniform_offsets is None:
421:             self._offsets = offsets
422:         else:
423:             self._uniform_offsets = offsets
424:         self.stale = True
425: 
426:     def get_offsets(self):
427:         '''Return the offsets for the collection.'''
428:         # This decision is based on how they are initialized above in __init__.
429:         if self._uniform_offsets is None:
430:             return self._offsets
431:         else:
432:             return self._uniform_offsets
433: 
434:     def set_offset_position(self, offset_position):
435:         '''
436:         Set how offsets are applied.  If *offset_position* is 'screen'
437:         (default) the offset is applied after the master transform has
438:         been applied, that is, the offsets are in screen coordinates.
439:         If offset_position is 'data', the offset is applied before the
440:         master transform, i.e., the offsets are in data coordinates.
441:         '''
442:         if offset_position not in ('screen', 'data'):
443:             raise ValueError("offset_position must be 'screen' or 'data'")
444:         self._offset_position = offset_position
445:         self.stale = True
446: 
447:     def get_offset_position(self):
448:         '''
449:         Returns how offsets are applied for the collection.  If
450:         *offset_position* is 'screen', the offset is applied after the
451:         master transform has been applied, that is, the offsets are in
452:         screen coordinates.  If offset_position is 'data', the offset
453:         is applied before the master transform, i.e., the offsets are
454:         in data coordinates.
455:         '''
456:         return self._offset_position
457: 
458:     def set_linewidth(self, lw):
459:         '''
460:         Set the linewidth(s) for the collection.  *lw* can be a scalar
461:         or a sequence; if it is a sequence the patches will cycle
462:         through the sequence
463: 
464:         ACCEPTS: float or sequence of floats
465:         '''
466:         if lw is None:
467:             lw = mpl.rcParams['patch.linewidth']
468:             if lw is None:
469:                 lw = mpl.rcParams['lines.linewidth']
470:         # get the un-scaled/broadcast lw
471:         self._us_lw = np.atleast_1d(np.asarray(lw))
472: 
473:         # scale all of the dash patterns.
474:         self._linewidths, self._linestyles = self._bcast_lwls(
475:             self._us_lw, self._us_linestyles)
476:         self.stale = True
477: 
478:     def set_linewidths(self, lw):
479:         '''alias for set_linewidth'''
480:         return self.set_linewidth(lw)
481: 
482:     def set_lw(self, lw):
483:         '''alias for set_linewidth'''
484:         return self.set_linewidth(lw)
485: 
486:     def set_linestyle(self, ls):
487:         '''
488:         Set the linestyle(s) for the collection.
489: 
490:         ===========================   =================
491:         linestyle                     description
492:         ===========================   =================
493:         ``'-'`` or ``'solid'``        solid line
494:         ``'--'`` or  ``'dashed'``     dashed line
495:         ``'-.'`` or  ``'dashdot'``    dash-dotted line
496:         ``':'`` or ``'dotted'``       dotted line
497:         ===========================   =================
498: 
499:         Alternatively a dash tuple of the following form can be provided::
500: 
501:             (offset, onoffseq),
502: 
503:         where ``onoffseq`` is an even length tuple of on and off ink
504:         in points.
505: 
506:         ACCEPTS: ['solid' | 'dashed', 'dashdot', 'dotted' |
507:                    (offset, on-off-dash-seq) |
508:                    ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` |
509:                    ``' '`` | ``''``]
510: 
511:         Parameters
512:         ----------
513:         ls : { '-',  '--', '-.', ':'} and more see description
514:             The line style.
515:         '''
516:         try:
517:             if isinstance(ls, six.string_types):
518:                 ls = cbook.ls_mapper.get(ls, ls)
519:                 dashes = [mlines._get_dash_pattern(ls)]
520:             else:
521:                 try:
522:                     dashes = [mlines._get_dash_pattern(ls)]
523:                 except ValueError:
524:                     dashes = [mlines._get_dash_pattern(x) for x in ls]
525: 
526:         except ValueError:
527:             raise ValueError(
528:                 'Do not know how to convert {!r} to dashes'.format(ls))
529: 
530:         # get the list of raw 'unscaled' dash patterns
531:         self._us_linestyles = dashes
532: 
533:         # broadcast and scale the lw and dash patterns
534:         self._linewidths, self._linestyles = self._bcast_lwls(
535:             self._us_lw, self._us_linestyles)
536: 
537:     @staticmethod
538:     def _bcast_lwls(linewidths, dashes):
539:         '''Internal helper function to broadcast + scale ls/lw
540: 
541:         In the collection drawing code the linewidth and linestyle are
542:         cycled through as circular buffers (via v[i % len(v)]).  Thus,
543:         if we are going to scale the dash pattern at set time (not
544:         draw time) we need to do the broadcasting now and expand both
545:         lists to be the same length.
546: 
547:         Parameters
548:         ----------
549:         linewidths : list
550:             line widths of collection
551: 
552:         dashes : list
553:             dash specification (offset, (dash pattern tuple))
554: 
555:         Returns
556:         -------
557:         linewidths, dashes : list
558:              Will be the same length, dashes are scaled by paired linewidth
559: 
560:         '''
561:         if mpl.rcParams['_internal.classic_mode']:
562:             return linewidths, dashes
563:         # make sure they are the same length so we can zip them
564:         if len(dashes) != len(linewidths):
565:             l_dashes = len(dashes)
566:             l_lw = len(linewidths)
567:             GCD = gcd(l_dashes, l_lw)
568:             dashes = list(dashes) * (l_lw // GCD)
569:             linewidths = list(linewidths) * (l_dashes // GCD)
570: 
571:         # scale the dash patters
572:         dashes = [mlines._scale_dashes(o, d, lw)
573:                   for (o, d), lw in zip(dashes, linewidths)]
574: 
575:         return linewidths, dashes
576: 
577:     def set_linestyles(self, ls):
578:         '''alias for set_linestyle'''
579:         return self.set_linestyle(ls)
580: 
581:     def set_dashes(self, ls):
582:         '''alias for set_linestyle'''
583:         return self.set_linestyle(ls)
584: 
585:     def set_antialiased(self, aa):
586:         '''
587:         Set the antialiasing state for rendering.
588: 
589:         ACCEPTS: Boolean or sequence of booleans
590:         '''
591:         if aa is None:
592:             aa = mpl.rcParams['patch.antialiased']
593:         self._antialiaseds = np.atleast_1d(np.asarray(aa, bool))
594:         self.stale = True
595: 
596:     def set_antialiaseds(self, aa):
597:         '''alias for set_antialiased'''
598:         return self.set_antialiased(aa)
599: 
600:     def set_color(self, c):
601:         '''
602:         Set both the edgecolor and the facecolor.
603: 
604:         ACCEPTS: matplotlib color arg or sequence of rgba tuples
605: 
606:         .. seealso::
607: 
608:             :meth:`set_facecolor`, :meth:`set_edgecolor`
609:                For setting the edge or face color individually.
610:         '''
611:         self.set_facecolor(c)
612:         self.set_edgecolor(c)
613: 
614:     def _set_facecolor(self, c):
615:         if c is None:
616:             c = mpl.rcParams['patch.facecolor']
617: 
618:         self._is_filled = True
619:         try:
620:             if c.lower() == 'none':
621:                 self._is_filled = False
622:         except AttributeError:
623:             pass
624:         self._facecolors = mcolors.to_rgba_array(c, self._alpha)
625:         self.stale = True
626: 
627:     def set_facecolor(self, c):
628:         '''
629:         Set the facecolor(s) of the collection.  *c* can be a
630:         matplotlib color spec (all patches have same color), or a
631:         sequence of specs; if it is a sequence the patches will
632:         cycle through the sequence.
633: 
634:         If *c* is 'none', the patch will not be filled.
635: 
636:         ACCEPTS: matplotlib color spec or sequence of specs
637:         '''
638:         self._original_facecolor = c
639:         self._set_facecolor(c)
640: 
641:     def set_facecolors(self, c):
642:         '''alias for set_facecolor'''
643:         return self.set_facecolor(c)
644: 
645:     def get_facecolor(self):
646:         return self._facecolors
647:     get_facecolors = get_facecolor
648: 
649:     def get_edgecolor(self):
650:         if (isinstance(self._edgecolors, six.string_types)
651:                    and self._edgecolors == str('face')):
652:             return self.get_facecolors()
653:         else:
654:             return self._edgecolors
655:     get_edgecolors = get_edgecolor
656: 
657:     def _set_edgecolor(self, c):
658:         set_hatch_color = True
659:         if c is None:
660:             if (mpl.rcParams['patch.force_edgecolor'] or
661:                     not self._is_filled or self._edge_default):
662:                 c = mpl.rcParams['patch.edgecolor']
663:             else:
664:                 c = 'none'
665:                 set_hatch_color = False
666: 
667:         self._is_stroked = True
668:         try:
669:             if c.lower() == 'none':
670:                 self._is_stroked = False
671:         except AttributeError:
672:             pass
673: 
674:         try:
675:             if c.lower() == 'face':   # Special case: lookup in "get" method.
676:                 self._edgecolors = 'face'
677:                 return
678:         except AttributeError:
679:             pass
680:         self._edgecolors = mcolors.to_rgba_array(c, self._alpha)
681:         if set_hatch_color and len(self._edgecolors):
682:             self._hatch_color = tuple(self._edgecolors[0])
683:         self.stale = True
684: 
685:     def set_edgecolor(self, c):
686:         '''
687:         Set the edgecolor(s) of the collection. *c* can be a
688:         matplotlib color spec (all patches have same color), or a
689:         sequence of specs; if it is a sequence the patches will
690:         cycle through the sequence.
691: 
692:         If *c* is 'face', the edge color will always be the same as
693:         the face color.  If it is 'none', the patch boundary will not
694:         be drawn.
695: 
696:         ACCEPTS: matplotlib color spec or sequence of specs
697:         '''
698:         self._original_edgecolor = c
699:         self._set_edgecolor(c)
700: 
701:     def set_edgecolors(self, c):
702:         '''alias for set_edgecolor'''
703:         return self.set_edgecolor(c)
704: 
705:     def set_alpha(self, alpha):
706:         '''
707:         Set the alpha tranparencies of the collection.  *alpha* must be
708:         a float or *None*.
709: 
710:         ACCEPTS: float or None
711:         '''
712:         if alpha is not None:
713:             try:
714:                 float(alpha)
715:             except TypeError:
716:                 raise TypeError('alpha must be a float or None')
717:         self.update_dict['array'] = True
718:         artist.Artist.set_alpha(self, alpha)
719:         self._set_facecolor(self._original_facecolor)
720:         self._set_edgecolor(self._original_edgecolor)
721: 
722:     def get_linewidths(self):
723:         return self._linewidths
724:     get_linewidth = get_linewidths
725: 
726:     def get_linestyles(self):
727:         return self._linestyles
728:     get_dashes = get_linestyle = get_linestyles
729: 
730:     def update_scalarmappable(self):
731:         '''
732:         If the scalar mappable array is not none, update colors
733:         from scalar data
734:         '''
735:         if self._A is None:
736:             return
737:         if self._A.ndim > 1:
738:             raise ValueError('Collections can only map rank 1 arrays')
739:         if not self.check_update("array"):
740:             return
741:         if self._is_filled:
742:             self._facecolors = self.to_rgba(self._A, self._alpha)
743:         elif self._is_stroked:
744:             self._edgecolors = self.to_rgba(self._A, self._alpha)
745:         self.stale = True
746: 
747:     def get_fill(self):
748:         'return whether fill is set'
749:         return self._is_filled
750: 
751:     def update_from(self, other):
752:         'copy properties from other to self'
753: 
754:         artist.Artist.update_from(self, other)
755:         self._antialiaseds = other._antialiaseds
756:         self._original_edgecolor = other._original_edgecolor
757:         self._edgecolors = other._edgecolors
758:         self._original_facecolor = other._original_facecolor
759:         self._facecolors = other._facecolors
760:         self._linewidths = other._linewidths
761:         self._linestyles = other._linestyles
762:         self._us_linestyles = other._us_linestyles
763:         self._pickradius = other._pickradius
764:         self._hatch = other._hatch
765: 
766:         # update_from for scalarmappable
767:         self._A = other._A
768:         self.norm = other.norm
769:         self.cmap = other.cmap
770:         # self.update_dict = other.update_dict # do we need to copy this? -JJL
771:         self.stale = True
772: 
773: # these are not available for the object inspector until after the
774: # class is built so we define an initial set here for the init
775: # function and they will be overridden after object defn
776: docstring.interpd.update(Collection='''\
777:     Valid Collection keyword arguments:
778: 
779:         * *edgecolors*: None
780:         * *facecolors*: None
781:         * *linewidths*: None
782:         * *antialiaseds*: None
783:         * *offsets*: None
784:         * *transOffset*: transforms.IdentityTransform()
785:         * *norm*: None (optional for
786:           :class:`matplotlib.cm.ScalarMappable`)
787:         * *cmap*: None (optional for
788:           :class:`matplotlib.cm.ScalarMappable`)
789: 
790:     *offsets* and *transOffset* are used to translate the patch after
791:     rendering (default no offsets)
792: 
793:     If any of *edgecolors*, *facecolors*, *linewidths*, *antialiaseds*
794:     are None, they default to their :data:`matplotlib.rcParams` patch
795:     setting, in sequence form.
796: ''')
797: 
798: 
799: class _CollectionWithSizes(Collection):
800:     '''
801:     Base class for collections that have an array of sizes.
802:     '''
803:     _factor = 1.0
804: 
805:     def get_sizes(self):
806:         '''
807:         Returns the sizes of the elements in the collection.  The
808:         value represents the 'area' of the element.
809: 
810:         Returns
811:         -------
812:         sizes : array
813:             The 'area' of each element.
814:         '''
815:         return self._sizes
816: 
817:     def set_sizes(self, sizes, dpi=72.0):
818:         '''
819:         Set the sizes of each member of the collection.
820: 
821:         Parameters
822:         ----------
823:         sizes : ndarray or None
824:             The size to set for each element of the collection.  The
825:             value is the 'area' of the element.
826: 
827:         dpi : float
828:             The dpi of the canvas. Defaults to 72.0.
829:         '''
830:         if sizes is None:
831:             self._sizes = np.array([])
832:             self._transforms = np.empty((0, 3, 3))
833:         else:
834:             self._sizes = np.asarray(sizes)
835:             self._transforms = np.zeros((len(self._sizes), 3, 3))
836:             scale = np.sqrt(self._sizes) * dpi / 72.0 * self._factor
837:             self._transforms[:, 0, 0] = scale
838:             self._transforms[:, 1, 1] = scale
839:             self._transforms[:, 2, 2] = 1.0
840:         self.stale = True
841: 
842:     @allow_rasterization
843:     def draw(self, renderer):
844:         self.set_sizes(self._sizes, self.figure.dpi)
845:         Collection.draw(self, renderer)
846: 
847: 
848: class PathCollection(_CollectionWithSizes):
849:     '''
850:     This is the most basic :class:`Collection` subclass.
851:     '''
852:     @docstring.dedent_interpd
853:     def __init__(self, paths, sizes=None, **kwargs):
854:         '''
855:         *paths* is a sequence of :class:`matplotlib.path.Path`
856:         instances.
857: 
858:         %(Collection)s
859:         '''
860: 
861:         Collection.__init__(self, **kwargs)
862:         self.set_paths(paths)
863:         self.set_sizes(sizes)
864:         self.stale = True
865: 
866:     def set_paths(self, paths):
867:         self._paths = paths
868:         self.stale = True
869: 
870:     def get_paths(self):
871:         return self._paths
872: 
873: 
874: class PolyCollection(_CollectionWithSizes):
875:     @docstring.dedent_interpd
876:     def __init__(self, verts, sizes=None, closed=True, **kwargs):
877:         '''
878:         *verts* is a sequence of ( *verts0*, *verts1*, ...) where
879:         *verts_i* is a sequence of *xy* tuples of vertices, or an
880:         equivalent :mod:`numpy` array of shape (*nv*, 2).
881: 
882:         *sizes* is *None* (default) or a sequence of floats that
883:         scale the corresponding *verts_i*.  The scaling is applied
884:         before the Artist master transform; if the latter is an identity
885:         transform, then the overall scaling is such that if
886:         *verts_i* specify a unit square, then *sizes_i* is the area
887:         of that square in points^2.
888:         If len(*sizes*) < *nv*, the additional values will be
889:         taken cyclically from the array.
890: 
891:         *closed*, when *True*, will explicitly close the polygon.
892: 
893:         %(Collection)s
894:         '''
895:         Collection.__init__(self, **kwargs)
896:         self.set_sizes(sizes)
897:         self.set_verts(verts, closed)
898:         self.stale = True
899: 
900:     def set_verts(self, verts, closed=True):
901:         '''This allows one to delay initialization of the vertices.'''
902:         if isinstance(verts, np.ma.MaskedArray):
903:             verts = verts.astype(float).filled(np.nan)
904:             # This is much faster than having Path do it one at a time.
905:         if closed:
906:             self._paths = []
907:             for xy in verts:
908:                 if len(xy):
909:                     if isinstance(xy, np.ma.MaskedArray):
910:                         xy = np.ma.concatenate([xy, xy[0:1]])
911:                     else:
912:                         xy = np.asarray(xy)
913:                         xy = np.concatenate([xy, xy[0:1]])
914:                     codes = np.empty(xy.shape[0], dtype=mpath.Path.code_type)
915:                     codes[:] = mpath.Path.LINETO
916:                     codes[0] = mpath.Path.MOVETO
917:                     codes[-1] = mpath.Path.CLOSEPOLY
918:                     self._paths.append(mpath.Path(xy, codes))
919:                 else:
920:                     self._paths.append(mpath.Path(xy))
921:         else:
922:             self._paths = [mpath.Path(xy) for xy in verts]
923:         self.stale = True
924: 
925:     set_paths = set_verts
926: 
927:     def set_verts_and_codes(self, verts, codes):
928:         '''This allows one to initialize vertices with path codes.'''
929:         if (len(verts) != len(codes)):
930:             raise ValueError("'codes' must be a 1D list or array "
931:                              "with the same length of 'verts'")
932:         self._paths = []
933:         for xy, cds in zip(verts, codes):
934:             if len(xy):
935:                 self._paths.append(mpath.Path(xy, cds))
936:             else:
937:                 self._paths.append(mpath.Path(xy))
938:         self.stale = True
939: 
940: 
941: class BrokenBarHCollection(PolyCollection):
942:     '''
943:     A collection of horizontal bars spanning *yrange* with a sequence of
944:     *xranges*.
945:     '''
946:     @docstring.dedent_interpd
947:     def __init__(self, xranges, yrange, **kwargs):
948:         '''
949:         *xranges*
950:             sequence of (*xmin*, *xwidth*)
951: 
952:         *yrange*
953:             *ymin*, *ywidth*
954: 
955:         %(Collection)s
956:         '''
957:         ymin, ywidth = yrange
958:         ymax = ymin + ywidth
959:         verts = [[(xmin, ymin),
960:                   (xmin, ymax),
961:                   (xmin + xwidth, ymax),
962:                   (xmin + xwidth, ymin),
963:                   (xmin, ymin)] for xmin, xwidth in xranges]
964:         PolyCollection.__init__(self, verts, **kwargs)
965: 
966:     @staticmethod
967:     def span_where(x, ymin, ymax, where, **kwargs):
968:         '''
969:         Create a BrokenBarHCollection to plot horizontal bars from
970:         over the regions in *x* where *where* is True.  The bars range
971:         on the y-axis from *ymin* to *ymax*
972: 
973:         A :class:`BrokenBarHCollection` is returned.  *kwargs* are
974:         passed on to the collection.
975:         '''
976:         xranges = []
977:         for ind0, ind1 in mlab.contiguous_regions(where):
978:             xslice = x[ind0:ind1]
979:             if not len(xslice):
980:                 continue
981:             xranges.append((xslice[0], xslice[-1] - xslice[0]))
982: 
983:         collection = BrokenBarHCollection(
984:             xranges, [ymin, ymax - ymin], **kwargs)
985:         return collection
986: 
987: 
988: class RegularPolyCollection(_CollectionWithSizes):
989:     '''Draw a collection of regular polygons with *numsides*.'''
990:     _path_generator = mpath.Path.unit_regular_polygon
991: 
992:     _factor = CIRCLE_AREA_FACTOR
993: 
994:     @docstring.dedent_interpd
995:     def __init__(self,
996:                  numsides,
997:                  rotation=0,
998:                  sizes=(1,),
999:                  **kwargs):
1000:         '''
1001:         *numsides*
1002:             the number of sides of the polygon
1003: 
1004:         *rotation*
1005:             the rotation of the polygon in radians
1006: 
1007:         *sizes*
1008:             gives the area of the circle circumscribing the
1009:             regular polygon in points^2
1010: 
1011:         %(Collection)s
1012: 
1013:         Example: see :file:`examples/dynamic_collection.py` for
1014:         complete example::
1015: 
1016:             offsets = np.random.rand(20,2)
1017:             facecolors = [cm.jet(x) for x in np.random.rand(20)]
1018:             black = (0,0,0,1)
1019: 
1020:             collection = RegularPolyCollection(
1021:                 numsides=5, # a pentagon
1022:                 rotation=0, sizes=(50,),
1023:                 facecolors = facecolors,
1024:                 edgecolors = (black,),
1025:                 linewidths = (1,),
1026:                 offsets = offsets,
1027:                 transOffset = ax.transData,
1028:                 )
1029:         '''
1030:         Collection.__init__(self, **kwargs)
1031:         self.set_sizes(sizes)
1032:         self._numsides = numsides
1033:         self._paths = [self._path_generator(numsides)]
1034:         self._rotation = rotation
1035:         self.set_transform(transforms.IdentityTransform())
1036: 
1037:     def get_numsides(self):
1038:         return self._numsides
1039: 
1040:     def get_rotation(self):
1041:         return self._rotation
1042: 
1043:     @allow_rasterization
1044:     def draw(self, renderer):
1045:         self.set_sizes(self._sizes, self.figure.dpi)
1046:         self._transforms = [
1047:             transforms.Affine2D(x).rotate(-self._rotation).get_matrix()
1048:             for x in self._transforms
1049:         ]
1050:         Collection.draw(self, renderer)
1051: 
1052: 
1053: class StarPolygonCollection(RegularPolyCollection):
1054:     '''
1055:     Draw a collection of regular stars with *numsides* points.'''
1056: 
1057:     _path_generator = mpath.Path.unit_regular_star
1058: 
1059: 
1060: class AsteriskPolygonCollection(RegularPolyCollection):
1061:     '''
1062:     Draw a collection of regular asterisks with *numsides* points.'''
1063: 
1064:     _path_generator = mpath.Path.unit_regular_asterisk
1065: 
1066: 
1067: class LineCollection(Collection):
1068:     '''
1069:     All parameters must be sequences or scalars; if scalars, they will
1070:     be converted to sequences.  The property of the ith line
1071:     segment is::
1072: 
1073:        prop[i % len(props)]
1074: 
1075:     i.e., the properties cycle if the ``len`` of props is less than the
1076:     number of segments.
1077:     '''
1078: 
1079:     _edge_default = True
1080: 
1081:     def __init__(self, segments,     # Can be None.
1082:                  linewidths=None,
1083:                  colors=None,
1084:                  antialiaseds=None,
1085:                  linestyles='solid',
1086:                  offsets=None,
1087:                  transOffset=None,
1088:                  norm=None,
1089:                  cmap=None,
1090:                  pickradius=5,
1091:                  zorder=2,
1092:                  facecolors='none',
1093:                  **kwargs
1094:                  ):
1095:         '''
1096:         *segments*
1097:             a sequence of (*line0*, *line1*, *line2*), where::
1098: 
1099:                 linen = (x0, y0), (x1, y1), ... (xm, ym)
1100: 
1101:             or the equivalent numpy array with two columns. Each line
1102:             can be a different length.
1103: 
1104:         *colors*
1105:             must be a sequence of RGBA tuples (e.g., arbitrary color
1106:             strings, etc, not allowed).
1107: 
1108:         *antialiaseds*
1109:             must be a sequence of ones or zeros
1110: 
1111:         *linestyles* [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ]
1112:             a string or dash tuple. The dash tuple is::
1113: 
1114:                 (offset, onoffseq),
1115: 
1116:             where *onoffseq* is an even length tuple of on and off ink
1117:             in points.
1118: 
1119:         If *linewidths*, *colors*, or *antialiaseds* is None, they
1120:         default to their rcParams setting, in sequence form.
1121: 
1122:         If *offsets* and *transOffset* are not None, then
1123:         *offsets* are transformed by *transOffset* and applied after
1124:         the segments have been transformed to display coordinates.
1125: 
1126:         If *offsets* is not None but *transOffset* is None, then the
1127:         *offsets* are added to the segments before any transformation.
1128:         In this case, a single offset can be specified as::
1129: 
1130:             offsets=(xo,yo)
1131: 
1132:         and this value will be added cumulatively to each successive
1133:         segment, so as to produce a set of successively offset curves.
1134: 
1135:         *norm*
1136:             None (optional for :class:`matplotlib.cm.ScalarMappable`)
1137:         *cmap*
1138:             None (optional for :class:`matplotlib.cm.ScalarMappable`)
1139: 
1140:         *pickradius* is the tolerance for mouse clicks picking a line.
1141:         The default is 5 pt.
1142: 
1143:         *zorder*
1144:            The zorder of the LineCollection.  Default is 2
1145: 
1146:         *facecolors*
1147:            The facecolors of the LineCollection. Default is 'none'
1148:            Setting to a value other than 'none' will lead to a filled
1149:            polygon being drawn between points on each line.
1150: 
1151:         The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
1152:         If the :class:`~matplotlib.cm.ScalarMappable` array
1153:         :attr:`~matplotlib.cm.ScalarMappable._A` is not None (i.e., a call to
1154:         :meth:`~matplotlib.cm.ScalarMappable.set_array` has been made), at
1155:         draw time a call to scalar mappable will be made to set the colors.
1156:         '''
1157:         if colors is None:
1158:             colors = mpl.rcParams['lines.color']
1159:         if linewidths is None:
1160:             linewidths = (mpl.rcParams['lines.linewidth'],)
1161:         if antialiaseds is None:
1162:             antialiaseds = (mpl.rcParams['lines.antialiased'],)
1163: 
1164:         colors = mcolors.to_rgba_array(colors)
1165: 
1166:         Collection.__init__(
1167:             self,
1168:             edgecolors=colors,
1169:             facecolors=facecolors,
1170:             linewidths=linewidths,
1171:             linestyles=linestyles,
1172:             antialiaseds=antialiaseds,
1173:             offsets=offsets,
1174:             transOffset=transOffset,
1175:             norm=norm,
1176:             cmap=cmap,
1177:             pickradius=pickradius,
1178:             zorder=zorder,
1179:             **kwargs)
1180: 
1181:         self.set_segments(segments)
1182: 
1183:     def set_segments(self, segments):
1184:         if segments is None:
1185:             return
1186:         _segments = []
1187: 
1188:         for seg in segments:
1189:             if not isinstance(seg, np.ma.MaskedArray):
1190:                 seg = np.asarray(seg, float)
1191:             _segments.append(seg)
1192: 
1193:         if self._uniform_offsets is not None:
1194:             _segments = self._add_offsets(_segments)
1195: 
1196:         self._paths = [mpath.Path(_seg) for _seg in _segments]
1197:         self.stale = True
1198: 
1199:     set_verts = set_segments  # for compatibility with PolyCollection
1200:     set_paths = set_segments
1201: 
1202:     def get_segments(self):
1203:         segments = []
1204: 
1205:         for path in self._paths:
1206:             vertices = [vertex for vertex, _ in path.iter_segments()]
1207:             vertices = np.asarray(vertices)
1208:             segments.append(vertices)
1209: 
1210:         return segments
1211: 
1212:     def _add_offsets(self, segs):
1213:         offsets = self._uniform_offsets
1214:         Nsegs = len(segs)
1215:         Noffs = offsets.shape[0]
1216:         if Noffs == 1:
1217:             for i in range(Nsegs):
1218:                 segs[i] = segs[i] + i * offsets
1219:         else:
1220:             for i in range(Nsegs):
1221:                 io = i % Noffs
1222:                 segs[i] = segs[i] + offsets[io:io + 1]
1223:         return segs
1224: 
1225:     def set_color(self, c):
1226:         '''
1227:         Set the color(s) of the line collection.  *c* can be a
1228:         matplotlib color arg (all patches have same color), or a
1229:         sequence or rgba tuples; if it is a sequence the patches will
1230:         cycle through the sequence.
1231: 
1232:         ACCEPTS: matplotlib color arg or sequence of rgba tuples
1233:         '''
1234:         self.set_edgecolor(c)
1235:         self.stale = True
1236: 
1237:     def get_color(self):
1238:         return self._edgecolors
1239: 
1240:     get_colors = get_color  # for compatibility with old versions
1241: 
1242: 
1243: class EventCollection(LineCollection):
1244:     '''
1245:     A collection of discrete events.
1246: 
1247:     The events are given by a 1-dimensional array, usually the position of
1248:     something along an axis, such as time or length.  They do not have an
1249:     amplitude and are displayed as vertical or horizontal parallel bars.
1250:     '''
1251: 
1252:     _edge_default = True
1253: 
1254:     def __init__(self,
1255:                  positions,     # Cannot be None.
1256:                  orientation=None,
1257:                  lineoffset=0,
1258:                  linelength=1,
1259:                  linewidth=None,
1260:                  color=None,
1261:                  linestyle='solid',
1262:                  antialiased=None,
1263:                  **kwargs
1264:                  ):
1265:         '''
1266:         Parameters
1267:         ----------
1268:         positions : 1D array-like object
1269:             Each value is an event.
1270: 
1271:         orientation : {None, 'horizontal', 'vertical'}, optional
1272:             The orientation of the **collection** (the event bars are along
1273:             the orthogonal direction). Defaults to 'horizontal' if not
1274:             specified or None.
1275: 
1276:         lineoffset : scalar, optional, default: 0
1277:             The offset of the center of the markers from the origin, in the
1278:             direction orthogonal to *orientation*.
1279: 
1280:         linelength : scalar, optional, default: 1
1281:             The total height of the marker (i.e. the marker stretches from
1282:             ``lineoffset - linelength/2`` to ``lineoffset + linelength/2``).
1283: 
1284:         linewidth : scalar or None, optional, default: None
1285:             If it is None, defaults to its rcParams setting, in sequence form.
1286: 
1287:         color : color, sequence of colors or None, optional, default: None
1288:             If it is None, defaults to its rcParams setting, in sequence form.
1289: 
1290:         linestyle : str or tuple, optional, default: 'solid'
1291:             Valid strings are ['solid', 'dashed', 'dashdot', 'dotted',
1292:             '-', '--', '-.', ':']. Dash tuples should be of the form::
1293: 
1294:                 (offset, onoffseq),
1295: 
1296:             where *onoffseq* is an even length tuple of on and off ink
1297:             in points.
1298: 
1299:         antialiased : {None, 1, 2}, optional
1300:             If it is None, defaults to its rcParams setting, in sequence form.
1301: 
1302:         **kwargs : optional
1303:             Other keyword arguments are line collection properties.  See
1304:             :class:`~matplotlib.collections.LineCollection` for a list of
1305:             the valid properties.
1306: 
1307:         Examples
1308:         --------
1309: 
1310:         .. plot:: mpl_examples/lines_bars_and_markers/eventcollection_demo.py
1311:         '''
1312: 
1313:         segment = (lineoffset + linelength / 2.,
1314:                    lineoffset - linelength / 2.)
1315:         if positions is None or len(positions) == 0:
1316:             segments = []
1317:         elif hasattr(positions, 'ndim') and positions.ndim > 1:
1318:             raise ValueError('positions cannot be an array with more than '
1319:                              'one dimension.')
1320:         elif (orientation is None or orientation.lower() == 'none' or
1321:               orientation.lower() == 'horizontal'):
1322:             positions.sort()
1323:             segments = [[(coord1, coord2) for coord2 in segment] for
1324:                         coord1 in positions]
1325:             self._is_horizontal = True
1326:         elif orientation.lower() == 'vertical':
1327:             positions.sort()
1328:             segments = [[(coord2, coord1) for coord2 in segment] for
1329:                         coord1 in positions]
1330:             self._is_horizontal = False
1331:         else:
1332:             raise ValueError("orientation must be 'horizontal' or 'vertical'")
1333: 
1334:         LineCollection.__init__(self,
1335:                                 segments,
1336:                                 linewidths=linewidth,
1337:                                 colors=color,
1338:                                 antialiaseds=antialiased,
1339:                                 linestyles=linestyle,
1340:                                 **kwargs)
1341: 
1342:         self._linelength = linelength
1343:         self._lineoffset = lineoffset
1344: 
1345:     def get_positions(self):
1346:         '''
1347:         return an array containing the floating-point values of the positions
1348:         '''
1349:         segments = self.get_segments()
1350:         pos = 0 if self.is_horizontal() else 1
1351:         positions = []
1352:         for segment in segments:
1353:             positions.append(segment[0, pos])
1354:         return positions
1355: 
1356:     def set_positions(self, positions):
1357:         '''
1358:         set the positions of the events to the specified value
1359:         '''
1360:         if positions is None or (hasattr(positions, 'len') and
1361:                                  len(positions) == 0):
1362:             self.set_segments([])
1363:             return
1364: 
1365:         lineoffset = self.get_lineoffset()
1366:         linelength = self.get_linelength()
1367:         segment = (lineoffset + linelength / 2.,
1368:                    lineoffset - linelength / 2.)
1369:         positions = np.asanyarray(positions)
1370:         positions.sort()
1371:         if self.is_horizontal():
1372:             segments = [[(coord1, coord2) for coord2 in segment] for
1373:                         coord1 in positions]
1374:         else:
1375:             segments = [[(coord2, coord1) for coord2 in segment] for
1376:                         coord1 in positions]
1377:         self.set_segments(segments)
1378: 
1379:     def add_positions(self, position):
1380:         '''
1381:         add one or more events at the specified positions
1382:         '''
1383:         if position is None or (hasattr(position, 'len') and
1384:                                 len(position) == 0):
1385:             return
1386:         positions = self.get_positions()
1387:         positions = np.hstack([positions, np.asanyarray(position)])
1388:         self.set_positions(positions)
1389:     extend_positions = append_positions = add_positions
1390: 
1391:     def is_horizontal(self):
1392:         '''
1393:         True if the eventcollection is horizontal, False if vertical
1394:         '''
1395:         return self._is_horizontal
1396: 
1397:     def get_orientation(self):
1398:         '''
1399:         get the orientation of the event line, may be:
1400:         [ 'horizontal' | 'vertical' ]
1401:         '''
1402:         return 'horizontal' if self.is_horizontal() else 'vertical'
1403: 
1404:     def switch_orientation(self):
1405:         '''
1406:         switch the orientation of the event line, either from vertical to
1407:         horizontal or vice versus
1408:         '''
1409:         segments = self.get_segments()
1410:         for i, segment in enumerate(segments):
1411:             segments[i] = np.fliplr(segment)
1412:         self.set_segments(segments)
1413:         self._is_horizontal = not self.is_horizontal()
1414:         self.stale = True
1415: 
1416:     def set_orientation(self, orientation=None):
1417:         '''
1418:         set the orientation of the event line
1419:         [ 'horizontal' | 'vertical' | None ]
1420:         defaults to 'horizontal' if not specified or None
1421:         '''
1422:         if (orientation is None or orientation.lower() == 'none' or
1423:                 orientation.lower() == 'horizontal'):
1424:             is_horizontal = True
1425:         elif orientation.lower() == 'vertical':
1426:             is_horizontal = False
1427:         else:
1428:             raise ValueError("orientation must be 'horizontal' or 'vertical'")
1429: 
1430:         if is_horizontal == self.is_horizontal():
1431:             return
1432:         self.switch_orientation()
1433: 
1434:     def get_linelength(self):
1435:         '''
1436:         get the length of the lines used to mark each event
1437:         '''
1438:         return self._linelength
1439: 
1440:     def set_linelength(self, linelength):
1441:         '''
1442:         set the length of the lines used to mark each event
1443:         '''
1444:         if linelength == self.get_linelength():
1445:             return
1446:         lineoffset = self.get_lineoffset()
1447:         segments = self.get_segments()
1448:         pos = 1 if self.is_horizontal() else 0
1449:         for segment in segments:
1450:             segment[0, pos] = lineoffset + linelength / 2.
1451:             segment[1, pos] = lineoffset - linelength / 2.
1452:         self.set_segments(segments)
1453:         self._linelength = linelength
1454: 
1455:     def get_lineoffset(self):
1456:         '''
1457:         get the offset of the lines used to mark each event
1458:         '''
1459:         return self._lineoffset
1460: 
1461:     def set_lineoffset(self, lineoffset):
1462:         '''
1463:         set the offset of the lines used to mark each event
1464:         '''
1465:         if lineoffset == self.get_lineoffset():
1466:             return
1467:         linelength = self.get_linelength()
1468:         segments = self.get_segments()
1469:         pos = 1 if self.is_horizontal() else 0
1470:         for segment in segments:
1471:             segment[0, pos] = lineoffset + linelength / 2.
1472:             segment[1, pos] = lineoffset - linelength / 2.
1473:         self.set_segments(segments)
1474:         self._lineoffset = lineoffset
1475: 
1476:     def get_linewidth(self):
1477:         '''
1478:         get the width of the lines used to mark each event
1479:         '''
1480:         return self.get_linewidths()[0]
1481: 
1482:     def get_linestyle(self):
1483:         '''
1484:         get the style of the lines used to mark each event
1485:         [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ]
1486:         '''
1487:         return self.get_linestyles()
1488: 
1489:     def get_color(self):
1490:         '''
1491:         get the color of the lines used to mark each event
1492:         '''
1493:         return self.get_colors()[0]
1494: 
1495: 
1496: class CircleCollection(_CollectionWithSizes):
1497:     '''
1498:     A collection of circles, drawn using splines.
1499:     '''
1500:     _factor = CIRCLE_AREA_FACTOR
1501: 
1502:     @docstring.dedent_interpd
1503:     def __init__(self, sizes, **kwargs):
1504:         '''
1505:         *sizes*
1506:             Gives the area of the circle in points^2
1507: 
1508:         %(Collection)s
1509:         '''
1510:         Collection.__init__(self, **kwargs)
1511:         self.set_sizes(sizes)
1512:         self.set_transform(transforms.IdentityTransform())
1513:         self._paths = [mpath.Path.unit_circle()]
1514: 
1515: 
1516: class EllipseCollection(Collection):
1517:     '''
1518:     A collection of ellipses, drawn using splines.
1519:     '''
1520:     @docstring.dedent_interpd
1521:     def __init__(self, widths, heights, angles, units='points', **kwargs):
1522:         '''
1523:         *widths*: sequence
1524:             lengths of first axes (e.g., major axis lengths)
1525: 
1526:         *heights*: sequence
1527:             lengths of second axes
1528: 
1529:         *angles*: sequence
1530:             angles of first axes, degrees CCW from the X-axis
1531: 
1532:         *units*: ['points' | 'inches' | 'dots' | 'width' | 'height'
1533:         | 'x' | 'y' | 'xy']
1534: 
1535:             units in which majors and minors are given; 'width' and
1536:             'height' refer to the dimensions of the axes, while 'x'
1537:             and 'y' refer to the *offsets* data units. 'xy' differs
1538:             from all others in that the angle as plotted varies with
1539:             the aspect ratio, and equals the specified angle only when
1540:             the aspect ratio is unity.  Hence it behaves the same as
1541:             the :class:`~matplotlib.patches.Ellipse` with
1542:             axes.transData as its transform.
1543: 
1544:         Additional kwargs inherited from the base :class:`Collection`:
1545: 
1546:         %(Collection)s
1547:         '''
1548:         Collection.__init__(self, **kwargs)
1549:         self._widths = 0.5 * np.asarray(widths).ravel()
1550:         self._heights = 0.5 * np.asarray(heights).ravel()
1551:         self._angles = np.deg2rad(angles).ravel()
1552:         self._units = units
1553:         self.set_transform(transforms.IdentityTransform())
1554:         self._transforms = np.empty((0, 3, 3))
1555:         self._paths = [mpath.Path.unit_circle()]
1556: 
1557:     def _set_transforms(self):
1558:         '''
1559:         Calculate transforms immediately before drawing.
1560:         '''
1561:         ax = self.axes
1562:         fig = self.figure
1563: 
1564:         if self._units == 'xy':
1565:             sc = 1
1566:         elif self._units == 'x':
1567:             sc = ax.bbox.width / ax.viewLim.width
1568:         elif self._units == 'y':
1569:             sc = ax.bbox.height / ax.viewLim.height
1570:         elif self._units == 'inches':
1571:             sc = fig.dpi
1572:         elif self._units == 'points':
1573:             sc = fig.dpi / 72.0
1574:         elif self._units == 'width':
1575:             sc = ax.bbox.width
1576:         elif self._units == 'height':
1577:             sc = ax.bbox.height
1578:         elif self._units == 'dots':
1579:             sc = 1.0
1580:         else:
1581:             raise ValueError('unrecognized units: %s' % self._units)
1582: 
1583:         self._transforms = np.zeros((len(self._widths), 3, 3))
1584:         widths = self._widths * sc
1585:         heights = self._heights * sc
1586:         sin_angle = np.sin(self._angles)
1587:         cos_angle = np.cos(self._angles)
1588:         self._transforms[:, 0, 0] = widths * cos_angle
1589:         self._transforms[:, 0, 1] = heights * -sin_angle
1590:         self._transforms[:, 1, 0] = widths * sin_angle
1591:         self._transforms[:, 1, 1] = heights * cos_angle
1592:         self._transforms[:, 2, 2] = 1.0
1593: 
1594:         _affine = transforms.Affine2D
1595:         if self._units == 'xy':
1596:             m = ax.transData.get_affine().get_matrix().copy()
1597:             m[:2, 2:] = 0
1598:             self.set_transform(_affine(m))
1599: 
1600:     @allow_rasterization
1601:     def draw(self, renderer):
1602:         self._set_transforms()
1603:         Collection.draw(self, renderer)
1604: 
1605: 
1606: class PatchCollection(Collection):
1607:     '''
1608:     A generic collection of patches.
1609: 
1610:     This makes it easier to assign a color map to a heterogeneous
1611:     collection of patches.
1612: 
1613:     This also may improve plotting speed, since PatchCollection will
1614:     draw faster than a large number of patches.
1615:     '''
1616: 
1617:     def __init__(self, patches, match_original=False, **kwargs):
1618:         '''
1619:         *patches*
1620:             a sequence of Patch objects.  This list may include
1621:             a heterogeneous assortment of different patch types.
1622: 
1623:         *match_original*
1624:             If True, use the colors and linewidths of the original
1625:             patches.  If False, new colors may be assigned by
1626:             providing the standard collection arguments, facecolor,
1627:             edgecolor, linewidths, norm or cmap.
1628: 
1629:         If any of *edgecolors*, *facecolors*, *linewidths*,
1630:         *antialiaseds* are None, they default to their
1631:         :data:`matplotlib.rcParams` patch setting, in sequence form.
1632: 
1633:         The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
1634:         If the :class:`~matplotlib.cm.ScalarMappable` matrix _A is not
1635:         None (i.e., a call to set_array has been made), at draw time a
1636:         call to scalar mappable will be made to set the face colors.
1637:         '''
1638: 
1639:         if match_original:
1640:             def determine_facecolor(patch):
1641:                 if patch.get_fill():
1642:                     return patch.get_facecolor()
1643:                 return [0, 0, 0, 0]
1644: 
1645:             kwargs['facecolors'] = [determine_facecolor(p) for p in patches]
1646:             kwargs['edgecolors'] = [p.get_edgecolor() for p in patches]
1647:             kwargs['linewidths'] = [p.get_linewidth() for p in patches]
1648:             kwargs['linestyles'] = [p.get_linestyle() for p in patches]
1649:             kwargs['antialiaseds'] = [p.get_antialiased() for p in patches]
1650: 
1651:         Collection.__init__(self, **kwargs)
1652: 
1653:         self.set_paths(patches)
1654: 
1655:     def set_paths(self, patches):
1656:         paths = [p.get_transform().transform_path(p.get_path())
1657:                  for p in patches]
1658:         self._paths = paths
1659: 
1660: 
1661: class TriMesh(Collection):
1662:     '''
1663:     Class for the efficient drawing of a triangular mesh using
1664:     Gouraud shading.
1665: 
1666:     A triangular mesh is a :class:`~matplotlib.tri.Triangulation`
1667:     object.
1668:     '''
1669:     def __init__(self, triangulation, **kwargs):
1670:         Collection.__init__(self, **kwargs)
1671:         self._triangulation = triangulation
1672:         self._shading = 'gouraud'
1673:         self._is_filled = True
1674: 
1675:         self._bbox = transforms.Bbox.unit()
1676: 
1677:         # Unfortunately this requires a copy, unless Triangulation
1678:         # was rewritten.
1679:         xy = np.hstack((triangulation.x.reshape(-1, 1),
1680:                         triangulation.y.reshape(-1, 1)))
1681:         self._bbox.update_from_data_xy(xy)
1682: 
1683:     def get_paths(self):
1684:         if self._paths is None:
1685:             self.set_paths()
1686:         return self._paths
1687: 
1688:     def set_paths(self):
1689:         self._paths = self.convert_mesh_to_paths(self._triangulation)
1690: 
1691:     @staticmethod
1692:     def convert_mesh_to_paths(tri):
1693:         '''
1694:         Converts a given mesh into a sequence of
1695:         :class:`matplotlib.path.Path` objects for easier rendering by
1696:         backends that do not directly support meshes.
1697: 
1698:         This function is primarily of use to backend implementers.
1699:         '''
1700:         Path = mpath.Path
1701:         triangles = tri.get_masked_triangles()
1702:         verts = np.concatenate((tri.x[triangles][..., np.newaxis],
1703:                                 tri.y[triangles][..., np.newaxis]), axis=2)
1704:         return [Path(x) for x in verts]
1705: 
1706:     @allow_rasterization
1707:     def draw(self, renderer):
1708:         if not self.get_visible():
1709:             return
1710:         renderer.open_group(self.__class__.__name__)
1711:         transform = self.get_transform()
1712: 
1713:         # Get a list of triangles and the color at each vertex.
1714:         tri = self._triangulation
1715:         triangles = tri.get_masked_triangles()
1716: 
1717:         verts = np.concatenate((tri.x[triangles][..., np.newaxis],
1718:                                 tri.y[triangles][..., np.newaxis]), axis=2)
1719: 
1720:         self.update_scalarmappable()
1721:         colors = self._facecolors[triangles]
1722: 
1723:         gc = renderer.new_gc()
1724:         self._set_gc_clip(gc)
1725:         gc.set_linewidth(self.get_linewidth()[0])
1726:         renderer.draw_gouraud_triangles(gc, verts, colors, transform.frozen())
1727:         gc.restore()
1728:         renderer.close_group(self.__class__.__name__)
1729: 
1730: 
1731: class QuadMesh(Collection):
1732:     '''
1733:     Class for the efficient drawing of a quadrilateral mesh.
1734: 
1735:     A quadrilateral mesh consists of a grid of vertices. The
1736:     dimensions of this array are (*meshWidth* + 1, *meshHeight* +
1737:     1). Each vertex in the mesh has a different set of "mesh
1738:     coordinates" representing its position in the topology of the
1739:     mesh. For any values (*m*, *n*) such that 0 <= *m* <= *meshWidth*
1740:     and 0 <= *n* <= *meshHeight*, the vertices at mesh coordinates
1741:     (*m*, *n*), (*m*, *n* + 1), (*m* + 1, *n* + 1), and (*m* + 1, *n*)
1742:     form one of the quadrilaterals in the mesh. There are thus
1743:     (*meshWidth* * *meshHeight*) quadrilaterals in the mesh.  The mesh
1744:     need not be regular and the polygons need not be convex.
1745: 
1746:     A quadrilateral mesh is represented by a (2 x ((*meshWidth* + 1) *
1747:     (*meshHeight* + 1))) numpy array *coordinates*, where each row is
1748:     the *x* and *y* coordinates of one of the vertices.  To define the
1749:     function that maps from a data point to its corresponding color,
1750:     use the :meth:`set_cmap` method.  Each of these arrays is indexed in
1751:     row-major order by the mesh coordinates of the vertex (or the mesh
1752:     coordinates of the lower left vertex, in the case of the
1753:     colors).
1754: 
1755:     For example, the first entry in *coordinates* is the
1756:     coordinates of the vertex at mesh coordinates (0, 0), then the one
1757:     at (0, 1), then at (0, 2) .. (0, meshWidth), (1, 0), (1, 1), and
1758:     so on.
1759: 
1760:     *shading* may be 'flat', or 'gouraud'
1761:     '''
1762:     def __init__(self, meshWidth, meshHeight, coordinates,
1763:                  antialiased=True, shading='flat', **kwargs):
1764:         Collection.__init__(self, **kwargs)
1765:         self._meshWidth = meshWidth
1766:         self._meshHeight = meshHeight
1767:         # By converting to floats now, we can avoid that on every draw.
1768:         self._coordinates = np.asarray(coordinates, float).reshape(
1769:             (meshHeight + 1, meshWidth + 1, 2))
1770:         self._antialiased = antialiased
1771:         self._shading = shading
1772: 
1773:         self._bbox = transforms.Bbox.unit()
1774:         self._bbox.update_from_data_xy(coordinates.reshape(
1775:             ((meshWidth + 1) * (meshHeight + 1), 2)))
1776: 
1777:     def get_paths(self):
1778:         if self._paths is None:
1779:             self.set_paths()
1780:         return self._paths
1781: 
1782:     def set_paths(self):
1783:         self._paths = self.convert_mesh_to_paths(
1784:             self._meshWidth, self._meshHeight, self._coordinates)
1785:         self.stale = True
1786: 
1787:     def get_datalim(self, transData):
1788:         return (self.get_transform() - transData).transform_bbox(self._bbox)
1789: 
1790:     @staticmethod
1791:     def convert_mesh_to_paths(meshWidth, meshHeight, coordinates):
1792:         '''
1793:         Converts a given mesh into a sequence of
1794:         :class:`matplotlib.path.Path` objects for easier rendering by
1795:         backends that do not directly support quadmeshes.
1796: 
1797:         This function is primarily of use to backend implementers.
1798:         '''
1799:         Path = mpath.Path
1800: 
1801:         if isinstance(coordinates, np.ma.MaskedArray):
1802:             c = coordinates.data
1803:         else:
1804:             c = coordinates
1805: 
1806:         points = np.concatenate((
1807:                     c[0:-1, 0:-1],
1808:                     c[0:-1, 1:],
1809:                     c[1:, 1:],
1810:                     c[1:, 0:-1],
1811:                     c[0:-1, 0:-1]
1812:                 ), axis=2)
1813:         points = points.reshape((meshWidth * meshHeight, 5, 2))
1814:         return [Path(x) for x in points]
1815: 
1816:     def convert_mesh_to_triangles(self, meshWidth, meshHeight, coordinates):
1817:         '''
1818:         Converts a given mesh into a sequence of triangles, each point
1819:         with its own color.  This is useful for experiments using
1820:         `draw_qouraud_triangle`.
1821:         '''
1822:         if isinstance(coordinates, np.ma.MaskedArray):
1823:             p = coordinates.data
1824:         else:
1825:             p = coordinates
1826: 
1827:         p_a = p[:-1, :-1]
1828:         p_b = p[:-1, 1:]
1829:         p_c = p[1:, 1:]
1830:         p_d = p[1:, :-1]
1831:         p_center = (p_a + p_b + p_c + p_d) / 4.0
1832: 
1833:         triangles = np.concatenate((
1834:                 p_a, p_b, p_center,
1835:                 p_b, p_c, p_center,
1836:                 p_c, p_d, p_center,
1837:                 p_d, p_a, p_center,
1838:             ), axis=2)
1839:         triangles = triangles.reshape((meshWidth * meshHeight * 4, 3, 2))
1840: 
1841:         c = self.get_facecolor().reshape((meshHeight + 1, meshWidth + 1, 4))
1842:         c_a = c[:-1, :-1]
1843:         c_b = c[:-1, 1:]
1844:         c_c = c[1:, 1:]
1845:         c_d = c[1:, :-1]
1846:         c_center = (c_a + c_b + c_c + c_d) / 4.0
1847: 
1848:         colors = np.concatenate((
1849:                         c_a, c_b, c_center,
1850:                         c_b, c_c, c_center,
1851:                         c_c, c_d, c_center,
1852:                         c_d, c_a, c_center,
1853:                     ), axis=2)
1854:         colors = colors.reshape((meshWidth * meshHeight * 4, 3, 4))
1855: 
1856:         return triangles, colors
1857: 
1858:     @allow_rasterization
1859:     def draw(self, renderer):
1860:         if not self.get_visible():
1861:             return
1862:         renderer.open_group(self.__class__.__name__, self.get_gid())
1863:         transform = self.get_transform()
1864:         transOffset = self.get_offset_transform()
1865:         offsets = self._offsets
1866: 
1867:         if self.have_units():
1868:             if len(self._offsets):
1869:                 xs = self.convert_xunits(self._offsets[:, 0])
1870:                 ys = self.convert_yunits(self._offsets[:, 1])
1871:                 offsets = np.column_stack([xs, ys])
1872: 
1873:         self.update_scalarmappable()
1874: 
1875:         if not transform.is_affine:
1876:             coordinates = self._coordinates.reshape((-1, 2))
1877:             coordinates = transform.transform(coordinates)
1878:             coordinates = coordinates.reshape(self._coordinates.shape)
1879:             transform = transforms.IdentityTransform()
1880:         else:
1881:             coordinates = self._coordinates
1882: 
1883:         if not transOffset.is_affine:
1884:             offsets = transOffset.transform_non_affine(offsets)
1885:             transOffset = transOffset.get_affine()
1886: 
1887:         gc = renderer.new_gc()
1888:         self._set_gc_clip(gc)
1889:         gc.set_linewidth(self.get_linewidth()[0])
1890: 
1891:         if self._shading == 'gouraud':
1892:             triangles, colors = self.convert_mesh_to_triangles(
1893:                 self._meshWidth, self._meshHeight, coordinates)
1894:             renderer.draw_gouraud_triangles(
1895:                 gc, triangles, colors, transform.frozen())
1896:         else:
1897:             renderer.draw_quad_mesh(
1898:                 gc, transform.frozen(), self._meshWidth, self._meshHeight,
1899:                 coordinates, offsets, transOffset, self.get_facecolor(),
1900:                 self._antialiased, self.get_edgecolors())
1901:         gc.restore()
1902:         renderer.close_group(self.__class__.__name__)
1903:         self.stale = False
1904: 
1905: 
1906: patchstr = artist.kwdoc(Collection)
1907: for k in ('QuadMesh', 'TriMesh', 'PolyCollection', 'BrokenBarHCollection',
1908:           'RegularPolyCollection', 'PathCollection',
1909:           'StarPolygonCollection', 'PatchCollection',
1910:           'CircleCollection', 'Collection',):
1911:     docstring.interpd.update({k: patchstr})
1912: docstring.interpd.update(LineCollection=artist.kwdoc(LineCollection))
1913: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_26236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 10, (-1)), 'unicode', u'\nClasses for the efficient drawing of large collections of objects that\nshare most properties, e.g., a large number of line segments or\npolygons.\n\nThe classes are not meant to be as flexible as their single element\ncounterparts (e.g., you may not be able to select all line styles) but\nthey are meant to be fast for common use cases (e.g., a large set of solid\nline segemnts)\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'import six' statement (line 14)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_26237 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'six')

if (type(import_26237) is not StypyTypeError):

    if (import_26237 != 'pyd_module'):
        __import__(import_26237)
        sys_modules_26238 = sys.modules[import_26237]
        import_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'six', sys_modules_26238.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'six', import_26237)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'from six.moves import zip' statement (line 15)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_26239 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'six.moves')

if (type(import_26239) is not StypyTypeError):

    if (import_26239 != 'pyd_module'):
        __import__(import_26239)
        sys_modules_26240 = sys.modules[import_26239]
        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'six.moves', sys_modules_26240.module_type_store, module_type_store, ['zip'])
        nest_module(stypy.reporting.localization.Localization(__file__, 15, 0), __file__, sys_modules_26240, sys_modules_26240.module_type_store, module_type_store)
    else:
        from six.moves import zip

        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'six.moves', None, module_type_store, ['zip'], [zip])

else:
    # Assigning a type to the variable 'six.moves' (line 15)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 15, 0), 'six.moves', import_26239)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')



# SSA begins for try-except statement (line 16)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 4))

# 'from math import gcd' statement (line 17)
try:
    from math import gcd

except:
    gcd = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 17, 4), 'math', None, module_type_store, ['gcd'], [gcd])

# SSA branch for the except part of a try statement (line 16)
# SSA branch for the except 'ImportError' branch of a try statement (line 16)
module_type_store.open_ssa_branch('except')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 4))

# 'from fractions import gcd' statement (line 20)
try:
    from fractions import gcd

except:
    gcd = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 20, 4), 'fractions', None, module_type_store, ['gcd'], [gcd])

# SSA join for try-except statement (line 16)
module_type_store = module_type_store.join_ssa_context()

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 22, 0))

# 'import numpy' statement (line 22)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_26241 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'numpy')

if (type(import_26241) is not StypyTypeError):

    if (import_26241 != 'pyd_module'):
        __import__(import_26241)
        sys_modules_26242 = sys.modules[import_26241]
        import_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'np', sys_modules_26242.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 22)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 22, 0), 'numpy', import_26241)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'import matplotlib' statement (line 23)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_26243 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib')

if (type(import_26243) is not StypyTypeError):

    if (import_26243 != 'pyd_module'):
        __import__(import_26243)
        sys_modules_26244 = sys.modules[import_26243]
        import_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'mpl', sys_modules_26244.module_type_store, module_type_store)
    else:
        import matplotlib as mpl

        import_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'mpl', matplotlib, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib' (line 23)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib', import_26243)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'import matplotlib.cbook' statement (line 24)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_26245 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.cbook')

if (type(import_26245) is not StypyTypeError):

    if (import_26245 != 'pyd_module'):
        __import__(import_26245)
        sys_modules_26246 = sys.modules[import_26245]
        import_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'cbook', sys_modules_26246.module_type_store, module_type_store)
    else:
        import matplotlib.cbook as cbook

        import_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'cbook', matplotlib.cbook, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 24)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.cbook', import_26245)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'import matplotlib.colors' statement (line 25)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_26247 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.colors')

if (type(import_26247) is not StypyTypeError):

    if (import_26247 != 'pyd_module'):
        __import__(import_26247)
        sys_modules_26248 = sys.modules[import_26247]
        import_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'mcolors', sys_modules_26248.module_type_store, module_type_store)
    else:
        import matplotlib.colors as mcolors

        import_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'mcolors', matplotlib.colors, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.colors' (line 25)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.colors', import_26247)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 26, 0))

# 'import matplotlib.cm' statement (line 26)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_26249 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.cm')

if (type(import_26249) is not StypyTypeError):

    if (import_26249 != 'pyd_module'):
        __import__(import_26249)
        sys_modules_26250 = sys.modules[import_26249]
        import_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'cm', sys_modules_26250.module_type_store, module_type_store)
    else:
        import matplotlib.cm as cm

        import_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'cm', matplotlib.cm, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.cm' (line 26)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.cm', import_26249)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'from matplotlib import docstring' statement (line 27)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_26251 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib')

if (type(import_26251) is not StypyTypeError):

    if (import_26251 != 'pyd_module'):
        __import__(import_26251)
        sys_modules_26252 = sys.modules[import_26251]
        import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib', sys_modules_26252.module_type_store, module_type_store, ['docstring'])
        nest_module(stypy.reporting.localization.Localization(__file__, 27, 0), __file__, sys_modules_26252, sys_modules_26252.module_type_store, module_type_store)
    else:
        from matplotlib import docstring

        import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib', None, module_type_store, ['docstring'], [docstring])

else:
    # Assigning a type to the variable 'matplotlib' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib', import_26251)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'import matplotlib.transforms' statement (line 28)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_26253 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib.transforms')

if (type(import_26253) is not StypyTypeError):

    if (import_26253 != 'pyd_module'):
        __import__(import_26253)
        sys_modules_26254 = sys.modules[import_26253]
        import_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'transforms', sys_modules_26254.module_type_store, module_type_store)
    else:
        import matplotlib.transforms as transforms

        import_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'transforms', matplotlib.transforms, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib.transforms', import_26253)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'import matplotlib.artist' statement (line 29)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_26255 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.artist')

if (type(import_26255) is not StypyTypeError):

    if (import_26255 != 'pyd_module'):
        __import__(import_26255)
        sys_modules_26256 = sys.modules[import_26255]
        import_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'artist', sys_modules_26256.module_type_store, module_type_store)
    else:
        import matplotlib.artist as artist

        import_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'artist', matplotlib.artist, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.artist', import_26255)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 30, 0))

# 'from matplotlib.artist import allow_rasterization' statement (line 30)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_26257 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib.artist')

if (type(import_26257) is not StypyTypeError):

    if (import_26257 != 'pyd_module'):
        __import__(import_26257)
        sys_modules_26258 = sys.modules[import_26257]
        import_from_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib.artist', sys_modules_26258.module_type_store, module_type_store, ['allow_rasterization'])
        nest_module(stypy.reporting.localization.Localization(__file__, 30, 0), __file__, sys_modules_26258, sys_modules_26258.module_type_store, module_type_store)
    else:
        from matplotlib.artist import allow_rasterization

        import_from_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib.artist', None, module_type_store, ['allow_rasterization'], [allow_rasterization])

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 30)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib.artist', import_26257)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 31, 0))

# 'import matplotlib.path' statement (line 31)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_26259 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.path')

if (type(import_26259) is not StypyTypeError):

    if (import_26259 != 'pyd_module'):
        __import__(import_26259)
        sys_modules_26260 = sys.modules[import_26259]
        import_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'mpath', sys_modules_26260.module_type_store, module_type_store)
    else:
        import matplotlib.path as mpath

        import_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'mpath', matplotlib.path, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.path' (line 31)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib.path', import_26259)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 32, 0))

# 'from matplotlib import _path' statement (line 32)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_26261 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib')

if (type(import_26261) is not StypyTypeError):

    if (import_26261 != 'pyd_module'):
        __import__(import_26261)
        sys_modules_26262 = sys.modules[import_26261]
        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib', sys_modules_26262.module_type_store, module_type_store, ['_path'])
        nest_module(stypy.reporting.localization.Localization(__file__, 32, 0), __file__, sys_modules_26262, sys_modules_26262.module_type_store, module_type_store)
    else:
        from matplotlib import _path

        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib', None, module_type_store, ['_path'], [_path])

else:
    # Assigning a type to the variable 'matplotlib' (line 32)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib', import_26261)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 33, 0))

# 'import matplotlib.mlab' statement (line 33)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_26263 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'matplotlib.mlab')

if (type(import_26263) is not StypyTypeError):

    if (import_26263 != 'pyd_module'):
        __import__(import_26263)
        sys_modules_26264 = sys.modules[import_26263]
        import_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'mlab', sys_modules_26264.module_type_store, module_type_store)
    else:
        import matplotlib.mlab as mlab

        import_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'mlab', matplotlib.mlab, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.mlab' (line 33)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'matplotlib.mlab', import_26263)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 34, 0))

# 'import matplotlib.lines' statement (line 34)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_26265 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.lines')

if (type(import_26265) is not StypyTypeError):

    if (import_26265 != 'pyd_module'):
        __import__(import_26265)
        sys_modules_26266 = sys.modules[import_26265]
        import_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'mlines', sys_modules_26266.module_type_store, module_type_store)
    else:
        import matplotlib.lines as mlines

        import_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'mlines', matplotlib.lines, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.lines' (line 34)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.lines', import_26265)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')


# Assigning a BinOp to a Name (line 36):

# Assigning a BinOp to a Name (line 36):
float_26267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 21), 'float')

# Call to sqrt(...): (line 36)
# Processing the call arguments (line 36)
# Getting the type of 'np' (line 36)
np_26270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 35), 'np', False)
# Obtaining the member 'pi' of a type (line 36)
pi_26271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 36, 35), np_26270, 'pi')
# Processing the call keyword arguments (line 36)
kwargs_26272 = {}
# Getting the type of 'np' (line 36)
np_26268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 27), 'np', False)
# Obtaining the member 'sqrt' of a type (line 36)
sqrt_26269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 36, 27), np_26268, 'sqrt')
# Calling sqrt(args, kwargs) (line 36)
sqrt_call_result_26273 = invoke(stypy.reporting.localization.Localization(__file__, 36, 27), sqrt_26269, *[pi_26271], **kwargs_26272)

# Applying the binary operator 'div' (line 36)
result_div_26274 = python_operator(stypy.reporting.localization.Localization(__file__, 36, 21), 'div', float_26267, sqrt_call_result_26273)

# Assigning a type to the variable 'CIRCLE_AREA_FACTOR' (line 36)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 0), 'CIRCLE_AREA_FACTOR', result_div_26274)

# Assigning a Dict to a Name (line 39):

# Assigning a Dict to a Name (line 39):

# Obtaining an instance of the builtin type 'dict' (line 39)
dict_26275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 17), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 39)
# Adding element type (key, value) (line 39)
unicode_26276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 18), 'unicode', u'facecolors')

# Obtaining an instance of the builtin type 'list' (line 39)
list_26277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 32), 'list')
# Adding type elements to the builtin type 'list' instance (line 39)
# Adding element type (line 39)
unicode_26278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 33), 'unicode', u'facecolor')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 39, 32), list_26277, unicode_26278)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 39, 17), dict_26275, (unicode_26276, list_26277))
# Adding element type (key, value) (line 39)
unicode_26279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 18), 'unicode', u'edgecolors')

# Obtaining an instance of the builtin type 'list' (line 40)
list_26280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 32), 'list')
# Adding type elements to the builtin type 'list' instance (line 40)
# Adding element type (line 40)
unicode_26281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 33), 'unicode', u'edgecolor')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 40, 32), list_26280, unicode_26281)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 39, 17), dict_26275, (unicode_26279, list_26280))

# Assigning a type to the variable '_color_aliases' (line 39)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), '_color_aliases', dict_26275)
# Declaration of the 'Collection' class
# Getting the type of 'artist' (line 43)
artist_26282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 17), 'artist')
# Obtaining the member 'Artist' of a type (line 43)
Artist_26283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 43, 17), artist_26282, 'Artist')
# Getting the type of 'cm' (line 43)
cm_26284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 32), 'cm')
# Obtaining the member 'ScalarMappable' of a type (line 43)
ScalarMappable_26285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 43, 32), cm_26284, 'ScalarMappable')

class Collection(Artist_26283, ScalarMappable_26285, ):
    unicode_26286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, (-1)), 'unicode', u"\n    Base class for Collections.  Must be subclassed to be usable.\n\n    All properties in a collection must be sequences or scalars;\n    if scalars, they will be converted to sequences.  The\n    property of the ith element of the collection is::\n\n      prop[i % len(props)]\n\n    Keyword arguments and default values:\n\n        * *edgecolors*: None\n        * *facecolors*: None\n        * *linewidths*: None\n        * *antialiaseds*: None\n        * *offsets*: None\n        * *transOffset*: transforms.IdentityTransform()\n        * *offset_position*: 'screen' (default) or 'data'\n        * *norm*: None (optional for\n          :class:`matplotlib.cm.ScalarMappable`)\n        * *cmap*: None (optional for\n          :class:`matplotlib.cm.ScalarMappable`)\n        * *hatch*: None\n        * *zorder*: 1\n\n\n    *offsets* and *transOffset* are used to translate the patch after\n    rendering (default no offsets).  If offset_position is 'screen'\n    (default) the offset is applied after the master transform has\n    been applied, that is, the offsets are in screen coordinates.  If\n    offset_position is 'data', the offset is applied before the master\n    transform, i.e., the offsets are in data coordinates.\n\n    If any of *edgecolors*, *facecolors*, *linewidths*, *antialiaseds*\n    are None, they default to their :data:`matplotlib.rcParams` patch\n    setting, in sequence form.\n\n    The use of :class:`~matplotlib.cm.ScalarMappable` is optional.  If\n    the :class:`~matplotlib.cm.ScalarMappable` matrix _A is not None\n    (i.e., a call to set_array has been made), at draw time a call to\n    scalar mappable will be made to set the face colors.\n    ")
    
    # Assigning a Call to a Name (line 86):
    
    # Assigning a Call to a Name (line 87):
    
    # Assigning a Call to a Name (line 94):
    
    # Assigning a Name to a Name (line 98):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 101)
        None_26287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 28), 'None')
        # Getting the type of 'None' (line 102)
        None_26288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 28), 'None')
        # Getting the type of 'None' (line 103)
        None_26289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 28), 'None')
        unicode_26290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 28), 'unicode', u'solid')
        # Getting the type of 'None' (line 105)
        None_26291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 30), 'None')
        # Getting the type of 'None' (line 106)
        None_26292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 25), 'None')
        # Getting the type of 'None' (line 107)
        None_26293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 29), 'None')
        # Getting the type of 'None' (line 108)
        None_26294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 22), 'None')
        # Getting the type of 'None' (line 109)
        None_26295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 22), 'None')
        float_26296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 110, 28), 'float')
        # Getting the type of 'None' (line 111)
        None_26297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 23), 'None')
        # Getting the type of 'None' (line 112)
        None_26298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 22), 'None')
        unicode_26299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 33), 'unicode', u'screen')
        int_26300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 114, 24), 'int')
        defaults = [None_26287, None_26288, None_26289, unicode_26290, None_26291, None_26292, None_26293, None_26294, None_26295, float_26296, None_26297, None_26298, unicode_26299, int_26300]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 100, 4, False)
        # Assigning a type to the variable 'self' (line 101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 101, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.__init__', ['edgecolors', 'facecolors', 'linewidths', 'linestyles', 'antialiaseds', 'offsets', 'transOffset', 'norm', 'cmap', 'pickradius', 'hatch', 'urls', 'offset_position', 'zorder'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['edgecolors', 'facecolors', 'linewidths', 'linestyles', 'antialiaseds', 'offsets', 'transOffset', 'norm', 'cmap', 'pickradius', 'hatch', 'urls', 'offset_position', 'zorder'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_26301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 121, (-1)), 'unicode', u'\n        Create a Collection\n\n        %(Collection)s\n        ')
        
        # Call to __init__(...): (line 122)
        # Processing the call arguments (line 122)
        # Getting the type of 'self' (line 122)
        self_26305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 31), 'self', False)
        # Processing the call keyword arguments (line 122)
        kwargs_26306 = {}
        # Getting the type of 'artist' (line 122)
        artist_26302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 8), 'artist', False)
        # Obtaining the member 'Artist' of a type (line 122)
        Artist_26303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 122, 8), artist_26302, 'Artist')
        # Obtaining the member '__init__' of a type (line 122)
        init___26304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 122, 8), Artist_26303, '__init__')
        # Calling __init__(args, kwargs) (line 122)
        init___call_result_26307 = invoke(stypy.reporting.localization.Localization(__file__, 122, 8), init___26304, *[self_26305], **kwargs_26306)
        
        
        # Call to __init__(...): (line 123)
        # Processing the call arguments (line 123)
        # Getting the type of 'self' (line 123)
        self_26311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 35), 'self', False)
        # Getting the type of 'norm' (line 123)
        norm_26312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 41), 'norm', False)
        # Getting the type of 'cmap' (line 123)
        cmap_26313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 47), 'cmap', False)
        # Processing the call keyword arguments (line 123)
        kwargs_26314 = {}
        # Getting the type of 'cm' (line 123)
        cm_26308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 8), 'cm', False)
        # Obtaining the member 'ScalarMappable' of a type (line 123)
        ScalarMappable_26309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 123, 8), cm_26308, 'ScalarMappable')
        # Obtaining the member '__init__' of a type (line 123)
        init___26310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 123, 8), ScalarMappable_26309, '__init__')
        # Calling __init__(args, kwargs) (line 123)
        init___call_result_26315 = invoke(stypy.reporting.localization.Localization(__file__, 123, 8), init___26310, *[self_26311, norm_26312, cmap_26313], **kwargs_26314)
        
        
        # Assigning a List to a Attribute (line 126):
        
        # Assigning a List to a Attribute (line 126):
        
        # Obtaining an instance of the builtin type 'list' (line 126)
        list_26316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 126)
        # Adding element type (line 126)
        
        # Obtaining an instance of the builtin type 'tuple' (line 126)
        tuple_26317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 126)
        # Adding element type (line 126)
        # Getting the type of 'None' (line 126)
        None_26318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 32), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 126, 32), tuple_26317, None_26318)
        # Adding element type (line 126)
        # Getting the type of 'None' (line 126)
        None_26319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 38), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 126, 32), tuple_26317, None_26319)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 126, 30), list_26316, tuple_26317)
        
        # Getting the type of 'self' (line 126)
        self_26320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 8), 'self')
        # Setting the type of the member '_us_linestyles' of a type (line 126)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 126, 8), self_26320, '_us_linestyles', list_26316)
        
        # Assigning a List to a Attribute (line 128):
        
        # Assigning a List to a Attribute (line 128):
        
        # Obtaining an instance of the builtin type 'list' (line 128)
        list_26321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 128, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 128)
        # Adding element type (line 128)
        
        # Obtaining an instance of the builtin type 'tuple' (line 128)
        tuple_26322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 128, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 128)
        # Adding element type (line 128)
        # Getting the type of 'None' (line 128)
        None_26323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 29), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 128, 29), tuple_26322, None_26323)
        # Adding element type (line 128)
        # Getting the type of 'None' (line 128)
        None_26324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 35), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 128, 29), tuple_26322, None_26324)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 128, 27), list_26321, tuple_26322)
        
        # Getting the type of 'self' (line 128)
        self_26325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 8), 'self')
        # Setting the type of the member '_linestyles' of a type (line 128)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 128, 8), self_26325, '_linestyles', list_26321)
        
        # Assigning a List to a Attribute (line 130):
        
        # Assigning a List to a Attribute (line 130):
        
        # Obtaining an instance of the builtin type 'list' (line 130)
        list_26326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 130, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 130)
        # Adding element type (line 130)
        int_26327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 130, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 130, 22), list_26326, int_26327)
        
        # Getting the type of 'self' (line 130)
        self_26328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 8), 'self')
        # Setting the type of the member '_us_lw' of a type (line 130)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 130, 8), self_26328, '_us_lw', list_26326)
        
        # Assigning a List to a Attribute (line 131):
        
        # Assigning a List to a Attribute (line 131):
        
        # Obtaining an instance of the builtin type 'list' (line 131)
        list_26329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 131, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 131)
        # Adding element type (line 131)
        int_26330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 131, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 131, 27), list_26329, int_26330)
        
        # Getting the type of 'self' (line 131)
        self_26331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 8), 'self')
        # Setting the type of the member '_linewidths' of a type (line 131)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 131, 8), self_26331, '_linewidths', list_26329)
        
        # Assigning a Name to a Attribute (line 132):
        
        # Assigning a Name to a Attribute (line 132):
        # Getting the type of 'True' (line 132)
        True_26332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 26), 'True')
        # Getting the type of 'self' (line 132)
        self_26333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 8), 'self')
        # Setting the type of the member '_is_filled' of a type (line 132)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 8), self_26333, '_is_filled', True_26332)
        
        # Assigning a Call to a Attribute (line 134):
        
        # Assigning a Call to a Attribute (line 134):
        
        # Call to to_rgba(...): (line 134)
        # Processing the call arguments (line 134)
        
        # Obtaining the type of the subscript
        unicode_26336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 134, 57), 'unicode', u'hatch.color')
        # Getting the type of 'mpl' (line 134)
        mpl_26337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 44), 'mpl', False)
        # Obtaining the member 'rcParams' of a type (line 134)
        rcParams_26338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 134, 44), mpl_26337, 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 134)
        getitem___26339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 134, 44), rcParams_26338, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 134)
        subscript_call_result_26340 = invoke(stypy.reporting.localization.Localization(__file__, 134, 44), getitem___26339, unicode_26336)
        
        # Processing the call keyword arguments (line 134)
        kwargs_26341 = {}
        # Getting the type of 'mcolors' (line 134)
        mcolors_26334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 28), 'mcolors', False)
        # Obtaining the member 'to_rgba' of a type (line 134)
        to_rgba_26335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 134, 28), mcolors_26334, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 134)
        to_rgba_call_result_26342 = invoke(stypy.reporting.localization.Localization(__file__, 134, 28), to_rgba_26335, *[subscript_call_result_26340], **kwargs_26341)
        
        # Getting the type of 'self' (line 134)
        self_26343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 8), 'self')
        # Setting the type of the member '_hatch_color' of a type (line 134)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 134, 8), self_26343, '_hatch_color', to_rgba_call_result_26342)
        
        # Call to set_facecolor(...): (line 135)
        # Processing the call arguments (line 135)
        # Getting the type of 'facecolors' (line 135)
        facecolors_26346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 27), 'facecolors', False)
        # Processing the call keyword arguments (line 135)
        kwargs_26347 = {}
        # Getting the type of 'self' (line 135)
        self_26344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 8), 'self', False)
        # Obtaining the member 'set_facecolor' of a type (line 135)
        set_facecolor_26345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 135, 8), self_26344, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 135)
        set_facecolor_call_result_26348 = invoke(stypy.reporting.localization.Localization(__file__, 135, 8), set_facecolor_26345, *[facecolors_26346], **kwargs_26347)
        
        
        # Call to set_edgecolor(...): (line 136)
        # Processing the call arguments (line 136)
        # Getting the type of 'edgecolors' (line 136)
        edgecolors_26351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 27), 'edgecolors', False)
        # Processing the call keyword arguments (line 136)
        kwargs_26352 = {}
        # Getting the type of 'self' (line 136)
        self_26349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 8), 'self', False)
        # Obtaining the member 'set_edgecolor' of a type (line 136)
        set_edgecolor_26350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 136, 8), self_26349, 'set_edgecolor')
        # Calling set_edgecolor(args, kwargs) (line 136)
        set_edgecolor_call_result_26353 = invoke(stypy.reporting.localization.Localization(__file__, 136, 8), set_edgecolor_26350, *[edgecolors_26351], **kwargs_26352)
        
        
        # Call to set_linewidth(...): (line 137)
        # Processing the call arguments (line 137)
        # Getting the type of 'linewidths' (line 137)
        linewidths_26356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 27), 'linewidths', False)
        # Processing the call keyword arguments (line 137)
        kwargs_26357 = {}
        # Getting the type of 'self' (line 137)
        self_26354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 8), 'self', False)
        # Obtaining the member 'set_linewidth' of a type (line 137)
        set_linewidth_26355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 137, 8), self_26354, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 137)
        set_linewidth_call_result_26358 = invoke(stypy.reporting.localization.Localization(__file__, 137, 8), set_linewidth_26355, *[linewidths_26356], **kwargs_26357)
        
        
        # Call to set_linestyle(...): (line 138)
        # Processing the call arguments (line 138)
        # Getting the type of 'linestyles' (line 138)
        linestyles_26361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 27), 'linestyles', False)
        # Processing the call keyword arguments (line 138)
        kwargs_26362 = {}
        # Getting the type of 'self' (line 138)
        self_26359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 8), 'self', False)
        # Obtaining the member 'set_linestyle' of a type (line 138)
        set_linestyle_26360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 138, 8), self_26359, 'set_linestyle')
        # Calling set_linestyle(args, kwargs) (line 138)
        set_linestyle_call_result_26363 = invoke(stypy.reporting.localization.Localization(__file__, 138, 8), set_linestyle_26360, *[linestyles_26361], **kwargs_26362)
        
        
        # Call to set_antialiased(...): (line 139)
        # Processing the call arguments (line 139)
        # Getting the type of 'antialiaseds' (line 139)
        antialiaseds_26366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 29), 'antialiaseds', False)
        # Processing the call keyword arguments (line 139)
        kwargs_26367 = {}
        # Getting the type of 'self' (line 139)
        self_26364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 8), 'self', False)
        # Obtaining the member 'set_antialiased' of a type (line 139)
        set_antialiased_26365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 139, 8), self_26364, 'set_antialiased')
        # Calling set_antialiased(args, kwargs) (line 139)
        set_antialiased_call_result_26368 = invoke(stypy.reporting.localization.Localization(__file__, 139, 8), set_antialiased_26365, *[antialiaseds_26366], **kwargs_26367)
        
        
        # Call to set_pickradius(...): (line 140)
        # Processing the call arguments (line 140)
        # Getting the type of 'pickradius' (line 140)
        pickradius_26371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 28), 'pickradius', False)
        # Processing the call keyword arguments (line 140)
        kwargs_26372 = {}
        # Getting the type of 'self' (line 140)
        self_26369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 8), 'self', False)
        # Obtaining the member 'set_pickradius' of a type (line 140)
        set_pickradius_26370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 140, 8), self_26369, 'set_pickradius')
        # Calling set_pickradius(args, kwargs) (line 140)
        set_pickradius_call_result_26373 = invoke(stypy.reporting.localization.Localization(__file__, 140, 8), set_pickradius_26370, *[pickradius_26371], **kwargs_26372)
        
        
        # Call to set_urls(...): (line 141)
        # Processing the call arguments (line 141)
        # Getting the type of 'urls' (line 141)
        urls_26376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 22), 'urls', False)
        # Processing the call keyword arguments (line 141)
        kwargs_26377 = {}
        # Getting the type of 'self' (line 141)
        self_26374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 8), 'self', False)
        # Obtaining the member 'set_urls' of a type (line 141)
        set_urls_26375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 141, 8), self_26374, 'set_urls')
        # Calling set_urls(args, kwargs) (line 141)
        set_urls_call_result_26378 = invoke(stypy.reporting.localization.Localization(__file__, 141, 8), set_urls_26375, *[urls_26376], **kwargs_26377)
        
        
        # Call to set_hatch(...): (line 142)
        # Processing the call arguments (line 142)
        # Getting the type of 'hatch' (line 142)
        hatch_26381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 23), 'hatch', False)
        # Processing the call keyword arguments (line 142)
        kwargs_26382 = {}
        # Getting the type of 'self' (line 142)
        self_26379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 8), 'self', False)
        # Obtaining the member 'set_hatch' of a type (line 142)
        set_hatch_26380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 142, 8), self_26379, 'set_hatch')
        # Calling set_hatch(args, kwargs) (line 142)
        set_hatch_call_result_26383 = invoke(stypy.reporting.localization.Localization(__file__, 142, 8), set_hatch_26380, *[hatch_26381], **kwargs_26382)
        
        
        # Call to set_offset_position(...): (line 143)
        # Processing the call arguments (line 143)
        # Getting the type of 'offset_position' (line 143)
        offset_position_26386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 33), 'offset_position', False)
        # Processing the call keyword arguments (line 143)
        kwargs_26387 = {}
        # Getting the type of 'self' (line 143)
        self_26384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 8), 'self', False)
        # Obtaining the member 'set_offset_position' of a type (line 143)
        set_offset_position_26385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 143, 8), self_26384, 'set_offset_position')
        # Calling set_offset_position(args, kwargs) (line 143)
        set_offset_position_call_result_26388 = invoke(stypy.reporting.localization.Localization(__file__, 143, 8), set_offset_position_26385, *[offset_position_26386], **kwargs_26387)
        
        
        # Call to set_zorder(...): (line 144)
        # Processing the call arguments (line 144)
        # Getting the type of 'zorder' (line 144)
        zorder_26391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 24), 'zorder', False)
        # Processing the call keyword arguments (line 144)
        kwargs_26392 = {}
        # Getting the type of 'self' (line 144)
        self_26389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 8), 'self', False)
        # Obtaining the member 'set_zorder' of a type (line 144)
        set_zorder_26390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 144, 8), self_26389, 'set_zorder')
        # Calling set_zorder(args, kwargs) (line 144)
        set_zorder_call_result_26393 = invoke(stypy.reporting.localization.Localization(__file__, 144, 8), set_zorder_26390, *[zorder_26391], **kwargs_26392)
        
        
        # Assigning a Call to a Attribute (line 146):
        
        # Assigning a Call to a Attribute (line 146):
        
        # Call to zeros(...): (line 146)
        # Processing the call arguments (line 146)
        
        # Obtaining an instance of the builtin type 'tuple' (line 146)
        tuple_26396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 146)
        # Adding element type (line 146)
        int_26397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 34), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 146, 34), tuple_26396, int_26397)
        # Adding element type (line 146)
        int_26398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 37), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 146, 34), tuple_26396, int_26398)
        
        # Processing the call keyword arguments (line 146)
        kwargs_26399 = {}
        # Getting the type of 'np' (line 146)
        np_26394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 24), 'np', False)
        # Obtaining the member 'zeros' of a type (line 146)
        zeros_26395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 24), np_26394, 'zeros')
        # Calling zeros(args, kwargs) (line 146)
        zeros_call_result_26400 = invoke(stypy.reporting.localization.Localization(__file__, 146, 24), zeros_26395, *[tuple_26396], **kwargs_26399)
        
        # Getting the type of 'self' (line 146)
        self_26401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 8), 'self')
        # Setting the type of the member '_offsets' of a type (line 146)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 8), self_26401, '_offsets', zeros_call_result_26400)
        
        # Assigning a Name to a Attribute (line 147):
        
        # Assigning a Name to a Attribute (line 147):
        # Getting the type of 'None' (line 147)
        None_26402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 32), 'None')
        # Getting the type of 'self' (line 147)
        self_26403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 8), 'self')
        # Setting the type of the member '_uniform_offsets' of a type (line 147)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 147, 8), self_26403, '_uniform_offsets', None_26402)
        
        # Type idiom detected: calculating its left and rigth part (line 148)
        # Getting the type of 'offsets' (line 148)
        offsets_26404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 8), 'offsets')
        # Getting the type of 'None' (line 148)
        None_26405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 26), 'None')
        
        (may_be_26406, more_types_in_union_26407) = may_not_be_none(offsets_26404, None_26405)

        if may_be_26406:

            if more_types_in_union_26407:
                # Runtime conditional SSA (line 148)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 149):
            
            # Assigning a Call to a Name (line 149):
            
            # Call to asanyarray(...): (line 149)
            # Processing the call arguments (line 149)
            # Getting the type of 'offsets' (line 149)
            offsets_26410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 36), 'offsets', False)
            # Getting the type of 'float' (line 149)
            float_26411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 45), 'float', False)
            # Processing the call keyword arguments (line 149)
            kwargs_26412 = {}
            # Getting the type of 'np' (line 149)
            np_26408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 22), 'np', False)
            # Obtaining the member 'asanyarray' of a type (line 149)
            asanyarray_26409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 149, 22), np_26408, 'asanyarray')
            # Calling asanyarray(args, kwargs) (line 149)
            asanyarray_call_result_26413 = invoke(stypy.reporting.localization.Localization(__file__, 149, 22), asanyarray_26409, *[offsets_26410, float_26411], **kwargs_26412)
            
            # Assigning a type to the variable 'offsets' (line 149)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 149, 12), 'offsets', asanyarray_call_result_26413)
            
            
            # Getting the type of 'offsets' (line 151)
            offsets_26414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 15), 'offsets')
            # Obtaining the member 'shape' of a type (line 151)
            shape_26415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 15), offsets_26414, 'shape')
            
            # Obtaining an instance of the builtin type 'tuple' (line 151)
            tuple_26416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 33), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 151)
            # Adding element type (line 151)
            int_26417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 33), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 151, 33), tuple_26416, int_26417)
            
            # Applying the binary operator '==' (line 151)
            result_eq_26418 = python_operator(stypy.reporting.localization.Localization(__file__, 151, 15), '==', shape_26415, tuple_26416)
            
            # Testing the type of an if condition (line 151)
            if_condition_26419 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 151, 12), result_eq_26418)
            # Assigning a type to the variable 'if_condition_26419' (line 151)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 151, 12), 'if_condition_26419', if_condition_26419)
            # SSA begins for if statement (line 151)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 152):
            
            # Assigning a Subscript to a Name (line 152):
            
            # Obtaining the type of the subscript
            # Getting the type of 'None' (line 152)
            None_26420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 34), 'None')
            slice_26421 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 152, 26), None, None, None)
            # Getting the type of 'offsets' (line 152)
            offsets_26422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 26), 'offsets')
            # Obtaining the member '__getitem__' of a type (line 152)
            getitem___26423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 26), offsets_26422, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 152)
            subscript_call_result_26424 = invoke(stypy.reporting.localization.Localization(__file__, 152, 26), getitem___26423, (None_26420, slice_26421))
            
            # Assigning a type to the variable 'offsets' (line 152)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 16), 'offsets', subscript_call_result_26424)
            # SSA join for if statement (line 151)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Type idiom detected: calculating its left and rigth part (line 153)
            # Getting the type of 'transOffset' (line 153)
            transOffset_26425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 12), 'transOffset')
            # Getting the type of 'None' (line 153)
            None_26426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 34), 'None')
            
            (may_be_26427, more_types_in_union_26428) = may_not_be_none(transOffset_26425, None_26426)

            if may_be_26427:

                if more_types_in_union_26428:
                    # Runtime conditional SSA (line 153)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a Name to a Attribute (line 154):
                
                # Assigning a Name to a Attribute (line 154):
                # Getting the type of 'offsets' (line 154)
                offsets_26429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 32), 'offsets')
                # Getting the type of 'self' (line 154)
                self_26430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 16), 'self')
                # Setting the type of the member '_offsets' of a type (line 154)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 16), self_26430, '_offsets', offsets_26429)
                
                # Assigning a Name to a Attribute (line 155):
                
                # Assigning a Name to a Attribute (line 155):
                # Getting the type of 'transOffset' (line 155)
                transOffset_26431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 36), 'transOffset')
                # Getting the type of 'self' (line 155)
                self_26432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 16), 'self')
                # Setting the type of the member '_transOffset' of a type (line 155)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 16), self_26432, '_transOffset', transOffset_26431)

                if more_types_in_union_26428:
                    # Runtime conditional SSA for else branch (line 153)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_26427) or more_types_in_union_26428):
                
                # Assigning a Name to a Attribute (line 157):
                
                # Assigning a Name to a Attribute (line 157):
                # Getting the type of 'offsets' (line 157)
                offsets_26433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 40), 'offsets')
                # Getting the type of 'self' (line 157)
                self_26434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 16), 'self')
                # Setting the type of the member '_uniform_offsets' of a type (line 157)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 16), self_26434, '_uniform_offsets', offsets_26433)

                if (may_be_26427 and more_types_in_union_26428):
                    # SSA join for if statement (line 153)
                    module_type_store = module_type_store.join_ssa_context()


            

            if more_types_in_union_26407:
                # SSA join for if statement (line 148)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 159):
        
        # Assigning a Name to a Attribute (line 159):
        # Getting the type of 'None' (line 159)
        None_26435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 29), 'None')
        # Getting the type of 'self' (line 159)
        self_26436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 8), 'self')
        # Setting the type of the member '_path_effects' of a type (line 159)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 8), self_26436, '_path_effects', None_26435)
        
        # Call to update(...): (line 160)
        # Processing the call arguments (line 160)
        # Getting the type of 'kwargs' (line 160)
        kwargs_26439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 20), 'kwargs', False)
        # Processing the call keyword arguments (line 160)
        kwargs_26440 = {}
        # Getting the type of 'self' (line 160)
        self_26437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 8), 'self', False)
        # Obtaining the member 'update' of a type (line 160)
        update_26438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 160, 8), self_26437, 'update')
        # Calling update(args, kwargs) (line 160)
        update_call_result_26441 = invoke(stypy.reporting.localization.Localization(__file__, 160, 8), update_26438, *[kwargs_26439], **kwargs_26440)
        
        
        # Assigning a Name to a Attribute (line 161):
        
        # Assigning a Name to a Attribute (line 161):
        # Getting the type of 'None' (line 161)
        None_26442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 22), 'None')
        # Getting the type of 'self' (line 161)
        self_26443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'self')
        # Setting the type of the member '_paths' of a type (line 161)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 8), self_26443, '_paths', None_26442)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_paths'
        module_type_store = module_type_store.open_function_context('get_paths', 163, 4, False)
        # Assigning a type to the variable 'self' (line 164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.get_paths.__dict__.__setitem__('stypy_localization', localization)
        Collection.get_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.get_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.get_paths.__dict__.__setitem__('stypy_function_name', 'Collection.get_paths')
        Collection.get_paths.__dict__.__setitem__('stypy_param_names_list', [])
        Collection.get_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.get_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.get_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.get_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.get_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.get_paths.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.get_paths', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_paths', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_paths(...)' code ##################

        # Getting the type of 'self' (line 164)
        self_26444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 15), 'self')
        # Obtaining the member '_paths' of a type (line 164)
        _paths_26445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 15), self_26444, '_paths')
        # Assigning a type to the variable 'stypy_return_type' (line 164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 8), 'stypy_return_type', _paths_26445)
        
        # ################# End of 'get_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 163)
        stypy_return_type_26446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_26446)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_paths'
        return stypy_return_type_26446


    @norecursion
    def set_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_paths'
        module_type_store = module_type_store.open_function_context('set_paths', 166, 4, False)
        # Assigning a type to the variable 'self' (line 167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_paths.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_paths.__dict__.__setitem__('stypy_function_name', 'Collection.set_paths')
        Collection.set_paths.__dict__.__setitem__('stypy_param_names_list', [])
        Collection.set_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_paths.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_paths', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_paths', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_paths(...)' code ##################

        # Getting the type of 'NotImplementedError' (line 167)
        NotImplementedError_26447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 14), 'NotImplementedError')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 167, 8), NotImplementedError_26447, 'raise parameter', BaseException)
        
        # ################# End of 'set_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 166)
        stypy_return_type_26448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_26448)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_paths'
        return stypy_return_type_26448


    @norecursion
    def get_transforms(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_transforms'
        module_type_store = module_type_store.open_function_context('get_transforms', 169, 4, False)
        # Assigning a type to the variable 'self' (line 170)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 170, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.get_transforms.__dict__.__setitem__('stypy_localization', localization)
        Collection.get_transforms.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.get_transforms.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.get_transforms.__dict__.__setitem__('stypy_function_name', 'Collection.get_transforms')
        Collection.get_transforms.__dict__.__setitem__('stypy_param_names_list', [])
        Collection.get_transforms.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.get_transforms.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.get_transforms.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.get_transforms.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.get_transforms.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.get_transforms.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.get_transforms', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_transforms', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_transforms(...)' code ##################

        # Getting the type of 'self' (line 170)
        self_26449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 15), 'self')
        # Obtaining the member '_transforms' of a type (line 170)
        _transforms_26450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 170, 15), self_26449, '_transforms')
        # Assigning a type to the variable 'stypy_return_type' (line 170)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 170, 8), 'stypy_return_type', _transforms_26450)
        
        # ################# End of 'get_transforms(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_transforms' in the type store
        # Getting the type of 'stypy_return_type' (line 169)
        stypy_return_type_26451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_26451)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_transforms'
        return stypy_return_type_26451


    @norecursion
    def get_offset_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_offset_transform'
        module_type_store = module_type_store.open_function_context('get_offset_transform', 172, 4, False)
        # Assigning a type to the variable 'self' (line 173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.get_offset_transform.__dict__.__setitem__('stypy_localization', localization)
        Collection.get_offset_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.get_offset_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.get_offset_transform.__dict__.__setitem__('stypy_function_name', 'Collection.get_offset_transform')
        Collection.get_offset_transform.__dict__.__setitem__('stypy_param_names_list', [])
        Collection.get_offset_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.get_offset_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.get_offset_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.get_offset_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.get_offset_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.get_offset_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.get_offset_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_offset_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_offset_transform(...)' code ##################

        
        # Assigning a Attribute to a Name (line 173):
        
        # Assigning a Attribute to a Name (line 173):
        # Getting the type of 'self' (line 173)
        self_26452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 12), 'self')
        # Obtaining the member '_transOffset' of a type (line 173)
        _transOffset_26453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 12), self_26452, '_transOffset')
        # Assigning a type to the variable 't' (line 173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 8), 't', _transOffset_26453)
        
        
        # Evaluating a boolean operation
        
        
        # Call to isinstance(...): (line 174)
        # Processing the call arguments (line 174)
        # Getting the type of 't' (line 174)
        t_26455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 27), 't', False)
        # Getting the type of 'transforms' (line 174)
        transforms_26456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 30), 'transforms', False)
        # Obtaining the member 'Transform' of a type (line 174)
        Transform_26457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 174, 30), transforms_26456, 'Transform')
        # Processing the call keyword arguments (line 174)
        kwargs_26458 = {}
        # Getting the type of 'isinstance' (line 174)
        isinstance_26454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 16), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 174)
        isinstance_call_result_26459 = invoke(stypy.reporting.localization.Localization(__file__, 174, 16), isinstance_26454, *[t_26455, Transform_26457], **kwargs_26458)
        
        # Applying the 'not' unary operator (line 174)
        result_not__26460 = python_operator(stypy.reporting.localization.Localization(__file__, 174, 12), 'not', isinstance_call_result_26459)
        
        
        # Call to hasattr(...): (line 175)
        # Processing the call arguments (line 175)
        # Getting the type of 't' (line 175)
        t_26462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 28), 't', False)
        unicode_26463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 175, 31), 'unicode', u'_as_mpl_transform')
        # Processing the call keyword arguments (line 175)
        kwargs_26464 = {}
        # Getting the type of 'hasattr' (line 175)
        hasattr_26461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 20), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 175)
        hasattr_call_result_26465 = invoke(stypy.reporting.localization.Localization(__file__, 175, 20), hasattr_26461, *[t_26462, unicode_26463], **kwargs_26464)
        
        # Applying the binary operator 'and' (line 174)
        result_and_keyword_26466 = python_operator(stypy.reporting.localization.Localization(__file__, 174, 12), 'and', result_not__26460, hasattr_call_result_26465)
        
        # Testing the type of an if condition (line 174)
        if_condition_26467 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 174, 8), result_and_keyword_26466)
        # Assigning a type to the variable 'if_condition_26467' (line 174)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 174, 8), 'if_condition_26467', if_condition_26467)
        # SSA begins for if statement (line 174)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 176):
        
        # Assigning a Call to a Name (line 176):
        
        # Call to _as_mpl_transform(...): (line 176)
        # Processing the call arguments (line 176)
        # Getting the type of 'self' (line 176)
        self_26470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 36), 'self', False)
        # Obtaining the member 'axes' of a type (line 176)
        axes_26471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 36), self_26470, 'axes')
        # Processing the call keyword arguments (line 176)
        kwargs_26472 = {}
        # Getting the type of 't' (line 176)
        t_26468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 16), 't', False)
        # Obtaining the member '_as_mpl_transform' of a type (line 176)
        _as_mpl_transform_26469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 16), t_26468, '_as_mpl_transform')
        # Calling _as_mpl_transform(args, kwargs) (line 176)
        _as_mpl_transform_call_result_26473 = invoke(stypy.reporting.localization.Localization(__file__, 176, 16), _as_mpl_transform_26469, *[axes_26471], **kwargs_26472)
        
        # Assigning a type to the variable 't' (line 176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 12), 't', _as_mpl_transform_call_result_26473)
        # SSA join for if statement (line 174)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 't' (line 177)
        t_26474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 15), 't')
        # Assigning a type to the variable 'stypy_return_type' (line 177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 8), 'stypy_return_type', t_26474)
        
        # ################# End of 'get_offset_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_offset_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 172)
        stypy_return_type_26475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_26475)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_offset_transform'
        return stypy_return_type_26475


    @norecursion
    def get_datalim(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_datalim'
        module_type_store = module_type_store.open_function_context('get_datalim', 179, 4, False)
        # Assigning a type to the variable 'self' (line 180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 180, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.get_datalim.__dict__.__setitem__('stypy_localization', localization)
        Collection.get_datalim.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.get_datalim.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.get_datalim.__dict__.__setitem__('stypy_function_name', 'Collection.get_datalim')
        Collection.get_datalim.__dict__.__setitem__('stypy_param_names_list', ['transData'])
        Collection.get_datalim.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.get_datalim.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.get_datalim.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.get_datalim.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.get_datalim.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.get_datalim.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.get_datalim', ['transData'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_datalim', localization, ['transData'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_datalim(...)' code ##################

        
        # Assigning a Call to a Name (line 180):
        
        # Assigning a Call to a Name (line 180):
        
        # Call to get_transform(...): (line 180)
        # Processing the call keyword arguments (line 180)
        kwargs_26478 = {}
        # Getting the type of 'self' (line 180)
        self_26476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 20), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 180)
        get_transform_26477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 180, 20), self_26476, 'get_transform')
        # Calling get_transform(args, kwargs) (line 180)
        get_transform_call_result_26479 = invoke(stypy.reporting.localization.Localization(__file__, 180, 20), get_transform_26477, *[], **kwargs_26478)
        
        # Assigning a type to the variable 'transform' (line 180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 180, 8), 'transform', get_transform_call_result_26479)
        
        # Assigning a Call to a Name (line 181):
        
        # Assigning a Call to a Name (line 181):
        
        # Call to get_offset_transform(...): (line 181)
        # Processing the call keyword arguments (line 181)
        kwargs_26482 = {}
        # Getting the type of 'self' (line 181)
        self_26480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 22), 'self', False)
        # Obtaining the member 'get_offset_transform' of a type (line 181)
        get_offset_transform_26481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 22), self_26480, 'get_offset_transform')
        # Calling get_offset_transform(args, kwargs) (line 181)
        get_offset_transform_call_result_26483 = invoke(stypy.reporting.localization.Localization(__file__, 181, 22), get_offset_transform_26481, *[], **kwargs_26482)
        
        # Assigning a type to the variable 'transOffset' (line 181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 181, 8), 'transOffset', get_offset_transform_call_result_26483)
        
        # Assigning a Attribute to a Name (line 182):
        
        # Assigning a Attribute to a Name (line 182):
        # Getting the type of 'self' (line 182)
        self_26484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 18), 'self')
        # Obtaining the member '_offsets' of a type (line 182)
        _offsets_26485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 182, 18), self_26484, '_offsets')
        # Assigning a type to the variable 'offsets' (line 182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 182, 8), 'offsets', _offsets_26485)
        
        # Assigning a Call to a Name (line 183):
        
        # Assigning a Call to a Name (line 183):
        
        # Call to get_paths(...): (line 183)
        # Processing the call keyword arguments (line 183)
        kwargs_26488 = {}
        # Getting the type of 'self' (line 183)
        self_26486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 16), 'self', False)
        # Obtaining the member 'get_paths' of a type (line 183)
        get_paths_26487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 16), self_26486, 'get_paths')
        # Calling get_paths(args, kwargs) (line 183)
        get_paths_call_result_26489 = invoke(stypy.reporting.localization.Localization(__file__, 183, 16), get_paths_26487, *[], **kwargs_26488)
        
        # Assigning a type to the variable 'paths' (line 183)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 183, 8), 'paths', get_paths_call_result_26489)
        
        
        # Getting the type of 'transform' (line 185)
        transform_26490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 15), 'transform')
        # Obtaining the member 'is_affine' of a type (line 185)
        is_affine_26491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 15), transform_26490, 'is_affine')
        # Applying the 'not' unary operator (line 185)
        result_not__26492 = python_operator(stypy.reporting.localization.Localization(__file__, 185, 11), 'not', is_affine_26491)
        
        # Testing the type of an if condition (line 185)
        if_condition_26493 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 185, 8), result_not__26492)
        # Assigning a type to the variable 'if_condition_26493' (line 185)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 185, 8), 'if_condition_26493', if_condition_26493)
        # SSA begins for if statement (line 185)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a ListComp to a Name (line 186):
        
        # Assigning a ListComp to a Name (line 186):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'paths' (line 186)
        paths_26499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 69), 'paths')
        comprehension_26500 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 186, 21), paths_26499)
        # Assigning a type to the variable 'p' (line 186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 21), 'p', comprehension_26500)
        
        # Call to transform_path_non_affine(...): (line 186)
        # Processing the call arguments (line 186)
        # Getting the type of 'p' (line 186)
        p_26496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 57), 'p', False)
        # Processing the call keyword arguments (line 186)
        kwargs_26497 = {}
        # Getting the type of 'transform' (line 186)
        transform_26494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 21), 'transform', False)
        # Obtaining the member 'transform_path_non_affine' of a type (line 186)
        transform_path_non_affine_26495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 186, 21), transform_26494, 'transform_path_non_affine')
        # Calling transform_path_non_affine(args, kwargs) (line 186)
        transform_path_non_affine_call_result_26498 = invoke(stypy.reporting.localization.Localization(__file__, 186, 21), transform_path_non_affine_26495, *[p_26496], **kwargs_26497)
        
        list_26501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 186, 21), list_26501, transform_path_non_affine_call_result_26498)
        # Assigning a type to the variable 'paths' (line 186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 12), 'paths', list_26501)
        
        # Assigning a Call to a Name (line 187):
        
        # Assigning a Call to a Name (line 187):
        
        # Call to get_affine(...): (line 187)
        # Processing the call keyword arguments (line 187)
        kwargs_26504 = {}
        # Getting the type of 'transform' (line 187)
        transform_26502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 24), 'transform', False)
        # Obtaining the member 'get_affine' of a type (line 187)
        get_affine_26503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 187, 24), transform_26502, 'get_affine')
        # Calling get_affine(args, kwargs) (line 187)
        get_affine_call_result_26505 = invoke(stypy.reporting.localization.Localization(__file__, 187, 24), get_affine_26503, *[], **kwargs_26504)
        
        # Assigning a type to the variable 'transform' (line 187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 187, 12), 'transform', get_affine_call_result_26505)
        # SSA join for if statement (line 185)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'transOffset' (line 188)
        transOffset_26506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 15), 'transOffset')
        # Obtaining the member 'is_affine' of a type (line 188)
        is_affine_26507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 15), transOffset_26506, 'is_affine')
        # Applying the 'not' unary operator (line 188)
        result_not__26508 = python_operator(stypy.reporting.localization.Localization(__file__, 188, 11), 'not', is_affine_26507)
        
        # Testing the type of an if condition (line 188)
        if_condition_26509 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 188, 8), result_not__26508)
        # Assigning a type to the variable 'if_condition_26509' (line 188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 188, 8), 'if_condition_26509', if_condition_26509)
        # SSA begins for if statement (line 188)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 189):
        
        # Assigning a Call to a Name (line 189):
        
        # Call to transform_non_affine(...): (line 189)
        # Processing the call arguments (line 189)
        # Getting the type of 'offsets' (line 189)
        offsets_26512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 55), 'offsets', False)
        # Processing the call keyword arguments (line 189)
        kwargs_26513 = {}
        # Getting the type of 'transOffset' (line 189)
        transOffset_26510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 22), 'transOffset', False)
        # Obtaining the member 'transform_non_affine' of a type (line 189)
        transform_non_affine_26511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 189, 22), transOffset_26510, 'transform_non_affine')
        # Calling transform_non_affine(args, kwargs) (line 189)
        transform_non_affine_call_result_26514 = invoke(stypy.reporting.localization.Localization(__file__, 189, 22), transform_non_affine_26511, *[offsets_26512], **kwargs_26513)
        
        # Assigning a type to the variable 'offsets' (line 189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 189, 12), 'offsets', transform_non_affine_call_result_26514)
        
        # Assigning a Call to a Name (line 190):
        
        # Assigning a Call to a Name (line 190):
        
        # Call to get_affine(...): (line 190)
        # Processing the call keyword arguments (line 190)
        kwargs_26517 = {}
        # Getting the type of 'transOffset' (line 190)
        transOffset_26515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 26), 'transOffset', False)
        # Obtaining the member 'get_affine' of a type (line 190)
        get_affine_26516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 190, 26), transOffset_26515, 'get_affine')
        # Calling get_affine(args, kwargs) (line 190)
        get_affine_call_result_26518 = invoke(stypy.reporting.localization.Localization(__file__, 190, 26), get_affine_26516, *[], **kwargs_26517)
        
        # Assigning a type to the variable 'transOffset' (line 190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 12), 'transOffset', get_affine_call_result_26518)
        # SSA join for if statement (line 188)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to isinstance(...): (line 192)
        # Processing the call arguments (line 192)
        # Getting the type of 'offsets' (line 192)
        offsets_26520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 22), 'offsets', False)
        # Getting the type of 'np' (line 192)
        np_26521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 31), 'np', False)
        # Obtaining the member 'ma' of a type (line 192)
        ma_26522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 31), np_26521, 'ma')
        # Obtaining the member 'MaskedArray' of a type (line 192)
        MaskedArray_26523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 31), ma_26522, 'MaskedArray')
        # Processing the call keyword arguments (line 192)
        kwargs_26524 = {}
        # Getting the type of 'isinstance' (line 192)
        isinstance_26519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 192)
        isinstance_call_result_26525 = invoke(stypy.reporting.localization.Localization(__file__, 192, 11), isinstance_26519, *[offsets_26520, MaskedArray_26523], **kwargs_26524)
        
        # Testing the type of an if condition (line 192)
        if_condition_26526 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 192, 8), isinstance_call_result_26525)
        # Assigning a type to the variable 'if_condition_26526' (line 192)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 192, 8), 'if_condition_26526', if_condition_26526)
        # SSA begins for if statement (line 192)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 193):
        
        # Assigning a Call to a Name (line 193):
        
        # Call to filled(...): (line 193)
        # Processing the call arguments (line 193)
        # Getting the type of 'np' (line 193)
        np_26529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 37), 'np', False)
        # Obtaining the member 'nan' of a type (line 193)
        nan_26530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 37), np_26529, 'nan')
        # Processing the call keyword arguments (line 193)
        kwargs_26531 = {}
        # Getting the type of 'offsets' (line 193)
        offsets_26527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 22), 'offsets', False)
        # Obtaining the member 'filled' of a type (line 193)
        filled_26528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 22), offsets_26527, 'filled')
        # Calling filled(args, kwargs) (line 193)
        filled_call_result_26532 = invoke(stypy.reporting.localization.Localization(__file__, 193, 22), filled_26528, *[nan_26530], **kwargs_26531)
        
        # Assigning a type to the variable 'offsets' (line 193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 12), 'offsets', filled_call_result_26532)
        # SSA join for if statement (line 192)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Call to len(...): (line 196)
        # Processing the call arguments (line 196)
        # Getting the type of 'paths' (line 196)
        paths_26534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 15), 'paths', False)
        # Processing the call keyword arguments (line 196)
        kwargs_26535 = {}
        # Getting the type of 'len' (line 196)
        len_26533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 11), 'len', False)
        # Calling len(args, kwargs) (line 196)
        len_call_result_26536 = invoke(stypy.reporting.localization.Localization(__file__, 196, 11), len_26533, *[paths_26534], **kwargs_26535)
        
        
        # Call to len(...): (line 196)
        # Processing the call arguments (line 196)
        # Getting the type of 'offsets' (line 196)
        offsets_26538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 30), 'offsets', False)
        # Processing the call keyword arguments (line 196)
        kwargs_26539 = {}
        # Getting the type of 'len' (line 196)
        len_26537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 26), 'len', False)
        # Calling len(args, kwargs) (line 196)
        len_call_result_26540 = invoke(stypy.reporting.localization.Localization(__file__, 196, 26), len_26537, *[offsets_26538], **kwargs_26539)
        
        # Applying the binary operator 'and' (line 196)
        result_and_keyword_26541 = python_operator(stypy.reporting.localization.Localization(__file__, 196, 11), 'and', len_call_result_26536, len_call_result_26540)
        
        # Testing the type of an if condition (line 196)
        if_condition_26542 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 196, 8), result_and_keyword_26541)
        # Assigning a type to the variable 'if_condition_26542' (line 196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 196, 8), 'if_condition_26542', if_condition_26542)
        # SSA begins for if statement (line 196)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 197):
        
        # Assigning a Call to a Name (line 197):
        
        # Call to get_path_collection_extents(...): (line 197)
        # Processing the call arguments (line 197)
        
        # Call to frozen(...): (line 198)
        # Processing the call keyword arguments (line 198)
        kwargs_26547 = {}
        # Getting the type of 'transform' (line 198)
        transform_26545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 16), 'transform', False)
        # Obtaining the member 'frozen' of a type (line 198)
        frozen_26546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 16), transform_26545, 'frozen')
        # Calling frozen(args, kwargs) (line 198)
        frozen_call_result_26548 = invoke(stypy.reporting.localization.Localization(__file__, 198, 16), frozen_26546, *[], **kwargs_26547)
        
        # Getting the type of 'paths' (line 198)
        paths_26549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 36), 'paths', False)
        
        # Call to get_transforms(...): (line 198)
        # Processing the call keyword arguments (line 198)
        kwargs_26552 = {}
        # Getting the type of 'self' (line 198)
        self_26550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 43), 'self', False)
        # Obtaining the member 'get_transforms' of a type (line 198)
        get_transforms_26551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 43), self_26550, 'get_transforms')
        # Calling get_transforms(args, kwargs) (line 198)
        get_transforms_call_result_26553 = invoke(stypy.reporting.localization.Localization(__file__, 198, 43), get_transforms_26551, *[], **kwargs_26552)
        
        # Getting the type of 'offsets' (line 199)
        offsets_26554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 16), 'offsets', False)
        
        # Call to frozen(...): (line 199)
        # Processing the call keyword arguments (line 199)
        kwargs_26557 = {}
        # Getting the type of 'transOffset' (line 199)
        transOffset_26555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 25), 'transOffset', False)
        # Obtaining the member 'frozen' of a type (line 199)
        frozen_26556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 199, 25), transOffset_26555, 'frozen')
        # Calling frozen(args, kwargs) (line 199)
        frozen_call_result_26558 = invoke(stypy.reporting.localization.Localization(__file__, 199, 25), frozen_26556, *[], **kwargs_26557)
        
        # Processing the call keyword arguments (line 197)
        kwargs_26559 = {}
        # Getting the type of 'mpath' (line 197)
        mpath_26543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 21), 'mpath', False)
        # Obtaining the member 'get_path_collection_extents' of a type (line 197)
        get_path_collection_extents_26544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 197, 21), mpath_26543, 'get_path_collection_extents')
        # Calling get_path_collection_extents(args, kwargs) (line 197)
        get_path_collection_extents_call_result_26560 = invoke(stypy.reporting.localization.Localization(__file__, 197, 21), get_path_collection_extents_26544, *[frozen_call_result_26548, paths_26549, get_transforms_call_result_26553, offsets_26554, frozen_call_result_26558], **kwargs_26559)
        
        # Assigning a type to the variable 'result' (line 197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 197, 12), 'result', get_path_collection_extents_call_result_26560)
        
        # Assigning a Call to a Name (line 200):
        
        # Assigning a Call to a Name (line 200):
        
        # Call to inverse_transformed(...): (line 200)
        # Processing the call arguments (line 200)
        # Getting the type of 'transData' (line 200)
        transData_26563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 48), 'transData', False)
        # Processing the call keyword arguments (line 200)
        kwargs_26564 = {}
        # Getting the type of 'result' (line 200)
        result_26561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 21), 'result', False)
        # Obtaining the member 'inverse_transformed' of a type (line 200)
        inverse_transformed_26562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 21), result_26561, 'inverse_transformed')
        # Calling inverse_transformed(args, kwargs) (line 200)
        inverse_transformed_call_result_26565 = invoke(stypy.reporting.localization.Localization(__file__, 200, 21), inverse_transformed_26562, *[transData_26563], **kwargs_26564)
        
        # Assigning a type to the variable 'result' (line 200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 200, 12), 'result', inverse_transformed_call_result_26565)
        # SSA branch for the else part of an if statement (line 196)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 202):
        
        # Assigning a Call to a Name (line 202):
        
        # Call to null(...): (line 202)
        # Processing the call keyword arguments (line 202)
        kwargs_26569 = {}
        # Getting the type of 'transforms' (line 202)
        transforms_26566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 21), 'transforms', False)
        # Obtaining the member 'Bbox' of a type (line 202)
        Bbox_26567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 21), transforms_26566, 'Bbox')
        # Obtaining the member 'null' of a type (line 202)
        null_26568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 21), Bbox_26567, 'null')
        # Calling null(args, kwargs) (line 202)
        null_call_result_26570 = invoke(stypy.reporting.localization.Localization(__file__, 202, 21), null_26568, *[], **kwargs_26569)
        
        # Assigning a type to the variable 'result' (line 202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 202, 12), 'result', null_call_result_26570)
        # SSA join for if statement (line 196)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'result' (line 203)
        result_26571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 203, 8), 'stypy_return_type', result_26571)
        
        # ################# End of 'get_datalim(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_datalim' in the type store
        # Getting the type of 'stypy_return_type' (line 179)
        stypy_return_type_26572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_26572)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_datalim'
        return stypy_return_type_26572


    @norecursion
    def get_window_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_window_extent'
        module_type_store = module_type_store.open_function_context('get_window_extent', 205, 4, False)
        # Assigning a type to the variable 'self' (line 206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.get_window_extent.__dict__.__setitem__('stypy_localization', localization)
        Collection.get_window_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.get_window_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.get_window_extent.__dict__.__setitem__('stypy_function_name', 'Collection.get_window_extent')
        Collection.get_window_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Collection.get_window_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.get_window_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.get_window_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.get_window_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.get_window_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.get_window_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.get_window_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_extent(...)' code ##################

        
        # Call to get_datalim(...): (line 208)
        # Processing the call arguments (line 208)
        
        # Call to IdentityTransform(...): (line 208)
        # Processing the call keyword arguments (line 208)
        kwargs_26577 = {}
        # Getting the type of 'transforms' (line 208)
        transforms_26575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 32), 'transforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 208)
        IdentityTransform_26576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 208, 32), transforms_26575, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 208)
        IdentityTransform_call_result_26578 = invoke(stypy.reporting.localization.Localization(__file__, 208, 32), IdentityTransform_26576, *[], **kwargs_26577)
        
        # Processing the call keyword arguments (line 208)
        kwargs_26579 = {}
        # Getting the type of 'self' (line 208)
        self_26573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 15), 'self', False)
        # Obtaining the member 'get_datalim' of a type (line 208)
        get_datalim_26574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 208, 15), self_26573, 'get_datalim')
        # Calling get_datalim(args, kwargs) (line 208)
        get_datalim_call_result_26580 = invoke(stypy.reporting.localization.Localization(__file__, 208, 15), get_datalim_26574, *[IdentityTransform_call_result_26578], **kwargs_26579)
        
        # Assigning a type to the variable 'stypy_return_type' (line 208)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 208, 8), 'stypy_return_type', get_datalim_call_result_26580)
        
        # ################# End of 'get_window_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 205)
        stypy_return_type_26581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_26581)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_extent'
        return stypy_return_type_26581


    @norecursion
    def _prepare_points(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_prepare_points'
        module_type_store = module_type_store.open_function_context('_prepare_points', 210, 4, False)
        # Assigning a type to the variable 'self' (line 211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection._prepare_points.__dict__.__setitem__('stypy_localization', localization)
        Collection._prepare_points.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection._prepare_points.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection._prepare_points.__dict__.__setitem__('stypy_function_name', 'Collection._prepare_points')
        Collection._prepare_points.__dict__.__setitem__('stypy_param_names_list', [])
        Collection._prepare_points.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection._prepare_points.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection._prepare_points.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection._prepare_points.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection._prepare_points.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection._prepare_points.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection._prepare_points', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_prepare_points', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_prepare_points(...)' code ##################

        unicode_26582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 8), 'unicode', u'Point prep for drawing and hit testing')
        
        # Assigning a Call to a Name (line 213):
        
        # Assigning a Call to a Name (line 213):
        
        # Call to get_transform(...): (line 213)
        # Processing the call keyword arguments (line 213)
        kwargs_26585 = {}
        # Getting the type of 'self' (line 213)
        self_26583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 20), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 213)
        get_transform_26584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 213, 20), self_26583, 'get_transform')
        # Calling get_transform(args, kwargs) (line 213)
        get_transform_call_result_26586 = invoke(stypy.reporting.localization.Localization(__file__, 213, 20), get_transform_26584, *[], **kwargs_26585)
        
        # Assigning a type to the variable 'transform' (line 213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 8), 'transform', get_transform_call_result_26586)
        
        # Assigning a Call to a Name (line 214):
        
        # Assigning a Call to a Name (line 214):
        
        # Call to get_offset_transform(...): (line 214)
        # Processing the call keyword arguments (line 214)
        kwargs_26589 = {}
        # Getting the type of 'self' (line 214)
        self_26587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 22), 'self', False)
        # Obtaining the member 'get_offset_transform' of a type (line 214)
        get_offset_transform_26588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 22), self_26587, 'get_offset_transform')
        # Calling get_offset_transform(args, kwargs) (line 214)
        get_offset_transform_call_result_26590 = invoke(stypy.reporting.localization.Localization(__file__, 214, 22), get_offset_transform_26588, *[], **kwargs_26589)
        
        # Assigning a type to the variable 'transOffset' (line 214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 8), 'transOffset', get_offset_transform_call_result_26590)
        
        # Assigning a Attribute to a Name (line 215):
        
        # Assigning a Attribute to a Name (line 215):
        # Getting the type of 'self' (line 215)
        self_26591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 18), 'self')
        # Obtaining the member '_offsets' of a type (line 215)
        _offsets_26592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 215, 18), self_26591, '_offsets')
        # Assigning a type to the variable 'offsets' (line 215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 8), 'offsets', _offsets_26592)
        
        # Assigning a Call to a Name (line 216):
        
        # Assigning a Call to a Name (line 216):
        
        # Call to get_paths(...): (line 216)
        # Processing the call keyword arguments (line 216)
        kwargs_26595 = {}
        # Getting the type of 'self' (line 216)
        self_26593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 16), 'self', False)
        # Obtaining the member 'get_paths' of a type (line 216)
        get_paths_26594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 16), self_26593, 'get_paths')
        # Calling get_paths(args, kwargs) (line 216)
        get_paths_call_result_26596 = invoke(stypy.reporting.localization.Localization(__file__, 216, 16), get_paths_26594, *[], **kwargs_26595)
        
        # Assigning a type to the variable 'paths' (line 216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 8), 'paths', get_paths_call_result_26596)
        
        
        # Call to have_units(...): (line 218)
        # Processing the call keyword arguments (line 218)
        kwargs_26599 = {}
        # Getting the type of 'self' (line 218)
        self_26597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 11), 'self', False)
        # Obtaining the member 'have_units' of a type (line 218)
        have_units_26598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 218, 11), self_26597, 'have_units')
        # Calling have_units(args, kwargs) (line 218)
        have_units_call_result_26600 = invoke(stypy.reporting.localization.Localization(__file__, 218, 11), have_units_26598, *[], **kwargs_26599)
        
        # Testing the type of an if condition (line 218)
        if_condition_26601 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 218, 8), have_units_call_result_26600)
        # Assigning a type to the variable 'if_condition_26601' (line 218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 8), 'if_condition_26601', if_condition_26601)
        # SSA begins for if statement (line 218)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 219):
        
        # Assigning a List to a Name (line 219):
        
        # Obtaining an instance of the builtin type 'list' (line 219)
        list_26602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 219)
        
        # Assigning a type to the variable 'paths' (line 219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 12), 'paths', list_26602)
        
        
        # Call to get_paths(...): (line 220)
        # Processing the call keyword arguments (line 220)
        kwargs_26605 = {}
        # Getting the type of 'self' (line 220)
        self_26603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 24), 'self', False)
        # Obtaining the member 'get_paths' of a type (line 220)
        get_paths_26604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 24), self_26603, 'get_paths')
        # Calling get_paths(args, kwargs) (line 220)
        get_paths_call_result_26606 = invoke(stypy.reporting.localization.Localization(__file__, 220, 24), get_paths_26604, *[], **kwargs_26605)
        
        # Testing the type of a for loop iterable (line 220)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 220, 12), get_paths_call_result_26606)
        # Getting the type of the for loop variable (line 220)
        for_loop_var_26607 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 220, 12), get_paths_call_result_26606)
        # Assigning a type to the variable 'path' (line 220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 12), 'path', for_loop_var_26607)
        # SSA begins for a for statement (line 220)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Attribute to a Name (line 221):
        
        # Assigning a Attribute to a Name (line 221):
        # Getting the type of 'path' (line 221)
        path_26608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 27), 'path')
        # Obtaining the member 'vertices' of a type (line 221)
        vertices_26609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 27), path_26608, 'vertices')
        # Assigning a type to the variable 'vertices' (line 221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 16), 'vertices', vertices_26609)
        
        # Assigning a Tuple to a Tuple (line 222):
        
        # Assigning a Subscript to a Name (line 222):
        
        # Obtaining the type of the subscript
        slice_26610 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 222, 25), None, None, None)
        int_26611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 222, 37), 'int')
        # Getting the type of 'vertices' (line 222)
        vertices_26612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 25), 'vertices')
        # Obtaining the member '__getitem__' of a type (line 222)
        getitem___26613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 25), vertices_26612, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 222)
        subscript_call_result_26614 = invoke(stypy.reporting.localization.Localization(__file__, 222, 25), getitem___26613, (slice_26610, int_26611))
        
        # Assigning a type to the variable 'tuple_assignment_26210' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 16), 'tuple_assignment_26210', subscript_call_result_26614)
        
        # Assigning a Subscript to a Name (line 222):
        
        # Obtaining the type of the subscript
        slice_26615 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 222, 41), None, None, None)
        int_26616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 222, 53), 'int')
        # Getting the type of 'vertices' (line 222)
        vertices_26617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 41), 'vertices')
        # Obtaining the member '__getitem__' of a type (line 222)
        getitem___26618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 41), vertices_26617, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 222)
        subscript_call_result_26619 = invoke(stypy.reporting.localization.Localization(__file__, 222, 41), getitem___26618, (slice_26615, int_26616))
        
        # Assigning a type to the variable 'tuple_assignment_26211' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 16), 'tuple_assignment_26211', subscript_call_result_26619)
        
        # Assigning a Name to a Name (line 222):
        # Getting the type of 'tuple_assignment_26210' (line 222)
        tuple_assignment_26210_26620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 16), 'tuple_assignment_26210')
        # Assigning a type to the variable 'xs' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 16), 'xs', tuple_assignment_26210_26620)
        
        # Assigning a Name to a Name (line 222):
        # Getting the type of 'tuple_assignment_26211' (line 222)
        tuple_assignment_26211_26621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 16), 'tuple_assignment_26211')
        # Assigning a type to the variable 'ys' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 20), 'ys', tuple_assignment_26211_26621)
        
        # Assigning a Call to a Name (line 223):
        
        # Assigning a Call to a Name (line 223):
        
        # Call to convert_xunits(...): (line 223)
        # Processing the call arguments (line 223)
        # Getting the type of 'xs' (line 223)
        xs_26624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 41), 'xs', False)
        # Processing the call keyword arguments (line 223)
        kwargs_26625 = {}
        # Getting the type of 'self' (line 223)
        self_26622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 21), 'self', False)
        # Obtaining the member 'convert_xunits' of a type (line 223)
        convert_xunits_26623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 21), self_26622, 'convert_xunits')
        # Calling convert_xunits(args, kwargs) (line 223)
        convert_xunits_call_result_26626 = invoke(stypy.reporting.localization.Localization(__file__, 223, 21), convert_xunits_26623, *[xs_26624], **kwargs_26625)
        
        # Assigning a type to the variable 'xs' (line 223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 223, 16), 'xs', convert_xunits_call_result_26626)
        
        # Assigning a Call to a Name (line 224):
        
        # Assigning a Call to a Name (line 224):
        
        # Call to convert_yunits(...): (line 224)
        # Processing the call arguments (line 224)
        # Getting the type of 'ys' (line 224)
        ys_26629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 41), 'ys', False)
        # Processing the call keyword arguments (line 224)
        kwargs_26630 = {}
        # Getting the type of 'self' (line 224)
        self_26627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 21), 'self', False)
        # Obtaining the member 'convert_yunits' of a type (line 224)
        convert_yunits_26628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 21), self_26627, 'convert_yunits')
        # Calling convert_yunits(args, kwargs) (line 224)
        convert_yunits_call_result_26631 = invoke(stypy.reporting.localization.Localization(__file__, 224, 21), convert_yunits_26628, *[ys_26629], **kwargs_26630)
        
        # Assigning a type to the variable 'ys' (line 224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 224, 16), 'ys', convert_yunits_call_result_26631)
        
        # Call to append(...): (line 225)
        # Processing the call arguments (line 225)
        
        # Call to Path(...): (line 225)
        # Processing the call arguments (line 225)
        
        # Call to column_stack(...): (line 225)
        # Processing the call arguments (line 225)
        
        # Obtaining an instance of the builtin type 'list' (line 225)
        list_26638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 56), 'list')
        # Adding type elements to the builtin type 'list' instance (line 225)
        # Adding element type (line 225)
        # Getting the type of 'xs' (line 225)
        xs_26639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 57), 'xs', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 225, 56), list_26638, xs_26639)
        # Adding element type (line 225)
        # Getting the type of 'ys' (line 225)
        ys_26640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 61), 'ys', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 225, 56), list_26638, ys_26640)
        
        # Processing the call keyword arguments (line 225)
        kwargs_26641 = {}
        # Getting the type of 'np' (line 225)
        np_26636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 40), 'np', False)
        # Obtaining the member 'column_stack' of a type (line 225)
        column_stack_26637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 40), np_26636, 'column_stack')
        # Calling column_stack(args, kwargs) (line 225)
        column_stack_call_result_26642 = invoke(stypy.reporting.localization.Localization(__file__, 225, 40), column_stack_26637, *[list_26638], **kwargs_26641)
        
        # Getting the type of 'path' (line 225)
        path_26643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 67), 'path', False)
        # Obtaining the member 'codes' of a type (line 225)
        codes_26644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 67), path_26643, 'codes')
        # Processing the call keyword arguments (line 225)
        kwargs_26645 = {}
        # Getting the type of 'mpath' (line 225)
        mpath_26634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 29), 'mpath', False)
        # Obtaining the member 'Path' of a type (line 225)
        Path_26635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 29), mpath_26634, 'Path')
        # Calling Path(args, kwargs) (line 225)
        Path_call_result_26646 = invoke(stypy.reporting.localization.Localization(__file__, 225, 29), Path_26635, *[column_stack_call_result_26642, codes_26644], **kwargs_26645)
        
        # Processing the call keyword arguments (line 225)
        kwargs_26647 = {}
        # Getting the type of 'paths' (line 225)
        paths_26632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 16), 'paths', False)
        # Obtaining the member 'append' of a type (line 225)
        append_26633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 16), paths_26632, 'append')
        # Calling append(args, kwargs) (line 225)
        append_call_result_26648 = invoke(stypy.reporting.localization.Localization(__file__, 225, 16), append_26633, *[Path_call_result_26646], **kwargs_26647)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'offsets' (line 227)
        offsets_26649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 15), 'offsets')
        # Obtaining the member 'size' of a type (line 227)
        size_26650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 15), offsets_26649, 'size')
        int_26651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 30), 'int')
        # Applying the binary operator '>' (line 227)
        result_gt_26652 = python_operator(stypy.reporting.localization.Localization(__file__, 227, 15), '>', size_26650, int_26651)
        
        # Testing the type of an if condition (line 227)
        if_condition_26653 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 227, 12), result_gt_26652)
        # Assigning a type to the variable 'if_condition_26653' (line 227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 227, 12), 'if_condition_26653', if_condition_26653)
        # SSA begins for if statement (line 227)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 228):
        
        # Assigning a Call to a Name (line 228):
        
        # Call to convert_xunits(...): (line 228)
        # Processing the call arguments (line 228)
        
        # Obtaining the type of the subscript
        slice_26656 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 228, 41), None, None, None)
        int_26657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 228, 52), 'int')
        # Getting the type of 'offsets' (line 228)
        offsets_26658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 41), 'offsets', False)
        # Obtaining the member '__getitem__' of a type (line 228)
        getitem___26659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 41), offsets_26658, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 228)
        subscript_call_result_26660 = invoke(stypy.reporting.localization.Localization(__file__, 228, 41), getitem___26659, (slice_26656, int_26657))
        
        # Processing the call keyword arguments (line 228)
        kwargs_26661 = {}
        # Getting the type of 'self' (line 228)
        self_26654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 21), 'self', False)
        # Obtaining the member 'convert_xunits' of a type (line 228)
        convert_xunits_26655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 21), self_26654, 'convert_xunits')
        # Calling convert_xunits(args, kwargs) (line 228)
        convert_xunits_call_result_26662 = invoke(stypy.reporting.localization.Localization(__file__, 228, 21), convert_xunits_26655, *[subscript_call_result_26660], **kwargs_26661)
        
        # Assigning a type to the variable 'xs' (line 228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 16), 'xs', convert_xunits_call_result_26662)
        
        # Assigning a Call to a Name (line 229):
        
        # Assigning a Call to a Name (line 229):
        
        # Call to convert_yunits(...): (line 229)
        # Processing the call arguments (line 229)
        
        # Obtaining the type of the subscript
        slice_26665 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 229, 41), None, None, None)
        int_26666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 229, 52), 'int')
        # Getting the type of 'offsets' (line 229)
        offsets_26667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 41), 'offsets', False)
        # Obtaining the member '__getitem__' of a type (line 229)
        getitem___26668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 41), offsets_26667, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 229)
        subscript_call_result_26669 = invoke(stypy.reporting.localization.Localization(__file__, 229, 41), getitem___26668, (slice_26665, int_26666))
        
        # Processing the call keyword arguments (line 229)
        kwargs_26670 = {}
        # Getting the type of 'self' (line 229)
        self_26663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 21), 'self', False)
        # Obtaining the member 'convert_yunits' of a type (line 229)
        convert_yunits_26664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 21), self_26663, 'convert_yunits')
        # Calling convert_yunits(args, kwargs) (line 229)
        convert_yunits_call_result_26671 = invoke(stypy.reporting.localization.Localization(__file__, 229, 21), convert_yunits_26664, *[subscript_call_result_26669], **kwargs_26670)
        
        # Assigning a type to the variable 'ys' (line 229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 229, 16), 'ys', convert_yunits_call_result_26671)
        
        # Assigning a Call to a Name (line 230):
        
        # Assigning a Call to a Name (line 230):
        
        # Call to column_stack(...): (line 230)
        # Processing the call arguments (line 230)
        
        # Obtaining an instance of the builtin type 'list' (line 230)
        list_26674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 230, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 230)
        # Adding element type (line 230)
        # Getting the type of 'xs' (line 230)
        xs_26675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 43), 'xs', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 230, 42), list_26674, xs_26675)
        # Adding element type (line 230)
        # Getting the type of 'ys' (line 230)
        ys_26676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 47), 'ys', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 230, 42), list_26674, ys_26676)
        
        # Processing the call keyword arguments (line 230)
        kwargs_26677 = {}
        # Getting the type of 'np' (line 230)
        np_26672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 26), 'np', False)
        # Obtaining the member 'column_stack' of a type (line 230)
        column_stack_26673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 230, 26), np_26672, 'column_stack')
        # Calling column_stack(args, kwargs) (line 230)
        column_stack_call_result_26678 = invoke(stypy.reporting.localization.Localization(__file__, 230, 26), column_stack_26673, *[list_26674], **kwargs_26677)
        
        # Assigning a type to the variable 'offsets' (line 230)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 230, 16), 'offsets', column_stack_call_result_26678)
        # SSA join for if statement (line 227)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 218)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'transform' (line 232)
        transform_26679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 15), 'transform')
        # Obtaining the member 'is_affine' of a type (line 232)
        is_affine_26680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 15), transform_26679, 'is_affine')
        # Applying the 'not' unary operator (line 232)
        result_not__26681 = python_operator(stypy.reporting.localization.Localization(__file__, 232, 11), 'not', is_affine_26680)
        
        # Testing the type of an if condition (line 232)
        if_condition_26682 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 232, 8), result_not__26681)
        # Assigning a type to the variable 'if_condition_26682' (line 232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 232, 8), 'if_condition_26682', if_condition_26682)
        # SSA begins for if statement (line 232)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a ListComp to a Name (line 233):
        
        # Assigning a ListComp to a Name (line 233):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'paths' (line 234)
        paths_26688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 33), 'paths')
        comprehension_26689 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 233, 21), paths_26688)
        # Assigning a type to the variable 'path' (line 233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 233, 21), 'path', comprehension_26689)
        
        # Call to transform_path_non_affine(...): (line 233)
        # Processing the call arguments (line 233)
        # Getting the type of 'path' (line 233)
        path_26685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 57), 'path', False)
        # Processing the call keyword arguments (line 233)
        kwargs_26686 = {}
        # Getting the type of 'transform' (line 233)
        transform_26683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 21), 'transform', False)
        # Obtaining the member 'transform_path_non_affine' of a type (line 233)
        transform_path_non_affine_26684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 233, 21), transform_26683, 'transform_path_non_affine')
        # Calling transform_path_non_affine(args, kwargs) (line 233)
        transform_path_non_affine_call_result_26687 = invoke(stypy.reporting.localization.Localization(__file__, 233, 21), transform_path_non_affine_26684, *[path_26685], **kwargs_26686)
        
        list_26690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 233, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 233, 21), list_26690, transform_path_non_affine_call_result_26687)
        # Assigning a type to the variable 'paths' (line 233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 233, 12), 'paths', list_26690)
        
        # Assigning a Call to a Name (line 235):
        
        # Assigning a Call to a Name (line 235):
        
        # Call to get_affine(...): (line 235)
        # Processing the call keyword arguments (line 235)
        kwargs_26693 = {}
        # Getting the type of 'transform' (line 235)
        transform_26691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 24), 'transform', False)
        # Obtaining the member 'get_affine' of a type (line 235)
        get_affine_26692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 235, 24), transform_26691, 'get_affine')
        # Calling get_affine(args, kwargs) (line 235)
        get_affine_call_result_26694 = invoke(stypy.reporting.localization.Localization(__file__, 235, 24), get_affine_26692, *[], **kwargs_26693)
        
        # Assigning a type to the variable 'transform' (line 235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 235, 12), 'transform', get_affine_call_result_26694)
        # SSA join for if statement (line 232)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'transOffset' (line 236)
        transOffset_26695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 15), 'transOffset')
        # Obtaining the member 'is_affine' of a type (line 236)
        is_affine_26696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 15), transOffset_26695, 'is_affine')
        # Applying the 'not' unary operator (line 236)
        result_not__26697 = python_operator(stypy.reporting.localization.Localization(__file__, 236, 11), 'not', is_affine_26696)
        
        # Testing the type of an if condition (line 236)
        if_condition_26698 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 236, 8), result_not__26697)
        # Assigning a type to the variable 'if_condition_26698' (line 236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 236, 8), 'if_condition_26698', if_condition_26698)
        # SSA begins for if statement (line 236)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 237):
        
        # Assigning a Call to a Name (line 237):
        
        # Call to transform_non_affine(...): (line 237)
        # Processing the call arguments (line 237)
        # Getting the type of 'offsets' (line 237)
        offsets_26701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 55), 'offsets', False)
        # Processing the call keyword arguments (line 237)
        kwargs_26702 = {}
        # Getting the type of 'transOffset' (line 237)
        transOffset_26699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 22), 'transOffset', False)
        # Obtaining the member 'transform_non_affine' of a type (line 237)
        transform_non_affine_26700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 22), transOffset_26699, 'transform_non_affine')
        # Calling transform_non_affine(args, kwargs) (line 237)
        transform_non_affine_call_result_26703 = invoke(stypy.reporting.localization.Localization(__file__, 237, 22), transform_non_affine_26700, *[offsets_26701], **kwargs_26702)
        
        # Assigning a type to the variable 'offsets' (line 237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 237, 12), 'offsets', transform_non_affine_call_result_26703)
        
        # Assigning a Call to a Name (line 239):
        
        # Assigning a Call to a Name (line 239):
        
        # Call to get_affine(...): (line 239)
        # Processing the call keyword arguments (line 239)
        kwargs_26706 = {}
        # Getting the type of 'transOffset' (line 239)
        transOffset_26704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 26), 'transOffset', False)
        # Obtaining the member 'get_affine' of a type (line 239)
        get_affine_26705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 239, 26), transOffset_26704, 'get_affine')
        # Calling get_affine(args, kwargs) (line 239)
        get_affine_call_result_26707 = invoke(stypy.reporting.localization.Localization(__file__, 239, 26), get_affine_26705, *[], **kwargs_26706)
        
        # Assigning a type to the variable 'transOffset' (line 239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 239, 12), 'transOffset', get_affine_call_result_26707)
        # SSA join for if statement (line 236)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to isinstance(...): (line 241)
        # Processing the call arguments (line 241)
        # Getting the type of 'offsets' (line 241)
        offsets_26709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 22), 'offsets', False)
        # Getting the type of 'np' (line 241)
        np_26710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 31), 'np', False)
        # Obtaining the member 'ma' of a type (line 241)
        ma_26711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 31), np_26710, 'ma')
        # Obtaining the member 'MaskedArray' of a type (line 241)
        MaskedArray_26712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 31), ma_26711, 'MaskedArray')
        # Processing the call keyword arguments (line 241)
        kwargs_26713 = {}
        # Getting the type of 'isinstance' (line 241)
        isinstance_26708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 241)
        isinstance_call_result_26714 = invoke(stypy.reporting.localization.Localization(__file__, 241, 11), isinstance_26708, *[offsets_26709, MaskedArray_26712], **kwargs_26713)
        
        # Testing the type of an if condition (line 241)
        if_condition_26715 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 241, 8), isinstance_call_result_26714)
        # Assigning a type to the variable 'if_condition_26715' (line 241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 241, 8), 'if_condition_26715', if_condition_26715)
        # SSA begins for if statement (line 241)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 242):
        
        # Assigning a Call to a Name (line 242):
        
        # Call to filled(...): (line 242)
        # Processing the call arguments (line 242)
        # Getting the type of 'np' (line 242)
        np_26718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 37), 'np', False)
        # Obtaining the member 'nan' of a type (line 242)
        nan_26719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 242, 37), np_26718, 'nan')
        # Processing the call keyword arguments (line 242)
        kwargs_26720 = {}
        # Getting the type of 'offsets' (line 242)
        offsets_26716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 22), 'offsets', False)
        # Obtaining the member 'filled' of a type (line 242)
        filled_26717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 242, 22), offsets_26716, 'filled')
        # Calling filled(args, kwargs) (line 242)
        filled_call_result_26721 = invoke(stypy.reporting.localization.Localization(__file__, 242, 22), filled_26717, *[nan_26719], **kwargs_26720)
        
        # Assigning a type to the variable 'offsets' (line 242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 12), 'offsets', filled_call_result_26721)
        # SSA join for if statement (line 241)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 246)
        tuple_26722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 246)
        # Adding element type (line 246)
        # Getting the type of 'transform' (line 246)
        transform_26723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 15), 'transform')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 246, 15), tuple_26722, transform_26723)
        # Adding element type (line 246)
        # Getting the type of 'transOffset' (line 246)
        transOffset_26724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 26), 'transOffset')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 246, 15), tuple_26722, transOffset_26724)
        # Adding element type (line 246)
        # Getting the type of 'offsets' (line 246)
        offsets_26725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 39), 'offsets')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 246, 15), tuple_26722, offsets_26725)
        # Adding element type (line 246)
        # Getting the type of 'paths' (line 246)
        paths_26726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 48), 'paths')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 246, 15), tuple_26722, paths_26726)
        
        # Assigning a type to the variable 'stypy_return_type' (line 246)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 246, 8), 'stypy_return_type', tuple_26722)
        
        # ################# End of '_prepare_points(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_prepare_points' in the type store
        # Getting the type of 'stypy_return_type' (line 210)
        stypy_return_type_26727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_26727)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_prepare_points'
        return stypy_return_type_26727


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 248, 4, False)
        # Assigning a type to the variable 'self' (line 249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.draw.__dict__.__setitem__('stypy_localization', localization)
        Collection.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.draw.__dict__.__setitem__('stypy_function_name', 'Collection.draw')
        Collection.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Collection.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        
        
        
        # Call to get_visible(...): (line 250)
        # Processing the call keyword arguments (line 250)
        kwargs_26730 = {}
        # Getting the type of 'self' (line 250)
        self_26728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 250)
        get_visible_26729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 250, 15), self_26728, 'get_visible')
        # Calling get_visible(args, kwargs) (line 250)
        get_visible_call_result_26731 = invoke(stypy.reporting.localization.Localization(__file__, 250, 15), get_visible_26729, *[], **kwargs_26730)
        
        # Applying the 'not' unary operator (line 250)
        result_not__26732 = python_operator(stypy.reporting.localization.Localization(__file__, 250, 11), 'not', get_visible_call_result_26731)
        
        # Testing the type of an if condition (line 250)
        if_condition_26733 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 250, 8), result_not__26732)
        # Assigning a type to the variable 'if_condition_26733' (line 250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 250, 8), 'if_condition_26733', if_condition_26733)
        # SSA begins for if statement (line 250)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 250)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to open_group(...): (line 252)
        # Processing the call arguments (line 252)
        # Getting the type of 'self' (line 252)
        self_26736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 28), 'self', False)
        # Obtaining the member '__class__' of a type (line 252)
        class___26737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 28), self_26736, '__class__')
        # Obtaining the member '__name__' of a type (line 252)
        name___26738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 28), class___26737, '__name__')
        
        # Call to get_gid(...): (line 252)
        # Processing the call keyword arguments (line 252)
        kwargs_26741 = {}
        # Getting the type of 'self' (line 252)
        self_26739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 53), 'self', False)
        # Obtaining the member 'get_gid' of a type (line 252)
        get_gid_26740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 53), self_26739, 'get_gid')
        # Calling get_gid(args, kwargs) (line 252)
        get_gid_call_result_26742 = invoke(stypy.reporting.localization.Localization(__file__, 252, 53), get_gid_26740, *[], **kwargs_26741)
        
        # Processing the call keyword arguments (line 252)
        kwargs_26743 = {}
        # Getting the type of 'renderer' (line 252)
        renderer_26734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 8), 'renderer', False)
        # Obtaining the member 'open_group' of a type (line 252)
        open_group_26735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 8), renderer_26734, 'open_group')
        # Calling open_group(args, kwargs) (line 252)
        open_group_call_result_26744 = invoke(stypy.reporting.localization.Localization(__file__, 252, 8), open_group_26735, *[name___26738, get_gid_call_result_26742], **kwargs_26743)
        
        
        # Call to update_scalarmappable(...): (line 254)
        # Processing the call keyword arguments (line 254)
        kwargs_26747 = {}
        # Getting the type of 'self' (line 254)
        self_26745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 8), 'self', False)
        # Obtaining the member 'update_scalarmappable' of a type (line 254)
        update_scalarmappable_26746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 8), self_26745, 'update_scalarmappable')
        # Calling update_scalarmappable(args, kwargs) (line 254)
        update_scalarmappable_call_result_26748 = invoke(stypy.reporting.localization.Localization(__file__, 254, 8), update_scalarmappable_26746, *[], **kwargs_26747)
        
        
        # Assigning a Call to a Tuple (line 256):
        
        # Assigning a Call to a Name:
        
        # Call to _prepare_points(...): (line 256)
        # Processing the call keyword arguments (line 256)
        kwargs_26751 = {}
        # Getting the type of 'self' (line 256)
        self_26749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 49), 'self', False)
        # Obtaining the member '_prepare_points' of a type (line 256)
        _prepare_points_26750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 49), self_26749, '_prepare_points')
        # Calling _prepare_points(args, kwargs) (line 256)
        _prepare_points_call_result_26752 = invoke(stypy.reporting.localization.Localization(__file__, 256, 49), _prepare_points_26750, *[], **kwargs_26751)
        
        # Assigning a type to the variable 'call_assignment_26212' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_26212', _prepare_points_call_result_26752)
        
        # Assigning a Call to a Name (line 256):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_26755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 8), 'int')
        # Processing the call keyword arguments
        kwargs_26756 = {}
        # Getting the type of 'call_assignment_26212' (line 256)
        call_assignment_26212_26753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_26212', False)
        # Obtaining the member '__getitem__' of a type (line 256)
        getitem___26754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 8), call_assignment_26212_26753, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_26757 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___26754, *[int_26755], **kwargs_26756)
        
        # Assigning a type to the variable 'call_assignment_26213' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_26213', getitem___call_result_26757)
        
        # Assigning a Name to a Name (line 256):
        # Getting the type of 'call_assignment_26213' (line 256)
        call_assignment_26213_26758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_26213')
        # Assigning a type to the variable 'transform' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'transform', call_assignment_26213_26758)
        
        # Assigning a Call to a Name (line 256):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_26761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 8), 'int')
        # Processing the call keyword arguments
        kwargs_26762 = {}
        # Getting the type of 'call_assignment_26212' (line 256)
        call_assignment_26212_26759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_26212', False)
        # Obtaining the member '__getitem__' of a type (line 256)
        getitem___26760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 8), call_assignment_26212_26759, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_26763 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___26760, *[int_26761], **kwargs_26762)
        
        # Assigning a type to the variable 'call_assignment_26214' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_26214', getitem___call_result_26763)
        
        # Assigning a Name to a Name (line 256):
        # Getting the type of 'call_assignment_26214' (line 256)
        call_assignment_26214_26764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_26214')
        # Assigning a type to the variable 'transOffset' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 19), 'transOffset', call_assignment_26214_26764)
        
        # Assigning a Call to a Name (line 256):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_26767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 8), 'int')
        # Processing the call keyword arguments
        kwargs_26768 = {}
        # Getting the type of 'call_assignment_26212' (line 256)
        call_assignment_26212_26765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_26212', False)
        # Obtaining the member '__getitem__' of a type (line 256)
        getitem___26766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 8), call_assignment_26212_26765, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_26769 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___26766, *[int_26767], **kwargs_26768)
        
        # Assigning a type to the variable 'call_assignment_26215' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_26215', getitem___call_result_26769)
        
        # Assigning a Name to a Name (line 256):
        # Getting the type of 'call_assignment_26215' (line 256)
        call_assignment_26215_26770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_26215')
        # Assigning a type to the variable 'offsets' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 32), 'offsets', call_assignment_26215_26770)
        
        # Assigning a Call to a Name (line 256):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_26773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 8), 'int')
        # Processing the call keyword arguments
        kwargs_26774 = {}
        # Getting the type of 'call_assignment_26212' (line 256)
        call_assignment_26212_26771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_26212', False)
        # Obtaining the member '__getitem__' of a type (line 256)
        getitem___26772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 8), call_assignment_26212_26771, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_26775 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___26772, *[int_26773], **kwargs_26774)
        
        # Assigning a type to the variable 'call_assignment_26216' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_26216', getitem___call_result_26775)
        
        # Assigning a Name to a Name (line 256):
        # Getting the type of 'call_assignment_26216' (line 256)
        call_assignment_26216_26776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'call_assignment_26216')
        # Assigning a type to the variable 'paths' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 41), 'paths', call_assignment_26216_26776)
        
        # Assigning a Call to a Name (line 258):
        
        # Assigning a Call to a Name (line 258):
        
        # Call to new_gc(...): (line 258)
        # Processing the call keyword arguments (line 258)
        kwargs_26779 = {}
        # Getting the type of 'renderer' (line 258)
        renderer_26777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 13), 'renderer', False)
        # Obtaining the member 'new_gc' of a type (line 258)
        new_gc_26778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 13), renderer_26777, 'new_gc')
        # Calling new_gc(args, kwargs) (line 258)
        new_gc_call_result_26780 = invoke(stypy.reporting.localization.Localization(__file__, 258, 13), new_gc_26778, *[], **kwargs_26779)
        
        # Assigning a type to the variable 'gc' (line 258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 8), 'gc', new_gc_call_result_26780)
        
        # Call to _set_gc_clip(...): (line 259)
        # Processing the call arguments (line 259)
        # Getting the type of 'gc' (line 259)
        gc_26783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 26), 'gc', False)
        # Processing the call keyword arguments (line 259)
        kwargs_26784 = {}
        # Getting the type of 'self' (line 259)
        self_26781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 8), 'self', False)
        # Obtaining the member '_set_gc_clip' of a type (line 259)
        _set_gc_clip_26782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 259, 8), self_26781, '_set_gc_clip')
        # Calling _set_gc_clip(args, kwargs) (line 259)
        _set_gc_clip_call_result_26785 = invoke(stypy.reporting.localization.Localization(__file__, 259, 8), _set_gc_clip_26782, *[gc_26783], **kwargs_26784)
        
        
        # Call to set_snap(...): (line 260)
        # Processing the call arguments (line 260)
        
        # Call to get_snap(...): (line 260)
        # Processing the call keyword arguments (line 260)
        kwargs_26790 = {}
        # Getting the type of 'self' (line 260)
        self_26788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 20), 'self', False)
        # Obtaining the member 'get_snap' of a type (line 260)
        get_snap_26789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 260, 20), self_26788, 'get_snap')
        # Calling get_snap(args, kwargs) (line 260)
        get_snap_call_result_26791 = invoke(stypy.reporting.localization.Localization(__file__, 260, 20), get_snap_26789, *[], **kwargs_26790)
        
        # Processing the call keyword arguments (line 260)
        kwargs_26792 = {}
        # Getting the type of 'gc' (line 260)
        gc_26786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 8), 'gc', False)
        # Obtaining the member 'set_snap' of a type (line 260)
        set_snap_26787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 260, 8), gc_26786, 'set_snap')
        # Calling set_snap(args, kwargs) (line 260)
        set_snap_call_result_26793 = invoke(stypy.reporting.localization.Localization(__file__, 260, 8), set_snap_26787, *[get_snap_call_result_26791], **kwargs_26792)
        
        
        # Getting the type of 'self' (line 262)
        self_26794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 11), 'self')
        # Obtaining the member '_hatch' of a type (line 262)
        _hatch_26795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 262, 11), self_26794, '_hatch')
        # Testing the type of an if condition (line 262)
        if_condition_26796 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 262, 8), _hatch_26795)
        # Assigning a type to the variable 'if_condition_26796' (line 262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 262, 8), 'if_condition_26796', if_condition_26796)
        # SSA begins for if statement (line 262)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_hatch(...): (line 263)
        # Processing the call arguments (line 263)
        # Getting the type of 'self' (line 263)
        self_26799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 25), 'self', False)
        # Obtaining the member '_hatch' of a type (line 263)
        _hatch_26800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 25), self_26799, '_hatch')
        # Processing the call keyword arguments (line 263)
        kwargs_26801 = {}
        # Getting the type of 'gc' (line 263)
        gc_26797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 12), 'gc', False)
        # Obtaining the member 'set_hatch' of a type (line 263)
        set_hatch_26798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 12), gc_26797, 'set_hatch')
        # Calling set_hatch(args, kwargs) (line 263)
        set_hatch_call_result_26802 = invoke(stypy.reporting.localization.Localization(__file__, 263, 12), set_hatch_26798, *[_hatch_26800], **kwargs_26801)
        
        
        
        # SSA begins for try-except statement (line 264)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to set_hatch_color(...): (line 265)
        # Processing the call arguments (line 265)
        # Getting the type of 'self' (line 265)
        self_26805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 35), 'self', False)
        # Obtaining the member '_hatch_color' of a type (line 265)
        _hatch_color_26806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 265, 35), self_26805, '_hatch_color')
        # Processing the call keyword arguments (line 265)
        kwargs_26807 = {}
        # Getting the type of 'gc' (line 265)
        gc_26803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 16), 'gc', False)
        # Obtaining the member 'set_hatch_color' of a type (line 265)
        set_hatch_color_26804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 265, 16), gc_26803, 'set_hatch_color')
        # Calling set_hatch_color(args, kwargs) (line 265)
        set_hatch_color_call_result_26808 = invoke(stypy.reporting.localization.Localization(__file__, 265, 16), set_hatch_color_26804, *[_hatch_color_26806], **kwargs_26807)
        
        # SSA branch for the except part of a try statement (line 264)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 264)
        module_type_store.open_ssa_branch('except')
        
        # Call to warn(...): (line 268)
        # Processing the call arguments (line 268)
        unicode_26811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 30), 'unicode', u'Your backend does not support setting the hatch color.')
        # Processing the call keyword arguments (line 268)
        kwargs_26812 = {}
        # Getting the type of 'warnings' (line 268)
        warnings_26809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 268)
        warn_26810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 16), warnings_26809, 'warn')
        # Calling warn(args, kwargs) (line 268)
        warn_call_result_26813 = invoke(stypy.reporting.localization.Localization(__file__, 268, 16), warn_26810, *[unicode_26811], **kwargs_26812)
        
        # SSA join for try-except statement (line 264)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 262)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to get_sketch_params(...): (line 271)
        # Processing the call keyword arguments (line 271)
        kwargs_26816 = {}
        # Getting the type of 'self' (line 271)
        self_26814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 11), 'self', False)
        # Obtaining the member 'get_sketch_params' of a type (line 271)
        get_sketch_params_26815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 271, 11), self_26814, 'get_sketch_params')
        # Calling get_sketch_params(args, kwargs) (line 271)
        get_sketch_params_call_result_26817 = invoke(stypy.reporting.localization.Localization(__file__, 271, 11), get_sketch_params_26815, *[], **kwargs_26816)
        
        # Getting the type of 'None' (line 271)
        None_26818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 43), 'None')
        # Applying the binary operator 'isnot' (line 271)
        result_is_not_26819 = python_operator(stypy.reporting.localization.Localization(__file__, 271, 11), 'isnot', get_sketch_params_call_result_26817, None_26818)
        
        # Testing the type of an if condition (line 271)
        if_condition_26820 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 271, 8), result_is_not_26819)
        # Assigning a type to the variable 'if_condition_26820' (line 271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 271, 8), 'if_condition_26820', if_condition_26820)
        # SSA begins for if statement (line 271)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_sketch_params(...): (line 272)
        
        # Call to get_sketch_params(...): (line 272)
        # Processing the call keyword arguments (line 272)
        kwargs_26825 = {}
        # Getting the type of 'self' (line 272)
        self_26823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 34), 'self', False)
        # Obtaining the member 'get_sketch_params' of a type (line 272)
        get_sketch_params_26824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 272, 34), self_26823, 'get_sketch_params')
        # Calling get_sketch_params(args, kwargs) (line 272)
        get_sketch_params_call_result_26826 = invoke(stypy.reporting.localization.Localization(__file__, 272, 34), get_sketch_params_26824, *[], **kwargs_26825)
        
        # Processing the call keyword arguments (line 272)
        kwargs_26827 = {}
        # Getting the type of 'gc' (line 272)
        gc_26821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 12), 'gc', False)
        # Obtaining the member 'set_sketch_params' of a type (line 272)
        set_sketch_params_26822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 272, 12), gc_26821, 'set_sketch_params')
        # Calling set_sketch_params(args, kwargs) (line 272)
        set_sketch_params_call_result_26828 = invoke(stypy.reporting.localization.Localization(__file__, 272, 12), set_sketch_params_26822, *[get_sketch_params_call_result_26826], **kwargs_26827)
        
        # SSA join for if statement (line 271)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to get_path_effects(...): (line 274)
        # Processing the call keyword arguments (line 274)
        kwargs_26831 = {}
        # Getting the type of 'self' (line 274)
        self_26829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 11), 'self', False)
        # Obtaining the member 'get_path_effects' of a type (line 274)
        get_path_effects_26830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 11), self_26829, 'get_path_effects')
        # Calling get_path_effects(args, kwargs) (line 274)
        get_path_effects_call_result_26832 = invoke(stypy.reporting.localization.Localization(__file__, 274, 11), get_path_effects_26830, *[], **kwargs_26831)
        
        # Testing the type of an if condition (line 274)
        if_condition_26833 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 274, 8), get_path_effects_call_result_26832)
        # Assigning a type to the variable 'if_condition_26833' (line 274)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 274, 8), 'if_condition_26833', if_condition_26833)
        # SSA begins for if statement (line 274)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 275, 12))
        
        # 'from matplotlib.patheffects import PathEffectRenderer' statement (line 275)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_26834 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 275, 12), 'matplotlib.patheffects')

        if (type(import_26834) is not StypyTypeError):

            if (import_26834 != 'pyd_module'):
                __import__(import_26834)
                sys_modules_26835 = sys.modules[import_26834]
                import_from_module(stypy.reporting.localization.Localization(__file__, 275, 12), 'matplotlib.patheffects', sys_modules_26835.module_type_store, module_type_store, ['PathEffectRenderer'])
                nest_module(stypy.reporting.localization.Localization(__file__, 275, 12), __file__, sys_modules_26835, sys_modules_26835.module_type_store, module_type_store)
            else:
                from matplotlib.patheffects import PathEffectRenderer

                import_from_module(stypy.reporting.localization.Localization(__file__, 275, 12), 'matplotlib.patheffects', None, module_type_store, ['PathEffectRenderer'], [PathEffectRenderer])

        else:
            # Assigning a type to the variable 'matplotlib.patheffects' (line 275)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 12), 'matplotlib.patheffects', import_26834)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Assigning a Call to a Name (line 276):
        
        # Assigning a Call to a Name (line 276):
        
        # Call to PathEffectRenderer(...): (line 276)
        # Processing the call arguments (line 276)
        
        # Call to get_path_effects(...): (line 276)
        # Processing the call keyword arguments (line 276)
        kwargs_26839 = {}
        # Getting the type of 'self' (line 276)
        self_26837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 42), 'self', False)
        # Obtaining the member 'get_path_effects' of a type (line 276)
        get_path_effects_26838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 276, 42), self_26837, 'get_path_effects')
        # Calling get_path_effects(args, kwargs) (line 276)
        get_path_effects_call_result_26840 = invoke(stypy.reporting.localization.Localization(__file__, 276, 42), get_path_effects_26838, *[], **kwargs_26839)
        
        # Getting the type of 'renderer' (line 276)
        renderer_26841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 67), 'renderer', False)
        # Processing the call keyword arguments (line 276)
        kwargs_26842 = {}
        # Getting the type of 'PathEffectRenderer' (line 276)
        PathEffectRenderer_26836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 23), 'PathEffectRenderer', False)
        # Calling PathEffectRenderer(args, kwargs) (line 276)
        PathEffectRenderer_call_result_26843 = invoke(stypy.reporting.localization.Localization(__file__, 276, 23), PathEffectRenderer_26836, *[get_path_effects_call_result_26840, renderer_26841], **kwargs_26842)
        
        # Assigning a type to the variable 'renderer' (line 276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 12), 'renderer', PathEffectRenderer_call_result_26843)
        # SSA join for if statement (line 274)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 284):
        
        # Assigning a Call to a Name (line 284):
        
        # Call to get_transforms(...): (line 284)
        # Processing the call keyword arguments (line 284)
        kwargs_26846 = {}
        # Getting the type of 'self' (line 284)
        self_26844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 16), 'self', False)
        # Obtaining the member 'get_transforms' of a type (line 284)
        get_transforms_26845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 16), self_26844, 'get_transforms')
        # Calling get_transforms(args, kwargs) (line 284)
        get_transforms_call_result_26847 = invoke(stypy.reporting.localization.Localization(__file__, 284, 16), get_transforms_26845, *[], **kwargs_26846)
        
        # Assigning a type to the variable 'trans' (line 284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 8), 'trans', get_transforms_call_result_26847)
        
        # Assigning a Call to a Name (line 285):
        
        # Assigning a Call to a Name (line 285):
        
        # Call to get_facecolor(...): (line 285)
        # Processing the call keyword arguments (line 285)
        kwargs_26850 = {}
        # Getting the type of 'self' (line 285)
        self_26848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 21), 'self', False)
        # Obtaining the member 'get_facecolor' of a type (line 285)
        get_facecolor_26849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 285, 21), self_26848, 'get_facecolor')
        # Calling get_facecolor(args, kwargs) (line 285)
        get_facecolor_call_result_26851 = invoke(stypy.reporting.localization.Localization(__file__, 285, 21), get_facecolor_26849, *[], **kwargs_26850)
        
        # Assigning a type to the variable 'facecolors' (line 285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 285, 8), 'facecolors', get_facecolor_call_result_26851)
        
        # Assigning a Call to a Name (line 286):
        
        # Assigning a Call to a Name (line 286):
        
        # Call to get_edgecolor(...): (line 286)
        # Processing the call keyword arguments (line 286)
        kwargs_26854 = {}
        # Getting the type of 'self' (line 286)
        self_26852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 21), 'self', False)
        # Obtaining the member 'get_edgecolor' of a type (line 286)
        get_edgecolor_26853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 21), self_26852, 'get_edgecolor')
        # Calling get_edgecolor(args, kwargs) (line 286)
        get_edgecolor_call_result_26855 = invoke(stypy.reporting.localization.Localization(__file__, 286, 21), get_edgecolor_26853, *[], **kwargs_26854)
        
        # Assigning a type to the variable 'edgecolors' (line 286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 8), 'edgecolors', get_edgecolor_call_result_26855)
        
        # Assigning a Name to a Name (line 287):
        
        # Assigning a Name to a Name (line 287):
        # Getting the type of 'False' (line 287)
        False_26856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 38), 'False')
        # Assigning a type to the variable 'do_single_path_optimization' (line 287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 287, 8), 'do_single_path_optimization', False_26856)
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 288)
        # Processing the call arguments (line 288)
        # Getting the type of 'paths' (line 288)
        paths_26858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 16), 'paths', False)
        # Processing the call keyword arguments (line 288)
        kwargs_26859 = {}
        # Getting the type of 'len' (line 288)
        len_26857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 12), 'len', False)
        # Calling len(args, kwargs) (line 288)
        len_call_result_26860 = invoke(stypy.reporting.localization.Localization(__file__, 288, 12), len_26857, *[paths_26858], **kwargs_26859)
        
        int_26861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 288, 26), 'int')
        # Applying the binary operator '==' (line 288)
        result_eq_26862 = python_operator(stypy.reporting.localization.Localization(__file__, 288, 12), '==', len_call_result_26860, int_26861)
        
        
        
        # Call to len(...): (line 288)
        # Processing the call arguments (line 288)
        # Getting the type of 'trans' (line 288)
        trans_26864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 36), 'trans', False)
        # Processing the call keyword arguments (line 288)
        kwargs_26865 = {}
        # Getting the type of 'len' (line 288)
        len_26863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 32), 'len', False)
        # Calling len(args, kwargs) (line 288)
        len_call_result_26866 = invoke(stypy.reporting.localization.Localization(__file__, 288, 32), len_26863, *[trans_26864], **kwargs_26865)
        
        int_26867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 288, 46), 'int')
        # Applying the binary operator '<=' (line 288)
        result_le_26868 = python_operator(stypy.reporting.localization.Localization(__file__, 288, 32), '<=', len_call_result_26866, int_26867)
        
        # Applying the binary operator 'and' (line 288)
        result_and_keyword_26869 = python_operator(stypy.reporting.localization.Localization(__file__, 288, 12), 'and', result_eq_26862, result_le_26868)
        
        
        # Call to len(...): (line 289)
        # Processing the call arguments (line 289)
        # Getting the type of 'facecolors' (line 289)
        facecolors_26871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 16), 'facecolors', False)
        # Processing the call keyword arguments (line 289)
        kwargs_26872 = {}
        # Getting the type of 'len' (line 289)
        len_26870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 12), 'len', False)
        # Calling len(args, kwargs) (line 289)
        len_call_result_26873 = invoke(stypy.reporting.localization.Localization(__file__, 289, 12), len_26870, *[facecolors_26871], **kwargs_26872)
        
        int_26874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 31), 'int')
        # Applying the binary operator '==' (line 289)
        result_eq_26875 = python_operator(stypy.reporting.localization.Localization(__file__, 289, 12), '==', len_call_result_26873, int_26874)
        
        # Applying the binary operator 'and' (line 288)
        result_and_keyword_26876 = python_operator(stypy.reporting.localization.Localization(__file__, 288, 12), 'and', result_and_keyword_26869, result_eq_26875)
        
        
        # Call to len(...): (line 289)
        # Processing the call arguments (line 289)
        # Getting the type of 'edgecolors' (line 289)
        edgecolors_26878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 41), 'edgecolors', False)
        # Processing the call keyword arguments (line 289)
        kwargs_26879 = {}
        # Getting the type of 'len' (line 289)
        len_26877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 37), 'len', False)
        # Calling len(args, kwargs) (line 289)
        len_call_result_26880 = invoke(stypy.reporting.localization.Localization(__file__, 289, 37), len_26877, *[edgecolors_26878], **kwargs_26879)
        
        int_26881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 56), 'int')
        # Applying the binary operator '==' (line 289)
        result_eq_26882 = python_operator(stypy.reporting.localization.Localization(__file__, 289, 37), '==', len_call_result_26880, int_26881)
        
        # Applying the binary operator 'and' (line 288)
        result_and_keyword_26883 = python_operator(stypy.reporting.localization.Localization(__file__, 288, 12), 'and', result_and_keyword_26876, result_eq_26882)
        
        
        # Call to len(...): (line 290)
        # Processing the call arguments (line 290)
        # Getting the type of 'self' (line 290)
        self_26885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 16), 'self', False)
        # Obtaining the member '_linewidths' of a type (line 290)
        _linewidths_26886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 16), self_26885, '_linewidths')
        # Processing the call keyword arguments (line 290)
        kwargs_26887 = {}
        # Getting the type of 'len' (line 290)
        len_26884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 12), 'len', False)
        # Calling len(args, kwargs) (line 290)
        len_call_result_26888 = invoke(stypy.reporting.localization.Localization(__file__, 290, 12), len_26884, *[_linewidths_26886], **kwargs_26887)
        
        int_26889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, 37), 'int')
        # Applying the binary operator '==' (line 290)
        result_eq_26890 = python_operator(stypy.reporting.localization.Localization(__file__, 290, 12), '==', len_call_result_26888, int_26889)
        
        # Applying the binary operator 'and' (line 288)
        result_and_keyword_26891 = python_operator(stypy.reporting.localization.Localization(__file__, 288, 12), 'and', result_and_keyword_26883, result_eq_26890)
        
        # Getting the type of 'self' (line 291)
        self_26892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 12), 'self')
        # Obtaining the member '_linestyles' of a type (line 291)
        _linestyles_26893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 291, 12), self_26892, '_linestyles')
        
        # Obtaining an instance of the builtin type 'list' (line 291)
        list_26894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 291, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 291)
        # Adding element type (line 291)
        
        # Obtaining an instance of the builtin type 'tuple' (line 291)
        tuple_26895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 291, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 291)
        # Adding element type (line 291)
        # Getting the type of 'None' (line 291)
        None_26896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 34), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 291, 34), tuple_26895, None_26896)
        # Adding element type (line 291)
        # Getting the type of 'None' (line 291)
        None_26897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 40), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 291, 34), tuple_26895, None_26897)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 291, 32), list_26894, tuple_26895)
        
        # Applying the binary operator '==' (line 291)
        result_eq_26898 = python_operator(stypy.reporting.localization.Localization(__file__, 291, 12), '==', _linestyles_26893, list_26894)
        
        # Applying the binary operator 'and' (line 288)
        result_and_keyword_26899 = python_operator(stypy.reporting.localization.Localization(__file__, 288, 12), 'and', result_and_keyword_26891, result_eq_26898)
        
        
        # Call to len(...): (line 292)
        # Processing the call arguments (line 292)
        # Getting the type of 'self' (line 292)
        self_26901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 16), 'self', False)
        # Obtaining the member '_antialiaseds' of a type (line 292)
        _antialiaseds_26902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 16), self_26901, '_antialiaseds')
        # Processing the call keyword arguments (line 292)
        kwargs_26903 = {}
        # Getting the type of 'len' (line 292)
        len_26900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 12), 'len', False)
        # Calling len(args, kwargs) (line 292)
        len_call_result_26904 = invoke(stypy.reporting.localization.Localization(__file__, 292, 12), len_26900, *[_antialiaseds_26902], **kwargs_26903)
        
        int_26905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 39), 'int')
        # Applying the binary operator '==' (line 292)
        result_eq_26906 = python_operator(stypy.reporting.localization.Localization(__file__, 292, 12), '==', len_call_result_26904, int_26905)
        
        # Applying the binary operator 'and' (line 288)
        result_and_keyword_26907 = python_operator(stypy.reporting.localization.Localization(__file__, 288, 12), 'and', result_and_keyword_26899, result_eq_26906)
        
        
        # Call to len(...): (line 292)
        # Processing the call arguments (line 292)
        # Getting the type of 'self' (line 292)
        self_26909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 49), 'self', False)
        # Obtaining the member '_urls' of a type (line 292)
        _urls_26910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 49), self_26909, '_urls')
        # Processing the call keyword arguments (line 292)
        kwargs_26911 = {}
        # Getting the type of 'len' (line 292)
        len_26908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 45), 'len', False)
        # Calling len(args, kwargs) (line 292)
        len_call_result_26912 = invoke(stypy.reporting.localization.Localization(__file__, 292, 45), len_26908, *[_urls_26910], **kwargs_26911)
        
        int_26913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 64), 'int')
        # Applying the binary operator '==' (line 292)
        result_eq_26914 = python_operator(stypy.reporting.localization.Localization(__file__, 292, 45), '==', len_call_result_26912, int_26913)
        
        # Applying the binary operator 'and' (line 288)
        result_and_keyword_26915 = python_operator(stypy.reporting.localization.Localization(__file__, 288, 12), 'and', result_and_keyword_26907, result_eq_26914)
        
        
        # Call to get_hatch(...): (line 293)
        # Processing the call keyword arguments (line 293)
        kwargs_26918 = {}
        # Getting the type of 'self' (line 293)
        self_26916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 12), 'self', False)
        # Obtaining the member 'get_hatch' of a type (line 293)
        get_hatch_26917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 12), self_26916, 'get_hatch')
        # Calling get_hatch(args, kwargs) (line 293)
        get_hatch_call_result_26919 = invoke(stypy.reporting.localization.Localization(__file__, 293, 12), get_hatch_26917, *[], **kwargs_26918)
        
        # Getting the type of 'None' (line 293)
        None_26920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 32), 'None')
        # Applying the binary operator 'is' (line 293)
        result_is__26921 = python_operator(stypy.reporting.localization.Localization(__file__, 293, 12), 'is', get_hatch_call_result_26919, None_26920)
        
        # Applying the binary operator 'and' (line 288)
        result_and_keyword_26922 = python_operator(stypy.reporting.localization.Localization(__file__, 288, 12), 'and', result_and_keyword_26915, result_is__26921)
        
        # Testing the type of an if condition (line 288)
        if_condition_26923 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 288, 8), result_and_keyword_26922)
        # Assigning a type to the variable 'if_condition_26923' (line 288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 288, 8), 'if_condition_26923', if_condition_26923)
        # SSA begins for if statement (line 288)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to len(...): (line 294)
        # Processing the call arguments (line 294)
        # Getting the type of 'trans' (line 294)
        trans_26925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 19), 'trans', False)
        # Processing the call keyword arguments (line 294)
        kwargs_26926 = {}
        # Getting the type of 'len' (line 294)
        len_26924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 15), 'len', False)
        # Calling len(args, kwargs) (line 294)
        len_call_result_26927 = invoke(stypy.reporting.localization.Localization(__file__, 294, 15), len_26924, *[trans_26925], **kwargs_26926)
        
        # Testing the type of an if condition (line 294)
        if_condition_26928 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 294, 12), len_call_result_26927)
        # Assigning a type to the variable 'if_condition_26928' (line 294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 294, 12), 'if_condition_26928', if_condition_26928)
        # SSA begins for if statement (line 294)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 295):
        
        # Assigning a BinOp to a Name (line 295):
        
        # Call to Affine2D(...): (line 295)
        # Processing the call arguments (line 295)
        
        # Obtaining the type of the subscript
        int_26931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 295, 64), 'int')
        # Getting the type of 'trans' (line 295)
        trans_26932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 58), 'trans', False)
        # Obtaining the member '__getitem__' of a type (line 295)
        getitem___26933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 58), trans_26932, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 295)
        subscript_call_result_26934 = invoke(stypy.reporting.localization.Localization(__file__, 295, 58), getitem___26933, int_26931)
        
        # Processing the call keyword arguments (line 295)
        kwargs_26935 = {}
        # Getting the type of 'transforms' (line 295)
        transforms_26929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 38), 'transforms', False)
        # Obtaining the member 'Affine2D' of a type (line 295)
        Affine2D_26930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 38), transforms_26929, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 295)
        Affine2D_call_result_26936 = invoke(stypy.reporting.localization.Localization(__file__, 295, 38), Affine2D_26930, *[subscript_call_result_26934], **kwargs_26935)
        
        # Getting the type of 'transform' (line 296)
        transform_26937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 38), 'transform')
        # Applying the binary operator '+' (line 295)
        result_add_26938 = python_operator(stypy.reporting.localization.Localization(__file__, 295, 38), '+', Affine2D_call_result_26936, transform_26937)
        
        # Assigning a type to the variable 'combined_transform' (line 295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 295, 16), 'combined_transform', result_add_26938)
        # SSA branch for the else part of an if statement (line 294)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 298):
        
        # Assigning a Name to a Name (line 298):
        # Getting the type of 'transform' (line 298)
        transform_26939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 37), 'transform')
        # Assigning a type to the variable 'combined_transform' (line 298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 16), 'combined_transform', transform_26939)
        # SSA join for if statement (line 294)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 299):
        
        # Assigning a Call to a Name (line 299):
        
        # Call to get_extents(...): (line 299)
        # Processing the call arguments (line 299)
        # Getting the type of 'combined_transform' (line 299)
        combined_transform_26945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 43), 'combined_transform', False)
        # Processing the call keyword arguments (line 299)
        kwargs_26946 = {}
        
        # Obtaining the type of the subscript
        int_26940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 28), 'int')
        # Getting the type of 'paths' (line 299)
        paths_26941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 22), 'paths', False)
        # Obtaining the member '__getitem__' of a type (line 299)
        getitem___26942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 22), paths_26941, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 299)
        subscript_call_result_26943 = invoke(stypy.reporting.localization.Localization(__file__, 299, 22), getitem___26942, int_26940)
        
        # Obtaining the member 'get_extents' of a type (line 299)
        get_extents_26944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 22), subscript_call_result_26943, 'get_extents')
        # Calling get_extents(args, kwargs) (line 299)
        get_extents_call_result_26947 = invoke(stypy.reporting.localization.Localization(__file__, 299, 22), get_extents_26944, *[combined_transform_26945], **kwargs_26946)
        
        # Assigning a type to the variable 'extents' (line 299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 12), 'extents', get_extents_call_result_26947)
        
        # Assigning a Call to a Tuple (line 300):
        
        # Assigning a Call to a Name:
        
        # Call to get_canvas_width_height(...): (line 300)
        # Processing the call keyword arguments (line 300)
        kwargs_26950 = {}
        # Getting the type of 'renderer' (line 300)
        renderer_26948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 28), 'renderer', False)
        # Obtaining the member 'get_canvas_width_height' of a type (line 300)
        get_canvas_width_height_26949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 300, 28), renderer_26948, 'get_canvas_width_height')
        # Calling get_canvas_width_height(args, kwargs) (line 300)
        get_canvas_width_height_call_result_26951 = invoke(stypy.reporting.localization.Localization(__file__, 300, 28), get_canvas_width_height_26949, *[], **kwargs_26950)
        
        # Assigning a type to the variable 'call_assignment_26217' (line 300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 12), 'call_assignment_26217', get_canvas_width_height_call_result_26951)
        
        # Assigning a Call to a Name (line 300):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_26954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 300, 12), 'int')
        # Processing the call keyword arguments
        kwargs_26955 = {}
        # Getting the type of 'call_assignment_26217' (line 300)
        call_assignment_26217_26952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 12), 'call_assignment_26217', False)
        # Obtaining the member '__getitem__' of a type (line 300)
        getitem___26953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 300, 12), call_assignment_26217_26952, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_26956 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___26953, *[int_26954], **kwargs_26955)
        
        # Assigning a type to the variable 'call_assignment_26218' (line 300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 12), 'call_assignment_26218', getitem___call_result_26956)
        
        # Assigning a Name to a Name (line 300):
        # Getting the type of 'call_assignment_26218' (line 300)
        call_assignment_26218_26957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 12), 'call_assignment_26218')
        # Assigning a type to the variable 'width' (line 300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 12), 'width', call_assignment_26218_26957)
        
        # Assigning a Call to a Name (line 300):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_26960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 300, 12), 'int')
        # Processing the call keyword arguments
        kwargs_26961 = {}
        # Getting the type of 'call_assignment_26217' (line 300)
        call_assignment_26217_26958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 12), 'call_assignment_26217', False)
        # Obtaining the member '__getitem__' of a type (line 300)
        getitem___26959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 300, 12), call_assignment_26217_26958, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_26962 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___26959, *[int_26960], **kwargs_26961)
        
        # Assigning a type to the variable 'call_assignment_26219' (line 300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 12), 'call_assignment_26219', getitem___call_result_26962)
        
        # Assigning a Name to a Name (line 300):
        # Getting the type of 'call_assignment_26219' (line 300)
        call_assignment_26219_26963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 12), 'call_assignment_26219')
        # Assigning a type to the variable 'height' (line 300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 19), 'height', call_assignment_26219_26963)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'extents' (line 301)
        extents_26964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 16), 'extents')
        # Obtaining the member 'width' of a type (line 301)
        width_26965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 16), extents_26964, 'width')
        # Getting the type of 'width' (line 301)
        width_26966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 32), 'width')
        # Applying the binary operator '<' (line 301)
        result_lt_26967 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 16), '<', width_26965, width_26966)
        
        
        # Getting the type of 'extents' (line 302)
        extents_26968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 16), 'extents')
        # Obtaining the member 'height' of a type (line 302)
        height_26969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 16), extents_26968, 'height')
        # Getting the type of 'height' (line 302)
        height_26970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 33), 'height')
        # Applying the binary operator '<' (line 302)
        result_lt_26971 = python_operator(stypy.reporting.localization.Localization(__file__, 302, 16), '<', height_26969, height_26970)
        
        # Applying the binary operator 'and' (line 301)
        result_and_keyword_26972 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 16), 'and', result_lt_26967, result_lt_26971)
        
        # Testing the type of an if condition (line 301)
        if_condition_26973 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 301, 12), result_and_keyword_26972)
        # Assigning a type to the variable 'if_condition_26973' (line 301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 12), 'if_condition_26973', if_condition_26973)
        # SSA begins for if statement (line 301)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 303):
        
        # Assigning a Name to a Name (line 303):
        # Getting the type of 'True' (line 303)
        True_26974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 46), 'True')
        # Assigning a type to the variable 'do_single_path_optimization' (line 303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 303, 16), 'do_single_path_optimization', True_26974)
        # SSA join for if statement (line 301)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 288)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'do_single_path_optimization' (line 305)
        do_single_path_optimization_26975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 11), 'do_single_path_optimization')
        # Testing the type of an if condition (line 305)
        if_condition_26976 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 305, 8), do_single_path_optimization_26975)
        # Assigning a type to the variable 'if_condition_26976' (line 305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 8), 'if_condition_26976', if_condition_26976)
        # SSA begins for if statement (line 305)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_foreground(...): (line 306)
        # Processing the call arguments (line 306)
        
        # Call to tuple(...): (line 306)
        # Processing the call arguments (line 306)
        
        # Obtaining the type of the subscript
        int_26980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 306, 47), 'int')
        # Getting the type of 'edgecolors' (line 306)
        edgecolors_26981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 36), 'edgecolors', False)
        # Obtaining the member '__getitem__' of a type (line 306)
        getitem___26982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 36), edgecolors_26981, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 306)
        subscript_call_result_26983 = invoke(stypy.reporting.localization.Localization(__file__, 306, 36), getitem___26982, int_26980)
        
        # Processing the call keyword arguments (line 306)
        kwargs_26984 = {}
        # Getting the type of 'tuple' (line 306)
        tuple_26979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 30), 'tuple', False)
        # Calling tuple(args, kwargs) (line 306)
        tuple_call_result_26985 = invoke(stypy.reporting.localization.Localization(__file__, 306, 30), tuple_26979, *[subscript_call_result_26983], **kwargs_26984)
        
        # Processing the call keyword arguments (line 306)
        kwargs_26986 = {}
        # Getting the type of 'gc' (line 306)
        gc_26977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 12), 'gc', False)
        # Obtaining the member 'set_foreground' of a type (line 306)
        set_foreground_26978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 12), gc_26977, 'set_foreground')
        # Calling set_foreground(args, kwargs) (line 306)
        set_foreground_call_result_26987 = invoke(stypy.reporting.localization.Localization(__file__, 306, 12), set_foreground_26978, *[tuple_call_result_26985], **kwargs_26986)
        
        
        # Call to set_linewidth(...): (line 307)
        # Processing the call arguments (line 307)
        
        # Obtaining the type of the subscript
        int_26990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 307, 46), 'int')
        # Getting the type of 'self' (line 307)
        self_26991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 29), 'self', False)
        # Obtaining the member '_linewidths' of a type (line 307)
        _linewidths_26992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 307, 29), self_26991, '_linewidths')
        # Obtaining the member '__getitem__' of a type (line 307)
        getitem___26993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 307, 29), _linewidths_26992, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 307)
        subscript_call_result_26994 = invoke(stypy.reporting.localization.Localization(__file__, 307, 29), getitem___26993, int_26990)
        
        # Processing the call keyword arguments (line 307)
        kwargs_26995 = {}
        # Getting the type of 'gc' (line 307)
        gc_26988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 12), 'gc', False)
        # Obtaining the member 'set_linewidth' of a type (line 307)
        set_linewidth_26989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 307, 12), gc_26988, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 307)
        set_linewidth_call_result_26996 = invoke(stypy.reporting.localization.Localization(__file__, 307, 12), set_linewidth_26989, *[subscript_call_result_26994], **kwargs_26995)
        
        
        # Call to set_dashes(...): (line 308)
        
        # Obtaining the type of the subscript
        int_26999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 308, 44), 'int')
        # Getting the type of 'self' (line 308)
        self_27000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 27), 'self', False)
        # Obtaining the member '_linestyles' of a type (line 308)
        _linestyles_27001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 27), self_27000, '_linestyles')
        # Obtaining the member '__getitem__' of a type (line 308)
        getitem___27002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 27), _linestyles_27001, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 308)
        subscript_call_result_27003 = invoke(stypy.reporting.localization.Localization(__file__, 308, 27), getitem___27002, int_26999)
        
        # Processing the call keyword arguments (line 308)
        kwargs_27004 = {}
        # Getting the type of 'gc' (line 308)
        gc_26997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 12), 'gc', False)
        # Obtaining the member 'set_dashes' of a type (line 308)
        set_dashes_26998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 12), gc_26997, 'set_dashes')
        # Calling set_dashes(args, kwargs) (line 308)
        set_dashes_call_result_27005 = invoke(stypy.reporting.localization.Localization(__file__, 308, 12), set_dashes_26998, *[subscript_call_result_27003], **kwargs_27004)
        
        
        # Call to set_antialiased(...): (line 309)
        # Processing the call arguments (line 309)
        
        # Obtaining the type of the subscript
        int_27008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 309, 50), 'int')
        # Getting the type of 'self' (line 309)
        self_27009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 31), 'self', False)
        # Obtaining the member '_antialiaseds' of a type (line 309)
        _antialiaseds_27010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 31), self_27009, '_antialiaseds')
        # Obtaining the member '__getitem__' of a type (line 309)
        getitem___27011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 31), _antialiaseds_27010, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 309)
        subscript_call_result_27012 = invoke(stypy.reporting.localization.Localization(__file__, 309, 31), getitem___27011, int_27008)
        
        # Processing the call keyword arguments (line 309)
        kwargs_27013 = {}
        # Getting the type of 'gc' (line 309)
        gc_27006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 12), 'gc', False)
        # Obtaining the member 'set_antialiased' of a type (line 309)
        set_antialiased_27007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 12), gc_27006, 'set_antialiased')
        # Calling set_antialiased(args, kwargs) (line 309)
        set_antialiased_call_result_27014 = invoke(stypy.reporting.localization.Localization(__file__, 309, 12), set_antialiased_27007, *[subscript_call_result_27012], **kwargs_27013)
        
        
        # Call to set_url(...): (line 310)
        # Processing the call arguments (line 310)
        
        # Obtaining the type of the subscript
        int_27017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 310, 34), 'int')
        # Getting the type of 'self' (line 310)
        self_27018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 23), 'self', False)
        # Obtaining the member '_urls' of a type (line 310)
        _urls_27019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 23), self_27018, '_urls')
        # Obtaining the member '__getitem__' of a type (line 310)
        getitem___27020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 23), _urls_27019, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 310)
        subscript_call_result_27021 = invoke(stypy.reporting.localization.Localization(__file__, 310, 23), getitem___27020, int_27017)
        
        # Processing the call keyword arguments (line 310)
        kwargs_27022 = {}
        # Getting the type of 'gc' (line 310)
        gc_27015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 12), 'gc', False)
        # Obtaining the member 'set_url' of a type (line 310)
        set_url_27016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 12), gc_27015, 'set_url')
        # Calling set_url(args, kwargs) (line 310)
        set_url_call_result_27023 = invoke(stypy.reporting.localization.Localization(__file__, 310, 12), set_url_27016, *[subscript_call_result_27021], **kwargs_27022)
        
        
        # Call to draw_markers(...): (line 311)
        # Processing the call arguments (line 311)
        # Getting the type of 'gc' (line 312)
        gc_27026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 16), 'gc', False)
        
        # Obtaining the type of the subscript
        int_27027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, 26), 'int')
        # Getting the type of 'paths' (line 312)
        paths_27028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 20), 'paths', False)
        # Obtaining the member '__getitem__' of a type (line 312)
        getitem___27029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 312, 20), paths_27028, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 312)
        subscript_call_result_27030 = invoke(stypy.reporting.localization.Localization(__file__, 312, 20), getitem___27029, int_27027)
        
        
        # Call to frozen(...): (line 312)
        # Processing the call keyword arguments (line 312)
        kwargs_27033 = {}
        # Getting the type of 'combined_transform' (line 312)
        combined_transform_27031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 30), 'combined_transform', False)
        # Obtaining the member 'frozen' of a type (line 312)
        frozen_27032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 312, 30), combined_transform_27031, 'frozen')
        # Calling frozen(args, kwargs) (line 312)
        frozen_call_result_27034 = invoke(stypy.reporting.localization.Localization(__file__, 312, 30), frozen_27032, *[], **kwargs_27033)
        
        
        # Call to Path(...): (line 313)
        # Processing the call arguments (line 313)
        # Getting the type of 'offsets' (line 313)
        offsets_27037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 27), 'offsets', False)
        # Processing the call keyword arguments (line 313)
        kwargs_27038 = {}
        # Getting the type of 'mpath' (line 313)
        mpath_27035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 16), 'mpath', False)
        # Obtaining the member 'Path' of a type (line 313)
        Path_27036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 313, 16), mpath_27035, 'Path')
        # Calling Path(args, kwargs) (line 313)
        Path_call_result_27039 = invoke(stypy.reporting.localization.Localization(__file__, 313, 16), Path_27036, *[offsets_27037], **kwargs_27038)
        
        # Getting the type of 'transOffset' (line 313)
        transOffset_27040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 37), 'transOffset', False)
        
        # Call to tuple(...): (line 313)
        # Processing the call arguments (line 313)
        
        # Obtaining the type of the subscript
        int_27042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 313, 67), 'int')
        # Getting the type of 'facecolors' (line 313)
        facecolors_27043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 56), 'facecolors', False)
        # Obtaining the member '__getitem__' of a type (line 313)
        getitem___27044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 313, 56), facecolors_27043, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 313)
        subscript_call_result_27045 = invoke(stypy.reporting.localization.Localization(__file__, 313, 56), getitem___27044, int_27042)
        
        # Processing the call keyword arguments (line 313)
        kwargs_27046 = {}
        # Getting the type of 'tuple' (line 313)
        tuple_27041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 50), 'tuple', False)
        # Calling tuple(args, kwargs) (line 313)
        tuple_call_result_27047 = invoke(stypy.reporting.localization.Localization(__file__, 313, 50), tuple_27041, *[subscript_call_result_27045], **kwargs_27046)
        
        # Processing the call keyword arguments (line 311)
        kwargs_27048 = {}
        # Getting the type of 'renderer' (line 311)
        renderer_27024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 12), 'renderer', False)
        # Obtaining the member 'draw_markers' of a type (line 311)
        draw_markers_27025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 12), renderer_27024, 'draw_markers')
        # Calling draw_markers(args, kwargs) (line 311)
        draw_markers_call_result_27049 = invoke(stypy.reporting.localization.Localization(__file__, 311, 12), draw_markers_27025, *[gc_27026, subscript_call_result_27030, frozen_call_result_27034, Path_call_result_27039, transOffset_27040, tuple_call_result_27047], **kwargs_27048)
        
        # SSA branch for the else part of an if statement (line 305)
        module_type_store.open_ssa_branch('else')
        
        # Call to draw_path_collection(...): (line 315)
        # Processing the call arguments (line 315)
        # Getting the type of 'gc' (line 316)
        gc_27052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 16), 'gc', False)
        
        # Call to frozen(...): (line 316)
        # Processing the call keyword arguments (line 316)
        kwargs_27055 = {}
        # Getting the type of 'transform' (line 316)
        transform_27053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 20), 'transform', False)
        # Obtaining the member 'frozen' of a type (line 316)
        frozen_27054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 316, 20), transform_27053, 'frozen')
        # Calling frozen(args, kwargs) (line 316)
        frozen_call_result_27056 = invoke(stypy.reporting.localization.Localization(__file__, 316, 20), frozen_27054, *[], **kwargs_27055)
        
        # Getting the type of 'paths' (line 316)
        paths_27057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 40), 'paths', False)
        
        # Call to get_transforms(...): (line 317)
        # Processing the call keyword arguments (line 317)
        kwargs_27060 = {}
        # Getting the type of 'self' (line 317)
        self_27058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 16), 'self', False)
        # Obtaining the member 'get_transforms' of a type (line 317)
        get_transforms_27059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 317, 16), self_27058, 'get_transforms')
        # Calling get_transforms(args, kwargs) (line 317)
        get_transforms_call_result_27061 = invoke(stypy.reporting.localization.Localization(__file__, 317, 16), get_transforms_27059, *[], **kwargs_27060)
        
        # Getting the type of 'offsets' (line 317)
        offsets_27062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 39), 'offsets', False)
        # Getting the type of 'transOffset' (line 317)
        transOffset_27063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 48), 'transOffset', False)
        
        # Call to get_facecolor(...): (line 318)
        # Processing the call keyword arguments (line 318)
        kwargs_27066 = {}
        # Getting the type of 'self' (line 318)
        self_27064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 16), 'self', False)
        # Obtaining the member 'get_facecolor' of a type (line 318)
        get_facecolor_27065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 318, 16), self_27064, 'get_facecolor')
        # Calling get_facecolor(args, kwargs) (line 318)
        get_facecolor_call_result_27067 = invoke(stypy.reporting.localization.Localization(__file__, 318, 16), get_facecolor_27065, *[], **kwargs_27066)
        
        
        # Call to get_edgecolor(...): (line 318)
        # Processing the call keyword arguments (line 318)
        kwargs_27070 = {}
        # Getting the type of 'self' (line 318)
        self_27068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 38), 'self', False)
        # Obtaining the member 'get_edgecolor' of a type (line 318)
        get_edgecolor_27069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 318, 38), self_27068, 'get_edgecolor')
        # Calling get_edgecolor(args, kwargs) (line 318)
        get_edgecolor_call_result_27071 = invoke(stypy.reporting.localization.Localization(__file__, 318, 38), get_edgecolor_27069, *[], **kwargs_27070)
        
        # Getting the type of 'self' (line 319)
        self_27072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 16), 'self', False)
        # Obtaining the member '_linewidths' of a type (line 319)
        _linewidths_27073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 16), self_27072, '_linewidths')
        # Getting the type of 'self' (line 319)
        self_27074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 34), 'self', False)
        # Obtaining the member '_linestyles' of a type (line 319)
        _linestyles_27075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 34), self_27074, '_linestyles')
        # Getting the type of 'self' (line 320)
        self_27076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 16), 'self', False)
        # Obtaining the member '_antialiaseds' of a type (line 320)
        _antialiaseds_27077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 16), self_27076, '_antialiaseds')
        # Getting the type of 'self' (line 320)
        self_27078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 36), 'self', False)
        # Obtaining the member '_urls' of a type (line 320)
        _urls_27079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 36), self_27078, '_urls')
        # Getting the type of 'self' (line 321)
        self_27080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 16), 'self', False)
        # Obtaining the member '_offset_position' of a type (line 321)
        _offset_position_27081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 16), self_27080, '_offset_position')
        # Processing the call keyword arguments (line 315)
        kwargs_27082 = {}
        # Getting the type of 'renderer' (line 315)
        renderer_27050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 12), 'renderer', False)
        # Obtaining the member 'draw_path_collection' of a type (line 315)
        draw_path_collection_27051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 315, 12), renderer_27050, 'draw_path_collection')
        # Calling draw_path_collection(args, kwargs) (line 315)
        draw_path_collection_call_result_27083 = invoke(stypy.reporting.localization.Localization(__file__, 315, 12), draw_path_collection_27051, *[gc_27052, frozen_call_result_27056, paths_27057, get_transforms_call_result_27061, offsets_27062, transOffset_27063, get_facecolor_call_result_27067, get_edgecolor_call_result_27071, _linewidths_27073, _linestyles_27075, _antialiaseds_27077, _urls_27079, _offset_position_27081], **kwargs_27082)
        
        # SSA join for if statement (line 305)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to restore(...): (line 323)
        # Processing the call keyword arguments (line 323)
        kwargs_27086 = {}
        # Getting the type of 'gc' (line 323)
        gc_27084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 8), 'gc', False)
        # Obtaining the member 'restore' of a type (line 323)
        restore_27085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 8), gc_27084, 'restore')
        # Calling restore(args, kwargs) (line 323)
        restore_call_result_27087 = invoke(stypy.reporting.localization.Localization(__file__, 323, 8), restore_27085, *[], **kwargs_27086)
        
        
        # Call to close_group(...): (line 324)
        # Processing the call arguments (line 324)
        # Getting the type of 'self' (line 324)
        self_27090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 29), 'self', False)
        # Obtaining the member '__class__' of a type (line 324)
        class___27091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 29), self_27090, '__class__')
        # Obtaining the member '__name__' of a type (line 324)
        name___27092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 29), class___27091, '__name__')
        # Processing the call keyword arguments (line 324)
        kwargs_27093 = {}
        # Getting the type of 'renderer' (line 324)
        renderer_27088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 8), 'renderer', False)
        # Obtaining the member 'close_group' of a type (line 324)
        close_group_27089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 8), renderer_27088, 'close_group')
        # Calling close_group(args, kwargs) (line 324)
        close_group_call_result_27094 = invoke(stypy.reporting.localization.Localization(__file__, 324, 8), close_group_27089, *[name___27092], **kwargs_27093)
        
        
        # Assigning a Name to a Attribute (line 325):
        
        # Assigning a Name to a Attribute (line 325):
        # Getting the type of 'False' (line 325)
        False_27095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 21), 'False')
        # Getting the type of 'self' (line 325)
        self_27096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 325)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 8), self_27096, 'stale', False_27095)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 248)
        stypy_return_type_27097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27097)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_27097


    @norecursion
    def set_pickradius(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_pickradius'
        module_type_store = module_type_store.open_function_context('set_pickradius', 327, 4, False)
        # Assigning a type to the variable 'self' (line 328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 328, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_pickradius.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_pickradius.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_pickradius.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_pickradius.__dict__.__setitem__('stypy_function_name', 'Collection.set_pickradius')
        Collection.set_pickradius.__dict__.__setitem__('stypy_param_names_list', ['pr'])
        Collection.set_pickradius.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_pickradius.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_pickradius.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_pickradius.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_pickradius.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_pickradius.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_pickradius', ['pr'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_pickradius', localization, ['pr'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_pickradius(...)' code ##################

        
        # Assigning a Name to a Attribute (line 328):
        
        # Assigning a Name to a Attribute (line 328):
        # Getting the type of 'pr' (line 328)
        pr_27098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 27), 'pr')
        # Getting the type of 'self' (line 328)
        self_27099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 8), 'self')
        # Setting the type of the member '_pickradius' of a type (line 328)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 328, 8), self_27099, '_pickradius', pr_27098)
        
        # ################# End of 'set_pickradius(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_pickradius' in the type store
        # Getting the type of 'stypy_return_type' (line 327)
        stypy_return_type_27100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27100)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_pickradius'
        return stypy_return_type_27100


    @norecursion
    def get_pickradius(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_pickradius'
        module_type_store = module_type_store.open_function_context('get_pickradius', 330, 4, False)
        # Assigning a type to the variable 'self' (line 331)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 331, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.get_pickradius.__dict__.__setitem__('stypy_localization', localization)
        Collection.get_pickradius.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.get_pickradius.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.get_pickradius.__dict__.__setitem__('stypy_function_name', 'Collection.get_pickradius')
        Collection.get_pickradius.__dict__.__setitem__('stypy_param_names_list', [])
        Collection.get_pickradius.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.get_pickradius.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.get_pickradius.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.get_pickradius.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.get_pickradius.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.get_pickradius.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.get_pickradius', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_pickradius', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_pickradius(...)' code ##################

        # Getting the type of 'self' (line 331)
        self_27101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 15), 'self')
        # Obtaining the member '_pickradius' of a type (line 331)
        _pickradius_27102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 15), self_27101, '_pickradius')
        # Assigning a type to the variable 'stypy_return_type' (line 331)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 331, 8), 'stypy_return_type', _pickradius_27102)
        
        # ################# End of 'get_pickradius(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_pickradius' in the type store
        # Getting the type of 'stypy_return_type' (line 330)
        stypy_return_type_27103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27103)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_pickradius'
        return stypy_return_type_27103


    @norecursion
    def contains(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains'
        module_type_store = module_type_store.open_function_context('contains', 333, 4, False)
        # Assigning a type to the variable 'self' (line 334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.contains.__dict__.__setitem__('stypy_localization', localization)
        Collection.contains.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.contains.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.contains.__dict__.__setitem__('stypy_function_name', 'Collection.contains')
        Collection.contains.__dict__.__setitem__('stypy_param_names_list', ['mouseevent'])
        Collection.contains.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.contains.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.contains.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.contains.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.contains.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.contains.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.contains', ['mouseevent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains', localization, ['mouseevent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains(...)' code ##################

        unicode_27104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 339, (-1)), 'unicode', u'\n        Test whether the mouse event occurred in the collection.\n\n        Returns True | False, ``dict(ind=itemlist)``, where every\n        item in itemlist contains the event.\n        ')
        
        
        # Call to callable(...): (line 340)
        # Processing the call arguments (line 340)
        # Getting the type of 'self' (line 340)
        self_27106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 20), 'self', False)
        # Obtaining the member '_contains' of a type (line 340)
        _contains_27107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 20), self_27106, '_contains')
        # Processing the call keyword arguments (line 340)
        kwargs_27108 = {}
        # Getting the type of 'callable' (line 340)
        callable_27105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 11), 'callable', False)
        # Calling callable(args, kwargs) (line 340)
        callable_call_result_27109 = invoke(stypy.reporting.localization.Localization(__file__, 340, 11), callable_27105, *[_contains_27107], **kwargs_27108)
        
        # Testing the type of an if condition (line 340)
        if_condition_27110 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 340, 8), callable_call_result_27109)
        # Assigning a type to the variable 'if_condition_27110' (line 340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 340, 8), 'if_condition_27110', if_condition_27110)
        # SSA begins for if statement (line 340)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _contains(...): (line 341)
        # Processing the call arguments (line 341)
        # Getting the type of 'self' (line 341)
        self_27113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 34), 'self', False)
        # Getting the type of 'mouseevent' (line 341)
        mouseevent_27114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 40), 'mouseevent', False)
        # Processing the call keyword arguments (line 341)
        kwargs_27115 = {}
        # Getting the type of 'self' (line 341)
        self_27111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 19), 'self', False)
        # Obtaining the member '_contains' of a type (line 341)
        _contains_27112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 341, 19), self_27111, '_contains')
        # Calling _contains(args, kwargs) (line 341)
        _contains_call_result_27116 = invoke(stypy.reporting.localization.Localization(__file__, 341, 19), _contains_27112, *[self_27113, mouseevent_27114], **kwargs_27115)
        
        # Assigning a type to the variable 'stypy_return_type' (line 341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 341, 12), 'stypy_return_type', _contains_call_result_27116)
        # SSA join for if statement (line 340)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to get_visible(...): (line 343)
        # Processing the call keyword arguments (line 343)
        kwargs_27119 = {}
        # Getting the type of 'self' (line 343)
        self_27117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 343)
        get_visible_27118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 15), self_27117, 'get_visible')
        # Calling get_visible(args, kwargs) (line 343)
        get_visible_call_result_27120 = invoke(stypy.reporting.localization.Localization(__file__, 343, 15), get_visible_27118, *[], **kwargs_27119)
        
        # Applying the 'not' unary operator (line 343)
        result_not__27121 = python_operator(stypy.reporting.localization.Localization(__file__, 343, 11), 'not', get_visible_call_result_27120)
        
        # Testing the type of an if condition (line 343)
        if_condition_27122 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 343, 8), result_not__27121)
        # Assigning a type to the variable 'if_condition_27122' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 8), 'if_condition_27122', if_condition_27122)
        # SSA begins for if statement (line 343)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 344)
        tuple_27123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 344, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 344)
        # Adding element type (line 344)
        # Getting the type of 'False' (line 344)
        False_27124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 19), 'False')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 344, 19), tuple_27123, False_27124)
        # Adding element type (line 344)
        
        # Obtaining an instance of the builtin type 'dict' (line 344)
        dict_27125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 344, 26), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 344)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 344, 19), tuple_27123, dict_27125)
        
        # Assigning a type to the variable 'stypy_return_type' (line 344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 344, 12), 'stypy_return_type', tuple_27123)
        # SSA join for if statement (line 343)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a IfExp to a Name (line 346):
        
        # Assigning a IfExp to a Name (line 346):
        
        
        # Evaluating a boolean operation
        
        # Call to is_numlike(...): (line 348)
        # Processing the call arguments (line 348)
        # Getting the type of 'self' (line 348)
        self_27128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 32), 'self', False)
        # Obtaining the member '_picker' of a type (line 348)
        _picker_27129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 348, 32), self_27128, '_picker')
        # Processing the call keyword arguments (line 348)
        kwargs_27130 = {}
        # Getting the type of 'cbook' (line 348)
        cbook_27126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 15), 'cbook', False)
        # Obtaining the member 'is_numlike' of a type (line 348)
        is_numlike_27127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 348, 15), cbook_27126, 'is_numlike')
        # Calling is_numlike(args, kwargs) (line 348)
        is_numlike_call_result_27131 = invoke(stypy.reporting.localization.Localization(__file__, 348, 15), is_numlike_27127, *[_picker_27129], **kwargs_27130)
        
        
        # Getting the type of 'self' (line 349)
        self_27132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 15), 'self')
        # Obtaining the member '_picker' of a type (line 349)
        _picker_27133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 15), self_27132, '_picker')
        # Getting the type of 'True' (line 349)
        True_27134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 35), 'True')
        # Applying the binary operator 'isnot' (line 349)
        result_is_not_27135 = python_operator(stypy.reporting.localization.Localization(__file__, 349, 15), 'isnot', _picker_27133, True_27134)
        
        # Applying the binary operator 'and' (line 348)
        result_and_keyword_27136 = python_operator(stypy.reporting.localization.Localization(__file__, 348, 15), 'and', is_numlike_call_result_27131, result_is_not_27135)
        
        # Testing the type of an if expression (line 347)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 347, 12), result_and_keyword_27136)
        # SSA begins for if expression (line 347)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        
        # Call to float(...): (line 347)
        # Processing the call arguments (line 347)
        # Getting the type of 'self' (line 347)
        self_27138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 18), 'self', False)
        # Obtaining the member '_picker' of a type (line 347)
        _picker_27139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 347, 18), self_27138, '_picker')
        # Processing the call keyword arguments (line 347)
        kwargs_27140 = {}
        # Getting the type of 'float' (line 347)
        float_27137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 12), 'float', False)
        # Calling float(args, kwargs) (line 347)
        float_call_result_27141 = invoke(stypy.reporting.localization.Localization(__file__, 347, 12), float_27137, *[_picker_27139], **kwargs_27140)
        
        # SSA branch for the else part of an if expression (line 347)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of 'self' (line 350)
        self_27142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 17), 'self')
        # Obtaining the member '_pickradius' of a type (line 350)
        _pickradius_27143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 350, 17), self_27142, '_pickradius')
        # SSA join for if expression (line 347)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_27144 = union_type.UnionType.add(float_call_result_27141, _pickradius_27143)
        
        # Assigning a type to the variable 'pickradius' (line 346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 346, 8), 'pickradius', if_exp_27144)
        
        # Assigning a Call to a Tuple (line 352):
        
        # Assigning a Call to a Name:
        
        # Call to _prepare_points(...): (line 352)
        # Processing the call keyword arguments (line 352)
        kwargs_27147 = {}
        # Getting the type of 'self' (line 352)
        self_27145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 49), 'self', False)
        # Obtaining the member '_prepare_points' of a type (line 352)
        _prepare_points_27146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 49), self_27145, '_prepare_points')
        # Calling _prepare_points(args, kwargs) (line 352)
        _prepare_points_call_result_27148 = invoke(stypy.reporting.localization.Localization(__file__, 352, 49), _prepare_points_27146, *[], **kwargs_27147)
        
        # Assigning a type to the variable 'call_assignment_26220' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_26220', _prepare_points_call_result_27148)
        
        # Assigning a Call to a Name (line 352):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_27151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 8), 'int')
        # Processing the call keyword arguments
        kwargs_27152 = {}
        # Getting the type of 'call_assignment_26220' (line 352)
        call_assignment_26220_27149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_26220', False)
        # Obtaining the member '__getitem__' of a type (line 352)
        getitem___27150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 8), call_assignment_26220_27149, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_27153 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___27150, *[int_27151], **kwargs_27152)
        
        # Assigning a type to the variable 'call_assignment_26221' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_26221', getitem___call_result_27153)
        
        # Assigning a Name to a Name (line 352):
        # Getting the type of 'call_assignment_26221' (line 352)
        call_assignment_26221_27154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_26221')
        # Assigning a type to the variable 'transform' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'transform', call_assignment_26221_27154)
        
        # Assigning a Call to a Name (line 352):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_27157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 8), 'int')
        # Processing the call keyword arguments
        kwargs_27158 = {}
        # Getting the type of 'call_assignment_26220' (line 352)
        call_assignment_26220_27155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_26220', False)
        # Obtaining the member '__getitem__' of a type (line 352)
        getitem___27156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 8), call_assignment_26220_27155, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_27159 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___27156, *[int_27157], **kwargs_27158)
        
        # Assigning a type to the variable 'call_assignment_26222' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_26222', getitem___call_result_27159)
        
        # Assigning a Name to a Name (line 352):
        # Getting the type of 'call_assignment_26222' (line 352)
        call_assignment_26222_27160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_26222')
        # Assigning a type to the variable 'transOffset' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 19), 'transOffset', call_assignment_26222_27160)
        
        # Assigning a Call to a Name (line 352):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_27163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 8), 'int')
        # Processing the call keyword arguments
        kwargs_27164 = {}
        # Getting the type of 'call_assignment_26220' (line 352)
        call_assignment_26220_27161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_26220', False)
        # Obtaining the member '__getitem__' of a type (line 352)
        getitem___27162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 8), call_assignment_26220_27161, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_27165 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___27162, *[int_27163], **kwargs_27164)
        
        # Assigning a type to the variable 'call_assignment_26223' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_26223', getitem___call_result_27165)
        
        # Assigning a Name to a Name (line 352):
        # Getting the type of 'call_assignment_26223' (line 352)
        call_assignment_26223_27166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_26223')
        # Assigning a type to the variable 'offsets' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 32), 'offsets', call_assignment_26223_27166)
        
        # Assigning a Call to a Name (line 352):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_27169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 8), 'int')
        # Processing the call keyword arguments
        kwargs_27170 = {}
        # Getting the type of 'call_assignment_26220' (line 352)
        call_assignment_26220_27167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_26220', False)
        # Obtaining the member '__getitem__' of a type (line 352)
        getitem___27168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 8), call_assignment_26220_27167, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_27171 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___27168, *[int_27169], **kwargs_27170)
        
        # Assigning a type to the variable 'call_assignment_26224' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_26224', getitem___call_result_27171)
        
        # Assigning a Name to a Name (line 352):
        # Getting the type of 'call_assignment_26224' (line 352)
        call_assignment_26224_27172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'call_assignment_26224')
        # Assigning a type to the variable 'paths' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 41), 'paths', call_assignment_26224_27172)
        
        # Assigning a Call to a Name (line 354):
        
        # Assigning a Call to a Name (line 354):
        
        # Call to point_in_path_collection(...): (line 354)
        # Processing the call arguments (line 354)
        # Getting the type of 'mouseevent' (line 355)
        mouseevent_27175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 12), 'mouseevent', False)
        # Obtaining the member 'x' of a type (line 355)
        x_27176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 12), mouseevent_27175, 'x')
        # Getting the type of 'mouseevent' (line 355)
        mouseevent_27177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 26), 'mouseevent', False)
        # Obtaining the member 'y' of a type (line 355)
        y_27178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 26), mouseevent_27177, 'y')
        # Getting the type of 'pickradius' (line 355)
        pickradius_27179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 40), 'pickradius', False)
        
        # Call to frozen(...): (line 356)
        # Processing the call keyword arguments (line 356)
        kwargs_27182 = {}
        # Getting the type of 'transform' (line 356)
        transform_27180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 12), 'transform', False)
        # Obtaining the member 'frozen' of a type (line 356)
        frozen_27181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 12), transform_27180, 'frozen')
        # Calling frozen(args, kwargs) (line 356)
        frozen_call_result_27183 = invoke(stypy.reporting.localization.Localization(__file__, 356, 12), frozen_27181, *[], **kwargs_27182)
        
        # Getting the type of 'paths' (line 356)
        paths_27184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 32), 'paths', False)
        
        # Call to get_transforms(...): (line 356)
        # Processing the call keyword arguments (line 356)
        kwargs_27187 = {}
        # Getting the type of 'self' (line 356)
        self_27185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 39), 'self', False)
        # Obtaining the member 'get_transforms' of a type (line 356)
        get_transforms_27186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 39), self_27185, 'get_transforms')
        # Calling get_transforms(args, kwargs) (line 356)
        get_transforms_call_result_27188 = invoke(stypy.reporting.localization.Localization(__file__, 356, 39), get_transforms_27186, *[], **kwargs_27187)
        
        # Getting the type of 'offsets' (line 357)
        offsets_27189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 12), 'offsets', False)
        # Getting the type of 'transOffset' (line 357)
        transOffset_27190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 21), 'transOffset', False)
        
        # Getting the type of 'pickradius' (line 357)
        pickradius_27191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 34), 'pickradius', False)
        int_27192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 357, 48), 'int')
        # Applying the binary operator '<=' (line 357)
        result_le_27193 = python_operator(stypy.reporting.localization.Localization(__file__, 357, 34), '<=', pickradius_27191, int_27192)
        
        
        # Call to get_offset_position(...): (line 358)
        # Processing the call keyword arguments (line 358)
        kwargs_27196 = {}
        # Getting the type of 'self' (line 358)
        self_27194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 12), 'self', False)
        # Obtaining the member 'get_offset_position' of a type (line 358)
        get_offset_position_27195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 358, 12), self_27194, 'get_offset_position')
        # Calling get_offset_position(args, kwargs) (line 358)
        get_offset_position_call_result_27197 = invoke(stypy.reporting.localization.Localization(__file__, 358, 12), get_offset_position_27195, *[], **kwargs_27196)
        
        # Processing the call keyword arguments (line 354)
        kwargs_27198 = {}
        # Getting the type of '_path' (line 354)
        _path_27173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 14), '_path', False)
        # Obtaining the member 'point_in_path_collection' of a type (line 354)
        point_in_path_collection_27174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 354, 14), _path_27173, 'point_in_path_collection')
        # Calling point_in_path_collection(args, kwargs) (line 354)
        point_in_path_collection_call_result_27199 = invoke(stypy.reporting.localization.Localization(__file__, 354, 14), point_in_path_collection_27174, *[x_27176, y_27178, pickradius_27179, frozen_call_result_27183, paths_27184, get_transforms_call_result_27188, offsets_27189, transOffset_27190, result_le_27193, get_offset_position_call_result_27197], **kwargs_27198)
        
        # Assigning a type to the variable 'ind' (line 354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 8), 'ind', point_in_path_collection_call_result_27199)
        
        # Obtaining an instance of the builtin type 'tuple' (line 360)
        tuple_27200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 360, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 360)
        # Adding element type (line 360)
        
        
        # Call to len(...): (line 360)
        # Processing the call arguments (line 360)
        # Getting the type of 'ind' (line 360)
        ind_27202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 19), 'ind', False)
        # Processing the call keyword arguments (line 360)
        kwargs_27203 = {}
        # Getting the type of 'len' (line 360)
        len_27201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 15), 'len', False)
        # Calling len(args, kwargs) (line 360)
        len_call_result_27204 = invoke(stypy.reporting.localization.Localization(__file__, 360, 15), len_27201, *[ind_27202], **kwargs_27203)
        
        int_27205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 360, 26), 'int')
        # Applying the binary operator '>' (line 360)
        result_gt_27206 = python_operator(stypy.reporting.localization.Localization(__file__, 360, 15), '>', len_call_result_27204, int_27205)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 360, 15), tuple_27200, result_gt_27206)
        # Adding element type (line 360)
        
        # Call to dict(...): (line 360)
        # Processing the call keyword arguments (line 360)
        # Getting the type of 'ind' (line 360)
        ind_27208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 38), 'ind', False)
        keyword_27209 = ind_27208
        kwargs_27210 = {'ind': keyword_27209}
        # Getting the type of 'dict' (line 360)
        dict_27207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 29), 'dict', False)
        # Calling dict(args, kwargs) (line 360)
        dict_call_result_27211 = invoke(stypy.reporting.localization.Localization(__file__, 360, 29), dict_27207, *[], **kwargs_27210)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 360, 15), tuple_27200, dict_call_result_27211)
        
        # Assigning a type to the variable 'stypy_return_type' (line 360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 8), 'stypy_return_type', tuple_27200)
        
        # ################# End of 'contains(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains' in the type store
        # Getting the type of 'stypy_return_type' (line 333)
        stypy_return_type_27212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27212)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains'
        return stypy_return_type_27212


    @norecursion
    def set_urls(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_urls'
        module_type_store = module_type_store.open_function_context('set_urls', 362, 4, False)
        # Assigning a type to the variable 'self' (line 363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_urls.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_urls.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_urls.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_urls.__dict__.__setitem__('stypy_function_name', 'Collection.set_urls')
        Collection.set_urls.__dict__.__setitem__('stypy_param_names_list', ['urls'])
        Collection.set_urls.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_urls.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_urls.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_urls.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_urls.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_urls.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_urls', ['urls'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_urls', localization, ['urls'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_urls(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 363)
        # Getting the type of 'urls' (line 363)
        urls_27213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 11), 'urls')
        # Getting the type of 'None' (line 363)
        None_27214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 19), 'None')
        
        (may_be_27215, more_types_in_union_27216) = may_be_none(urls_27213, None_27214)

        if may_be_27215:

            if more_types_in_union_27216:
                # Runtime conditional SSA (line 363)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a List to a Attribute (line 364):
            
            # Assigning a List to a Attribute (line 364):
            
            # Obtaining an instance of the builtin type 'list' (line 364)
            list_27217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 364, 25), 'list')
            # Adding type elements to the builtin type 'list' instance (line 364)
            # Adding element type (line 364)
            # Getting the type of 'None' (line 364)
            None_27218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 26), 'None')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 364, 25), list_27217, None_27218)
            
            # Getting the type of 'self' (line 364)
            self_27219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 12), 'self')
            # Setting the type of the member '_urls' of a type (line 364)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 12), self_27219, '_urls', list_27217)

            if more_types_in_union_27216:
                # Runtime conditional SSA for else branch (line 363)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_27215) or more_types_in_union_27216):
            
            # Assigning a Name to a Attribute (line 366):
            
            # Assigning a Name to a Attribute (line 366):
            # Getting the type of 'urls' (line 366)
            urls_27220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 25), 'urls')
            # Getting the type of 'self' (line 366)
            self_27221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 12), 'self')
            # Setting the type of the member '_urls' of a type (line 366)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 12), self_27221, '_urls', urls_27220)

            if (may_be_27215 and more_types_in_union_27216):
                # SSA join for if statement (line 363)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 367):
        
        # Assigning a Name to a Attribute (line 367):
        # Getting the type of 'True' (line 367)
        True_27222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 21), 'True')
        # Getting the type of 'self' (line 367)
        self_27223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 367)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 8), self_27223, 'stale', True_27222)
        
        # ################# End of 'set_urls(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_urls' in the type store
        # Getting the type of 'stypy_return_type' (line 362)
        stypy_return_type_27224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27224)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_urls'
        return stypy_return_type_27224


    @norecursion
    def get_urls(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_urls'
        module_type_store = module_type_store.open_function_context('get_urls', 369, 4, False)
        # Assigning a type to the variable 'self' (line 370)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.get_urls.__dict__.__setitem__('stypy_localization', localization)
        Collection.get_urls.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.get_urls.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.get_urls.__dict__.__setitem__('stypy_function_name', 'Collection.get_urls')
        Collection.get_urls.__dict__.__setitem__('stypy_param_names_list', [])
        Collection.get_urls.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.get_urls.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.get_urls.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.get_urls.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.get_urls.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.get_urls.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.get_urls', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_urls', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_urls(...)' code ##################

        # Getting the type of 'self' (line 370)
        self_27225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 15), 'self')
        # Obtaining the member '_urls' of a type (line 370)
        _urls_27226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 15), self_27225, '_urls')
        # Assigning a type to the variable 'stypy_return_type' (line 370)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 8), 'stypy_return_type', _urls_27226)
        
        # ################# End of 'get_urls(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_urls' in the type store
        # Getting the type of 'stypy_return_type' (line 369)
        stypy_return_type_27227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27227)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_urls'
        return stypy_return_type_27227


    @norecursion
    def set_hatch(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_hatch'
        module_type_store = module_type_store.open_function_context('set_hatch', 372, 4, False)
        # Assigning a type to the variable 'self' (line 373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_hatch.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_hatch.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_hatch.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_hatch.__dict__.__setitem__('stypy_function_name', 'Collection.set_hatch')
        Collection.set_hatch.__dict__.__setitem__('stypy_param_names_list', ['hatch'])
        Collection.set_hatch.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_hatch.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_hatch.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_hatch.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_hatch.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_hatch.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_hatch', ['hatch'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_hatch', localization, ['hatch'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_hatch(...)' code ##################

        unicode_27228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 401, (-1)), 'unicode', u"\n        Set the hatching pattern\n\n        *hatch* can be one of::\n\n          /   - diagonal hatching\n          \\   - back diagonal\n          |   - vertical\n          -   - horizontal\n          +   - crossed\n          x   - crossed diagonal\n          o   - small circle\n          O   - large circle\n          .   - dots\n          *   - stars\n\n        Letters can be combined, in which case all the specified\n        hatchings are done.  If same letter repeats, it increases the\n        density of hatching of that pattern.\n\n        Hatching is supported in the PostScript, PDF, SVG and Agg\n        backends only.\n\n        Unlike other properties such as linewidth and colors, hatching\n        can only be specified for the collection as a whole, not separately\n        for each member.\n\n        ACCEPTS: [ '/' | '\\\\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*' ]\n        ")
        
        # Assigning a Name to a Attribute (line 402):
        
        # Assigning a Name to a Attribute (line 402):
        # Getting the type of 'hatch' (line 402)
        hatch_27229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 22), 'hatch')
        # Getting the type of 'self' (line 402)
        self_27230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 8), 'self')
        # Setting the type of the member '_hatch' of a type (line 402)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 8), self_27230, '_hatch', hatch_27229)
        
        # Assigning a Name to a Attribute (line 403):
        
        # Assigning a Name to a Attribute (line 403):
        # Getting the type of 'True' (line 403)
        True_27231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 21), 'True')
        # Getting the type of 'self' (line 403)
        self_27232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 403)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 8), self_27232, 'stale', True_27231)
        
        # ################# End of 'set_hatch(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_hatch' in the type store
        # Getting the type of 'stypy_return_type' (line 372)
        stypy_return_type_27233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27233)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_hatch'
        return stypy_return_type_27233


    @norecursion
    def get_hatch(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_hatch'
        module_type_store = module_type_store.open_function_context('get_hatch', 405, 4, False)
        # Assigning a type to the variable 'self' (line 406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 406, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.get_hatch.__dict__.__setitem__('stypy_localization', localization)
        Collection.get_hatch.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.get_hatch.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.get_hatch.__dict__.__setitem__('stypy_function_name', 'Collection.get_hatch')
        Collection.get_hatch.__dict__.__setitem__('stypy_param_names_list', [])
        Collection.get_hatch.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.get_hatch.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.get_hatch.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.get_hatch.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.get_hatch.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.get_hatch.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.get_hatch', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_hatch', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_hatch(...)' code ##################

        unicode_27234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 406, 8), 'unicode', u'Return the current hatching pattern.')
        # Getting the type of 'self' (line 407)
        self_27235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 15), 'self')
        # Obtaining the member '_hatch' of a type (line 407)
        _hatch_27236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 407, 15), self_27235, '_hatch')
        # Assigning a type to the variable 'stypy_return_type' (line 407)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 407, 8), 'stypy_return_type', _hatch_27236)
        
        # ################# End of 'get_hatch(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_hatch' in the type store
        # Getting the type of 'stypy_return_type' (line 405)
        stypy_return_type_27237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27237)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_hatch'
        return stypy_return_type_27237


    @norecursion
    def set_offsets(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_offsets'
        module_type_store = module_type_store.open_function_context('set_offsets', 409, 4, False)
        # Assigning a type to the variable 'self' (line 410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_offsets.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_offsets.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_offsets.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_offsets.__dict__.__setitem__('stypy_function_name', 'Collection.set_offsets')
        Collection.set_offsets.__dict__.__setitem__('stypy_param_names_list', ['offsets'])
        Collection.set_offsets.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_offsets.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_offsets.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_offsets.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_offsets.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_offsets.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_offsets', ['offsets'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_offsets', localization, ['offsets'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_offsets(...)' code ##################

        unicode_27238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 415, (-1)), 'unicode', u'\n        Set the offsets for the collection.  *offsets* can be a scalar\n        or a sequence.\n\n        ACCEPTS: float or sequence of floats\n        ')
        
        # Assigning a Call to a Name (line 416):
        
        # Assigning a Call to a Name (line 416):
        
        # Call to asanyarray(...): (line 416)
        # Processing the call arguments (line 416)
        # Getting the type of 'offsets' (line 416)
        offsets_27241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 32), 'offsets', False)
        # Getting the type of 'float' (line 416)
        float_27242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 41), 'float', False)
        # Processing the call keyword arguments (line 416)
        kwargs_27243 = {}
        # Getting the type of 'np' (line 416)
        np_27239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 18), 'np', False)
        # Obtaining the member 'asanyarray' of a type (line 416)
        asanyarray_27240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 416, 18), np_27239, 'asanyarray')
        # Calling asanyarray(args, kwargs) (line 416)
        asanyarray_call_result_27244 = invoke(stypy.reporting.localization.Localization(__file__, 416, 18), asanyarray_27240, *[offsets_27241, float_27242], **kwargs_27243)
        
        # Assigning a type to the variable 'offsets' (line 416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 416, 8), 'offsets', asanyarray_call_result_27244)
        
        
        # Getting the type of 'offsets' (line 417)
        offsets_27245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 11), 'offsets')
        # Obtaining the member 'shape' of a type (line 417)
        shape_27246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 417, 11), offsets_27245, 'shape')
        
        # Obtaining an instance of the builtin type 'tuple' (line 417)
        tuple_27247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 417)
        # Adding element type (line 417)
        int_27248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 417, 29), tuple_27247, int_27248)
        
        # Applying the binary operator '==' (line 417)
        result_eq_27249 = python_operator(stypy.reporting.localization.Localization(__file__, 417, 11), '==', shape_27246, tuple_27247)
        
        # Testing the type of an if condition (line 417)
        if_condition_27250 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 417, 8), result_eq_27249)
        # Assigning a type to the variable 'if_condition_27250' (line 417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 417, 8), 'if_condition_27250', if_condition_27250)
        # SSA begins for if statement (line 417)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 418):
        
        # Assigning a Subscript to a Name (line 418):
        
        # Obtaining the type of the subscript
        # Getting the type of 'None' (line 418)
        None_27251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 30), 'None')
        slice_27252 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 418, 22), None, None, None)
        # Getting the type of 'offsets' (line 418)
        offsets_27253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 22), 'offsets')
        # Obtaining the member '__getitem__' of a type (line 418)
        getitem___27254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 22), offsets_27253, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 418)
        subscript_call_result_27255 = invoke(stypy.reporting.localization.Localization(__file__, 418, 22), getitem___27254, (None_27251, slice_27252))
        
        # Assigning a type to the variable 'offsets' (line 418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 12), 'offsets', subscript_call_result_27255)
        # SSA join for if statement (line 417)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 420)
        # Getting the type of 'self' (line 420)
        self_27256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 11), 'self')
        # Obtaining the member '_uniform_offsets' of a type (line 420)
        _uniform_offsets_27257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 11), self_27256, '_uniform_offsets')
        # Getting the type of 'None' (line 420)
        None_27258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 36), 'None')
        
        (may_be_27259, more_types_in_union_27260) = may_be_none(_uniform_offsets_27257, None_27258)

        if may_be_27259:

            if more_types_in_union_27260:
                # Runtime conditional SSA (line 420)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 421):
            
            # Assigning a Name to a Attribute (line 421):
            # Getting the type of 'offsets' (line 421)
            offsets_27261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 28), 'offsets')
            # Getting the type of 'self' (line 421)
            self_27262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 12), 'self')
            # Setting the type of the member '_offsets' of a type (line 421)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 421, 12), self_27262, '_offsets', offsets_27261)

            if more_types_in_union_27260:
                # Runtime conditional SSA for else branch (line 420)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_27259) or more_types_in_union_27260):
            
            # Assigning a Name to a Attribute (line 423):
            
            # Assigning a Name to a Attribute (line 423):
            # Getting the type of 'offsets' (line 423)
            offsets_27263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 36), 'offsets')
            # Getting the type of 'self' (line 423)
            self_27264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 12), 'self')
            # Setting the type of the member '_uniform_offsets' of a type (line 423)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 12), self_27264, '_uniform_offsets', offsets_27263)

            if (may_be_27259 and more_types_in_union_27260):
                # SSA join for if statement (line 420)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 424):
        
        # Assigning a Name to a Attribute (line 424):
        # Getting the type of 'True' (line 424)
        True_27265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 21), 'True')
        # Getting the type of 'self' (line 424)
        self_27266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 424)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 424, 8), self_27266, 'stale', True_27265)
        
        # ################# End of 'set_offsets(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_offsets' in the type store
        # Getting the type of 'stypy_return_type' (line 409)
        stypy_return_type_27267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27267)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_offsets'
        return stypy_return_type_27267


    @norecursion
    def get_offsets(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_offsets'
        module_type_store = module_type_store.open_function_context('get_offsets', 426, 4, False)
        # Assigning a type to the variable 'self' (line 427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.get_offsets.__dict__.__setitem__('stypy_localization', localization)
        Collection.get_offsets.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.get_offsets.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.get_offsets.__dict__.__setitem__('stypy_function_name', 'Collection.get_offsets')
        Collection.get_offsets.__dict__.__setitem__('stypy_param_names_list', [])
        Collection.get_offsets.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.get_offsets.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.get_offsets.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.get_offsets.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.get_offsets.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.get_offsets.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.get_offsets', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_offsets', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_offsets(...)' code ##################

        unicode_27268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 427, 8), 'unicode', u'Return the offsets for the collection.')
        
        # Type idiom detected: calculating its left and rigth part (line 429)
        # Getting the type of 'self' (line 429)
        self_27269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 11), 'self')
        # Obtaining the member '_uniform_offsets' of a type (line 429)
        _uniform_offsets_27270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 429, 11), self_27269, '_uniform_offsets')
        # Getting the type of 'None' (line 429)
        None_27271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 36), 'None')
        
        (may_be_27272, more_types_in_union_27273) = may_be_none(_uniform_offsets_27270, None_27271)

        if may_be_27272:

            if more_types_in_union_27273:
                # Runtime conditional SSA (line 429)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'self' (line 430)
            self_27274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 19), 'self')
            # Obtaining the member '_offsets' of a type (line 430)
            _offsets_27275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 19), self_27274, '_offsets')
            # Assigning a type to the variable 'stypy_return_type' (line 430)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 430, 12), 'stypy_return_type', _offsets_27275)

            if more_types_in_union_27273:
                # Runtime conditional SSA for else branch (line 429)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_27272) or more_types_in_union_27273):
            # Getting the type of 'self' (line 432)
            self_27276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 19), 'self')
            # Obtaining the member '_uniform_offsets' of a type (line 432)
            _uniform_offsets_27277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 432, 19), self_27276, '_uniform_offsets')
            # Assigning a type to the variable 'stypy_return_type' (line 432)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 12), 'stypy_return_type', _uniform_offsets_27277)

            if (may_be_27272 and more_types_in_union_27273):
                # SSA join for if statement (line 429)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'get_offsets(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_offsets' in the type store
        # Getting the type of 'stypy_return_type' (line 426)
        stypy_return_type_27278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27278)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_offsets'
        return stypy_return_type_27278


    @norecursion
    def set_offset_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_offset_position'
        module_type_store = module_type_store.open_function_context('set_offset_position', 434, 4, False)
        # Assigning a type to the variable 'self' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_offset_position.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_offset_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_offset_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_offset_position.__dict__.__setitem__('stypy_function_name', 'Collection.set_offset_position')
        Collection.set_offset_position.__dict__.__setitem__('stypy_param_names_list', ['offset_position'])
        Collection.set_offset_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_offset_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_offset_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_offset_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_offset_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_offset_position.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_offset_position', ['offset_position'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_offset_position', localization, ['offset_position'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_offset_position(...)' code ##################

        unicode_27279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 441, (-1)), 'unicode', u"\n        Set how offsets are applied.  If *offset_position* is 'screen'\n        (default) the offset is applied after the master transform has\n        been applied, that is, the offsets are in screen coordinates.\n        If offset_position is 'data', the offset is applied before the\n        master transform, i.e., the offsets are in data coordinates.\n        ")
        
        
        # Getting the type of 'offset_position' (line 442)
        offset_position_27280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 11), 'offset_position')
        
        # Obtaining an instance of the builtin type 'tuple' (line 442)
        tuple_27281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 442, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 442)
        # Adding element type (line 442)
        unicode_27282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 442, 35), 'unicode', u'screen')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 442, 35), tuple_27281, unicode_27282)
        # Adding element type (line 442)
        unicode_27283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 442, 45), 'unicode', u'data')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 442, 35), tuple_27281, unicode_27283)
        
        # Applying the binary operator 'notin' (line 442)
        result_contains_27284 = python_operator(stypy.reporting.localization.Localization(__file__, 442, 11), 'notin', offset_position_27280, tuple_27281)
        
        # Testing the type of an if condition (line 442)
        if_condition_27285 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 442, 8), result_contains_27284)
        # Assigning a type to the variable 'if_condition_27285' (line 442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 442, 8), 'if_condition_27285', if_condition_27285)
        # SSA begins for if statement (line 442)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 443)
        # Processing the call arguments (line 443)
        unicode_27287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 443, 29), 'unicode', u"offset_position must be 'screen' or 'data'")
        # Processing the call keyword arguments (line 443)
        kwargs_27288 = {}
        # Getting the type of 'ValueError' (line 443)
        ValueError_27286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 443)
        ValueError_call_result_27289 = invoke(stypy.reporting.localization.Localization(__file__, 443, 18), ValueError_27286, *[unicode_27287], **kwargs_27288)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 443, 12), ValueError_call_result_27289, 'raise parameter', BaseException)
        # SSA join for if statement (line 442)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 444):
        
        # Assigning a Name to a Attribute (line 444):
        # Getting the type of 'offset_position' (line 444)
        offset_position_27290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 32), 'offset_position')
        # Getting the type of 'self' (line 444)
        self_27291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 8), 'self')
        # Setting the type of the member '_offset_position' of a type (line 444)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 8), self_27291, '_offset_position', offset_position_27290)
        
        # Assigning a Name to a Attribute (line 445):
        
        # Assigning a Name to a Attribute (line 445):
        # Getting the type of 'True' (line 445)
        True_27292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 21), 'True')
        # Getting the type of 'self' (line 445)
        self_27293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 445)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 8), self_27293, 'stale', True_27292)
        
        # ################# End of 'set_offset_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_offset_position' in the type store
        # Getting the type of 'stypy_return_type' (line 434)
        stypy_return_type_27294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27294)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_offset_position'
        return stypy_return_type_27294


    @norecursion
    def get_offset_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_offset_position'
        module_type_store = module_type_store.open_function_context('get_offset_position', 447, 4, False)
        # Assigning a type to the variable 'self' (line 448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.get_offset_position.__dict__.__setitem__('stypy_localization', localization)
        Collection.get_offset_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.get_offset_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.get_offset_position.__dict__.__setitem__('stypy_function_name', 'Collection.get_offset_position')
        Collection.get_offset_position.__dict__.__setitem__('stypy_param_names_list', [])
        Collection.get_offset_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.get_offset_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.get_offset_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.get_offset_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.get_offset_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.get_offset_position.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.get_offset_position', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_offset_position', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_offset_position(...)' code ##################

        unicode_27295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 455, (-1)), 'unicode', u"\n        Returns how offsets are applied for the collection.  If\n        *offset_position* is 'screen', the offset is applied after the\n        master transform has been applied, that is, the offsets are in\n        screen coordinates.  If offset_position is 'data', the offset\n        is applied before the master transform, i.e., the offsets are\n        in data coordinates.\n        ")
        # Getting the type of 'self' (line 456)
        self_27296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 15), 'self')
        # Obtaining the member '_offset_position' of a type (line 456)
        _offset_position_27297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 456, 15), self_27296, '_offset_position')
        # Assigning a type to the variable 'stypy_return_type' (line 456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 456, 8), 'stypy_return_type', _offset_position_27297)
        
        # ################# End of 'get_offset_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_offset_position' in the type store
        # Getting the type of 'stypy_return_type' (line 447)
        stypy_return_type_27298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27298)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_offset_position'
        return stypy_return_type_27298


    @norecursion
    def set_linewidth(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_linewidth'
        module_type_store = module_type_store.open_function_context('set_linewidth', 458, 4, False)
        # Assigning a type to the variable 'self' (line 459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 459, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_linewidth.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_linewidth.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_linewidth.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_linewidth.__dict__.__setitem__('stypy_function_name', 'Collection.set_linewidth')
        Collection.set_linewidth.__dict__.__setitem__('stypy_param_names_list', ['lw'])
        Collection.set_linewidth.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_linewidth.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_linewidth.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_linewidth.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_linewidth.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_linewidth.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_linewidth', ['lw'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_linewidth', localization, ['lw'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_linewidth(...)' code ##################

        unicode_27299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 465, (-1)), 'unicode', u'\n        Set the linewidth(s) for the collection.  *lw* can be a scalar\n        or a sequence; if it is a sequence the patches will cycle\n        through the sequence\n\n        ACCEPTS: float or sequence of floats\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 466)
        # Getting the type of 'lw' (line 466)
        lw_27300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 11), 'lw')
        # Getting the type of 'None' (line 466)
        None_27301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 17), 'None')
        
        (may_be_27302, more_types_in_union_27303) = may_be_none(lw_27300, None_27301)

        if may_be_27302:

            if more_types_in_union_27303:
                # Runtime conditional SSA (line 466)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 467):
            
            # Assigning a Subscript to a Name (line 467):
            
            # Obtaining the type of the subscript
            unicode_27304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 467, 30), 'unicode', u'patch.linewidth')
            # Getting the type of 'mpl' (line 467)
            mpl_27305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 17), 'mpl')
            # Obtaining the member 'rcParams' of a type (line 467)
            rcParams_27306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 17), mpl_27305, 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 467)
            getitem___27307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 17), rcParams_27306, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 467)
            subscript_call_result_27308 = invoke(stypy.reporting.localization.Localization(__file__, 467, 17), getitem___27307, unicode_27304)
            
            # Assigning a type to the variable 'lw' (line 467)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 467, 12), 'lw', subscript_call_result_27308)
            
            # Type idiom detected: calculating its left and rigth part (line 468)
            # Getting the type of 'lw' (line 468)
            lw_27309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 15), 'lw')
            # Getting the type of 'None' (line 468)
            None_27310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 21), 'None')
            
            (may_be_27311, more_types_in_union_27312) = may_be_none(lw_27309, None_27310)

            if may_be_27311:

                if more_types_in_union_27312:
                    # Runtime conditional SSA (line 468)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a Subscript to a Name (line 469):
                
                # Assigning a Subscript to a Name (line 469):
                
                # Obtaining the type of the subscript
                unicode_27313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 34), 'unicode', u'lines.linewidth')
                # Getting the type of 'mpl' (line 469)
                mpl_27314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 21), 'mpl')
                # Obtaining the member 'rcParams' of a type (line 469)
                rcParams_27315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 21), mpl_27314, 'rcParams')
                # Obtaining the member '__getitem__' of a type (line 469)
                getitem___27316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 21), rcParams_27315, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 469)
                subscript_call_result_27317 = invoke(stypy.reporting.localization.Localization(__file__, 469, 21), getitem___27316, unicode_27313)
                
                # Assigning a type to the variable 'lw' (line 469)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 16), 'lw', subscript_call_result_27317)

                if more_types_in_union_27312:
                    # SSA join for if statement (line 468)
                    module_type_store = module_type_store.join_ssa_context()


            

            if more_types_in_union_27303:
                # SSA join for if statement (line 466)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 471):
        
        # Assigning a Call to a Attribute (line 471):
        
        # Call to atleast_1d(...): (line 471)
        # Processing the call arguments (line 471)
        
        # Call to asarray(...): (line 471)
        # Processing the call arguments (line 471)
        # Getting the type of 'lw' (line 471)
        lw_27322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 47), 'lw', False)
        # Processing the call keyword arguments (line 471)
        kwargs_27323 = {}
        # Getting the type of 'np' (line 471)
        np_27320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 36), 'np', False)
        # Obtaining the member 'asarray' of a type (line 471)
        asarray_27321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 36), np_27320, 'asarray')
        # Calling asarray(args, kwargs) (line 471)
        asarray_call_result_27324 = invoke(stypy.reporting.localization.Localization(__file__, 471, 36), asarray_27321, *[lw_27322], **kwargs_27323)
        
        # Processing the call keyword arguments (line 471)
        kwargs_27325 = {}
        # Getting the type of 'np' (line 471)
        np_27318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 22), 'np', False)
        # Obtaining the member 'atleast_1d' of a type (line 471)
        atleast_1d_27319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 22), np_27318, 'atleast_1d')
        # Calling atleast_1d(args, kwargs) (line 471)
        atleast_1d_call_result_27326 = invoke(stypy.reporting.localization.Localization(__file__, 471, 22), atleast_1d_27319, *[asarray_call_result_27324], **kwargs_27325)
        
        # Getting the type of 'self' (line 471)
        self_27327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 8), 'self')
        # Setting the type of the member '_us_lw' of a type (line 471)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 8), self_27327, '_us_lw', atleast_1d_call_result_27326)
        
        # Assigning a Call to a Tuple (line 474):
        
        # Assigning a Call to a Name:
        
        # Call to _bcast_lwls(...): (line 474)
        # Processing the call arguments (line 474)
        # Getting the type of 'self' (line 475)
        self_27330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 12), 'self', False)
        # Obtaining the member '_us_lw' of a type (line 475)
        _us_lw_27331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 12), self_27330, '_us_lw')
        # Getting the type of 'self' (line 475)
        self_27332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 25), 'self', False)
        # Obtaining the member '_us_linestyles' of a type (line 475)
        _us_linestyles_27333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 25), self_27332, '_us_linestyles')
        # Processing the call keyword arguments (line 474)
        kwargs_27334 = {}
        # Getting the type of 'self' (line 474)
        self_27328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 45), 'self', False)
        # Obtaining the member '_bcast_lwls' of a type (line 474)
        _bcast_lwls_27329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 45), self_27328, '_bcast_lwls')
        # Calling _bcast_lwls(args, kwargs) (line 474)
        _bcast_lwls_call_result_27335 = invoke(stypy.reporting.localization.Localization(__file__, 474, 45), _bcast_lwls_27329, *[_us_lw_27331, _us_linestyles_27333], **kwargs_27334)
        
        # Assigning a type to the variable 'call_assignment_26225' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'call_assignment_26225', _bcast_lwls_call_result_27335)
        
        # Assigning a Call to a Name (line 474):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_27338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 8), 'int')
        # Processing the call keyword arguments
        kwargs_27339 = {}
        # Getting the type of 'call_assignment_26225' (line 474)
        call_assignment_26225_27336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'call_assignment_26225', False)
        # Obtaining the member '__getitem__' of a type (line 474)
        getitem___27337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 8), call_assignment_26225_27336, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_27340 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___27337, *[int_27338], **kwargs_27339)
        
        # Assigning a type to the variable 'call_assignment_26226' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'call_assignment_26226', getitem___call_result_27340)
        
        # Assigning a Name to a Attribute (line 474):
        # Getting the type of 'call_assignment_26226' (line 474)
        call_assignment_26226_27341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'call_assignment_26226')
        # Getting the type of 'self' (line 474)
        self_27342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'self')
        # Setting the type of the member '_linewidths' of a type (line 474)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 8), self_27342, '_linewidths', call_assignment_26226_27341)
        
        # Assigning a Call to a Name (line 474):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_27345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 8), 'int')
        # Processing the call keyword arguments
        kwargs_27346 = {}
        # Getting the type of 'call_assignment_26225' (line 474)
        call_assignment_26225_27343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'call_assignment_26225', False)
        # Obtaining the member '__getitem__' of a type (line 474)
        getitem___27344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 8), call_assignment_26225_27343, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_27347 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___27344, *[int_27345], **kwargs_27346)
        
        # Assigning a type to the variable 'call_assignment_26227' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'call_assignment_26227', getitem___call_result_27347)
        
        # Assigning a Name to a Attribute (line 474):
        # Getting the type of 'call_assignment_26227' (line 474)
        call_assignment_26227_27348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'call_assignment_26227')
        # Getting the type of 'self' (line 474)
        self_27349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 26), 'self')
        # Setting the type of the member '_linestyles' of a type (line 474)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 26), self_27349, '_linestyles', call_assignment_26227_27348)
        
        # Assigning a Name to a Attribute (line 476):
        
        # Assigning a Name to a Attribute (line 476):
        # Getting the type of 'True' (line 476)
        True_27350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 21), 'True')
        # Getting the type of 'self' (line 476)
        self_27351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 476)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 476, 8), self_27351, 'stale', True_27350)
        
        # ################# End of 'set_linewidth(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_linewidth' in the type store
        # Getting the type of 'stypy_return_type' (line 458)
        stypy_return_type_27352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27352)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_linewidth'
        return stypy_return_type_27352


    @norecursion
    def set_linewidths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_linewidths'
        module_type_store = module_type_store.open_function_context('set_linewidths', 478, 4, False)
        # Assigning a type to the variable 'self' (line 479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 479, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_linewidths.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_linewidths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_linewidths.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_linewidths.__dict__.__setitem__('stypy_function_name', 'Collection.set_linewidths')
        Collection.set_linewidths.__dict__.__setitem__('stypy_param_names_list', ['lw'])
        Collection.set_linewidths.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_linewidths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_linewidths.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_linewidths.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_linewidths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_linewidths.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_linewidths', ['lw'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_linewidths', localization, ['lw'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_linewidths(...)' code ##################

        unicode_27353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 479, 8), 'unicode', u'alias for set_linewidth')
        
        # Call to set_linewidth(...): (line 480)
        # Processing the call arguments (line 480)
        # Getting the type of 'lw' (line 480)
        lw_27356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 34), 'lw', False)
        # Processing the call keyword arguments (line 480)
        kwargs_27357 = {}
        # Getting the type of 'self' (line 480)
        self_27354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 15), 'self', False)
        # Obtaining the member 'set_linewidth' of a type (line 480)
        set_linewidth_27355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 15), self_27354, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 480)
        set_linewidth_call_result_27358 = invoke(stypy.reporting.localization.Localization(__file__, 480, 15), set_linewidth_27355, *[lw_27356], **kwargs_27357)
        
        # Assigning a type to the variable 'stypy_return_type' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 8), 'stypy_return_type', set_linewidth_call_result_27358)
        
        # ################# End of 'set_linewidths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_linewidths' in the type store
        # Getting the type of 'stypy_return_type' (line 478)
        stypy_return_type_27359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27359)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_linewidths'
        return stypy_return_type_27359


    @norecursion
    def set_lw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_lw'
        module_type_store = module_type_store.open_function_context('set_lw', 482, 4, False)
        # Assigning a type to the variable 'self' (line 483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 483, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_lw.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_lw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_lw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_lw.__dict__.__setitem__('stypy_function_name', 'Collection.set_lw')
        Collection.set_lw.__dict__.__setitem__('stypy_param_names_list', ['lw'])
        Collection.set_lw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_lw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_lw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_lw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_lw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_lw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_lw', ['lw'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_lw', localization, ['lw'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_lw(...)' code ##################

        unicode_27360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 8), 'unicode', u'alias for set_linewidth')
        
        # Call to set_linewidth(...): (line 484)
        # Processing the call arguments (line 484)
        # Getting the type of 'lw' (line 484)
        lw_27363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 34), 'lw', False)
        # Processing the call keyword arguments (line 484)
        kwargs_27364 = {}
        # Getting the type of 'self' (line 484)
        self_27361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 15), 'self', False)
        # Obtaining the member 'set_linewidth' of a type (line 484)
        set_linewidth_27362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 15), self_27361, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 484)
        set_linewidth_call_result_27365 = invoke(stypy.reporting.localization.Localization(__file__, 484, 15), set_linewidth_27362, *[lw_27363], **kwargs_27364)
        
        # Assigning a type to the variable 'stypy_return_type' (line 484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'stypy_return_type', set_linewidth_call_result_27365)
        
        # ################# End of 'set_lw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_lw' in the type store
        # Getting the type of 'stypy_return_type' (line 482)
        stypy_return_type_27366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27366)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_lw'
        return stypy_return_type_27366


    @norecursion
    def set_linestyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_linestyle'
        module_type_store = module_type_store.open_function_context('set_linestyle', 486, 4, False)
        # Assigning a type to the variable 'self' (line 487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_linestyle.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_linestyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_linestyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_linestyle.__dict__.__setitem__('stypy_function_name', 'Collection.set_linestyle')
        Collection.set_linestyle.__dict__.__setitem__('stypy_param_names_list', ['ls'])
        Collection.set_linestyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_linestyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_linestyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_linestyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_linestyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_linestyle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_linestyle', ['ls'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_linestyle', localization, ['ls'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_linestyle(...)' code ##################

        unicode_27367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 515, (-1)), 'unicode', u"\n        Set the linestyle(s) for the collection.\n\n        ===========================   =================\n        linestyle                     description\n        ===========================   =================\n        ``'-'`` or ``'solid'``        solid line\n        ``'--'`` or  ``'dashed'``     dashed line\n        ``'-.'`` or  ``'dashdot'``    dash-dotted line\n        ``':'`` or ``'dotted'``       dotted line\n        ===========================   =================\n\n        Alternatively a dash tuple of the following form can be provided::\n\n            (offset, onoffseq),\n\n        where ``onoffseq`` is an even length tuple of on and off ink\n        in points.\n\n        ACCEPTS: ['solid' | 'dashed', 'dashdot', 'dotted' |\n                   (offset, on-off-dash-seq) |\n                   ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` |\n                   ``' '`` | ``''``]\n\n        Parameters\n        ----------\n        ls : { '-',  '--', '-.', ':'} and more see description\n            The line style.\n        ")
        
        
        # SSA begins for try-except statement (line 516)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        
        # Call to isinstance(...): (line 517)
        # Processing the call arguments (line 517)
        # Getting the type of 'ls' (line 517)
        ls_27369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 26), 'ls', False)
        # Getting the type of 'six' (line 517)
        six_27370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 30), 'six', False)
        # Obtaining the member 'string_types' of a type (line 517)
        string_types_27371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 517, 30), six_27370, 'string_types')
        # Processing the call keyword arguments (line 517)
        kwargs_27372 = {}
        # Getting the type of 'isinstance' (line 517)
        isinstance_27368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 517)
        isinstance_call_result_27373 = invoke(stypy.reporting.localization.Localization(__file__, 517, 15), isinstance_27368, *[ls_27369, string_types_27371], **kwargs_27372)
        
        # Testing the type of an if condition (line 517)
        if_condition_27374 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 517, 12), isinstance_call_result_27373)
        # Assigning a type to the variable 'if_condition_27374' (line 517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 12), 'if_condition_27374', if_condition_27374)
        # SSA begins for if statement (line 517)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 518):
        
        # Assigning a Call to a Name (line 518):
        
        # Call to get(...): (line 518)
        # Processing the call arguments (line 518)
        # Getting the type of 'ls' (line 518)
        ls_27378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 41), 'ls', False)
        # Getting the type of 'ls' (line 518)
        ls_27379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 45), 'ls', False)
        # Processing the call keyword arguments (line 518)
        kwargs_27380 = {}
        # Getting the type of 'cbook' (line 518)
        cbook_27375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 21), 'cbook', False)
        # Obtaining the member 'ls_mapper' of a type (line 518)
        ls_mapper_27376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 21), cbook_27375, 'ls_mapper')
        # Obtaining the member 'get' of a type (line 518)
        get_27377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 21), ls_mapper_27376, 'get')
        # Calling get(args, kwargs) (line 518)
        get_call_result_27381 = invoke(stypy.reporting.localization.Localization(__file__, 518, 21), get_27377, *[ls_27378, ls_27379], **kwargs_27380)
        
        # Assigning a type to the variable 'ls' (line 518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 16), 'ls', get_call_result_27381)
        
        # Assigning a List to a Name (line 519):
        
        # Assigning a List to a Name (line 519):
        
        # Obtaining an instance of the builtin type 'list' (line 519)
        list_27382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 519)
        # Adding element type (line 519)
        
        # Call to _get_dash_pattern(...): (line 519)
        # Processing the call arguments (line 519)
        # Getting the type of 'ls' (line 519)
        ls_27385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 51), 'ls', False)
        # Processing the call keyword arguments (line 519)
        kwargs_27386 = {}
        # Getting the type of 'mlines' (line 519)
        mlines_27383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 26), 'mlines', False)
        # Obtaining the member '_get_dash_pattern' of a type (line 519)
        _get_dash_pattern_27384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 26), mlines_27383, '_get_dash_pattern')
        # Calling _get_dash_pattern(args, kwargs) (line 519)
        _get_dash_pattern_call_result_27387 = invoke(stypy.reporting.localization.Localization(__file__, 519, 26), _get_dash_pattern_27384, *[ls_27385], **kwargs_27386)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 519, 25), list_27382, _get_dash_pattern_call_result_27387)
        
        # Assigning a type to the variable 'dashes' (line 519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 16), 'dashes', list_27382)
        # SSA branch for the else part of an if statement (line 517)
        module_type_store.open_ssa_branch('else')
        
        
        # SSA begins for try-except statement (line 521)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a List to a Name (line 522):
        
        # Assigning a List to a Name (line 522):
        
        # Obtaining an instance of the builtin type 'list' (line 522)
        list_27388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 522, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 522)
        # Adding element type (line 522)
        
        # Call to _get_dash_pattern(...): (line 522)
        # Processing the call arguments (line 522)
        # Getting the type of 'ls' (line 522)
        ls_27391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 55), 'ls', False)
        # Processing the call keyword arguments (line 522)
        kwargs_27392 = {}
        # Getting the type of 'mlines' (line 522)
        mlines_27389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 30), 'mlines', False)
        # Obtaining the member '_get_dash_pattern' of a type (line 522)
        _get_dash_pattern_27390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 30), mlines_27389, '_get_dash_pattern')
        # Calling _get_dash_pattern(args, kwargs) (line 522)
        _get_dash_pattern_call_result_27393 = invoke(stypy.reporting.localization.Localization(__file__, 522, 30), _get_dash_pattern_27390, *[ls_27391], **kwargs_27392)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 522, 29), list_27388, _get_dash_pattern_call_result_27393)
        
        # Assigning a type to the variable 'dashes' (line 522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 20), 'dashes', list_27388)
        # SSA branch for the except part of a try statement (line 521)
        # SSA branch for the except 'ValueError' branch of a try statement (line 521)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a ListComp to a Name (line 524):
        
        # Assigning a ListComp to a Name (line 524):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'ls' (line 524)
        ls_27399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 67), 'ls')
        comprehension_27400 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 524, 30), ls_27399)
        # Assigning a type to the variable 'x' (line 524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 30), 'x', comprehension_27400)
        
        # Call to _get_dash_pattern(...): (line 524)
        # Processing the call arguments (line 524)
        # Getting the type of 'x' (line 524)
        x_27396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 55), 'x', False)
        # Processing the call keyword arguments (line 524)
        kwargs_27397 = {}
        # Getting the type of 'mlines' (line 524)
        mlines_27394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 30), 'mlines', False)
        # Obtaining the member '_get_dash_pattern' of a type (line 524)
        _get_dash_pattern_27395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 30), mlines_27394, '_get_dash_pattern')
        # Calling _get_dash_pattern(args, kwargs) (line 524)
        _get_dash_pattern_call_result_27398 = invoke(stypy.reporting.localization.Localization(__file__, 524, 30), _get_dash_pattern_27395, *[x_27396], **kwargs_27397)
        
        list_27401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 30), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 524, 30), list_27401, _get_dash_pattern_call_result_27398)
        # Assigning a type to the variable 'dashes' (line 524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 20), 'dashes', list_27401)
        # SSA join for try-except statement (line 521)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 517)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 516)
        # SSA branch for the except 'ValueError' branch of a try statement (line 516)
        module_type_store.open_ssa_branch('except')
        
        # Call to ValueError(...): (line 527)
        # Processing the call arguments (line 527)
        
        # Call to format(...): (line 528)
        # Processing the call arguments (line 528)
        # Getting the type of 'ls' (line 528)
        ls_27405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 67), 'ls', False)
        # Processing the call keyword arguments (line 528)
        kwargs_27406 = {}
        unicode_27403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 16), 'unicode', u'Do not know how to convert {!r} to dashes')
        # Obtaining the member 'format' of a type (line 528)
        format_27404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 16), unicode_27403, 'format')
        # Calling format(args, kwargs) (line 528)
        format_call_result_27407 = invoke(stypy.reporting.localization.Localization(__file__, 528, 16), format_27404, *[ls_27405], **kwargs_27406)
        
        # Processing the call keyword arguments (line 527)
        kwargs_27408 = {}
        # Getting the type of 'ValueError' (line 527)
        ValueError_27402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 527)
        ValueError_call_result_27409 = invoke(stypy.reporting.localization.Localization(__file__, 527, 18), ValueError_27402, *[format_call_result_27407], **kwargs_27408)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 527, 12), ValueError_call_result_27409, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 516)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 531):
        
        # Assigning a Name to a Attribute (line 531):
        # Getting the type of 'dashes' (line 531)
        dashes_27410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 30), 'dashes')
        # Getting the type of 'self' (line 531)
        self_27411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'self')
        # Setting the type of the member '_us_linestyles' of a type (line 531)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 8), self_27411, '_us_linestyles', dashes_27410)
        
        # Assigning a Call to a Tuple (line 534):
        
        # Assigning a Call to a Name:
        
        # Call to _bcast_lwls(...): (line 534)
        # Processing the call arguments (line 534)
        # Getting the type of 'self' (line 535)
        self_27414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 12), 'self', False)
        # Obtaining the member '_us_lw' of a type (line 535)
        _us_lw_27415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 12), self_27414, '_us_lw')
        # Getting the type of 'self' (line 535)
        self_27416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 25), 'self', False)
        # Obtaining the member '_us_linestyles' of a type (line 535)
        _us_linestyles_27417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 25), self_27416, '_us_linestyles')
        # Processing the call keyword arguments (line 534)
        kwargs_27418 = {}
        # Getting the type of 'self' (line 534)
        self_27412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 45), 'self', False)
        # Obtaining the member '_bcast_lwls' of a type (line 534)
        _bcast_lwls_27413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 45), self_27412, '_bcast_lwls')
        # Calling _bcast_lwls(args, kwargs) (line 534)
        _bcast_lwls_call_result_27419 = invoke(stypy.reporting.localization.Localization(__file__, 534, 45), _bcast_lwls_27413, *[_us_lw_27415, _us_linestyles_27417], **kwargs_27418)
        
        # Assigning a type to the variable 'call_assignment_26228' (line 534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 8), 'call_assignment_26228', _bcast_lwls_call_result_27419)
        
        # Assigning a Call to a Name (line 534):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_27422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 8), 'int')
        # Processing the call keyword arguments
        kwargs_27423 = {}
        # Getting the type of 'call_assignment_26228' (line 534)
        call_assignment_26228_27420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 8), 'call_assignment_26228', False)
        # Obtaining the member '__getitem__' of a type (line 534)
        getitem___27421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 8), call_assignment_26228_27420, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_27424 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___27421, *[int_27422], **kwargs_27423)
        
        # Assigning a type to the variable 'call_assignment_26229' (line 534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 8), 'call_assignment_26229', getitem___call_result_27424)
        
        # Assigning a Name to a Attribute (line 534):
        # Getting the type of 'call_assignment_26229' (line 534)
        call_assignment_26229_27425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 8), 'call_assignment_26229')
        # Getting the type of 'self' (line 534)
        self_27426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 8), 'self')
        # Setting the type of the member '_linewidths' of a type (line 534)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 8), self_27426, '_linewidths', call_assignment_26229_27425)
        
        # Assigning a Call to a Name (line 534):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_27429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 8), 'int')
        # Processing the call keyword arguments
        kwargs_27430 = {}
        # Getting the type of 'call_assignment_26228' (line 534)
        call_assignment_26228_27427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 8), 'call_assignment_26228', False)
        # Obtaining the member '__getitem__' of a type (line 534)
        getitem___27428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 8), call_assignment_26228_27427, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_27431 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___27428, *[int_27429], **kwargs_27430)
        
        # Assigning a type to the variable 'call_assignment_26230' (line 534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 8), 'call_assignment_26230', getitem___call_result_27431)
        
        # Assigning a Name to a Attribute (line 534):
        # Getting the type of 'call_assignment_26230' (line 534)
        call_assignment_26230_27432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 8), 'call_assignment_26230')
        # Getting the type of 'self' (line 534)
        self_27433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 26), 'self')
        # Setting the type of the member '_linestyles' of a type (line 534)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 26), self_27433, '_linestyles', call_assignment_26230_27432)
        
        # ################# End of 'set_linestyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_linestyle' in the type store
        # Getting the type of 'stypy_return_type' (line 486)
        stypy_return_type_27434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27434)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_linestyle'
        return stypy_return_type_27434


    @staticmethod
    @norecursion
    def _bcast_lwls(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_bcast_lwls'
        module_type_store = module_type_store.open_function_context('_bcast_lwls', 537, 4, False)
        
        # Passed parameters checking function
        Collection._bcast_lwls.__dict__.__setitem__('stypy_localization', localization)
        Collection._bcast_lwls.__dict__.__setitem__('stypy_type_of_self', None)
        Collection._bcast_lwls.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection._bcast_lwls.__dict__.__setitem__('stypy_function_name', '_bcast_lwls')
        Collection._bcast_lwls.__dict__.__setitem__('stypy_param_names_list', ['linewidths', 'dashes'])
        Collection._bcast_lwls.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection._bcast_lwls.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection._bcast_lwls.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection._bcast_lwls.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection._bcast_lwls.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection._bcast_lwls.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, None, module_type_store, '_bcast_lwls', ['linewidths', 'dashes'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_bcast_lwls', localization, ['dashes'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_bcast_lwls(...)' code ##################

        unicode_27435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, (-1)), 'unicode', u'Internal helper function to broadcast + scale ls/lw\n\n        In the collection drawing code the linewidth and linestyle are\n        cycled through as circular buffers (via v[i % len(v)]).  Thus,\n        if we are going to scale the dash pattern at set time (not\n        draw time) we need to do the broadcasting now and expand both\n        lists to be the same length.\n\n        Parameters\n        ----------\n        linewidths : list\n            line widths of collection\n\n        dashes : list\n            dash specification (offset, (dash pattern tuple))\n\n        Returns\n        -------\n        linewidths, dashes : list\n             Will be the same length, dashes are scaled by paired linewidth\n\n        ')
        
        
        # Obtaining the type of the subscript
        unicode_27436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 24), 'unicode', u'_internal.classic_mode')
        # Getting the type of 'mpl' (line 561)
        mpl_27437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 11), 'mpl')
        # Obtaining the member 'rcParams' of a type (line 561)
        rcParams_27438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 11), mpl_27437, 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 561)
        getitem___27439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 11), rcParams_27438, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 561)
        subscript_call_result_27440 = invoke(stypy.reporting.localization.Localization(__file__, 561, 11), getitem___27439, unicode_27436)
        
        # Testing the type of an if condition (line 561)
        if_condition_27441 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 561, 8), subscript_call_result_27440)
        # Assigning a type to the variable 'if_condition_27441' (line 561)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 561, 8), 'if_condition_27441', if_condition_27441)
        # SSA begins for if statement (line 561)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 562)
        tuple_27442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 562)
        # Adding element type (line 562)
        # Getting the type of 'linewidths' (line 562)
        linewidths_27443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 19), 'linewidths')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 19), tuple_27442, linewidths_27443)
        # Adding element type (line 562)
        # Getting the type of 'dashes' (line 562)
        dashes_27444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 31), 'dashes')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 19), tuple_27442, dashes_27444)
        
        # Assigning a type to the variable 'stypy_return_type' (line 562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 562, 12), 'stypy_return_type', tuple_27442)
        # SSA join for if statement (line 561)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to len(...): (line 564)
        # Processing the call arguments (line 564)
        # Getting the type of 'dashes' (line 564)
        dashes_27446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 15), 'dashes', False)
        # Processing the call keyword arguments (line 564)
        kwargs_27447 = {}
        # Getting the type of 'len' (line 564)
        len_27445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 11), 'len', False)
        # Calling len(args, kwargs) (line 564)
        len_call_result_27448 = invoke(stypy.reporting.localization.Localization(__file__, 564, 11), len_27445, *[dashes_27446], **kwargs_27447)
        
        
        # Call to len(...): (line 564)
        # Processing the call arguments (line 564)
        # Getting the type of 'linewidths' (line 564)
        linewidths_27450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 30), 'linewidths', False)
        # Processing the call keyword arguments (line 564)
        kwargs_27451 = {}
        # Getting the type of 'len' (line 564)
        len_27449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 26), 'len', False)
        # Calling len(args, kwargs) (line 564)
        len_call_result_27452 = invoke(stypy.reporting.localization.Localization(__file__, 564, 26), len_27449, *[linewidths_27450], **kwargs_27451)
        
        # Applying the binary operator '!=' (line 564)
        result_ne_27453 = python_operator(stypy.reporting.localization.Localization(__file__, 564, 11), '!=', len_call_result_27448, len_call_result_27452)
        
        # Testing the type of an if condition (line 564)
        if_condition_27454 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 564, 8), result_ne_27453)
        # Assigning a type to the variable 'if_condition_27454' (line 564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 8), 'if_condition_27454', if_condition_27454)
        # SSA begins for if statement (line 564)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 565):
        
        # Assigning a Call to a Name (line 565):
        
        # Call to len(...): (line 565)
        # Processing the call arguments (line 565)
        # Getting the type of 'dashes' (line 565)
        dashes_27456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 27), 'dashes', False)
        # Processing the call keyword arguments (line 565)
        kwargs_27457 = {}
        # Getting the type of 'len' (line 565)
        len_27455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 23), 'len', False)
        # Calling len(args, kwargs) (line 565)
        len_call_result_27458 = invoke(stypy.reporting.localization.Localization(__file__, 565, 23), len_27455, *[dashes_27456], **kwargs_27457)
        
        # Assigning a type to the variable 'l_dashes' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 12), 'l_dashes', len_call_result_27458)
        
        # Assigning a Call to a Name (line 566):
        
        # Assigning a Call to a Name (line 566):
        
        # Call to len(...): (line 566)
        # Processing the call arguments (line 566)
        # Getting the type of 'linewidths' (line 566)
        linewidths_27460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 23), 'linewidths', False)
        # Processing the call keyword arguments (line 566)
        kwargs_27461 = {}
        # Getting the type of 'len' (line 566)
        len_27459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 19), 'len', False)
        # Calling len(args, kwargs) (line 566)
        len_call_result_27462 = invoke(stypy.reporting.localization.Localization(__file__, 566, 19), len_27459, *[linewidths_27460], **kwargs_27461)
        
        # Assigning a type to the variable 'l_lw' (line 566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 12), 'l_lw', len_call_result_27462)
        
        # Assigning a Call to a Name (line 567):
        
        # Assigning a Call to a Name (line 567):
        
        # Call to gcd(...): (line 567)
        # Processing the call arguments (line 567)
        # Getting the type of 'l_dashes' (line 567)
        l_dashes_27464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 22), 'l_dashes', False)
        # Getting the type of 'l_lw' (line 567)
        l_lw_27465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 32), 'l_lw', False)
        # Processing the call keyword arguments (line 567)
        kwargs_27466 = {}
        # Getting the type of 'gcd' (line 567)
        gcd_27463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 18), 'gcd', False)
        # Calling gcd(args, kwargs) (line 567)
        gcd_call_result_27467 = invoke(stypy.reporting.localization.Localization(__file__, 567, 18), gcd_27463, *[l_dashes_27464, l_lw_27465], **kwargs_27466)
        
        # Assigning a type to the variable 'GCD' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 12), 'GCD', gcd_call_result_27467)
        
        # Assigning a BinOp to a Name (line 568):
        
        # Assigning a BinOp to a Name (line 568):
        
        # Call to list(...): (line 568)
        # Processing the call arguments (line 568)
        # Getting the type of 'dashes' (line 568)
        dashes_27469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 26), 'dashes', False)
        # Processing the call keyword arguments (line 568)
        kwargs_27470 = {}
        # Getting the type of 'list' (line 568)
        list_27468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 21), 'list', False)
        # Calling list(args, kwargs) (line 568)
        list_call_result_27471 = invoke(stypy.reporting.localization.Localization(__file__, 568, 21), list_27468, *[dashes_27469], **kwargs_27470)
        
        # Getting the type of 'l_lw' (line 568)
        l_lw_27472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 37), 'l_lw')
        # Getting the type of 'GCD' (line 568)
        GCD_27473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 45), 'GCD')
        # Applying the binary operator '//' (line 568)
        result_floordiv_27474 = python_operator(stypy.reporting.localization.Localization(__file__, 568, 37), '//', l_lw_27472, GCD_27473)
        
        # Applying the binary operator '*' (line 568)
        result_mul_27475 = python_operator(stypy.reporting.localization.Localization(__file__, 568, 21), '*', list_call_result_27471, result_floordiv_27474)
        
        # Assigning a type to the variable 'dashes' (line 568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 12), 'dashes', result_mul_27475)
        
        # Assigning a BinOp to a Name (line 569):
        
        # Assigning a BinOp to a Name (line 569):
        
        # Call to list(...): (line 569)
        # Processing the call arguments (line 569)
        # Getting the type of 'linewidths' (line 569)
        linewidths_27477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 30), 'linewidths', False)
        # Processing the call keyword arguments (line 569)
        kwargs_27478 = {}
        # Getting the type of 'list' (line 569)
        list_27476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 25), 'list', False)
        # Calling list(args, kwargs) (line 569)
        list_call_result_27479 = invoke(stypy.reporting.localization.Localization(__file__, 569, 25), list_27476, *[linewidths_27477], **kwargs_27478)
        
        # Getting the type of 'l_dashes' (line 569)
        l_dashes_27480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 45), 'l_dashes')
        # Getting the type of 'GCD' (line 569)
        GCD_27481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 57), 'GCD')
        # Applying the binary operator '//' (line 569)
        result_floordiv_27482 = python_operator(stypy.reporting.localization.Localization(__file__, 569, 45), '//', l_dashes_27480, GCD_27481)
        
        # Applying the binary operator '*' (line 569)
        result_mul_27483 = python_operator(stypy.reporting.localization.Localization(__file__, 569, 25), '*', list_call_result_27479, result_floordiv_27482)
        
        # Assigning a type to the variable 'linewidths' (line 569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 569, 12), 'linewidths', result_mul_27483)
        # SSA join for if statement (line 564)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a ListComp to a Name (line 572):
        
        # Assigning a ListComp to a Name (line 572):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to zip(...): (line 573)
        # Processing the call arguments (line 573)
        # Getting the type of 'dashes' (line 573)
        dashes_27492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 40), 'dashes', False)
        # Getting the type of 'linewidths' (line 573)
        linewidths_27493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 48), 'linewidths', False)
        # Processing the call keyword arguments (line 573)
        kwargs_27494 = {}
        # Getting the type of 'zip' (line 573)
        zip_27491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 36), 'zip', False)
        # Calling zip(args, kwargs) (line 573)
        zip_call_result_27495 = invoke(stypy.reporting.localization.Localization(__file__, 573, 36), zip_27491, *[dashes_27492, linewidths_27493], **kwargs_27494)
        
        comprehension_27496 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 572, 18), zip_call_result_27495)
        # Assigning a type to the variable 'tuple_27497' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 18), 'tuple_27497', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 572, 18), comprehension_27496))
        
        # Obtaining an instance of the builtin type 'tuple' (line 573)
        tuple_27497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 573, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 573)
        # Adding element type (line 573)o
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 573, 23), tuple_27497, )
        # Adding element type (line 573)d
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 573, 23), tuple_27497, )
        
        # Assigning a type to the variable 'tuple_27497' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 18), 'tuple_27497', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 572, 18), comprehension_27496))
        # Assigning a type to the variable 'lw' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 18), 'lw', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 572, 18), comprehension_27496))
        
        # Call to _scale_dashes(...): (line 572)
        # Processing the call arguments (line 572)
        # Getting the type of 'o' (line 572)
        o_27486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 39), 'o', False)
        # Getting the type of 'd' (line 572)
        d_27487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 42), 'd', False)
        # Getting the type of 'lw' (line 572)
        lw_27488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 45), 'lw', False)
        # Processing the call keyword arguments (line 572)
        kwargs_27489 = {}
        # Getting the type of 'mlines' (line 572)
        mlines_27484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 18), 'mlines', False)
        # Obtaining the member '_scale_dashes' of a type (line 572)
        _scale_dashes_27485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 18), mlines_27484, '_scale_dashes')
        # Calling _scale_dashes(args, kwargs) (line 572)
        _scale_dashes_call_result_27490 = invoke(stypy.reporting.localization.Localization(__file__, 572, 18), _scale_dashes_27485, *[o_27486, d_27487, lw_27488], **kwargs_27489)
        
        list_27498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 18), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 572, 18), list_27498, _scale_dashes_call_result_27490)
        # Assigning a type to the variable 'dashes' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'dashes', list_27498)
        
        # Obtaining an instance of the builtin type 'tuple' (line 575)
        tuple_27499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 575, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 575)
        # Adding element type (line 575)
        # Getting the type of 'linewidths' (line 575)
        linewidths_27500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 15), 'linewidths')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 575, 15), tuple_27499, linewidths_27500)
        # Adding element type (line 575)
        # Getting the type of 'dashes' (line 575)
        dashes_27501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 27), 'dashes')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 575, 15), tuple_27499, dashes_27501)
        
        # Assigning a type to the variable 'stypy_return_type' (line 575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 575, 8), 'stypy_return_type', tuple_27499)
        
        # ################# End of '_bcast_lwls(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_bcast_lwls' in the type store
        # Getting the type of 'stypy_return_type' (line 537)
        stypy_return_type_27502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27502)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_bcast_lwls'
        return stypy_return_type_27502


    @norecursion
    def set_linestyles(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_linestyles'
        module_type_store = module_type_store.open_function_context('set_linestyles', 577, 4, False)
        # Assigning a type to the variable 'self' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_linestyles.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_linestyles.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_linestyles.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_linestyles.__dict__.__setitem__('stypy_function_name', 'Collection.set_linestyles')
        Collection.set_linestyles.__dict__.__setitem__('stypy_param_names_list', ['ls'])
        Collection.set_linestyles.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_linestyles.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_linestyles.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_linestyles.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_linestyles.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_linestyles.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_linestyles', ['ls'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_linestyles', localization, ['ls'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_linestyles(...)' code ##################

        unicode_27503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 8), 'unicode', u'alias for set_linestyle')
        
        # Call to set_linestyle(...): (line 579)
        # Processing the call arguments (line 579)
        # Getting the type of 'ls' (line 579)
        ls_27506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 34), 'ls', False)
        # Processing the call keyword arguments (line 579)
        kwargs_27507 = {}
        # Getting the type of 'self' (line 579)
        self_27504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 15), 'self', False)
        # Obtaining the member 'set_linestyle' of a type (line 579)
        set_linestyle_27505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 579, 15), self_27504, 'set_linestyle')
        # Calling set_linestyle(args, kwargs) (line 579)
        set_linestyle_call_result_27508 = invoke(stypy.reporting.localization.Localization(__file__, 579, 15), set_linestyle_27505, *[ls_27506], **kwargs_27507)
        
        # Assigning a type to the variable 'stypy_return_type' (line 579)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 579, 8), 'stypy_return_type', set_linestyle_call_result_27508)
        
        # ################# End of 'set_linestyles(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_linestyles' in the type store
        # Getting the type of 'stypy_return_type' (line 577)
        stypy_return_type_27509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27509)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_linestyles'
        return stypy_return_type_27509


    @norecursion
    def set_dashes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_dashes'
        module_type_store = module_type_store.open_function_context('set_dashes', 581, 4, False)
        # Assigning a type to the variable 'self' (line 582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_dashes.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_dashes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_dashes.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_dashes.__dict__.__setitem__('stypy_function_name', 'Collection.set_dashes')
        Collection.set_dashes.__dict__.__setitem__('stypy_param_names_list', ['ls'])
        Collection.set_dashes.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_dashes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_dashes.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_dashes.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_dashes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_dashes.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_dashes', ['ls'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_dashes', localization, ['ls'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_dashes(...)' code ##################

        unicode_27510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 582, 8), 'unicode', u'alias for set_linestyle')
        
        # Call to set_linestyle(...): (line 583)
        # Processing the call arguments (line 583)
        # Getting the type of 'ls' (line 583)
        ls_27513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 34), 'ls', False)
        # Processing the call keyword arguments (line 583)
        kwargs_27514 = {}
        # Getting the type of 'self' (line 583)
        self_27511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 15), 'self', False)
        # Obtaining the member 'set_linestyle' of a type (line 583)
        set_linestyle_27512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 583, 15), self_27511, 'set_linestyle')
        # Calling set_linestyle(args, kwargs) (line 583)
        set_linestyle_call_result_27515 = invoke(stypy.reporting.localization.Localization(__file__, 583, 15), set_linestyle_27512, *[ls_27513], **kwargs_27514)
        
        # Assigning a type to the variable 'stypy_return_type' (line 583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 583, 8), 'stypy_return_type', set_linestyle_call_result_27515)
        
        # ################# End of 'set_dashes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_dashes' in the type store
        # Getting the type of 'stypy_return_type' (line 581)
        stypy_return_type_27516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27516)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_dashes'
        return stypy_return_type_27516


    @norecursion
    def set_antialiased(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_antialiased'
        module_type_store = module_type_store.open_function_context('set_antialiased', 585, 4, False)
        # Assigning a type to the variable 'self' (line 586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 586, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_antialiased.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_antialiased.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_antialiased.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_antialiased.__dict__.__setitem__('stypy_function_name', 'Collection.set_antialiased')
        Collection.set_antialiased.__dict__.__setitem__('stypy_param_names_list', ['aa'])
        Collection.set_antialiased.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_antialiased.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_antialiased.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_antialiased.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_antialiased.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_antialiased.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_antialiased', ['aa'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_antialiased', localization, ['aa'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_antialiased(...)' code ##################

        unicode_27517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, (-1)), 'unicode', u'\n        Set the antialiasing state for rendering.\n\n        ACCEPTS: Boolean or sequence of booleans\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 591)
        # Getting the type of 'aa' (line 591)
        aa_27518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 11), 'aa')
        # Getting the type of 'None' (line 591)
        None_27519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 17), 'None')
        
        (may_be_27520, more_types_in_union_27521) = may_be_none(aa_27518, None_27519)

        if may_be_27520:

            if more_types_in_union_27521:
                # Runtime conditional SSA (line 591)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 592):
            
            # Assigning a Subscript to a Name (line 592):
            
            # Obtaining the type of the subscript
            unicode_27522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 592, 30), 'unicode', u'patch.antialiased')
            # Getting the type of 'mpl' (line 592)
            mpl_27523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 17), 'mpl')
            # Obtaining the member 'rcParams' of a type (line 592)
            rcParams_27524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 17), mpl_27523, 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 592)
            getitem___27525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 17), rcParams_27524, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 592)
            subscript_call_result_27526 = invoke(stypy.reporting.localization.Localization(__file__, 592, 17), getitem___27525, unicode_27522)
            
            # Assigning a type to the variable 'aa' (line 592)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 12), 'aa', subscript_call_result_27526)

            if more_types_in_union_27521:
                # SSA join for if statement (line 591)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 593):
        
        # Assigning a Call to a Attribute (line 593):
        
        # Call to atleast_1d(...): (line 593)
        # Processing the call arguments (line 593)
        
        # Call to asarray(...): (line 593)
        # Processing the call arguments (line 593)
        # Getting the type of 'aa' (line 593)
        aa_27531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 54), 'aa', False)
        # Getting the type of 'bool' (line 593)
        bool_27532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 58), 'bool', False)
        # Processing the call keyword arguments (line 593)
        kwargs_27533 = {}
        # Getting the type of 'np' (line 593)
        np_27529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 43), 'np', False)
        # Obtaining the member 'asarray' of a type (line 593)
        asarray_27530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 43), np_27529, 'asarray')
        # Calling asarray(args, kwargs) (line 593)
        asarray_call_result_27534 = invoke(stypy.reporting.localization.Localization(__file__, 593, 43), asarray_27530, *[aa_27531, bool_27532], **kwargs_27533)
        
        # Processing the call keyword arguments (line 593)
        kwargs_27535 = {}
        # Getting the type of 'np' (line 593)
        np_27527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 29), 'np', False)
        # Obtaining the member 'atleast_1d' of a type (line 593)
        atleast_1d_27528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 29), np_27527, 'atleast_1d')
        # Calling atleast_1d(args, kwargs) (line 593)
        atleast_1d_call_result_27536 = invoke(stypy.reporting.localization.Localization(__file__, 593, 29), atleast_1d_27528, *[asarray_call_result_27534], **kwargs_27535)
        
        # Getting the type of 'self' (line 593)
        self_27537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 8), 'self')
        # Setting the type of the member '_antialiaseds' of a type (line 593)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 8), self_27537, '_antialiaseds', atleast_1d_call_result_27536)
        
        # Assigning a Name to a Attribute (line 594):
        
        # Assigning a Name to a Attribute (line 594):
        # Getting the type of 'True' (line 594)
        True_27538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 21), 'True')
        # Getting the type of 'self' (line 594)
        self_27539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 594)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 8), self_27539, 'stale', True_27538)
        
        # ################# End of 'set_antialiased(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_antialiased' in the type store
        # Getting the type of 'stypy_return_type' (line 585)
        stypy_return_type_27540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27540)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_antialiased'
        return stypy_return_type_27540


    @norecursion
    def set_antialiaseds(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_antialiaseds'
        module_type_store = module_type_store.open_function_context('set_antialiaseds', 596, 4, False)
        # Assigning a type to the variable 'self' (line 597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_antialiaseds.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_antialiaseds.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_antialiaseds.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_antialiaseds.__dict__.__setitem__('stypy_function_name', 'Collection.set_antialiaseds')
        Collection.set_antialiaseds.__dict__.__setitem__('stypy_param_names_list', ['aa'])
        Collection.set_antialiaseds.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_antialiaseds.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_antialiaseds.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_antialiaseds.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_antialiaseds.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_antialiaseds.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_antialiaseds', ['aa'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_antialiaseds', localization, ['aa'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_antialiaseds(...)' code ##################

        unicode_27541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 8), 'unicode', u'alias for set_antialiased')
        
        # Call to set_antialiased(...): (line 598)
        # Processing the call arguments (line 598)
        # Getting the type of 'aa' (line 598)
        aa_27544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 36), 'aa', False)
        # Processing the call keyword arguments (line 598)
        kwargs_27545 = {}
        # Getting the type of 'self' (line 598)
        self_27542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 15), 'self', False)
        # Obtaining the member 'set_antialiased' of a type (line 598)
        set_antialiased_27543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 15), self_27542, 'set_antialiased')
        # Calling set_antialiased(args, kwargs) (line 598)
        set_antialiased_call_result_27546 = invoke(stypy.reporting.localization.Localization(__file__, 598, 15), set_antialiased_27543, *[aa_27544], **kwargs_27545)
        
        # Assigning a type to the variable 'stypy_return_type' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'stypy_return_type', set_antialiased_call_result_27546)
        
        # ################# End of 'set_antialiaseds(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_antialiaseds' in the type store
        # Getting the type of 'stypy_return_type' (line 596)
        stypy_return_type_27547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27547)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_antialiaseds'
        return stypy_return_type_27547


    @norecursion
    def set_color(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_color'
        module_type_store = module_type_store.open_function_context('set_color', 600, 4, False)
        # Assigning a type to the variable 'self' (line 601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 601, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_color.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_color.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_color.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_color.__dict__.__setitem__('stypy_function_name', 'Collection.set_color')
        Collection.set_color.__dict__.__setitem__('stypy_param_names_list', ['c'])
        Collection.set_color.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_color.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_color.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_color.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_color.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_color.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_color', ['c'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_color', localization, ['c'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_color(...)' code ##################

        unicode_27548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, (-1)), 'unicode', u'\n        Set both the edgecolor and the facecolor.\n\n        ACCEPTS: matplotlib color arg or sequence of rgba tuples\n\n        .. seealso::\n\n            :meth:`set_facecolor`, :meth:`set_edgecolor`\n               For setting the edge or face color individually.\n        ')
        
        # Call to set_facecolor(...): (line 611)
        # Processing the call arguments (line 611)
        # Getting the type of 'c' (line 611)
        c_27551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 27), 'c', False)
        # Processing the call keyword arguments (line 611)
        kwargs_27552 = {}
        # Getting the type of 'self' (line 611)
        self_27549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 8), 'self', False)
        # Obtaining the member 'set_facecolor' of a type (line 611)
        set_facecolor_27550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 8), self_27549, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 611)
        set_facecolor_call_result_27553 = invoke(stypy.reporting.localization.Localization(__file__, 611, 8), set_facecolor_27550, *[c_27551], **kwargs_27552)
        
        
        # Call to set_edgecolor(...): (line 612)
        # Processing the call arguments (line 612)
        # Getting the type of 'c' (line 612)
        c_27556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 27), 'c', False)
        # Processing the call keyword arguments (line 612)
        kwargs_27557 = {}
        # Getting the type of 'self' (line 612)
        self_27554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 8), 'self', False)
        # Obtaining the member 'set_edgecolor' of a type (line 612)
        set_edgecolor_27555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 8), self_27554, 'set_edgecolor')
        # Calling set_edgecolor(args, kwargs) (line 612)
        set_edgecolor_call_result_27558 = invoke(stypy.reporting.localization.Localization(__file__, 612, 8), set_edgecolor_27555, *[c_27556], **kwargs_27557)
        
        
        # ################# End of 'set_color(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_color' in the type store
        # Getting the type of 'stypy_return_type' (line 600)
        stypy_return_type_27559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27559)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_color'
        return stypy_return_type_27559


    @norecursion
    def _set_facecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_facecolor'
        module_type_store = module_type_store.open_function_context('_set_facecolor', 614, 4, False)
        # Assigning a type to the variable 'self' (line 615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection._set_facecolor.__dict__.__setitem__('stypy_localization', localization)
        Collection._set_facecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection._set_facecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection._set_facecolor.__dict__.__setitem__('stypy_function_name', 'Collection._set_facecolor')
        Collection._set_facecolor.__dict__.__setitem__('stypy_param_names_list', ['c'])
        Collection._set_facecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection._set_facecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection._set_facecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection._set_facecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection._set_facecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection._set_facecolor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection._set_facecolor', ['c'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_facecolor', localization, ['c'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_facecolor(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 615)
        # Getting the type of 'c' (line 615)
        c_27560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 11), 'c')
        # Getting the type of 'None' (line 615)
        None_27561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 16), 'None')
        
        (may_be_27562, more_types_in_union_27563) = may_be_none(c_27560, None_27561)

        if may_be_27562:

            if more_types_in_union_27563:
                # Runtime conditional SSA (line 615)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 616):
            
            # Assigning a Subscript to a Name (line 616):
            
            # Obtaining the type of the subscript
            unicode_27564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 29), 'unicode', u'patch.facecolor')
            # Getting the type of 'mpl' (line 616)
            mpl_27565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 16), 'mpl')
            # Obtaining the member 'rcParams' of a type (line 616)
            rcParams_27566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 16), mpl_27565, 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 616)
            getitem___27567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 16), rcParams_27566, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 616)
            subscript_call_result_27568 = invoke(stypy.reporting.localization.Localization(__file__, 616, 16), getitem___27567, unicode_27564)
            
            # Assigning a type to the variable 'c' (line 616)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 12), 'c', subscript_call_result_27568)

            if more_types_in_union_27563:
                # SSA join for if statement (line 615)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 618):
        
        # Assigning a Name to a Attribute (line 618):
        # Getting the type of 'True' (line 618)
        True_27569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 26), 'True')
        # Getting the type of 'self' (line 618)
        self_27570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 8), 'self')
        # Setting the type of the member '_is_filled' of a type (line 618)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 8), self_27570, '_is_filled', True_27569)
        
        
        # SSA begins for try-except statement (line 619)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        
        
        # Call to lower(...): (line 620)
        # Processing the call keyword arguments (line 620)
        kwargs_27573 = {}
        # Getting the type of 'c' (line 620)
        c_27571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 15), 'c', False)
        # Obtaining the member 'lower' of a type (line 620)
        lower_27572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 15), c_27571, 'lower')
        # Calling lower(args, kwargs) (line 620)
        lower_call_result_27574 = invoke(stypy.reporting.localization.Localization(__file__, 620, 15), lower_27572, *[], **kwargs_27573)
        
        unicode_27575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 28), 'unicode', u'none')
        # Applying the binary operator '==' (line 620)
        result_eq_27576 = python_operator(stypy.reporting.localization.Localization(__file__, 620, 15), '==', lower_call_result_27574, unicode_27575)
        
        # Testing the type of an if condition (line 620)
        if_condition_27577 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 620, 12), result_eq_27576)
        # Assigning a type to the variable 'if_condition_27577' (line 620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 12), 'if_condition_27577', if_condition_27577)
        # SSA begins for if statement (line 620)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 621):
        
        # Assigning a Name to a Attribute (line 621):
        # Getting the type of 'False' (line 621)
        False_27578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 34), 'False')
        # Getting the type of 'self' (line 621)
        self_27579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 16), 'self')
        # Setting the type of the member '_is_filled' of a type (line 621)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 16), self_27579, '_is_filled', False_27578)
        # SSA join for if statement (line 620)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 619)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 619)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 619)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 624):
        
        # Assigning a Call to a Attribute (line 624):
        
        # Call to to_rgba_array(...): (line 624)
        # Processing the call arguments (line 624)
        # Getting the type of 'c' (line 624)
        c_27582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 49), 'c', False)
        # Getting the type of 'self' (line 624)
        self_27583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 52), 'self', False)
        # Obtaining the member '_alpha' of a type (line 624)
        _alpha_27584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 52), self_27583, '_alpha')
        # Processing the call keyword arguments (line 624)
        kwargs_27585 = {}
        # Getting the type of 'mcolors' (line 624)
        mcolors_27580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 27), 'mcolors', False)
        # Obtaining the member 'to_rgba_array' of a type (line 624)
        to_rgba_array_27581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 27), mcolors_27580, 'to_rgba_array')
        # Calling to_rgba_array(args, kwargs) (line 624)
        to_rgba_array_call_result_27586 = invoke(stypy.reporting.localization.Localization(__file__, 624, 27), to_rgba_array_27581, *[c_27582, _alpha_27584], **kwargs_27585)
        
        # Getting the type of 'self' (line 624)
        self_27587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 8), 'self')
        # Setting the type of the member '_facecolors' of a type (line 624)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 8), self_27587, '_facecolors', to_rgba_array_call_result_27586)
        
        # Assigning a Name to a Attribute (line 625):
        
        # Assigning a Name to a Attribute (line 625):
        # Getting the type of 'True' (line 625)
        True_27588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 21), 'True')
        # Getting the type of 'self' (line 625)
        self_27589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 625)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 8), self_27589, 'stale', True_27588)
        
        # ################# End of '_set_facecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_facecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 614)
        stypy_return_type_27590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27590)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_facecolor'
        return stypy_return_type_27590


    @norecursion
    def set_facecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_facecolor'
        module_type_store = module_type_store.open_function_context('set_facecolor', 627, 4, False)
        # Assigning a type to the variable 'self' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_facecolor.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_facecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_facecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_facecolor.__dict__.__setitem__('stypy_function_name', 'Collection.set_facecolor')
        Collection.set_facecolor.__dict__.__setitem__('stypy_param_names_list', ['c'])
        Collection.set_facecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_facecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_facecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_facecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_facecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_facecolor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_facecolor', ['c'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_facecolor', localization, ['c'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_facecolor(...)' code ##################

        unicode_27591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, (-1)), 'unicode', u"\n        Set the facecolor(s) of the collection.  *c* can be a\n        matplotlib color spec (all patches have same color), or a\n        sequence of specs; if it is a sequence the patches will\n        cycle through the sequence.\n\n        If *c* is 'none', the patch will not be filled.\n\n        ACCEPTS: matplotlib color spec or sequence of specs\n        ")
        
        # Assigning a Name to a Attribute (line 638):
        
        # Assigning a Name to a Attribute (line 638):
        # Getting the type of 'c' (line 638)
        c_27592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 35), 'c')
        # Getting the type of 'self' (line 638)
        self_27593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 8), 'self')
        # Setting the type of the member '_original_facecolor' of a type (line 638)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 8), self_27593, '_original_facecolor', c_27592)
        
        # Call to _set_facecolor(...): (line 639)
        # Processing the call arguments (line 639)
        # Getting the type of 'c' (line 639)
        c_27596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 28), 'c', False)
        # Processing the call keyword arguments (line 639)
        kwargs_27597 = {}
        # Getting the type of 'self' (line 639)
        self_27594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 8), 'self', False)
        # Obtaining the member '_set_facecolor' of a type (line 639)
        _set_facecolor_27595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 8), self_27594, '_set_facecolor')
        # Calling _set_facecolor(args, kwargs) (line 639)
        _set_facecolor_call_result_27598 = invoke(stypy.reporting.localization.Localization(__file__, 639, 8), _set_facecolor_27595, *[c_27596], **kwargs_27597)
        
        
        # ################# End of 'set_facecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_facecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 627)
        stypy_return_type_27599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27599)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_facecolor'
        return stypy_return_type_27599


    @norecursion
    def set_facecolors(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_facecolors'
        module_type_store = module_type_store.open_function_context('set_facecolors', 641, 4, False)
        # Assigning a type to the variable 'self' (line 642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 642, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_facecolors.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_facecolors.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_facecolors.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_facecolors.__dict__.__setitem__('stypy_function_name', 'Collection.set_facecolors')
        Collection.set_facecolors.__dict__.__setitem__('stypy_param_names_list', ['c'])
        Collection.set_facecolors.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_facecolors.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_facecolors.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_facecolors.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_facecolors.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_facecolors.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_facecolors', ['c'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_facecolors', localization, ['c'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_facecolors(...)' code ##################

        unicode_27600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, 8), 'unicode', u'alias for set_facecolor')
        
        # Call to set_facecolor(...): (line 643)
        # Processing the call arguments (line 643)
        # Getting the type of 'c' (line 643)
        c_27603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 34), 'c', False)
        # Processing the call keyword arguments (line 643)
        kwargs_27604 = {}
        # Getting the type of 'self' (line 643)
        self_27601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 15), 'self', False)
        # Obtaining the member 'set_facecolor' of a type (line 643)
        set_facecolor_27602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 15), self_27601, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 643)
        set_facecolor_call_result_27605 = invoke(stypy.reporting.localization.Localization(__file__, 643, 15), set_facecolor_27602, *[c_27603], **kwargs_27604)
        
        # Assigning a type to the variable 'stypy_return_type' (line 643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 8), 'stypy_return_type', set_facecolor_call_result_27605)
        
        # ################# End of 'set_facecolors(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_facecolors' in the type store
        # Getting the type of 'stypy_return_type' (line 641)
        stypy_return_type_27606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27606)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_facecolors'
        return stypy_return_type_27606


    @norecursion
    def get_facecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_facecolor'
        module_type_store = module_type_store.open_function_context('get_facecolor', 645, 4, False)
        # Assigning a type to the variable 'self' (line 646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.get_facecolor.__dict__.__setitem__('stypy_localization', localization)
        Collection.get_facecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.get_facecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.get_facecolor.__dict__.__setitem__('stypy_function_name', 'Collection.get_facecolor')
        Collection.get_facecolor.__dict__.__setitem__('stypy_param_names_list', [])
        Collection.get_facecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.get_facecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.get_facecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.get_facecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.get_facecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.get_facecolor.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.get_facecolor', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_facecolor', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_facecolor(...)' code ##################

        # Getting the type of 'self' (line 646)
        self_27607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 15), 'self')
        # Obtaining the member '_facecolors' of a type (line 646)
        _facecolors_27608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 646, 15), self_27607, '_facecolors')
        # Assigning a type to the variable 'stypy_return_type' (line 646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 8), 'stypy_return_type', _facecolors_27608)
        
        # ################# End of 'get_facecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_facecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 645)
        stypy_return_type_27609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27609)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_facecolor'
        return stypy_return_type_27609

    
    # Assigning a Name to a Name (line 647):

    @norecursion
    def get_edgecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_edgecolor'
        module_type_store = module_type_store.open_function_context('get_edgecolor', 649, 4, False)
        # Assigning a type to the variable 'self' (line 650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.get_edgecolor.__dict__.__setitem__('stypy_localization', localization)
        Collection.get_edgecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.get_edgecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.get_edgecolor.__dict__.__setitem__('stypy_function_name', 'Collection.get_edgecolor')
        Collection.get_edgecolor.__dict__.__setitem__('stypy_param_names_list', [])
        Collection.get_edgecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.get_edgecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.get_edgecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.get_edgecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.get_edgecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.get_edgecolor.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.get_edgecolor', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_edgecolor', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_edgecolor(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 650)
        # Processing the call arguments (line 650)
        # Getting the type of 'self' (line 650)
        self_27611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 23), 'self', False)
        # Obtaining the member '_edgecolors' of a type (line 650)
        _edgecolors_27612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 23), self_27611, '_edgecolors')
        # Getting the type of 'six' (line 650)
        six_27613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 41), 'six', False)
        # Obtaining the member 'string_types' of a type (line 650)
        string_types_27614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 41), six_27613, 'string_types')
        # Processing the call keyword arguments (line 650)
        kwargs_27615 = {}
        # Getting the type of 'isinstance' (line 650)
        isinstance_27610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 12), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 650)
        isinstance_call_result_27616 = invoke(stypy.reporting.localization.Localization(__file__, 650, 12), isinstance_27610, *[_edgecolors_27612, string_types_27614], **kwargs_27615)
        
        
        # Getting the type of 'self' (line 651)
        self_27617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 23), 'self')
        # Obtaining the member '_edgecolors' of a type (line 651)
        _edgecolors_27618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 651, 23), self_27617, '_edgecolors')
        
        # Call to str(...): (line 651)
        # Processing the call arguments (line 651)
        unicode_27620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 651, 47), 'unicode', u'face')
        # Processing the call keyword arguments (line 651)
        kwargs_27621 = {}
        # Getting the type of 'str' (line 651)
        str_27619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 43), 'str', False)
        # Calling str(args, kwargs) (line 651)
        str_call_result_27622 = invoke(stypy.reporting.localization.Localization(__file__, 651, 43), str_27619, *[unicode_27620], **kwargs_27621)
        
        # Applying the binary operator '==' (line 651)
        result_eq_27623 = python_operator(stypy.reporting.localization.Localization(__file__, 651, 23), '==', _edgecolors_27618, str_call_result_27622)
        
        # Applying the binary operator 'and' (line 650)
        result_and_keyword_27624 = python_operator(stypy.reporting.localization.Localization(__file__, 650, 12), 'and', isinstance_call_result_27616, result_eq_27623)
        
        # Testing the type of an if condition (line 650)
        if_condition_27625 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 650, 8), result_and_keyword_27624)
        # Assigning a type to the variable 'if_condition_27625' (line 650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 8), 'if_condition_27625', if_condition_27625)
        # SSA begins for if statement (line 650)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to get_facecolors(...): (line 652)
        # Processing the call keyword arguments (line 652)
        kwargs_27628 = {}
        # Getting the type of 'self' (line 652)
        self_27626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 19), 'self', False)
        # Obtaining the member 'get_facecolors' of a type (line 652)
        get_facecolors_27627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 19), self_27626, 'get_facecolors')
        # Calling get_facecolors(args, kwargs) (line 652)
        get_facecolors_call_result_27629 = invoke(stypy.reporting.localization.Localization(__file__, 652, 19), get_facecolors_27627, *[], **kwargs_27628)
        
        # Assigning a type to the variable 'stypy_return_type' (line 652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 12), 'stypy_return_type', get_facecolors_call_result_27629)
        # SSA branch for the else part of an if statement (line 650)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'self' (line 654)
        self_27630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 19), 'self')
        # Obtaining the member '_edgecolors' of a type (line 654)
        _edgecolors_27631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 19), self_27630, '_edgecolors')
        # Assigning a type to the variable 'stypy_return_type' (line 654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 12), 'stypy_return_type', _edgecolors_27631)
        # SSA join for if statement (line 650)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_edgecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_edgecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 649)
        stypy_return_type_27632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27632)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_edgecolor'
        return stypy_return_type_27632

    
    # Assigning a Name to a Name (line 655):

    @norecursion
    def _set_edgecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_edgecolor'
        module_type_store = module_type_store.open_function_context('_set_edgecolor', 657, 4, False)
        # Assigning a type to the variable 'self' (line 658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 658, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection._set_edgecolor.__dict__.__setitem__('stypy_localization', localization)
        Collection._set_edgecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection._set_edgecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection._set_edgecolor.__dict__.__setitem__('stypy_function_name', 'Collection._set_edgecolor')
        Collection._set_edgecolor.__dict__.__setitem__('stypy_param_names_list', ['c'])
        Collection._set_edgecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection._set_edgecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection._set_edgecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection._set_edgecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection._set_edgecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection._set_edgecolor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection._set_edgecolor', ['c'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_edgecolor', localization, ['c'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_edgecolor(...)' code ##################

        
        # Assigning a Name to a Name (line 658):
        
        # Assigning a Name to a Name (line 658):
        # Getting the type of 'True' (line 658)
        True_27633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 26), 'True')
        # Assigning a type to the variable 'set_hatch_color' (line 658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 658, 8), 'set_hatch_color', True_27633)
        
        # Type idiom detected: calculating its left and rigth part (line 659)
        # Getting the type of 'c' (line 659)
        c_27634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 11), 'c')
        # Getting the type of 'None' (line 659)
        None_27635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 16), 'None')
        
        (may_be_27636, more_types_in_union_27637) = may_be_none(c_27634, None_27635)

        if may_be_27636:

            if more_types_in_union_27637:
                # Runtime conditional SSA (line 659)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Evaluating a boolean operation
            
            # Obtaining the type of the subscript
            unicode_27638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 660, 29), 'unicode', u'patch.force_edgecolor')
            # Getting the type of 'mpl' (line 660)
            mpl_27639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 16), 'mpl')
            # Obtaining the member 'rcParams' of a type (line 660)
            rcParams_27640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 660, 16), mpl_27639, 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 660)
            getitem___27641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 660, 16), rcParams_27640, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 660)
            subscript_call_result_27642 = invoke(stypy.reporting.localization.Localization(__file__, 660, 16), getitem___27641, unicode_27638)
            
            
            # Getting the type of 'self' (line 661)
            self_27643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 24), 'self')
            # Obtaining the member '_is_filled' of a type (line 661)
            _is_filled_27644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 24), self_27643, '_is_filled')
            # Applying the 'not' unary operator (line 661)
            result_not__27645 = python_operator(stypy.reporting.localization.Localization(__file__, 661, 20), 'not', _is_filled_27644)
            
            # Applying the binary operator 'or' (line 660)
            result_or_keyword_27646 = python_operator(stypy.reporting.localization.Localization(__file__, 660, 16), 'or', subscript_call_result_27642, result_not__27645)
            # Getting the type of 'self' (line 661)
            self_27647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 43), 'self')
            # Obtaining the member '_edge_default' of a type (line 661)
            _edge_default_27648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 43), self_27647, '_edge_default')
            # Applying the binary operator 'or' (line 660)
            result_or_keyword_27649 = python_operator(stypy.reporting.localization.Localization(__file__, 660, 16), 'or', result_or_keyword_27646, _edge_default_27648)
            
            # Testing the type of an if condition (line 660)
            if_condition_27650 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 660, 12), result_or_keyword_27649)
            # Assigning a type to the variable 'if_condition_27650' (line 660)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 660, 12), 'if_condition_27650', if_condition_27650)
            # SSA begins for if statement (line 660)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 662):
            
            # Assigning a Subscript to a Name (line 662):
            
            # Obtaining the type of the subscript
            unicode_27651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 662, 33), 'unicode', u'patch.edgecolor')
            # Getting the type of 'mpl' (line 662)
            mpl_27652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 20), 'mpl')
            # Obtaining the member 'rcParams' of a type (line 662)
            rcParams_27653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 20), mpl_27652, 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 662)
            getitem___27654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 20), rcParams_27653, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 662)
            subscript_call_result_27655 = invoke(stypy.reporting.localization.Localization(__file__, 662, 20), getitem___27654, unicode_27651)
            
            # Assigning a type to the variable 'c' (line 662)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 662, 16), 'c', subscript_call_result_27655)
            # SSA branch for the else part of an if statement (line 660)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Str to a Name (line 664):
            
            # Assigning a Str to a Name (line 664):
            unicode_27656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 664, 20), 'unicode', u'none')
            # Assigning a type to the variable 'c' (line 664)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 664, 16), 'c', unicode_27656)
            
            # Assigning a Name to a Name (line 665):
            
            # Assigning a Name to a Name (line 665):
            # Getting the type of 'False' (line 665)
            False_27657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 34), 'False')
            # Assigning a type to the variable 'set_hatch_color' (line 665)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 665, 16), 'set_hatch_color', False_27657)
            # SSA join for if statement (line 660)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_27637:
                # SSA join for if statement (line 659)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 667):
        
        # Assigning a Name to a Attribute (line 667):
        # Getting the type of 'True' (line 667)
        True_27658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 27), 'True')
        # Getting the type of 'self' (line 667)
        self_27659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 8), 'self')
        # Setting the type of the member '_is_stroked' of a type (line 667)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 8), self_27659, '_is_stroked', True_27658)
        
        
        # SSA begins for try-except statement (line 668)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        
        
        # Call to lower(...): (line 669)
        # Processing the call keyword arguments (line 669)
        kwargs_27662 = {}
        # Getting the type of 'c' (line 669)
        c_27660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 15), 'c', False)
        # Obtaining the member 'lower' of a type (line 669)
        lower_27661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 15), c_27660, 'lower')
        # Calling lower(args, kwargs) (line 669)
        lower_call_result_27663 = invoke(stypy.reporting.localization.Localization(__file__, 669, 15), lower_27661, *[], **kwargs_27662)
        
        unicode_27664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 669, 28), 'unicode', u'none')
        # Applying the binary operator '==' (line 669)
        result_eq_27665 = python_operator(stypy.reporting.localization.Localization(__file__, 669, 15), '==', lower_call_result_27663, unicode_27664)
        
        # Testing the type of an if condition (line 669)
        if_condition_27666 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 669, 12), result_eq_27665)
        # Assigning a type to the variable 'if_condition_27666' (line 669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 669, 12), 'if_condition_27666', if_condition_27666)
        # SSA begins for if statement (line 669)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 670):
        
        # Assigning a Name to a Attribute (line 670):
        # Getting the type of 'False' (line 670)
        False_27667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 35), 'False')
        # Getting the type of 'self' (line 670)
        self_27668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 16), 'self')
        # Setting the type of the member '_is_stroked' of a type (line 670)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 16), self_27668, '_is_stroked', False_27667)
        # SSA join for if statement (line 669)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 668)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 668)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 668)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 674)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        
        
        # Call to lower(...): (line 675)
        # Processing the call keyword arguments (line 675)
        kwargs_27671 = {}
        # Getting the type of 'c' (line 675)
        c_27669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 15), 'c', False)
        # Obtaining the member 'lower' of a type (line 675)
        lower_27670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 15), c_27669, 'lower')
        # Calling lower(args, kwargs) (line 675)
        lower_call_result_27672 = invoke(stypy.reporting.localization.Localization(__file__, 675, 15), lower_27670, *[], **kwargs_27671)
        
        unicode_27673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 675, 28), 'unicode', u'face')
        # Applying the binary operator '==' (line 675)
        result_eq_27674 = python_operator(stypy.reporting.localization.Localization(__file__, 675, 15), '==', lower_call_result_27672, unicode_27673)
        
        # Testing the type of an if condition (line 675)
        if_condition_27675 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 675, 12), result_eq_27674)
        # Assigning a type to the variable 'if_condition_27675' (line 675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 12), 'if_condition_27675', if_condition_27675)
        # SSA begins for if statement (line 675)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Attribute (line 676):
        
        # Assigning a Str to a Attribute (line 676):
        unicode_27676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 676, 35), 'unicode', u'face')
        # Getting the type of 'self' (line 676)
        self_27677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 16), 'self')
        # Setting the type of the member '_edgecolors' of a type (line 676)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 16), self_27677, '_edgecolors', unicode_27676)
        # Assigning a type to the variable 'stypy_return_type' (line 677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 677, 16), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 675)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 674)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 674)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 674)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 680):
        
        # Assigning a Call to a Attribute (line 680):
        
        # Call to to_rgba_array(...): (line 680)
        # Processing the call arguments (line 680)
        # Getting the type of 'c' (line 680)
        c_27680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 49), 'c', False)
        # Getting the type of 'self' (line 680)
        self_27681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 52), 'self', False)
        # Obtaining the member '_alpha' of a type (line 680)
        _alpha_27682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 52), self_27681, '_alpha')
        # Processing the call keyword arguments (line 680)
        kwargs_27683 = {}
        # Getting the type of 'mcolors' (line 680)
        mcolors_27678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 27), 'mcolors', False)
        # Obtaining the member 'to_rgba_array' of a type (line 680)
        to_rgba_array_27679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 27), mcolors_27678, 'to_rgba_array')
        # Calling to_rgba_array(args, kwargs) (line 680)
        to_rgba_array_call_result_27684 = invoke(stypy.reporting.localization.Localization(__file__, 680, 27), to_rgba_array_27679, *[c_27680, _alpha_27682], **kwargs_27683)
        
        # Getting the type of 'self' (line 680)
        self_27685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 8), 'self')
        # Setting the type of the member '_edgecolors' of a type (line 680)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 8), self_27685, '_edgecolors', to_rgba_array_call_result_27684)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'set_hatch_color' (line 681)
        set_hatch_color_27686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 11), 'set_hatch_color')
        
        # Call to len(...): (line 681)
        # Processing the call arguments (line 681)
        # Getting the type of 'self' (line 681)
        self_27688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 35), 'self', False)
        # Obtaining the member '_edgecolors' of a type (line 681)
        _edgecolors_27689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 681, 35), self_27688, '_edgecolors')
        # Processing the call keyword arguments (line 681)
        kwargs_27690 = {}
        # Getting the type of 'len' (line 681)
        len_27687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 31), 'len', False)
        # Calling len(args, kwargs) (line 681)
        len_call_result_27691 = invoke(stypy.reporting.localization.Localization(__file__, 681, 31), len_27687, *[_edgecolors_27689], **kwargs_27690)
        
        # Applying the binary operator 'and' (line 681)
        result_and_keyword_27692 = python_operator(stypy.reporting.localization.Localization(__file__, 681, 11), 'and', set_hatch_color_27686, len_call_result_27691)
        
        # Testing the type of an if condition (line 681)
        if_condition_27693 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 681, 8), result_and_keyword_27692)
        # Assigning a type to the variable 'if_condition_27693' (line 681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 681, 8), 'if_condition_27693', if_condition_27693)
        # SSA begins for if statement (line 681)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 682):
        
        # Assigning a Call to a Attribute (line 682):
        
        # Call to tuple(...): (line 682)
        # Processing the call arguments (line 682)
        
        # Obtaining the type of the subscript
        int_27695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 55), 'int')
        # Getting the type of 'self' (line 682)
        self_27696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 38), 'self', False)
        # Obtaining the member '_edgecolors' of a type (line 682)
        _edgecolors_27697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 682, 38), self_27696, '_edgecolors')
        # Obtaining the member '__getitem__' of a type (line 682)
        getitem___27698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 682, 38), _edgecolors_27697, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 682)
        subscript_call_result_27699 = invoke(stypy.reporting.localization.Localization(__file__, 682, 38), getitem___27698, int_27695)
        
        # Processing the call keyword arguments (line 682)
        kwargs_27700 = {}
        # Getting the type of 'tuple' (line 682)
        tuple_27694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 32), 'tuple', False)
        # Calling tuple(args, kwargs) (line 682)
        tuple_call_result_27701 = invoke(stypy.reporting.localization.Localization(__file__, 682, 32), tuple_27694, *[subscript_call_result_27699], **kwargs_27700)
        
        # Getting the type of 'self' (line 682)
        self_27702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 12), 'self')
        # Setting the type of the member '_hatch_color' of a type (line 682)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 682, 12), self_27702, '_hatch_color', tuple_call_result_27701)
        # SSA join for if statement (line 681)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 683):
        
        # Assigning a Name to a Attribute (line 683):
        # Getting the type of 'True' (line 683)
        True_27703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 21), 'True')
        # Getting the type of 'self' (line 683)
        self_27704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 683)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 683, 8), self_27704, 'stale', True_27703)
        
        # ################# End of '_set_edgecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_edgecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 657)
        stypy_return_type_27705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27705)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_edgecolor'
        return stypy_return_type_27705


    @norecursion
    def set_edgecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_edgecolor'
        module_type_store = module_type_store.open_function_context('set_edgecolor', 685, 4, False)
        # Assigning a type to the variable 'self' (line 686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 686, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_edgecolor.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_edgecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_edgecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_edgecolor.__dict__.__setitem__('stypy_function_name', 'Collection.set_edgecolor')
        Collection.set_edgecolor.__dict__.__setitem__('stypy_param_names_list', ['c'])
        Collection.set_edgecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_edgecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_edgecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_edgecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_edgecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_edgecolor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_edgecolor', ['c'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_edgecolor', localization, ['c'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_edgecolor(...)' code ##################

        unicode_27706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, (-1)), 'unicode', u"\n        Set the edgecolor(s) of the collection. *c* can be a\n        matplotlib color spec (all patches have same color), or a\n        sequence of specs; if it is a sequence the patches will\n        cycle through the sequence.\n\n        If *c* is 'face', the edge color will always be the same as\n        the face color.  If it is 'none', the patch boundary will not\n        be drawn.\n\n        ACCEPTS: matplotlib color spec or sequence of specs\n        ")
        
        # Assigning a Name to a Attribute (line 698):
        
        # Assigning a Name to a Attribute (line 698):
        # Getting the type of 'c' (line 698)
        c_27707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 35), 'c')
        # Getting the type of 'self' (line 698)
        self_27708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 8), 'self')
        # Setting the type of the member '_original_edgecolor' of a type (line 698)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 8), self_27708, '_original_edgecolor', c_27707)
        
        # Call to _set_edgecolor(...): (line 699)
        # Processing the call arguments (line 699)
        # Getting the type of 'c' (line 699)
        c_27711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 28), 'c', False)
        # Processing the call keyword arguments (line 699)
        kwargs_27712 = {}
        # Getting the type of 'self' (line 699)
        self_27709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 8), 'self', False)
        # Obtaining the member '_set_edgecolor' of a type (line 699)
        _set_edgecolor_27710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 8), self_27709, '_set_edgecolor')
        # Calling _set_edgecolor(args, kwargs) (line 699)
        _set_edgecolor_call_result_27713 = invoke(stypy.reporting.localization.Localization(__file__, 699, 8), _set_edgecolor_27710, *[c_27711], **kwargs_27712)
        
        
        # ################# End of 'set_edgecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_edgecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 685)
        stypy_return_type_27714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27714)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_edgecolor'
        return stypy_return_type_27714


    @norecursion
    def set_edgecolors(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_edgecolors'
        module_type_store = module_type_store.open_function_context('set_edgecolors', 701, 4, False)
        # Assigning a type to the variable 'self' (line 702)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 702, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_edgecolors.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_edgecolors.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_edgecolors.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_edgecolors.__dict__.__setitem__('stypy_function_name', 'Collection.set_edgecolors')
        Collection.set_edgecolors.__dict__.__setitem__('stypy_param_names_list', ['c'])
        Collection.set_edgecolors.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_edgecolors.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_edgecolors.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_edgecolors.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_edgecolors.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_edgecolors.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_edgecolors', ['c'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_edgecolors', localization, ['c'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_edgecolors(...)' code ##################

        unicode_27715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 702, 8), 'unicode', u'alias for set_edgecolor')
        
        # Call to set_edgecolor(...): (line 703)
        # Processing the call arguments (line 703)
        # Getting the type of 'c' (line 703)
        c_27718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 34), 'c', False)
        # Processing the call keyword arguments (line 703)
        kwargs_27719 = {}
        # Getting the type of 'self' (line 703)
        self_27716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 15), 'self', False)
        # Obtaining the member 'set_edgecolor' of a type (line 703)
        set_edgecolor_27717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 15), self_27716, 'set_edgecolor')
        # Calling set_edgecolor(args, kwargs) (line 703)
        set_edgecolor_call_result_27720 = invoke(stypy.reporting.localization.Localization(__file__, 703, 15), set_edgecolor_27717, *[c_27718], **kwargs_27719)
        
        # Assigning a type to the variable 'stypy_return_type' (line 703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'stypy_return_type', set_edgecolor_call_result_27720)
        
        # ################# End of 'set_edgecolors(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_edgecolors' in the type store
        # Getting the type of 'stypy_return_type' (line 701)
        stypy_return_type_27721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27721)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_edgecolors'
        return stypy_return_type_27721


    @norecursion
    def set_alpha(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_alpha'
        module_type_store = module_type_store.open_function_context('set_alpha', 705, 4, False)
        # Assigning a type to the variable 'self' (line 706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.set_alpha.__dict__.__setitem__('stypy_localization', localization)
        Collection.set_alpha.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.set_alpha.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.set_alpha.__dict__.__setitem__('stypy_function_name', 'Collection.set_alpha')
        Collection.set_alpha.__dict__.__setitem__('stypy_param_names_list', ['alpha'])
        Collection.set_alpha.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.set_alpha.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.set_alpha.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.set_alpha.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.set_alpha.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.set_alpha.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.set_alpha', ['alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_alpha', localization, ['alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_alpha(...)' code ##################

        unicode_27722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, (-1)), 'unicode', u'\n        Set the alpha tranparencies of the collection.  *alpha* must be\n        a float or *None*.\n\n        ACCEPTS: float or None\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 712)
        # Getting the type of 'alpha' (line 712)
        alpha_27723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 8), 'alpha')
        # Getting the type of 'None' (line 712)
        None_27724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 24), 'None')
        
        (may_be_27725, more_types_in_union_27726) = may_not_be_none(alpha_27723, None_27724)

        if may_be_27725:

            if more_types_in_union_27726:
                # Runtime conditional SSA (line 712)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # SSA begins for try-except statement (line 713)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Call to float(...): (line 714)
            # Processing the call arguments (line 714)
            # Getting the type of 'alpha' (line 714)
            alpha_27728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 22), 'alpha', False)
            # Processing the call keyword arguments (line 714)
            kwargs_27729 = {}
            # Getting the type of 'float' (line 714)
            float_27727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 16), 'float', False)
            # Calling float(args, kwargs) (line 714)
            float_call_result_27730 = invoke(stypy.reporting.localization.Localization(__file__, 714, 16), float_27727, *[alpha_27728], **kwargs_27729)
            
            # SSA branch for the except part of a try statement (line 713)
            # SSA branch for the except 'TypeError' branch of a try statement (line 713)
            module_type_store.open_ssa_branch('except')
            
            # Call to TypeError(...): (line 716)
            # Processing the call arguments (line 716)
            unicode_27732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 716, 32), 'unicode', u'alpha must be a float or None')
            # Processing the call keyword arguments (line 716)
            kwargs_27733 = {}
            # Getting the type of 'TypeError' (line 716)
            TypeError_27731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 22), 'TypeError', False)
            # Calling TypeError(args, kwargs) (line 716)
            TypeError_call_result_27734 = invoke(stypy.reporting.localization.Localization(__file__, 716, 22), TypeError_27731, *[unicode_27732], **kwargs_27733)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 716, 16), TypeError_call_result_27734, 'raise parameter', BaseException)
            # SSA join for try-except statement (line 713)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_27726:
                # SSA join for if statement (line 712)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Subscript (line 717):
        
        # Assigning a Name to a Subscript (line 717):
        # Getting the type of 'True' (line 717)
        True_27735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 36), 'True')
        # Getting the type of 'self' (line 717)
        self_27736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 8), 'self')
        # Obtaining the member 'update_dict' of a type (line 717)
        update_dict_27737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 8), self_27736, 'update_dict')
        unicode_27738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 717, 25), 'unicode', u'array')
        # Storing an element on a container (line 717)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 717, 8), update_dict_27737, (unicode_27738, True_27735))
        
        # Call to set_alpha(...): (line 718)
        # Processing the call arguments (line 718)
        # Getting the type of 'self' (line 718)
        self_27742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 32), 'self', False)
        # Getting the type of 'alpha' (line 718)
        alpha_27743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 38), 'alpha', False)
        # Processing the call keyword arguments (line 718)
        kwargs_27744 = {}
        # Getting the type of 'artist' (line 718)
        artist_27739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'artist', False)
        # Obtaining the member 'Artist' of a type (line 718)
        Artist_27740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 8), artist_27739, 'Artist')
        # Obtaining the member 'set_alpha' of a type (line 718)
        set_alpha_27741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 8), Artist_27740, 'set_alpha')
        # Calling set_alpha(args, kwargs) (line 718)
        set_alpha_call_result_27745 = invoke(stypy.reporting.localization.Localization(__file__, 718, 8), set_alpha_27741, *[self_27742, alpha_27743], **kwargs_27744)
        
        
        # Call to _set_facecolor(...): (line 719)
        # Processing the call arguments (line 719)
        # Getting the type of 'self' (line 719)
        self_27748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 28), 'self', False)
        # Obtaining the member '_original_facecolor' of a type (line 719)
        _original_facecolor_27749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 719, 28), self_27748, '_original_facecolor')
        # Processing the call keyword arguments (line 719)
        kwargs_27750 = {}
        # Getting the type of 'self' (line 719)
        self_27746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'self', False)
        # Obtaining the member '_set_facecolor' of a type (line 719)
        _set_facecolor_27747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 719, 8), self_27746, '_set_facecolor')
        # Calling _set_facecolor(args, kwargs) (line 719)
        _set_facecolor_call_result_27751 = invoke(stypy.reporting.localization.Localization(__file__, 719, 8), _set_facecolor_27747, *[_original_facecolor_27749], **kwargs_27750)
        
        
        # Call to _set_edgecolor(...): (line 720)
        # Processing the call arguments (line 720)
        # Getting the type of 'self' (line 720)
        self_27754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 28), 'self', False)
        # Obtaining the member '_original_edgecolor' of a type (line 720)
        _original_edgecolor_27755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 720, 28), self_27754, '_original_edgecolor')
        # Processing the call keyword arguments (line 720)
        kwargs_27756 = {}
        # Getting the type of 'self' (line 720)
        self_27752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 8), 'self', False)
        # Obtaining the member '_set_edgecolor' of a type (line 720)
        _set_edgecolor_27753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 720, 8), self_27752, '_set_edgecolor')
        # Calling _set_edgecolor(args, kwargs) (line 720)
        _set_edgecolor_call_result_27757 = invoke(stypy.reporting.localization.Localization(__file__, 720, 8), _set_edgecolor_27753, *[_original_edgecolor_27755], **kwargs_27756)
        
        
        # ################# End of 'set_alpha(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_alpha' in the type store
        # Getting the type of 'stypy_return_type' (line 705)
        stypy_return_type_27758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27758)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_alpha'
        return stypy_return_type_27758


    @norecursion
    def get_linewidths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_linewidths'
        module_type_store = module_type_store.open_function_context('get_linewidths', 722, 4, False)
        # Assigning a type to the variable 'self' (line 723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 723, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.get_linewidths.__dict__.__setitem__('stypy_localization', localization)
        Collection.get_linewidths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.get_linewidths.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.get_linewidths.__dict__.__setitem__('stypy_function_name', 'Collection.get_linewidths')
        Collection.get_linewidths.__dict__.__setitem__('stypy_param_names_list', [])
        Collection.get_linewidths.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.get_linewidths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.get_linewidths.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.get_linewidths.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.get_linewidths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.get_linewidths.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.get_linewidths', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_linewidths', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_linewidths(...)' code ##################

        # Getting the type of 'self' (line 723)
        self_27759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 15), 'self')
        # Obtaining the member '_linewidths' of a type (line 723)
        _linewidths_27760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 15), self_27759, '_linewidths')
        # Assigning a type to the variable 'stypy_return_type' (line 723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 723, 8), 'stypy_return_type', _linewidths_27760)
        
        # ################# End of 'get_linewidths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_linewidths' in the type store
        # Getting the type of 'stypy_return_type' (line 722)
        stypy_return_type_27761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27761)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_linewidths'
        return stypy_return_type_27761

    
    # Assigning a Name to a Name (line 724):

    @norecursion
    def get_linestyles(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_linestyles'
        module_type_store = module_type_store.open_function_context('get_linestyles', 726, 4, False)
        # Assigning a type to the variable 'self' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.get_linestyles.__dict__.__setitem__('stypy_localization', localization)
        Collection.get_linestyles.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.get_linestyles.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.get_linestyles.__dict__.__setitem__('stypy_function_name', 'Collection.get_linestyles')
        Collection.get_linestyles.__dict__.__setitem__('stypy_param_names_list', [])
        Collection.get_linestyles.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.get_linestyles.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.get_linestyles.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.get_linestyles.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.get_linestyles.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.get_linestyles.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.get_linestyles', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_linestyles', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_linestyles(...)' code ##################

        # Getting the type of 'self' (line 727)
        self_27762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 15), 'self')
        # Obtaining the member '_linestyles' of a type (line 727)
        _linestyles_27763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 15), self_27762, '_linestyles')
        # Assigning a type to the variable 'stypy_return_type' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'stypy_return_type', _linestyles_27763)
        
        # ################# End of 'get_linestyles(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_linestyles' in the type store
        # Getting the type of 'stypy_return_type' (line 726)
        stypy_return_type_27764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27764)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_linestyles'
        return stypy_return_type_27764

    
    # Multiple assignment of 2 elements.

    @norecursion
    def update_scalarmappable(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_scalarmappable'
        module_type_store = module_type_store.open_function_context('update_scalarmappable', 730, 4, False)
        # Assigning a type to the variable 'self' (line 731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.update_scalarmappable.__dict__.__setitem__('stypy_localization', localization)
        Collection.update_scalarmappable.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.update_scalarmappable.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.update_scalarmappable.__dict__.__setitem__('stypy_function_name', 'Collection.update_scalarmappable')
        Collection.update_scalarmappable.__dict__.__setitem__('stypy_param_names_list', [])
        Collection.update_scalarmappable.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.update_scalarmappable.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.update_scalarmappable.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.update_scalarmappable.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.update_scalarmappable.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.update_scalarmappable.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.update_scalarmappable', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_scalarmappable', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_scalarmappable(...)' code ##################

        unicode_27765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, (-1)), 'unicode', u'\n        If the scalar mappable array is not none, update colors\n        from scalar data\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 735)
        # Getting the type of 'self' (line 735)
        self_27766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 11), 'self')
        # Obtaining the member '_A' of a type (line 735)
        _A_27767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 11), self_27766, '_A')
        # Getting the type of 'None' (line 735)
        None_27768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 22), 'None')
        
        (may_be_27769, more_types_in_union_27770) = may_be_none(_A_27767, None_27768)

        if may_be_27769:

            if more_types_in_union_27770:
                # Runtime conditional SSA (line 735)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 736)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_27770:
                # SSA join for if statement (line 735)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'self' (line 737)
        self_27771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 11), 'self')
        # Obtaining the member '_A' of a type (line 737)
        _A_27772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 11), self_27771, '_A')
        # Obtaining the member 'ndim' of a type (line 737)
        ndim_27773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 11), _A_27772, 'ndim')
        int_27774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 737, 26), 'int')
        # Applying the binary operator '>' (line 737)
        result_gt_27775 = python_operator(stypy.reporting.localization.Localization(__file__, 737, 11), '>', ndim_27773, int_27774)
        
        # Testing the type of an if condition (line 737)
        if_condition_27776 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 737, 8), result_gt_27775)
        # Assigning a type to the variable 'if_condition_27776' (line 737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 8), 'if_condition_27776', if_condition_27776)
        # SSA begins for if statement (line 737)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 738)
        # Processing the call arguments (line 738)
        unicode_27778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 738, 29), 'unicode', u'Collections can only map rank 1 arrays')
        # Processing the call keyword arguments (line 738)
        kwargs_27779 = {}
        # Getting the type of 'ValueError' (line 738)
        ValueError_27777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 738)
        ValueError_call_result_27780 = invoke(stypy.reporting.localization.Localization(__file__, 738, 18), ValueError_27777, *[unicode_27778], **kwargs_27779)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 738, 12), ValueError_call_result_27780, 'raise parameter', BaseException)
        # SSA join for if statement (line 737)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to check_update(...): (line 739)
        # Processing the call arguments (line 739)
        unicode_27783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 739, 33), 'unicode', u'array')
        # Processing the call keyword arguments (line 739)
        kwargs_27784 = {}
        # Getting the type of 'self' (line 739)
        self_27781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 15), 'self', False)
        # Obtaining the member 'check_update' of a type (line 739)
        check_update_27782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 15), self_27781, 'check_update')
        # Calling check_update(args, kwargs) (line 739)
        check_update_call_result_27785 = invoke(stypy.reporting.localization.Localization(__file__, 739, 15), check_update_27782, *[unicode_27783], **kwargs_27784)
        
        # Applying the 'not' unary operator (line 739)
        result_not__27786 = python_operator(stypy.reporting.localization.Localization(__file__, 739, 11), 'not', check_update_call_result_27785)
        
        # Testing the type of an if condition (line 739)
        if_condition_27787 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 739, 8), result_not__27786)
        # Assigning a type to the variable 'if_condition_27787' (line 739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 739, 8), 'if_condition_27787', if_condition_27787)
        # SSA begins for if statement (line 739)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 740, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 739)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 741)
        self_27788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 11), 'self')
        # Obtaining the member '_is_filled' of a type (line 741)
        _is_filled_27789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 11), self_27788, '_is_filled')
        # Testing the type of an if condition (line 741)
        if_condition_27790 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 741, 8), _is_filled_27789)
        # Assigning a type to the variable 'if_condition_27790' (line 741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 8), 'if_condition_27790', if_condition_27790)
        # SSA begins for if statement (line 741)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 742):
        
        # Assigning a Call to a Attribute (line 742):
        
        # Call to to_rgba(...): (line 742)
        # Processing the call arguments (line 742)
        # Getting the type of 'self' (line 742)
        self_27793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 44), 'self', False)
        # Obtaining the member '_A' of a type (line 742)
        _A_27794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 44), self_27793, '_A')
        # Getting the type of 'self' (line 742)
        self_27795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 53), 'self', False)
        # Obtaining the member '_alpha' of a type (line 742)
        _alpha_27796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 53), self_27795, '_alpha')
        # Processing the call keyword arguments (line 742)
        kwargs_27797 = {}
        # Getting the type of 'self' (line 742)
        self_27791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 31), 'self', False)
        # Obtaining the member 'to_rgba' of a type (line 742)
        to_rgba_27792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 31), self_27791, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 742)
        to_rgba_call_result_27798 = invoke(stypy.reporting.localization.Localization(__file__, 742, 31), to_rgba_27792, *[_A_27794, _alpha_27796], **kwargs_27797)
        
        # Getting the type of 'self' (line 742)
        self_27799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 12), 'self')
        # Setting the type of the member '_facecolors' of a type (line 742)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 12), self_27799, '_facecolors', to_rgba_call_result_27798)
        # SSA branch for the else part of an if statement (line 741)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'self' (line 743)
        self_27800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 13), 'self')
        # Obtaining the member '_is_stroked' of a type (line 743)
        _is_stroked_27801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 13), self_27800, '_is_stroked')
        # Testing the type of an if condition (line 743)
        if_condition_27802 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 743, 13), _is_stroked_27801)
        # Assigning a type to the variable 'if_condition_27802' (line 743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 13), 'if_condition_27802', if_condition_27802)
        # SSA begins for if statement (line 743)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 744):
        
        # Assigning a Call to a Attribute (line 744):
        
        # Call to to_rgba(...): (line 744)
        # Processing the call arguments (line 744)
        # Getting the type of 'self' (line 744)
        self_27805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 44), 'self', False)
        # Obtaining the member '_A' of a type (line 744)
        _A_27806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 44), self_27805, '_A')
        # Getting the type of 'self' (line 744)
        self_27807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 53), 'self', False)
        # Obtaining the member '_alpha' of a type (line 744)
        _alpha_27808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 53), self_27807, '_alpha')
        # Processing the call keyword arguments (line 744)
        kwargs_27809 = {}
        # Getting the type of 'self' (line 744)
        self_27803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 31), 'self', False)
        # Obtaining the member 'to_rgba' of a type (line 744)
        to_rgba_27804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 31), self_27803, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 744)
        to_rgba_call_result_27810 = invoke(stypy.reporting.localization.Localization(__file__, 744, 31), to_rgba_27804, *[_A_27806, _alpha_27808], **kwargs_27809)
        
        # Getting the type of 'self' (line 744)
        self_27811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 12), 'self')
        # Setting the type of the member '_edgecolors' of a type (line 744)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 12), self_27811, '_edgecolors', to_rgba_call_result_27810)
        # SSA join for if statement (line 743)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 741)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 745):
        
        # Assigning a Name to a Attribute (line 745):
        # Getting the type of 'True' (line 745)
        True_27812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 21), 'True')
        # Getting the type of 'self' (line 745)
        self_27813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 745)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 745, 8), self_27813, 'stale', True_27812)
        
        # ################# End of 'update_scalarmappable(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_scalarmappable' in the type store
        # Getting the type of 'stypy_return_type' (line 730)
        stypy_return_type_27814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27814)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_scalarmappable'
        return stypy_return_type_27814


    @norecursion
    def get_fill(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_fill'
        module_type_store = module_type_store.open_function_context('get_fill', 747, 4, False)
        # Assigning a type to the variable 'self' (line 748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.get_fill.__dict__.__setitem__('stypy_localization', localization)
        Collection.get_fill.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.get_fill.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.get_fill.__dict__.__setitem__('stypy_function_name', 'Collection.get_fill')
        Collection.get_fill.__dict__.__setitem__('stypy_param_names_list', [])
        Collection.get_fill.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.get_fill.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.get_fill.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.get_fill.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.get_fill.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.get_fill.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.get_fill', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_fill', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_fill(...)' code ##################

        unicode_27815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 748, 8), 'unicode', u'return whether fill is set')
        # Getting the type of 'self' (line 749)
        self_27816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 15), 'self')
        # Obtaining the member '_is_filled' of a type (line 749)
        _is_filled_27817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 749, 15), self_27816, '_is_filled')
        # Assigning a type to the variable 'stypy_return_type' (line 749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 749, 8), 'stypy_return_type', _is_filled_27817)
        
        # ################# End of 'get_fill(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_fill' in the type store
        # Getting the type of 'stypy_return_type' (line 747)
        stypy_return_type_27818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27818)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_fill'
        return stypy_return_type_27818


    @norecursion
    def update_from(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_from'
        module_type_store = module_type_store.open_function_context('update_from', 751, 4, False)
        # Assigning a type to the variable 'self' (line 752)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 752, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Collection.update_from.__dict__.__setitem__('stypy_localization', localization)
        Collection.update_from.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Collection.update_from.__dict__.__setitem__('stypy_type_store', module_type_store)
        Collection.update_from.__dict__.__setitem__('stypy_function_name', 'Collection.update_from')
        Collection.update_from.__dict__.__setitem__('stypy_param_names_list', ['other'])
        Collection.update_from.__dict__.__setitem__('stypy_varargs_param_name', None)
        Collection.update_from.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Collection.update_from.__dict__.__setitem__('stypy_call_defaults', defaults)
        Collection.update_from.__dict__.__setitem__('stypy_call_varargs', varargs)
        Collection.update_from.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Collection.update_from.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Collection.update_from', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_from', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_from(...)' code ##################

        unicode_27819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 8), 'unicode', u'copy properties from other to self')
        
        # Call to update_from(...): (line 754)
        # Processing the call arguments (line 754)
        # Getting the type of 'self' (line 754)
        self_27823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 34), 'self', False)
        # Getting the type of 'other' (line 754)
        other_27824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 40), 'other', False)
        # Processing the call keyword arguments (line 754)
        kwargs_27825 = {}
        # Getting the type of 'artist' (line 754)
        artist_27820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 8), 'artist', False)
        # Obtaining the member 'Artist' of a type (line 754)
        Artist_27821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 754, 8), artist_27820, 'Artist')
        # Obtaining the member 'update_from' of a type (line 754)
        update_from_27822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 754, 8), Artist_27821, 'update_from')
        # Calling update_from(args, kwargs) (line 754)
        update_from_call_result_27826 = invoke(stypy.reporting.localization.Localization(__file__, 754, 8), update_from_27822, *[self_27823, other_27824], **kwargs_27825)
        
        
        # Assigning a Attribute to a Attribute (line 755):
        
        # Assigning a Attribute to a Attribute (line 755):
        # Getting the type of 'other' (line 755)
        other_27827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 29), 'other')
        # Obtaining the member '_antialiaseds' of a type (line 755)
        _antialiaseds_27828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 29), other_27827, '_antialiaseds')
        # Getting the type of 'self' (line 755)
        self_27829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 8), 'self')
        # Setting the type of the member '_antialiaseds' of a type (line 755)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 8), self_27829, '_antialiaseds', _antialiaseds_27828)
        
        # Assigning a Attribute to a Attribute (line 756):
        
        # Assigning a Attribute to a Attribute (line 756):
        # Getting the type of 'other' (line 756)
        other_27830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 35), 'other')
        # Obtaining the member '_original_edgecolor' of a type (line 756)
        _original_edgecolor_27831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 35), other_27830, '_original_edgecolor')
        # Getting the type of 'self' (line 756)
        self_27832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 8), 'self')
        # Setting the type of the member '_original_edgecolor' of a type (line 756)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 8), self_27832, '_original_edgecolor', _original_edgecolor_27831)
        
        # Assigning a Attribute to a Attribute (line 757):
        
        # Assigning a Attribute to a Attribute (line 757):
        # Getting the type of 'other' (line 757)
        other_27833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 27), 'other')
        # Obtaining the member '_edgecolors' of a type (line 757)
        _edgecolors_27834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 27), other_27833, '_edgecolors')
        # Getting the type of 'self' (line 757)
        self_27835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 8), 'self')
        # Setting the type of the member '_edgecolors' of a type (line 757)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 8), self_27835, '_edgecolors', _edgecolors_27834)
        
        # Assigning a Attribute to a Attribute (line 758):
        
        # Assigning a Attribute to a Attribute (line 758):
        # Getting the type of 'other' (line 758)
        other_27836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 35), 'other')
        # Obtaining the member '_original_facecolor' of a type (line 758)
        _original_facecolor_27837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 35), other_27836, '_original_facecolor')
        # Getting the type of 'self' (line 758)
        self_27838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 8), 'self')
        # Setting the type of the member '_original_facecolor' of a type (line 758)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 8), self_27838, '_original_facecolor', _original_facecolor_27837)
        
        # Assigning a Attribute to a Attribute (line 759):
        
        # Assigning a Attribute to a Attribute (line 759):
        # Getting the type of 'other' (line 759)
        other_27839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 27), 'other')
        # Obtaining the member '_facecolors' of a type (line 759)
        _facecolors_27840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 27), other_27839, '_facecolors')
        # Getting the type of 'self' (line 759)
        self_27841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 8), 'self')
        # Setting the type of the member '_facecolors' of a type (line 759)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 8), self_27841, '_facecolors', _facecolors_27840)
        
        # Assigning a Attribute to a Attribute (line 760):
        
        # Assigning a Attribute to a Attribute (line 760):
        # Getting the type of 'other' (line 760)
        other_27842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 27), 'other')
        # Obtaining the member '_linewidths' of a type (line 760)
        _linewidths_27843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 760, 27), other_27842, '_linewidths')
        # Getting the type of 'self' (line 760)
        self_27844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 8), 'self')
        # Setting the type of the member '_linewidths' of a type (line 760)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 760, 8), self_27844, '_linewidths', _linewidths_27843)
        
        # Assigning a Attribute to a Attribute (line 761):
        
        # Assigning a Attribute to a Attribute (line 761):
        # Getting the type of 'other' (line 761)
        other_27845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 27), 'other')
        # Obtaining the member '_linestyles' of a type (line 761)
        _linestyles_27846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 27), other_27845, '_linestyles')
        # Getting the type of 'self' (line 761)
        self_27847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'self')
        # Setting the type of the member '_linestyles' of a type (line 761)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 8), self_27847, '_linestyles', _linestyles_27846)
        
        # Assigning a Attribute to a Attribute (line 762):
        
        # Assigning a Attribute to a Attribute (line 762):
        # Getting the type of 'other' (line 762)
        other_27848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 30), 'other')
        # Obtaining the member '_us_linestyles' of a type (line 762)
        _us_linestyles_27849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 30), other_27848, '_us_linestyles')
        # Getting the type of 'self' (line 762)
        self_27850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 8), 'self')
        # Setting the type of the member '_us_linestyles' of a type (line 762)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 8), self_27850, '_us_linestyles', _us_linestyles_27849)
        
        # Assigning a Attribute to a Attribute (line 763):
        
        # Assigning a Attribute to a Attribute (line 763):
        # Getting the type of 'other' (line 763)
        other_27851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 27), 'other')
        # Obtaining the member '_pickradius' of a type (line 763)
        _pickradius_27852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 27), other_27851, '_pickradius')
        # Getting the type of 'self' (line 763)
        self_27853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 8), 'self')
        # Setting the type of the member '_pickradius' of a type (line 763)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 8), self_27853, '_pickradius', _pickradius_27852)
        
        # Assigning a Attribute to a Attribute (line 764):
        
        # Assigning a Attribute to a Attribute (line 764):
        # Getting the type of 'other' (line 764)
        other_27854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 22), 'other')
        # Obtaining the member '_hatch' of a type (line 764)
        _hatch_27855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 764, 22), other_27854, '_hatch')
        # Getting the type of 'self' (line 764)
        self_27856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 8), 'self')
        # Setting the type of the member '_hatch' of a type (line 764)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 764, 8), self_27856, '_hatch', _hatch_27855)
        
        # Assigning a Attribute to a Attribute (line 767):
        
        # Assigning a Attribute to a Attribute (line 767):
        # Getting the type of 'other' (line 767)
        other_27857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 18), 'other')
        # Obtaining the member '_A' of a type (line 767)
        _A_27858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 767, 18), other_27857, '_A')
        # Getting the type of 'self' (line 767)
        self_27859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 8), 'self')
        # Setting the type of the member '_A' of a type (line 767)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 767, 8), self_27859, '_A', _A_27858)
        
        # Assigning a Attribute to a Attribute (line 768):
        
        # Assigning a Attribute to a Attribute (line 768):
        # Getting the type of 'other' (line 768)
        other_27860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 20), 'other')
        # Obtaining the member 'norm' of a type (line 768)
        norm_27861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 20), other_27860, 'norm')
        # Getting the type of 'self' (line 768)
        self_27862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'self')
        # Setting the type of the member 'norm' of a type (line 768)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 8), self_27862, 'norm', norm_27861)
        
        # Assigning a Attribute to a Attribute (line 769):
        
        # Assigning a Attribute to a Attribute (line 769):
        # Getting the type of 'other' (line 769)
        other_27863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 20), 'other')
        # Obtaining the member 'cmap' of a type (line 769)
        cmap_27864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 20), other_27863, 'cmap')
        # Getting the type of 'self' (line 769)
        self_27865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 8), 'self')
        # Setting the type of the member 'cmap' of a type (line 769)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 8), self_27865, 'cmap', cmap_27864)
        
        # Assigning a Name to a Attribute (line 771):
        
        # Assigning a Name to a Attribute (line 771):
        # Getting the type of 'True' (line 771)
        True_27866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 21), 'True')
        # Getting the type of 'self' (line 771)
        self_27867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 771)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 8), self_27867, 'stale', True_27866)
        
        # ################# End of 'update_from(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_from' in the type store
        # Getting the type of 'stypy_return_type' (line 751)
        stypy_return_type_27868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27868)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_from'
        return stypy_return_type_27868


# Assigning a type to the variable 'Collection' (line 43)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 0), 'Collection', Collection)

# Assigning a Call to a Name (line 86):

# Call to zeros(...): (line 86)
# Processing the call arguments (line 86)

# Obtaining an instance of the builtin type 'tuple' (line 86)
tuple_27871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 25), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 86)
# Adding element type (line 86)
int_27872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 25), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 86, 25), tuple_27871, int_27872)
# Adding element type (line 86)
int_27873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 28), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 86, 25), tuple_27871, int_27873)

# Processing the call keyword arguments (line 86)
kwargs_27874 = {}
# Getting the type of 'np' (line 86)
np_27869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 15), 'np', False)
# Obtaining the member 'zeros' of a type (line 86)
zeros_27870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 86, 15), np_27869, 'zeros')
# Calling zeros(args, kwargs) (line 86)
zeros_call_result_27875 = invoke(stypy.reporting.localization.Localization(__file__, 86, 15), zeros_27870, *[tuple_27871], **kwargs_27874)

# Getting the type of 'Collection'
Collection_27876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Collection')
# Setting the type of the member '_offsets' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Collection_27876, '_offsets', zeros_call_result_27875)

# Assigning a Call to a Name (line 87):

# Call to IdentityTransform(...): (line 87)
# Processing the call keyword arguments (line 87)
kwargs_27879 = {}
# Getting the type of 'transforms' (line 87)
transforms_27877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 19), 'transforms', False)
# Obtaining the member 'IdentityTransform' of a type (line 87)
IdentityTransform_27878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 87, 19), transforms_27877, 'IdentityTransform')
# Calling IdentityTransform(args, kwargs) (line 87)
IdentityTransform_call_result_27880 = invoke(stypy.reporting.localization.Localization(__file__, 87, 19), IdentityTransform_27878, *[], **kwargs_27879)

# Getting the type of 'Collection'
Collection_27881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Collection')
# Setting the type of the member '_transOffset' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Collection_27881, '_transOffset', IdentityTransform_call_result_27880)

# Assigning a Call to a Name (line 94):

# Call to empty(...): (line 94)
# Processing the call arguments (line 94)

# Obtaining an instance of the builtin type 'tuple' (line 94)
tuple_27884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 28), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 94)
# Adding element type (line 94)
int_27885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 28), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 94, 28), tuple_27884, int_27885)
# Adding element type (line 94)
int_27886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 31), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 94, 28), tuple_27884, int_27886)
# Adding element type (line 94)
int_27887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 34), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 94, 28), tuple_27884, int_27887)

# Processing the call keyword arguments (line 94)
kwargs_27888 = {}
# Getting the type of 'np' (line 94)
np_27882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 18), 'np', False)
# Obtaining the member 'empty' of a type (line 94)
empty_27883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 94, 18), np_27882, 'empty')
# Calling empty(args, kwargs) (line 94)
empty_call_result_27889 = invoke(stypy.reporting.localization.Localization(__file__, 94, 18), empty_27883, *[tuple_27884], **kwargs_27888)

# Getting the type of 'Collection'
Collection_27890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Collection')
# Setting the type of the member '_transforms' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Collection_27890, '_transforms', empty_call_result_27889)

# Assigning a Name to a Name (line 98):
# Getting the type of 'False' (line 98)
False_27891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 20), 'False')
# Getting the type of 'Collection'
Collection_27892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Collection')
# Setting the type of the member '_edge_default' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Collection_27892, '_edge_default', False_27891)

# Assigning a Name to a Name (line 647):
# Getting the type of 'Collection'
Collection_27893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Collection')
# Obtaining the member 'get_facecolor' of a type
get_facecolor_27894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Collection_27893, 'get_facecolor')
# Getting the type of 'Collection'
Collection_27895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Collection')
# Setting the type of the member 'get_facecolors' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Collection_27895, 'get_facecolors', get_facecolor_27894)

# Assigning a Name to a Name (line 655):
# Getting the type of 'Collection'
Collection_27896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Collection')
# Obtaining the member 'get_edgecolor' of a type
get_edgecolor_27897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Collection_27896, 'get_edgecolor')
# Getting the type of 'Collection'
Collection_27898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Collection')
# Setting the type of the member 'get_edgecolors' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Collection_27898, 'get_edgecolors', get_edgecolor_27897)

# Assigning a Name to a Name (line 724):
# Getting the type of 'Collection'
Collection_27899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Collection')
# Obtaining the member 'get_linewidths' of a type
get_linewidths_27900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Collection_27899, 'get_linewidths')
# Getting the type of 'Collection'
Collection_27901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Collection')
# Setting the type of the member 'get_linewidth' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Collection_27901, 'get_linewidth', get_linewidths_27900)

# Assigning a Name to a Name (line 728):
# Getting the type of 'Collection'
Collection_27902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Collection')
# Obtaining the member 'get_linestyles' of a type
get_linestyles_27903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Collection_27902, 'get_linestyles')
# Getting the type of 'Collection'
Collection_27904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Collection')
# Setting the type of the member 'get_linestyle' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Collection_27904, 'get_linestyle', get_linestyles_27903)

# Assigning a Name to a Name (line 728):
# Getting the type of 'Collection'
Collection_27905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Collection')
# Obtaining the member 'get_linestyle' of a type
get_linestyle_27906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Collection_27905, 'get_linestyle')
# Getting the type of 'Collection'
Collection_27907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Collection')
# Setting the type of the member 'get_dashes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Collection_27907, 'get_dashes', get_linestyle_27906)

# Call to update(...): (line 776)
# Processing the call keyword arguments (line 776)
unicode_27911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, (-1)), 'unicode', u'    Valid Collection keyword arguments:\n\n        * *edgecolors*: None\n        * *facecolors*: None\n        * *linewidths*: None\n        * *antialiaseds*: None\n        * *offsets*: None\n        * *transOffset*: transforms.IdentityTransform()\n        * *norm*: None (optional for\n          :class:`matplotlib.cm.ScalarMappable`)\n        * *cmap*: None (optional for\n          :class:`matplotlib.cm.ScalarMappable`)\n\n    *offsets* and *transOffset* are used to translate the patch after\n    rendering (default no offsets)\n\n    If any of *edgecolors*, *facecolors*, *linewidths*, *antialiaseds*\n    are None, they default to their :data:`matplotlib.rcParams` patch\n    setting, in sequence form.\n')
keyword_27912 = unicode_27911
kwargs_27913 = {'Collection': keyword_27912}
# Getting the type of 'docstring' (line 776)
docstring_27908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 0), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 776)
interpd_27909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 0), docstring_27908, 'interpd')
# Obtaining the member 'update' of a type (line 776)
update_27910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 0), interpd_27909, 'update')
# Calling update(args, kwargs) (line 776)
update_call_result_27914 = invoke(stypy.reporting.localization.Localization(__file__, 776, 0), update_27910, *[], **kwargs_27913)

# Declaration of the '_CollectionWithSizes' class
# Getting the type of 'Collection' (line 799)
Collection_27915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 27), 'Collection')

class _CollectionWithSizes(Collection_27915, ):
    unicode_27916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, (-1)), 'unicode', u'\n    Base class for collections that have an array of sizes.\n    ')
    
    # Assigning a Num to a Name (line 803):

    @norecursion
    def get_sizes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_sizes'
        module_type_store = module_type_store.open_function_context('get_sizes', 805, 4, False)
        # Assigning a type to the variable 'self' (line 806)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _CollectionWithSizes.get_sizes.__dict__.__setitem__('stypy_localization', localization)
        _CollectionWithSizes.get_sizes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _CollectionWithSizes.get_sizes.__dict__.__setitem__('stypy_type_store', module_type_store)
        _CollectionWithSizes.get_sizes.__dict__.__setitem__('stypy_function_name', '_CollectionWithSizes.get_sizes')
        _CollectionWithSizes.get_sizes.__dict__.__setitem__('stypy_param_names_list', [])
        _CollectionWithSizes.get_sizes.__dict__.__setitem__('stypy_varargs_param_name', None)
        _CollectionWithSizes.get_sizes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _CollectionWithSizes.get_sizes.__dict__.__setitem__('stypy_call_defaults', defaults)
        _CollectionWithSizes.get_sizes.__dict__.__setitem__('stypy_call_varargs', varargs)
        _CollectionWithSizes.get_sizes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _CollectionWithSizes.get_sizes.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_CollectionWithSizes.get_sizes', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_sizes', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_sizes(...)' code ##################

        unicode_27917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, (-1)), 'unicode', u"\n        Returns the sizes of the elements in the collection.  The\n        value represents the 'area' of the element.\n\n        Returns\n        -------\n        sizes : array\n            The 'area' of each element.\n        ")
        # Getting the type of 'self' (line 815)
        self_27918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 15), 'self')
        # Obtaining the member '_sizes' of a type (line 815)
        _sizes_27919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 15), self_27918, '_sizes')
        # Assigning a type to the variable 'stypy_return_type' (line 815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 8), 'stypy_return_type', _sizes_27919)
        
        # ################# End of 'get_sizes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_sizes' in the type store
        # Getting the type of 'stypy_return_type' (line 805)
        stypy_return_type_27920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27920)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_sizes'
        return stypy_return_type_27920


    @norecursion
    def set_sizes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_27921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 817, 35), 'float')
        defaults = [float_27921]
        # Create a new context for function 'set_sizes'
        module_type_store = module_type_store.open_function_context('set_sizes', 817, 4, False)
        # Assigning a type to the variable 'self' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _CollectionWithSizes.set_sizes.__dict__.__setitem__('stypy_localization', localization)
        _CollectionWithSizes.set_sizes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _CollectionWithSizes.set_sizes.__dict__.__setitem__('stypy_type_store', module_type_store)
        _CollectionWithSizes.set_sizes.__dict__.__setitem__('stypy_function_name', '_CollectionWithSizes.set_sizes')
        _CollectionWithSizes.set_sizes.__dict__.__setitem__('stypy_param_names_list', ['sizes', 'dpi'])
        _CollectionWithSizes.set_sizes.__dict__.__setitem__('stypy_varargs_param_name', None)
        _CollectionWithSizes.set_sizes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _CollectionWithSizes.set_sizes.__dict__.__setitem__('stypy_call_defaults', defaults)
        _CollectionWithSizes.set_sizes.__dict__.__setitem__('stypy_call_varargs', varargs)
        _CollectionWithSizes.set_sizes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _CollectionWithSizes.set_sizes.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_CollectionWithSizes.set_sizes', ['sizes', 'dpi'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_sizes', localization, ['sizes', 'dpi'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_sizes(...)' code ##################

        unicode_27922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, (-1)), 'unicode', u"\n        Set the sizes of each member of the collection.\n\n        Parameters\n        ----------\n        sizes : ndarray or None\n            The size to set for each element of the collection.  The\n            value is the 'area' of the element.\n\n        dpi : float\n            The dpi of the canvas. Defaults to 72.0.\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 830)
        # Getting the type of 'sizes' (line 830)
        sizes_27923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 11), 'sizes')
        # Getting the type of 'None' (line 830)
        None_27924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 20), 'None')
        
        (may_be_27925, more_types_in_union_27926) = may_be_none(sizes_27923, None_27924)

        if may_be_27925:

            if more_types_in_union_27926:
                # Runtime conditional SSA (line 830)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 831):
            
            # Assigning a Call to a Attribute (line 831):
            
            # Call to array(...): (line 831)
            # Processing the call arguments (line 831)
            
            # Obtaining an instance of the builtin type 'list' (line 831)
            list_27929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 35), 'list')
            # Adding type elements to the builtin type 'list' instance (line 831)
            
            # Processing the call keyword arguments (line 831)
            kwargs_27930 = {}
            # Getting the type of 'np' (line 831)
            np_27927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 26), 'np', False)
            # Obtaining the member 'array' of a type (line 831)
            array_27928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 831, 26), np_27927, 'array')
            # Calling array(args, kwargs) (line 831)
            array_call_result_27931 = invoke(stypy.reporting.localization.Localization(__file__, 831, 26), array_27928, *[list_27929], **kwargs_27930)
            
            # Getting the type of 'self' (line 831)
            self_27932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 12), 'self')
            # Setting the type of the member '_sizes' of a type (line 831)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 831, 12), self_27932, '_sizes', array_call_result_27931)
            
            # Assigning a Call to a Attribute (line 832):
            
            # Assigning a Call to a Attribute (line 832):
            
            # Call to empty(...): (line 832)
            # Processing the call arguments (line 832)
            
            # Obtaining an instance of the builtin type 'tuple' (line 832)
            tuple_27935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 41), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 832)
            # Adding element type (line 832)
            int_27936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 41), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 832, 41), tuple_27935, int_27936)
            # Adding element type (line 832)
            int_27937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 44), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 832, 41), tuple_27935, int_27937)
            # Adding element type (line 832)
            int_27938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 47), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 832, 41), tuple_27935, int_27938)
            
            # Processing the call keyword arguments (line 832)
            kwargs_27939 = {}
            # Getting the type of 'np' (line 832)
            np_27933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 31), 'np', False)
            # Obtaining the member 'empty' of a type (line 832)
            empty_27934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 832, 31), np_27933, 'empty')
            # Calling empty(args, kwargs) (line 832)
            empty_call_result_27940 = invoke(stypy.reporting.localization.Localization(__file__, 832, 31), empty_27934, *[tuple_27935], **kwargs_27939)
            
            # Getting the type of 'self' (line 832)
            self_27941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 12), 'self')
            # Setting the type of the member '_transforms' of a type (line 832)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 832, 12), self_27941, '_transforms', empty_call_result_27940)

            if more_types_in_union_27926:
                # Runtime conditional SSA for else branch (line 830)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_27925) or more_types_in_union_27926):
            
            # Assigning a Call to a Attribute (line 834):
            
            # Assigning a Call to a Attribute (line 834):
            
            # Call to asarray(...): (line 834)
            # Processing the call arguments (line 834)
            # Getting the type of 'sizes' (line 834)
            sizes_27944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 37), 'sizes', False)
            # Processing the call keyword arguments (line 834)
            kwargs_27945 = {}
            # Getting the type of 'np' (line 834)
            np_27942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 26), 'np', False)
            # Obtaining the member 'asarray' of a type (line 834)
            asarray_27943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 26), np_27942, 'asarray')
            # Calling asarray(args, kwargs) (line 834)
            asarray_call_result_27946 = invoke(stypy.reporting.localization.Localization(__file__, 834, 26), asarray_27943, *[sizes_27944], **kwargs_27945)
            
            # Getting the type of 'self' (line 834)
            self_27947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 12), 'self')
            # Setting the type of the member '_sizes' of a type (line 834)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 12), self_27947, '_sizes', asarray_call_result_27946)
            
            # Assigning a Call to a Attribute (line 835):
            
            # Assigning a Call to a Attribute (line 835):
            
            # Call to zeros(...): (line 835)
            # Processing the call arguments (line 835)
            
            # Obtaining an instance of the builtin type 'tuple' (line 835)
            tuple_27950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 835, 41), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 835)
            # Adding element type (line 835)
            
            # Call to len(...): (line 835)
            # Processing the call arguments (line 835)
            # Getting the type of 'self' (line 835)
            self_27952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 45), 'self', False)
            # Obtaining the member '_sizes' of a type (line 835)
            _sizes_27953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 45), self_27952, '_sizes')
            # Processing the call keyword arguments (line 835)
            kwargs_27954 = {}
            # Getting the type of 'len' (line 835)
            len_27951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 41), 'len', False)
            # Calling len(args, kwargs) (line 835)
            len_call_result_27955 = invoke(stypy.reporting.localization.Localization(__file__, 835, 41), len_27951, *[_sizes_27953], **kwargs_27954)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 835, 41), tuple_27950, len_call_result_27955)
            # Adding element type (line 835)
            int_27956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 835, 59), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 835, 41), tuple_27950, int_27956)
            # Adding element type (line 835)
            int_27957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 835, 62), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 835, 41), tuple_27950, int_27957)
            
            # Processing the call keyword arguments (line 835)
            kwargs_27958 = {}
            # Getting the type of 'np' (line 835)
            np_27948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 31), 'np', False)
            # Obtaining the member 'zeros' of a type (line 835)
            zeros_27949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 31), np_27948, 'zeros')
            # Calling zeros(args, kwargs) (line 835)
            zeros_call_result_27959 = invoke(stypy.reporting.localization.Localization(__file__, 835, 31), zeros_27949, *[tuple_27950], **kwargs_27958)
            
            # Getting the type of 'self' (line 835)
            self_27960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 12), 'self')
            # Setting the type of the member '_transforms' of a type (line 835)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 12), self_27960, '_transforms', zeros_call_result_27959)
            
            # Assigning a BinOp to a Name (line 836):
            
            # Assigning a BinOp to a Name (line 836):
            
            # Call to sqrt(...): (line 836)
            # Processing the call arguments (line 836)
            # Getting the type of 'self' (line 836)
            self_27963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 28), 'self', False)
            # Obtaining the member '_sizes' of a type (line 836)
            _sizes_27964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 28), self_27963, '_sizes')
            # Processing the call keyword arguments (line 836)
            kwargs_27965 = {}
            # Getting the type of 'np' (line 836)
            np_27961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 20), 'np', False)
            # Obtaining the member 'sqrt' of a type (line 836)
            sqrt_27962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 20), np_27961, 'sqrt')
            # Calling sqrt(args, kwargs) (line 836)
            sqrt_call_result_27966 = invoke(stypy.reporting.localization.Localization(__file__, 836, 20), sqrt_27962, *[_sizes_27964], **kwargs_27965)
            
            # Getting the type of 'dpi' (line 836)
            dpi_27967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 43), 'dpi')
            # Applying the binary operator '*' (line 836)
            result_mul_27968 = python_operator(stypy.reporting.localization.Localization(__file__, 836, 20), '*', sqrt_call_result_27966, dpi_27967)
            
            float_27969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 836, 49), 'float')
            # Applying the binary operator 'div' (line 836)
            result_div_27970 = python_operator(stypy.reporting.localization.Localization(__file__, 836, 47), 'div', result_mul_27968, float_27969)
            
            # Getting the type of 'self' (line 836)
            self_27971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 56), 'self')
            # Obtaining the member '_factor' of a type (line 836)
            _factor_27972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 56), self_27971, '_factor')
            # Applying the binary operator '*' (line 836)
            result_mul_27973 = python_operator(stypy.reporting.localization.Localization(__file__, 836, 54), '*', result_div_27970, _factor_27972)
            
            # Assigning a type to the variable 'scale' (line 836)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 836, 12), 'scale', result_mul_27973)
            
            # Assigning a Name to a Subscript (line 837):
            
            # Assigning a Name to a Subscript (line 837):
            # Getting the type of 'scale' (line 837)
            scale_27974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 40), 'scale')
            # Getting the type of 'self' (line 837)
            self_27975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 12), 'self')
            # Obtaining the member '_transforms' of a type (line 837)
            _transforms_27976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 12), self_27975, '_transforms')
            slice_27977 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 837, 12), None, None, None)
            int_27978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 837, 32), 'int')
            int_27979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 837, 35), 'int')
            # Storing an element on a container (line 837)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 837, 12), _transforms_27976, ((slice_27977, int_27978, int_27979), scale_27974))
            
            # Assigning a Name to a Subscript (line 838):
            
            # Assigning a Name to a Subscript (line 838):
            # Getting the type of 'scale' (line 838)
            scale_27980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 40), 'scale')
            # Getting the type of 'self' (line 838)
            self_27981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 12), 'self')
            # Obtaining the member '_transforms' of a type (line 838)
            _transforms_27982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 12), self_27981, '_transforms')
            slice_27983 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 838, 12), None, None, None)
            int_27984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 838, 32), 'int')
            int_27985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 838, 35), 'int')
            # Storing an element on a container (line 838)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 838, 12), _transforms_27982, ((slice_27983, int_27984, int_27985), scale_27980))
            
            # Assigning a Num to a Subscript (line 839):
            
            # Assigning a Num to a Subscript (line 839):
            float_27986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 839, 40), 'float')
            # Getting the type of 'self' (line 839)
            self_27987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 12), 'self')
            # Obtaining the member '_transforms' of a type (line 839)
            _transforms_27988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 12), self_27987, '_transforms')
            slice_27989 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 839, 12), None, None, None)
            int_27990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 839, 32), 'int')
            int_27991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 839, 35), 'int')
            # Storing an element on a container (line 839)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 839, 12), _transforms_27988, ((slice_27989, int_27990, int_27991), float_27986))

            if (may_be_27925 and more_types_in_union_27926):
                # SSA join for if statement (line 830)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 840):
        
        # Assigning a Name to a Attribute (line 840):
        # Getting the type of 'True' (line 840)
        True_27992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 21), 'True')
        # Getting the type of 'self' (line 840)
        self_27993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 840)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 840, 8), self_27993, 'stale', True_27992)
        
        # ################# End of 'set_sizes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_sizes' in the type store
        # Getting the type of 'stypy_return_type' (line 817)
        stypy_return_type_27994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_27994)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_sizes'
        return stypy_return_type_27994


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 842, 4, False)
        # Assigning a type to the variable 'self' (line 843)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 843, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _CollectionWithSizes.draw.__dict__.__setitem__('stypy_localization', localization)
        _CollectionWithSizes.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _CollectionWithSizes.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        _CollectionWithSizes.draw.__dict__.__setitem__('stypy_function_name', '_CollectionWithSizes.draw')
        _CollectionWithSizes.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        _CollectionWithSizes.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        _CollectionWithSizes.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _CollectionWithSizes.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        _CollectionWithSizes.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        _CollectionWithSizes.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _CollectionWithSizes.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_CollectionWithSizes.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        
        # Call to set_sizes(...): (line 844)
        # Processing the call arguments (line 844)
        # Getting the type of 'self' (line 844)
        self_27997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 23), 'self', False)
        # Obtaining the member '_sizes' of a type (line 844)
        _sizes_27998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 844, 23), self_27997, '_sizes')
        # Getting the type of 'self' (line 844)
        self_27999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 36), 'self', False)
        # Obtaining the member 'figure' of a type (line 844)
        figure_28000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 844, 36), self_27999, 'figure')
        # Obtaining the member 'dpi' of a type (line 844)
        dpi_28001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 844, 36), figure_28000, 'dpi')
        # Processing the call keyword arguments (line 844)
        kwargs_28002 = {}
        # Getting the type of 'self' (line 844)
        self_27995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 8), 'self', False)
        # Obtaining the member 'set_sizes' of a type (line 844)
        set_sizes_27996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 844, 8), self_27995, 'set_sizes')
        # Calling set_sizes(args, kwargs) (line 844)
        set_sizes_call_result_28003 = invoke(stypy.reporting.localization.Localization(__file__, 844, 8), set_sizes_27996, *[_sizes_27998, dpi_28001], **kwargs_28002)
        
        
        # Call to draw(...): (line 845)
        # Processing the call arguments (line 845)
        # Getting the type of 'self' (line 845)
        self_28006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 24), 'self', False)
        # Getting the type of 'renderer' (line 845)
        renderer_28007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 30), 'renderer', False)
        # Processing the call keyword arguments (line 845)
        kwargs_28008 = {}
        # Getting the type of 'Collection' (line 845)
        Collection_28004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 8), 'Collection', False)
        # Obtaining the member 'draw' of a type (line 845)
        draw_28005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 845, 8), Collection_28004, 'draw')
        # Calling draw(args, kwargs) (line 845)
        draw_call_result_28009 = invoke(stypy.reporting.localization.Localization(__file__, 845, 8), draw_28005, *[self_28006, renderer_28007], **kwargs_28008)
        
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 842)
        stypy_return_type_28010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28010)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_28010


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 799, 0, False)
        # Assigning a type to the variable 'self' (line 800)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 800, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_CollectionWithSizes.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable '_CollectionWithSizes' (line 799)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 0), '_CollectionWithSizes', _CollectionWithSizes)

# Assigning a Num to a Name (line 803):
float_28011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, 14), 'float')
# Getting the type of '_CollectionWithSizes'
_CollectionWithSizes_28012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_CollectionWithSizes')
# Setting the type of the member '_factor' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _CollectionWithSizes_28012, '_factor', float_28011)
# Declaration of the 'PathCollection' class
# Getting the type of '_CollectionWithSizes' (line 848)
_CollectionWithSizes_28013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 21), '_CollectionWithSizes')

class PathCollection(_CollectionWithSizes_28013, ):
    unicode_28014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 851, (-1)), 'unicode', u'\n    This is the most basic :class:`Collection` subclass.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 853)
        None_28015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 36), 'None')
        defaults = [None_28015]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 852, 4, False)
        # Assigning a type to the variable 'self' (line 853)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 853, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PathCollection.__init__', ['paths', 'sizes'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['paths', 'sizes'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_28016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 859, (-1)), 'unicode', u'\n        *paths* is a sequence of :class:`matplotlib.path.Path`\n        instances.\n\n        %(Collection)s\n        ')
        
        # Call to __init__(...): (line 861)
        # Processing the call arguments (line 861)
        # Getting the type of 'self' (line 861)
        self_28019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 28), 'self', False)
        # Processing the call keyword arguments (line 861)
        # Getting the type of 'kwargs' (line 861)
        kwargs_28020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 36), 'kwargs', False)
        kwargs_28021 = {'kwargs_28020': kwargs_28020}
        # Getting the type of 'Collection' (line 861)
        Collection_28017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 8), 'Collection', False)
        # Obtaining the member '__init__' of a type (line 861)
        init___28018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 8), Collection_28017, '__init__')
        # Calling __init__(args, kwargs) (line 861)
        init___call_result_28022 = invoke(stypy.reporting.localization.Localization(__file__, 861, 8), init___28018, *[self_28019], **kwargs_28021)
        
        
        # Call to set_paths(...): (line 862)
        # Processing the call arguments (line 862)
        # Getting the type of 'paths' (line 862)
        paths_28025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 23), 'paths', False)
        # Processing the call keyword arguments (line 862)
        kwargs_28026 = {}
        # Getting the type of 'self' (line 862)
        self_28023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 8), 'self', False)
        # Obtaining the member 'set_paths' of a type (line 862)
        set_paths_28024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 862, 8), self_28023, 'set_paths')
        # Calling set_paths(args, kwargs) (line 862)
        set_paths_call_result_28027 = invoke(stypy.reporting.localization.Localization(__file__, 862, 8), set_paths_28024, *[paths_28025], **kwargs_28026)
        
        
        # Call to set_sizes(...): (line 863)
        # Processing the call arguments (line 863)
        # Getting the type of 'sizes' (line 863)
        sizes_28030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 23), 'sizes', False)
        # Processing the call keyword arguments (line 863)
        kwargs_28031 = {}
        # Getting the type of 'self' (line 863)
        self_28028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 8), 'self', False)
        # Obtaining the member 'set_sizes' of a type (line 863)
        set_sizes_28029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 8), self_28028, 'set_sizes')
        # Calling set_sizes(args, kwargs) (line 863)
        set_sizes_call_result_28032 = invoke(stypy.reporting.localization.Localization(__file__, 863, 8), set_sizes_28029, *[sizes_28030], **kwargs_28031)
        
        
        # Assigning a Name to a Attribute (line 864):
        
        # Assigning a Name to a Attribute (line 864):
        # Getting the type of 'True' (line 864)
        True_28033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 21), 'True')
        # Getting the type of 'self' (line 864)
        self_28034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 864)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 864, 8), self_28034, 'stale', True_28033)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_paths'
        module_type_store = module_type_store.open_function_context('set_paths', 866, 4, False)
        # Assigning a type to the variable 'self' (line 867)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 867, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PathCollection.set_paths.__dict__.__setitem__('stypy_localization', localization)
        PathCollection.set_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PathCollection.set_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        PathCollection.set_paths.__dict__.__setitem__('stypy_function_name', 'PathCollection.set_paths')
        PathCollection.set_paths.__dict__.__setitem__('stypy_param_names_list', ['paths'])
        PathCollection.set_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        PathCollection.set_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PathCollection.set_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        PathCollection.set_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        PathCollection.set_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PathCollection.set_paths.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PathCollection.set_paths', ['paths'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_paths', localization, ['paths'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_paths(...)' code ##################

        
        # Assigning a Name to a Attribute (line 867):
        
        # Assigning a Name to a Attribute (line 867):
        # Getting the type of 'paths' (line 867)
        paths_28035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 22), 'paths')
        # Getting the type of 'self' (line 867)
        self_28036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 8), 'self')
        # Setting the type of the member '_paths' of a type (line 867)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 8), self_28036, '_paths', paths_28035)
        
        # Assigning a Name to a Attribute (line 868):
        
        # Assigning a Name to a Attribute (line 868):
        # Getting the type of 'True' (line 868)
        True_28037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 21), 'True')
        # Getting the type of 'self' (line 868)
        self_28038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 868)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 8), self_28038, 'stale', True_28037)
        
        # ################# End of 'set_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 866)
        stypy_return_type_28039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28039)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_paths'
        return stypy_return_type_28039


    @norecursion
    def get_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_paths'
        module_type_store = module_type_store.open_function_context('get_paths', 870, 4, False)
        # Assigning a type to the variable 'self' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PathCollection.get_paths.__dict__.__setitem__('stypy_localization', localization)
        PathCollection.get_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PathCollection.get_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        PathCollection.get_paths.__dict__.__setitem__('stypy_function_name', 'PathCollection.get_paths')
        PathCollection.get_paths.__dict__.__setitem__('stypy_param_names_list', [])
        PathCollection.get_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        PathCollection.get_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PathCollection.get_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        PathCollection.get_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        PathCollection.get_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PathCollection.get_paths.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PathCollection.get_paths', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_paths', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_paths(...)' code ##################

        # Getting the type of 'self' (line 871)
        self_28040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 15), 'self')
        # Obtaining the member '_paths' of a type (line 871)
        _paths_28041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 15), self_28040, '_paths')
        # Assigning a type to the variable 'stypy_return_type' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 8), 'stypy_return_type', _paths_28041)
        
        # ################# End of 'get_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 870)
        stypy_return_type_28042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28042)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_paths'
        return stypy_return_type_28042


# Assigning a type to the variable 'PathCollection' (line 848)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 848, 0), 'PathCollection', PathCollection)
# Declaration of the 'PolyCollection' class
# Getting the type of '_CollectionWithSizes' (line 874)
_CollectionWithSizes_28043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 21), '_CollectionWithSizes')

class PolyCollection(_CollectionWithSizes_28043, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 876)
        None_28044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 36), 'None')
        # Getting the type of 'True' (line 876)
        True_28045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 49), 'True')
        defaults = [None_28044, True_28045]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 875, 4, False)
        # Assigning a type to the variable 'self' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolyCollection.__init__', ['verts', 'sizes', 'closed'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['verts', 'sizes', 'closed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_28046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 894, (-1)), 'unicode', u'\n        *verts* is a sequence of ( *verts0*, *verts1*, ...) where\n        *verts_i* is a sequence of *xy* tuples of vertices, or an\n        equivalent :mod:`numpy` array of shape (*nv*, 2).\n\n        *sizes* is *None* (default) or a sequence of floats that\n        scale the corresponding *verts_i*.  The scaling is applied\n        before the Artist master transform; if the latter is an identity\n        transform, then the overall scaling is such that if\n        *verts_i* specify a unit square, then *sizes_i* is the area\n        of that square in points^2.\n        If len(*sizes*) < *nv*, the additional values will be\n        taken cyclically from the array.\n\n        *closed*, when *True*, will explicitly close the polygon.\n\n        %(Collection)s\n        ')
        
        # Call to __init__(...): (line 895)
        # Processing the call arguments (line 895)
        # Getting the type of 'self' (line 895)
        self_28049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 28), 'self', False)
        # Processing the call keyword arguments (line 895)
        # Getting the type of 'kwargs' (line 895)
        kwargs_28050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 36), 'kwargs', False)
        kwargs_28051 = {'kwargs_28050': kwargs_28050}
        # Getting the type of 'Collection' (line 895)
        Collection_28047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 8), 'Collection', False)
        # Obtaining the member '__init__' of a type (line 895)
        init___28048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 895, 8), Collection_28047, '__init__')
        # Calling __init__(args, kwargs) (line 895)
        init___call_result_28052 = invoke(stypy.reporting.localization.Localization(__file__, 895, 8), init___28048, *[self_28049], **kwargs_28051)
        
        
        # Call to set_sizes(...): (line 896)
        # Processing the call arguments (line 896)
        # Getting the type of 'sizes' (line 896)
        sizes_28055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 23), 'sizes', False)
        # Processing the call keyword arguments (line 896)
        kwargs_28056 = {}
        # Getting the type of 'self' (line 896)
        self_28053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 8), 'self', False)
        # Obtaining the member 'set_sizes' of a type (line 896)
        set_sizes_28054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 896, 8), self_28053, 'set_sizes')
        # Calling set_sizes(args, kwargs) (line 896)
        set_sizes_call_result_28057 = invoke(stypy.reporting.localization.Localization(__file__, 896, 8), set_sizes_28054, *[sizes_28055], **kwargs_28056)
        
        
        # Call to set_verts(...): (line 897)
        # Processing the call arguments (line 897)
        # Getting the type of 'verts' (line 897)
        verts_28060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 23), 'verts', False)
        # Getting the type of 'closed' (line 897)
        closed_28061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 30), 'closed', False)
        # Processing the call keyword arguments (line 897)
        kwargs_28062 = {}
        # Getting the type of 'self' (line 897)
        self_28058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 8), 'self', False)
        # Obtaining the member 'set_verts' of a type (line 897)
        set_verts_28059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 897, 8), self_28058, 'set_verts')
        # Calling set_verts(args, kwargs) (line 897)
        set_verts_call_result_28063 = invoke(stypy.reporting.localization.Localization(__file__, 897, 8), set_verts_28059, *[verts_28060, closed_28061], **kwargs_28062)
        
        
        # Assigning a Name to a Attribute (line 898):
        
        # Assigning a Name to a Attribute (line 898):
        # Getting the type of 'True' (line 898)
        True_28064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 21), 'True')
        # Getting the type of 'self' (line 898)
        self_28065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 898)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 8), self_28065, 'stale', True_28064)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_verts(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 900)
        True_28066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 38), 'True')
        defaults = [True_28066]
        # Create a new context for function 'set_verts'
        module_type_store = module_type_store.open_function_context('set_verts', 900, 4, False)
        # Assigning a type to the variable 'self' (line 901)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 901, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolyCollection.set_verts.__dict__.__setitem__('stypy_localization', localization)
        PolyCollection.set_verts.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolyCollection.set_verts.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolyCollection.set_verts.__dict__.__setitem__('stypy_function_name', 'PolyCollection.set_verts')
        PolyCollection.set_verts.__dict__.__setitem__('stypy_param_names_list', ['verts', 'closed'])
        PolyCollection.set_verts.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolyCollection.set_verts.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolyCollection.set_verts.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolyCollection.set_verts.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolyCollection.set_verts.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolyCollection.set_verts.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolyCollection.set_verts', ['verts', 'closed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_verts', localization, ['verts', 'closed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_verts(...)' code ##################

        unicode_28067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 901, 8), 'unicode', u'This allows one to delay initialization of the vertices.')
        
        
        # Call to isinstance(...): (line 902)
        # Processing the call arguments (line 902)
        # Getting the type of 'verts' (line 902)
        verts_28069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 22), 'verts', False)
        # Getting the type of 'np' (line 902)
        np_28070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 29), 'np', False)
        # Obtaining the member 'ma' of a type (line 902)
        ma_28071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 902, 29), np_28070, 'ma')
        # Obtaining the member 'MaskedArray' of a type (line 902)
        MaskedArray_28072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 902, 29), ma_28071, 'MaskedArray')
        # Processing the call keyword arguments (line 902)
        kwargs_28073 = {}
        # Getting the type of 'isinstance' (line 902)
        isinstance_28068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 902)
        isinstance_call_result_28074 = invoke(stypy.reporting.localization.Localization(__file__, 902, 11), isinstance_28068, *[verts_28069, MaskedArray_28072], **kwargs_28073)
        
        # Testing the type of an if condition (line 902)
        if_condition_28075 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 902, 8), isinstance_call_result_28074)
        # Assigning a type to the variable 'if_condition_28075' (line 902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 902, 8), 'if_condition_28075', if_condition_28075)
        # SSA begins for if statement (line 902)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 903):
        
        # Assigning a Call to a Name (line 903):
        
        # Call to filled(...): (line 903)
        # Processing the call arguments (line 903)
        # Getting the type of 'np' (line 903)
        np_28082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 47), 'np', False)
        # Obtaining the member 'nan' of a type (line 903)
        nan_28083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 47), np_28082, 'nan')
        # Processing the call keyword arguments (line 903)
        kwargs_28084 = {}
        
        # Call to astype(...): (line 903)
        # Processing the call arguments (line 903)
        # Getting the type of 'float' (line 903)
        float_28078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 33), 'float', False)
        # Processing the call keyword arguments (line 903)
        kwargs_28079 = {}
        # Getting the type of 'verts' (line 903)
        verts_28076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 20), 'verts', False)
        # Obtaining the member 'astype' of a type (line 903)
        astype_28077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 20), verts_28076, 'astype')
        # Calling astype(args, kwargs) (line 903)
        astype_call_result_28080 = invoke(stypy.reporting.localization.Localization(__file__, 903, 20), astype_28077, *[float_28078], **kwargs_28079)
        
        # Obtaining the member 'filled' of a type (line 903)
        filled_28081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 20), astype_call_result_28080, 'filled')
        # Calling filled(args, kwargs) (line 903)
        filled_call_result_28085 = invoke(stypy.reporting.localization.Localization(__file__, 903, 20), filled_28081, *[nan_28083], **kwargs_28084)
        
        # Assigning a type to the variable 'verts' (line 903)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 903, 12), 'verts', filled_call_result_28085)
        # SSA join for if statement (line 902)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'closed' (line 905)
        closed_28086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 11), 'closed')
        # Testing the type of an if condition (line 905)
        if_condition_28087 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 905, 8), closed_28086)
        # Assigning a type to the variable 'if_condition_28087' (line 905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 8), 'if_condition_28087', if_condition_28087)
        # SSA begins for if statement (line 905)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Attribute (line 906):
        
        # Assigning a List to a Attribute (line 906):
        
        # Obtaining an instance of the builtin type 'list' (line 906)
        list_28088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 906, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 906)
        
        # Getting the type of 'self' (line 906)
        self_28089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 12), 'self')
        # Setting the type of the member '_paths' of a type (line 906)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 906, 12), self_28089, '_paths', list_28088)
        
        # Getting the type of 'verts' (line 907)
        verts_28090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 907, 22), 'verts')
        # Testing the type of a for loop iterable (line 907)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 907, 12), verts_28090)
        # Getting the type of the for loop variable (line 907)
        for_loop_var_28091 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 907, 12), verts_28090)
        # Assigning a type to the variable 'xy' (line 907)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 907, 12), 'xy', for_loop_var_28091)
        # SSA begins for a for statement (line 907)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to len(...): (line 908)
        # Processing the call arguments (line 908)
        # Getting the type of 'xy' (line 908)
        xy_28093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 23), 'xy', False)
        # Processing the call keyword arguments (line 908)
        kwargs_28094 = {}
        # Getting the type of 'len' (line 908)
        len_28092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 19), 'len', False)
        # Calling len(args, kwargs) (line 908)
        len_call_result_28095 = invoke(stypy.reporting.localization.Localization(__file__, 908, 19), len_28092, *[xy_28093], **kwargs_28094)
        
        # Testing the type of an if condition (line 908)
        if_condition_28096 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 908, 16), len_call_result_28095)
        # Assigning a type to the variable 'if_condition_28096' (line 908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 16), 'if_condition_28096', if_condition_28096)
        # SSA begins for if statement (line 908)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to isinstance(...): (line 909)
        # Processing the call arguments (line 909)
        # Getting the type of 'xy' (line 909)
        xy_28098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 34), 'xy', False)
        # Getting the type of 'np' (line 909)
        np_28099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 38), 'np', False)
        # Obtaining the member 'ma' of a type (line 909)
        ma_28100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 909, 38), np_28099, 'ma')
        # Obtaining the member 'MaskedArray' of a type (line 909)
        MaskedArray_28101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 909, 38), ma_28100, 'MaskedArray')
        # Processing the call keyword arguments (line 909)
        kwargs_28102 = {}
        # Getting the type of 'isinstance' (line 909)
        isinstance_28097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 23), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 909)
        isinstance_call_result_28103 = invoke(stypy.reporting.localization.Localization(__file__, 909, 23), isinstance_28097, *[xy_28098, MaskedArray_28101], **kwargs_28102)
        
        # Testing the type of an if condition (line 909)
        if_condition_28104 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 909, 20), isinstance_call_result_28103)
        # Assigning a type to the variable 'if_condition_28104' (line 909)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 20), 'if_condition_28104', if_condition_28104)
        # SSA begins for if statement (line 909)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 910):
        
        # Assigning a Call to a Name (line 910):
        
        # Call to concatenate(...): (line 910)
        # Processing the call arguments (line 910)
        
        # Obtaining an instance of the builtin type 'list' (line 910)
        list_28108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 910, 47), 'list')
        # Adding type elements to the builtin type 'list' instance (line 910)
        # Adding element type (line 910)
        # Getting the type of 'xy' (line 910)
        xy_28109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 48), 'xy', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 910, 47), list_28108, xy_28109)
        # Adding element type (line 910)
        
        # Obtaining the type of the subscript
        int_28110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 910, 55), 'int')
        int_28111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 910, 57), 'int')
        slice_28112 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 910, 52), int_28110, int_28111, None)
        # Getting the type of 'xy' (line 910)
        xy_28113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 52), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 910)
        getitem___28114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 910, 52), xy_28113, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 910)
        subscript_call_result_28115 = invoke(stypy.reporting.localization.Localization(__file__, 910, 52), getitem___28114, slice_28112)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 910, 47), list_28108, subscript_call_result_28115)
        
        # Processing the call keyword arguments (line 910)
        kwargs_28116 = {}
        # Getting the type of 'np' (line 910)
        np_28105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 29), 'np', False)
        # Obtaining the member 'ma' of a type (line 910)
        ma_28106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 910, 29), np_28105, 'ma')
        # Obtaining the member 'concatenate' of a type (line 910)
        concatenate_28107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 910, 29), ma_28106, 'concatenate')
        # Calling concatenate(args, kwargs) (line 910)
        concatenate_call_result_28117 = invoke(stypy.reporting.localization.Localization(__file__, 910, 29), concatenate_28107, *[list_28108], **kwargs_28116)
        
        # Assigning a type to the variable 'xy' (line 910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 24), 'xy', concatenate_call_result_28117)
        # SSA branch for the else part of an if statement (line 909)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 912):
        
        # Assigning a Call to a Name (line 912):
        
        # Call to asarray(...): (line 912)
        # Processing the call arguments (line 912)
        # Getting the type of 'xy' (line 912)
        xy_28120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 40), 'xy', False)
        # Processing the call keyword arguments (line 912)
        kwargs_28121 = {}
        # Getting the type of 'np' (line 912)
        np_28118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 29), 'np', False)
        # Obtaining the member 'asarray' of a type (line 912)
        asarray_28119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 29), np_28118, 'asarray')
        # Calling asarray(args, kwargs) (line 912)
        asarray_call_result_28122 = invoke(stypy.reporting.localization.Localization(__file__, 912, 29), asarray_28119, *[xy_28120], **kwargs_28121)
        
        # Assigning a type to the variable 'xy' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 24), 'xy', asarray_call_result_28122)
        
        # Assigning a Call to a Name (line 913):
        
        # Assigning a Call to a Name (line 913):
        
        # Call to concatenate(...): (line 913)
        # Processing the call arguments (line 913)
        
        # Obtaining an instance of the builtin type 'list' (line 913)
        list_28125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 913, 44), 'list')
        # Adding type elements to the builtin type 'list' instance (line 913)
        # Adding element type (line 913)
        # Getting the type of 'xy' (line 913)
        xy_28126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 45), 'xy', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 913, 44), list_28125, xy_28126)
        # Adding element type (line 913)
        
        # Obtaining the type of the subscript
        int_28127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 913, 52), 'int')
        int_28128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 913, 54), 'int')
        slice_28129 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 913, 49), int_28127, int_28128, None)
        # Getting the type of 'xy' (line 913)
        xy_28130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 49), 'xy', False)
        # Obtaining the member '__getitem__' of a type (line 913)
        getitem___28131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 913, 49), xy_28130, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 913)
        subscript_call_result_28132 = invoke(stypy.reporting.localization.Localization(__file__, 913, 49), getitem___28131, slice_28129)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 913, 44), list_28125, subscript_call_result_28132)
        
        # Processing the call keyword arguments (line 913)
        kwargs_28133 = {}
        # Getting the type of 'np' (line 913)
        np_28123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 29), 'np', False)
        # Obtaining the member 'concatenate' of a type (line 913)
        concatenate_28124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 913, 29), np_28123, 'concatenate')
        # Calling concatenate(args, kwargs) (line 913)
        concatenate_call_result_28134 = invoke(stypy.reporting.localization.Localization(__file__, 913, 29), concatenate_28124, *[list_28125], **kwargs_28133)
        
        # Assigning a type to the variable 'xy' (line 913)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 913, 24), 'xy', concatenate_call_result_28134)
        # SSA join for if statement (line 909)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 914):
        
        # Assigning a Call to a Name (line 914):
        
        # Call to empty(...): (line 914)
        # Processing the call arguments (line 914)
        
        # Obtaining the type of the subscript
        int_28137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, 46), 'int')
        # Getting the type of 'xy' (line 914)
        xy_28138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 37), 'xy', False)
        # Obtaining the member 'shape' of a type (line 914)
        shape_28139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 37), xy_28138, 'shape')
        # Obtaining the member '__getitem__' of a type (line 914)
        getitem___28140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 37), shape_28139, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 914)
        subscript_call_result_28141 = invoke(stypy.reporting.localization.Localization(__file__, 914, 37), getitem___28140, int_28137)
        
        # Processing the call keyword arguments (line 914)
        # Getting the type of 'mpath' (line 914)
        mpath_28142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 56), 'mpath', False)
        # Obtaining the member 'Path' of a type (line 914)
        Path_28143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 56), mpath_28142, 'Path')
        # Obtaining the member 'code_type' of a type (line 914)
        code_type_28144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 56), Path_28143, 'code_type')
        keyword_28145 = code_type_28144
        kwargs_28146 = {'dtype': keyword_28145}
        # Getting the type of 'np' (line 914)
        np_28135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 28), 'np', False)
        # Obtaining the member 'empty' of a type (line 914)
        empty_28136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 28), np_28135, 'empty')
        # Calling empty(args, kwargs) (line 914)
        empty_call_result_28147 = invoke(stypy.reporting.localization.Localization(__file__, 914, 28), empty_28136, *[subscript_call_result_28141], **kwargs_28146)
        
        # Assigning a type to the variable 'codes' (line 914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 914, 20), 'codes', empty_call_result_28147)
        
        # Assigning a Attribute to a Subscript (line 915):
        
        # Assigning a Attribute to a Subscript (line 915):
        # Getting the type of 'mpath' (line 915)
        mpath_28148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 31), 'mpath')
        # Obtaining the member 'Path' of a type (line 915)
        Path_28149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 915, 31), mpath_28148, 'Path')
        # Obtaining the member 'LINETO' of a type (line 915)
        LINETO_28150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 915, 31), Path_28149, 'LINETO')
        # Getting the type of 'codes' (line 915)
        codes_28151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 20), 'codes')
        slice_28152 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 915, 20), None, None, None)
        # Storing an element on a container (line 915)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 915, 20), codes_28151, (slice_28152, LINETO_28150))
        
        # Assigning a Attribute to a Subscript (line 916):
        
        # Assigning a Attribute to a Subscript (line 916):
        # Getting the type of 'mpath' (line 916)
        mpath_28153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 31), 'mpath')
        # Obtaining the member 'Path' of a type (line 916)
        Path_28154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 916, 31), mpath_28153, 'Path')
        # Obtaining the member 'MOVETO' of a type (line 916)
        MOVETO_28155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 916, 31), Path_28154, 'MOVETO')
        # Getting the type of 'codes' (line 916)
        codes_28156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 20), 'codes')
        int_28157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, 26), 'int')
        # Storing an element on a container (line 916)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 916, 20), codes_28156, (int_28157, MOVETO_28155))
        
        # Assigning a Attribute to a Subscript (line 917):
        
        # Assigning a Attribute to a Subscript (line 917):
        # Getting the type of 'mpath' (line 917)
        mpath_28158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 32), 'mpath')
        # Obtaining the member 'Path' of a type (line 917)
        Path_28159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 32), mpath_28158, 'Path')
        # Obtaining the member 'CLOSEPOLY' of a type (line 917)
        CLOSEPOLY_28160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 32), Path_28159, 'CLOSEPOLY')
        # Getting the type of 'codes' (line 917)
        codes_28161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 20), 'codes')
        int_28162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 917, 26), 'int')
        # Storing an element on a container (line 917)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 917, 20), codes_28161, (int_28162, CLOSEPOLY_28160))
        
        # Call to append(...): (line 918)
        # Processing the call arguments (line 918)
        
        # Call to Path(...): (line 918)
        # Processing the call arguments (line 918)
        # Getting the type of 'xy' (line 918)
        xy_28168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 50), 'xy', False)
        # Getting the type of 'codes' (line 918)
        codes_28169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 54), 'codes', False)
        # Processing the call keyword arguments (line 918)
        kwargs_28170 = {}
        # Getting the type of 'mpath' (line 918)
        mpath_28166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 39), 'mpath', False)
        # Obtaining the member 'Path' of a type (line 918)
        Path_28167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 39), mpath_28166, 'Path')
        # Calling Path(args, kwargs) (line 918)
        Path_call_result_28171 = invoke(stypy.reporting.localization.Localization(__file__, 918, 39), Path_28167, *[xy_28168, codes_28169], **kwargs_28170)
        
        # Processing the call keyword arguments (line 918)
        kwargs_28172 = {}
        # Getting the type of 'self' (line 918)
        self_28163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 20), 'self', False)
        # Obtaining the member '_paths' of a type (line 918)
        _paths_28164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 20), self_28163, '_paths')
        # Obtaining the member 'append' of a type (line 918)
        append_28165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 20), _paths_28164, 'append')
        # Calling append(args, kwargs) (line 918)
        append_call_result_28173 = invoke(stypy.reporting.localization.Localization(__file__, 918, 20), append_28165, *[Path_call_result_28171], **kwargs_28172)
        
        # SSA branch for the else part of an if statement (line 908)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 920)
        # Processing the call arguments (line 920)
        
        # Call to Path(...): (line 920)
        # Processing the call arguments (line 920)
        # Getting the type of 'xy' (line 920)
        xy_28179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 50), 'xy', False)
        # Processing the call keyword arguments (line 920)
        kwargs_28180 = {}
        # Getting the type of 'mpath' (line 920)
        mpath_28177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 39), 'mpath', False)
        # Obtaining the member 'Path' of a type (line 920)
        Path_28178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 920, 39), mpath_28177, 'Path')
        # Calling Path(args, kwargs) (line 920)
        Path_call_result_28181 = invoke(stypy.reporting.localization.Localization(__file__, 920, 39), Path_28178, *[xy_28179], **kwargs_28180)
        
        # Processing the call keyword arguments (line 920)
        kwargs_28182 = {}
        # Getting the type of 'self' (line 920)
        self_28174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 20), 'self', False)
        # Obtaining the member '_paths' of a type (line 920)
        _paths_28175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 920, 20), self_28174, '_paths')
        # Obtaining the member 'append' of a type (line 920)
        append_28176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 920, 20), _paths_28175, 'append')
        # Calling append(args, kwargs) (line 920)
        append_call_result_28183 = invoke(stypy.reporting.localization.Localization(__file__, 920, 20), append_28176, *[Path_call_result_28181], **kwargs_28182)
        
        # SSA join for if statement (line 908)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 905)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a ListComp to a Attribute (line 922):
        
        # Assigning a ListComp to a Attribute (line 922):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'verts' (line 922)
        verts_28189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 52), 'verts')
        comprehension_28190 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 922, 27), verts_28189)
        # Assigning a type to the variable 'xy' (line 922)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 922, 27), 'xy', comprehension_28190)
        
        # Call to Path(...): (line 922)
        # Processing the call arguments (line 922)
        # Getting the type of 'xy' (line 922)
        xy_28186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 38), 'xy', False)
        # Processing the call keyword arguments (line 922)
        kwargs_28187 = {}
        # Getting the type of 'mpath' (line 922)
        mpath_28184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 27), 'mpath', False)
        # Obtaining the member 'Path' of a type (line 922)
        Path_28185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 922, 27), mpath_28184, 'Path')
        # Calling Path(args, kwargs) (line 922)
        Path_call_result_28188 = invoke(stypy.reporting.localization.Localization(__file__, 922, 27), Path_28185, *[xy_28186], **kwargs_28187)
        
        list_28191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 922, 27), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 922, 27), list_28191, Path_call_result_28188)
        # Getting the type of 'self' (line 922)
        self_28192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 12), 'self')
        # Setting the type of the member '_paths' of a type (line 922)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 922, 12), self_28192, '_paths', list_28191)
        # SSA join for if statement (line 905)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 923):
        
        # Assigning a Name to a Attribute (line 923):
        # Getting the type of 'True' (line 923)
        True_28193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 21), 'True')
        # Getting the type of 'self' (line 923)
        self_28194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 923)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 923, 8), self_28194, 'stale', True_28193)
        
        # ################# End of 'set_verts(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_verts' in the type store
        # Getting the type of 'stypy_return_type' (line 900)
        stypy_return_type_28195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28195)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_verts'
        return stypy_return_type_28195

    
    # Assigning a Name to a Name (line 925):

    @norecursion
    def set_verts_and_codes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_verts_and_codes'
        module_type_store = module_type_store.open_function_context('set_verts_and_codes', 927, 4, False)
        # Assigning a type to the variable 'self' (line 928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 928, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PolyCollection.set_verts_and_codes.__dict__.__setitem__('stypy_localization', localization)
        PolyCollection.set_verts_and_codes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PolyCollection.set_verts_and_codes.__dict__.__setitem__('stypy_type_store', module_type_store)
        PolyCollection.set_verts_and_codes.__dict__.__setitem__('stypy_function_name', 'PolyCollection.set_verts_and_codes')
        PolyCollection.set_verts_and_codes.__dict__.__setitem__('stypy_param_names_list', ['verts', 'codes'])
        PolyCollection.set_verts_and_codes.__dict__.__setitem__('stypy_varargs_param_name', None)
        PolyCollection.set_verts_and_codes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PolyCollection.set_verts_and_codes.__dict__.__setitem__('stypy_call_defaults', defaults)
        PolyCollection.set_verts_and_codes.__dict__.__setitem__('stypy_call_varargs', varargs)
        PolyCollection.set_verts_and_codes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PolyCollection.set_verts_and_codes.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PolyCollection.set_verts_and_codes', ['verts', 'codes'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_verts_and_codes', localization, ['verts', 'codes'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_verts_and_codes(...)' code ##################

        unicode_28196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 928, 8), 'unicode', u'This allows one to initialize vertices with path codes.')
        
        
        
        # Call to len(...): (line 929)
        # Processing the call arguments (line 929)
        # Getting the type of 'verts' (line 929)
        verts_28198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 16), 'verts', False)
        # Processing the call keyword arguments (line 929)
        kwargs_28199 = {}
        # Getting the type of 'len' (line 929)
        len_28197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 12), 'len', False)
        # Calling len(args, kwargs) (line 929)
        len_call_result_28200 = invoke(stypy.reporting.localization.Localization(__file__, 929, 12), len_28197, *[verts_28198], **kwargs_28199)
        
        
        # Call to len(...): (line 929)
        # Processing the call arguments (line 929)
        # Getting the type of 'codes' (line 929)
        codes_28202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 30), 'codes', False)
        # Processing the call keyword arguments (line 929)
        kwargs_28203 = {}
        # Getting the type of 'len' (line 929)
        len_28201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 26), 'len', False)
        # Calling len(args, kwargs) (line 929)
        len_call_result_28204 = invoke(stypy.reporting.localization.Localization(__file__, 929, 26), len_28201, *[codes_28202], **kwargs_28203)
        
        # Applying the binary operator '!=' (line 929)
        result_ne_28205 = python_operator(stypy.reporting.localization.Localization(__file__, 929, 12), '!=', len_call_result_28200, len_call_result_28204)
        
        # Testing the type of an if condition (line 929)
        if_condition_28206 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 929, 8), result_ne_28205)
        # Assigning a type to the variable 'if_condition_28206' (line 929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 8), 'if_condition_28206', if_condition_28206)
        # SSA begins for if statement (line 929)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 930)
        # Processing the call arguments (line 930)
        unicode_28208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 930, 29), 'unicode', u"'codes' must be a 1D list or array with the same length of 'verts'")
        # Processing the call keyword arguments (line 930)
        kwargs_28209 = {}
        # Getting the type of 'ValueError' (line 930)
        ValueError_28207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 930)
        ValueError_call_result_28210 = invoke(stypy.reporting.localization.Localization(__file__, 930, 18), ValueError_28207, *[unicode_28208], **kwargs_28209)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 930, 12), ValueError_call_result_28210, 'raise parameter', BaseException)
        # SSA join for if statement (line 929)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Attribute (line 932):
        
        # Assigning a List to a Attribute (line 932):
        
        # Obtaining an instance of the builtin type 'list' (line 932)
        list_28211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 932, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 932)
        
        # Getting the type of 'self' (line 932)
        self_28212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 8), 'self')
        # Setting the type of the member '_paths' of a type (line 932)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 932, 8), self_28212, '_paths', list_28211)
        
        
        # Call to zip(...): (line 933)
        # Processing the call arguments (line 933)
        # Getting the type of 'verts' (line 933)
        verts_28214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 27), 'verts', False)
        # Getting the type of 'codes' (line 933)
        codes_28215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 34), 'codes', False)
        # Processing the call keyword arguments (line 933)
        kwargs_28216 = {}
        # Getting the type of 'zip' (line 933)
        zip_28213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 23), 'zip', False)
        # Calling zip(args, kwargs) (line 933)
        zip_call_result_28217 = invoke(stypy.reporting.localization.Localization(__file__, 933, 23), zip_28213, *[verts_28214, codes_28215], **kwargs_28216)
        
        # Testing the type of a for loop iterable (line 933)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 933, 8), zip_call_result_28217)
        # Getting the type of the for loop variable (line 933)
        for_loop_var_28218 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 933, 8), zip_call_result_28217)
        # Assigning a type to the variable 'xy' (line 933)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 8), 'xy', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 933, 8), for_loop_var_28218))
        # Assigning a type to the variable 'cds' (line 933)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 8), 'cds', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 933, 8), for_loop_var_28218))
        # SSA begins for a for statement (line 933)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to len(...): (line 934)
        # Processing the call arguments (line 934)
        # Getting the type of 'xy' (line 934)
        xy_28220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 19), 'xy', False)
        # Processing the call keyword arguments (line 934)
        kwargs_28221 = {}
        # Getting the type of 'len' (line 934)
        len_28219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 15), 'len', False)
        # Calling len(args, kwargs) (line 934)
        len_call_result_28222 = invoke(stypy.reporting.localization.Localization(__file__, 934, 15), len_28219, *[xy_28220], **kwargs_28221)
        
        # Testing the type of an if condition (line 934)
        if_condition_28223 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 934, 12), len_call_result_28222)
        # Assigning a type to the variable 'if_condition_28223' (line 934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 12), 'if_condition_28223', if_condition_28223)
        # SSA begins for if statement (line 934)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 935)
        # Processing the call arguments (line 935)
        
        # Call to Path(...): (line 935)
        # Processing the call arguments (line 935)
        # Getting the type of 'xy' (line 935)
        xy_28229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 46), 'xy', False)
        # Getting the type of 'cds' (line 935)
        cds_28230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 50), 'cds', False)
        # Processing the call keyword arguments (line 935)
        kwargs_28231 = {}
        # Getting the type of 'mpath' (line 935)
        mpath_28227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 35), 'mpath', False)
        # Obtaining the member 'Path' of a type (line 935)
        Path_28228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 935, 35), mpath_28227, 'Path')
        # Calling Path(args, kwargs) (line 935)
        Path_call_result_28232 = invoke(stypy.reporting.localization.Localization(__file__, 935, 35), Path_28228, *[xy_28229, cds_28230], **kwargs_28231)
        
        # Processing the call keyword arguments (line 935)
        kwargs_28233 = {}
        # Getting the type of 'self' (line 935)
        self_28224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 16), 'self', False)
        # Obtaining the member '_paths' of a type (line 935)
        _paths_28225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 935, 16), self_28224, '_paths')
        # Obtaining the member 'append' of a type (line 935)
        append_28226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 935, 16), _paths_28225, 'append')
        # Calling append(args, kwargs) (line 935)
        append_call_result_28234 = invoke(stypy.reporting.localization.Localization(__file__, 935, 16), append_28226, *[Path_call_result_28232], **kwargs_28233)
        
        # SSA branch for the else part of an if statement (line 934)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 937)
        # Processing the call arguments (line 937)
        
        # Call to Path(...): (line 937)
        # Processing the call arguments (line 937)
        # Getting the type of 'xy' (line 937)
        xy_28240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 46), 'xy', False)
        # Processing the call keyword arguments (line 937)
        kwargs_28241 = {}
        # Getting the type of 'mpath' (line 937)
        mpath_28238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 35), 'mpath', False)
        # Obtaining the member 'Path' of a type (line 937)
        Path_28239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 937, 35), mpath_28238, 'Path')
        # Calling Path(args, kwargs) (line 937)
        Path_call_result_28242 = invoke(stypy.reporting.localization.Localization(__file__, 937, 35), Path_28239, *[xy_28240], **kwargs_28241)
        
        # Processing the call keyword arguments (line 937)
        kwargs_28243 = {}
        # Getting the type of 'self' (line 937)
        self_28235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 16), 'self', False)
        # Obtaining the member '_paths' of a type (line 937)
        _paths_28236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 937, 16), self_28235, '_paths')
        # Obtaining the member 'append' of a type (line 937)
        append_28237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 937, 16), _paths_28236, 'append')
        # Calling append(args, kwargs) (line 937)
        append_call_result_28244 = invoke(stypy.reporting.localization.Localization(__file__, 937, 16), append_28237, *[Path_call_result_28242], **kwargs_28243)
        
        # SSA join for if statement (line 934)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 938):
        
        # Assigning a Name to a Attribute (line 938):
        # Getting the type of 'True' (line 938)
        True_28245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 21), 'True')
        # Getting the type of 'self' (line 938)
        self_28246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 938)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 8), self_28246, 'stale', True_28245)
        
        # ################# End of 'set_verts_and_codes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_verts_and_codes' in the type store
        # Getting the type of 'stypy_return_type' (line 927)
        stypy_return_type_28247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28247)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_verts_and_codes'
        return stypy_return_type_28247


# Assigning a type to the variable 'PolyCollection' (line 874)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 0), 'PolyCollection', PolyCollection)

# Assigning a Name to a Name (line 925):
# Getting the type of 'PolyCollection'
PolyCollection_28248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'PolyCollection')
# Obtaining the member 'set_verts' of a type
set_verts_28249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), PolyCollection_28248, 'set_verts')
# Getting the type of 'PolyCollection'
PolyCollection_28250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'PolyCollection')
# Setting the type of the member 'set_paths' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), PolyCollection_28250, 'set_paths', set_verts_28249)
# Declaration of the 'BrokenBarHCollection' class
# Getting the type of 'PolyCollection' (line 941)
PolyCollection_28251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 27), 'PolyCollection')

class BrokenBarHCollection(PolyCollection_28251, ):
    unicode_28252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 945, (-1)), 'unicode', u'\n    A collection of horizontal bars spanning *yrange* with a sequence of\n    *xranges*.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 946, 4, False)
        # Assigning a type to the variable 'self' (line 947)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 947, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BrokenBarHCollection.__init__', ['xranges', 'yrange'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['xranges', 'yrange'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_28253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 956, (-1)), 'unicode', u'\n        *xranges*\n            sequence of (*xmin*, *xwidth*)\n\n        *yrange*\n            *ymin*, *ywidth*\n\n        %(Collection)s\n        ')
        
        # Assigning a Name to a Tuple (line 957):
        
        # Assigning a Subscript to a Name (line 957):
        
        # Obtaining the type of the subscript
        int_28254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 8), 'int')
        # Getting the type of 'yrange' (line 957)
        yrange_28255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 23), 'yrange')
        # Obtaining the member '__getitem__' of a type (line 957)
        getitem___28256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 8), yrange_28255, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 957)
        subscript_call_result_28257 = invoke(stypy.reporting.localization.Localization(__file__, 957, 8), getitem___28256, int_28254)
        
        # Assigning a type to the variable 'tuple_var_assignment_26231' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 8), 'tuple_var_assignment_26231', subscript_call_result_28257)
        
        # Assigning a Subscript to a Name (line 957):
        
        # Obtaining the type of the subscript
        int_28258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 8), 'int')
        # Getting the type of 'yrange' (line 957)
        yrange_28259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 23), 'yrange')
        # Obtaining the member '__getitem__' of a type (line 957)
        getitem___28260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 8), yrange_28259, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 957)
        subscript_call_result_28261 = invoke(stypy.reporting.localization.Localization(__file__, 957, 8), getitem___28260, int_28258)
        
        # Assigning a type to the variable 'tuple_var_assignment_26232' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 8), 'tuple_var_assignment_26232', subscript_call_result_28261)
        
        # Assigning a Name to a Name (line 957):
        # Getting the type of 'tuple_var_assignment_26231' (line 957)
        tuple_var_assignment_26231_28262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 8), 'tuple_var_assignment_26231')
        # Assigning a type to the variable 'ymin' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 8), 'ymin', tuple_var_assignment_26231_28262)
        
        # Assigning a Name to a Name (line 957):
        # Getting the type of 'tuple_var_assignment_26232' (line 957)
        tuple_var_assignment_26232_28263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 8), 'tuple_var_assignment_26232')
        # Assigning a type to the variable 'ywidth' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 14), 'ywidth', tuple_var_assignment_26232_28263)
        
        # Assigning a BinOp to a Name (line 958):
        
        # Assigning a BinOp to a Name (line 958):
        # Getting the type of 'ymin' (line 958)
        ymin_28264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 15), 'ymin')
        # Getting the type of 'ywidth' (line 958)
        ywidth_28265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 22), 'ywidth')
        # Applying the binary operator '+' (line 958)
        result_add_28266 = python_operator(stypy.reporting.localization.Localization(__file__, 958, 15), '+', ymin_28264, ywidth_28265)
        
        # Assigning a type to the variable 'ymax' (line 958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 8), 'ymax', result_add_28266)
        
        # Assigning a ListComp to a Name (line 959):
        
        # Assigning a ListComp to a Name (line 959):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'xranges' (line 963)
        xranges_28287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 52), 'xranges')
        comprehension_28288 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 959, 17), xranges_28287)
        # Assigning a type to the variable 'xmin' (line 959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 17), 'xmin', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 959, 17), comprehension_28288))
        # Assigning a type to the variable 'xwidth' (line 959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 17), 'xwidth', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 959, 17), comprehension_28288))
        
        # Obtaining an instance of the builtin type 'list' (line 959)
        list_28267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 959, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 959)
        # Adding element type (line 959)
        
        # Obtaining an instance of the builtin type 'tuple' (line 959)
        tuple_28268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 959, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 959)
        # Adding element type (line 959)
        # Getting the type of 'xmin' (line 959)
        xmin_28269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 19), 'xmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 959, 19), tuple_28268, xmin_28269)
        # Adding element type (line 959)
        # Getting the type of 'ymin' (line 959)
        ymin_28270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 25), 'ymin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 959, 19), tuple_28268, ymin_28270)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 959, 17), list_28267, tuple_28268)
        # Adding element type (line 959)
        
        # Obtaining an instance of the builtin type 'tuple' (line 960)
        tuple_28271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 960)
        # Adding element type (line 960)
        # Getting the type of 'xmin' (line 960)
        xmin_28272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 19), 'xmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 960, 19), tuple_28271, xmin_28272)
        # Adding element type (line 960)
        # Getting the type of 'ymax' (line 960)
        ymax_28273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 25), 'ymax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 960, 19), tuple_28271, ymax_28273)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 959, 17), list_28267, tuple_28271)
        # Adding element type (line 959)
        
        # Obtaining an instance of the builtin type 'tuple' (line 961)
        tuple_28274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 961, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 961)
        # Adding element type (line 961)
        # Getting the type of 'xmin' (line 961)
        xmin_28275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 19), 'xmin')
        # Getting the type of 'xwidth' (line 961)
        xwidth_28276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 26), 'xwidth')
        # Applying the binary operator '+' (line 961)
        result_add_28277 = python_operator(stypy.reporting.localization.Localization(__file__, 961, 19), '+', xmin_28275, xwidth_28276)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 961, 19), tuple_28274, result_add_28277)
        # Adding element type (line 961)
        # Getting the type of 'ymax' (line 961)
        ymax_28278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 34), 'ymax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 961, 19), tuple_28274, ymax_28278)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 959, 17), list_28267, tuple_28274)
        # Adding element type (line 959)
        
        # Obtaining an instance of the builtin type 'tuple' (line 962)
        tuple_28279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 962)
        # Adding element type (line 962)
        # Getting the type of 'xmin' (line 962)
        xmin_28280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 19), 'xmin')
        # Getting the type of 'xwidth' (line 962)
        xwidth_28281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 26), 'xwidth')
        # Applying the binary operator '+' (line 962)
        result_add_28282 = python_operator(stypy.reporting.localization.Localization(__file__, 962, 19), '+', xmin_28280, xwidth_28281)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 962, 19), tuple_28279, result_add_28282)
        # Adding element type (line 962)
        # Getting the type of 'ymin' (line 962)
        ymin_28283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 34), 'ymin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 962, 19), tuple_28279, ymin_28283)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 959, 17), list_28267, tuple_28279)
        # Adding element type (line 959)
        
        # Obtaining an instance of the builtin type 'tuple' (line 963)
        tuple_28284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 963)
        # Adding element type (line 963)
        # Getting the type of 'xmin' (line 963)
        xmin_28285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 19), 'xmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 963, 19), tuple_28284, xmin_28285)
        # Adding element type (line 963)
        # Getting the type of 'ymin' (line 963)
        ymin_28286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 25), 'ymin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 963, 19), tuple_28284, ymin_28286)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 959, 17), list_28267, tuple_28284)
        
        list_28289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 959, 17), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 959, 17), list_28289, list_28267)
        # Assigning a type to the variable 'verts' (line 959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 8), 'verts', list_28289)
        
        # Call to __init__(...): (line 964)
        # Processing the call arguments (line 964)
        # Getting the type of 'self' (line 964)
        self_28292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 32), 'self', False)
        # Getting the type of 'verts' (line 964)
        verts_28293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 38), 'verts', False)
        # Processing the call keyword arguments (line 964)
        # Getting the type of 'kwargs' (line 964)
        kwargs_28294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 47), 'kwargs', False)
        kwargs_28295 = {'kwargs_28294': kwargs_28294}
        # Getting the type of 'PolyCollection' (line 964)
        PolyCollection_28290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 8), 'PolyCollection', False)
        # Obtaining the member '__init__' of a type (line 964)
        init___28291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 8), PolyCollection_28290, '__init__')
        # Calling __init__(args, kwargs) (line 964)
        init___call_result_28296 = invoke(stypy.reporting.localization.Localization(__file__, 964, 8), init___28291, *[self_28292, verts_28293], **kwargs_28295)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @staticmethod
    @norecursion
    def span_where(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'span_where'
        module_type_store = module_type_store.open_function_context('span_where', 966, 4, False)
        
        # Passed parameters checking function
        BrokenBarHCollection.span_where.__dict__.__setitem__('stypy_localization', localization)
        BrokenBarHCollection.span_where.__dict__.__setitem__('stypy_type_of_self', None)
        BrokenBarHCollection.span_where.__dict__.__setitem__('stypy_type_store', module_type_store)
        BrokenBarHCollection.span_where.__dict__.__setitem__('stypy_function_name', 'span_where')
        BrokenBarHCollection.span_where.__dict__.__setitem__('stypy_param_names_list', ['x', 'ymin', 'ymax', 'where'])
        BrokenBarHCollection.span_where.__dict__.__setitem__('stypy_varargs_param_name', None)
        BrokenBarHCollection.span_where.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        BrokenBarHCollection.span_where.__dict__.__setitem__('stypy_call_defaults', defaults)
        BrokenBarHCollection.span_where.__dict__.__setitem__('stypy_call_varargs', varargs)
        BrokenBarHCollection.span_where.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BrokenBarHCollection.span_where.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, None, module_type_store, 'span_where', ['x', 'ymin', 'ymax', 'where'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'span_where', localization, ['ymin', 'ymax', 'where'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'span_where(...)' code ##################

        unicode_28297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 975, (-1)), 'unicode', u'\n        Create a BrokenBarHCollection to plot horizontal bars from\n        over the regions in *x* where *where* is True.  The bars range\n        on the y-axis from *ymin* to *ymax*\n\n        A :class:`BrokenBarHCollection` is returned.  *kwargs* are\n        passed on to the collection.\n        ')
        
        # Assigning a List to a Name (line 976):
        
        # Assigning a List to a Name (line 976):
        
        # Obtaining an instance of the builtin type 'list' (line 976)
        list_28298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 976, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 976)
        
        # Assigning a type to the variable 'xranges' (line 976)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 8), 'xranges', list_28298)
        
        
        # Call to contiguous_regions(...): (line 977)
        # Processing the call arguments (line 977)
        # Getting the type of 'where' (line 977)
        where_28301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 50), 'where', False)
        # Processing the call keyword arguments (line 977)
        kwargs_28302 = {}
        # Getting the type of 'mlab' (line 977)
        mlab_28299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 26), 'mlab', False)
        # Obtaining the member 'contiguous_regions' of a type (line 977)
        contiguous_regions_28300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 26), mlab_28299, 'contiguous_regions')
        # Calling contiguous_regions(args, kwargs) (line 977)
        contiguous_regions_call_result_28303 = invoke(stypy.reporting.localization.Localization(__file__, 977, 26), contiguous_regions_28300, *[where_28301], **kwargs_28302)
        
        # Testing the type of a for loop iterable (line 977)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 977, 8), contiguous_regions_call_result_28303)
        # Getting the type of the for loop variable (line 977)
        for_loop_var_28304 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 977, 8), contiguous_regions_call_result_28303)
        # Assigning a type to the variable 'ind0' (line 977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 8), 'ind0', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 977, 8), for_loop_var_28304))
        # Assigning a type to the variable 'ind1' (line 977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 8), 'ind1', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 977, 8), for_loop_var_28304))
        # SSA begins for a for statement (line 977)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 978):
        
        # Assigning a Subscript to a Name (line 978):
        
        # Obtaining the type of the subscript
        # Getting the type of 'ind0' (line 978)
        ind0_28305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 23), 'ind0')
        # Getting the type of 'ind1' (line 978)
        ind1_28306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 28), 'ind1')
        slice_28307 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 978, 21), ind0_28305, ind1_28306, None)
        # Getting the type of 'x' (line 978)
        x_28308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 21), 'x')
        # Obtaining the member '__getitem__' of a type (line 978)
        getitem___28309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 21), x_28308, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 978)
        subscript_call_result_28310 = invoke(stypy.reporting.localization.Localization(__file__, 978, 21), getitem___28309, slice_28307)
        
        # Assigning a type to the variable 'xslice' (line 978)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 978, 12), 'xslice', subscript_call_result_28310)
        
        
        
        # Call to len(...): (line 979)
        # Processing the call arguments (line 979)
        # Getting the type of 'xslice' (line 979)
        xslice_28312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 23), 'xslice', False)
        # Processing the call keyword arguments (line 979)
        kwargs_28313 = {}
        # Getting the type of 'len' (line 979)
        len_28311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 19), 'len', False)
        # Calling len(args, kwargs) (line 979)
        len_call_result_28314 = invoke(stypy.reporting.localization.Localization(__file__, 979, 19), len_28311, *[xslice_28312], **kwargs_28313)
        
        # Applying the 'not' unary operator (line 979)
        result_not__28315 = python_operator(stypy.reporting.localization.Localization(__file__, 979, 15), 'not', len_call_result_28314)
        
        # Testing the type of an if condition (line 979)
        if_condition_28316 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 979, 12), result_not__28315)
        # Assigning a type to the variable 'if_condition_28316' (line 979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 979, 12), 'if_condition_28316', if_condition_28316)
        # SSA begins for if statement (line 979)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 979)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 981)
        # Processing the call arguments (line 981)
        
        # Obtaining an instance of the builtin type 'tuple' (line 981)
        tuple_28319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 981, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 981)
        # Adding element type (line 981)
        
        # Obtaining the type of the subscript
        int_28320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 981, 35), 'int')
        # Getting the type of 'xslice' (line 981)
        xslice_28321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 28), 'xslice', False)
        # Obtaining the member '__getitem__' of a type (line 981)
        getitem___28322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 981, 28), xslice_28321, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 981)
        subscript_call_result_28323 = invoke(stypy.reporting.localization.Localization(__file__, 981, 28), getitem___28322, int_28320)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 981, 28), tuple_28319, subscript_call_result_28323)
        # Adding element type (line 981)
        
        # Obtaining the type of the subscript
        int_28324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 981, 46), 'int')
        # Getting the type of 'xslice' (line 981)
        xslice_28325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 39), 'xslice', False)
        # Obtaining the member '__getitem__' of a type (line 981)
        getitem___28326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 981, 39), xslice_28325, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 981)
        subscript_call_result_28327 = invoke(stypy.reporting.localization.Localization(__file__, 981, 39), getitem___28326, int_28324)
        
        
        # Obtaining the type of the subscript
        int_28328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 981, 59), 'int')
        # Getting the type of 'xslice' (line 981)
        xslice_28329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 52), 'xslice', False)
        # Obtaining the member '__getitem__' of a type (line 981)
        getitem___28330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 981, 52), xslice_28329, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 981)
        subscript_call_result_28331 = invoke(stypy.reporting.localization.Localization(__file__, 981, 52), getitem___28330, int_28328)
        
        # Applying the binary operator '-' (line 981)
        result_sub_28332 = python_operator(stypy.reporting.localization.Localization(__file__, 981, 39), '-', subscript_call_result_28327, subscript_call_result_28331)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 981, 28), tuple_28319, result_sub_28332)
        
        # Processing the call keyword arguments (line 981)
        kwargs_28333 = {}
        # Getting the type of 'xranges' (line 981)
        xranges_28317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 12), 'xranges', False)
        # Obtaining the member 'append' of a type (line 981)
        append_28318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 981, 12), xranges_28317, 'append')
        # Calling append(args, kwargs) (line 981)
        append_call_result_28334 = invoke(stypy.reporting.localization.Localization(__file__, 981, 12), append_28318, *[tuple_28319], **kwargs_28333)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 983):
        
        # Assigning a Call to a Name (line 983):
        
        # Call to BrokenBarHCollection(...): (line 983)
        # Processing the call arguments (line 983)
        # Getting the type of 'xranges' (line 984)
        xranges_28336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 12), 'xranges', False)
        
        # Obtaining an instance of the builtin type 'list' (line 984)
        list_28337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 984, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 984)
        # Adding element type (line 984)
        # Getting the type of 'ymin' (line 984)
        ymin_28338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 22), 'ymin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 984, 21), list_28337, ymin_28338)
        # Adding element type (line 984)
        # Getting the type of 'ymax' (line 984)
        ymax_28339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 28), 'ymax', False)
        # Getting the type of 'ymin' (line 984)
        ymin_28340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 35), 'ymin', False)
        # Applying the binary operator '-' (line 984)
        result_sub_28341 = python_operator(stypy.reporting.localization.Localization(__file__, 984, 28), '-', ymax_28339, ymin_28340)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 984, 21), list_28337, result_sub_28341)
        
        # Processing the call keyword arguments (line 983)
        # Getting the type of 'kwargs' (line 984)
        kwargs_28342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 44), 'kwargs', False)
        kwargs_28343 = {'kwargs_28342': kwargs_28342}
        # Getting the type of 'BrokenBarHCollection' (line 983)
        BrokenBarHCollection_28335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 21), 'BrokenBarHCollection', False)
        # Calling BrokenBarHCollection(args, kwargs) (line 983)
        BrokenBarHCollection_call_result_28344 = invoke(stypy.reporting.localization.Localization(__file__, 983, 21), BrokenBarHCollection_28335, *[xranges_28336, list_28337], **kwargs_28343)
        
        # Assigning a type to the variable 'collection' (line 983)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 983, 8), 'collection', BrokenBarHCollection_call_result_28344)
        # Getting the type of 'collection' (line 985)
        collection_28345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 15), 'collection')
        # Assigning a type to the variable 'stypy_return_type' (line 985)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 985, 8), 'stypy_return_type', collection_28345)
        
        # ################# End of 'span_where(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'span_where' in the type store
        # Getting the type of 'stypy_return_type' (line 966)
        stypy_return_type_28346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28346)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'span_where'
        return stypy_return_type_28346


# Assigning a type to the variable 'BrokenBarHCollection' (line 941)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 941, 0), 'BrokenBarHCollection', BrokenBarHCollection)
# Declaration of the 'RegularPolyCollection' class
# Getting the type of '_CollectionWithSizes' (line 988)
_CollectionWithSizes_28347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 28), '_CollectionWithSizes')

class RegularPolyCollection(_CollectionWithSizes_28347, ):
    unicode_28348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 989, 4), 'unicode', u'Draw a collection of regular polygons with *numsides*.')
    
    # Assigning a Attribute to a Name (line 990):
    
    # Assigning a Name to a Name (line 992):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_28349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 997, 26), 'int')
        
        # Obtaining an instance of the builtin type 'tuple' (line 998)
        tuple_28350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 998, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 998)
        # Adding element type (line 998)
        int_28351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 998, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 998, 24), tuple_28350, int_28351)
        
        defaults = [int_28349, tuple_28350]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 994, 4, False)
        # Assigning a type to the variable 'self' (line 995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularPolyCollection.__init__', ['numsides', 'rotation', 'sizes'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['numsides', 'rotation', 'sizes'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_28352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1029, (-1)), 'unicode', u'\n        *numsides*\n            the number of sides of the polygon\n\n        *rotation*\n            the rotation of the polygon in radians\n\n        *sizes*\n            gives the area of the circle circumscribing the\n            regular polygon in points^2\n\n        %(Collection)s\n\n        Example: see :file:`examples/dynamic_collection.py` for\n        complete example::\n\n            offsets = np.random.rand(20,2)\n            facecolors = [cm.jet(x) for x in np.random.rand(20)]\n            black = (0,0,0,1)\n\n            collection = RegularPolyCollection(\n                numsides=5, # a pentagon\n                rotation=0, sizes=(50,),\n                facecolors = facecolors,\n                edgecolors = (black,),\n                linewidths = (1,),\n                offsets = offsets,\n                transOffset = ax.transData,\n                )\n        ')
        
        # Call to __init__(...): (line 1030)
        # Processing the call arguments (line 1030)
        # Getting the type of 'self' (line 1030)
        self_28355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 28), 'self', False)
        # Processing the call keyword arguments (line 1030)
        # Getting the type of 'kwargs' (line 1030)
        kwargs_28356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 36), 'kwargs', False)
        kwargs_28357 = {'kwargs_28356': kwargs_28356}
        # Getting the type of 'Collection' (line 1030)
        Collection_28353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 8), 'Collection', False)
        # Obtaining the member '__init__' of a type (line 1030)
        init___28354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1030, 8), Collection_28353, '__init__')
        # Calling __init__(args, kwargs) (line 1030)
        init___call_result_28358 = invoke(stypy.reporting.localization.Localization(__file__, 1030, 8), init___28354, *[self_28355], **kwargs_28357)
        
        
        # Call to set_sizes(...): (line 1031)
        # Processing the call arguments (line 1031)
        # Getting the type of 'sizes' (line 1031)
        sizes_28361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 23), 'sizes', False)
        # Processing the call keyword arguments (line 1031)
        kwargs_28362 = {}
        # Getting the type of 'self' (line 1031)
        self_28359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 8), 'self', False)
        # Obtaining the member 'set_sizes' of a type (line 1031)
        set_sizes_28360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1031, 8), self_28359, 'set_sizes')
        # Calling set_sizes(args, kwargs) (line 1031)
        set_sizes_call_result_28363 = invoke(stypy.reporting.localization.Localization(__file__, 1031, 8), set_sizes_28360, *[sizes_28361], **kwargs_28362)
        
        
        # Assigning a Name to a Attribute (line 1032):
        
        # Assigning a Name to a Attribute (line 1032):
        # Getting the type of 'numsides' (line 1032)
        numsides_28364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 25), 'numsides')
        # Getting the type of 'self' (line 1032)
        self_28365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 8), 'self')
        # Setting the type of the member '_numsides' of a type (line 1032)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1032, 8), self_28365, '_numsides', numsides_28364)
        
        # Assigning a List to a Attribute (line 1033):
        
        # Assigning a List to a Attribute (line 1033):
        
        # Obtaining an instance of the builtin type 'list' (line 1033)
        list_28366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1033, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1033)
        # Adding element type (line 1033)
        
        # Call to _path_generator(...): (line 1033)
        # Processing the call arguments (line 1033)
        # Getting the type of 'numsides' (line 1033)
        numsides_28369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 44), 'numsides', False)
        # Processing the call keyword arguments (line 1033)
        kwargs_28370 = {}
        # Getting the type of 'self' (line 1033)
        self_28367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 23), 'self', False)
        # Obtaining the member '_path_generator' of a type (line 1033)
        _path_generator_28368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1033, 23), self_28367, '_path_generator')
        # Calling _path_generator(args, kwargs) (line 1033)
        _path_generator_call_result_28371 = invoke(stypy.reporting.localization.Localization(__file__, 1033, 23), _path_generator_28368, *[numsides_28369], **kwargs_28370)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1033, 22), list_28366, _path_generator_call_result_28371)
        
        # Getting the type of 'self' (line 1033)
        self_28372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 8), 'self')
        # Setting the type of the member '_paths' of a type (line 1033)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1033, 8), self_28372, '_paths', list_28366)
        
        # Assigning a Name to a Attribute (line 1034):
        
        # Assigning a Name to a Attribute (line 1034):
        # Getting the type of 'rotation' (line 1034)
        rotation_28373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 25), 'rotation')
        # Getting the type of 'self' (line 1034)
        self_28374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 8), 'self')
        # Setting the type of the member '_rotation' of a type (line 1034)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 8), self_28374, '_rotation', rotation_28373)
        
        # Call to set_transform(...): (line 1035)
        # Processing the call arguments (line 1035)
        
        # Call to IdentityTransform(...): (line 1035)
        # Processing the call keyword arguments (line 1035)
        kwargs_28379 = {}
        # Getting the type of 'transforms' (line 1035)
        transforms_28377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 27), 'transforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 1035)
        IdentityTransform_28378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1035, 27), transforms_28377, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 1035)
        IdentityTransform_call_result_28380 = invoke(stypy.reporting.localization.Localization(__file__, 1035, 27), IdentityTransform_28378, *[], **kwargs_28379)
        
        # Processing the call keyword arguments (line 1035)
        kwargs_28381 = {}
        # Getting the type of 'self' (line 1035)
        self_28375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 8), 'self', False)
        # Obtaining the member 'set_transform' of a type (line 1035)
        set_transform_28376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1035, 8), self_28375, 'set_transform')
        # Calling set_transform(args, kwargs) (line 1035)
        set_transform_call_result_28382 = invoke(stypy.reporting.localization.Localization(__file__, 1035, 8), set_transform_28376, *[IdentityTransform_call_result_28380], **kwargs_28381)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_numsides(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_numsides'
        module_type_store = module_type_store.open_function_context('get_numsides', 1037, 4, False)
        # Assigning a type to the variable 'self' (line 1038)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1038, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularPolyCollection.get_numsides.__dict__.__setitem__('stypy_localization', localization)
        RegularPolyCollection.get_numsides.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularPolyCollection.get_numsides.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularPolyCollection.get_numsides.__dict__.__setitem__('stypy_function_name', 'RegularPolyCollection.get_numsides')
        RegularPolyCollection.get_numsides.__dict__.__setitem__('stypy_param_names_list', [])
        RegularPolyCollection.get_numsides.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularPolyCollection.get_numsides.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularPolyCollection.get_numsides.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularPolyCollection.get_numsides.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularPolyCollection.get_numsides.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularPolyCollection.get_numsides.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularPolyCollection.get_numsides', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_numsides', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_numsides(...)' code ##################

        # Getting the type of 'self' (line 1038)
        self_28383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 15), 'self')
        # Obtaining the member '_numsides' of a type (line 1038)
        _numsides_28384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 15), self_28383, '_numsides')
        # Assigning a type to the variable 'stypy_return_type' (line 1038)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1038, 8), 'stypy_return_type', _numsides_28384)
        
        # ################# End of 'get_numsides(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_numsides' in the type store
        # Getting the type of 'stypy_return_type' (line 1037)
        stypy_return_type_28385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28385)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_numsides'
        return stypy_return_type_28385


    @norecursion
    def get_rotation(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_rotation'
        module_type_store = module_type_store.open_function_context('get_rotation', 1040, 4, False)
        # Assigning a type to the variable 'self' (line 1041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1041, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularPolyCollection.get_rotation.__dict__.__setitem__('stypy_localization', localization)
        RegularPolyCollection.get_rotation.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularPolyCollection.get_rotation.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularPolyCollection.get_rotation.__dict__.__setitem__('stypy_function_name', 'RegularPolyCollection.get_rotation')
        RegularPolyCollection.get_rotation.__dict__.__setitem__('stypy_param_names_list', [])
        RegularPolyCollection.get_rotation.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularPolyCollection.get_rotation.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularPolyCollection.get_rotation.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularPolyCollection.get_rotation.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularPolyCollection.get_rotation.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularPolyCollection.get_rotation.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularPolyCollection.get_rotation', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_rotation', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_rotation(...)' code ##################

        # Getting the type of 'self' (line 1041)
        self_28386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 15), 'self')
        # Obtaining the member '_rotation' of a type (line 1041)
        _rotation_28387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 15), self_28386, '_rotation')
        # Assigning a type to the variable 'stypy_return_type' (line 1041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1041, 8), 'stypy_return_type', _rotation_28387)
        
        # ################# End of 'get_rotation(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_rotation' in the type store
        # Getting the type of 'stypy_return_type' (line 1040)
        stypy_return_type_28388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28388)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_rotation'
        return stypy_return_type_28388


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 1043, 4, False)
        # Assigning a type to the variable 'self' (line 1044)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1044, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularPolyCollection.draw.__dict__.__setitem__('stypy_localization', localization)
        RegularPolyCollection.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularPolyCollection.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularPolyCollection.draw.__dict__.__setitem__('stypy_function_name', 'RegularPolyCollection.draw')
        RegularPolyCollection.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        RegularPolyCollection.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularPolyCollection.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularPolyCollection.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularPolyCollection.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularPolyCollection.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularPolyCollection.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularPolyCollection.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        
        # Call to set_sizes(...): (line 1045)
        # Processing the call arguments (line 1045)
        # Getting the type of 'self' (line 1045)
        self_28391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 23), 'self', False)
        # Obtaining the member '_sizes' of a type (line 1045)
        _sizes_28392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 23), self_28391, '_sizes')
        # Getting the type of 'self' (line 1045)
        self_28393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 36), 'self', False)
        # Obtaining the member 'figure' of a type (line 1045)
        figure_28394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 36), self_28393, 'figure')
        # Obtaining the member 'dpi' of a type (line 1045)
        dpi_28395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 36), figure_28394, 'dpi')
        # Processing the call keyword arguments (line 1045)
        kwargs_28396 = {}
        # Getting the type of 'self' (line 1045)
        self_28389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 8), 'self', False)
        # Obtaining the member 'set_sizes' of a type (line 1045)
        set_sizes_28390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 8), self_28389, 'set_sizes')
        # Calling set_sizes(args, kwargs) (line 1045)
        set_sizes_call_result_28397 = invoke(stypy.reporting.localization.Localization(__file__, 1045, 8), set_sizes_28390, *[_sizes_28392, dpi_28395], **kwargs_28396)
        
        
        # Assigning a ListComp to a Attribute (line 1046):
        
        # Assigning a ListComp to a Attribute (line 1046):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'self' (line 1048)
        self_28412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 21), 'self')
        # Obtaining the member '_transforms' of a type (line 1048)
        _transforms_28413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1048, 21), self_28412, '_transforms')
        comprehension_28414 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1047, 12), _transforms_28413)
        # Assigning a type to the variable 'x' (line 1047)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 12), 'x', comprehension_28414)
        
        # Call to get_matrix(...): (line 1047)
        # Processing the call keyword arguments (line 1047)
        kwargs_28410 = {}
        
        # Call to rotate(...): (line 1047)
        # Processing the call arguments (line 1047)
        
        # Getting the type of 'self' (line 1047)
        self_28404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 43), 'self', False)
        # Obtaining the member '_rotation' of a type (line 1047)
        _rotation_28405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 43), self_28404, '_rotation')
        # Applying the 'usub' unary operator (line 1047)
        result___neg___28406 = python_operator(stypy.reporting.localization.Localization(__file__, 1047, 42), 'usub', _rotation_28405)
        
        # Processing the call keyword arguments (line 1047)
        kwargs_28407 = {}
        
        # Call to Affine2D(...): (line 1047)
        # Processing the call arguments (line 1047)
        # Getting the type of 'x' (line 1047)
        x_28400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 32), 'x', False)
        # Processing the call keyword arguments (line 1047)
        kwargs_28401 = {}
        # Getting the type of 'transforms' (line 1047)
        transforms_28398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 12), 'transforms', False)
        # Obtaining the member 'Affine2D' of a type (line 1047)
        Affine2D_28399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 12), transforms_28398, 'Affine2D')
        # Calling Affine2D(args, kwargs) (line 1047)
        Affine2D_call_result_28402 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 12), Affine2D_28399, *[x_28400], **kwargs_28401)
        
        # Obtaining the member 'rotate' of a type (line 1047)
        rotate_28403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 12), Affine2D_call_result_28402, 'rotate')
        # Calling rotate(args, kwargs) (line 1047)
        rotate_call_result_28408 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 12), rotate_28403, *[result___neg___28406], **kwargs_28407)
        
        # Obtaining the member 'get_matrix' of a type (line 1047)
        get_matrix_28409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 12), rotate_call_result_28408, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1047)
        get_matrix_call_result_28411 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 12), get_matrix_28409, *[], **kwargs_28410)
        
        list_28415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 12), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1047, 12), list_28415, get_matrix_call_result_28411)
        # Getting the type of 'self' (line 1046)
        self_28416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 8), 'self')
        # Setting the type of the member '_transforms' of a type (line 1046)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 8), self_28416, '_transforms', list_28415)
        
        # Call to draw(...): (line 1050)
        # Processing the call arguments (line 1050)
        # Getting the type of 'self' (line 1050)
        self_28419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 24), 'self', False)
        # Getting the type of 'renderer' (line 1050)
        renderer_28420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 30), 'renderer', False)
        # Processing the call keyword arguments (line 1050)
        kwargs_28421 = {}
        # Getting the type of 'Collection' (line 1050)
        Collection_28417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 8), 'Collection', False)
        # Obtaining the member 'draw' of a type (line 1050)
        draw_28418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 8), Collection_28417, 'draw')
        # Calling draw(args, kwargs) (line 1050)
        draw_call_result_28422 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 8), draw_28418, *[self_28419, renderer_28420], **kwargs_28421)
        
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1043)
        stypy_return_type_28423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28423)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_28423


# Assigning a type to the variable 'RegularPolyCollection' (line 988)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 988, 0), 'RegularPolyCollection', RegularPolyCollection)

# Assigning a Attribute to a Name (line 990):
# Getting the type of 'mpath' (line 990)
mpath_28424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 22), 'mpath')
# Obtaining the member 'Path' of a type (line 990)
Path_28425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 990, 22), mpath_28424, 'Path')
# Obtaining the member 'unit_regular_polygon' of a type (line 990)
unit_regular_polygon_28426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 990, 22), Path_28425, 'unit_regular_polygon')
# Getting the type of 'RegularPolyCollection'
RegularPolyCollection_28427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RegularPolyCollection')
# Setting the type of the member '_path_generator' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RegularPolyCollection_28427, '_path_generator', unit_regular_polygon_28426)

# Assigning a Name to a Name (line 992):
# Getting the type of 'CIRCLE_AREA_FACTOR' (line 992)
CIRCLE_AREA_FACTOR_28428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 14), 'CIRCLE_AREA_FACTOR')
# Getting the type of 'RegularPolyCollection'
RegularPolyCollection_28429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RegularPolyCollection')
# Setting the type of the member '_factor' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RegularPolyCollection_28429, '_factor', CIRCLE_AREA_FACTOR_28428)
# Declaration of the 'StarPolygonCollection' class
# Getting the type of 'RegularPolyCollection' (line 1053)
RegularPolyCollection_28430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 28), 'RegularPolyCollection')

class StarPolygonCollection(RegularPolyCollection_28430, ):
    unicode_28431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1055, (-1)), 'unicode', u'\n    Draw a collection of regular stars with *numsides* points.')
    
    # Assigning a Attribute to a Name (line 1057):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1053, 0, False)
        # Assigning a type to the variable 'self' (line 1054)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1054, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StarPolygonCollection.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'StarPolygonCollection' (line 1053)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1053, 0), 'StarPolygonCollection', StarPolygonCollection)

# Assigning a Attribute to a Name (line 1057):
# Getting the type of 'mpath' (line 1057)
mpath_28432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 22), 'mpath')
# Obtaining the member 'Path' of a type (line 1057)
Path_28433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 22), mpath_28432, 'Path')
# Obtaining the member 'unit_regular_star' of a type (line 1057)
unit_regular_star_28434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 22), Path_28433, 'unit_regular_star')
# Getting the type of 'StarPolygonCollection'
StarPolygonCollection_28435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'StarPolygonCollection')
# Setting the type of the member '_path_generator' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), StarPolygonCollection_28435, '_path_generator', unit_regular_star_28434)
# Declaration of the 'AsteriskPolygonCollection' class
# Getting the type of 'RegularPolyCollection' (line 1060)
RegularPolyCollection_28436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 32), 'RegularPolyCollection')

class AsteriskPolygonCollection(RegularPolyCollection_28436, ):
    unicode_28437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1062, (-1)), 'unicode', u'\n    Draw a collection of regular asterisks with *numsides* points.')
    
    # Assigning a Attribute to a Name (line 1064):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1060, 0, False)
        # Assigning a type to the variable 'self' (line 1061)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1061, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AsteriskPolygonCollection.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'AsteriskPolygonCollection' (line 1060)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1060, 0), 'AsteriskPolygonCollection', AsteriskPolygonCollection)

# Assigning a Attribute to a Name (line 1064):
# Getting the type of 'mpath' (line 1064)
mpath_28438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 22), 'mpath')
# Obtaining the member 'Path' of a type (line 1064)
Path_28439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1064, 22), mpath_28438, 'Path')
# Obtaining the member 'unit_regular_asterisk' of a type (line 1064)
unit_regular_asterisk_28440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1064, 22), Path_28439, 'unit_regular_asterisk')
# Getting the type of 'AsteriskPolygonCollection'
AsteriskPolygonCollection_28441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'AsteriskPolygonCollection')
# Setting the type of the member '_path_generator' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), AsteriskPolygonCollection_28441, '_path_generator', unit_regular_asterisk_28440)
# Declaration of the 'LineCollection' class
# Getting the type of 'Collection' (line 1067)
Collection_28442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 21), 'Collection')

class LineCollection(Collection_28442, ):
    unicode_28443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1077, (-1)), 'unicode', u'\n    All parameters must be sequences or scalars; if scalars, they will\n    be converted to sequences.  The property of the ith line\n    segment is::\n\n       prop[i % len(props)]\n\n    i.e., the properties cycle if the ``len`` of props is less than the\n    number of segments.\n    ')
    
    # Assigning a Name to a Name (line 1079):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1082)
        None_28444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 28), 'None')
        # Getting the type of 'None' (line 1083)
        None_28445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 24), 'None')
        # Getting the type of 'None' (line 1084)
        None_28446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 30), 'None')
        unicode_28447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1085, 28), 'unicode', u'solid')
        # Getting the type of 'None' (line 1086)
        None_28448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 25), 'None')
        # Getting the type of 'None' (line 1087)
        None_28449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 29), 'None')
        # Getting the type of 'None' (line 1088)
        None_28450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 22), 'None')
        # Getting the type of 'None' (line 1089)
        None_28451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 22), 'None')
        int_28452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, 28), 'int')
        int_28453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1091, 24), 'int')
        unicode_28454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1092, 28), 'unicode', u'none')
        defaults = [None_28444, None_28445, None_28446, unicode_28447, None_28448, None_28449, None_28450, None_28451, int_28452, int_28453, unicode_28454]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1081, 4, False)
        # Assigning a type to the variable 'self' (line 1082)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1082, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LineCollection.__init__', ['segments', 'linewidths', 'colors', 'antialiaseds', 'linestyles', 'offsets', 'transOffset', 'norm', 'cmap', 'pickradius', 'zorder', 'facecolors'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['segments', 'linewidths', 'colors', 'antialiaseds', 'linestyles', 'offsets', 'transOffset', 'norm', 'cmap', 'pickradius', 'zorder', 'facecolors'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_28455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1156, (-1)), 'unicode', u"\n        *segments*\n            a sequence of (*line0*, *line1*, *line2*), where::\n\n                linen = (x0, y0), (x1, y1), ... (xm, ym)\n\n            or the equivalent numpy array with two columns. Each line\n            can be a different length.\n\n        *colors*\n            must be a sequence of RGBA tuples (e.g., arbitrary color\n            strings, etc, not allowed).\n\n        *antialiaseds*\n            must be a sequence of ones or zeros\n\n        *linestyles* [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ]\n            a string or dash tuple. The dash tuple is::\n\n                (offset, onoffseq),\n\n            where *onoffseq* is an even length tuple of on and off ink\n            in points.\n\n        If *linewidths*, *colors*, or *antialiaseds* is None, they\n        default to their rcParams setting, in sequence form.\n\n        If *offsets* and *transOffset* are not None, then\n        *offsets* are transformed by *transOffset* and applied after\n        the segments have been transformed to display coordinates.\n\n        If *offsets* is not None but *transOffset* is None, then the\n        *offsets* are added to the segments before any transformation.\n        In this case, a single offset can be specified as::\n\n            offsets=(xo,yo)\n\n        and this value will be added cumulatively to each successive\n        segment, so as to produce a set of successively offset curves.\n\n        *norm*\n            None (optional for :class:`matplotlib.cm.ScalarMappable`)\n        *cmap*\n            None (optional for :class:`matplotlib.cm.ScalarMappable`)\n\n        *pickradius* is the tolerance for mouse clicks picking a line.\n        The default is 5 pt.\n\n        *zorder*\n           The zorder of the LineCollection.  Default is 2\n\n        *facecolors*\n           The facecolors of the LineCollection. Default is 'none'\n           Setting to a value other than 'none' will lead to a filled\n           polygon being drawn between points on each line.\n\n        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.\n        If the :class:`~matplotlib.cm.ScalarMappable` array\n        :attr:`~matplotlib.cm.ScalarMappable._A` is not None (i.e., a call to\n        :meth:`~matplotlib.cm.ScalarMappable.set_array` has been made), at\n        draw time a call to scalar mappable will be made to set the colors.\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 1157)
        # Getting the type of 'colors' (line 1157)
        colors_28456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 11), 'colors')
        # Getting the type of 'None' (line 1157)
        None_28457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 21), 'None')
        
        (may_be_28458, more_types_in_union_28459) = may_be_none(colors_28456, None_28457)

        if may_be_28458:

            if more_types_in_union_28459:
                # Runtime conditional SSA (line 1157)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 1158):
            
            # Assigning a Subscript to a Name (line 1158):
            
            # Obtaining the type of the subscript
            unicode_28460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1158, 34), 'unicode', u'lines.color')
            # Getting the type of 'mpl' (line 1158)
            mpl_28461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 21), 'mpl')
            # Obtaining the member 'rcParams' of a type (line 1158)
            rcParams_28462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1158, 21), mpl_28461, 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 1158)
            getitem___28463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1158, 21), rcParams_28462, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1158)
            subscript_call_result_28464 = invoke(stypy.reporting.localization.Localization(__file__, 1158, 21), getitem___28463, unicode_28460)
            
            # Assigning a type to the variable 'colors' (line 1158)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1158, 12), 'colors', subscript_call_result_28464)

            if more_types_in_union_28459:
                # SSA join for if statement (line 1157)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1159)
        # Getting the type of 'linewidths' (line 1159)
        linewidths_28465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 11), 'linewidths')
        # Getting the type of 'None' (line 1159)
        None_28466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 25), 'None')
        
        (may_be_28467, more_types_in_union_28468) = may_be_none(linewidths_28465, None_28466)

        if may_be_28467:

            if more_types_in_union_28468:
                # Runtime conditional SSA (line 1159)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Tuple to a Name (line 1160):
            
            # Assigning a Tuple to a Name (line 1160):
            
            # Obtaining an instance of the builtin type 'tuple' (line 1160)
            tuple_28469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1160, 26), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1160)
            # Adding element type (line 1160)
            
            # Obtaining the type of the subscript
            unicode_28470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1160, 39), 'unicode', u'lines.linewidth')
            # Getting the type of 'mpl' (line 1160)
            mpl_28471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 26), 'mpl')
            # Obtaining the member 'rcParams' of a type (line 1160)
            rcParams_28472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1160, 26), mpl_28471, 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 1160)
            getitem___28473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1160, 26), rcParams_28472, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1160)
            subscript_call_result_28474 = invoke(stypy.reporting.localization.Localization(__file__, 1160, 26), getitem___28473, unicode_28470)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1160, 26), tuple_28469, subscript_call_result_28474)
            
            # Assigning a type to the variable 'linewidths' (line 1160)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1160, 12), 'linewidths', tuple_28469)

            if more_types_in_union_28468:
                # SSA join for if statement (line 1159)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1161)
        # Getting the type of 'antialiaseds' (line 1161)
        antialiaseds_28475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 11), 'antialiaseds')
        # Getting the type of 'None' (line 1161)
        None_28476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 27), 'None')
        
        (may_be_28477, more_types_in_union_28478) = may_be_none(antialiaseds_28475, None_28476)

        if may_be_28477:

            if more_types_in_union_28478:
                # Runtime conditional SSA (line 1161)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Tuple to a Name (line 1162):
            
            # Assigning a Tuple to a Name (line 1162):
            
            # Obtaining an instance of the builtin type 'tuple' (line 1162)
            tuple_28479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1162, 28), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1162)
            # Adding element type (line 1162)
            
            # Obtaining the type of the subscript
            unicode_28480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1162, 41), 'unicode', u'lines.antialiased')
            # Getting the type of 'mpl' (line 1162)
            mpl_28481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 28), 'mpl')
            # Obtaining the member 'rcParams' of a type (line 1162)
            rcParams_28482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1162, 28), mpl_28481, 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 1162)
            getitem___28483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1162, 28), rcParams_28482, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1162)
            subscript_call_result_28484 = invoke(stypy.reporting.localization.Localization(__file__, 1162, 28), getitem___28483, unicode_28480)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1162, 28), tuple_28479, subscript_call_result_28484)
            
            # Assigning a type to the variable 'antialiaseds' (line 1162)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1162, 12), 'antialiaseds', tuple_28479)

            if more_types_in_union_28478:
                # SSA join for if statement (line 1161)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1164):
        
        # Assigning a Call to a Name (line 1164):
        
        # Call to to_rgba_array(...): (line 1164)
        # Processing the call arguments (line 1164)
        # Getting the type of 'colors' (line 1164)
        colors_28487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 39), 'colors', False)
        # Processing the call keyword arguments (line 1164)
        kwargs_28488 = {}
        # Getting the type of 'mcolors' (line 1164)
        mcolors_28485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 17), 'mcolors', False)
        # Obtaining the member 'to_rgba_array' of a type (line 1164)
        to_rgba_array_28486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 17), mcolors_28485, 'to_rgba_array')
        # Calling to_rgba_array(args, kwargs) (line 1164)
        to_rgba_array_call_result_28489 = invoke(stypy.reporting.localization.Localization(__file__, 1164, 17), to_rgba_array_28486, *[colors_28487], **kwargs_28488)
        
        # Assigning a type to the variable 'colors' (line 1164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1164, 8), 'colors', to_rgba_array_call_result_28489)
        
        # Call to __init__(...): (line 1166)
        # Processing the call arguments (line 1166)
        # Getting the type of 'self' (line 1167)
        self_28492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 12), 'self', False)
        # Processing the call keyword arguments (line 1166)
        # Getting the type of 'colors' (line 1168)
        colors_28493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 23), 'colors', False)
        keyword_28494 = colors_28493
        # Getting the type of 'facecolors' (line 1169)
        facecolors_28495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 23), 'facecolors', False)
        keyword_28496 = facecolors_28495
        # Getting the type of 'linewidths' (line 1170)
        linewidths_28497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 23), 'linewidths', False)
        keyword_28498 = linewidths_28497
        # Getting the type of 'linestyles' (line 1171)
        linestyles_28499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 23), 'linestyles', False)
        keyword_28500 = linestyles_28499
        # Getting the type of 'antialiaseds' (line 1172)
        antialiaseds_28501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 25), 'antialiaseds', False)
        keyword_28502 = antialiaseds_28501
        # Getting the type of 'offsets' (line 1173)
        offsets_28503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 20), 'offsets', False)
        keyword_28504 = offsets_28503
        # Getting the type of 'transOffset' (line 1174)
        transOffset_28505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 24), 'transOffset', False)
        keyword_28506 = transOffset_28505
        # Getting the type of 'norm' (line 1175)
        norm_28507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 17), 'norm', False)
        keyword_28508 = norm_28507
        # Getting the type of 'cmap' (line 1176)
        cmap_28509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 17), 'cmap', False)
        keyword_28510 = cmap_28509
        # Getting the type of 'pickradius' (line 1177)
        pickradius_28511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 23), 'pickradius', False)
        keyword_28512 = pickradius_28511
        # Getting the type of 'zorder' (line 1178)
        zorder_28513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 19), 'zorder', False)
        keyword_28514 = zorder_28513
        # Getting the type of 'kwargs' (line 1179)
        kwargs_28515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 14), 'kwargs', False)
        kwargs_28516 = {'edgecolors': keyword_28494, 'antialiaseds': keyword_28502, 'kwargs_28515': kwargs_28515, 'linestyles': keyword_28500, 'offsets': keyword_28504, 'linewidths': keyword_28498, 'cmap': keyword_28510, 'transOffset': keyword_28506, 'pickradius': keyword_28512, 'zorder': keyword_28514, 'facecolors': keyword_28496, 'norm': keyword_28508}
        # Getting the type of 'Collection' (line 1166)
        Collection_28490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 8), 'Collection', False)
        # Obtaining the member '__init__' of a type (line 1166)
        init___28491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 8), Collection_28490, '__init__')
        # Calling __init__(args, kwargs) (line 1166)
        init___call_result_28517 = invoke(stypy.reporting.localization.Localization(__file__, 1166, 8), init___28491, *[self_28492], **kwargs_28516)
        
        
        # Call to set_segments(...): (line 1181)
        # Processing the call arguments (line 1181)
        # Getting the type of 'segments' (line 1181)
        segments_28520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 26), 'segments', False)
        # Processing the call keyword arguments (line 1181)
        kwargs_28521 = {}
        # Getting the type of 'self' (line 1181)
        self_28518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 8), 'self', False)
        # Obtaining the member 'set_segments' of a type (line 1181)
        set_segments_28519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1181, 8), self_28518, 'set_segments')
        # Calling set_segments(args, kwargs) (line 1181)
        set_segments_call_result_28522 = invoke(stypy.reporting.localization.Localization(__file__, 1181, 8), set_segments_28519, *[segments_28520], **kwargs_28521)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_segments(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_segments'
        module_type_store = module_type_store.open_function_context('set_segments', 1183, 4, False)
        # Assigning a type to the variable 'self' (line 1184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1184, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LineCollection.set_segments.__dict__.__setitem__('stypy_localization', localization)
        LineCollection.set_segments.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LineCollection.set_segments.__dict__.__setitem__('stypy_type_store', module_type_store)
        LineCollection.set_segments.__dict__.__setitem__('stypy_function_name', 'LineCollection.set_segments')
        LineCollection.set_segments.__dict__.__setitem__('stypy_param_names_list', ['segments'])
        LineCollection.set_segments.__dict__.__setitem__('stypy_varargs_param_name', None)
        LineCollection.set_segments.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LineCollection.set_segments.__dict__.__setitem__('stypy_call_defaults', defaults)
        LineCollection.set_segments.__dict__.__setitem__('stypy_call_varargs', varargs)
        LineCollection.set_segments.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LineCollection.set_segments.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LineCollection.set_segments', ['segments'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_segments', localization, ['segments'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_segments(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 1184)
        # Getting the type of 'segments' (line 1184)
        segments_28523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 11), 'segments')
        # Getting the type of 'None' (line 1184)
        None_28524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 23), 'None')
        
        (may_be_28525, more_types_in_union_28526) = may_be_none(segments_28523, None_28524)

        if may_be_28525:

            if more_types_in_union_28526:
                # Runtime conditional SSA (line 1184)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 1185)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1185, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_28526:
                # SSA join for if statement (line 1184)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a List to a Name (line 1186):
        
        # Assigning a List to a Name (line 1186):
        
        # Obtaining an instance of the builtin type 'list' (line 1186)
        list_28527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1186)
        
        # Assigning a type to the variable '_segments' (line 1186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 8), '_segments', list_28527)
        
        # Getting the type of 'segments' (line 1188)
        segments_28528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 19), 'segments')
        # Testing the type of a for loop iterable (line 1188)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1188, 8), segments_28528)
        # Getting the type of the for loop variable (line 1188)
        for_loop_var_28529 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1188, 8), segments_28528)
        # Assigning a type to the variable 'seg' (line 1188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 8), 'seg', for_loop_var_28529)
        # SSA begins for a for statement (line 1188)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Call to isinstance(...): (line 1189)
        # Processing the call arguments (line 1189)
        # Getting the type of 'seg' (line 1189)
        seg_28531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 30), 'seg', False)
        # Getting the type of 'np' (line 1189)
        np_28532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 35), 'np', False)
        # Obtaining the member 'ma' of a type (line 1189)
        ma_28533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 35), np_28532, 'ma')
        # Obtaining the member 'MaskedArray' of a type (line 1189)
        MaskedArray_28534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 35), ma_28533, 'MaskedArray')
        # Processing the call keyword arguments (line 1189)
        kwargs_28535 = {}
        # Getting the type of 'isinstance' (line 1189)
        isinstance_28530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 19), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1189)
        isinstance_call_result_28536 = invoke(stypy.reporting.localization.Localization(__file__, 1189, 19), isinstance_28530, *[seg_28531, MaskedArray_28534], **kwargs_28535)
        
        # Applying the 'not' unary operator (line 1189)
        result_not__28537 = python_operator(stypy.reporting.localization.Localization(__file__, 1189, 15), 'not', isinstance_call_result_28536)
        
        # Testing the type of an if condition (line 1189)
        if_condition_28538 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1189, 12), result_not__28537)
        # Assigning a type to the variable 'if_condition_28538' (line 1189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 12), 'if_condition_28538', if_condition_28538)
        # SSA begins for if statement (line 1189)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1190):
        
        # Assigning a Call to a Name (line 1190):
        
        # Call to asarray(...): (line 1190)
        # Processing the call arguments (line 1190)
        # Getting the type of 'seg' (line 1190)
        seg_28541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 33), 'seg', False)
        # Getting the type of 'float' (line 1190)
        float_28542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 38), 'float', False)
        # Processing the call keyword arguments (line 1190)
        kwargs_28543 = {}
        # Getting the type of 'np' (line 1190)
        np_28539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 22), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1190)
        asarray_28540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 22), np_28539, 'asarray')
        # Calling asarray(args, kwargs) (line 1190)
        asarray_call_result_28544 = invoke(stypy.reporting.localization.Localization(__file__, 1190, 22), asarray_28540, *[seg_28541, float_28542], **kwargs_28543)
        
        # Assigning a type to the variable 'seg' (line 1190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1190, 16), 'seg', asarray_call_result_28544)
        # SSA join for if statement (line 1189)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1191)
        # Processing the call arguments (line 1191)
        # Getting the type of 'seg' (line 1191)
        seg_28547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 29), 'seg', False)
        # Processing the call keyword arguments (line 1191)
        kwargs_28548 = {}
        # Getting the type of '_segments' (line 1191)
        _segments_28545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 12), '_segments', False)
        # Obtaining the member 'append' of a type (line 1191)
        append_28546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 12), _segments_28545, 'append')
        # Calling append(args, kwargs) (line 1191)
        append_call_result_28549 = invoke(stypy.reporting.localization.Localization(__file__, 1191, 12), append_28546, *[seg_28547], **kwargs_28548)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 1193)
        self_28550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 11), 'self')
        # Obtaining the member '_uniform_offsets' of a type (line 1193)
        _uniform_offsets_28551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1193, 11), self_28550, '_uniform_offsets')
        # Getting the type of 'None' (line 1193)
        None_28552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 40), 'None')
        # Applying the binary operator 'isnot' (line 1193)
        result_is_not_28553 = python_operator(stypy.reporting.localization.Localization(__file__, 1193, 11), 'isnot', _uniform_offsets_28551, None_28552)
        
        # Testing the type of an if condition (line 1193)
        if_condition_28554 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1193, 8), result_is_not_28553)
        # Assigning a type to the variable 'if_condition_28554' (line 1193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1193, 8), 'if_condition_28554', if_condition_28554)
        # SSA begins for if statement (line 1193)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1194):
        
        # Assigning a Call to a Name (line 1194):
        
        # Call to _add_offsets(...): (line 1194)
        # Processing the call arguments (line 1194)
        # Getting the type of '_segments' (line 1194)
        _segments_28557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 42), '_segments', False)
        # Processing the call keyword arguments (line 1194)
        kwargs_28558 = {}
        # Getting the type of 'self' (line 1194)
        self_28555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 24), 'self', False)
        # Obtaining the member '_add_offsets' of a type (line 1194)
        _add_offsets_28556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1194, 24), self_28555, '_add_offsets')
        # Calling _add_offsets(args, kwargs) (line 1194)
        _add_offsets_call_result_28559 = invoke(stypy.reporting.localization.Localization(__file__, 1194, 24), _add_offsets_28556, *[_segments_28557], **kwargs_28558)
        
        # Assigning a type to the variable '_segments' (line 1194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 12), '_segments', _add_offsets_call_result_28559)
        # SSA join for if statement (line 1193)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a ListComp to a Attribute (line 1196):
        
        # Assigning a ListComp to a Attribute (line 1196):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of '_segments' (line 1196)
        _segments_28565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 52), '_segments')
        comprehension_28566 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1196, 23), _segments_28565)
        # Assigning a type to the variable '_seg' (line 1196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1196, 23), '_seg', comprehension_28566)
        
        # Call to Path(...): (line 1196)
        # Processing the call arguments (line 1196)
        # Getting the type of '_seg' (line 1196)
        _seg_28562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 34), '_seg', False)
        # Processing the call keyword arguments (line 1196)
        kwargs_28563 = {}
        # Getting the type of 'mpath' (line 1196)
        mpath_28560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 23), 'mpath', False)
        # Obtaining the member 'Path' of a type (line 1196)
        Path_28561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1196, 23), mpath_28560, 'Path')
        # Calling Path(args, kwargs) (line 1196)
        Path_call_result_28564 = invoke(stypy.reporting.localization.Localization(__file__, 1196, 23), Path_28561, *[_seg_28562], **kwargs_28563)
        
        list_28567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1196, 23), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1196, 23), list_28567, Path_call_result_28564)
        # Getting the type of 'self' (line 1196)
        self_28568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 8), 'self')
        # Setting the type of the member '_paths' of a type (line 1196)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1196, 8), self_28568, '_paths', list_28567)
        
        # Assigning a Name to a Attribute (line 1197):
        
        # Assigning a Name to a Attribute (line 1197):
        # Getting the type of 'True' (line 1197)
        True_28569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 21), 'True')
        # Getting the type of 'self' (line 1197)
        self_28570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1197)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1197, 8), self_28570, 'stale', True_28569)
        
        # ################# End of 'set_segments(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_segments' in the type store
        # Getting the type of 'stypy_return_type' (line 1183)
        stypy_return_type_28571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28571)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_segments'
        return stypy_return_type_28571

    
    # Assigning a Name to a Name (line 1199):
    
    # Assigning a Name to a Name (line 1200):

    @norecursion
    def get_segments(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_segments'
        module_type_store = module_type_store.open_function_context('get_segments', 1202, 4, False)
        # Assigning a type to the variable 'self' (line 1203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LineCollection.get_segments.__dict__.__setitem__('stypy_localization', localization)
        LineCollection.get_segments.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LineCollection.get_segments.__dict__.__setitem__('stypy_type_store', module_type_store)
        LineCollection.get_segments.__dict__.__setitem__('stypy_function_name', 'LineCollection.get_segments')
        LineCollection.get_segments.__dict__.__setitem__('stypy_param_names_list', [])
        LineCollection.get_segments.__dict__.__setitem__('stypy_varargs_param_name', None)
        LineCollection.get_segments.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LineCollection.get_segments.__dict__.__setitem__('stypy_call_defaults', defaults)
        LineCollection.get_segments.__dict__.__setitem__('stypy_call_varargs', varargs)
        LineCollection.get_segments.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LineCollection.get_segments.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LineCollection.get_segments', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_segments', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_segments(...)' code ##################

        
        # Assigning a List to a Name (line 1203):
        
        # Assigning a List to a Name (line 1203):
        
        # Obtaining an instance of the builtin type 'list' (line 1203)
        list_28572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1203, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1203)
        
        # Assigning a type to the variable 'segments' (line 1203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 8), 'segments', list_28572)
        
        # Getting the type of 'self' (line 1205)
        self_28573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 20), 'self')
        # Obtaining the member '_paths' of a type (line 1205)
        _paths_28574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 20), self_28573, '_paths')
        # Testing the type of a for loop iterable (line 1205)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1205, 8), _paths_28574)
        # Getting the type of the for loop variable (line 1205)
        for_loop_var_28575 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1205, 8), _paths_28574)
        # Assigning a type to the variable 'path' (line 1205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 8), 'path', for_loop_var_28575)
        # SSA begins for a for statement (line 1205)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a ListComp to a Name (line 1206):
        
        # Assigning a ListComp to a Name (line 1206):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to iter_segments(...): (line 1206)
        # Processing the call keyword arguments (line 1206)
        kwargs_28579 = {}
        # Getting the type of 'path' (line 1206)
        path_28577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 48), 'path', False)
        # Obtaining the member 'iter_segments' of a type (line 1206)
        iter_segments_28578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 48), path_28577, 'iter_segments')
        # Calling iter_segments(args, kwargs) (line 1206)
        iter_segments_call_result_28580 = invoke(stypy.reporting.localization.Localization(__file__, 1206, 48), iter_segments_28578, *[], **kwargs_28579)
        
        comprehension_28581 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1206, 24), iter_segments_call_result_28580)
        # Assigning a type to the variable 'vertex' (line 1206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1206, 24), 'vertex', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1206, 24), comprehension_28581))
        # Assigning a type to the variable '_' (line 1206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1206, 24), '_', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1206, 24), comprehension_28581))
        # Getting the type of 'vertex' (line 1206)
        vertex_28576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 24), 'vertex')
        list_28582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1206, 24), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1206, 24), list_28582, vertex_28576)
        # Assigning a type to the variable 'vertices' (line 1206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1206, 12), 'vertices', list_28582)
        
        # Assigning a Call to a Name (line 1207):
        
        # Assigning a Call to a Name (line 1207):
        
        # Call to asarray(...): (line 1207)
        # Processing the call arguments (line 1207)
        # Getting the type of 'vertices' (line 1207)
        vertices_28585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 34), 'vertices', False)
        # Processing the call keyword arguments (line 1207)
        kwargs_28586 = {}
        # Getting the type of 'np' (line 1207)
        np_28583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 23), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1207)
        asarray_28584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1207, 23), np_28583, 'asarray')
        # Calling asarray(args, kwargs) (line 1207)
        asarray_call_result_28587 = invoke(stypy.reporting.localization.Localization(__file__, 1207, 23), asarray_28584, *[vertices_28585], **kwargs_28586)
        
        # Assigning a type to the variable 'vertices' (line 1207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1207, 12), 'vertices', asarray_call_result_28587)
        
        # Call to append(...): (line 1208)
        # Processing the call arguments (line 1208)
        # Getting the type of 'vertices' (line 1208)
        vertices_28590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 28), 'vertices', False)
        # Processing the call keyword arguments (line 1208)
        kwargs_28591 = {}
        # Getting the type of 'segments' (line 1208)
        segments_28588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 12), 'segments', False)
        # Obtaining the member 'append' of a type (line 1208)
        append_28589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 12), segments_28588, 'append')
        # Calling append(args, kwargs) (line 1208)
        append_call_result_28592 = invoke(stypy.reporting.localization.Localization(__file__, 1208, 12), append_28589, *[vertices_28590], **kwargs_28591)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'segments' (line 1210)
        segments_28593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 15), 'segments')
        # Assigning a type to the variable 'stypy_return_type' (line 1210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1210, 8), 'stypy_return_type', segments_28593)
        
        # ################# End of 'get_segments(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_segments' in the type store
        # Getting the type of 'stypy_return_type' (line 1202)
        stypy_return_type_28594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28594)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_segments'
        return stypy_return_type_28594


    @norecursion
    def _add_offsets(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_add_offsets'
        module_type_store = module_type_store.open_function_context('_add_offsets', 1212, 4, False)
        # Assigning a type to the variable 'self' (line 1213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1213, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LineCollection._add_offsets.__dict__.__setitem__('stypy_localization', localization)
        LineCollection._add_offsets.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LineCollection._add_offsets.__dict__.__setitem__('stypy_type_store', module_type_store)
        LineCollection._add_offsets.__dict__.__setitem__('stypy_function_name', 'LineCollection._add_offsets')
        LineCollection._add_offsets.__dict__.__setitem__('stypy_param_names_list', ['segs'])
        LineCollection._add_offsets.__dict__.__setitem__('stypy_varargs_param_name', None)
        LineCollection._add_offsets.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LineCollection._add_offsets.__dict__.__setitem__('stypy_call_defaults', defaults)
        LineCollection._add_offsets.__dict__.__setitem__('stypy_call_varargs', varargs)
        LineCollection._add_offsets.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LineCollection._add_offsets.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LineCollection._add_offsets', ['segs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_add_offsets', localization, ['segs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_add_offsets(...)' code ##################

        
        # Assigning a Attribute to a Name (line 1213):
        
        # Assigning a Attribute to a Name (line 1213):
        # Getting the type of 'self' (line 1213)
        self_28595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 18), 'self')
        # Obtaining the member '_uniform_offsets' of a type (line 1213)
        _uniform_offsets_28596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1213, 18), self_28595, '_uniform_offsets')
        # Assigning a type to the variable 'offsets' (line 1213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1213, 8), 'offsets', _uniform_offsets_28596)
        
        # Assigning a Call to a Name (line 1214):
        
        # Assigning a Call to a Name (line 1214):
        
        # Call to len(...): (line 1214)
        # Processing the call arguments (line 1214)
        # Getting the type of 'segs' (line 1214)
        segs_28598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 20), 'segs', False)
        # Processing the call keyword arguments (line 1214)
        kwargs_28599 = {}
        # Getting the type of 'len' (line 1214)
        len_28597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 16), 'len', False)
        # Calling len(args, kwargs) (line 1214)
        len_call_result_28600 = invoke(stypy.reporting.localization.Localization(__file__, 1214, 16), len_28597, *[segs_28598], **kwargs_28599)
        
        # Assigning a type to the variable 'Nsegs' (line 1214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 8), 'Nsegs', len_call_result_28600)
        
        # Assigning a Subscript to a Name (line 1215):
        
        # Assigning a Subscript to a Name (line 1215):
        
        # Obtaining the type of the subscript
        int_28601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1215, 30), 'int')
        # Getting the type of 'offsets' (line 1215)
        offsets_28602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 16), 'offsets')
        # Obtaining the member 'shape' of a type (line 1215)
        shape_28603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 16), offsets_28602, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1215)
        getitem___28604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 16), shape_28603, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1215)
        subscript_call_result_28605 = invoke(stypy.reporting.localization.Localization(__file__, 1215, 16), getitem___28604, int_28601)
        
        # Assigning a type to the variable 'Noffs' (line 1215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 8), 'Noffs', subscript_call_result_28605)
        
        
        # Getting the type of 'Noffs' (line 1216)
        Noffs_28606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 11), 'Noffs')
        int_28607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1216, 20), 'int')
        # Applying the binary operator '==' (line 1216)
        result_eq_28608 = python_operator(stypy.reporting.localization.Localization(__file__, 1216, 11), '==', Noffs_28606, int_28607)
        
        # Testing the type of an if condition (line 1216)
        if_condition_28609 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1216, 8), result_eq_28608)
        # Assigning a type to the variable 'if_condition_28609' (line 1216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1216, 8), 'if_condition_28609', if_condition_28609)
        # SSA begins for if statement (line 1216)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to range(...): (line 1217)
        # Processing the call arguments (line 1217)
        # Getting the type of 'Nsegs' (line 1217)
        Nsegs_28611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 27), 'Nsegs', False)
        # Processing the call keyword arguments (line 1217)
        kwargs_28612 = {}
        # Getting the type of 'range' (line 1217)
        range_28610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 21), 'range', False)
        # Calling range(args, kwargs) (line 1217)
        range_call_result_28613 = invoke(stypy.reporting.localization.Localization(__file__, 1217, 21), range_28610, *[Nsegs_28611], **kwargs_28612)
        
        # Testing the type of a for loop iterable (line 1217)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1217, 12), range_call_result_28613)
        # Getting the type of the for loop variable (line 1217)
        for_loop_var_28614 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1217, 12), range_call_result_28613)
        # Assigning a type to the variable 'i' (line 1217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1217, 12), 'i', for_loop_var_28614)
        # SSA begins for a for statement (line 1217)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Subscript (line 1218):
        
        # Assigning a BinOp to a Subscript (line 1218):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1218)
        i_28615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 31), 'i')
        # Getting the type of 'segs' (line 1218)
        segs_28616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 26), 'segs')
        # Obtaining the member '__getitem__' of a type (line 1218)
        getitem___28617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 26), segs_28616, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1218)
        subscript_call_result_28618 = invoke(stypy.reporting.localization.Localization(__file__, 1218, 26), getitem___28617, i_28615)
        
        # Getting the type of 'i' (line 1218)
        i_28619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 36), 'i')
        # Getting the type of 'offsets' (line 1218)
        offsets_28620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 40), 'offsets')
        # Applying the binary operator '*' (line 1218)
        result_mul_28621 = python_operator(stypy.reporting.localization.Localization(__file__, 1218, 36), '*', i_28619, offsets_28620)
        
        # Applying the binary operator '+' (line 1218)
        result_add_28622 = python_operator(stypy.reporting.localization.Localization(__file__, 1218, 26), '+', subscript_call_result_28618, result_mul_28621)
        
        # Getting the type of 'segs' (line 1218)
        segs_28623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 16), 'segs')
        # Getting the type of 'i' (line 1218)
        i_28624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 21), 'i')
        # Storing an element on a container (line 1218)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1218, 16), segs_28623, (i_28624, result_add_28622))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1216)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to range(...): (line 1220)
        # Processing the call arguments (line 1220)
        # Getting the type of 'Nsegs' (line 1220)
        Nsegs_28626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 27), 'Nsegs', False)
        # Processing the call keyword arguments (line 1220)
        kwargs_28627 = {}
        # Getting the type of 'range' (line 1220)
        range_28625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 21), 'range', False)
        # Calling range(args, kwargs) (line 1220)
        range_call_result_28628 = invoke(stypy.reporting.localization.Localization(__file__, 1220, 21), range_28625, *[Nsegs_28626], **kwargs_28627)
        
        # Testing the type of a for loop iterable (line 1220)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1220, 12), range_call_result_28628)
        # Getting the type of the for loop variable (line 1220)
        for_loop_var_28629 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1220, 12), range_call_result_28628)
        # Assigning a type to the variable 'i' (line 1220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1220, 12), 'i', for_loop_var_28629)
        # SSA begins for a for statement (line 1220)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 1221):
        
        # Assigning a BinOp to a Name (line 1221):
        # Getting the type of 'i' (line 1221)
        i_28630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 21), 'i')
        # Getting the type of 'Noffs' (line 1221)
        Noffs_28631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 25), 'Noffs')
        # Applying the binary operator '%' (line 1221)
        result_mod_28632 = python_operator(stypy.reporting.localization.Localization(__file__, 1221, 21), '%', i_28630, Noffs_28631)
        
        # Assigning a type to the variable 'io' (line 1221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1221, 16), 'io', result_mod_28632)
        
        # Assigning a BinOp to a Subscript (line 1222):
        
        # Assigning a BinOp to a Subscript (line 1222):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1222)
        i_28633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 31), 'i')
        # Getting the type of 'segs' (line 1222)
        segs_28634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 26), 'segs')
        # Obtaining the member '__getitem__' of a type (line 1222)
        getitem___28635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1222, 26), segs_28634, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1222)
        subscript_call_result_28636 = invoke(stypy.reporting.localization.Localization(__file__, 1222, 26), getitem___28635, i_28633)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'io' (line 1222)
        io_28637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 44), 'io')
        # Getting the type of 'io' (line 1222)
        io_28638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 47), 'io')
        int_28639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1222, 52), 'int')
        # Applying the binary operator '+' (line 1222)
        result_add_28640 = python_operator(stypy.reporting.localization.Localization(__file__, 1222, 47), '+', io_28638, int_28639)
        
        slice_28641 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1222, 36), io_28637, result_add_28640, None)
        # Getting the type of 'offsets' (line 1222)
        offsets_28642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 36), 'offsets')
        # Obtaining the member '__getitem__' of a type (line 1222)
        getitem___28643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1222, 36), offsets_28642, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1222)
        subscript_call_result_28644 = invoke(stypy.reporting.localization.Localization(__file__, 1222, 36), getitem___28643, slice_28641)
        
        # Applying the binary operator '+' (line 1222)
        result_add_28645 = python_operator(stypy.reporting.localization.Localization(__file__, 1222, 26), '+', subscript_call_result_28636, subscript_call_result_28644)
        
        # Getting the type of 'segs' (line 1222)
        segs_28646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 16), 'segs')
        # Getting the type of 'i' (line 1222)
        i_28647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 21), 'i')
        # Storing an element on a container (line 1222)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1222, 16), segs_28646, (i_28647, result_add_28645))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1216)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'segs' (line 1223)
        segs_28648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 15), 'segs')
        # Assigning a type to the variable 'stypy_return_type' (line 1223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 8), 'stypy_return_type', segs_28648)
        
        # ################# End of '_add_offsets(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_add_offsets' in the type store
        # Getting the type of 'stypy_return_type' (line 1212)
        stypy_return_type_28649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28649)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_add_offsets'
        return stypy_return_type_28649


    @norecursion
    def set_color(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_color'
        module_type_store = module_type_store.open_function_context('set_color', 1225, 4, False)
        # Assigning a type to the variable 'self' (line 1226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1226, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LineCollection.set_color.__dict__.__setitem__('stypy_localization', localization)
        LineCollection.set_color.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LineCollection.set_color.__dict__.__setitem__('stypy_type_store', module_type_store)
        LineCollection.set_color.__dict__.__setitem__('stypy_function_name', 'LineCollection.set_color')
        LineCollection.set_color.__dict__.__setitem__('stypy_param_names_list', ['c'])
        LineCollection.set_color.__dict__.__setitem__('stypy_varargs_param_name', None)
        LineCollection.set_color.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LineCollection.set_color.__dict__.__setitem__('stypy_call_defaults', defaults)
        LineCollection.set_color.__dict__.__setitem__('stypy_call_varargs', varargs)
        LineCollection.set_color.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LineCollection.set_color.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LineCollection.set_color', ['c'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_color', localization, ['c'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_color(...)' code ##################

        unicode_28650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1233, (-1)), 'unicode', u'\n        Set the color(s) of the line collection.  *c* can be a\n        matplotlib color arg (all patches have same color), or a\n        sequence or rgba tuples; if it is a sequence the patches will\n        cycle through the sequence.\n\n        ACCEPTS: matplotlib color arg or sequence of rgba tuples\n        ')
        
        # Call to set_edgecolor(...): (line 1234)
        # Processing the call arguments (line 1234)
        # Getting the type of 'c' (line 1234)
        c_28653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 27), 'c', False)
        # Processing the call keyword arguments (line 1234)
        kwargs_28654 = {}
        # Getting the type of 'self' (line 1234)
        self_28651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 8), 'self', False)
        # Obtaining the member 'set_edgecolor' of a type (line 1234)
        set_edgecolor_28652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1234, 8), self_28651, 'set_edgecolor')
        # Calling set_edgecolor(args, kwargs) (line 1234)
        set_edgecolor_call_result_28655 = invoke(stypy.reporting.localization.Localization(__file__, 1234, 8), set_edgecolor_28652, *[c_28653], **kwargs_28654)
        
        
        # Assigning a Name to a Attribute (line 1235):
        
        # Assigning a Name to a Attribute (line 1235):
        # Getting the type of 'True' (line 1235)
        True_28656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 21), 'True')
        # Getting the type of 'self' (line 1235)
        self_28657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1235)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1235, 8), self_28657, 'stale', True_28656)
        
        # ################# End of 'set_color(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_color' in the type store
        # Getting the type of 'stypy_return_type' (line 1225)
        stypy_return_type_28658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28658)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_color'
        return stypy_return_type_28658


    @norecursion
    def get_color(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_color'
        module_type_store = module_type_store.open_function_context('get_color', 1237, 4, False)
        # Assigning a type to the variable 'self' (line 1238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LineCollection.get_color.__dict__.__setitem__('stypy_localization', localization)
        LineCollection.get_color.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LineCollection.get_color.__dict__.__setitem__('stypy_type_store', module_type_store)
        LineCollection.get_color.__dict__.__setitem__('stypy_function_name', 'LineCollection.get_color')
        LineCollection.get_color.__dict__.__setitem__('stypy_param_names_list', [])
        LineCollection.get_color.__dict__.__setitem__('stypy_varargs_param_name', None)
        LineCollection.get_color.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LineCollection.get_color.__dict__.__setitem__('stypy_call_defaults', defaults)
        LineCollection.get_color.__dict__.__setitem__('stypy_call_varargs', varargs)
        LineCollection.get_color.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LineCollection.get_color.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LineCollection.get_color', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_color', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_color(...)' code ##################

        # Getting the type of 'self' (line 1238)
        self_28659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 15), 'self')
        # Obtaining the member '_edgecolors' of a type (line 1238)
        _edgecolors_28660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 15), self_28659, '_edgecolors')
        # Assigning a type to the variable 'stypy_return_type' (line 1238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 8), 'stypy_return_type', _edgecolors_28660)
        
        # ################# End of 'get_color(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_color' in the type store
        # Getting the type of 'stypy_return_type' (line 1237)
        stypy_return_type_28661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28661)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_color'
        return stypy_return_type_28661

    
    # Assigning a Name to a Name (line 1240):

# Assigning a type to the variable 'LineCollection' (line 1067)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1067, 0), 'LineCollection', LineCollection)

# Assigning a Name to a Name (line 1079):
# Getting the type of 'True' (line 1079)
True_28662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 20), 'True')
# Getting the type of 'LineCollection'
LineCollection_28663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LineCollection')
# Setting the type of the member '_edge_default' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LineCollection_28663, '_edge_default', True_28662)

# Assigning a Name to a Name (line 1199):
# Getting the type of 'LineCollection'
LineCollection_28664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LineCollection')
# Obtaining the member 'set_segments' of a type
set_segments_28665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LineCollection_28664, 'set_segments')
# Getting the type of 'LineCollection'
LineCollection_28666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LineCollection')
# Setting the type of the member 'set_verts' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LineCollection_28666, 'set_verts', set_segments_28665)

# Assigning a Name to a Name (line 1200):
# Getting the type of 'LineCollection'
LineCollection_28667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LineCollection')
# Obtaining the member 'set_segments' of a type
set_segments_28668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LineCollection_28667, 'set_segments')
# Getting the type of 'LineCollection'
LineCollection_28669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LineCollection')
# Setting the type of the member 'set_paths' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LineCollection_28669, 'set_paths', set_segments_28668)

# Assigning a Name to a Name (line 1240):
# Getting the type of 'LineCollection'
LineCollection_28670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LineCollection')
# Obtaining the member 'get_color' of a type
get_color_28671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LineCollection_28670, 'get_color')
# Getting the type of 'LineCollection'
LineCollection_28672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LineCollection')
# Setting the type of the member 'get_colors' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LineCollection_28672, 'get_colors', get_color_28671)
# Declaration of the 'EventCollection' class
# Getting the type of 'LineCollection' (line 1243)
LineCollection_28673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 22), 'LineCollection')

class EventCollection(LineCollection_28673, ):
    unicode_28674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1250, (-1)), 'unicode', u'\n    A collection of discrete events.\n\n    The events are given by a 1-dimensional array, usually the position of\n    something along an axis, such as time or length.  They do not have an\n    amplitude and are displayed as vertical or horizontal parallel bars.\n    ')
    
    # Assigning a Name to a Name (line 1252):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1256)
        None_28675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 29), 'None')
        int_28676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1257, 28), 'int')
        int_28677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1258, 28), 'int')
        # Getting the type of 'None' (line 1259)
        None_28678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 27), 'None')
        # Getting the type of 'None' (line 1260)
        None_28679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 23), 'None')
        unicode_28680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1261, 27), 'unicode', u'solid')
        # Getting the type of 'None' (line 1262)
        None_28681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 29), 'None')
        defaults = [None_28675, int_28676, int_28677, None_28678, None_28679, unicode_28680, None_28681]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1254, 4, False)
        # Assigning a type to the variable 'self' (line 1255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EventCollection.__init__', ['positions', 'orientation', 'lineoffset', 'linelength', 'linewidth', 'color', 'linestyle', 'antialiased'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['positions', 'orientation', 'lineoffset', 'linelength', 'linewidth', 'color', 'linestyle', 'antialiased'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_28682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1311, (-1)), 'unicode', u"\n        Parameters\n        ----------\n        positions : 1D array-like object\n            Each value is an event.\n\n        orientation : {None, 'horizontal', 'vertical'}, optional\n            The orientation of the **collection** (the event bars are along\n            the orthogonal direction). Defaults to 'horizontal' if not\n            specified or None.\n\n        lineoffset : scalar, optional, default: 0\n            The offset of the center of the markers from the origin, in the\n            direction orthogonal to *orientation*.\n\n        linelength : scalar, optional, default: 1\n            The total height of the marker (i.e. the marker stretches from\n            ``lineoffset - linelength/2`` to ``lineoffset + linelength/2``).\n\n        linewidth : scalar or None, optional, default: None\n            If it is None, defaults to its rcParams setting, in sequence form.\n\n        color : color, sequence of colors or None, optional, default: None\n            If it is None, defaults to its rcParams setting, in sequence form.\n\n        linestyle : str or tuple, optional, default: 'solid'\n            Valid strings are ['solid', 'dashed', 'dashdot', 'dotted',\n            '-', '--', '-.', ':']. Dash tuples should be of the form::\n\n                (offset, onoffseq),\n\n            where *onoffseq* is an even length tuple of on and off ink\n            in points.\n\n        antialiased : {None, 1, 2}, optional\n            If it is None, defaults to its rcParams setting, in sequence form.\n\n        **kwargs : optional\n            Other keyword arguments are line collection properties.  See\n            :class:`~matplotlib.collections.LineCollection` for a list of\n            the valid properties.\n\n        Examples\n        --------\n\n        .. plot:: mpl_examples/lines_bars_and_markers/eventcollection_demo.py\n        ")
        
        # Assigning a Tuple to a Name (line 1313):
        
        # Assigning a Tuple to a Name (line 1313):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1313)
        tuple_28683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1313, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1313)
        # Adding element type (line 1313)
        # Getting the type of 'lineoffset' (line 1313)
        lineoffset_28684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 19), 'lineoffset')
        # Getting the type of 'linelength' (line 1313)
        linelength_28685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 32), 'linelength')
        float_28686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1313, 45), 'float')
        # Applying the binary operator 'div' (line 1313)
        result_div_28687 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 32), 'div', linelength_28685, float_28686)
        
        # Applying the binary operator '+' (line 1313)
        result_add_28688 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 19), '+', lineoffset_28684, result_div_28687)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1313, 19), tuple_28683, result_add_28688)
        # Adding element type (line 1313)
        # Getting the type of 'lineoffset' (line 1314)
        lineoffset_28689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 19), 'lineoffset')
        # Getting the type of 'linelength' (line 1314)
        linelength_28690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 32), 'linelength')
        float_28691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 45), 'float')
        # Applying the binary operator 'div' (line 1314)
        result_div_28692 = python_operator(stypy.reporting.localization.Localization(__file__, 1314, 32), 'div', linelength_28690, float_28691)
        
        # Applying the binary operator '-' (line 1314)
        result_sub_28693 = python_operator(stypy.reporting.localization.Localization(__file__, 1314, 19), '-', lineoffset_28689, result_div_28692)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1313, 19), tuple_28683, result_sub_28693)
        
        # Assigning a type to the variable 'segment' (line 1313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1313, 8), 'segment', tuple_28683)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'positions' (line 1315)
        positions_28694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 11), 'positions')
        # Getting the type of 'None' (line 1315)
        None_28695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 24), 'None')
        # Applying the binary operator 'is' (line 1315)
        result_is__28696 = python_operator(stypy.reporting.localization.Localization(__file__, 1315, 11), 'is', positions_28694, None_28695)
        
        
        
        # Call to len(...): (line 1315)
        # Processing the call arguments (line 1315)
        # Getting the type of 'positions' (line 1315)
        positions_28698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 36), 'positions', False)
        # Processing the call keyword arguments (line 1315)
        kwargs_28699 = {}
        # Getting the type of 'len' (line 1315)
        len_28697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 32), 'len', False)
        # Calling len(args, kwargs) (line 1315)
        len_call_result_28700 = invoke(stypy.reporting.localization.Localization(__file__, 1315, 32), len_28697, *[positions_28698], **kwargs_28699)
        
        int_28701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1315, 50), 'int')
        # Applying the binary operator '==' (line 1315)
        result_eq_28702 = python_operator(stypy.reporting.localization.Localization(__file__, 1315, 32), '==', len_call_result_28700, int_28701)
        
        # Applying the binary operator 'or' (line 1315)
        result_or_keyword_28703 = python_operator(stypy.reporting.localization.Localization(__file__, 1315, 11), 'or', result_is__28696, result_eq_28702)
        
        # Testing the type of an if condition (line 1315)
        if_condition_28704 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1315, 8), result_or_keyword_28703)
        # Assigning a type to the variable 'if_condition_28704' (line 1315)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1315, 8), 'if_condition_28704', if_condition_28704)
        # SSA begins for if statement (line 1315)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 1316):
        
        # Assigning a List to a Name (line 1316):
        
        # Obtaining an instance of the builtin type 'list' (line 1316)
        list_28705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1316, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1316)
        
        # Assigning a type to the variable 'segments' (line 1316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1316, 12), 'segments', list_28705)
        # SSA branch for the else part of an if statement (line 1315)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Call to hasattr(...): (line 1317)
        # Processing the call arguments (line 1317)
        # Getting the type of 'positions' (line 1317)
        positions_28707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 21), 'positions', False)
        unicode_28708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 32), 'unicode', u'ndim')
        # Processing the call keyword arguments (line 1317)
        kwargs_28709 = {}
        # Getting the type of 'hasattr' (line 1317)
        hasattr_28706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 13), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 1317)
        hasattr_call_result_28710 = invoke(stypy.reporting.localization.Localization(__file__, 1317, 13), hasattr_28706, *[positions_28707, unicode_28708], **kwargs_28709)
        
        
        # Getting the type of 'positions' (line 1317)
        positions_28711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 44), 'positions')
        # Obtaining the member 'ndim' of a type (line 1317)
        ndim_28712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1317, 44), positions_28711, 'ndim')
        int_28713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 61), 'int')
        # Applying the binary operator '>' (line 1317)
        result_gt_28714 = python_operator(stypy.reporting.localization.Localization(__file__, 1317, 44), '>', ndim_28712, int_28713)
        
        # Applying the binary operator 'and' (line 1317)
        result_and_keyword_28715 = python_operator(stypy.reporting.localization.Localization(__file__, 1317, 13), 'and', hasattr_call_result_28710, result_gt_28714)
        
        # Testing the type of an if condition (line 1317)
        if_condition_28716 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1317, 13), result_and_keyword_28715)
        # Assigning a type to the variable 'if_condition_28716' (line 1317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1317, 13), 'if_condition_28716', if_condition_28716)
        # SSA begins for if statement (line 1317)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1318)
        # Processing the call arguments (line 1318)
        unicode_28718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 29), 'unicode', u'positions cannot be an array with more than one dimension.')
        # Processing the call keyword arguments (line 1318)
        kwargs_28719 = {}
        # Getting the type of 'ValueError' (line 1318)
        ValueError_28717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1318)
        ValueError_call_result_28720 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 18), ValueError_28717, *[unicode_28718], **kwargs_28719)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1318, 12), ValueError_call_result_28720, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 1317)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'orientation' (line 1320)
        orientation_28721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 14), 'orientation')
        # Getting the type of 'None' (line 1320)
        None_28722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 29), 'None')
        # Applying the binary operator 'is' (line 1320)
        result_is__28723 = python_operator(stypy.reporting.localization.Localization(__file__, 1320, 14), 'is', orientation_28721, None_28722)
        
        
        
        # Call to lower(...): (line 1320)
        # Processing the call keyword arguments (line 1320)
        kwargs_28726 = {}
        # Getting the type of 'orientation' (line 1320)
        orientation_28724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 37), 'orientation', False)
        # Obtaining the member 'lower' of a type (line 1320)
        lower_28725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 37), orientation_28724, 'lower')
        # Calling lower(args, kwargs) (line 1320)
        lower_call_result_28727 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 37), lower_28725, *[], **kwargs_28726)
        
        unicode_28728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, 60), 'unicode', u'none')
        # Applying the binary operator '==' (line 1320)
        result_eq_28729 = python_operator(stypy.reporting.localization.Localization(__file__, 1320, 37), '==', lower_call_result_28727, unicode_28728)
        
        # Applying the binary operator 'or' (line 1320)
        result_or_keyword_28730 = python_operator(stypy.reporting.localization.Localization(__file__, 1320, 14), 'or', result_is__28723, result_eq_28729)
        
        
        # Call to lower(...): (line 1321)
        # Processing the call keyword arguments (line 1321)
        kwargs_28733 = {}
        # Getting the type of 'orientation' (line 1321)
        orientation_28731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 14), 'orientation', False)
        # Obtaining the member 'lower' of a type (line 1321)
        lower_28732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1321, 14), orientation_28731, 'lower')
        # Calling lower(args, kwargs) (line 1321)
        lower_call_result_28734 = invoke(stypy.reporting.localization.Localization(__file__, 1321, 14), lower_28732, *[], **kwargs_28733)
        
        unicode_28735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1321, 37), 'unicode', u'horizontal')
        # Applying the binary operator '==' (line 1321)
        result_eq_28736 = python_operator(stypy.reporting.localization.Localization(__file__, 1321, 14), '==', lower_call_result_28734, unicode_28735)
        
        # Applying the binary operator 'or' (line 1320)
        result_or_keyword_28737 = python_operator(stypy.reporting.localization.Localization(__file__, 1320, 14), 'or', result_or_keyword_28730, result_eq_28736)
        
        # Testing the type of an if condition (line 1320)
        if_condition_28738 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1320, 13), result_or_keyword_28737)
        # Assigning a type to the variable 'if_condition_28738' (line 1320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 13), 'if_condition_28738', if_condition_28738)
        # SSA begins for if statement (line 1320)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to sort(...): (line 1322)
        # Processing the call keyword arguments (line 1322)
        kwargs_28741 = {}
        # Getting the type of 'positions' (line 1322)
        positions_28739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 12), 'positions', False)
        # Obtaining the member 'sort' of a type (line 1322)
        sort_28740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1322, 12), positions_28739, 'sort')
        # Calling sort(args, kwargs) (line 1322)
        sort_call_result_28742 = invoke(stypy.reporting.localization.Localization(__file__, 1322, 12), sort_28740, *[], **kwargs_28741)
        
        
        # Assigning a ListComp to a Name (line 1323):
        
        # Assigning a ListComp to a Name (line 1323):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'positions' (line 1324)
        positions_28749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 34), 'positions')
        comprehension_28750 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1323, 24), positions_28749)
        # Assigning a type to the variable 'coord1' (line 1323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1323, 24), 'coord1', comprehension_28750)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'segment' (line 1323)
        segment_28746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 56), 'segment')
        comprehension_28747 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1323, 25), segment_28746)
        # Assigning a type to the variable 'coord2' (line 1323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1323, 25), 'coord2', comprehension_28747)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1323)
        tuple_28743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1323, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1323)
        # Adding element type (line 1323)
        # Getting the type of 'coord1' (line 1323)
        coord1_28744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 26), 'coord1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1323, 26), tuple_28743, coord1_28744)
        # Adding element type (line 1323)
        # Getting the type of 'coord2' (line 1323)
        coord2_28745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 34), 'coord2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1323, 26), tuple_28743, coord2_28745)
        
        list_28748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1323, 25), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1323, 25), list_28748, tuple_28743)
        list_28751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1323, 24), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1323, 24), list_28751, list_28748)
        # Assigning a type to the variable 'segments' (line 1323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1323, 12), 'segments', list_28751)
        
        # Assigning a Name to a Attribute (line 1325):
        
        # Assigning a Name to a Attribute (line 1325):
        # Getting the type of 'True' (line 1325)
        True_28752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 34), 'True')
        # Getting the type of 'self' (line 1325)
        self_28753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 12), 'self')
        # Setting the type of the member '_is_horizontal' of a type (line 1325)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1325, 12), self_28753, '_is_horizontal', True_28752)
        # SSA branch for the else part of an if statement (line 1320)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to lower(...): (line 1326)
        # Processing the call keyword arguments (line 1326)
        kwargs_28756 = {}
        # Getting the type of 'orientation' (line 1326)
        orientation_28754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 13), 'orientation', False)
        # Obtaining the member 'lower' of a type (line 1326)
        lower_28755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1326, 13), orientation_28754, 'lower')
        # Calling lower(args, kwargs) (line 1326)
        lower_call_result_28757 = invoke(stypy.reporting.localization.Localization(__file__, 1326, 13), lower_28755, *[], **kwargs_28756)
        
        unicode_28758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1326, 36), 'unicode', u'vertical')
        # Applying the binary operator '==' (line 1326)
        result_eq_28759 = python_operator(stypy.reporting.localization.Localization(__file__, 1326, 13), '==', lower_call_result_28757, unicode_28758)
        
        # Testing the type of an if condition (line 1326)
        if_condition_28760 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1326, 13), result_eq_28759)
        # Assigning a type to the variable 'if_condition_28760' (line 1326)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1326, 13), 'if_condition_28760', if_condition_28760)
        # SSA begins for if statement (line 1326)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to sort(...): (line 1327)
        # Processing the call keyword arguments (line 1327)
        kwargs_28763 = {}
        # Getting the type of 'positions' (line 1327)
        positions_28761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 12), 'positions', False)
        # Obtaining the member 'sort' of a type (line 1327)
        sort_28762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1327, 12), positions_28761, 'sort')
        # Calling sort(args, kwargs) (line 1327)
        sort_call_result_28764 = invoke(stypy.reporting.localization.Localization(__file__, 1327, 12), sort_28762, *[], **kwargs_28763)
        
        
        # Assigning a ListComp to a Name (line 1328):
        
        # Assigning a ListComp to a Name (line 1328):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'positions' (line 1329)
        positions_28771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 34), 'positions')
        comprehension_28772 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1328, 24), positions_28771)
        # Assigning a type to the variable 'coord1' (line 1328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1328, 24), 'coord1', comprehension_28772)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'segment' (line 1328)
        segment_28768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 56), 'segment')
        comprehension_28769 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1328, 25), segment_28768)
        # Assigning a type to the variable 'coord2' (line 1328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1328, 25), 'coord2', comprehension_28769)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1328)
        tuple_28765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1328, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1328)
        # Adding element type (line 1328)
        # Getting the type of 'coord2' (line 1328)
        coord2_28766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 26), 'coord2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1328, 26), tuple_28765, coord2_28766)
        # Adding element type (line 1328)
        # Getting the type of 'coord1' (line 1328)
        coord1_28767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 34), 'coord1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1328, 26), tuple_28765, coord1_28767)
        
        list_28770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1328, 25), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1328, 25), list_28770, tuple_28765)
        list_28773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1328, 24), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1328, 24), list_28773, list_28770)
        # Assigning a type to the variable 'segments' (line 1328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1328, 12), 'segments', list_28773)
        
        # Assigning a Name to a Attribute (line 1330):
        
        # Assigning a Name to a Attribute (line 1330):
        # Getting the type of 'False' (line 1330)
        False_28774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 34), 'False')
        # Getting the type of 'self' (line 1330)
        self_28775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 12), 'self')
        # Setting the type of the member '_is_horizontal' of a type (line 1330)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1330, 12), self_28775, '_is_horizontal', False_28774)
        # SSA branch for the else part of an if statement (line 1326)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1332)
        # Processing the call arguments (line 1332)
        unicode_28777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1332, 29), 'unicode', u"orientation must be 'horizontal' or 'vertical'")
        # Processing the call keyword arguments (line 1332)
        kwargs_28778 = {}
        # Getting the type of 'ValueError' (line 1332)
        ValueError_28776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1332)
        ValueError_call_result_28779 = invoke(stypy.reporting.localization.Localization(__file__, 1332, 18), ValueError_28776, *[unicode_28777], **kwargs_28778)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1332, 12), ValueError_call_result_28779, 'raise parameter', BaseException)
        # SSA join for if statement (line 1326)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1320)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1317)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1315)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 1334)
        # Processing the call arguments (line 1334)
        # Getting the type of 'self' (line 1334)
        self_28782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 32), 'self', False)
        # Getting the type of 'segments' (line 1335)
        segments_28783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 32), 'segments', False)
        # Processing the call keyword arguments (line 1334)
        # Getting the type of 'linewidth' (line 1336)
        linewidth_28784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 43), 'linewidth', False)
        keyword_28785 = linewidth_28784
        # Getting the type of 'color' (line 1337)
        color_28786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 39), 'color', False)
        keyword_28787 = color_28786
        # Getting the type of 'antialiased' (line 1338)
        antialiased_28788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 45), 'antialiased', False)
        keyword_28789 = antialiased_28788
        # Getting the type of 'linestyle' (line 1339)
        linestyle_28790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 43), 'linestyle', False)
        keyword_28791 = linestyle_28790
        # Getting the type of 'kwargs' (line 1340)
        kwargs_28792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 34), 'kwargs', False)
        kwargs_28793 = {'kwargs_28792': kwargs_28792, 'colors': keyword_28787, 'antialiaseds': keyword_28789, 'linestyles': keyword_28791, 'linewidths': keyword_28785}
        # Getting the type of 'LineCollection' (line 1334)
        LineCollection_28780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 8), 'LineCollection', False)
        # Obtaining the member '__init__' of a type (line 1334)
        init___28781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 8), LineCollection_28780, '__init__')
        # Calling __init__(args, kwargs) (line 1334)
        init___call_result_28794 = invoke(stypy.reporting.localization.Localization(__file__, 1334, 8), init___28781, *[self_28782, segments_28783], **kwargs_28793)
        
        
        # Assigning a Name to a Attribute (line 1342):
        
        # Assigning a Name to a Attribute (line 1342):
        # Getting the type of 'linelength' (line 1342)
        linelength_28795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 27), 'linelength')
        # Getting the type of 'self' (line 1342)
        self_28796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 8), 'self')
        # Setting the type of the member '_linelength' of a type (line 1342)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1342, 8), self_28796, '_linelength', linelength_28795)
        
        # Assigning a Name to a Attribute (line 1343):
        
        # Assigning a Name to a Attribute (line 1343):
        # Getting the type of 'lineoffset' (line 1343)
        lineoffset_28797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 27), 'lineoffset')
        # Getting the type of 'self' (line 1343)
        self_28798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'self')
        # Setting the type of the member '_lineoffset' of a type (line 1343)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 8), self_28798, '_lineoffset', lineoffset_28797)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_positions(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_positions'
        module_type_store = module_type_store.open_function_context('get_positions', 1345, 4, False)
        # Assigning a type to the variable 'self' (line 1346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1346, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EventCollection.get_positions.__dict__.__setitem__('stypy_localization', localization)
        EventCollection.get_positions.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EventCollection.get_positions.__dict__.__setitem__('stypy_type_store', module_type_store)
        EventCollection.get_positions.__dict__.__setitem__('stypy_function_name', 'EventCollection.get_positions')
        EventCollection.get_positions.__dict__.__setitem__('stypy_param_names_list', [])
        EventCollection.get_positions.__dict__.__setitem__('stypy_varargs_param_name', None)
        EventCollection.get_positions.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EventCollection.get_positions.__dict__.__setitem__('stypy_call_defaults', defaults)
        EventCollection.get_positions.__dict__.__setitem__('stypy_call_varargs', varargs)
        EventCollection.get_positions.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EventCollection.get_positions.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EventCollection.get_positions', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_positions', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_positions(...)' code ##################

        unicode_28799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1348, (-1)), 'unicode', u'\n        return an array containing the floating-point values of the positions\n        ')
        
        # Assigning a Call to a Name (line 1349):
        
        # Assigning a Call to a Name (line 1349):
        
        # Call to get_segments(...): (line 1349)
        # Processing the call keyword arguments (line 1349)
        kwargs_28802 = {}
        # Getting the type of 'self' (line 1349)
        self_28800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 19), 'self', False)
        # Obtaining the member 'get_segments' of a type (line 1349)
        get_segments_28801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1349, 19), self_28800, 'get_segments')
        # Calling get_segments(args, kwargs) (line 1349)
        get_segments_call_result_28803 = invoke(stypy.reporting.localization.Localization(__file__, 1349, 19), get_segments_28801, *[], **kwargs_28802)
        
        # Assigning a type to the variable 'segments' (line 1349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1349, 8), 'segments', get_segments_call_result_28803)
        
        # Assigning a IfExp to a Name (line 1350):
        
        # Assigning a IfExp to a Name (line 1350):
        
        
        # Call to is_horizontal(...): (line 1350)
        # Processing the call keyword arguments (line 1350)
        kwargs_28806 = {}
        # Getting the type of 'self' (line 1350)
        self_28804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 19), 'self', False)
        # Obtaining the member 'is_horizontal' of a type (line 1350)
        is_horizontal_28805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1350, 19), self_28804, 'is_horizontal')
        # Calling is_horizontal(args, kwargs) (line 1350)
        is_horizontal_call_result_28807 = invoke(stypy.reporting.localization.Localization(__file__, 1350, 19), is_horizontal_28805, *[], **kwargs_28806)
        
        # Testing the type of an if expression (line 1350)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1350, 14), is_horizontal_call_result_28807)
        # SSA begins for if expression (line 1350)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        int_28808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1350, 14), 'int')
        # SSA branch for the else part of an if expression (line 1350)
        module_type_store.open_ssa_branch('if expression else')
        int_28809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1350, 45), 'int')
        # SSA join for if expression (line 1350)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_28810 = union_type.UnionType.add(int_28808, int_28809)
        
        # Assigning a type to the variable 'pos' (line 1350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1350, 8), 'pos', if_exp_28810)
        
        # Assigning a List to a Name (line 1351):
        
        # Assigning a List to a Name (line 1351):
        
        # Obtaining an instance of the builtin type 'list' (line 1351)
        list_28811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1351, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1351)
        
        # Assigning a type to the variable 'positions' (line 1351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1351, 8), 'positions', list_28811)
        
        # Getting the type of 'segments' (line 1352)
        segments_28812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 23), 'segments')
        # Testing the type of a for loop iterable (line 1352)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1352, 8), segments_28812)
        # Getting the type of the for loop variable (line 1352)
        for_loop_var_28813 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1352, 8), segments_28812)
        # Assigning a type to the variable 'segment' (line 1352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1352, 8), 'segment', for_loop_var_28813)
        # SSA begins for a for statement (line 1352)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to append(...): (line 1353)
        # Processing the call arguments (line 1353)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1353)
        tuple_28816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1353, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1353)
        # Adding element type (line 1353)
        int_28817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1353, 37), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1353, 37), tuple_28816, int_28817)
        # Adding element type (line 1353)
        # Getting the type of 'pos' (line 1353)
        pos_28818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 40), 'pos', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1353, 37), tuple_28816, pos_28818)
        
        # Getting the type of 'segment' (line 1353)
        segment_28819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 29), 'segment', False)
        # Obtaining the member '__getitem__' of a type (line 1353)
        getitem___28820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1353, 29), segment_28819, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1353)
        subscript_call_result_28821 = invoke(stypy.reporting.localization.Localization(__file__, 1353, 29), getitem___28820, tuple_28816)
        
        # Processing the call keyword arguments (line 1353)
        kwargs_28822 = {}
        # Getting the type of 'positions' (line 1353)
        positions_28814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 12), 'positions', False)
        # Obtaining the member 'append' of a type (line 1353)
        append_28815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1353, 12), positions_28814, 'append')
        # Calling append(args, kwargs) (line 1353)
        append_call_result_28823 = invoke(stypy.reporting.localization.Localization(__file__, 1353, 12), append_28815, *[subscript_call_result_28821], **kwargs_28822)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'positions' (line 1354)
        positions_28824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 15), 'positions')
        # Assigning a type to the variable 'stypy_return_type' (line 1354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'stypy_return_type', positions_28824)
        
        # ################# End of 'get_positions(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_positions' in the type store
        # Getting the type of 'stypy_return_type' (line 1345)
        stypy_return_type_28825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28825)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_positions'
        return stypy_return_type_28825


    @norecursion
    def set_positions(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_positions'
        module_type_store = module_type_store.open_function_context('set_positions', 1356, 4, False)
        # Assigning a type to the variable 'self' (line 1357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1357, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EventCollection.set_positions.__dict__.__setitem__('stypy_localization', localization)
        EventCollection.set_positions.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EventCollection.set_positions.__dict__.__setitem__('stypy_type_store', module_type_store)
        EventCollection.set_positions.__dict__.__setitem__('stypy_function_name', 'EventCollection.set_positions')
        EventCollection.set_positions.__dict__.__setitem__('stypy_param_names_list', ['positions'])
        EventCollection.set_positions.__dict__.__setitem__('stypy_varargs_param_name', None)
        EventCollection.set_positions.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EventCollection.set_positions.__dict__.__setitem__('stypy_call_defaults', defaults)
        EventCollection.set_positions.__dict__.__setitem__('stypy_call_varargs', varargs)
        EventCollection.set_positions.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EventCollection.set_positions.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EventCollection.set_positions', ['positions'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_positions', localization, ['positions'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_positions(...)' code ##################

        unicode_28826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1359, (-1)), 'unicode', u'\n        set the positions of the events to the specified value\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'positions' (line 1360)
        positions_28827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 11), 'positions')
        # Getting the type of 'None' (line 1360)
        None_28828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 24), 'None')
        # Applying the binary operator 'is' (line 1360)
        result_is__28829 = python_operator(stypy.reporting.localization.Localization(__file__, 1360, 11), 'is', positions_28827, None_28828)
        
        
        # Evaluating a boolean operation
        
        # Call to hasattr(...): (line 1360)
        # Processing the call arguments (line 1360)
        # Getting the type of 'positions' (line 1360)
        positions_28831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 41), 'positions', False)
        unicode_28832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1360, 52), 'unicode', u'len')
        # Processing the call keyword arguments (line 1360)
        kwargs_28833 = {}
        # Getting the type of 'hasattr' (line 1360)
        hasattr_28830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 33), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 1360)
        hasattr_call_result_28834 = invoke(stypy.reporting.localization.Localization(__file__, 1360, 33), hasattr_28830, *[positions_28831, unicode_28832], **kwargs_28833)
        
        
        
        # Call to len(...): (line 1361)
        # Processing the call arguments (line 1361)
        # Getting the type of 'positions' (line 1361)
        positions_28836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 37), 'positions', False)
        # Processing the call keyword arguments (line 1361)
        kwargs_28837 = {}
        # Getting the type of 'len' (line 1361)
        len_28835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 33), 'len', False)
        # Calling len(args, kwargs) (line 1361)
        len_call_result_28838 = invoke(stypy.reporting.localization.Localization(__file__, 1361, 33), len_28835, *[positions_28836], **kwargs_28837)
        
        int_28839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1361, 51), 'int')
        # Applying the binary operator '==' (line 1361)
        result_eq_28840 = python_operator(stypy.reporting.localization.Localization(__file__, 1361, 33), '==', len_call_result_28838, int_28839)
        
        # Applying the binary operator 'and' (line 1360)
        result_and_keyword_28841 = python_operator(stypy.reporting.localization.Localization(__file__, 1360, 33), 'and', hasattr_call_result_28834, result_eq_28840)
        
        # Applying the binary operator 'or' (line 1360)
        result_or_keyword_28842 = python_operator(stypy.reporting.localization.Localization(__file__, 1360, 11), 'or', result_is__28829, result_and_keyword_28841)
        
        # Testing the type of an if condition (line 1360)
        if_condition_28843 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1360, 8), result_or_keyword_28842)
        # Assigning a type to the variable 'if_condition_28843' (line 1360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1360, 8), 'if_condition_28843', if_condition_28843)
        # SSA begins for if statement (line 1360)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_segments(...): (line 1362)
        # Processing the call arguments (line 1362)
        
        # Obtaining an instance of the builtin type 'list' (line 1362)
        list_28846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1362, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1362)
        
        # Processing the call keyword arguments (line 1362)
        kwargs_28847 = {}
        # Getting the type of 'self' (line 1362)
        self_28844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 12), 'self', False)
        # Obtaining the member 'set_segments' of a type (line 1362)
        set_segments_28845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 12), self_28844, 'set_segments')
        # Calling set_segments(args, kwargs) (line 1362)
        set_segments_call_result_28848 = invoke(stypy.reporting.localization.Localization(__file__, 1362, 12), set_segments_28845, *[list_28846], **kwargs_28847)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1363, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1360)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1365):
        
        # Assigning a Call to a Name (line 1365):
        
        # Call to get_lineoffset(...): (line 1365)
        # Processing the call keyword arguments (line 1365)
        kwargs_28851 = {}
        # Getting the type of 'self' (line 1365)
        self_28849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 21), 'self', False)
        # Obtaining the member 'get_lineoffset' of a type (line 1365)
        get_lineoffset_28850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1365, 21), self_28849, 'get_lineoffset')
        # Calling get_lineoffset(args, kwargs) (line 1365)
        get_lineoffset_call_result_28852 = invoke(stypy.reporting.localization.Localization(__file__, 1365, 21), get_lineoffset_28850, *[], **kwargs_28851)
        
        # Assigning a type to the variable 'lineoffset' (line 1365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1365, 8), 'lineoffset', get_lineoffset_call_result_28852)
        
        # Assigning a Call to a Name (line 1366):
        
        # Assigning a Call to a Name (line 1366):
        
        # Call to get_linelength(...): (line 1366)
        # Processing the call keyword arguments (line 1366)
        kwargs_28855 = {}
        # Getting the type of 'self' (line 1366)
        self_28853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 21), 'self', False)
        # Obtaining the member 'get_linelength' of a type (line 1366)
        get_linelength_28854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1366, 21), self_28853, 'get_linelength')
        # Calling get_linelength(args, kwargs) (line 1366)
        get_linelength_call_result_28856 = invoke(stypy.reporting.localization.Localization(__file__, 1366, 21), get_linelength_28854, *[], **kwargs_28855)
        
        # Assigning a type to the variable 'linelength' (line 1366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1366, 8), 'linelength', get_linelength_call_result_28856)
        
        # Assigning a Tuple to a Name (line 1367):
        
        # Assigning a Tuple to a Name (line 1367):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1367)
        tuple_28857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1367, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1367)
        # Adding element type (line 1367)
        # Getting the type of 'lineoffset' (line 1367)
        lineoffset_28858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 19), 'lineoffset')
        # Getting the type of 'linelength' (line 1367)
        linelength_28859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 32), 'linelength')
        float_28860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1367, 45), 'float')
        # Applying the binary operator 'div' (line 1367)
        result_div_28861 = python_operator(stypy.reporting.localization.Localization(__file__, 1367, 32), 'div', linelength_28859, float_28860)
        
        # Applying the binary operator '+' (line 1367)
        result_add_28862 = python_operator(stypy.reporting.localization.Localization(__file__, 1367, 19), '+', lineoffset_28858, result_div_28861)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1367, 19), tuple_28857, result_add_28862)
        # Adding element type (line 1367)
        # Getting the type of 'lineoffset' (line 1368)
        lineoffset_28863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 19), 'lineoffset')
        # Getting the type of 'linelength' (line 1368)
        linelength_28864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 32), 'linelength')
        float_28865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1368, 45), 'float')
        # Applying the binary operator 'div' (line 1368)
        result_div_28866 = python_operator(stypy.reporting.localization.Localization(__file__, 1368, 32), 'div', linelength_28864, float_28865)
        
        # Applying the binary operator '-' (line 1368)
        result_sub_28867 = python_operator(stypy.reporting.localization.Localization(__file__, 1368, 19), '-', lineoffset_28863, result_div_28866)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1367, 19), tuple_28857, result_sub_28867)
        
        # Assigning a type to the variable 'segment' (line 1367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1367, 8), 'segment', tuple_28857)
        
        # Assigning a Call to a Name (line 1369):
        
        # Assigning a Call to a Name (line 1369):
        
        # Call to asanyarray(...): (line 1369)
        # Processing the call arguments (line 1369)
        # Getting the type of 'positions' (line 1369)
        positions_28870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 34), 'positions', False)
        # Processing the call keyword arguments (line 1369)
        kwargs_28871 = {}
        # Getting the type of 'np' (line 1369)
        np_28868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 20), 'np', False)
        # Obtaining the member 'asanyarray' of a type (line 1369)
        asanyarray_28869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1369, 20), np_28868, 'asanyarray')
        # Calling asanyarray(args, kwargs) (line 1369)
        asanyarray_call_result_28872 = invoke(stypy.reporting.localization.Localization(__file__, 1369, 20), asanyarray_28869, *[positions_28870], **kwargs_28871)
        
        # Assigning a type to the variable 'positions' (line 1369)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1369, 8), 'positions', asanyarray_call_result_28872)
        
        # Call to sort(...): (line 1370)
        # Processing the call keyword arguments (line 1370)
        kwargs_28875 = {}
        # Getting the type of 'positions' (line 1370)
        positions_28873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 8), 'positions', False)
        # Obtaining the member 'sort' of a type (line 1370)
        sort_28874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1370, 8), positions_28873, 'sort')
        # Calling sort(args, kwargs) (line 1370)
        sort_call_result_28876 = invoke(stypy.reporting.localization.Localization(__file__, 1370, 8), sort_28874, *[], **kwargs_28875)
        
        
        
        # Call to is_horizontal(...): (line 1371)
        # Processing the call keyword arguments (line 1371)
        kwargs_28879 = {}
        # Getting the type of 'self' (line 1371)
        self_28877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 11), 'self', False)
        # Obtaining the member 'is_horizontal' of a type (line 1371)
        is_horizontal_28878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 11), self_28877, 'is_horizontal')
        # Calling is_horizontal(args, kwargs) (line 1371)
        is_horizontal_call_result_28880 = invoke(stypy.reporting.localization.Localization(__file__, 1371, 11), is_horizontal_28878, *[], **kwargs_28879)
        
        # Testing the type of an if condition (line 1371)
        if_condition_28881 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1371, 8), is_horizontal_call_result_28880)
        # Assigning a type to the variable 'if_condition_28881' (line 1371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1371, 8), 'if_condition_28881', if_condition_28881)
        # SSA begins for if statement (line 1371)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a ListComp to a Name (line 1372):
        
        # Assigning a ListComp to a Name (line 1372):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'positions' (line 1373)
        positions_28888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 34), 'positions')
        comprehension_28889 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1372, 24), positions_28888)
        # Assigning a type to the variable 'coord1' (line 1372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1372, 24), 'coord1', comprehension_28889)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'segment' (line 1372)
        segment_28885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 56), 'segment')
        comprehension_28886 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1372, 25), segment_28885)
        # Assigning a type to the variable 'coord2' (line 1372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1372, 25), 'coord2', comprehension_28886)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1372)
        tuple_28882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1372, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1372)
        # Adding element type (line 1372)
        # Getting the type of 'coord1' (line 1372)
        coord1_28883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 26), 'coord1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1372, 26), tuple_28882, coord1_28883)
        # Adding element type (line 1372)
        # Getting the type of 'coord2' (line 1372)
        coord2_28884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 34), 'coord2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1372, 26), tuple_28882, coord2_28884)
        
        list_28887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1372, 25), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1372, 25), list_28887, tuple_28882)
        list_28890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1372, 24), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1372, 24), list_28890, list_28887)
        # Assigning a type to the variable 'segments' (line 1372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1372, 12), 'segments', list_28890)
        # SSA branch for the else part of an if statement (line 1371)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a ListComp to a Name (line 1375):
        
        # Assigning a ListComp to a Name (line 1375):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'positions' (line 1376)
        positions_28897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 34), 'positions')
        comprehension_28898 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1375, 24), positions_28897)
        # Assigning a type to the variable 'coord1' (line 1375)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1375, 24), 'coord1', comprehension_28898)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'segment' (line 1375)
        segment_28894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 56), 'segment')
        comprehension_28895 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1375, 25), segment_28894)
        # Assigning a type to the variable 'coord2' (line 1375)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1375, 25), 'coord2', comprehension_28895)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1375)
        tuple_28891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1375, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1375)
        # Adding element type (line 1375)
        # Getting the type of 'coord2' (line 1375)
        coord2_28892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 26), 'coord2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1375, 26), tuple_28891, coord2_28892)
        # Adding element type (line 1375)
        # Getting the type of 'coord1' (line 1375)
        coord1_28893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 34), 'coord1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1375, 26), tuple_28891, coord1_28893)
        
        list_28896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1375, 25), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1375, 25), list_28896, tuple_28891)
        list_28899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1375, 24), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1375, 24), list_28899, list_28896)
        # Assigning a type to the variable 'segments' (line 1375)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1375, 12), 'segments', list_28899)
        # SSA join for if statement (line 1371)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_segments(...): (line 1377)
        # Processing the call arguments (line 1377)
        # Getting the type of 'segments' (line 1377)
        segments_28902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 26), 'segments', False)
        # Processing the call keyword arguments (line 1377)
        kwargs_28903 = {}
        # Getting the type of 'self' (line 1377)
        self_28900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 8), 'self', False)
        # Obtaining the member 'set_segments' of a type (line 1377)
        set_segments_28901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1377, 8), self_28900, 'set_segments')
        # Calling set_segments(args, kwargs) (line 1377)
        set_segments_call_result_28904 = invoke(stypy.reporting.localization.Localization(__file__, 1377, 8), set_segments_28901, *[segments_28902], **kwargs_28903)
        
        
        # ################# End of 'set_positions(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_positions' in the type store
        # Getting the type of 'stypy_return_type' (line 1356)
        stypy_return_type_28905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28905)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_positions'
        return stypy_return_type_28905


    @norecursion
    def add_positions(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_positions'
        module_type_store = module_type_store.open_function_context('add_positions', 1379, 4, False)
        # Assigning a type to the variable 'self' (line 1380)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1380, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EventCollection.add_positions.__dict__.__setitem__('stypy_localization', localization)
        EventCollection.add_positions.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EventCollection.add_positions.__dict__.__setitem__('stypy_type_store', module_type_store)
        EventCollection.add_positions.__dict__.__setitem__('stypy_function_name', 'EventCollection.add_positions')
        EventCollection.add_positions.__dict__.__setitem__('stypy_param_names_list', ['position'])
        EventCollection.add_positions.__dict__.__setitem__('stypy_varargs_param_name', None)
        EventCollection.add_positions.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EventCollection.add_positions.__dict__.__setitem__('stypy_call_defaults', defaults)
        EventCollection.add_positions.__dict__.__setitem__('stypy_call_varargs', varargs)
        EventCollection.add_positions.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EventCollection.add_positions.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EventCollection.add_positions', ['position'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_positions', localization, ['position'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_positions(...)' code ##################

        unicode_28906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1382, (-1)), 'unicode', u'\n        add one or more events at the specified positions\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'position' (line 1383)
        position_28907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 11), 'position')
        # Getting the type of 'None' (line 1383)
        None_28908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 23), 'None')
        # Applying the binary operator 'is' (line 1383)
        result_is__28909 = python_operator(stypy.reporting.localization.Localization(__file__, 1383, 11), 'is', position_28907, None_28908)
        
        
        # Evaluating a boolean operation
        
        # Call to hasattr(...): (line 1383)
        # Processing the call arguments (line 1383)
        # Getting the type of 'position' (line 1383)
        position_28911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 40), 'position', False)
        unicode_28912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1383, 50), 'unicode', u'len')
        # Processing the call keyword arguments (line 1383)
        kwargs_28913 = {}
        # Getting the type of 'hasattr' (line 1383)
        hasattr_28910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 32), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 1383)
        hasattr_call_result_28914 = invoke(stypy.reporting.localization.Localization(__file__, 1383, 32), hasattr_28910, *[position_28911, unicode_28912], **kwargs_28913)
        
        
        
        # Call to len(...): (line 1384)
        # Processing the call arguments (line 1384)
        # Getting the type of 'position' (line 1384)
        position_28916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 36), 'position', False)
        # Processing the call keyword arguments (line 1384)
        kwargs_28917 = {}
        # Getting the type of 'len' (line 1384)
        len_28915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 32), 'len', False)
        # Calling len(args, kwargs) (line 1384)
        len_call_result_28918 = invoke(stypy.reporting.localization.Localization(__file__, 1384, 32), len_28915, *[position_28916], **kwargs_28917)
        
        int_28919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1384, 49), 'int')
        # Applying the binary operator '==' (line 1384)
        result_eq_28920 = python_operator(stypy.reporting.localization.Localization(__file__, 1384, 32), '==', len_call_result_28918, int_28919)
        
        # Applying the binary operator 'and' (line 1383)
        result_and_keyword_28921 = python_operator(stypy.reporting.localization.Localization(__file__, 1383, 32), 'and', hasattr_call_result_28914, result_eq_28920)
        
        # Applying the binary operator 'or' (line 1383)
        result_or_keyword_28922 = python_operator(stypy.reporting.localization.Localization(__file__, 1383, 11), 'or', result_is__28909, result_and_keyword_28921)
        
        # Testing the type of an if condition (line 1383)
        if_condition_28923 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1383, 8), result_or_keyword_28922)
        # Assigning a type to the variable 'if_condition_28923' (line 1383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1383, 8), 'if_condition_28923', if_condition_28923)
        # SSA begins for if statement (line 1383)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1385, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1383)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1386):
        
        # Assigning a Call to a Name (line 1386):
        
        # Call to get_positions(...): (line 1386)
        # Processing the call keyword arguments (line 1386)
        kwargs_28926 = {}
        # Getting the type of 'self' (line 1386)
        self_28924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 20), 'self', False)
        # Obtaining the member 'get_positions' of a type (line 1386)
        get_positions_28925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1386, 20), self_28924, 'get_positions')
        # Calling get_positions(args, kwargs) (line 1386)
        get_positions_call_result_28927 = invoke(stypy.reporting.localization.Localization(__file__, 1386, 20), get_positions_28925, *[], **kwargs_28926)
        
        # Assigning a type to the variable 'positions' (line 1386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1386, 8), 'positions', get_positions_call_result_28927)
        
        # Assigning a Call to a Name (line 1387):
        
        # Assigning a Call to a Name (line 1387):
        
        # Call to hstack(...): (line 1387)
        # Processing the call arguments (line 1387)
        
        # Obtaining an instance of the builtin type 'list' (line 1387)
        list_28930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1387, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1387)
        # Adding element type (line 1387)
        # Getting the type of 'positions' (line 1387)
        positions_28931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 31), 'positions', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1387, 30), list_28930, positions_28931)
        # Adding element type (line 1387)
        
        # Call to asanyarray(...): (line 1387)
        # Processing the call arguments (line 1387)
        # Getting the type of 'position' (line 1387)
        position_28934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 56), 'position', False)
        # Processing the call keyword arguments (line 1387)
        kwargs_28935 = {}
        # Getting the type of 'np' (line 1387)
        np_28932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 42), 'np', False)
        # Obtaining the member 'asanyarray' of a type (line 1387)
        asanyarray_28933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1387, 42), np_28932, 'asanyarray')
        # Calling asanyarray(args, kwargs) (line 1387)
        asanyarray_call_result_28936 = invoke(stypy.reporting.localization.Localization(__file__, 1387, 42), asanyarray_28933, *[position_28934], **kwargs_28935)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1387, 30), list_28930, asanyarray_call_result_28936)
        
        # Processing the call keyword arguments (line 1387)
        kwargs_28937 = {}
        # Getting the type of 'np' (line 1387)
        np_28928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 20), 'np', False)
        # Obtaining the member 'hstack' of a type (line 1387)
        hstack_28929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1387, 20), np_28928, 'hstack')
        # Calling hstack(args, kwargs) (line 1387)
        hstack_call_result_28938 = invoke(stypy.reporting.localization.Localization(__file__, 1387, 20), hstack_28929, *[list_28930], **kwargs_28937)
        
        # Assigning a type to the variable 'positions' (line 1387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1387, 8), 'positions', hstack_call_result_28938)
        
        # Call to set_positions(...): (line 1388)
        # Processing the call arguments (line 1388)
        # Getting the type of 'positions' (line 1388)
        positions_28941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 27), 'positions', False)
        # Processing the call keyword arguments (line 1388)
        kwargs_28942 = {}
        # Getting the type of 'self' (line 1388)
        self_28939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 8), 'self', False)
        # Obtaining the member 'set_positions' of a type (line 1388)
        set_positions_28940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 8), self_28939, 'set_positions')
        # Calling set_positions(args, kwargs) (line 1388)
        set_positions_call_result_28943 = invoke(stypy.reporting.localization.Localization(__file__, 1388, 8), set_positions_28940, *[positions_28941], **kwargs_28942)
        
        
        # ################# End of 'add_positions(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_positions' in the type store
        # Getting the type of 'stypy_return_type' (line 1379)
        stypy_return_type_28944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28944)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_positions'
        return stypy_return_type_28944

    
    # Multiple assignment of 2 elements.

    @norecursion
    def is_horizontal(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'is_horizontal'
        module_type_store = module_type_store.open_function_context('is_horizontal', 1391, 4, False)
        # Assigning a type to the variable 'self' (line 1392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EventCollection.is_horizontal.__dict__.__setitem__('stypy_localization', localization)
        EventCollection.is_horizontal.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EventCollection.is_horizontal.__dict__.__setitem__('stypy_type_store', module_type_store)
        EventCollection.is_horizontal.__dict__.__setitem__('stypy_function_name', 'EventCollection.is_horizontal')
        EventCollection.is_horizontal.__dict__.__setitem__('stypy_param_names_list', [])
        EventCollection.is_horizontal.__dict__.__setitem__('stypy_varargs_param_name', None)
        EventCollection.is_horizontal.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EventCollection.is_horizontal.__dict__.__setitem__('stypy_call_defaults', defaults)
        EventCollection.is_horizontal.__dict__.__setitem__('stypy_call_varargs', varargs)
        EventCollection.is_horizontal.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EventCollection.is_horizontal.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EventCollection.is_horizontal', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'is_horizontal', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'is_horizontal(...)' code ##################

        unicode_28945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, (-1)), 'unicode', u'\n        True if the eventcollection is horizontal, False if vertical\n        ')
        # Getting the type of 'self' (line 1395)
        self_28946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 15), 'self')
        # Obtaining the member '_is_horizontal' of a type (line 1395)
        _is_horizontal_28947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1395, 15), self_28946, '_is_horizontal')
        # Assigning a type to the variable 'stypy_return_type' (line 1395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1395, 8), 'stypy_return_type', _is_horizontal_28947)
        
        # ################# End of 'is_horizontal(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'is_horizontal' in the type store
        # Getting the type of 'stypy_return_type' (line 1391)
        stypy_return_type_28948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28948)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'is_horizontal'
        return stypy_return_type_28948


    @norecursion
    def get_orientation(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_orientation'
        module_type_store = module_type_store.open_function_context('get_orientation', 1397, 4, False)
        # Assigning a type to the variable 'self' (line 1398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EventCollection.get_orientation.__dict__.__setitem__('stypy_localization', localization)
        EventCollection.get_orientation.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EventCollection.get_orientation.__dict__.__setitem__('stypy_type_store', module_type_store)
        EventCollection.get_orientation.__dict__.__setitem__('stypy_function_name', 'EventCollection.get_orientation')
        EventCollection.get_orientation.__dict__.__setitem__('stypy_param_names_list', [])
        EventCollection.get_orientation.__dict__.__setitem__('stypy_varargs_param_name', None)
        EventCollection.get_orientation.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EventCollection.get_orientation.__dict__.__setitem__('stypy_call_defaults', defaults)
        EventCollection.get_orientation.__dict__.__setitem__('stypy_call_varargs', varargs)
        EventCollection.get_orientation.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EventCollection.get_orientation.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EventCollection.get_orientation', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_orientation', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_orientation(...)' code ##################

        unicode_28949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, (-1)), 'unicode', u"\n        get the orientation of the event line, may be:\n        [ 'horizontal' | 'vertical' ]\n        ")
        
        
        # Call to is_horizontal(...): (line 1402)
        # Processing the call keyword arguments (line 1402)
        kwargs_28952 = {}
        # Getting the type of 'self' (line 1402)
        self_28950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 31), 'self', False)
        # Obtaining the member 'is_horizontal' of a type (line 1402)
        is_horizontal_28951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1402, 31), self_28950, 'is_horizontal')
        # Calling is_horizontal(args, kwargs) (line 1402)
        is_horizontal_call_result_28953 = invoke(stypy.reporting.localization.Localization(__file__, 1402, 31), is_horizontal_28951, *[], **kwargs_28952)
        
        # Testing the type of an if expression (line 1402)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1402, 15), is_horizontal_call_result_28953)
        # SSA begins for if expression (line 1402)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        unicode_28954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1402, 15), 'unicode', u'horizontal')
        # SSA branch for the else part of an if expression (line 1402)
        module_type_store.open_ssa_branch('if expression else')
        unicode_28955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1402, 57), 'unicode', u'vertical')
        # SSA join for if expression (line 1402)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_28956 = union_type.UnionType.add(unicode_28954, unicode_28955)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1402, 8), 'stypy_return_type', if_exp_28956)
        
        # ################# End of 'get_orientation(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_orientation' in the type store
        # Getting the type of 'stypy_return_type' (line 1397)
        stypy_return_type_28957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28957)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_orientation'
        return stypy_return_type_28957


    @norecursion
    def switch_orientation(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'switch_orientation'
        module_type_store = module_type_store.open_function_context('switch_orientation', 1404, 4, False)
        # Assigning a type to the variable 'self' (line 1405)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1405, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EventCollection.switch_orientation.__dict__.__setitem__('stypy_localization', localization)
        EventCollection.switch_orientation.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EventCollection.switch_orientation.__dict__.__setitem__('stypy_type_store', module_type_store)
        EventCollection.switch_orientation.__dict__.__setitem__('stypy_function_name', 'EventCollection.switch_orientation')
        EventCollection.switch_orientation.__dict__.__setitem__('stypy_param_names_list', [])
        EventCollection.switch_orientation.__dict__.__setitem__('stypy_varargs_param_name', None)
        EventCollection.switch_orientation.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EventCollection.switch_orientation.__dict__.__setitem__('stypy_call_defaults', defaults)
        EventCollection.switch_orientation.__dict__.__setitem__('stypy_call_varargs', varargs)
        EventCollection.switch_orientation.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EventCollection.switch_orientation.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EventCollection.switch_orientation', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'switch_orientation', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'switch_orientation(...)' code ##################

        unicode_28958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1408, (-1)), 'unicode', u'\n        switch the orientation of the event line, either from vertical to\n        horizontal or vice versus\n        ')
        
        # Assigning a Call to a Name (line 1409):
        
        # Assigning a Call to a Name (line 1409):
        
        # Call to get_segments(...): (line 1409)
        # Processing the call keyword arguments (line 1409)
        kwargs_28961 = {}
        # Getting the type of 'self' (line 1409)
        self_28959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 19), 'self', False)
        # Obtaining the member 'get_segments' of a type (line 1409)
        get_segments_28960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 19), self_28959, 'get_segments')
        # Calling get_segments(args, kwargs) (line 1409)
        get_segments_call_result_28962 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 19), get_segments_28960, *[], **kwargs_28961)
        
        # Assigning a type to the variable 'segments' (line 1409)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1409, 8), 'segments', get_segments_call_result_28962)
        
        
        # Call to enumerate(...): (line 1410)
        # Processing the call arguments (line 1410)
        # Getting the type of 'segments' (line 1410)
        segments_28964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 36), 'segments', False)
        # Processing the call keyword arguments (line 1410)
        kwargs_28965 = {}
        # Getting the type of 'enumerate' (line 1410)
        enumerate_28963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 26), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 1410)
        enumerate_call_result_28966 = invoke(stypy.reporting.localization.Localization(__file__, 1410, 26), enumerate_28963, *[segments_28964], **kwargs_28965)
        
        # Testing the type of a for loop iterable (line 1410)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1410, 8), enumerate_call_result_28966)
        # Getting the type of the for loop variable (line 1410)
        for_loop_var_28967 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1410, 8), enumerate_call_result_28966)
        # Assigning a type to the variable 'i' (line 1410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1410, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1410, 8), for_loop_var_28967))
        # Assigning a type to the variable 'segment' (line 1410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1410, 8), 'segment', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1410, 8), for_loop_var_28967))
        # SSA begins for a for statement (line 1410)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Subscript (line 1411):
        
        # Assigning a Call to a Subscript (line 1411):
        
        # Call to fliplr(...): (line 1411)
        # Processing the call arguments (line 1411)
        # Getting the type of 'segment' (line 1411)
        segment_28970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 36), 'segment', False)
        # Processing the call keyword arguments (line 1411)
        kwargs_28971 = {}
        # Getting the type of 'np' (line 1411)
        np_28968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 26), 'np', False)
        # Obtaining the member 'fliplr' of a type (line 1411)
        fliplr_28969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 26), np_28968, 'fliplr')
        # Calling fliplr(args, kwargs) (line 1411)
        fliplr_call_result_28972 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 26), fliplr_28969, *[segment_28970], **kwargs_28971)
        
        # Getting the type of 'segments' (line 1411)
        segments_28973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 12), 'segments')
        # Getting the type of 'i' (line 1411)
        i_28974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 21), 'i')
        # Storing an element on a container (line 1411)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1411, 12), segments_28973, (i_28974, fliplr_call_result_28972))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_segments(...): (line 1412)
        # Processing the call arguments (line 1412)
        # Getting the type of 'segments' (line 1412)
        segments_28977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 26), 'segments', False)
        # Processing the call keyword arguments (line 1412)
        kwargs_28978 = {}
        # Getting the type of 'self' (line 1412)
        self_28975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 8), 'self', False)
        # Obtaining the member 'set_segments' of a type (line 1412)
        set_segments_28976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1412, 8), self_28975, 'set_segments')
        # Calling set_segments(args, kwargs) (line 1412)
        set_segments_call_result_28979 = invoke(stypy.reporting.localization.Localization(__file__, 1412, 8), set_segments_28976, *[segments_28977], **kwargs_28978)
        
        
        # Assigning a UnaryOp to a Attribute (line 1413):
        
        # Assigning a UnaryOp to a Attribute (line 1413):
        
        
        # Call to is_horizontal(...): (line 1413)
        # Processing the call keyword arguments (line 1413)
        kwargs_28982 = {}
        # Getting the type of 'self' (line 1413)
        self_28980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 34), 'self', False)
        # Obtaining the member 'is_horizontal' of a type (line 1413)
        is_horizontal_28981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1413, 34), self_28980, 'is_horizontal')
        # Calling is_horizontal(args, kwargs) (line 1413)
        is_horizontal_call_result_28983 = invoke(stypy.reporting.localization.Localization(__file__, 1413, 34), is_horizontal_28981, *[], **kwargs_28982)
        
        # Applying the 'not' unary operator (line 1413)
        result_not__28984 = python_operator(stypy.reporting.localization.Localization(__file__, 1413, 30), 'not', is_horizontal_call_result_28983)
        
        # Getting the type of 'self' (line 1413)
        self_28985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 8), 'self')
        # Setting the type of the member '_is_horizontal' of a type (line 1413)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1413, 8), self_28985, '_is_horizontal', result_not__28984)
        
        # Assigning a Name to a Attribute (line 1414):
        
        # Assigning a Name to a Attribute (line 1414):
        # Getting the type of 'True' (line 1414)
        True_28986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 21), 'True')
        # Getting the type of 'self' (line 1414)
        self_28987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1414)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1414, 8), self_28987, 'stale', True_28986)
        
        # ################# End of 'switch_orientation(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'switch_orientation' in the type store
        # Getting the type of 'stypy_return_type' (line 1404)
        stypy_return_type_28988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_28988)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'switch_orientation'
        return stypy_return_type_28988


    @norecursion
    def set_orientation(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1416)
        None_28989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 42), 'None')
        defaults = [None_28989]
        # Create a new context for function 'set_orientation'
        module_type_store = module_type_store.open_function_context('set_orientation', 1416, 4, False)
        # Assigning a type to the variable 'self' (line 1417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EventCollection.set_orientation.__dict__.__setitem__('stypy_localization', localization)
        EventCollection.set_orientation.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EventCollection.set_orientation.__dict__.__setitem__('stypy_type_store', module_type_store)
        EventCollection.set_orientation.__dict__.__setitem__('stypy_function_name', 'EventCollection.set_orientation')
        EventCollection.set_orientation.__dict__.__setitem__('stypy_param_names_list', ['orientation'])
        EventCollection.set_orientation.__dict__.__setitem__('stypy_varargs_param_name', None)
        EventCollection.set_orientation.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EventCollection.set_orientation.__dict__.__setitem__('stypy_call_defaults', defaults)
        EventCollection.set_orientation.__dict__.__setitem__('stypy_call_varargs', varargs)
        EventCollection.set_orientation.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EventCollection.set_orientation.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EventCollection.set_orientation', ['orientation'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_orientation', localization, ['orientation'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_orientation(...)' code ##################

        unicode_28990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1421, (-1)), 'unicode', u"\n        set the orientation of the event line\n        [ 'horizontal' | 'vertical' | None ]\n        defaults to 'horizontal' if not specified or None\n        ")
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'orientation' (line 1422)
        orientation_28991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 12), 'orientation')
        # Getting the type of 'None' (line 1422)
        None_28992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 27), 'None')
        # Applying the binary operator 'is' (line 1422)
        result_is__28993 = python_operator(stypy.reporting.localization.Localization(__file__, 1422, 12), 'is', orientation_28991, None_28992)
        
        
        
        # Call to lower(...): (line 1422)
        # Processing the call keyword arguments (line 1422)
        kwargs_28996 = {}
        # Getting the type of 'orientation' (line 1422)
        orientation_28994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 35), 'orientation', False)
        # Obtaining the member 'lower' of a type (line 1422)
        lower_28995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1422, 35), orientation_28994, 'lower')
        # Calling lower(args, kwargs) (line 1422)
        lower_call_result_28997 = invoke(stypy.reporting.localization.Localization(__file__, 1422, 35), lower_28995, *[], **kwargs_28996)
        
        unicode_28998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1422, 58), 'unicode', u'none')
        # Applying the binary operator '==' (line 1422)
        result_eq_28999 = python_operator(stypy.reporting.localization.Localization(__file__, 1422, 35), '==', lower_call_result_28997, unicode_28998)
        
        # Applying the binary operator 'or' (line 1422)
        result_or_keyword_29000 = python_operator(stypy.reporting.localization.Localization(__file__, 1422, 12), 'or', result_is__28993, result_eq_28999)
        
        
        # Call to lower(...): (line 1423)
        # Processing the call keyword arguments (line 1423)
        kwargs_29003 = {}
        # Getting the type of 'orientation' (line 1423)
        orientation_29001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 16), 'orientation', False)
        # Obtaining the member 'lower' of a type (line 1423)
        lower_29002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1423, 16), orientation_29001, 'lower')
        # Calling lower(args, kwargs) (line 1423)
        lower_call_result_29004 = invoke(stypy.reporting.localization.Localization(__file__, 1423, 16), lower_29002, *[], **kwargs_29003)
        
        unicode_29005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1423, 39), 'unicode', u'horizontal')
        # Applying the binary operator '==' (line 1423)
        result_eq_29006 = python_operator(stypy.reporting.localization.Localization(__file__, 1423, 16), '==', lower_call_result_29004, unicode_29005)
        
        # Applying the binary operator 'or' (line 1422)
        result_or_keyword_29007 = python_operator(stypy.reporting.localization.Localization(__file__, 1422, 12), 'or', result_or_keyword_29000, result_eq_29006)
        
        # Testing the type of an if condition (line 1422)
        if_condition_29008 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1422, 8), result_or_keyword_29007)
        # Assigning a type to the variable 'if_condition_29008' (line 1422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1422, 8), 'if_condition_29008', if_condition_29008)
        # SSA begins for if statement (line 1422)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1424):
        
        # Assigning a Name to a Name (line 1424):
        # Getting the type of 'True' (line 1424)
        True_29009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 28), 'True')
        # Assigning a type to the variable 'is_horizontal' (line 1424)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1424, 12), 'is_horizontal', True_29009)
        # SSA branch for the else part of an if statement (line 1422)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to lower(...): (line 1425)
        # Processing the call keyword arguments (line 1425)
        kwargs_29012 = {}
        # Getting the type of 'orientation' (line 1425)
        orientation_29010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 13), 'orientation', False)
        # Obtaining the member 'lower' of a type (line 1425)
        lower_29011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1425, 13), orientation_29010, 'lower')
        # Calling lower(args, kwargs) (line 1425)
        lower_call_result_29013 = invoke(stypy.reporting.localization.Localization(__file__, 1425, 13), lower_29011, *[], **kwargs_29012)
        
        unicode_29014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1425, 36), 'unicode', u'vertical')
        # Applying the binary operator '==' (line 1425)
        result_eq_29015 = python_operator(stypy.reporting.localization.Localization(__file__, 1425, 13), '==', lower_call_result_29013, unicode_29014)
        
        # Testing the type of an if condition (line 1425)
        if_condition_29016 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1425, 13), result_eq_29015)
        # Assigning a type to the variable 'if_condition_29016' (line 1425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 13), 'if_condition_29016', if_condition_29016)
        # SSA begins for if statement (line 1425)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1426):
        
        # Assigning a Name to a Name (line 1426):
        # Getting the type of 'False' (line 1426)
        False_29017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 28), 'False')
        # Assigning a type to the variable 'is_horizontal' (line 1426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 12), 'is_horizontal', False_29017)
        # SSA branch for the else part of an if statement (line 1425)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1428)
        # Processing the call arguments (line 1428)
        unicode_29019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1428, 29), 'unicode', u"orientation must be 'horizontal' or 'vertical'")
        # Processing the call keyword arguments (line 1428)
        kwargs_29020 = {}
        # Getting the type of 'ValueError' (line 1428)
        ValueError_29018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1428)
        ValueError_call_result_29021 = invoke(stypy.reporting.localization.Localization(__file__, 1428, 18), ValueError_29018, *[unicode_29019], **kwargs_29020)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1428, 12), ValueError_call_result_29021, 'raise parameter', BaseException)
        # SSA join for if statement (line 1425)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1422)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'is_horizontal' (line 1430)
        is_horizontal_29022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 11), 'is_horizontal')
        
        # Call to is_horizontal(...): (line 1430)
        # Processing the call keyword arguments (line 1430)
        kwargs_29025 = {}
        # Getting the type of 'self' (line 1430)
        self_29023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 28), 'self', False)
        # Obtaining the member 'is_horizontal' of a type (line 1430)
        is_horizontal_29024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1430, 28), self_29023, 'is_horizontal')
        # Calling is_horizontal(args, kwargs) (line 1430)
        is_horizontal_call_result_29026 = invoke(stypy.reporting.localization.Localization(__file__, 1430, 28), is_horizontal_29024, *[], **kwargs_29025)
        
        # Applying the binary operator '==' (line 1430)
        result_eq_29027 = python_operator(stypy.reporting.localization.Localization(__file__, 1430, 11), '==', is_horizontal_29022, is_horizontal_call_result_29026)
        
        # Testing the type of an if condition (line 1430)
        if_condition_29028 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1430, 8), result_eq_29027)
        # Assigning a type to the variable 'if_condition_29028' (line 1430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1430, 8), 'if_condition_29028', if_condition_29028)
        # SSA begins for if statement (line 1430)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1431, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1430)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to switch_orientation(...): (line 1432)
        # Processing the call keyword arguments (line 1432)
        kwargs_29031 = {}
        # Getting the type of 'self' (line 1432)
        self_29029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 8), 'self', False)
        # Obtaining the member 'switch_orientation' of a type (line 1432)
        switch_orientation_29030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1432, 8), self_29029, 'switch_orientation')
        # Calling switch_orientation(args, kwargs) (line 1432)
        switch_orientation_call_result_29032 = invoke(stypy.reporting.localization.Localization(__file__, 1432, 8), switch_orientation_29030, *[], **kwargs_29031)
        
        
        # ################# End of 'set_orientation(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_orientation' in the type store
        # Getting the type of 'stypy_return_type' (line 1416)
        stypy_return_type_29033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29033)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_orientation'
        return stypy_return_type_29033


    @norecursion
    def get_linelength(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_linelength'
        module_type_store = module_type_store.open_function_context('get_linelength', 1434, 4, False)
        # Assigning a type to the variable 'self' (line 1435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1435, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EventCollection.get_linelength.__dict__.__setitem__('stypy_localization', localization)
        EventCollection.get_linelength.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EventCollection.get_linelength.__dict__.__setitem__('stypy_type_store', module_type_store)
        EventCollection.get_linelength.__dict__.__setitem__('stypy_function_name', 'EventCollection.get_linelength')
        EventCollection.get_linelength.__dict__.__setitem__('stypy_param_names_list', [])
        EventCollection.get_linelength.__dict__.__setitem__('stypy_varargs_param_name', None)
        EventCollection.get_linelength.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EventCollection.get_linelength.__dict__.__setitem__('stypy_call_defaults', defaults)
        EventCollection.get_linelength.__dict__.__setitem__('stypy_call_varargs', varargs)
        EventCollection.get_linelength.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EventCollection.get_linelength.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EventCollection.get_linelength', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_linelength', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_linelength(...)' code ##################

        unicode_29034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1437, (-1)), 'unicode', u'\n        get the length of the lines used to mark each event\n        ')
        # Getting the type of 'self' (line 1438)
        self_29035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 15), 'self')
        # Obtaining the member '_linelength' of a type (line 1438)
        _linelength_29036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1438, 15), self_29035, '_linelength')
        # Assigning a type to the variable 'stypy_return_type' (line 1438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1438, 8), 'stypy_return_type', _linelength_29036)
        
        # ################# End of 'get_linelength(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_linelength' in the type store
        # Getting the type of 'stypy_return_type' (line 1434)
        stypy_return_type_29037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29037)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_linelength'
        return stypy_return_type_29037


    @norecursion
    def set_linelength(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_linelength'
        module_type_store = module_type_store.open_function_context('set_linelength', 1440, 4, False)
        # Assigning a type to the variable 'self' (line 1441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1441, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EventCollection.set_linelength.__dict__.__setitem__('stypy_localization', localization)
        EventCollection.set_linelength.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EventCollection.set_linelength.__dict__.__setitem__('stypy_type_store', module_type_store)
        EventCollection.set_linelength.__dict__.__setitem__('stypy_function_name', 'EventCollection.set_linelength')
        EventCollection.set_linelength.__dict__.__setitem__('stypy_param_names_list', ['linelength'])
        EventCollection.set_linelength.__dict__.__setitem__('stypy_varargs_param_name', None)
        EventCollection.set_linelength.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EventCollection.set_linelength.__dict__.__setitem__('stypy_call_defaults', defaults)
        EventCollection.set_linelength.__dict__.__setitem__('stypy_call_varargs', varargs)
        EventCollection.set_linelength.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EventCollection.set_linelength.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EventCollection.set_linelength', ['linelength'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_linelength', localization, ['linelength'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_linelength(...)' code ##################

        unicode_29038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1443, (-1)), 'unicode', u'\n        set the length of the lines used to mark each event\n        ')
        
        
        # Getting the type of 'linelength' (line 1444)
        linelength_29039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 11), 'linelength')
        
        # Call to get_linelength(...): (line 1444)
        # Processing the call keyword arguments (line 1444)
        kwargs_29042 = {}
        # Getting the type of 'self' (line 1444)
        self_29040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 25), 'self', False)
        # Obtaining the member 'get_linelength' of a type (line 1444)
        get_linelength_29041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 25), self_29040, 'get_linelength')
        # Calling get_linelength(args, kwargs) (line 1444)
        get_linelength_call_result_29043 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 25), get_linelength_29041, *[], **kwargs_29042)
        
        # Applying the binary operator '==' (line 1444)
        result_eq_29044 = python_operator(stypy.reporting.localization.Localization(__file__, 1444, 11), '==', linelength_29039, get_linelength_call_result_29043)
        
        # Testing the type of an if condition (line 1444)
        if_condition_29045 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1444, 8), result_eq_29044)
        # Assigning a type to the variable 'if_condition_29045' (line 1444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 8), 'if_condition_29045', if_condition_29045)
        # SSA begins for if statement (line 1444)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1445, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1444)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1446):
        
        # Assigning a Call to a Name (line 1446):
        
        # Call to get_lineoffset(...): (line 1446)
        # Processing the call keyword arguments (line 1446)
        kwargs_29048 = {}
        # Getting the type of 'self' (line 1446)
        self_29046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 21), 'self', False)
        # Obtaining the member 'get_lineoffset' of a type (line 1446)
        get_lineoffset_29047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1446, 21), self_29046, 'get_lineoffset')
        # Calling get_lineoffset(args, kwargs) (line 1446)
        get_lineoffset_call_result_29049 = invoke(stypy.reporting.localization.Localization(__file__, 1446, 21), get_lineoffset_29047, *[], **kwargs_29048)
        
        # Assigning a type to the variable 'lineoffset' (line 1446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 8), 'lineoffset', get_lineoffset_call_result_29049)
        
        # Assigning a Call to a Name (line 1447):
        
        # Assigning a Call to a Name (line 1447):
        
        # Call to get_segments(...): (line 1447)
        # Processing the call keyword arguments (line 1447)
        kwargs_29052 = {}
        # Getting the type of 'self' (line 1447)
        self_29050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 19), 'self', False)
        # Obtaining the member 'get_segments' of a type (line 1447)
        get_segments_29051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1447, 19), self_29050, 'get_segments')
        # Calling get_segments(args, kwargs) (line 1447)
        get_segments_call_result_29053 = invoke(stypy.reporting.localization.Localization(__file__, 1447, 19), get_segments_29051, *[], **kwargs_29052)
        
        # Assigning a type to the variable 'segments' (line 1447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 8), 'segments', get_segments_call_result_29053)
        
        # Assigning a IfExp to a Name (line 1448):
        
        # Assigning a IfExp to a Name (line 1448):
        
        
        # Call to is_horizontal(...): (line 1448)
        # Processing the call keyword arguments (line 1448)
        kwargs_29056 = {}
        # Getting the type of 'self' (line 1448)
        self_29054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 19), 'self', False)
        # Obtaining the member 'is_horizontal' of a type (line 1448)
        is_horizontal_29055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1448, 19), self_29054, 'is_horizontal')
        # Calling is_horizontal(args, kwargs) (line 1448)
        is_horizontal_call_result_29057 = invoke(stypy.reporting.localization.Localization(__file__, 1448, 19), is_horizontal_29055, *[], **kwargs_29056)
        
        # Testing the type of an if expression (line 1448)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1448, 14), is_horizontal_call_result_29057)
        # SSA begins for if expression (line 1448)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        int_29058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1448, 14), 'int')
        # SSA branch for the else part of an if expression (line 1448)
        module_type_store.open_ssa_branch('if expression else')
        int_29059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1448, 45), 'int')
        # SSA join for if expression (line 1448)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_29060 = union_type.UnionType.add(int_29058, int_29059)
        
        # Assigning a type to the variable 'pos' (line 1448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1448, 8), 'pos', if_exp_29060)
        
        # Getting the type of 'segments' (line 1449)
        segments_29061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 23), 'segments')
        # Testing the type of a for loop iterable (line 1449)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1449, 8), segments_29061)
        # Getting the type of the for loop variable (line 1449)
        for_loop_var_29062 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1449, 8), segments_29061)
        # Assigning a type to the variable 'segment' (line 1449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1449, 8), 'segment', for_loop_var_29062)
        # SSA begins for a for statement (line 1449)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Subscript (line 1450):
        
        # Assigning a BinOp to a Subscript (line 1450):
        # Getting the type of 'lineoffset' (line 1450)
        lineoffset_29063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 30), 'lineoffset')
        # Getting the type of 'linelength' (line 1450)
        linelength_29064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 43), 'linelength')
        float_29065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1450, 56), 'float')
        # Applying the binary operator 'div' (line 1450)
        result_div_29066 = python_operator(stypy.reporting.localization.Localization(__file__, 1450, 43), 'div', linelength_29064, float_29065)
        
        # Applying the binary operator '+' (line 1450)
        result_add_29067 = python_operator(stypy.reporting.localization.Localization(__file__, 1450, 30), '+', lineoffset_29063, result_div_29066)
        
        # Getting the type of 'segment' (line 1450)
        segment_29068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 12), 'segment')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1450)
        tuple_29069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1450, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1450)
        # Adding element type (line 1450)
        int_29070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1450, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1450, 20), tuple_29069, int_29070)
        # Adding element type (line 1450)
        # Getting the type of 'pos' (line 1450)
        pos_29071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 23), 'pos')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1450, 20), tuple_29069, pos_29071)
        
        # Storing an element on a container (line 1450)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1450, 12), segment_29068, (tuple_29069, result_add_29067))
        
        # Assigning a BinOp to a Subscript (line 1451):
        
        # Assigning a BinOp to a Subscript (line 1451):
        # Getting the type of 'lineoffset' (line 1451)
        lineoffset_29072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 30), 'lineoffset')
        # Getting the type of 'linelength' (line 1451)
        linelength_29073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 43), 'linelength')
        float_29074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1451, 56), 'float')
        # Applying the binary operator 'div' (line 1451)
        result_div_29075 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 43), 'div', linelength_29073, float_29074)
        
        # Applying the binary operator '-' (line 1451)
        result_sub_29076 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 30), '-', lineoffset_29072, result_div_29075)
        
        # Getting the type of 'segment' (line 1451)
        segment_29077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 12), 'segment')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1451)
        tuple_29078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1451, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1451)
        # Adding element type (line 1451)
        int_29079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1451, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1451, 20), tuple_29078, int_29079)
        # Adding element type (line 1451)
        # Getting the type of 'pos' (line 1451)
        pos_29080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 23), 'pos')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1451, 20), tuple_29078, pos_29080)
        
        # Storing an element on a container (line 1451)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1451, 12), segment_29077, (tuple_29078, result_sub_29076))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_segments(...): (line 1452)
        # Processing the call arguments (line 1452)
        # Getting the type of 'segments' (line 1452)
        segments_29083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 26), 'segments', False)
        # Processing the call keyword arguments (line 1452)
        kwargs_29084 = {}
        # Getting the type of 'self' (line 1452)
        self_29081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 8), 'self', False)
        # Obtaining the member 'set_segments' of a type (line 1452)
        set_segments_29082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1452, 8), self_29081, 'set_segments')
        # Calling set_segments(args, kwargs) (line 1452)
        set_segments_call_result_29085 = invoke(stypy.reporting.localization.Localization(__file__, 1452, 8), set_segments_29082, *[segments_29083], **kwargs_29084)
        
        
        # Assigning a Name to a Attribute (line 1453):
        
        # Assigning a Name to a Attribute (line 1453):
        # Getting the type of 'linelength' (line 1453)
        linelength_29086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 27), 'linelength')
        # Getting the type of 'self' (line 1453)
        self_29087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 8), 'self')
        # Setting the type of the member '_linelength' of a type (line 1453)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1453, 8), self_29087, '_linelength', linelength_29086)
        
        # ################# End of 'set_linelength(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_linelength' in the type store
        # Getting the type of 'stypy_return_type' (line 1440)
        stypy_return_type_29088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29088)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_linelength'
        return stypy_return_type_29088


    @norecursion
    def get_lineoffset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_lineoffset'
        module_type_store = module_type_store.open_function_context('get_lineoffset', 1455, 4, False)
        # Assigning a type to the variable 'self' (line 1456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EventCollection.get_lineoffset.__dict__.__setitem__('stypy_localization', localization)
        EventCollection.get_lineoffset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EventCollection.get_lineoffset.__dict__.__setitem__('stypy_type_store', module_type_store)
        EventCollection.get_lineoffset.__dict__.__setitem__('stypy_function_name', 'EventCollection.get_lineoffset')
        EventCollection.get_lineoffset.__dict__.__setitem__('stypy_param_names_list', [])
        EventCollection.get_lineoffset.__dict__.__setitem__('stypy_varargs_param_name', None)
        EventCollection.get_lineoffset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EventCollection.get_lineoffset.__dict__.__setitem__('stypy_call_defaults', defaults)
        EventCollection.get_lineoffset.__dict__.__setitem__('stypy_call_varargs', varargs)
        EventCollection.get_lineoffset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EventCollection.get_lineoffset.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EventCollection.get_lineoffset', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_lineoffset', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_lineoffset(...)' code ##################

        unicode_29089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1458, (-1)), 'unicode', u'\n        get the offset of the lines used to mark each event\n        ')
        # Getting the type of 'self' (line 1459)
        self_29090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 15), 'self')
        # Obtaining the member '_lineoffset' of a type (line 1459)
        _lineoffset_29091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 15), self_29090, '_lineoffset')
        # Assigning a type to the variable 'stypy_return_type' (line 1459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'stypy_return_type', _lineoffset_29091)
        
        # ################# End of 'get_lineoffset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_lineoffset' in the type store
        # Getting the type of 'stypy_return_type' (line 1455)
        stypy_return_type_29092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29092)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_lineoffset'
        return stypy_return_type_29092


    @norecursion
    def set_lineoffset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_lineoffset'
        module_type_store = module_type_store.open_function_context('set_lineoffset', 1461, 4, False)
        # Assigning a type to the variable 'self' (line 1462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1462, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EventCollection.set_lineoffset.__dict__.__setitem__('stypy_localization', localization)
        EventCollection.set_lineoffset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EventCollection.set_lineoffset.__dict__.__setitem__('stypy_type_store', module_type_store)
        EventCollection.set_lineoffset.__dict__.__setitem__('stypy_function_name', 'EventCollection.set_lineoffset')
        EventCollection.set_lineoffset.__dict__.__setitem__('stypy_param_names_list', ['lineoffset'])
        EventCollection.set_lineoffset.__dict__.__setitem__('stypy_varargs_param_name', None)
        EventCollection.set_lineoffset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EventCollection.set_lineoffset.__dict__.__setitem__('stypy_call_defaults', defaults)
        EventCollection.set_lineoffset.__dict__.__setitem__('stypy_call_varargs', varargs)
        EventCollection.set_lineoffset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EventCollection.set_lineoffset.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EventCollection.set_lineoffset', ['lineoffset'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_lineoffset', localization, ['lineoffset'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_lineoffset(...)' code ##################

        unicode_29093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1464, (-1)), 'unicode', u'\n        set the offset of the lines used to mark each event\n        ')
        
        
        # Getting the type of 'lineoffset' (line 1465)
        lineoffset_29094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 11), 'lineoffset')
        
        # Call to get_lineoffset(...): (line 1465)
        # Processing the call keyword arguments (line 1465)
        kwargs_29097 = {}
        # Getting the type of 'self' (line 1465)
        self_29095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 25), 'self', False)
        # Obtaining the member 'get_lineoffset' of a type (line 1465)
        get_lineoffset_29096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1465, 25), self_29095, 'get_lineoffset')
        # Calling get_lineoffset(args, kwargs) (line 1465)
        get_lineoffset_call_result_29098 = invoke(stypy.reporting.localization.Localization(__file__, 1465, 25), get_lineoffset_29096, *[], **kwargs_29097)
        
        # Applying the binary operator '==' (line 1465)
        result_eq_29099 = python_operator(stypy.reporting.localization.Localization(__file__, 1465, 11), '==', lineoffset_29094, get_lineoffset_call_result_29098)
        
        # Testing the type of an if condition (line 1465)
        if_condition_29100 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1465, 8), result_eq_29099)
        # Assigning a type to the variable 'if_condition_29100' (line 1465)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1465, 8), 'if_condition_29100', if_condition_29100)
        # SSA begins for if statement (line 1465)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1466, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1465)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1467):
        
        # Assigning a Call to a Name (line 1467):
        
        # Call to get_linelength(...): (line 1467)
        # Processing the call keyword arguments (line 1467)
        kwargs_29103 = {}
        # Getting the type of 'self' (line 1467)
        self_29101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 21), 'self', False)
        # Obtaining the member 'get_linelength' of a type (line 1467)
        get_linelength_29102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1467, 21), self_29101, 'get_linelength')
        # Calling get_linelength(args, kwargs) (line 1467)
        get_linelength_call_result_29104 = invoke(stypy.reporting.localization.Localization(__file__, 1467, 21), get_linelength_29102, *[], **kwargs_29103)
        
        # Assigning a type to the variable 'linelength' (line 1467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1467, 8), 'linelength', get_linelength_call_result_29104)
        
        # Assigning a Call to a Name (line 1468):
        
        # Assigning a Call to a Name (line 1468):
        
        # Call to get_segments(...): (line 1468)
        # Processing the call keyword arguments (line 1468)
        kwargs_29107 = {}
        # Getting the type of 'self' (line 1468)
        self_29105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 19), 'self', False)
        # Obtaining the member 'get_segments' of a type (line 1468)
        get_segments_29106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 19), self_29105, 'get_segments')
        # Calling get_segments(args, kwargs) (line 1468)
        get_segments_call_result_29108 = invoke(stypy.reporting.localization.Localization(__file__, 1468, 19), get_segments_29106, *[], **kwargs_29107)
        
        # Assigning a type to the variable 'segments' (line 1468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1468, 8), 'segments', get_segments_call_result_29108)
        
        # Assigning a IfExp to a Name (line 1469):
        
        # Assigning a IfExp to a Name (line 1469):
        
        
        # Call to is_horizontal(...): (line 1469)
        # Processing the call keyword arguments (line 1469)
        kwargs_29111 = {}
        # Getting the type of 'self' (line 1469)
        self_29109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 19), 'self', False)
        # Obtaining the member 'is_horizontal' of a type (line 1469)
        is_horizontal_29110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1469, 19), self_29109, 'is_horizontal')
        # Calling is_horizontal(args, kwargs) (line 1469)
        is_horizontal_call_result_29112 = invoke(stypy.reporting.localization.Localization(__file__, 1469, 19), is_horizontal_29110, *[], **kwargs_29111)
        
        # Testing the type of an if expression (line 1469)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1469, 14), is_horizontal_call_result_29112)
        # SSA begins for if expression (line 1469)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        int_29113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 14), 'int')
        # SSA branch for the else part of an if expression (line 1469)
        module_type_store.open_ssa_branch('if expression else')
        int_29114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 45), 'int')
        # SSA join for if expression (line 1469)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_29115 = union_type.UnionType.add(int_29113, int_29114)
        
        # Assigning a type to the variable 'pos' (line 1469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1469, 8), 'pos', if_exp_29115)
        
        # Getting the type of 'segments' (line 1470)
        segments_29116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 23), 'segments')
        # Testing the type of a for loop iterable (line 1470)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1470, 8), segments_29116)
        # Getting the type of the for loop variable (line 1470)
        for_loop_var_29117 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1470, 8), segments_29116)
        # Assigning a type to the variable 'segment' (line 1470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 8), 'segment', for_loop_var_29117)
        # SSA begins for a for statement (line 1470)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Subscript (line 1471):
        
        # Assigning a BinOp to a Subscript (line 1471):
        # Getting the type of 'lineoffset' (line 1471)
        lineoffset_29118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 30), 'lineoffset')
        # Getting the type of 'linelength' (line 1471)
        linelength_29119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 43), 'linelength')
        float_29120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 56), 'float')
        # Applying the binary operator 'div' (line 1471)
        result_div_29121 = python_operator(stypy.reporting.localization.Localization(__file__, 1471, 43), 'div', linelength_29119, float_29120)
        
        # Applying the binary operator '+' (line 1471)
        result_add_29122 = python_operator(stypy.reporting.localization.Localization(__file__, 1471, 30), '+', lineoffset_29118, result_div_29121)
        
        # Getting the type of 'segment' (line 1471)
        segment_29123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 12), 'segment')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1471)
        tuple_29124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1471)
        # Adding element type (line 1471)
        int_29125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1471, 20), tuple_29124, int_29125)
        # Adding element type (line 1471)
        # Getting the type of 'pos' (line 1471)
        pos_29126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 23), 'pos')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1471, 20), tuple_29124, pos_29126)
        
        # Storing an element on a container (line 1471)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1471, 12), segment_29123, (tuple_29124, result_add_29122))
        
        # Assigning a BinOp to a Subscript (line 1472):
        
        # Assigning a BinOp to a Subscript (line 1472):
        # Getting the type of 'lineoffset' (line 1472)
        lineoffset_29127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 30), 'lineoffset')
        # Getting the type of 'linelength' (line 1472)
        linelength_29128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 43), 'linelength')
        float_29129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, 56), 'float')
        # Applying the binary operator 'div' (line 1472)
        result_div_29130 = python_operator(stypy.reporting.localization.Localization(__file__, 1472, 43), 'div', linelength_29128, float_29129)
        
        # Applying the binary operator '-' (line 1472)
        result_sub_29131 = python_operator(stypy.reporting.localization.Localization(__file__, 1472, 30), '-', lineoffset_29127, result_div_29130)
        
        # Getting the type of 'segment' (line 1472)
        segment_29132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 12), 'segment')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1472)
        tuple_29133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1472)
        # Adding element type (line 1472)
        int_29134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1472, 20), tuple_29133, int_29134)
        # Adding element type (line 1472)
        # Getting the type of 'pos' (line 1472)
        pos_29135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 23), 'pos')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1472, 20), tuple_29133, pos_29135)
        
        # Storing an element on a container (line 1472)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1472, 12), segment_29132, (tuple_29133, result_sub_29131))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_segments(...): (line 1473)
        # Processing the call arguments (line 1473)
        # Getting the type of 'segments' (line 1473)
        segments_29138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 26), 'segments', False)
        # Processing the call keyword arguments (line 1473)
        kwargs_29139 = {}
        # Getting the type of 'self' (line 1473)
        self_29136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 8), 'self', False)
        # Obtaining the member 'set_segments' of a type (line 1473)
        set_segments_29137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 8), self_29136, 'set_segments')
        # Calling set_segments(args, kwargs) (line 1473)
        set_segments_call_result_29140 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 8), set_segments_29137, *[segments_29138], **kwargs_29139)
        
        
        # Assigning a Name to a Attribute (line 1474):
        
        # Assigning a Name to a Attribute (line 1474):
        # Getting the type of 'lineoffset' (line 1474)
        lineoffset_29141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 27), 'lineoffset')
        # Getting the type of 'self' (line 1474)
        self_29142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 8), 'self')
        # Setting the type of the member '_lineoffset' of a type (line 1474)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1474, 8), self_29142, '_lineoffset', lineoffset_29141)
        
        # ################# End of 'set_lineoffset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_lineoffset' in the type store
        # Getting the type of 'stypy_return_type' (line 1461)
        stypy_return_type_29143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29143)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_lineoffset'
        return stypy_return_type_29143


    @norecursion
    def get_linewidth(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_linewidth'
        module_type_store = module_type_store.open_function_context('get_linewidth', 1476, 4, False)
        # Assigning a type to the variable 'self' (line 1477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1477, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EventCollection.get_linewidth.__dict__.__setitem__('stypy_localization', localization)
        EventCollection.get_linewidth.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EventCollection.get_linewidth.__dict__.__setitem__('stypy_type_store', module_type_store)
        EventCollection.get_linewidth.__dict__.__setitem__('stypy_function_name', 'EventCollection.get_linewidth')
        EventCollection.get_linewidth.__dict__.__setitem__('stypy_param_names_list', [])
        EventCollection.get_linewidth.__dict__.__setitem__('stypy_varargs_param_name', None)
        EventCollection.get_linewidth.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EventCollection.get_linewidth.__dict__.__setitem__('stypy_call_defaults', defaults)
        EventCollection.get_linewidth.__dict__.__setitem__('stypy_call_varargs', varargs)
        EventCollection.get_linewidth.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EventCollection.get_linewidth.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EventCollection.get_linewidth', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_linewidth', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_linewidth(...)' code ##################

        unicode_29144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, (-1)), 'unicode', u'\n        get the width of the lines used to mark each event\n        ')
        
        # Obtaining the type of the subscript
        int_29145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1480, 37), 'int')
        
        # Call to get_linewidths(...): (line 1480)
        # Processing the call keyword arguments (line 1480)
        kwargs_29148 = {}
        # Getting the type of 'self' (line 1480)
        self_29146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 15), 'self', False)
        # Obtaining the member 'get_linewidths' of a type (line 1480)
        get_linewidths_29147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1480, 15), self_29146, 'get_linewidths')
        # Calling get_linewidths(args, kwargs) (line 1480)
        get_linewidths_call_result_29149 = invoke(stypy.reporting.localization.Localization(__file__, 1480, 15), get_linewidths_29147, *[], **kwargs_29148)
        
        # Obtaining the member '__getitem__' of a type (line 1480)
        getitem___29150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1480, 15), get_linewidths_call_result_29149, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1480)
        subscript_call_result_29151 = invoke(stypy.reporting.localization.Localization(__file__, 1480, 15), getitem___29150, int_29145)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1480, 8), 'stypy_return_type', subscript_call_result_29151)
        
        # ################# End of 'get_linewidth(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_linewidth' in the type store
        # Getting the type of 'stypy_return_type' (line 1476)
        stypy_return_type_29152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29152)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_linewidth'
        return stypy_return_type_29152


    @norecursion
    def get_linestyle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_linestyle'
        module_type_store = module_type_store.open_function_context('get_linestyle', 1482, 4, False)
        # Assigning a type to the variable 'self' (line 1483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1483, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EventCollection.get_linestyle.__dict__.__setitem__('stypy_localization', localization)
        EventCollection.get_linestyle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EventCollection.get_linestyle.__dict__.__setitem__('stypy_type_store', module_type_store)
        EventCollection.get_linestyle.__dict__.__setitem__('stypy_function_name', 'EventCollection.get_linestyle')
        EventCollection.get_linestyle.__dict__.__setitem__('stypy_param_names_list', [])
        EventCollection.get_linestyle.__dict__.__setitem__('stypy_varargs_param_name', None)
        EventCollection.get_linestyle.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EventCollection.get_linestyle.__dict__.__setitem__('stypy_call_defaults', defaults)
        EventCollection.get_linestyle.__dict__.__setitem__('stypy_call_varargs', varargs)
        EventCollection.get_linestyle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EventCollection.get_linestyle.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EventCollection.get_linestyle', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_linestyle', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_linestyle(...)' code ##################

        unicode_29153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1486, (-1)), 'unicode', u"\n        get the style of the lines used to mark each event\n        [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ]\n        ")
        
        # Call to get_linestyles(...): (line 1487)
        # Processing the call keyword arguments (line 1487)
        kwargs_29156 = {}
        # Getting the type of 'self' (line 1487)
        self_29154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 15), 'self', False)
        # Obtaining the member 'get_linestyles' of a type (line 1487)
        get_linestyles_29155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1487, 15), self_29154, 'get_linestyles')
        # Calling get_linestyles(args, kwargs) (line 1487)
        get_linestyles_call_result_29157 = invoke(stypy.reporting.localization.Localization(__file__, 1487, 15), get_linestyles_29155, *[], **kwargs_29156)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1487, 8), 'stypy_return_type', get_linestyles_call_result_29157)
        
        # ################# End of 'get_linestyle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_linestyle' in the type store
        # Getting the type of 'stypy_return_type' (line 1482)
        stypy_return_type_29158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29158)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_linestyle'
        return stypy_return_type_29158


    @norecursion
    def get_color(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_color'
        module_type_store = module_type_store.open_function_context('get_color', 1489, 4, False)
        # Assigning a type to the variable 'self' (line 1490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1490, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EventCollection.get_color.__dict__.__setitem__('stypy_localization', localization)
        EventCollection.get_color.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EventCollection.get_color.__dict__.__setitem__('stypy_type_store', module_type_store)
        EventCollection.get_color.__dict__.__setitem__('stypy_function_name', 'EventCollection.get_color')
        EventCollection.get_color.__dict__.__setitem__('stypy_param_names_list', [])
        EventCollection.get_color.__dict__.__setitem__('stypy_varargs_param_name', None)
        EventCollection.get_color.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EventCollection.get_color.__dict__.__setitem__('stypy_call_defaults', defaults)
        EventCollection.get_color.__dict__.__setitem__('stypy_call_varargs', varargs)
        EventCollection.get_color.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EventCollection.get_color.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EventCollection.get_color', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_color', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_color(...)' code ##################

        unicode_29159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1492, (-1)), 'unicode', u'\n        get the color of the lines used to mark each event\n        ')
        
        # Obtaining the type of the subscript
        int_29160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1493, 33), 'int')
        
        # Call to get_colors(...): (line 1493)
        # Processing the call keyword arguments (line 1493)
        kwargs_29163 = {}
        # Getting the type of 'self' (line 1493)
        self_29161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 15), 'self', False)
        # Obtaining the member 'get_colors' of a type (line 1493)
        get_colors_29162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1493, 15), self_29161, 'get_colors')
        # Calling get_colors(args, kwargs) (line 1493)
        get_colors_call_result_29164 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 15), get_colors_29162, *[], **kwargs_29163)
        
        # Obtaining the member '__getitem__' of a type (line 1493)
        getitem___29165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1493, 15), get_colors_call_result_29164, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1493)
        subscript_call_result_29166 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 15), getitem___29165, int_29160)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 8), 'stypy_return_type', subscript_call_result_29166)
        
        # ################# End of 'get_color(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_color' in the type store
        # Getting the type of 'stypy_return_type' (line 1489)
        stypy_return_type_29167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29167)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_color'
        return stypy_return_type_29167


# Assigning a type to the variable 'EventCollection' (line 1243)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 0), 'EventCollection', EventCollection)

# Assigning a Name to a Name (line 1252):
# Getting the type of 'True' (line 1252)
True_29168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 20), 'True')
# Getting the type of 'EventCollection'
EventCollection_29169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'EventCollection')
# Setting the type of the member '_edge_default' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), EventCollection_29169, '_edge_default', True_29168)

# Assigning a Name to a Name (line 1389):
# Getting the type of 'EventCollection'
EventCollection_29170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'EventCollection')
# Obtaining the member 'add_positions' of a type
add_positions_29171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), EventCollection_29170, 'add_positions')
# Getting the type of 'EventCollection'
EventCollection_29172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'EventCollection')
# Setting the type of the member 'append_positions' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), EventCollection_29172, 'append_positions', add_positions_29171)

# Assigning a Name to a Name (line 1389):
# Getting the type of 'EventCollection'
EventCollection_29173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'EventCollection')
# Obtaining the member 'append_positions' of a type
append_positions_29174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), EventCollection_29173, 'append_positions')
# Getting the type of 'EventCollection'
EventCollection_29175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'EventCollection')
# Setting the type of the member 'extend_positions' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), EventCollection_29175, 'extend_positions', append_positions_29174)
# Declaration of the 'CircleCollection' class
# Getting the type of '_CollectionWithSizes' (line 1496)
_CollectionWithSizes_29176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 23), '_CollectionWithSizes')

class CircleCollection(_CollectionWithSizes_29176, ):
    unicode_29177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1499, (-1)), 'unicode', u'\n    A collection of circles, drawn using splines.\n    ')
    
    # Assigning a Name to a Name (line 1500):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1502, 4, False)
        # Assigning a type to the variable 'self' (line 1503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1503, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CircleCollection.__init__', ['sizes'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['sizes'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_29178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1509, (-1)), 'unicode', u'\n        *sizes*\n            Gives the area of the circle in points^2\n\n        %(Collection)s\n        ')
        
        # Call to __init__(...): (line 1510)
        # Processing the call arguments (line 1510)
        # Getting the type of 'self' (line 1510)
        self_29181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 28), 'self', False)
        # Processing the call keyword arguments (line 1510)
        # Getting the type of 'kwargs' (line 1510)
        kwargs_29182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 36), 'kwargs', False)
        kwargs_29183 = {'kwargs_29182': kwargs_29182}
        # Getting the type of 'Collection' (line 1510)
        Collection_29179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 8), 'Collection', False)
        # Obtaining the member '__init__' of a type (line 1510)
        init___29180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1510, 8), Collection_29179, '__init__')
        # Calling __init__(args, kwargs) (line 1510)
        init___call_result_29184 = invoke(stypy.reporting.localization.Localization(__file__, 1510, 8), init___29180, *[self_29181], **kwargs_29183)
        
        
        # Call to set_sizes(...): (line 1511)
        # Processing the call arguments (line 1511)
        # Getting the type of 'sizes' (line 1511)
        sizes_29187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 23), 'sizes', False)
        # Processing the call keyword arguments (line 1511)
        kwargs_29188 = {}
        # Getting the type of 'self' (line 1511)
        self_29185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 8), 'self', False)
        # Obtaining the member 'set_sizes' of a type (line 1511)
        set_sizes_29186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1511, 8), self_29185, 'set_sizes')
        # Calling set_sizes(args, kwargs) (line 1511)
        set_sizes_call_result_29189 = invoke(stypy.reporting.localization.Localization(__file__, 1511, 8), set_sizes_29186, *[sizes_29187], **kwargs_29188)
        
        
        # Call to set_transform(...): (line 1512)
        # Processing the call arguments (line 1512)
        
        # Call to IdentityTransform(...): (line 1512)
        # Processing the call keyword arguments (line 1512)
        kwargs_29194 = {}
        # Getting the type of 'transforms' (line 1512)
        transforms_29192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 27), 'transforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 1512)
        IdentityTransform_29193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1512, 27), transforms_29192, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 1512)
        IdentityTransform_call_result_29195 = invoke(stypy.reporting.localization.Localization(__file__, 1512, 27), IdentityTransform_29193, *[], **kwargs_29194)
        
        # Processing the call keyword arguments (line 1512)
        kwargs_29196 = {}
        # Getting the type of 'self' (line 1512)
        self_29190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 8), 'self', False)
        # Obtaining the member 'set_transform' of a type (line 1512)
        set_transform_29191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1512, 8), self_29190, 'set_transform')
        # Calling set_transform(args, kwargs) (line 1512)
        set_transform_call_result_29197 = invoke(stypy.reporting.localization.Localization(__file__, 1512, 8), set_transform_29191, *[IdentityTransform_call_result_29195], **kwargs_29196)
        
        
        # Assigning a List to a Attribute (line 1513):
        
        # Assigning a List to a Attribute (line 1513):
        
        # Obtaining an instance of the builtin type 'list' (line 1513)
        list_29198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1513, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1513)
        # Adding element type (line 1513)
        
        # Call to unit_circle(...): (line 1513)
        # Processing the call keyword arguments (line 1513)
        kwargs_29202 = {}
        # Getting the type of 'mpath' (line 1513)
        mpath_29199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 23), 'mpath', False)
        # Obtaining the member 'Path' of a type (line 1513)
        Path_29200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1513, 23), mpath_29199, 'Path')
        # Obtaining the member 'unit_circle' of a type (line 1513)
        unit_circle_29201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1513, 23), Path_29200, 'unit_circle')
        # Calling unit_circle(args, kwargs) (line 1513)
        unit_circle_call_result_29203 = invoke(stypy.reporting.localization.Localization(__file__, 1513, 23), unit_circle_29201, *[], **kwargs_29202)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1513, 22), list_29198, unit_circle_call_result_29203)
        
        # Getting the type of 'self' (line 1513)
        self_29204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 8), 'self')
        # Setting the type of the member '_paths' of a type (line 1513)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1513, 8), self_29204, '_paths', list_29198)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'CircleCollection' (line 1496)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1496, 0), 'CircleCollection', CircleCollection)

# Assigning a Name to a Name (line 1500):
# Getting the type of 'CIRCLE_AREA_FACTOR' (line 1500)
CIRCLE_AREA_FACTOR_29205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 14), 'CIRCLE_AREA_FACTOR')
# Getting the type of 'CircleCollection'
CircleCollection_29206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'CircleCollection')
# Setting the type of the member '_factor' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), CircleCollection_29206, '_factor', CIRCLE_AREA_FACTOR_29205)
# Declaration of the 'EllipseCollection' class
# Getting the type of 'Collection' (line 1516)
Collection_29207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 24), 'Collection')

class EllipseCollection(Collection_29207, ):
    unicode_29208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1519, (-1)), 'unicode', u'\n    A collection of ellipses, drawn using splines.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_29209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1521, 54), 'unicode', u'points')
        defaults = [unicode_29209]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1520, 4, False)
        # Assigning a type to the variable 'self' (line 1521)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1521, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EllipseCollection.__init__', ['widths', 'heights', 'angles', 'units'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['widths', 'heights', 'angles', 'units'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_29210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1547, (-1)), 'unicode', u"\n        *widths*: sequence\n            lengths of first axes (e.g., major axis lengths)\n\n        *heights*: sequence\n            lengths of second axes\n\n        *angles*: sequence\n            angles of first axes, degrees CCW from the X-axis\n\n        *units*: ['points' | 'inches' | 'dots' | 'width' | 'height'\n        | 'x' | 'y' | 'xy']\n\n            units in which majors and minors are given; 'width' and\n            'height' refer to the dimensions of the axes, while 'x'\n            and 'y' refer to the *offsets* data units. 'xy' differs\n            from all others in that the angle as plotted varies with\n            the aspect ratio, and equals the specified angle only when\n            the aspect ratio is unity.  Hence it behaves the same as\n            the :class:`~matplotlib.patches.Ellipse` with\n            axes.transData as its transform.\n\n        Additional kwargs inherited from the base :class:`Collection`:\n\n        %(Collection)s\n        ")
        
        # Call to __init__(...): (line 1548)
        # Processing the call arguments (line 1548)
        # Getting the type of 'self' (line 1548)
        self_29213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 28), 'self', False)
        # Processing the call keyword arguments (line 1548)
        # Getting the type of 'kwargs' (line 1548)
        kwargs_29214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 36), 'kwargs', False)
        kwargs_29215 = {'kwargs_29214': kwargs_29214}
        # Getting the type of 'Collection' (line 1548)
        Collection_29211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 8), 'Collection', False)
        # Obtaining the member '__init__' of a type (line 1548)
        init___29212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1548, 8), Collection_29211, '__init__')
        # Calling __init__(args, kwargs) (line 1548)
        init___call_result_29216 = invoke(stypy.reporting.localization.Localization(__file__, 1548, 8), init___29212, *[self_29213], **kwargs_29215)
        
        
        # Assigning a BinOp to a Attribute (line 1549):
        
        # Assigning a BinOp to a Attribute (line 1549):
        float_29217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1549, 23), 'float')
        
        # Call to ravel(...): (line 1549)
        # Processing the call keyword arguments (line 1549)
        kwargs_29224 = {}
        
        # Call to asarray(...): (line 1549)
        # Processing the call arguments (line 1549)
        # Getting the type of 'widths' (line 1549)
        widths_29220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 40), 'widths', False)
        # Processing the call keyword arguments (line 1549)
        kwargs_29221 = {}
        # Getting the type of 'np' (line 1549)
        np_29218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 29), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1549)
        asarray_29219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1549, 29), np_29218, 'asarray')
        # Calling asarray(args, kwargs) (line 1549)
        asarray_call_result_29222 = invoke(stypy.reporting.localization.Localization(__file__, 1549, 29), asarray_29219, *[widths_29220], **kwargs_29221)
        
        # Obtaining the member 'ravel' of a type (line 1549)
        ravel_29223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1549, 29), asarray_call_result_29222, 'ravel')
        # Calling ravel(args, kwargs) (line 1549)
        ravel_call_result_29225 = invoke(stypy.reporting.localization.Localization(__file__, 1549, 29), ravel_29223, *[], **kwargs_29224)
        
        # Applying the binary operator '*' (line 1549)
        result_mul_29226 = python_operator(stypy.reporting.localization.Localization(__file__, 1549, 23), '*', float_29217, ravel_call_result_29225)
        
        # Getting the type of 'self' (line 1549)
        self_29227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 8), 'self')
        # Setting the type of the member '_widths' of a type (line 1549)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1549, 8), self_29227, '_widths', result_mul_29226)
        
        # Assigning a BinOp to a Attribute (line 1550):
        
        # Assigning a BinOp to a Attribute (line 1550):
        float_29228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1550, 24), 'float')
        
        # Call to ravel(...): (line 1550)
        # Processing the call keyword arguments (line 1550)
        kwargs_29235 = {}
        
        # Call to asarray(...): (line 1550)
        # Processing the call arguments (line 1550)
        # Getting the type of 'heights' (line 1550)
        heights_29231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 41), 'heights', False)
        # Processing the call keyword arguments (line 1550)
        kwargs_29232 = {}
        # Getting the type of 'np' (line 1550)
        np_29229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 30), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1550)
        asarray_29230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1550, 30), np_29229, 'asarray')
        # Calling asarray(args, kwargs) (line 1550)
        asarray_call_result_29233 = invoke(stypy.reporting.localization.Localization(__file__, 1550, 30), asarray_29230, *[heights_29231], **kwargs_29232)
        
        # Obtaining the member 'ravel' of a type (line 1550)
        ravel_29234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1550, 30), asarray_call_result_29233, 'ravel')
        # Calling ravel(args, kwargs) (line 1550)
        ravel_call_result_29236 = invoke(stypy.reporting.localization.Localization(__file__, 1550, 30), ravel_29234, *[], **kwargs_29235)
        
        # Applying the binary operator '*' (line 1550)
        result_mul_29237 = python_operator(stypy.reporting.localization.Localization(__file__, 1550, 24), '*', float_29228, ravel_call_result_29236)
        
        # Getting the type of 'self' (line 1550)
        self_29238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 8), 'self')
        # Setting the type of the member '_heights' of a type (line 1550)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1550, 8), self_29238, '_heights', result_mul_29237)
        
        # Assigning a Call to a Attribute (line 1551):
        
        # Assigning a Call to a Attribute (line 1551):
        
        # Call to ravel(...): (line 1551)
        # Processing the call keyword arguments (line 1551)
        kwargs_29245 = {}
        
        # Call to deg2rad(...): (line 1551)
        # Processing the call arguments (line 1551)
        # Getting the type of 'angles' (line 1551)
        angles_29241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 34), 'angles', False)
        # Processing the call keyword arguments (line 1551)
        kwargs_29242 = {}
        # Getting the type of 'np' (line 1551)
        np_29239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 23), 'np', False)
        # Obtaining the member 'deg2rad' of a type (line 1551)
        deg2rad_29240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 23), np_29239, 'deg2rad')
        # Calling deg2rad(args, kwargs) (line 1551)
        deg2rad_call_result_29243 = invoke(stypy.reporting.localization.Localization(__file__, 1551, 23), deg2rad_29240, *[angles_29241], **kwargs_29242)
        
        # Obtaining the member 'ravel' of a type (line 1551)
        ravel_29244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 23), deg2rad_call_result_29243, 'ravel')
        # Calling ravel(args, kwargs) (line 1551)
        ravel_call_result_29246 = invoke(stypy.reporting.localization.Localization(__file__, 1551, 23), ravel_29244, *[], **kwargs_29245)
        
        # Getting the type of 'self' (line 1551)
        self_29247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'self')
        # Setting the type of the member '_angles' of a type (line 1551)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 8), self_29247, '_angles', ravel_call_result_29246)
        
        # Assigning a Name to a Attribute (line 1552):
        
        # Assigning a Name to a Attribute (line 1552):
        # Getting the type of 'units' (line 1552)
        units_29248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 22), 'units')
        # Getting the type of 'self' (line 1552)
        self_29249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 8), 'self')
        # Setting the type of the member '_units' of a type (line 1552)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1552, 8), self_29249, '_units', units_29248)
        
        # Call to set_transform(...): (line 1553)
        # Processing the call arguments (line 1553)
        
        # Call to IdentityTransform(...): (line 1553)
        # Processing the call keyword arguments (line 1553)
        kwargs_29254 = {}
        # Getting the type of 'transforms' (line 1553)
        transforms_29252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 27), 'transforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 1553)
        IdentityTransform_29253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1553, 27), transforms_29252, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 1553)
        IdentityTransform_call_result_29255 = invoke(stypy.reporting.localization.Localization(__file__, 1553, 27), IdentityTransform_29253, *[], **kwargs_29254)
        
        # Processing the call keyword arguments (line 1553)
        kwargs_29256 = {}
        # Getting the type of 'self' (line 1553)
        self_29250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 8), 'self', False)
        # Obtaining the member 'set_transform' of a type (line 1553)
        set_transform_29251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1553, 8), self_29250, 'set_transform')
        # Calling set_transform(args, kwargs) (line 1553)
        set_transform_call_result_29257 = invoke(stypy.reporting.localization.Localization(__file__, 1553, 8), set_transform_29251, *[IdentityTransform_call_result_29255], **kwargs_29256)
        
        
        # Assigning a Call to a Attribute (line 1554):
        
        # Assigning a Call to a Attribute (line 1554):
        
        # Call to empty(...): (line 1554)
        # Processing the call arguments (line 1554)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1554)
        tuple_29260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1554, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1554)
        # Adding element type (line 1554)
        int_29261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1554, 37), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1554, 37), tuple_29260, int_29261)
        # Adding element type (line 1554)
        int_29262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1554, 40), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1554, 37), tuple_29260, int_29262)
        # Adding element type (line 1554)
        int_29263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1554, 43), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1554, 37), tuple_29260, int_29263)
        
        # Processing the call keyword arguments (line 1554)
        kwargs_29264 = {}
        # Getting the type of 'np' (line 1554)
        np_29258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 27), 'np', False)
        # Obtaining the member 'empty' of a type (line 1554)
        empty_29259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1554, 27), np_29258, 'empty')
        # Calling empty(args, kwargs) (line 1554)
        empty_call_result_29265 = invoke(stypy.reporting.localization.Localization(__file__, 1554, 27), empty_29259, *[tuple_29260], **kwargs_29264)
        
        # Getting the type of 'self' (line 1554)
        self_29266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 8), 'self')
        # Setting the type of the member '_transforms' of a type (line 1554)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1554, 8), self_29266, '_transforms', empty_call_result_29265)
        
        # Assigning a List to a Attribute (line 1555):
        
        # Assigning a List to a Attribute (line 1555):
        
        # Obtaining an instance of the builtin type 'list' (line 1555)
        list_29267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1555, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1555)
        # Adding element type (line 1555)
        
        # Call to unit_circle(...): (line 1555)
        # Processing the call keyword arguments (line 1555)
        kwargs_29271 = {}
        # Getting the type of 'mpath' (line 1555)
        mpath_29268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 23), 'mpath', False)
        # Obtaining the member 'Path' of a type (line 1555)
        Path_29269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1555, 23), mpath_29268, 'Path')
        # Obtaining the member 'unit_circle' of a type (line 1555)
        unit_circle_29270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1555, 23), Path_29269, 'unit_circle')
        # Calling unit_circle(args, kwargs) (line 1555)
        unit_circle_call_result_29272 = invoke(stypy.reporting.localization.Localization(__file__, 1555, 23), unit_circle_29270, *[], **kwargs_29271)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1555, 22), list_29267, unit_circle_call_result_29272)
        
        # Getting the type of 'self' (line 1555)
        self_29273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 8), 'self')
        # Setting the type of the member '_paths' of a type (line 1555)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1555, 8), self_29273, '_paths', list_29267)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _set_transforms(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_transforms'
        module_type_store = module_type_store.open_function_context('_set_transforms', 1557, 4, False)
        # Assigning a type to the variable 'self' (line 1558)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1558, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EllipseCollection._set_transforms.__dict__.__setitem__('stypy_localization', localization)
        EllipseCollection._set_transforms.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EllipseCollection._set_transforms.__dict__.__setitem__('stypy_type_store', module_type_store)
        EllipseCollection._set_transforms.__dict__.__setitem__('stypy_function_name', 'EllipseCollection._set_transforms')
        EllipseCollection._set_transforms.__dict__.__setitem__('stypy_param_names_list', [])
        EllipseCollection._set_transforms.__dict__.__setitem__('stypy_varargs_param_name', None)
        EllipseCollection._set_transforms.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EllipseCollection._set_transforms.__dict__.__setitem__('stypy_call_defaults', defaults)
        EllipseCollection._set_transforms.__dict__.__setitem__('stypy_call_varargs', varargs)
        EllipseCollection._set_transforms.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EllipseCollection._set_transforms.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EllipseCollection._set_transforms', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_transforms', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_transforms(...)' code ##################

        unicode_29274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1560, (-1)), 'unicode', u'\n        Calculate transforms immediately before drawing.\n        ')
        
        # Assigning a Attribute to a Name (line 1561):
        
        # Assigning a Attribute to a Name (line 1561):
        # Getting the type of 'self' (line 1561)
        self_29275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 13), 'self')
        # Obtaining the member 'axes' of a type (line 1561)
        axes_29276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1561, 13), self_29275, 'axes')
        # Assigning a type to the variable 'ax' (line 1561)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1561, 8), 'ax', axes_29276)
        
        # Assigning a Attribute to a Name (line 1562):
        
        # Assigning a Attribute to a Name (line 1562):
        # Getting the type of 'self' (line 1562)
        self_29277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 14), 'self')
        # Obtaining the member 'figure' of a type (line 1562)
        figure_29278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1562, 14), self_29277, 'figure')
        # Assigning a type to the variable 'fig' (line 1562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1562, 8), 'fig', figure_29278)
        
        
        # Getting the type of 'self' (line 1564)
        self_29279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 11), 'self')
        # Obtaining the member '_units' of a type (line 1564)
        _units_29280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1564, 11), self_29279, '_units')
        unicode_29281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1564, 26), 'unicode', u'xy')
        # Applying the binary operator '==' (line 1564)
        result_eq_29282 = python_operator(stypy.reporting.localization.Localization(__file__, 1564, 11), '==', _units_29280, unicode_29281)
        
        # Testing the type of an if condition (line 1564)
        if_condition_29283 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1564, 8), result_eq_29282)
        # Assigning a type to the variable 'if_condition_29283' (line 1564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1564, 8), 'if_condition_29283', if_condition_29283)
        # SSA begins for if statement (line 1564)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 1565):
        
        # Assigning a Num to a Name (line 1565):
        int_29284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1565, 17), 'int')
        # Assigning a type to the variable 'sc' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 12), 'sc', int_29284)
        # SSA branch for the else part of an if statement (line 1564)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 1566)
        self_29285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 13), 'self')
        # Obtaining the member '_units' of a type (line 1566)
        _units_29286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 13), self_29285, '_units')
        unicode_29287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1566, 28), 'unicode', u'x')
        # Applying the binary operator '==' (line 1566)
        result_eq_29288 = python_operator(stypy.reporting.localization.Localization(__file__, 1566, 13), '==', _units_29286, unicode_29287)
        
        # Testing the type of an if condition (line 1566)
        if_condition_29289 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1566, 13), result_eq_29288)
        # Assigning a type to the variable 'if_condition_29289' (line 1566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1566, 13), 'if_condition_29289', if_condition_29289)
        # SSA begins for if statement (line 1566)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1567):
        
        # Assigning a BinOp to a Name (line 1567):
        # Getting the type of 'ax' (line 1567)
        ax_29290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 17), 'ax')
        # Obtaining the member 'bbox' of a type (line 1567)
        bbox_29291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 17), ax_29290, 'bbox')
        # Obtaining the member 'width' of a type (line 1567)
        width_29292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 17), bbox_29291, 'width')
        # Getting the type of 'ax' (line 1567)
        ax_29293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 33), 'ax')
        # Obtaining the member 'viewLim' of a type (line 1567)
        viewLim_29294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 33), ax_29293, 'viewLim')
        # Obtaining the member 'width' of a type (line 1567)
        width_29295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 33), viewLim_29294, 'width')
        # Applying the binary operator 'div' (line 1567)
        result_div_29296 = python_operator(stypy.reporting.localization.Localization(__file__, 1567, 17), 'div', width_29292, width_29295)
        
        # Assigning a type to the variable 'sc' (line 1567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1567, 12), 'sc', result_div_29296)
        # SSA branch for the else part of an if statement (line 1566)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 1568)
        self_29297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 13), 'self')
        # Obtaining the member '_units' of a type (line 1568)
        _units_29298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1568, 13), self_29297, '_units')
        unicode_29299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1568, 28), 'unicode', u'y')
        # Applying the binary operator '==' (line 1568)
        result_eq_29300 = python_operator(stypy.reporting.localization.Localization(__file__, 1568, 13), '==', _units_29298, unicode_29299)
        
        # Testing the type of an if condition (line 1568)
        if_condition_29301 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1568, 13), result_eq_29300)
        # Assigning a type to the variable 'if_condition_29301' (line 1568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1568, 13), 'if_condition_29301', if_condition_29301)
        # SSA begins for if statement (line 1568)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1569):
        
        # Assigning a BinOp to a Name (line 1569):
        # Getting the type of 'ax' (line 1569)
        ax_29302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 17), 'ax')
        # Obtaining the member 'bbox' of a type (line 1569)
        bbox_29303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1569, 17), ax_29302, 'bbox')
        # Obtaining the member 'height' of a type (line 1569)
        height_29304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1569, 17), bbox_29303, 'height')
        # Getting the type of 'ax' (line 1569)
        ax_29305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 34), 'ax')
        # Obtaining the member 'viewLim' of a type (line 1569)
        viewLim_29306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1569, 34), ax_29305, 'viewLim')
        # Obtaining the member 'height' of a type (line 1569)
        height_29307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1569, 34), viewLim_29306, 'height')
        # Applying the binary operator 'div' (line 1569)
        result_div_29308 = python_operator(stypy.reporting.localization.Localization(__file__, 1569, 17), 'div', height_29304, height_29307)
        
        # Assigning a type to the variable 'sc' (line 1569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1569, 12), 'sc', result_div_29308)
        # SSA branch for the else part of an if statement (line 1568)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 1570)
        self_29309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 13), 'self')
        # Obtaining the member '_units' of a type (line 1570)
        _units_29310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1570, 13), self_29309, '_units')
        unicode_29311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1570, 28), 'unicode', u'inches')
        # Applying the binary operator '==' (line 1570)
        result_eq_29312 = python_operator(stypy.reporting.localization.Localization(__file__, 1570, 13), '==', _units_29310, unicode_29311)
        
        # Testing the type of an if condition (line 1570)
        if_condition_29313 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1570, 13), result_eq_29312)
        # Assigning a type to the variable 'if_condition_29313' (line 1570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1570, 13), 'if_condition_29313', if_condition_29313)
        # SSA begins for if statement (line 1570)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1571):
        
        # Assigning a Attribute to a Name (line 1571):
        # Getting the type of 'fig' (line 1571)
        fig_29314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 17), 'fig')
        # Obtaining the member 'dpi' of a type (line 1571)
        dpi_29315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 17), fig_29314, 'dpi')
        # Assigning a type to the variable 'sc' (line 1571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 12), 'sc', dpi_29315)
        # SSA branch for the else part of an if statement (line 1570)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 1572)
        self_29316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1572, 13), 'self')
        # Obtaining the member '_units' of a type (line 1572)
        _units_29317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1572, 13), self_29316, '_units')
        unicode_29318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1572, 28), 'unicode', u'points')
        # Applying the binary operator '==' (line 1572)
        result_eq_29319 = python_operator(stypy.reporting.localization.Localization(__file__, 1572, 13), '==', _units_29317, unicode_29318)
        
        # Testing the type of an if condition (line 1572)
        if_condition_29320 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1572, 13), result_eq_29319)
        # Assigning a type to the variable 'if_condition_29320' (line 1572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1572, 13), 'if_condition_29320', if_condition_29320)
        # SSA begins for if statement (line 1572)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1573):
        
        # Assigning a BinOp to a Name (line 1573):
        # Getting the type of 'fig' (line 1573)
        fig_29321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 17), 'fig')
        # Obtaining the member 'dpi' of a type (line 1573)
        dpi_29322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1573, 17), fig_29321, 'dpi')
        float_29323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1573, 27), 'float')
        # Applying the binary operator 'div' (line 1573)
        result_div_29324 = python_operator(stypy.reporting.localization.Localization(__file__, 1573, 17), 'div', dpi_29322, float_29323)
        
        # Assigning a type to the variable 'sc' (line 1573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1573, 12), 'sc', result_div_29324)
        # SSA branch for the else part of an if statement (line 1572)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 1574)
        self_29325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 13), 'self')
        # Obtaining the member '_units' of a type (line 1574)
        _units_29326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1574, 13), self_29325, '_units')
        unicode_29327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1574, 28), 'unicode', u'width')
        # Applying the binary operator '==' (line 1574)
        result_eq_29328 = python_operator(stypy.reporting.localization.Localization(__file__, 1574, 13), '==', _units_29326, unicode_29327)
        
        # Testing the type of an if condition (line 1574)
        if_condition_29329 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1574, 13), result_eq_29328)
        # Assigning a type to the variable 'if_condition_29329' (line 1574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1574, 13), 'if_condition_29329', if_condition_29329)
        # SSA begins for if statement (line 1574)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1575):
        
        # Assigning a Attribute to a Name (line 1575):
        # Getting the type of 'ax' (line 1575)
        ax_29330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 17), 'ax')
        # Obtaining the member 'bbox' of a type (line 1575)
        bbox_29331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1575, 17), ax_29330, 'bbox')
        # Obtaining the member 'width' of a type (line 1575)
        width_29332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1575, 17), bbox_29331, 'width')
        # Assigning a type to the variable 'sc' (line 1575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1575, 12), 'sc', width_29332)
        # SSA branch for the else part of an if statement (line 1574)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 1576)
        self_29333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 13), 'self')
        # Obtaining the member '_units' of a type (line 1576)
        _units_29334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1576, 13), self_29333, '_units')
        unicode_29335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1576, 28), 'unicode', u'height')
        # Applying the binary operator '==' (line 1576)
        result_eq_29336 = python_operator(stypy.reporting.localization.Localization(__file__, 1576, 13), '==', _units_29334, unicode_29335)
        
        # Testing the type of an if condition (line 1576)
        if_condition_29337 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1576, 13), result_eq_29336)
        # Assigning a type to the variable 'if_condition_29337' (line 1576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1576, 13), 'if_condition_29337', if_condition_29337)
        # SSA begins for if statement (line 1576)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1577):
        
        # Assigning a Attribute to a Name (line 1577):
        # Getting the type of 'ax' (line 1577)
        ax_29338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 17), 'ax')
        # Obtaining the member 'bbox' of a type (line 1577)
        bbox_29339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 17), ax_29338, 'bbox')
        # Obtaining the member 'height' of a type (line 1577)
        height_29340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 17), bbox_29339, 'height')
        # Assigning a type to the variable 'sc' (line 1577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1577, 12), 'sc', height_29340)
        # SSA branch for the else part of an if statement (line 1576)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 1578)
        self_29341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 13), 'self')
        # Obtaining the member '_units' of a type (line 1578)
        _units_29342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1578, 13), self_29341, '_units')
        unicode_29343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1578, 28), 'unicode', u'dots')
        # Applying the binary operator '==' (line 1578)
        result_eq_29344 = python_operator(stypy.reporting.localization.Localization(__file__, 1578, 13), '==', _units_29342, unicode_29343)
        
        # Testing the type of an if condition (line 1578)
        if_condition_29345 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1578, 13), result_eq_29344)
        # Assigning a type to the variable 'if_condition_29345' (line 1578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1578, 13), 'if_condition_29345', if_condition_29345)
        # SSA begins for if statement (line 1578)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 1579):
        
        # Assigning a Num to a Name (line 1579):
        float_29346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1579, 17), 'float')
        # Assigning a type to the variable 'sc' (line 1579)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1579, 12), 'sc', float_29346)
        # SSA branch for the else part of an if statement (line 1578)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1581)
        # Processing the call arguments (line 1581)
        unicode_29348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1581, 29), 'unicode', u'unrecognized units: %s')
        # Getting the type of 'self' (line 1581)
        self_29349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 56), 'self', False)
        # Obtaining the member '_units' of a type (line 1581)
        _units_29350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1581, 56), self_29349, '_units')
        # Applying the binary operator '%' (line 1581)
        result_mod_29351 = python_operator(stypy.reporting.localization.Localization(__file__, 1581, 29), '%', unicode_29348, _units_29350)
        
        # Processing the call keyword arguments (line 1581)
        kwargs_29352 = {}
        # Getting the type of 'ValueError' (line 1581)
        ValueError_29347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1581)
        ValueError_call_result_29353 = invoke(stypy.reporting.localization.Localization(__file__, 1581, 18), ValueError_29347, *[result_mod_29351], **kwargs_29352)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1581, 12), ValueError_call_result_29353, 'raise parameter', BaseException)
        # SSA join for if statement (line 1578)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1576)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1574)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1572)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1570)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1568)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1566)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1564)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 1583):
        
        # Assigning a Call to a Attribute (line 1583):
        
        # Call to zeros(...): (line 1583)
        # Processing the call arguments (line 1583)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1583)
        tuple_29356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1583, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1583)
        # Adding element type (line 1583)
        
        # Call to len(...): (line 1583)
        # Processing the call arguments (line 1583)
        # Getting the type of 'self' (line 1583)
        self_29358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 41), 'self', False)
        # Obtaining the member '_widths' of a type (line 1583)
        _widths_29359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 41), self_29358, '_widths')
        # Processing the call keyword arguments (line 1583)
        kwargs_29360 = {}
        # Getting the type of 'len' (line 1583)
        len_29357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 37), 'len', False)
        # Calling len(args, kwargs) (line 1583)
        len_call_result_29361 = invoke(stypy.reporting.localization.Localization(__file__, 1583, 37), len_29357, *[_widths_29359], **kwargs_29360)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1583, 37), tuple_29356, len_call_result_29361)
        # Adding element type (line 1583)
        int_29362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1583, 56), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1583, 37), tuple_29356, int_29362)
        # Adding element type (line 1583)
        int_29363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1583, 59), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1583, 37), tuple_29356, int_29363)
        
        # Processing the call keyword arguments (line 1583)
        kwargs_29364 = {}
        # Getting the type of 'np' (line 1583)
        np_29354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 27), 'np', False)
        # Obtaining the member 'zeros' of a type (line 1583)
        zeros_29355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 27), np_29354, 'zeros')
        # Calling zeros(args, kwargs) (line 1583)
        zeros_call_result_29365 = invoke(stypy.reporting.localization.Localization(__file__, 1583, 27), zeros_29355, *[tuple_29356], **kwargs_29364)
        
        # Getting the type of 'self' (line 1583)
        self_29366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 8), 'self')
        # Setting the type of the member '_transforms' of a type (line 1583)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 8), self_29366, '_transforms', zeros_call_result_29365)
        
        # Assigning a BinOp to a Name (line 1584):
        
        # Assigning a BinOp to a Name (line 1584):
        # Getting the type of 'self' (line 1584)
        self_29367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 17), 'self')
        # Obtaining the member '_widths' of a type (line 1584)
        _widths_29368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1584, 17), self_29367, '_widths')
        # Getting the type of 'sc' (line 1584)
        sc_29369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 32), 'sc')
        # Applying the binary operator '*' (line 1584)
        result_mul_29370 = python_operator(stypy.reporting.localization.Localization(__file__, 1584, 17), '*', _widths_29368, sc_29369)
        
        # Assigning a type to the variable 'widths' (line 1584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1584, 8), 'widths', result_mul_29370)
        
        # Assigning a BinOp to a Name (line 1585):
        
        # Assigning a BinOp to a Name (line 1585):
        # Getting the type of 'self' (line 1585)
        self_29371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 18), 'self')
        # Obtaining the member '_heights' of a type (line 1585)
        _heights_29372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1585, 18), self_29371, '_heights')
        # Getting the type of 'sc' (line 1585)
        sc_29373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 34), 'sc')
        # Applying the binary operator '*' (line 1585)
        result_mul_29374 = python_operator(stypy.reporting.localization.Localization(__file__, 1585, 18), '*', _heights_29372, sc_29373)
        
        # Assigning a type to the variable 'heights' (line 1585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1585, 8), 'heights', result_mul_29374)
        
        # Assigning a Call to a Name (line 1586):
        
        # Assigning a Call to a Name (line 1586):
        
        # Call to sin(...): (line 1586)
        # Processing the call arguments (line 1586)
        # Getting the type of 'self' (line 1586)
        self_29377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 27), 'self', False)
        # Obtaining the member '_angles' of a type (line 1586)
        _angles_29378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1586, 27), self_29377, '_angles')
        # Processing the call keyword arguments (line 1586)
        kwargs_29379 = {}
        # Getting the type of 'np' (line 1586)
        np_29375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 20), 'np', False)
        # Obtaining the member 'sin' of a type (line 1586)
        sin_29376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1586, 20), np_29375, 'sin')
        # Calling sin(args, kwargs) (line 1586)
        sin_call_result_29380 = invoke(stypy.reporting.localization.Localization(__file__, 1586, 20), sin_29376, *[_angles_29378], **kwargs_29379)
        
        # Assigning a type to the variable 'sin_angle' (line 1586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1586, 8), 'sin_angle', sin_call_result_29380)
        
        # Assigning a Call to a Name (line 1587):
        
        # Assigning a Call to a Name (line 1587):
        
        # Call to cos(...): (line 1587)
        # Processing the call arguments (line 1587)
        # Getting the type of 'self' (line 1587)
        self_29383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 27), 'self', False)
        # Obtaining the member '_angles' of a type (line 1587)
        _angles_29384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1587, 27), self_29383, '_angles')
        # Processing the call keyword arguments (line 1587)
        kwargs_29385 = {}
        # Getting the type of 'np' (line 1587)
        np_29381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 20), 'np', False)
        # Obtaining the member 'cos' of a type (line 1587)
        cos_29382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1587, 20), np_29381, 'cos')
        # Calling cos(args, kwargs) (line 1587)
        cos_call_result_29386 = invoke(stypy.reporting.localization.Localization(__file__, 1587, 20), cos_29382, *[_angles_29384], **kwargs_29385)
        
        # Assigning a type to the variable 'cos_angle' (line 1587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1587, 8), 'cos_angle', cos_call_result_29386)
        
        # Assigning a BinOp to a Subscript (line 1588):
        
        # Assigning a BinOp to a Subscript (line 1588):
        # Getting the type of 'widths' (line 1588)
        widths_29387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 36), 'widths')
        # Getting the type of 'cos_angle' (line 1588)
        cos_angle_29388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 45), 'cos_angle')
        # Applying the binary operator '*' (line 1588)
        result_mul_29389 = python_operator(stypy.reporting.localization.Localization(__file__, 1588, 36), '*', widths_29387, cos_angle_29388)
        
        # Getting the type of 'self' (line 1588)
        self_29390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 8), 'self')
        # Obtaining the member '_transforms' of a type (line 1588)
        _transforms_29391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1588, 8), self_29390, '_transforms')
        slice_29392 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1588, 8), None, None, None)
        int_29393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1588, 28), 'int')
        int_29394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1588, 31), 'int')
        # Storing an element on a container (line 1588)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1588, 8), _transforms_29391, ((slice_29392, int_29393, int_29394), result_mul_29389))
        
        # Assigning a BinOp to a Subscript (line 1589):
        
        # Assigning a BinOp to a Subscript (line 1589):
        # Getting the type of 'heights' (line 1589)
        heights_29395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 36), 'heights')
        
        # Getting the type of 'sin_angle' (line 1589)
        sin_angle_29396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 47), 'sin_angle')
        # Applying the 'usub' unary operator (line 1589)
        result___neg___29397 = python_operator(stypy.reporting.localization.Localization(__file__, 1589, 46), 'usub', sin_angle_29396)
        
        # Applying the binary operator '*' (line 1589)
        result_mul_29398 = python_operator(stypy.reporting.localization.Localization(__file__, 1589, 36), '*', heights_29395, result___neg___29397)
        
        # Getting the type of 'self' (line 1589)
        self_29399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 8), 'self')
        # Obtaining the member '_transforms' of a type (line 1589)
        _transforms_29400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1589, 8), self_29399, '_transforms')
        slice_29401 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1589, 8), None, None, None)
        int_29402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1589, 28), 'int')
        int_29403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1589, 31), 'int')
        # Storing an element on a container (line 1589)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1589, 8), _transforms_29400, ((slice_29401, int_29402, int_29403), result_mul_29398))
        
        # Assigning a BinOp to a Subscript (line 1590):
        
        # Assigning a BinOp to a Subscript (line 1590):
        # Getting the type of 'widths' (line 1590)
        widths_29404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 36), 'widths')
        # Getting the type of 'sin_angle' (line 1590)
        sin_angle_29405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 45), 'sin_angle')
        # Applying the binary operator '*' (line 1590)
        result_mul_29406 = python_operator(stypy.reporting.localization.Localization(__file__, 1590, 36), '*', widths_29404, sin_angle_29405)
        
        # Getting the type of 'self' (line 1590)
        self_29407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 8), 'self')
        # Obtaining the member '_transforms' of a type (line 1590)
        _transforms_29408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1590, 8), self_29407, '_transforms')
        slice_29409 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1590, 8), None, None, None)
        int_29410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1590, 28), 'int')
        int_29411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1590, 31), 'int')
        # Storing an element on a container (line 1590)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1590, 8), _transforms_29408, ((slice_29409, int_29410, int_29411), result_mul_29406))
        
        # Assigning a BinOp to a Subscript (line 1591):
        
        # Assigning a BinOp to a Subscript (line 1591):
        # Getting the type of 'heights' (line 1591)
        heights_29412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 36), 'heights')
        # Getting the type of 'cos_angle' (line 1591)
        cos_angle_29413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 46), 'cos_angle')
        # Applying the binary operator '*' (line 1591)
        result_mul_29414 = python_operator(stypy.reporting.localization.Localization(__file__, 1591, 36), '*', heights_29412, cos_angle_29413)
        
        # Getting the type of 'self' (line 1591)
        self_29415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 8), 'self')
        # Obtaining the member '_transforms' of a type (line 1591)
        _transforms_29416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1591, 8), self_29415, '_transforms')
        slice_29417 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1591, 8), None, None, None)
        int_29418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1591, 28), 'int')
        int_29419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1591, 31), 'int')
        # Storing an element on a container (line 1591)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1591, 8), _transforms_29416, ((slice_29417, int_29418, int_29419), result_mul_29414))
        
        # Assigning a Num to a Subscript (line 1592):
        
        # Assigning a Num to a Subscript (line 1592):
        float_29420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1592, 36), 'float')
        # Getting the type of 'self' (line 1592)
        self_29421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 8), 'self')
        # Obtaining the member '_transforms' of a type (line 1592)
        _transforms_29422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1592, 8), self_29421, '_transforms')
        slice_29423 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1592, 8), None, None, None)
        int_29424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1592, 28), 'int')
        int_29425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1592, 31), 'int')
        # Storing an element on a container (line 1592)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1592, 8), _transforms_29422, ((slice_29423, int_29424, int_29425), float_29420))
        
        # Assigning a Attribute to a Name (line 1594):
        
        # Assigning a Attribute to a Name (line 1594):
        # Getting the type of 'transforms' (line 1594)
        transforms_29426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 18), 'transforms')
        # Obtaining the member 'Affine2D' of a type (line 1594)
        Affine2D_29427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1594, 18), transforms_29426, 'Affine2D')
        # Assigning a type to the variable '_affine' (line 1594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1594, 8), '_affine', Affine2D_29427)
        
        
        # Getting the type of 'self' (line 1595)
        self_29428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 11), 'self')
        # Obtaining the member '_units' of a type (line 1595)
        _units_29429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1595, 11), self_29428, '_units')
        unicode_29430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1595, 26), 'unicode', u'xy')
        # Applying the binary operator '==' (line 1595)
        result_eq_29431 = python_operator(stypy.reporting.localization.Localization(__file__, 1595, 11), '==', _units_29429, unicode_29430)
        
        # Testing the type of an if condition (line 1595)
        if_condition_29432 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1595, 8), result_eq_29431)
        # Assigning a type to the variable 'if_condition_29432' (line 1595)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1595, 8), 'if_condition_29432', if_condition_29432)
        # SSA begins for if statement (line 1595)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1596):
        
        # Assigning a Call to a Name (line 1596):
        
        # Call to copy(...): (line 1596)
        # Processing the call keyword arguments (line 1596)
        kwargs_29442 = {}
        
        # Call to get_matrix(...): (line 1596)
        # Processing the call keyword arguments (line 1596)
        kwargs_29439 = {}
        
        # Call to get_affine(...): (line 1596)
        # Processing the call keyword arguments (line 1596)
        kwargs_29436 = {}
        # Getting the type of 'ax' (line 1596)
        ax_29433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 16), 'ax', False)
        # Obtaining the member 'transData' of a type (line 1596)
        transData_29434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1596, 16), ax_29433, 'transData')
        # Obtaining the member 'get_affine' of a type (line 1596)
        get_affine_29435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1596, 16), transData_29434, 'get_affine')
        # Calling get_affine(args, kwargs) (line 1596)
        get_affine_call_result_29437 = invoke(stypy.reporting.localization.Localization(__file__, 1596, 16), get_affine_29435, *[], **kwargs_29436)
        
        # Obtaining the member 'get_matrix' of a type (line 1596)
        get_matrix_29438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1596, 16), get_affine_call_result_29437, 'get_matrix')
        # Calling get_matrix(args, kwargs) (line 1596)
        get_matrix_call_result_29440 = invoke(stypy.reporting.localization.Localization(__file__, 1596, 16), get_matrix_29438, *[], **kwargs_29439)
        
        # Obtaining the member 'copy' of a type (line 1596)
        copy_29441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1596, 16), get_matrix_call_result_29440, 'copy')
        # Calling copy(args, kwargs) (line 1596)
        copy_call_result_29443 = invoke(stypy.reporting.localization.Localization(__file__, 1596, 16), copy_29441, *[], **kwargs_29442)
        
        # Assigning a type to the variable 'm' (line 1596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1596, 12), 'm', copy_call_result_29443)
        
        # Assigning a Num to a Subscript (line 1597):
        
        # Assigning a Num to a Subscript (line 1597):
        int_29444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1597, 24), 'int')
        # Getting the type of 'm' (line 1597)
        m_29445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 12), 'm')
        int_29446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1597, 15), 'int')
        slice_29447 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1597, 12), None, int_29446, None)
        int_29448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1597, 18), 'int')
        slice_29449 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1597, 12), int_29448, None, None)
        # Storing an element on a container (line 1597)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1597, 12), m_29445, ((slice_29447, slice_29449), int_29444))
        
        # Call to set_transform(...): (line 1598)
        # Processing the call arguments (line 1598)
        
        # Call to _affine(...): (line 1598)
        # Processing the call arguments (line 1598)
        # Getting the type of 'm' (line 1598)
        m_29453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 39), 'm', False)
        # Processing the call keyword arguments (line 1598)
        kwargs_29454 = {}
        # Getting the type of '_affine' (line 1598)
        _affine_29452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 31), '_affine', False)
        # Calling _affine(args, kwargs) (line 1598)
        _affine_call_result_29455 = invoke(stypy.reporting.localization.Localization(__file__, 1598, 31), _affine_29452, *[m_29453], **kwargs_29454)
        
        # Processing the call keyword arguments (line 1598)
        kwargs_29456 = {}
        # Getting the type of 'self' (line 1598)
        self_29450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 12), 'self', False)
        # Obtaining the member 'set_transform' of a type (line 1598)
        set_transform_29451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1598, 12), self_29450, 'set_transform')
        # Calling set_transform(args, kwargs) (line 1598)
        set_transform_call_result_29457 = invoke(stypy.reporting.localization.Localization(__file__, 1598, 12), set_transform_29451, *[_affine_call_result_29455], **kwargs_29456)
        
        # SSA join for if statement (line 1595)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_set_transforms(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_transforms' in the type store
        # Getting the type of 'stypy_return_type' (line 1557)
        stypy_return_type_29458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29458)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_transforms'
        return stypy_return_type_29458


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 1600, 4, False)
        # Assigning a type to the variable 'self' (line 1601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1601, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        EllipseCollection.draw.__dict__.__setitem__('stypy_localization', localization)
        EllipseCollection.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        EllipseCollection.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        EllipseCollection.draw.__dict__.__setitem__('stypy_function_name', 'EllipseCollection.draw')
        EllipseCollection.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        EllipseCollection.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        EllipseCollection.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        EllipseCollection.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        EllipseCollection.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        EllipseCollection.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        EllipseCollection.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'EllipseCollection.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        
        # Call to _set_transforms(...): (line 1602)
        # Processing the call keyword arguments (line 1602)
        kwargs_29461 = {}
        # Getting the type of 'self' (line 1602)
        self_29459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1602, 8), 'self', False)
        # Obtaining the member '_set_transforms' of a type (line 1602)
        _set_transforms_29460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1602, 8), self_29459, '_set_transforms')
        # Calling _set_transforms(args, kwargs) (line 1602)
        _set_transforms_call_result_29462 = invoke(stypy.reporting.localization.Localization(__file__, 1602, 8), _set_transforms_29460, *[], **kwargs_29461)
        
        
        # Call to draw(...): (line 1603)
        # Processing the call arguments (line 1603)
        # Getting the type of 'self' (line 1603)
        self_29465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 24), 'self', False)
        # Getting the type of 'renderer' (line 1603)
        renderer_29466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 30), 'renderer', False)
        # Processing the call keyword arguments (line 1603)
        kwargs_29467 = {}
        # Getting the type of 'Collection' (line 1603)
        Collection_29463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 8), 'Collection', False)
        # Obtaining the member 'draw' of a type (line 1603)
        draw_29464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1603, 8), Collection_29463, 'draw')
        # Calling draw(args, kwargs) (line 1603)
        draw_call_result_29468 = invoke(stypy.reporting.localization.Localization(__file__, 1603, 8), draw_29464, *[self_29465, renderer_29466], **kwargs_29467)
        
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1600)
        stypy_return_type_29469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29469)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_29469


# Assigning a type to the variable 'EllipseCollection' (line 1516)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1516, 0), 'EllipseCollection', EllipseCollection)
# Declaration of the 'PatchCollection' class
# Getting the type of 'Collection' (line 1606)
Collection_29470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 22), 'Collection')

class PatchCollection(Collection_29470, ):
    unicode_29471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1615, (-1)), 'unicode', u'\n    A generic collection of patches.\n\n    This makes it easier to assign a color map to a heterogeneous\n    collection of patches.\n\n    This also may improve plotting speed, since PatchCollection will\n    draw faster than a large number of patches.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1617)
        False_29472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 47), 'False')
        defaults = [False_29472]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1617, 4, False)
        # Assigning a type to the variable 'self' (line 1618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1618, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PatchCollection.__init__', ['patches', 'match_original'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['patches', 'match_original'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_29473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1637, (-1)), 'unicode', u'\n        *patches*\n            a sequence of Patch objects.  This list may include\n            a heterogeneous assortment of different patch types.\n\n        *match_original*\n            If True, use the colors and linewidths of the original\n            patches.  If False, new colors may be assigned by\n            providing the standard collection arguments, facecolor,\n            edgecolor, linewidths, norm or cmap.\n\n        If any of *edgecolors*, *facecolors*, *linewidths*,\n        *antialiaseds* are None, they default to their\n        :data:`matplotlib.rcParams` patch setting, in sequence form.\n\n        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.\n        If the :class:`~matplotlib.cm.ScalarMappable` matrix _A is not\n        None (i.e., a call to set_array has been made), at draw time a\n        call to scalar mappable will be made to set the face colors.\n        ')
        
        # Getting the type of 'match_original' (line 1639)
        match_original_29474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 11), 'match_original')
        # Testing the type of an if condition (line 1639)
        if_condition_29475 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1639, 8), match_original_29474)
        # Assigning a type to the variable 'if_condition_29475' (line 1639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1639, 8), 'if_condition_29475', if_condition_29475)
        # SSA begins for if statement (line 1639)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

        @norecursion
        def determine_facecolor(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'determine_facecolor'
            module_type_store = module_type_store.open_function_context('determine_facecolor', 1640, 12, False)
            
            # Passed parameters checking function
            determine_facecolor.stypy_localization = localization
            determine_facecolor.stypy_type_of_self = None
            determine_facecolor.stypy_type_store = module_type_store
            determine_facecolor.stypy_function_name = 'determine_facecolor'
            determine_facecolor.stypy_param_names_list = ['patch']
            determine_facecolor.stypy_varargs_param_name = None
            determine_facecolor.stypy_kwargs_param_name = None
            determine_facecolor.stypy_call_defaults = defaults
            determine_facecolor.stypy_call_varargs = varargs
            determine_facecolor.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'determine_facecolor', ['patch'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'determine_facecolor', localization, ['patch'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'determine_facecolor(...)' code ##################

            
            
            # Call to get_fill(...): (line 1641)
            # Processing the call keyword arguments (line 1641)
            kwargs_29478 = {}
            # Getting the type of 'patch' (line 1641)
            patch_29476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 19), 'patch', False)
            # Obtaining the member 'get_fill' of a type (line 1641)
            get_fill_29477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1641, 19), patch_29476, 'get_fill')
            # Calling get_fill(args, kwargs) (line 1641)
            get_fill_call_result_29479 = invoke(stypy.reporting.localization.Localization(__file__, 1641, 19), get_fill_29477, *[], **kwargs_29478)
            
            # Testing the type of an if condition (line 1641)
            if_condition_29480 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1641, 16), get_fill_call_result_29479)
            # Assigning a type to the variable 'if_condition_29480' (line 1641)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1641, 16), 'if_condition_29480', if_condition_29480)
            # SSA begins for if statement (line 1641)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to get_facecolor(...): (line 1642)
            # Processing the call keyword arguments (line 1642)
            kwargs_29483 = {}
            # Getting the type of 'patch' (line 1642)
            patch_29481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 27), 'patch', False)
            # Obtaining the member 'get_facecolor' of a type (line 1642)
            get_facecolor_29482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1642, 27), patch_29481, 'get_facecolor')
            # Calling get_facecolor(args, kwargs) (line 1642)
            get_facecolor_call_result_29484 = invoke(stypy.reporting.localization.Localization(__file__, 1642, 27), get_facecolor_29482, *[], **kwargs_29483)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1642)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1642, 20), 'stypy_return_type', get_facecolor_call_result_29484)
            # SSA join for if statement (line 1641)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Obtaining an instance of the builtin type 'list' (line 1643)
            list_29485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1643, 23), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1643)
            # Adding element type (line 1643)
            int_29486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1643, 24), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1643, 23), list_29485, int_29486)
            # Adding element type (line 1643)
            int_29487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1643, 27), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1643, 23), list_29485, int_29487)
            # Adding element type (line 1643)
            int_29488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1643, 30), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1643, 23), list_29485, int_29488)
            # Adding element type (line 1643)
            int_29489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1643, 33), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1643, 23), list_29485, int_29489)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1643)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1643, 16), 'stypy_return_type', list_29485)
            
            # ################# End of 'determine_facecolor(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'determine_facecolor' in the type store
            # Getting the type of 'stypy_return_type' (line 1640)
            stypy_return_type_29490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 12), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_29490)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'determine_facecolor'
            return stypy_return_type_29490

        # Assigning a type to the variable 'determine_facecolor' (line 1640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1640, 12), 'determine_facecolor', determine_facecolor)
        
        # Assigning a ListComp to a Subscript (line 1645):
        
        # Assigning a ListComp to a Subscript (line 1645):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'patches' (line 1645)
        patches_29495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 68), 'patches')
        comprehension_29496 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1645, 36), patches_29495)
        # Assigning a type to the variable 'p' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 36), 'p', comprehension_29496)
        
        # Call to determine_facecolor(...): (line 1645)
        # Processing the call arguments (line 1645)
        # Getting the type of 'p' (line 1645)
        p_29492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 56), 'p', False)
        # Processing the call keyword arguments (line 1645)
        kwargs_29493 = {}
        # Getting the type of 'determine_facecolor' (line 1645)
        determine_facecolor_29491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 36), 'determine_facecolor', False)
        # Calling determine_facecolor(args, kwargs) (line 1645)
        determine_facecolor_call_result_29494 = invoke(stypy.reporting.localization.Localization(__file__, 1645, 36), determine_facecolor_29491, *[p_29492], **kwargs_29493)
        
        list_29497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1645, 36), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1645, 36), list_29497, determine_facecolor_call_result_29494)
        # Getting the type of 'kwargs' (line 1645)
        kwargs_29498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 12), 'kwargs')
        unicode_29499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1645, 19), 'unicode', u'facecolors')
        # Storing an element on a container (line 1645)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1645, 12), kwargs_29498, (unicode_29499, list_29497))
        
        # Assigning a ListComp to a Subscript (line 1646):
        
        # Assigning a ListComp to a Subscript (line 1646):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'patches' (line 1646)
        patches_29504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 63), 'patches')
        comprehension_29505 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1646, 36), patches_29504)
        # Assigning a type to the variable 'p' (line 1646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 36), 'p', comprehension_29505)
        
        # Call to get_edgecolor(...): (line 1646)
        # Processing the call keyword arguments (line 1646)
        kwargs_29502 = {}
        # Getting the type of 'p' (line 1646)
        p_29500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 36), 'p', False)
        # Obtaining the member 'get_edgecolor' of a type (line 1646)
        get_edgecolor_29501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1646, 36), p_29500, 'get_edgecolor')
        # Calling get_edgecolor(args, kwargs) (line 1646)
        get_edgecolor_call_result_29503 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 36), get_edgecolor_29501, *[], **kwargs_29502)
        
        list_29506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1646, 36), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1646, 36), list_29506, get_edgecolor_call_result_29503)
        # Getting the type of 'kwargs' (line 1646)
        kwargs_29507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 12), 'kwargs')
        unicode_29508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1646, 19), 'unicode', u'edgecolors')
        # Storing an element on a container (line 1646)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1646, 12), kwargs_29507, (unicode_29508, list_29506))
        
        # Assigning a ListComp to a Subscript (line 1647):
        
        # Assigning a ListComp to a Subscript (line 1647):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'patches' (line 1647)
        patches_29513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 63), 'patches')
        comprehension_29514 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1647, 36), patches_29513)
        # Assigning a type to the variable 'p' (line 1647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1647, 36), 'p', comprehension_29514)
        
        # Call to get_linewidth(...): (line 1647)
        # Processing the call keyword arguments (line 1647)
        kwargs_29511 = {}
        # Getting the type of 'p' (line 1647)
        p_29509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 36), 'p', False)
        # Obtaining the member 'get_linewidth' of a type (line 1647)
        get_linewidth_29510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1647, 36), p_29509, 'get_linewidth')
        # Calling get_linewidth(args, kwargs) (line 1647)
        get_linewidth_call_result_29512 = invoke(stypy.reporting.localization.Localization(__file__, 1647, 36), get_linewidth_29510, *[], **kwargs_29511)
        
        list_29515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1647, 36), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1647, 36), list_29515, get_linewidth_call_result_29512)
        # Getting the type of 'kwargs' (line 1647)
        kwargs_29516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 12), 'kwargs')
        unicode_29517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1647, 19), 'unicode', u'linewidths')
        # Storing an element on a container (line 1647)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1647, 12), kwargs_29516, (unicode_29517, list_29515))
        
        # Assigning a ListComp to a Subscript (line 1648):
        
        # Assigning a ListComp to a Subscript (line 1648):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'patches' (line 1648)
        patches_29522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 63), 'patches')
        comprehension_29523 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1648, 36), patches_29522)
        # Assigning a type to the variable 'p' (line 1648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 36), 'p', comprehension_29523)
        
        # Call to get_linestyle(...): (line 1648)
        # Processing the call keyword arguments (line 1648)
        kwargs_29520 = {}
        # Getting the type of 'p' (line 1648)
        p_29518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 36), 'p', False)
        # Obtaining the member 'get_linestyle' of a type (line 1648)
        get_linestyle_29519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1648, 36), p_29518, 'get_linestyle')
        # Calling get_linestyle(args, kwargs) (line 1648)
        get_linestyle_call_result_29521 = invoke(stypy.reporting.localization.Localization(__file__, 1648, 36), get_linestyle_29519, *[], **kwargs_29520)
        
        list_29524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1648, 36), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1648, 36), list_29524, get_linestyle_call_result_29521)
        # Getting the type of 'kwargs' (line 1648)
        kwargs_29525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 12), 'kwargs')
        unicode_29526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1648, 19), 'unicode', u'linestyles')
        # Storing an element on a container (line 1648)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1648, 12), kwargs_29525, (unicode_29526, list_29524))
        
        # Assigning a ListComp to a Subscript (line 1649):
        
        # Assigning a ListComp to a Subscript (line 1649):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'patches' (line 1649)
        patches_29531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 67), 'patches')
        comprehension_29532 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1649, 38), patches_29531)
        # Assigning a type to the variable 'p' (line 1649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1649, 38), 'p', comprehension_29532)
        
        # Call to get_antialiased(...): (line 1649)
        # Processing the call keyword arguments (line 1649)
        kwargs_29529 = {}
        # Getting the type of 'p' (line 1649)
        p_29527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 38), 'p', False)
        # Obtaining the member 'get_antialiased' of a type (line 1649)
        get_antialiased_29528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1649, 38), p_29527, 'get_antialiased')
        # Calling get_antialiased(args, kwargs) (line 1649)
        get_antialiased_call_result_29530 = invoke(stypy.reporting.localization.Localization(__file__, 1649, 38), get_antialiased_29528, *[], **kwargs_29529)
        
        list_29533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1649, 38), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1649, 38), list_29533, get_antialiased_call_result_29530)
        # Getting the type of 'kwargs' (line 1649)
        kwargs_29534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 12), 'kwargs')
        unicode_29535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1649, 19), 'unicode', u'antialiaseds')
        # Storing an element on a container (line 1649)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1649, 12), kwargs_29534, (unicode_29535, list_29533))
        # SSA join for if statement (line 1639)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 1651)
        # Processing the call arguments (line 1651)
        # Getting the type of 'self' (line 1651)
        self_29538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 28), 'self', False)
        # Processing the call keyword arguments (line 1651)
        # Getting the type of 'kwargs' (line 1651)
        kwargs_29539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 36), 'kwargs', False)
        kwargs_29540 = {'kwargs_29539': kwargs_29539}
        # Getting the type of 'Collection' (line 1651)
        Collection_29536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 8), 'Collection', False)
        # Obtaining the member '__init__' of a type (line 1651)
        init___29537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1651, 8), Collection_29536, '__init__')
        # Calling __init__(args, kwargs) (line 1651)
        init___call_result_29541 = invoke(stypy.reporting.localization.Localization(__file__, 1651, 8), init___29537, *[self_29538], **kwargs_29540)
        
        
        # Call to set_paths(...): (line 1653)
        # Processing the call arguments (line 1653)
        # Getting the type of 'patches' (line 1653)
        patches_29544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 23), 'patches', False)
        # Processing the call keyword arguments (line 1653)
        kwargs_29545 = {}
        # Getting the type of 'self' (line 1653)
        self_29542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 8), 'self', False)
        # Obtaining the member 'set_paths' of a type (line 1653)
        set_paths_29543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1653, 8), self_29542, 'set_paths')
        # Calling set_paths(args, kwargs) (line 1653)
        set_paths_call_result_29546 = invoke(stypy.reporting.localization.Localization(__file__, 1653, 8), set_paths_29543, *[patches_29544], **kwargs_29545)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_paths'
        module_type_store = module_type_store.open_function_context('set_paths', 1655, 4, False)
        # Assigning a type to the variable 'self' (line 1656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1656, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PatchCollection.set_paths.__dict__.__setitem__('stypy_localization', localization)
        PatchCollection.set_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PatchCollection.set_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        PatchCollection.set_paths.__dict__.__setitem__('stypy_function_name', 'PatchCollection.set_paths')
        PatchCollection.set_paths.__dict__.__setitem__('stypy_param_names_list', ['patches'])
        PatchCollection.set_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        PatchCollection.set_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PatchCollection.set_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        PatchCollection.set_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        PatchCollection.set_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PatchCollection.set_paths.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PatchCollection.set_paths', ['patches'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_paths', localization, ['patches'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_paths(...)' code ##################

        
        # Assigning a ListComp to a Name (line 1656):
        
        # Assigning a ListComp to a Name (line 1656):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'patches' (line 1657)
        patches_29558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 26), 'patches')
        comprehension_29559 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1656, 17), patches_29558)
        # Assigning a type to the variable 'p' (line 1656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1656, 17), 'p', comprehension_29559)
        
        # Call to transform_path(...): (line 1656)
        # Processing the call arguments (line 1656)
        
        # Call to get_path(...): (line 1656)
        # Processing the call keyword arguments (line 1656)
        kwargs_29554 = {}
        # Getting the type of 'p' (line 1656)
        p_29552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 50), 'p', False)
        # Obtaining the member 'get_path' of a type (line 1656)
        get_path_29553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1656, 50), p_29552, 'get_path')
        # Calling get_path(args, kwargs) (line 1656)
        get_path_call_result_29555 = invoke(stypy.reporting.localization.Localization(__file__, 1656, 50), get_path_29553, *[], **kwargs_29554)
        
        # Processing the call keyword arguments (line 1656)
        kwargs_29556 = {}
        
        # Call to get_transform(...): (line 1656)
        # Processing the call keyword arguments (line 1656)
        kwargs_29549 = {}
        # Getting the type of 'p' (line 1656)
        p_29547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 17), 'p', False)
        # Obtaining the member 'get_transform' of a type (line 1656)
        get_transform_29548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1656, 17), p_29547, 'get_transform')
        # Calling get_transform(args, kwargs) (line 1656)
        get_transform_call_result_29550 = invoke(stypy.reporting.localization.Localization(__file__, 1656, 17), get_transform_29548, *[], **kwargs_29549)
        
        # Obtaining the member 'transform_path' of a type (line 1656)
        transform_path_29551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1656, 17), get_transform_call_result_29550, 'transform_path')
        # Calling transform_path(args, kwargs) (line 1656)
        transform_path_call_result_29557 = invoke(stypy.reporting.localization.Localization(__file__, 1656, 17), transform_path_29551, *[get_path_call_result_29555], **kwargs_29556)
        
        list_29560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1656, 17), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1656, 17), list_29560, transform_path_call_result_29557)
        # Assigning a type to the variable 'paths' (line 1656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1656, 8), 'paths', list_29560)
        
        # Assigning a Name to a Attribute (line 1658):
        
        # Assigning a Name to a Attribute (line 1658):
        # Getting the type of 'paths' (line 1658)
        paths_29561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 22), 'paths')
        # Getting the type of 'self' (line 1658)
        self_29562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 8), 'self')
        # Setting the type of the member '_paths' of a type (line 1658)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1658, 8), self_29562, '_paths', paths_29561)
        
        # ################# End of 'set_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 1655)
        stypy_return_type_29563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29563)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_paths'
        return stypy_return_type_29563


# Assigning a type to the variable 'PatchCollection' (line 1606)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1606, 0), 'PatchCollection', PatchCollection)
# Declaration of the 'TriMesh' class
# Getting the type of 'Collection' (line 1661)
Collection_29564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 14), 'Collection')

class TriMesh(Collection_29564, ):
    unicode_29565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1668, (-1)), 'unicode', u'\n    Class for the efficient drawing of a triangular mesh using\n    Gouraud shading.\n\n    A triangular mesh is a :class:`~matplotlib.tri.Triangulation`\n    object.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1669, 4, False)
        # Assigning a type to the variable 'self' (line 1670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TriMesh.__init__', ['triangulation'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['triangulation'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1670)
        # Processing the call arguments (line 1670)
        # Getting the type of 'self' (line 1670)
        self_29568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 28), 'self', False)
        # Processing the call keyword arguments (line 1670)
        # Getting the type of 'kwargs' (line 1670)
        kwargs_29569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 36), 'kwargs', False)
        kwargs_29570 = {'kwargs_29569': kwargs_29569}
        # Getting the type of 'Collection' (line 1670)
        Collection_29566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'Collection', False)
        # Obtaining the member '__init__' of a type (line 1670)
        init___29567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 8), Collection_29566, '__init__')
        # Calling __init__(args, kwargs) (line 1670)
        init___call_result_29571 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 8), init___29567, *[self_29568], **kwargs_29570)
        
        
        # Assigning a Name to a Attribute (line 1671):
        
        # Assigning a Name to a Attribute (line 1671):
        # Getting the type of 'triangulation' (line 1671)
        triangulation_29572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 30), 'triangulation')
        # Getting the type of 'self' (line 1671)
        self_29573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 8), 'self')
        # Setting the type of the member '_triangulation' of a type (line 1671)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1671, 8), self_29573, '_triangulation', triangulation_29572)
        
        # Assigning a Str to a Attribute (line 1672):
        
        # Assigning a Str to a Attribute (line 1672):
        unicode_29574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 24), 'unicode', u'gouraud')
        # Getting the type of 'self' (line 1672)
        self_29575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 8), 'self')
        # Setting the type of the member '_shading' of a type (line 1672)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1672, 8), self_29575, '_shading', unicode_29574)
        
        # Assigning a Name to a Attribute (line 1673):
        
        # Assigning a Name to a Attribute (line 1673):
        # Getting the type of 'True' (line 1673)
        True_29576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 26), 'True')
        # Getting the type of 'self' (line 1673)
        self_29577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 8), 'self')
        # Setting the type of the member '_is_filled' of a type (line 1673)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1673, 8), self_29577, '_is_filled', True_29576)
        
        # Assigning a Call to a Attribute (line 1675):
        
        # Assigning a Call to a Attribute (line 1675):
        
        # Call to unit(...): (line 1675)
        # Processing the call keyword arguments (line 1675)
        kwargs_29581 = {}
        # Getting the type of 'transforms' (line 1675)
        transforms_29578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 21), 'transforms', False)
        # Obtaining the member 'Bbox' of a type (line 1675)
        Bbox_29579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 21), transforms_29578, 'Bbox')
        # Obtaining the member 'unit' of a type (line 1675)
        unit_29580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 21), Bbox_29579, 'unit')
        # Calling unit(args, kwargs) (line 1675)
        unit_call_result_29582 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 21), unit_29580, *[], **kwargs_29581)
        
        # Getting the type of 'self' (line 1675)
        self_29583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 8), 'self')
        # Setting the type of the member '_bbox' of a type (line 1675)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 8), self_29583, '_bbox', unit_call_result_29582)
        
        # Assigning a Call to a Name (line 1679):
        
        # Assigning a Call to a Name (line 1679):
        
        # Call to hstack(...): (line 1679)
        # Processing the call arguments (line 1679)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1679)
        tuple_29586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1679, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1679)
        # Adding element type (line 1679)
        
        # Call to reshape(...): (line 1679)
        # Processing the call arguments (line 1679)
        int_29590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1679, 48), 'int')
        int_29591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1679, 52), 'int')
        # Processing the call keyword arguments (line 1679)
        kwargs_29592 = {}
        # Getting the type of 'triangulation' (line 1679)
        triangulation_29587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 24), 'triangulation', False)
        # Obtaining the member 'x' of a type (line 1679)
        x_29588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1679, 24), triangulation_29587, 'x')
        # Obtaining the member 'reshape' of a type (line 1679)
        reshape_29589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1679, 24), x_29588, 'reshape')
        # Calling reshape(args, kwargs) (line 1679)
        reshape_call_result_29593 = invoke(stypy.reporting.localization.Localization(__file__, 1679, 24), reshape_29589, *[int_29590, int_29591], **kwargs_29592)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1679, 24), tuple_29586, reshape_call_result_29593)
        # Adding element type (line 1679)
        
        # Call to reshape(...): (line 1680)
        # Processing the call arguments (line 1680)
        int_29597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1680, 48), 'int')
        int_29598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1680, 52), 'int')
        # Processing the call keyword arguments (line 1680)
        kwargs_29599 = {}
        # Getting the type of 'triangulation' (line 1680)
        triangulation_29594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 24), 'triangulation', False)
        # Obtaining the member 'y' of a type (line 1680)
        y_29595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1680, 24), triangulation_29594, 'y')
        # Obtaining the member 'reshape' of a type (line 1680)
        reshape_29596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1680, 24), y_29595, 'reshape')
        # Calling reshape(args, kwargs) (line 1680)
        reshape_call_result_29600 = invoke(stypy.reporting.localization.Localization(__file__, 1680, 24), reshape_29596, *[int_29597, int_29598], **kwargs_29599)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1679, 24), tuple_29586, reshape_call_result_29600)
        
        # Processing the call keyword arguments (line 1679)
        kwargs_29601 = {}
        # Getting the type of 'np' (line 1679)
        np_29584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 13), 'np', False)
        # Obtaining the member 'hstack' of a type (line 1679)
        hstack_29585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1679, 13), np_29584, 'hstack')
        # Calling hstack(args, kwargs) (line 1679)
        hstack_call_result_29602 = invoke(stypy.reporting.localization.Localization(__file__, 1679, 13), hstack_29585, *[tuple_29586], **kwargs_29601)
        
        # Assigning a type to the variable 'xy' (line 1679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1679, 8), 'xy', hstack_call_result_29602)
        
        # Call to update_from_data_xy(...): (line 1681)
        # Processing the call arguments (line 1681)
        # Getting the type of 'xy' (line 1681)
        xy_29606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 39), 'xy', False)
        # Processing the call keyword arguments (line 1681)
        kwargs_29607 = {}
        # Getting the type of 'self' (line 1681)
        self_29603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 8), 'self', False)
        # Obtaining the member '_bbox' of a type (line 1681)
        _bbox_29604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1681, 8), self_29603, '_bbox')
        # Obtaining the member 'update_from_data_xy' of a type (line 1681)
        update_from_data_xy_29605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1681, 8), _bbox_29604, 'update_from_data_xy')
        # Calling update_from_data_xy(args, kwargs) (line 1681)
        update_from_data_xy_call_result_29608 = invoke(stypy.reporting.localization.Localization(__file__, 1681, 8), update_from_data_xy_29605, *[xy_29606], **kwargs_29607)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_paths'
        module_type_store = module_type_store.open_function_context('get_paths', 1683, 4, False)
        # Assigning a type to the variable 'self' (line 1684)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1684, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TriMesh.get_paths.__dict__.__setitem__('stypy_localization', localization)
        TriMesh.get_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TriMesh.get_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        TriMesh.get_paths.__dict__.__setitem__('stypy_function_name', 'TriMesh.get_paths')
        TriMesh.get_paths.__dict__.__setitem__('stypy_param_names_list', [])
        TriMesh.get_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        TriMesh.get_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TriMesh.get_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        TriMesh.get_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        TriMesh.get_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TriMesh.get_paths.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TriMesh.get_paths', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_paths', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_paths(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 1684)
        # Getting the type of 'self' (line 1684)
        self_29609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 11), 'self')
        # Obtaining the member '_paths' of a type (line 1684)
        _paths_29610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1684, 11), self_29609, '_paths')
        # Getting the type of 'None' (line 1684)
        None_29611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 26), 'None')
        
        (may_be_29612, more_types_in_union_29613) = may_be_none(_paths_29610, None_29611)

        if may_be_29612:

            if more_types_in_union_29613:
                # Runtime conditional SSA (line 1684)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_paths(...): (line 1685)
            # Processing the call keyword arguments (line 1685)
            kwargs_29616 = {}
            # Getting the type of 'self' (line 1685)
            self_29614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 12), 'self', False)
            # Obtaining the member 'set_paths' of a type (line 1685)
            set_paths_29615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1685, 12), self_29614, 'set_paths')
            # Calling set_paths(args, kwargs) (line 1685)
            set_paths_call_result_29617 = invoke(stypy.reporting.localization.Localization(__file__, 1685, 12), set_paths_29615, *[], **kwargs_29616)
            

            if more_types_in_union_29613:
                # SSA join for if statement (line 1684)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 1686)
        self_29618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 15), 'self')
        # Obtaining the member '_paths' of a type (line 1686)
        _paths_29619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1686, 15), self_29618, '_paths')
        # Assigning a type to the variable 'stypy_return_type' (line 1686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 8), 'stypy_return_type', _paths_29619)
        
        # ################# End of 'get_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 1683)
        stypy_return_type_29620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29620)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_paths'
        return stypy_return_type_29620


    @norecursion
    def set_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_paths'
        module_type_store = module_type_store.open_function_context('set_paths', 1688, 4, False)
        # Assigning a type to the variable 'self' (line 1689)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1689, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TriMesh.set_paths.__dict__.__setitem__('stypy_localization', localization)
        TriMesh.set_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TriMesh.set_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        TriMesh.set_paths.__dict__.__setitem__('stypy_function_name', 'TriMesh.set_paths')
        TriMesh.set_paths.__dict__.__setitem__('stypy_param_names_list', [])
        TriMesh.set_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        TriMesh.set_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TriMesh.set_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        TriMesh.set_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        TriMesh.set_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TriMesh.set_paths.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TriMesh.set_paths', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_paths', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_paths(...)' code ##################

        
        # Assigning a Call to a Attribute (line 1689):
        
        # Assigning a Call to a Attribute (line 1689):
        
        # Call to convert_mesh_to_paths(...): (line 1689)
        # Processing the call arguments (line 1689)
        # Getting the type of 'self' (line 1689)
        self_29623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 49), 'self', False)
        # Obtaining the member '_triangulation' of a type (line 1689)
        _triangulation_29624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1689, 49), self_29623, '_triangulation')
        # Processing the call keyword arguments (line 1689)
        kwargs_29625 = {}
        # Getting the type of 'self' (line 1689)
        self_29621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 22), 'self', False)
        # Obtaining the member 'convert_mesh_to_paths' of a type (line 1689)
        convert_mesh_to_paths_29622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1689, 22), self_29621, 'convert_mesh_to_paths')
        # Calling convert_mesh_to_paths(args, kwargs) (line 1689)
        convert_mesh_to_paths_call_result_29626 = invoke(stypy.reporting.localization.Localization(__file__, 1689, 22), convert_mesh_to_paths_29622, *[_triangulation_29624], **kwargs_29625)
        
        # Getting the type of 'self' (line 1689)
        self_29627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 8), 'self')
        # Setting the type of the member '_paths' of a type (line 1689)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1689, 8), self_29627, '_paths', convert_mesh_to_paths_call_result_29626)
        
        # ################# End of 'set_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 1688)
        stypy_return_type_29628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29628)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_paths'
        return stypy_return_type_29628


    @staticmethod
    @norecursion
    def convert_mesh_to_paths(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'convert_mesh_to_paths'
        module_type_store = module_type_store.open_function_context('convert_mesh_to_paths', 1691, 4, False)
        
        # Passed parameters checking function
        TriMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_localization', localization)
        TriMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_type_of_self', None)
        TriMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        TriMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_function_name', 'convert_mesh_to_paths')
        TriMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_param_names_list', ['tri'])
        TriMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        TriMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TriMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        TriMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        TriMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TriMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, None, module_type_store, 'convert_mesh_to_paths', ['tri'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'convert_mesh_to_paths', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'convert_mesh_to_paths(...)' code ##################

        unicode_29629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1699, (-1)), 'unicode', u'\n        Converts a given mesh into a sequence of\n        :class:`matplotlib.path.Path` objects for easier rendering by\n        backends that do not directly support meshes.\n\n        This function is primarily of use to backend implementers.\n        ')
        
        # Assigning a Attribute to a Name (line 1700):
        
        # Assigning a Attribute to a Name (line 1700):
        # Getting the type of 'mpath' (line 1700)
        mpath_29630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 15), 'mpath')
        # Obtaining the member 'Path' of a type (line 1700)
        Path_29631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1700, 15), mpath_29630, 'Path')
        # Assigning a type to the variable 'Path' (line 1700)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1700, 8), 'Path', Path_29631)
        
        # Assigning a Call to a Name (line 1701):
        
        # Assigning a Call to a Name (line 1701):
        
        # Call to get_masked_triangles(...): (line 1701)
        # Processing the call keyword arguments (line 1701)
        kwargs_29634 = {}
        # Getting the type of 'tri' (line 1701)
        tri_29632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 20), 'tri', False)
        # Obtaining the member 'get_masked_triangles' of a type (line 1701)
        get_masked_triangles_29633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1701, 20), tri_29632, 'get_masked_triangles')
        # Calling get_masked_triangles(args, kwargs) (line 1701)
        get_masked_triangles_call_result_29635 = invoke(stypy.reporting.localization.Localization(__file__, 1701, 20), get_masked_triangles_29633, *[], **kwargs_29634)
        
        # Assigning a type to the variable 'triangles' (line 1701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1701, 8), 'triangles', get_masked_triangles_call_result_29635)
        
        # Assigning a Call to a Name (line 1702):
        
        # Assigning a Call to a Name (line 1702):
        
        # Call to concatenate(...): (line 1702)
        # Processing the call arguments (line 1702)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1702)
        tuple_29638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1702, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1702)
        # Adding element type (line 1702)
        
        # Obtaining the type of the subscript
        Ellipsis_29639 = Ellipsis
        # Getting the type of 'np' (line 1702)
        np_29640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 54), 'np', False)
        # Obtaining the member 'newaxis' of a type (line 1702)
        newaxis_29641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1702, 54), np_29640, 'newaxis')
        
        # Obtaining the type of the subscript
        # Getting the type of 'triangles' (line 1702)
        triangles_29642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 38), 'triangles', False)
        # Getting the type of 'tri' (line 1702)
        tri_29643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 32), 'tri', False)
        # Obtaining the member 'x' of a type (line 1702)
        x_29644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1702, 32), tri_29643, 'x')
        # Obtaining the member '__getitem__' of a type (line 1702)
        getitem___29645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1702, 32), x_29644, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1702)
        subscript_call_result_29646 = invoke(stypy.reporting.localization.Localization(__file__, 1702, 32), getitem___29645, triangles_29642)
        
        # Obtaining the member '__getitem__' of a type (line 1702)
        getitem___29647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1702, 32), subscript_call_result_29646, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1702)
        subscript_call_result_29648 = invoke(stypy.reporting.localization.Localization(__file__, 1702, 32), getitem___29647, (Ellipsis_29639, newaxis_29641))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 32), tuple_29638, subscript_call_result_29648)
        # Adding element type (line 1702)
        
        # Obtaining the type of the subscript
        Ellipsis_29649 = Ellipsis
        # Getting the type of 'np' (line 1703)
        np_29650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 54), 'np', False)
        # Obtaining the member 'newaxis' of a type (line 1703)
        newaxis_29651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 54), np_29650, 'newaxis')
        
        # Obtaining the type of the subscript
        # Getting the type of 'triangles' (line 1703)
        triangles_29652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 38), 'triangles', False)
        # Getting the type of 'tri' (line 1703)
        tri_29653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 32), 'tri', False)
        # Obtaining the member 'y' of a type (line 1703)
        y_29654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 32), tri_29653, 'y')
        # Obtaining the member '__getitem__' of a type (line 1703)
        getitem___29655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 32), y_29654, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1703)
        subscript_call_result_29656 = invoke(stypy.reporting.localization.Localization(__file__, 1703, 32), getitem___29655, triangles_29652)
        
        # Obtaining the member '__getitem__' of a type (line 1703)
        getitem___29657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 32), subscript_call_result_29656, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1703)
        subscript_call_result_29658 = invoke(stypy.reporting.localization.Localization(__file__, 1703, 32), getitem___29657, (Ellipsis_29649, newaxis_29651))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1702, 32), tuple_29638, subscript_call_result_29658)
        
        # Processing the call keyword arguments (line 1702)
        int_29659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1703, 73), 'int')
        keyword_29660 = int_29659
        kwargs_29661 = {'axis': keyword_29660}
        # Getting the type of 'np' (line 1702)
        np_29636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 16), 'np', False)
        # Obtaining the member 'concatenate' of a type (line 1702)
        concatenate_29637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1702, 16), np_29636, 'concatenate')
        # Calling concatenate(args, kwargs) (line 1702)
        concatenate_call_result_29662 = invoke(stypy.reporting.localization.Localization(__file__, 1702, 16), concatenate_29637, *[tuple_29638], **kwargs_29661)
        
        # Assigning a type to the variable 'verts' (line 1702)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1702, 8), 'verts', concatenate_call_result_29662)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'verts' (line 1704)
        verts_29667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 33), 'verts')
        comprehension_29668 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1704, 16), verts_29667)
        # Assigning a type to the variable 'x' (line 1704)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1704, 16), 'x', comprehension_29668)
        
        # Call to Path(...): (line 1704)
        # Processing the call arguments (line 1704)
        # Getting the type of 'x' (line 1704)
        x_29664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 21), 'x', False)
        # Processing the call keyword arguments (line 1704)
        kwargs_29665 = {}
        # Getting the type of 'Path' (line 1704)
        Path_29663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 16), 'Path', False)
        # Calling Path(args, kwargs) (line 1704)
        Path_call_result_29666 = invoke(stypy.reporting.localization.Localization(__file__, 1704, 16), Path_29663, *[x_29664], **kwargs_29665)
        
        list_29669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1704, 16), list_29669, Path_call_result_29666)
        # Assigning a type to the variable 'stypy_return_type' (line 1704)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1704, 8), 'stypy_return_type', list_29669)
        
        # ################# End of 'convert_mesh_to_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'convert_mesh_to_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 1691)
        stypy_return_type_29670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29670)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'convert_mesh_to_paths'
        return stypy_return_type_29670


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 1706, 4, False)
        # Assigning a type to the variable 'self' (line 1707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1707, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TriMesh.draw.__dict__.__setitem__('stypy_localization', localization)
        TriMesh.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TriMesh.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        TriMesh.draw.__dict__.__setitem__('stypy_function_name', 'TriMesh.draw')
        TriMesh.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        TriMesh.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        TriMesh.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TriMesh.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        TriMesh.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        TriMesh.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TriMesh.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TriMesh.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        
        
        
        # Call to get_visible(...): (line 1708)
        # Processing the call keyword arguments (line 1708)
        kwargs_29673 = {}
        # Getting the type of 'self' (line 1708)
        self_29671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 1708)
        get_visible_29672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1708, 15), self_29671, 'get_visible')
        # Calling get_visible(args, kwargs) (line 1708)
        get_visible_call_result_29674 = invoke(stypy.reporting.localization.Localization(__file__, 1708, 15), get_visible_29672, *[], **kwargs_29673)
        
        # Applying the 'not' unary operator (line 1708)
        result_not__29675 = python_operator(stypy.reporting.localization.Localization(__file__, 1708, 11), 'not', get_visible_call_result_29674)
        
        # Testing the type of an if condition (line 1708)
        if_condition_29676 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1708, 8), result_not__29675)
        # Assigning a type to the variable 'if_condition_29676' (line 1708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1708, 8), 'if_condition_29676', if_condition_29676)
        # SSA begins for if statement (line 1708)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1709, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1708)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to open_group(...): (line 1710)
        # Processing the call arguments (line 1710)
        # Getting the type of 'self' (line 1710)
        self_29679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 28), 'self', False)
        # Obtaining the member '__class__' of a type (line 1710)
        class___29680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1710, 28), self_29679, '__class__')
        # Obtaining the member '__name__' of a type (line 1710)
        name___29681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1710, 28), class___29680, '__name__')
        # Processing the call keyword arguments (line 1710)
        kwargs_29682 = {}
        # Getting the type of 'renderer' (line 1710)
        renderer_29677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 8), 'renderer', False)
        # Obtaining the member 'open_group' of a type (line 1710)
        open_group_29678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1710, 8), renderer_29677, 'open_group')
        # Calling open_group(args, kwargs) (line 1710)
        open_group_call_result_29683 = invoke(stypy.reporting.localization.Localization(__file__, 1710, 8), open_group_29678, *[name___29681], **kwargs_29682)
        
        
        # Assigning a Call to a Name (line 1711):
        
        # Assigning a Call to a Name (line 1711):
        
        # Call to get_transform(...): (line 1711)
        # Processing the call keyword arguments (line 1711)
        kwargs_29686 = {}
        # Getting the type of 'self' (line 1711)
        self_29684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 20), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 1711)
        get_transform_29685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1711, 20), self_29684, 'get_transform')
        # Calling get_transform(args, kwargs) (line 1711)
        get_transform_call_result_29687 = invoke(stypy.reporting.localization.Localization(__file__, 1711, 20), get_transform_29685, *[], **kwargs_29686)
        
        # Assigning a type to the variable 'transform' (line 1711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1711, 8), 'transform', get_transform_call_result_29687)
        
        # Assigning a Attribute to a Name (line 1714):
        
        # Assigning a Attribute to a Name (line 1714):
        # Getting the type of 'self' (line 1714)
        self_29688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 14), 'self')
        # Obtaining the member '_triangulation' of a type (line 1714)
        _triangulation_29689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1714, 14), self_29688, '_triangulation')
        # Assigning a type to the variable 'tri' (line 1714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1714, 8), 'tri', _triangulation_29689)
        
        # Assigning a Call to a Name (line 1715):
        
        # Assigning a Call to a Name (line 1715):
        
        # Call to get_masked_triangles(...): (line 1715)
        # Processing the call keyword arguments (line 1715)
        kwargs_29692 = {}
        # Getting the type of 'tri' (line 1715)
        tri_29690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 20), 'tri', False)
        # Obtaining the member 'get_masked_triangles' of a type (line 1715)
        get_masked_triangles_29691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1715, 20), tri_29690, 'get_masked_triangles')
        # Calling get_masked_triangles(args, kwargs) (line 1715)
        get_masked_triangles_call_result_29693 = invoke(stypy.reporting.localization.Localization(__file__, 1715, 20), get_masked_triangles_29691, *[], **kwargs_29692)
        
        # Assigning a type to the variable 'triangles' (line 1715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1715, 8), 'triangles', get_masked_triangles_call_result_29693)
        
        # Assigning a Call to a Name (line 1717):
        
        # Assigning a Call to a Name (line 1717):
        
        # Call to concatenate(...): (line 1717)
        # Processing the call arguments (line 1717)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1717)
        tuple_29696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1717, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1717)
        # Adding element type (line 1717)
        
        # Obtaining the type of the subscript
        Ellipsis_29697 = Ellipsis
        # Getting the type of 'np' (line 1717)
        np_29698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 54), 'np', False)
        # Obtaining the member 'newaxis' of a type (line 1717)
        newaxis_29699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1717, 54), np_29698, 'newaxis')
        
        # Obtaining the type of the subscript
        # Getting the type of 'triangles' (line 1717)
        triangles_29700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 38), 'triangles', False)
        # Getting the type of 'tri' (line 1717)
        tri_29701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 32), 'tri', False)
        # Obtaining the member 'x' of a type (line 1717)
        x_29702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1717, 32), tri_29701, 'x')
        # Obtaining the member '__getitem__' of a type (line 1717)
        getitem___29703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1717, 32), x_29702, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1717)
        subscript_call_result_29704 = invoke(stypy.reporting.localization.Localization(__file__, 1717, 32), getitem___29703, triangles_29700)
        
        # Obtaining the member '__getitem__' of a type (line 1717)
        getitem___29705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1717, 32), subscript_call_result_29704, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1717)
        subscript_call_result_29706 = invoke(stypy.reporting.localization.Localization(__file__, 1717, 32), getitem___29705, (Ellipsis_29697, newaxis_29699))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1717, 32), tuple_29696, subscript_call_result_29706)
        # Adding element type (line 1717)
        
        # Obtaining the type of the subscript
        Ellipsis_29707 = Ellipsis
        # Getting the type of 'np' (line 1718)
        np_29708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 54), 'np', False)
        # Obtaining the member 'newaxis' of a type (line 1718)
        newaxis_29709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1718, 54), np_29708, 'newaxis')
        
        # Obtaining the type of the subscript
        # Getting the type of 'triangles' (line 1718)
        triangles_29710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 38), 'triangles', False)
        # Getting the type of 'tri' (line 1718)
        tri_29711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 32), 'tri', False)
        # Obtaining the member 'y' of a type (line 1718)
        y_29712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1718, 32), tri_29711, 'y')
        # Obtaining the member '__getitem__' of a type (line 1718)
        getitem___29713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1718, 32), y_29712, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1718)
        subscript_call_result_29714 = invoke(stypy.reporting.localization.Localization(__file__, 1718, 32), getitem___29713, triangles_29710)
        
        # Obtaining the member '__getitem__' of a type (line 1718)
        getitem___29715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1718, 32), subscript_call_result_29714, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1718)
        subscript_call_result_29716 = invoke(stypy.reporting.localization.Localization(__file__, 1718, 32), getitem___29715, (Ellipsis_29707, newaxis_29709))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1717, 32), tuple_29696, subscript_call_result_29716)
        
        # Processing the call keyword arguments (line 1717)
        int_29717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1718, 73), 'int')
        keyword_29718 = int_29717
        kwargs_29719 = {'axis': keyword_29718}
        # Getting the type of 'np' (line 1717)
        np_29694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 16), 'np', False)
        # Obtaining the member 'concatenate' of a type (line 1717)
        concatenate_29695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1717, 16), np_29694, 'concatenate')
        # Calling concatenate(args, kwargs) (line 1717)
        concatenate_call_result_29720 = invoke(stypy.reporting.localization.Localization(__file__, 1717, 16), concatenate_29695, *[tuple_29696], **kwargs_29719)
        
        # Assigning a type to the variable 'verts' (line 1717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1717, 8), 'verts', concatenate_call_result_29720)
        
        # Call to update_scalarmappable(...): (line 1720)
        # Processing the call keyword arguments (line 1720)
        kwargs_29723 = {}
        # Getting the type of 'self' (line 1720)
        self_29721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 8), 'self', False)
        # Obtaining the member 'update_scalarmappable' of a type (line 1720)
        update_scalarmappable_29722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1720, 8), self_29721, 'update_scalarmappable')
        # Calling update_scalarmappable(args, kwargs) (line 1720)
        update_scalarmappable_call_result_29724 = invoke(stypy.reporting.localization.Localization(__file__, 1720, 8), update_scalarmappable_29722, *[], **kwargs_29723)
        
        
        # Assigning a Subscript to a Name (line 1721):
        
        # Assigning a Subscript to a Name (line 1721):
        
        # Obtaining the type of the subscript
        # Getting the type of 'triangles' (line 1721)
        triangles_29725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 34), 'triangles')
        # Getting the type of 'self' (line 1721)
        self_29726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 17), 'self')
        # Obtaining the member '_facecolors' of a type (line 1721)
        _facecolors_29727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1721, 17), self_29726, '_facecolors')
        # Obtaining the member '__getitem__' of a type (line 1721)
        getitem___29728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1721, 17), _facecolors_29727, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1721)
        subscript_call_result_29729 = invoke(stypy.reporting.localization.Localization(__file__, 1721, 17), getitem___29728, triangles_29725)
        
        # Assigning a type to the variable 'colors' (line 1721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1721, 8), 'colors', subscript_call_result_29729)
        
        # Assigning a Call to a Name (line 1723):
        
        # Assigning a Call to a Name (line 1723):
        
        # Call to new_gc(...): (line 1723)
        # Processing the call keyword arguments (line 1723)
        kwargs_29732 = {}
        # Getting the type of 'renderer' (line 1723)
        renderer_29730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 13), 'renderer', False)
        # Obtaining the member 'new_gc' of a type (line 1723)
        new_gc_29731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1723, 13), renderer_29730, 'new_gc')
        # Calling new_gc(args, kwargs) (line 1723)
        new_gc_call_result_29733 = invoke(stypy.reporting.localization.Localization(__file__, 1723, 13), new_gc_29731, *[], **kwargs_29732)
        
        # Assigning a type to the variable 'gc' (line 1723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1723, 8), 'gc', new_gc_call_result_29733)
        
        # Call to _set_gc_clip(...): (line 1724)
        # Processing the call arguments (line 1724)
        # Getting the type of 'gc' (line 1724)
        gc_29736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 26), 'gc', False)
        # Processing the call keyword arguments (line 1724)
        kwargs_29737 = {}
        # Getting the type of 'self' (line 1724)
        self_29734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 8), 'self', False)
        # Obtaining the member '_set_gc_clip' of a type (line 1724)
        _set_gc_clip_29735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1724, 8), self_29734, '_set_gc_clip')
        # Calling _set_gc_clip(args, kwargs) (line 1724)
        _set_gc_clip_call_result_29738 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 8), _set_gc_clip_29735, *[gc_29736], **kwargs_29737)
        
        
        # Call to set_linewidth(...): (line 1725)
        # Processing the call arguments (line 1725)
        
        # Obtaining the type of the subscript
        int_29741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1725, 46), 'int')
        
        # Call to get_linewidth(...): (line 1725)
        # Processing the call keyword arguments (line 1725)
        kwargs_29744 = {}
        # Getting the type of 'self' (line 1725)
        self_29742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 25), 'self', False)
        # Obtaining the member 'get_linewidth' of a type (line 1725)
        get_linewidth_29743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1725, 25), self_29742, 'get_linewidth')
        # Calling get_linewidth(args, kwargs) (line 1725)
        get_linewidth_call_result_29745 = invoke(stypy.reporting.localization.Localization(__file__, 1725, 25), get_linewidth_29743, *[], **kwargs_29744)
        
        # Obtaining the member '__getitem__' of a type (line 1725)
        getitem___29746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1725, 25), get_linewidth_call_result_29745, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1725)
        subscript_call_result_29747 = invoke(stypy.reporting.localization.Localization(__file__, 1725, 25), getitem___29746, int_29741)
        
        # Processing the call keyword arguments (line 1725)
        kwargs_29748 = {}
        # Getting the type of 'gc' (line 1725)
        gc_29739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 8), 'gc', False)
        # Obtaining the member 'set_linewidth' of a type (line 1725)
        set_linewidth_29740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1725, 8), gc_29739, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 1725)
        set_linewidth_call_result_29749 = invoke(stypy.reporting.localization.Localization(__file__, 1725, 8), set_linewidth_29740, *[subscript_call_result_29747], **kwargs_29748)
        
        
        # Call to draw_gouraud_triangles(...): (line 1726)
        # Processing the call arguments (line 1726)
        # Getting the type of 'gc' (line 1726)
        gc_29752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 40), 'gc', False)
        # Getting the type of 'verts' (line 1726)
        verts_29753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 44), 'verts', False)
        # Getting the type of 'colors' (line 1726)
        colors_29754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 51), 'colors', False)
        
        # Call to frozen(...): (line 1726)
        # Processing the call keyword arguments (line 1726)
        kwargs_29757 = {}
        # Getting the type of 'transform' (line 1726)
        transform_29755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 59), 'transform', False)
        # Obtaining the member 'frozen' of a type (line 1726)
        frozen_29756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1726, 59), transform_29755, 'frozen')
        # Calling frozen(args, kwargs) (line 1726)
        frozen_call_result_29758 = invoke(stypy.reporting.localization.Localization(__file__, 1726, 59), frozen_29756, *[], **kwargs_29757)
        
        # Processing the call keyword arguments (line 1726)
        kwargs_29759 = {}
        # Getting the type of 'renderer' (line 1726)
        renderer_29750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 8), 'renderer', False)
        # Obtaining the member 'draw_gouraud_triangles' of a type (line 1726)
        draw_gouraud_triangles_29751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1726, 8), renderer_29750, 'draw_gouraud_triangles')
        # Calling draw_gouraud_triangles(args, kwargs) (line 1726)
        draw_gouraud_triangles_call_result_29760 = invoke(stypy.reporting.localization.Localization(__file__, 1726, 8), draw_gouraud_triangles_29751, *[gc_29752, verts_29753, colors_29754, frozen_call_result_29758], **kwargs_29759)
        
        
        # Call to restore(...): (line 1727)
        # Processing the call keyword arguments (line 1727)
        kwargs_29763 = {}
        # Getting the type of 'gc' (line 1727)
        gc_29761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 8), 'gc', False)
        # Obtaining the member 'restore' of a type (line 1727)
        restore_29762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1727, 8), gc_29761, 'restore')
        # Calling restore(args, kwargs) (line 1727)
        restore_call_result_29764 = invoke(stypy.reporting.localization.Localization(__file__, 1727, 8), restore_29762, *[], **kwargs_29763)
        
        
        # Call to close_group(...): (line 1728)
        # Processing the call arguments (line 1728)
        # Getting the type of 'self' (line 1728)
        self_29767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 29), 'self', False)
        # Obtaining the member '__class__' of a type (line 1728)
        class___29768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1728, 29), self_29767, '__class__')
        # Obtaining the member '__name__' of a type (line 1728)
        name___29769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1728, 29), class___29768, '__name__')
        # Processing the call keyword arguments (line 1728)
        kwargs_29770 = {}
        # Getting the type of 'renderer' (line 1728)
        renderer_29765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 8), 'renderer', False)
        # Obtaining the member 'close_group' of a type (line 1728)
        close_group_29766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1728, 8), renderer_29765, 'close_group')
        # Calling close_group(args, kwargs) (line 1728)
        close_group_call_result_29771 = invoke(stypy.reporting.localization.Localization(__file__, 1728, 8), close_group_29766, *[name___29769], **kwargs_29770)
        
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1706)
        stypy_return_type_29772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29772)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_29772


# Assigning a type to the variable 'TriMesh' (line 1661)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1661, 0), 'TriMesh', TriMesh)
# Declaration of the 'QuadMesh' class
# Getting the type of 'Collection' (line 1731)
Collection_29773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 15), 'Collection')

class QuadMesh(Collection_29773, ):
    unicode_29774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1761, (-1)), 'unicode', u'\n    Class for the efficient drawing of a quadrilateral mesh.\n\n    A quadrilateral mesh consists of a grid of vertices. The\n    dimensions of this array are (*meshWidth* + 1, *meshHeight* +\n    1). Each vertex in the mesh has a different set of "mesh\n    coordinates" representing its position in the topology of the\n    mesh. For any values (*m*, *n*) such that 0 <= *m* <= *meshWidth*\n    and 0 <= *n* <= *meshHeight*, the vertices at mesh coordinates\n    (*m*, *n*), (*m*, *n* + 1), (*m* + 1, *n* + 1), and (*m* + 1, *n*)\n    form one of the quadrilaterals in the mesh. There are thus\n    (*meshWidth* * *meshHeight*) quadrilaterals in the mesh.  The mesh\n    need not be regular and the polygons need not be convex.\n\n    A quadrilateral mesh is represented by a (2 x ((*meshWidth* + 1) *\n    (*meshHeight* + 1))) numpy array *coordinates*, where each row is\n    the *x* and *y* coordinates of one of the vertices.  To define the\n    function that maps from a data point to its corresponding color,\n    use the :meth:`set_cmap` method.  Each of these arrays is indexed in\n    row-major order by the mesh coordinates of the vertex (or the mesh\n    coordinates of the lower left vertex, in the case of the\n    colors).\n\n    For example, the first entry in *coordinates* is the\n    coordinates of the vertex at mesh coordinates (0, 0), then the one\n    at (0, 1), then at (0, 2) .. (0, meshWidth), (1, 0), (1, 1), and\n    so on.\n\n    *shading* may be \'flat\', or \'gouraud\'\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 1763)
        True_29775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 29), 'True')
        unicode_29776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1763, 43), 'unicode', u'flat')
        defaults = [True_29775, unicode_29776]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1762, 4, False)
        # Assigning a type to the variable 'self' (line 1763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'QuadMesh.__init__', ['meshWidth', 'meshHeight', 'coordinates', 'antialiased', 'shading'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['meshWidth', 'meshHeight', 'coordinates', 'antialiased', 'shading'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1764)
        # Processing the call arguments (line 1764)
        # Getting the type of 'self' (line 1764)
        self_29779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 28), 'self', False)
        # Processing the call keyword arguments (line 1764)
        # Getting the type of 'kwargs' (line 1764)
        kwargs_29780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 36), 'kwargs', False)
        kwargs_29781 = {'kwargs_29780': kwargs_29780}
        # Getting the type of 'Collection' (line 1764)
        Collection_29777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 8), 'Collection', False)
        # Obtaining the member '__init__' of a type (line 1764)
        init___29778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1764, 8), Collection_29777, '__init__')
        # Calling __init__(args, kwargs) (line 1764)
        init___call_result_29782 = invoke(stypy.reporting.localization.Localization(__file__, 1764, 8), init___29778, *[self_29779], **kwargs_29781)
        
        
        # Assigning a Name to a Attribute (line 1765):
        
        # Assigning a Name to a Attribute (line 1765):
        # Getting the type of 'meshWidth' (line 1765)
        meshWidth_29783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1765, 26), 'meshWidth')
        # Getting the type of 'self' (line 1765)
        self_29784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1765, 8), 'self')
        # Setting the type of the member '_meshWidth' of a type (line 1765)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1765, 8), self_29784, '_meshWidth', meshWidth_29783)
        
        # Assigning a Name to a Attribute (line 1766):
        
        # Assigning a Name to a Attribute (line 1766):
        # Getting the type of 'meshHeight' (line 1766)
        meshHeight_29785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 27), 'meshHeight')
        # Getting the type of 'self' (line 1766)
        self_29786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 8), 'self')
        # Setting the type of the member '_meshHeight' of a type (line 1766)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1766, 8), self_29786, '_meshHeight', meshHeight_29785)
        
        # Assigning a Call to a Attribute (line 1768):
        
        # Assigning a Call to a Attribute (line 1768):
        
        # Call to reshape(...): (line 1768)
        # Processing the call arguments (line 1768)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1769)
        tuple_29794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1769, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1769)
        # Adding element type (line 1769)
        # Getting the type of 'meshHeight' (line 1769)
        meshHeight_29795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1769, 13), 'meshHeight', False)
        int_29796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1769, 26), 'int')
        # Applying the binary operator '+' (line 1769)
        result_add_29797 = python_operator(stypy.reporting.localization.Localization(__file__, 1769, 13), '+', meshHeight_29795, int_29796)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1769, 13), tuple_29794, result_add_29797)
        # Adding element type (line 1769)
        # Getting the type of 'meshWidth' (line 1769)
        meshWidth_29798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1769, 29), 'meshWidth', False)
        int_29799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1769, 41), 'int')
        # Applying the binary operator '+' (line 1769)
        result_add_29800 = python_operator(stypy.reporting.localization.Localization(__file__, 1769, 29), '+', meshWidth_29798, int_29799)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1769, 13), tuple_29794, result_add_29800)
        # Adding element type (line 1769)
        int_29801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1769, 44), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1769, 13), tuple_29794, int_29801)
        
        # Processing the call keyword arguments (line 1768)
        kwargs_29802 = {}
        
        # Call to asarray(...): (line 1768)
        # Processing the call arguments (line 1768)
        # Getting the type of 'coordinates' (line 1768)
        coordinates_29789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 39), 'coordinates', False)
        # Getting the type of 'float' (line 1768)
        float_29790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 52), 'float', False)
        # Processing the call keyword arguments (line 1768)
        kwargs_29791 = {}
        # Getting the type of 'np' (line 1768)
        np_29787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 28), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1768)
        asarray_29788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1768, 28), np_29787, 'asarray')
        # Calling asarray(args, kwargs) (line 1768)
        asarray_call_result_29792 = invoke(stypy.reporting.localization.Localization(__file__, 1768, 28), asarray_29788, *[coordinates_29789, float_29790], **kwargs_29791)
        
        # Obtaining the member 'reshape' of a type (line 1768)
        reshape_29793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1768, 28), asarray_call_result_29792, 'reshape')
        # Calling reshape(args, kwargs) (line 1768)
        reshape_call_result_29803 = invoke(stypy.reporting.localization.Localization(__file__, 1768, 28), reshape_29793, *[tuple_29794], **kwargs_29802)
        
        # Getting the type of 'self' (line 1768)
        self_29804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 8), 'self')
        # Setting the type of the member '_coordinates' of a type (line 1768)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1768, 8), self_29804, '_coordinates', reshape_call_result_29803)
        
        # Assigning a Name to a Attribute (line 1770):
        
        # Assigning a Name to a Attribute (line 1770):
        # Getting the type of 'antialiased' (line 1770)
        antialiased_29805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 28), 'antialiased')
        # Getting the type of 'self' (line 1770)
        self_29806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 8), 'self')
        # Setting the type of the member '_antialiased' of a type (line 1770)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1770, 8), self_29806, '_antialiased', antialiased_29805)
        
        # Assigning a Name to a Attribute (line 1771):
        
        # Assigning a Name to a Attribute (line 1771):
        # Getting the type of 'shading' (line 1771)
        shading_29807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 24), 'shading')
        # Getting the type of 'self' (line 1771)
        self_29808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 8), 'self')
        # Setting the type of the member '_shading' of a type (line 1771)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 8), self_29808, '_shading', shading_29807)
        
        # Assigning a Call to a Attribute (line 1773):
        
        # Assigning a Call to a Attribute (line 1773):
        
        # Call to unit(...): (line 1773)
        # Processing the call keyword arguments (line 1773)
        kwargs_29812 = {}
        # Getting the type of 'transforms' (line 1773)
        transforms_29809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 21), 'transforms', False)
        # Obtaining the member 'Bbox' of a type (line 1773)
        Bbox_29810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 21), transforms_29809, 'Bbox')
        # Obtaining the member 'unit' of a type (line 1773)
        unit_29811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 21), Bbox_29810, 'unit')
        # Calling unit(args, kwargs) (line 1773)
        unit_call_result_29813 = invoke(stypy.reporting.localization.Localization(__file__, 1773, 21), unit_29811, *[], **kwargs_29812)
        
        # Getting the type of 'self' (line 1773)
        self_29814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 8), 'self')
        # Setting the type of the member '_bbox' of a type (line 1773)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 8), self_29814, '_bbox', unit_call_result_29813)
        
        # Call to update_from_data_xy(...): (line 1774)
        # Processing the call arguments (line 1774)
        
        # Call to reshape(...): (line 1774)
        # Processing the call arguments (line 1774)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1775)
        tuple_29820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1775, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1775)
        # Adding element type (line 1775)
        # Getting the type of 'meshWidth' (line 1775)
        meshWidth_29821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 14), 'meshWidth', False)
        int_29822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1775, 26), 'int')
        # Applying the binary operator '+' (line 1775)
        result_add_29823 = python_operator(stypy.reporting.localization.Localization(__file__, 1775, 14), '+', meshWidth_29821, int_29822)
        
        # Getting the type of 'meshHeight' (line 1775)
        meshHeight_29824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 32), 'meshHeight', False)
        int_29825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1775, 45), 'int')
        # Applying the binary operator '+' (line 1775)
        result_add_29826 = python_operator(stypy.reporting.localization.Localization(__file__, 1775, 32), '+', meshHeight_29824, int_29825)
        
        # Applying the binary operator '*' (line 1775)
        result_mul_29827 = python_operator(stypy.reporting.localization.Localization(__file__, 1775, 13), '*', result_add_29823, result_add_29826)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1775, 13), tuple_29820, result_mul_29827)
        # Adding element type (line 1775)
        int_29828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1775, 49), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1775, 13), tuple_29820, int_29828)
        
        # Processing the call keyword arguments (line 1774)
        kwargs_29829 = {}
        # Getting the type of 'coordinates' (line 1774)
        coordinates_29818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 39), 'coordinates', False)
        # Obtaining the member 'reshape' of a type (line 1774)
        reshape_29819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1774, 39), coordinates_29818, 'reshape')
        # Calling reshape(args, kwargs) (line 1774)
        reshape_call_result_29830 = invoke(stypy.reporting.localization.Localization(__file__, 1774, 39), reshape_29819, *[tuple_29820], **kwargs_29829)
        
        # Processing the call keyword arguments (line 1774)
        kwargs_29831 = {}
        # Getting the type of 'self' (line 1774)
        self_29815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 8), 'self', False)
        # Obtaining the member '_bbox' of a type (line 1774)
        _bbox_29816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1774, 8), self_29815, '_bbox')
        # Obtaining the member 'update_from_data_xy' of a type (line 1774)
        update_from_data_xy_29817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1774, 8), _bbox_29816, 'update_from_data_xy')
        # Calling update_from_data_xy(args, kwargs) (line 1774)
        update_from_data_xy_call_result_29832 = invoke(stypy.reporting.localization.Localization(__file__, 1774, 8), update_from_data_xy_29817, *[reshape_call_result_29830], **kwargs_29831)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_paths'
        module_type_store = module_type_store.open_function_context('get_paths', 1777, 4, False)
        # Assigning a type to the variable 'self' (line 1778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1778, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        QuadMesh.get_paths.__dict__.__setitem__('stypy_localization', localization)
        QuadMesh.get_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        QuadMesh.get_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        QuadMesh.get_paths.__dict__.__setitem__('stypy_function_name', 'QuadMesh.get_paths')
        QuadMesh.get_paths.__dict__.__setitem__('stypy_param_names_list', [])
        QuadMesh.get_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        QuadMesh.get_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        QuadMesh.get_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        QuadMesh.get_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        QuadMesh.get_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        QuadMesh.get_paths.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'QuadMesh.get_paths', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_paths', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_paths(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 1778)
        # Getting the type of 'self' (line 1778)
        self_29833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 11), 'self')
        # Obtaining the member '_paths' of a type (line 1778)
        _paths_29834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1778, 11), self_29833, '_paths')
        # Getting the type of 'None' (line 1778)
        None_29835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 26), 'None')
        
        (may_be_29836, more_types_in_union_29837) = may_be_none(_paths_29834, None_29835)

        if may_be_29836:

            if more_types_in_union_29837:
                # Runtime conditional SSA (line 1778)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_paths(...): (line 1779)
            # Processing the call keyword arguments (line 1779)
            kwargs_29840 = {}
            # Getting the type of 'self' (line 1779)
            self_29838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 12), 'self', False)
            # Obtaining the member 'set_paths' of a type (line 1779)
            set_paths_29839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1779, 12), self_29838, 'set_paths')
            # Calling set_paths(args, kwargs) (line 1779)
            set_paths_call_result_29841 = invoke(stypy.reporting.localization.Localization(__file__, 1779, 12), set_paths_29839, *[], **kwargs_29840)
            

            if more_types_in_union_29837:
                # SSA join for if statement (line 1778)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 1780)
        self_29842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 15), 'self')
        # Obtaining the member '_paths' of a type (line 1780)
        _paths_29843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1780, 15), self_29842, '_paths')
        # Assigning a type to the variable 'stypy_return_type' (line 1780)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1780, 8), 'stypy_return_type', _paths_29843)
        
        # ################# End of 'get_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 1777)
        stypy_return_type_29844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29844)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_paths'
        return stypy_return_type_29844


    @norecursion
    def set_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_paths'
        module_type_store = module_type_store.open_function_context('set_paths', 1782, 4, False)
        # Assigning a type to the variable 'self' (line 1783)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1783, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        QuadMesh.set_paths.__dict__.__setitem__('stypy_localization', localization)
        QuadMesh.set_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        QuadMesh.set_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        QuadMesh.set_paths.__dict__.__setitem__('stypy_function_name', 'QuadMesh.set_paths')
        QuadMesh.set_paths.__dict__.__setitem__('stypy_param_names_list', [])
        QuadMesh.set_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        QuadMesh.set_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        QuadMesh.set_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        QuadMesh.set_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        QuadMesh.set_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        QuadMesh.set_paths.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'QuadMesh.set_paths', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_paths', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_paths(...)' code ##################

        
        # Assigning a Call to a Attribute (line 1783):
        
        # Assigning a Call to a Attribute (line 1783):
        
        # Call to convert_mesh_to_paths(...): (line 1783)
        # Processing the call arguments (line 1783)
        # Getting the type of 'self' (line 1784)
        self_29847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 12), 'self', False)
        # Obtaining the member '_meshWidth' of a type (line 1784)
        _meshWidth_29848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 12), self_29847, '_meshWidth')
        # Getting the type of 'self' (line 1784)
        self_29849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 29), 'self', False)
        # Obtaining the member '_meshHeight' of a type (line 1784)
        _meshHeight_29850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 29), self_29849, '_meshHeight')
        # Getting the type of 'self' (line 1784)
        self_29851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 47), 'self', False)
        # Obtaining the member '_coordinates' of a type (line 1784)
        _coordinates_29852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 47), self_29851, '_coordinates')
        # Processing the call keyword arguments (line 1783)
        kwargs_29853 = {}
        # Getting the type of 'self' (line 1783)
        self_29845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 22), 'self', False)
        # Obtaining the member 'convert_mesh_to_paths' of a type (line 1783)
        convert_mesh_to_paths_29846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1783, 22), self_29845, 'convert_mesh_to_paths')
        # Calling convert_mesh_to_paths(args, kwargs) (line 1783)
        convert_mesh_to_paths_call_result_29854 = invoke(stypy.reporting.localization.Localization(__file__, 1783, 22), convert_mesh_to_paths_29846, *[_meshWidth_29848, _meshHeight_29850, _coordinates_29852], **kwargs_29853)
        
        # Getting the type of 'self' (line 1783)
        self_29855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 8), 'self')
        # Setting the type of the member '_paths' of a type (line 1783)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1783, 8), self_29855, '_paths', convert_mesh_to_paths_call_result_29854)
        
        # Assigning a Name to a Attribute (line 1785):
        
        # Assigning a Name to a Attribute (line 1785):
        # Getting the type of 'True' (line 1785)
        True_29856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 21), 'True')
        # Getting the type of 'self' (line 1785)
        self_29857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1785)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1785, 8), self_29857, 'stale', True_29856)
        
        # ################# End of 'set_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 1782)
        stypy_return_type_29858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29858)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_paths'
        return stypy_return_type_29858


    @norecursion
    def get_datalim(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_datalim'
        module_type_store = module_type_store.open_function_context('get_datalim', 1787, 4, False)
        # Assigning a type to the variable 'self' (line 1788)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1788, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        QuadMesh.get_datalim.__dict__.__setitem__('stypy_localization', localization)
        QuadMesh.get_datalim.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        QuadMesh.get_datalim.__dict__.__setitem__('stypy_type_store', module_type_store)
        QuadMesh.get_datalim.__dict__.__setitem__('stypy_function_name', 'QuadMesh.get_datalim')
        QuadMesh.get_datalim.__dict__.__setitem__('stypy_param_names_list', ['transData'])
        QuadMesh.get_datalim.__dict__.__setitem__('stypy_varargs_param_name', None)
        QuadMesh.get_datalim.__dict__.__setitem__('stypy_kwargs_param_name', None)
        QuadMesh.get_datalim.__dict__.__setitem__('stypy_call_defaults', defaults)
        QuadMesh.get_datalim.__dict__.__setitem__('stypy_call_varargs', varargs)
        QuadMesh.get_datalim.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        QuadMesh.get_datalim.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'QuadMesh.get_datalim', ['transData'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_datalim', localization, ['transData'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_datalim(...)' code ##################

        
        # Call to transform_bbox(...): (line 1788)
        # Processing the call arguments (line 1788)
        # Getting the type of 'self' (line 1788)
        self_29866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 65), 'self', False)
        # Obtaining the member '_bbox' of a type (line 1788)
        _bbox_29867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1788, 65), self_29866, '_bbox')
        # Processing the call keyword arguments (line 1788)
        kwargs_29868 = {}
        
        # Call to get_transform(...): (line 1788)
        # Processing the call keyword arguments (line 1788)
        kwargs_29861 = {}
        # Getting the type of 'self' (line 1788)
        self_29859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 16), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 1788)
        get_transform_29860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1788, 16), self_29859, 'get_transform')
        # Calling get_transform(args, kwargs) (line 1788)
        get_transform_call_result_29862 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 16), get_transform_29860, *[], **kwargs_29861)
        
        # Getting the type of 'transData' (line 1788)
        transData_29863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 39), 'transData', False)
        # Applying the binary operator '-' (line 1788)
        result_sub_29864 = python_operator(stypy.reporting.localization.Localization(__file__, 1788, 16), '-', get_transform_call_result_29862, transData_29863)
        
        # Obtaining the member 'transform_bbox' of a type (line 1788)
        transform_bbox_29865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1788, 16), result_sub_29864, 'transform_bbox')
        # Calling transform_bbox(args, kwargs) (line 1788)
        transform_bbox_call_result_29869 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 16), transform_bbox_29865, *[_bbox_29867], **kwargs_29868)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1788)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1788, 8), 'stypy_return_type', transform_bbox_call_result_29869)
        
        # ################# End of 'get_datalim(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_datalim' in the type store
        # Getting the type of 'stypy_return_type' (line 1787)
        stypy_return_type_29870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29870)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_datalim'
        return stypy_return_type_29870


    @staticmethod
    @norecursion
    def convert_mesh_to_paths(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'convert_mesh_to_paths'
        module_type_store = module_type_store.open_function_context('convert_mesh_to_paths', 1790, 4, False)
        
        # Passed parameters checking function
        QuadMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_localization', localization)
        QuadMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_type_of_self', None)
        QuadMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        QuadMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_function_name', 'convert_mesh_to_paths')
        QuadMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_param_names_list', ['meshWidth', 'meshHeight', 'coordinates'])
        QuadMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        QuadMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        QuadMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        QuadMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        QuadMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        QuadMesh.convert_mesh_to_paths.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, None, module_type_store, 'convert_mesh_to_paths', ['meshWidth', 'meshHeight', 'coordinates'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'convert_mesh_to_paths', localization, ['meshHeight', 'coordinates'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'convert_mesh_to_paths(...)' code ##################

        unicode_29871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1798, (-1)), 'unicode', u'\n        Converts a given mesh into a sequence of\n        :class:`matplotlib.path.Path` objects for easier rendering by\n        backends that do not directly support quadmeshes.\n\n        This function is primarily of use to backend implementers.\n        ')
        
        # Assigning a Attribute to a Name (line 1799):
        
        # Assigning a Attribute to a Name (line 1799):
        # Getting the type of 'mpath' (line 1799)
        mpath_29872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 15), 'mpath')
        # Obtaining the member 'Path' of a type (line 1799)
        Path_29873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1799, 15), mpath_29872, 'Path')
        # Assigning a type to the variable 'Path' (line 1799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1799, 8), 'Path', Path_29873)
        
        
        # Call to isinstance(...): (line 1801)
        # Processing the call arguments (line 1801)
        # Getting the type of 'coordinates' (line 1801)
        coordinates_29875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 22), 'coordinates', False)
        # Getting the type of 'np' (line 1801)
        np_29876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 35), 'np', False)
        # Obtaining the member 'ma' of a type (line 1801)
        ma_29877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1801, 35), np_29876, 'ma')
        # Obtaining the member 'MaskedArray' of a type (line 1801)
        MaskedArray_29878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1801, 35), ma_29877, 'MaskedArray')
        # Processing the call keyword arguments (line 1801)
        kwargs_29879 = {}
        # Getting the type of 'isinstance' (line 1801)
        isinstance_29874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1801)
        isinstance_call_result_29880 = invoke(stypy.reporting.localization.Localization(__file__, 1801, 11), isinstance_29874, *[coordinates_29875, MaskedArray_29878], **kwargs_29879)
        
        # Testing the type of an if condition (line 1801)
        if_condition_29881 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1801, 8), isinstance_call_result_29880)
        # Assigning a type to the variable 'if_condition_29881' (line 1801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1801, 8), 'if_condition_29881', if_condition_29881)
        # SSA begins for if statement (line 1801)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1802):
        
        # Assigning a Attribute to a Name (line 1802):
        # Getting the type of 'coordinates' (line 1802)
        coordinates_29882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 16), 'coordinates')
        # Obtaining the member 'data' of a type (line 1802)
        data_29883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1802, 16), coordinates_29882, 'data')
        # Assigning a type to the variable 'c' (line 1802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1802, 12), 'c', data_29883)
        # SSA branch for the else part of an if statement (line 1801)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1804):
        
        # Assigning a Name to a Name (line 1804):
        # Getting the type of 'coordinates' (line 1804)
        coordinates_29884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 16), 'coordinates')
        # Assigning a type to the variable 'c' (line 1804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1804, 12), 'c', coordinates_29884)
        # SSA join for if statement (line 1801)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1806):
        
        # Assigning a Call to a Name (line 1806):
        
        # Call to concatenate(...): (line 1806)
        # Processing the call arguments (line 1806)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1807)
        tuple_29887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1807)
        # Adding element type (line 1807)
        
        # Obtaining the type of the subscript
        int_29888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 22), 'int')
        int_29889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 24), 'int')
        slice_29890 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1807, 20), int_29888, int_29889, None)
        int_29891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 28), 'int')
        int_29892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 30), 'int')
        slice_29893 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1807, 20), int_29891, int_29892, None)
        # Getting the type of 'c' (line 1807)
        c_29894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 20), 'c', False)
        # Obtaining the member '__getitem__' of a type (line 1807)
        getitem___29895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1807, 20), c_29894, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1807)
        subscript_call_result_29896 = invoke(stypy.reporting.localization.Localization(__file__, 1807, 20), getitem___29895, (slice_29890, slice_29893))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1807, 20), tuple_29887, subscript_call_result_29896)
        # Adding element type (line 1807)
        
        # Obtaining the type of the subscript
        int_29897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1808, 22), 'int')
        int_29898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1808, 24), 'int')
        slice_29899 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1808, 20), int_29897, int_29898, None)
        int_29900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1808, 28), 'int')
        slice_29901 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1808, 20), int_29900, None, None)
        # Getting the type of 'c' (line 1808)
        c_29902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 20), 'c', False)
        # Obtaining the member '__getitem__' of a type (line 1808)
        getitem___29903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1808, 20), c_29902, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1808)
        subscript_call_result_29904 = invoke(stypy.reporting.localization.Localization(__file__, 1808, 20), getitem___29903, (slice_29899, slice_29901))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1807, 20), tuple_29887, subscript_call_result_29904)
        # Adding element type (line 1807)
        
        # Obtaining the type of the subscript
        int_29905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 22), 'int')
        slice_29906 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1809, 20), int_29905, None, None)
        int_29907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 26), 'int')
        slice_29908 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1809, 20), int_29907, None, None)
        # Getting the type of 'c' (line 1809)
        c_29909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 20), 'c', False)
        # Obtaining the member '__getitem__' of a type (line 1809)
        getitem___29910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1809, 20), c_29909, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1809)
        subscript_call_result_29911 = invoke(stypy.reporting.localization.Localization(__file__, 1809, 20), getitem___29910, (slice_29906, slice_29908))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1807, 20), tuple_29887, subscript_call_result_29911)
        # Adding element type (line 1807)
        
        # Obtaining the type of the subscript
        int_29912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 22), 'int')
        slice_29913 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1810, 20), int_29912, None, None)
        int_29914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 26), 'int')
        int_29915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 28), 'int')
        slice_29916 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1810, 20), int_29914, int_29915, None)
        # Getting the type of 'c' (line 1810)
        c_29917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 20), 'c', False)
        # Obtaining the member '__getitem__' of a type (line 1810)
        getitem___29918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1810, 20), c_29917, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1810)
        subscript_call_result_29919 = invoke(stypy.reporting.localization.Localization(__file__, 1810, 20), getitem___29918, (slice_29913, slice_29916))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1807, 20), tuple_29887, subscript_call_result_29919)
        # Adding element type (line 1807)
        
        # Obtaining the type of the subscript
        int_29920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 22), 'int')
        int_29921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 24), 'int')
        slice_29922 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1811, 20), int_29920, int_29921, None)
        int_29923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 28), 'int')
        int_29924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 30), 'int')
        slice_29925 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1811, 20), int_29923, int_29924, None)
        # Getting the type of 'c' (line 1811)
        c_29926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 20), 'c', False)
        # Obtaining the member '__getitem__' of a type (line 1811)
        getitem___29927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1811, 20), c_29926, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1811)
        subscript_call_result_29928 = invoke(stypy.reporting.localization.Localization(__file__, 1811, 20), getitem___29927, (slice_29922, slice_29925))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1807, 20), tuple_29887, subscript_call_result_29928)
        
        # Processing the call keyword arguments (line 1806)
        int_29929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1812, 24), 'int')
        keyword_29930 = int_29929
        kwargs_29931 = {'axis': keyword_29930}
        # Getting the type of 'np' (line 1806)
        np_29885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 17), 'np', False)
        # Obtaining the member 'concatenate' of a type (line 1806)
        concatenate_29886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1806, 17), np_29885, 'concatenate')
        # Calling concatenate(args, kwargs) (line 1806)
        concatenate_call_result_29932 = invoke(stypy.reporting.localization.Localization(__file__, 1806, 17), concatenate_29886, *[tuple_29887], **kwargs_29931)
        
        # Assigning a type to the variable 'points' (line 1806)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1806, 8), 'points', concatenate_call_result_29932)
        
        # Assigning a Call to a Name (line 1813):
        
        # Assigning a Call to a Name (line 1813):
        
        # Call to reshape(...): (line 1813)
        # Processing the call arguments (line 1813)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1813)
        tuple_29935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1813, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1813)
        # Adding element type (line 1813)
        # Getting the type of 'meshWidth' (line 1813)
        meshWidth_29936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 33), 'meshWidth', False)
        # Getting the type of 'meshHeight' (line 1813)
        meshHeight_29937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 45), 'meshHeight', False)
        # Applying the binary operator '*' (line 1813)
        result_mul_29938 = python_operator(stypy.reporting.localization.Localization(__file__, 1813, 33), '*', meshWidth_29936, meshHeight_29937)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1813, 33), tuple_29935, result_mul_29938)
        # Adding element type (line 1813)
        int_29939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1813, 57), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1813, 33), tuple_29935, int_29939)
        # Adding element type (line 1813)
        int_29940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1813, 60), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1813, 33), tuple_29935, int_29940)
        
        # Processing the call keyword arguments (line 1813)
        kwargs_29941 = {}
        # Getting the type of 'points' (line 1813)
        points_29933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 17), 'points', False)
        # Obtaining the member 'reshape' of a type (line 1813)
        reshape_29934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1813, 17), points_29933, 'reshape')
        # Calling reshape(args, kwargs) (line 1813)
        reshape_call_result_29942 = invoke(stypy.reporting.localization.Localization(__file__, 1813, 17), reshape_29934, *[tuple_29935], **kwargs_29941)
        
        # Assigning a type to the variable 'points' (line 1813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 8), 'points', reshape_call_result_29942)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'points' (line 1814)
        points_29947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 33), 'points')
        comprehension_29948 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1814, 16), points_29947)
        # Assigning a type to the variable 'x' (line 1814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 16), 'x', comprehension_29948)
        
        # Call to Path(...): (line 1814)
        # Processing the call arguments (line 1814)
        # Getting the type of 'x' (line 1814)
        x_29944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 21), 'x', False)
        # Processing the call keyword arguments (line 1814)
        kwargs_29945 = {}
        # Getting the type of 'Path' (line 1814)
        Path_29943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 16), 'Path', False)
        # Calling Path(args, kwargs) (line 1814)
        Path_call_result_29946 = invoke(stypy.reporting.localization.Localization(__file__, 1814, 16), Path_29943, *[x_29944], **kwargs_29945)
        
        list_29949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1814, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1814, 16), list_29949, Path_call_result_29946)
        # Assigning a type to the variable 'stypy_return_type' (line 1814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 8), 'stypy_return_type', list_29949)
        
        # ################# End of 'convert_mesh_to_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'convert_mesh_to_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 1790)
        stypy_return_type_29950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29950)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'convert_mesh_to_paths'
        return stypy_return_type_29950


    @norecursion
    def convert_mesh_to_triangles(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'convert_mesh_to_triangles'
        module_type_store = module_type_store.open_function_context('convert_mesh_to_triangles', 1816, 4, False)
        # Assigning a type to the variable 'self' (line 1817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1817, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        QuadMesh.convert_mesh_to_triangles.__dict__.__setitem__('stypy_localization', localization)
        QuadMesh.convert_mesh_to_triangles.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        QuadMesh.convert_mesh_to_triangles.__dict__.__setitem__('stypy_type_store', module_type_store)
        QuadMesh.convert_mesh_to_triangles.__dict__.__setitem__('stypy_function_name', 'QuadMesh.convert_mesh_to_triangles')
        QuadMesh.convert_mesh_to_triangles.__dict__.__setitem__('stypy_param_names_list', ['meshWidth', 'meshHeight', 'coordinates'])
        QuadMesh.convert_mesh_to_triangles.__dict__.__setitem__('stypy_varargs_param_name', None)
        QuadMesh.convert_mesh_to_triangles.__dict__.__setitem__('stypy_kwargs_param_name', None)
        QuadMesh.convert_mesh_to_triangles.__dict__.__setitem__('stypy_call_defaults', defaults)
        QuadMesh.convert_mesh_to_triangles.__dict__.__setitem__('stypy_call_varargs', varargs)
        QuadMesh.convert_mesh_to_triangles.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        QuadMesh.convert_mesh_to_triangles.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'QuadMesh.convert_mesh_to_triangles', ['meshWidth', 'meshHeight', 'coordinates'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'convert_mesh_to_triangles', localization, ['meshWidth', 'meshHeight', 'coordinates'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'convert_mesh_to_triangles(...)' code ##################

        unicode_29951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1821, (-1)), 'unicode', u'\n        Converts a given mesh into a sequence of triangles, each point\n        with its own color.  This is useful for experiments using\n        `draw_qouraud_triangle`.\n        ')
        
        
        # Call to isinstance(...): (line 1822)
        # Processing the call arguments (line 1822)
        # Getting the type of 'coordinates' (line 1822)
        coordinates_29953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 22), 'coordinates', False)
        # Getting the type of 'np' (line 1822)
        np_29954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 35), 'np', False)
        # Obtaining the member 'ma' of a type (line 1822)
        ma_29955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1822, 35), np_29954, 'ma')
        # Obtaining the member 'MaskedArray' of a type (line 1822)
        MaskedArray_29956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1822, 35), ma_29955, 'MaskedArray')
        # Processing the call keyword arguments (line 1822)
        kwargs_29957 = {}
        # Getting the type of 'isinstance' (line 1822)
        isinstance_29952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1822)
        isinstance_call_result_29958 = invoke(stypy.reporting.localization.Localization(__file__, 1822, 11), isinstance_29952, *[coordinates_29953, MaskedArray_29956], **kwargs_29957)
        
        # Testing the type of an if condition (line 1822)
        if_condition_29959 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1822, 8), isinstance_call_result_29958)
        # Assigning a type to the variable 'if_condition_29959' (line 1822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 8), 'if_condition_29959', if_condition_29959)
        # SSA begins for if statement (line 1822)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1823):
        
        # Assigning a Attribute to a Name (line 1823):
        # Getting the type of 'coordinates' (line 1823)
        coordinates_29960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 16), 'coordinates')
        # Obtaining the member 'data' of a type (line 1823)
        data_29961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1823, 16), coordinates_29960, 'data')
        # Assigning a type to the variable 'p' (line 1823)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1823, 12), 'p', data_29961)
        # SSA branch for the else part of an if statement (line 1822)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1825):
        
        # Assigning a Name to a Name (line 1825):
        # Getting the type of 'coordinates' (line 1825)
        coordinates_29962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 16), 'coordinates')
        # Assigning a type to the variable 'p' (line 1825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1825, 12), 'p', coordinates_29962)
        # SSA join for if statement (line 1822)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 1827):
        
        # Assigning a Subscript to a Name (line 1827):
        
        # Obtaining the type of the subscript
        int_29963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1827, 17), 'int')
        slice_29964 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1827, 14), None, int_29963, None)
        int_29965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1827, 22), 'int')
        slice_29966 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1827, 14), None, int_29965, None)
        # Getting the type of 'p' (line 1827)
        p_29967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 14), 'p')
        # Obtaining the member '__getitem__' of a type (line 1827)
        getitem___29968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1827, 14), p_29967, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1827)
        subscript_call_result_29969 = invoke(stypy.reporting.localization.Localization(__file__, 1827, 14), getitem___29968, (slice_29964, slice_29966))
        
        # Assigning a type to the variable 'p_a' (line 1827)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1827, 8), 'p_a', subscript_call_result_29969)
        
        # Assigning a Subscript to a Name (line 1828):
        
        # Assigning a Subscript to a Name (line 1828):
        
        # Obtaining the type of the subscript
        int_29970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1828, 17), 'int')
        slice_29971 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1828, 14), None, int_29970, None)
        int_29972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1828, 21), 'int')
        slice_29973 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1828, 14), int_29972, None, None)
        # Getting the type of 'p' (line 1828)
        p_29974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 14), 'p')
        # Obtaining the member '__getitem__' of a type (line 1828)
        getitem___29975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1828, 14), p_29974, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1828)
        subscript_call_result_29976 = invoke(stypy.reporting.localization.Localization(__file__, 1828, 14), getitem___29975, (slice_29971, slice_29973))
        
        # Assigning a type to the variable 'p_b' (line 1828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1828, 8), 'p_b', subscript_call_result_29976)
        
        # Assigning a Subscript to a Name (line 1829):
        
        # Assigning a Subscript to a Name (line 1829):
        
        # Obtaining the type of the subscript
        int_29977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1829, 16), 'int')
        slice_29978 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1829, 14), int_29977, None, None)
        int_29979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1829, 20), 'int')
        slice_29980 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1829, 14), int_29979, None, None)
        # Getting the type of 'p' (line 1829)
        p_29981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 14), 'p')
        # Obtaining the member '__getitem__' of a type (line 1829)
        getitem___29982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1829, 14), p_29981, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1829)
        subscript_call_result_29983 = invoke(stypy.reporting.localization.Localization(__file__, 1829, 14), getitem___29982, (slice_29978, slice_29980))
        
        # Assigning a type to the variable 'p_c' (line 1829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1829, 8), 'p_c', subscript_call_result_29983)
        
        # Assigning a Subscript to a Name (line 1830):
        
        # Assigning a Subscript to a Name (line 1830):
        
        # Obtaining the type of the subscript
        int_29984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1830, 16), 'int')
        slice_29985 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1830, 14), int_29984, None, None)
        int_29986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1830, 21), 'int')
        slice_29987 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1830, 14), None, int_29986, None)
        # Getting the type of 'p' (line 1830)
        p_29988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 14), 'p')
        # Obtaining the member '__getitem__' of a type (line 1830)
        getitem___29989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1830, 14), p_29988, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1830)
        subscript_call_result_29990 = invoke(stypy.reporting.localization.Localization(__file__, 1830, 14), getitem___29989, (slice_29985, slice_29987))
        
        # Assigning a type to the variable 'p_d' (line 1830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1830, 8), 'p_d', subscript_call_result_29990)
        
        # Assigning a BinOp to a Name (line 1831):
        
        # Assigning a BinOp to a Name (line 1831):
        # Getting the type of 'p_a' (line 1831)
        p_a_29991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 20), 'p_a')
        # Getting the type of 'p_b' (line 1831)
        p_b_29992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 26), 'p_b')
        # Applying the binary operator '+' (line 1831)
        result_add_29993 = python_operator(stypy.reporting.localization.Localization(__file__, 1831, 20), '+', p_a_29991, p_b_29992)
        
        # Getting the type of 'p_c' (line 1831)
        p_c_29994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 32), 'p_c')
        # Applying the binary operator '+' (line 1831)
        result_add_29995 = python_operator(stypy.reporting.localization.Localization(__file__, 1831, 30), '+', result_add_29993, p_c_29994)
        
        # Getting the type of 'p_d' (line 1831)
        p_d_29996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 38), 'p_d')
        # Applying the binary operator '+' (line 1831)
        result_add_29997 = python_operator(stypy.reporting.localization.Localization(__file__, 1831, 36), '+', result_add_29995, p_d_29996)
        
        float_29998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1831, 45), 'float')
        # Applying the binary operator 'div' (line 1831)
        result_div_29999 = python_operator(stypy.reporting.localization.Localization(__file__, 1831, 19), 'div', result_add_29997, float_29998)
        
        # Assigning a type to the variable 'p_center' (line 1831)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1831, 8), 'p_center', result_div_29999)
        
        # Assigning a Call to a Name (line 1833):
        
        # Assigning a Call to a Name (line 1833):
        
        # Call to concatenate(...): (line 1833)
        # Processing the call arguments (line 1833)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1834)
        tuple_30002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1834, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1834)
        # Adding element type (line 1834)
        # Getting the type of 'p_a' (line 1834)
        p_a_30003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 16), 'p_a', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 16), tuple_30002, p_a_30003)
        # Adding element type (line 1834)
        # Getting the type of 'p_b' (line 1834)
        p_b_30004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 21), 'p_b', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 16), tuple_30002, p_b_30004)
        # Adding element type (line 1834)
        # Getting the type of 'p_center' (line 1834)
        p_center_30005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 26), 'p_center', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 16), tuple_30002, p_center_30005)
        # Adding element type (line 1834)
        # Getting the type of 'p_b' (line 1835)
        p_b_30006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 16), 'p_b', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 16), tuple_30002, p_b_30006)
        # Adding element type (line 1834)
        # Getting the type of 'p_c' (line 1835)
        p_c_30007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 21), 'p_c', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 16), tuple_30002, p_c_30007)
        # Adding element type (line 1834)
        # Getting the type of 'p_center' (line 1835)
        p_center_30008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 26), 'p_center', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 16), tuple_30002, p_center_30008)
        # Adding element type (line 1834)
        # Getting the type of 'p_c' (line 1836)
        p_c_30009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 16), 'p_c', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 16), tuple_30002, p_c_30009)
        # Adding element type (line 1834)
        # Getting the type of 'p_d' (line 1836)
        p_d_30010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 21), 'p_d', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 16), tuple_30002, p_d_30010)
        # Adding element type (line 1834)
        # Getting the type of 'p_center' (line 1836)
        p_center_30011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 26), 'p_center', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 16), tuple_30002, p_center_30011)
        # Adding element type (line 1834)
        # Getting the type of 'p_d' (line 1837)
        p_d_30012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 16), 'p_d', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 16), tuple_30002, p_d_30012)
        # Adding element type (line 1834)
        # Getting the type of 'p_a' (line 1837)
        p_a_30013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 21), 'p_a', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 16), tuple_30002, p_a_30013)
        # Adding element type (line 1834)
        # Getting the type of 'p_center' (line 1837)
        p_center_30014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 26), 'p_center', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 16), tuple_30002, p_center_30014)
        
        # Processing the call keyword arguments (line 1833)
        int_30015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1838, 20), 'int')
        keyword_30016 = int_30015
        kwargs_30017 = {'axis': keyword_30016}
        # Getting the type of 'np' (line 1833)
        np_30000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 20), 'np', False)
        # Obtaining the member 'concatenate' of a type (line 1833)
        concatenate_30001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1833, 20), np_30000, 'concatenate')
        # Calling concatenate(args, kwargs) (line 1833)
        concatenate_call_result_30018 = invoke(stypy.reporting.localization.Localization(__file__, 1833, 20), concatenate_30001, *[tuple_30002], **kwargs_30017)
        
        # Assigning a type to the variable 'triangles' (line 1833)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1833, 8), 'triangles', concatenate_call_result_30018)
        
        # Assigning a Call to a Name (line 1839):
        
        # Assigning a Call to a Name (line 1839):
        
        # Call to reshape(...): (line 1839)
        # Processing the call arguments (line 1839)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1839)
        tuple_30021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1839, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1839)
        # Adding element type (line 1839)
        # Getting the type of 'meshWidth' (line 1839)
        meshWidth_30022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 39), 'meshWidth', False)
        # Getting the type of 'meshHeight' (line 1839)
        meshHeight_30023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 51), 'meshHeight', False)
        # Applying the binary operator '*' (line 1839)
        result_mul_30024 = python_operator(stypy.reporting.localization.Localization(__file__, 1839, 39), '*', meshWidth_30022, meshHeight_30023)
        
        int_30025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1839, 64), 'int')
        # Applying the binary operator '*' (line 1839)
        result_mul_30026 = python_operator(stypy.reporting.localization.Localization(__file__, 1839, 62), '*', result_mul_30024, int_30025)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1839, 39), tuple_30021, result_mul_30026)
        # Adding element type (line 1839)
        int_30027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1839, 67), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1839, 39), tuple_30021, int_30027)
        # Adding element type (line 1839)
        int_30028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1839, 70), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1839, 39), tuple_30021, int_30028)
        
        # Processing the call keyword arguments (line 1839)
        kwargs_30029 = {}
        # Getting the type of 'triangles' (line 1839)
        triangles_30019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 20), 'triangles', False)
        # Obtaining the member 'reshape' of a type (line 1839)
        reshape_30020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1839, 20), triangles_30019, 'reshape')
        # Calling reshape(args, kwargs) (line 1839)
        reshape_call_result_30030 = invoke(stypy.reporting.localization.Localization(__file__, 1839, 20), reshape_30020, *[tuple_30021], **kwargs_30029)
        
        # Assigning a type to the variable 'triangles' (line 1839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1839, 8), 'triangles', reshape_call_result_30030)
        
        # Assigning a Call to a Name (line 1841):
        
        # Assigning a Call to a Name (line 1841):
        
        # Call to reshape(...): (line 1841)
        # Processing the call arguments (line 1841)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1841)
        tuple_30036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1841, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1841)
        # Adding element type (line 1841)
        # Getting the type of 'meshHeight' (line 1841)
        meshHeight_30037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 42), 'meshHeight', False)
        int_30038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1841, 55), 'int')
        # Applying the binary operator '+' (line 1841)
        result_add_30039 = python_operator(stypy.reporting.localization.Localization(__file__, 1841, 42), '+', meshHeight_30037, int_30038)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1841, 42), tuple_30036, result_add_30039)
        # Adding element type (line 1841)
        # Getting the type of 'meshWidth' (line 1841)
        meshWidth_30040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 58), 'meshWidth', False)
        int_30041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1841, 70), 'int')
        # Applying the binary operator '+' (line 1841)
        result_add_30042 = python_operator(stypy.reporting.localization.Localization(__file__, 1841, 58), '+', meshWidth_30040, int_30041)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1841, 42), tuple_30036, result_add_30042)
        # Adding element type (line 1841)
        int_30043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1841, 73), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1841, 42), tuple_30036, int_30043)
        
        # Processing the call keyword arguments (line 1841)
        kwargs_30044 = {}
        
        # Call to get_facecolor(...): (line 1841)
        # Processing the call keyword arguments (line 1841)
        kwargs_30033 = {}
        # Getting the type of 'self' (line 1841)
        self_30031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 12), 'self', False)
        # Obtaining the member 'get_facecolor' of a type (line 1841)
        get_facecolor_30032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1841, 12), self_30031, 'get_facecolor')
        # Calling get_facecolor(args, kwargs) (line 1841)
        get_facecolor_call_result_30034 = invoke(stypy.reporting.localization.Localization(__file__, 1841, 12), get_facecolor_30032, *[], **kwargs_30033)
        
        # Obtaining the member 'reshape' of a type (line 1841)
        reshape_30035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1841, 12), get_facecolor_call_result_30034, 'reshape')
        # Calling reshape(args, kwargs) (line 1841)
        reshape_call_result_30045 = invoke(stypy.reporting.localization.Localization(__file__, 1841, 12), reshape_30035, *[tuple_30036], **kwargs_30044)
        
        # Assigning a type to the variable 'c' (line 1841)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 8), 'c', reshape_call_result_30045)
        
        # Assigning a Subscript to a Name (line 1842):
        
        # Assigning a Subscript to a Name (line 1842):
        
        # Obtaining the type of the subscript
        int_30046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1842, 17), 'int')
        slice_30047 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1842, 14), None, int_30046, None)
        int_30048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1842, 22), 'int')
        slice_30049 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1842, 14), None, int_30048, None)
        # Getting the type of 'c' (line 1842)
        c_30050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 14), 'c')
        # Obtaining the member '__getitem__' of a type (line 1842)
        getitem___30051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1842, 14), c_30050, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1842)
        subscript_call_result_30052 = invoke(stypy.reporting.localization.Localization(__file__, 1842, 14), getitem___30051, (slice_30047, slice_30049))
        
        # Assigning a type to the variable 'c_a' (line 1842)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 8), 'c_a', subscript_call_result_30052)
        
        # Assigning a Subscript to a Name (line 1843):
        
        # Assigning a Subscript to a Name (line 1843):
        
        # Obtaining the type of the subscript
        int_30053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1843, 17), 'int')
        slice_30054 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1843, 14), None, int_30053, None)
        int_30055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1843, 21), 'int')
        slice_30056 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1843, 14), int_30055, None, None)
        # Getting the type of 'c' (line 1843)
        c_30057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 14), 'c')
        # Obtaining the member '__getitem__' of a type (line 1843)
        getitem___30058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1843, 14), c_30057, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1843)
        subscript_call_result_30059 = invoke(stypy.reporting.localization.Localization(__file__, 1843, 14), getitem___30058, (slice_30054, slice_30056))
        
        # Assigning a type to the variable 'c_b' (line 1843)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1843, 8), 'c_b', subscript_call_result_30059)
        
        # Assigning a Subscript to a Name (line 1844):
        
        # Assigning a Subscript to a Name (line 1844):
        
        # Obtaining the type of the subscript
        int_30060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1844, 16), 'int')
        slice_30061 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1844, 14), int_30060, None, None)
        int_30062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1844, 20), 'int')
        slice_30063 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1844, 14), int_30062, None, None)
        # Getting the type of 'c' (line 1844)
        c_30064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 14), 'c')
        # Obtaining the member '__getitem__' of a type (line 1844)
        getitem___30065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1844, 14), c_30064, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1844)
        subscript_call_result_30066 = invoke(stypy.reporting.localization.Localization(__file__, 1844, 14), getitem___30065, (slice_30061, slice_30063))
        
        # Assigning a type to the variable 'c_c' (line 1844)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1844, 8), 'c_c', subscript_call_result_30066)
        
        # Assigning a Subscript to a Name (line 1845):
        
        # Assigning a Subscript to a Name (line 1845):
        
        # Obtaining the type of the subscript
        int_30067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 16), 'int')
        slice_30068 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1845, 14), int_30067, None, None)
        int_30069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 21), 'int')
        slice_30070 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1845, 14), None, int_30069, None)
        # Getting the type of 'c' (line 1845)
        c_30071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 14), 'c')
        # Obtaining the member '__getitem__' of a type (line 1845)
        getitem___30072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1845, 14), c_30071, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1845)
        subscript_call_result_30073 = invoke(stypy.reporting.localization.Localization(__file__, 1845, 14), getitem___30072, (slice_30068, slice_30070))
        
        # Assigning a type to the variable 'c_d' (line 1845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1845, 8), 'c_d', subscript_call_result_30073)
        
        # Assigning a BinOp to a Name (line 1846):
        
        # Assigning a BinOp to a Name (line 1846):
        # Getting the type of 'c_a' (line 1846)
        c_a_30074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 20), 'c_a')
        # Getting the type of 'c_b' (line 1846)
        c_b_30075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 26), 'c_b')
        # Applying the binary operator '+' (line 1846)
        result_add_30076 = python_operator(stypy.reporting.localization.Localization(__file__, 1846, 20), '+', c_a_30074, c_b_30075)
        
        # Getting the type of 'c_c' (line 1846)
        c_c_30077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 32), 'c_c')
        # Applying the binary operator '+' (line 1846)
        result_add_30078 = python_operator(stypy.reporting.localization.Localization(__file__, 1846, 30), '+', result_add_30076, c_c_30077)
        
        # Getting the type of 'c_d' (line 1846)
        c_d_30079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 38), 'c_d')
        # Applying the binary operator '+' (line 1846)
        result_add_30080 = python_operator(stypy.reporting.localization.Localization(__file__, 1846, 36), '+', result_add_30078, c_d_30079)
        
        float_30081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1846, 45), 'float')
        # Applying the binary operator 'div' (line 1846)
        result_div_30082 = python_operator(stypy.reporting.localization.Localization(__file__, 1846, 19), 'div', result_add_30080, float_30081)
        
        # Assigning a type to the variable 'c_center' (line 1846)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1846, 8), 'c_center', result_div_30082)
        
        # Assigning a Call to a Name (line 1848):
        
        # Assigning a Call to a Name (line 1848):
        
        # Call to concatenate(...): (line 1848)
        # Processing the call arguments (line 1848)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1849)
        tuple_30085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1849)
        # Adding element type (line 1849)
        # Getting the type of 'c_a' (line 1849)
        c_a_30086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 24), 'c_a', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 24), tuple_30085, c_a_30086)
        # Adding element type (line 1849)
        # Getting the type of 'c_b' (line 1849)
        c_b_30087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 29), 'c_b', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 24), tuple_30085, c_b_30087)
        # Adding element type (line 1849)
        # Getting the type of 'c_center' (line 1849)
        c_center_30088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 34), 'c_center', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 24), tuple_30085, c_center_30088)
        # Adding element type (line 1849)
        # Getting the type of 'c_b' (line 1850)
        c_b_30089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 24), 'c_b', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 24), tuple_30085, c_b_30089)
        # Adding element type (line 1849)
        # Getting the type of 'c_c' (line 1850)
        c_c_30090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 29), 'c_c', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 24), tuple_30085, c_c_30090)
        # Adding element type (line 1849)
        # Getting the type of 'c_center' (line 1850)
        c_center_30091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 34), 'c_center', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 24), tuple_30085, c_center_30091)
        # Adding element type (line 1849)
        # Getting the type of 'c_c' (line 1851)
        c_c_30092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 24), 'c_c', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 24), tuple_30085, c_c_30092)
        # Adding element type (line 1849)
        # Getting the type of 'c_d' (line 1851)
        c_d_30093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 29), 'c_d', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 24), tuple_30085, c_d_30093)
        # Adding element type (line 1849)
        # Getting the type of 'c_center' (line 1851)
        c_center_30094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 34), 'c_center', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 24), tuple_30085, c_center_30094)
        # Adding element type (line 1849)
        # Getting the type of 'c_d' (line 1852)
        c_d_30095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 24), 'c_d', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 24), tuple_30085, c_d_30095)
        # Adding element type (line 1849)
        # Getting the type of 'c_a' (line 1852)
        c_a_30096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 29), 'c_a', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 24), tuple_30085, c_a_30096)
        # Adding element type (line 1849)
        # Getting the type of 'c_center' (line 1852)
        c_center_30097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 34), 'c_center', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 24), tuple_30085, c_center_30097)
        
        # Processing the call keyword arguments (line 1848)
        int_30098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1853, 28), 'int')
        keyword_30099 = int_30098
        kwargs_30100 = {'axis': keyword_30099}
        # Getting the type of 'np' (line 1848)
        np_30083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 17), 'np', False)
        # Obtaining the member 'concatenate' of a type (line 1848)
        concatenate_30084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1848, 17), np_30083, 'concatenate')
        # Calling concatenate(args, kwargs) (line 1848)
        concatenate_call_result_30101 = invoke(stypy.reporting.localization.Localization(__file__, 1848, 17), concatenate_30084, *[tuple_30085], **kwargs_30100)
        
        # Assigning a type to the variable 'colors' (line 1848)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1848, 8), 'colors', concatenate_call_result_30101)
        
        # Assigning a Call to a Name (line 1854):
        
        # Assigning a Call to a Name (line 1854):
        
        # Call to reshape(...): (line 1854)
        # Processing the call arguments (line 1854)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1854)
        tuple_30104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1854)
        # Adding element type (line 1854)
        # Getting the type of 'meshWidth' (line 1854)
        meshWidth_30105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 33), 'meshWidth', False)
        # Getting the type of 'meshHeight' (line 1854)
        meshHeight_30106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 45), 'meshHeight', False)
        # Applying the binary operator '*' (line 1854)
        result_mul_30107 = python_operator(stypy.reporting.localization.Localization(__file__, 1854, 33), '*', meshWidth_30105, meshHeight_30106)
        
        int_30108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 58), 'int')
        # Applying the binary operator '*' (line 1854)
        result_mul_30109 = python_operator(stypy.reporting.localization.Localization(__file__, 1854, 56), '*', result_mul_30107, int_30108)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1854, 33), tuple_30104, result_mul_30109)
        # Adding element type (line 1854)
        int_30110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 61), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1854, 33), tuple_30104, int_30110)
        # Adding element type (line 1854)
        int_30111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 64), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1854, 33), tuple_30104, int_30111)
        
        # Processing the call keyword arguments (line 1854)
        kwargs_30112 = {}
        # Getting the type of 'colors' (line 1854)
        colors_30102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 17), 'colors', False)
        # Obtaining the member 'reshape' of a type (line 1854)
        reshape_30103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 17), colors_30102, 'reshape')
        # Calling reshape(args, kwargs) (line 1854)
        reshape_call_result_30113 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 17), reshape_30103, *[tuple_30104], **kwargs_30112)
        
        # Assigning a type to the variable 'colors' (line 1854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 8), 'colors', reshape_call_result_30113)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1856)
        tuple_30114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1856, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1856)
        # Adding element type (line 1856)
        # Getting the type of 'triangles' (line 1856)
        triangles_30115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 15), 'triangles')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1856, 15), tuple_30114, triangles_30115)
        # Adding element type (line 1856)
        # Getting the type of 'colors' (line 1856)
        colors_30116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 26), 'colors')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1856, 15), tuple_30114, colors_30116)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1856, 8), 'stypy_return_type', tuple_30114)
        
        # ################# End of 'convert_mesh_to_triangles(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'convert_mesh_to_triangles' in the type store
        # Getting the type of 'stypy_return_type' (line 1816)
        stypy_return_type_30117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30117)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'convert_mesh_to_triangles'
        return stypy_return_type_30117


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 1858, 4, False)
        # Assigning a type to the variable 'self' (line 1859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1859, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        QuadMesh.draw.__dict__.__setitem__('stypy_localization', localization)
        QuadMesh.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        QuadMesh.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        QuadMesh.draw.__dict__.__setitem__('stypy_function_name', 'QuadMesh.draw')
        QuadMesh.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        QuadMesh.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        QuadMesh.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        QuadMesh.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        QuadMesh.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        QuadMesh.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        QuadMesh.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'QuadMesh.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        
        
        
        # Call to get_visible(...): (line 1860)
        # Processing the call keyword arguments (line 1860)
        kwargs_30120 = {}
        # Getting the type of 'self' (line 1860)
        self_30118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1860, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 1860)
        get_visible_30119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1860, 15), self_30118, 'get_visible')
        # Calling get_visible(args, kwargs) (line 1860)
        get_visible_call_result_30121 = invoke(stypy.reporting.localization.Localization(__file__, 1860, 15), get_visible_30119, *[], **kwargs_30120)
        
        # Applying the 'not' unary operator (line 1860)
        result_not__30122 = python_operator(stypy.reporting.localization.Localization(__file__, 1860, 11), 'not', get_visible_call_result_30121)
        
        # Testing the type of an if condition (line 1860)
        if_condition_30123 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1860, 8), result_not__30122)
        # Assigning a type to the variable 'if_condition_30123' (line 1860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1860, 8), 'if_condition_30123', if_condition_30123)
        # SSA begins for if statement (line 1860)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1861)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1861, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1860)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to open_group(...): (line 1862)
        # Processing the call arguments (line 1862)
        # Getting the type of 'self' (line 1862)
        self_30126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 28), 'self', False)
        # Obtaining the member '__class__' of a type (line 1862)
        class___30127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1862, 28), self_30126, '__class__')
        # Obtaining the member '__name__' of a type (line 1862)
        name___30128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1862, 28), class___30127, '__name__')
        
        # Call to get_gid(...): (line 1862)
        # Processing the call keyword arguments (line 1862)
        kwargs_30131 = {}
        # Getting the type of 'self' (line 1862)
        self_30129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 53), 'self', False)
        # Obtaining the member 'get_gid' of a type (line 1862)
        get_gid_30130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1862, 53), self_30129, 'get_gid')
        # Calling get_gid(args, kwargs) (line 1862)
        get_gid_call_result_30132 = invoke(stypy.reporting.localization.Localization(__file__, 1862, 53), get_gid_30130, *[], **kwargs_30131)
        
        # Processing the call keyword arguments (line 1862)
        kwargs_30133 = {}
        # Getting the type of 'renderer' (line 1862)
        renderer_30124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 8), 'renderer', False)
        # Obtaining the member 'open_group' of a type (line 1862)
        open_group_30125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1862, 8), renderer_30124, 'open_group')
        # Calling open_group(args, kwargs) (line 1862)
        open_group_call_result_30134 = invoke(stypy.reporting.localization.Localization(__file__, 1862, 8), open_group_30125, *[name___30128, get_gid_call_result_30132], **kwargs_30133)
        
        
        # Assigning a Call to a Name (line 1863):
        
        # Assigning a Call to a Name (line 1863):
        
        # Call to get_transform(...): (line 1863)
        # Processing the call keyword arguments (line 1863)
        kwargs_30137 = {}
        # Getting the type of 'self' (line 1863)
        self_30135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 20), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 1863)
        get_transform_30136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1863, 20), self_30135, 'get_transform')
        # Calling get_transform(args, kwargs) (line 1863)
        get_transform_call_result_30138 = invoke(stypy.reporting.localization.Localization(__file__, 1863, 20), get_transform_30136, *[], **kwargs_30137)
        
        # Assigning a type to the variable 'transform' (line 1863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1863, 8), 'transform', get_transform_call_result_30138)
        
        # Assigning a Call to a Name (line 1864):
        
        # Assigning a Call to a Name (line 1864):
        
        # Call to get_offset_transform(...): (line 1864)
        # Processing the call keyword arguments (line 1864)
        kwargs_30141 = {}
        # Getting the type of 'self' (line 1864)
        self_30139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 22), 'self', False)
        # Obtaining the member 'get_offset_transform' of a type (line 1864)
        get_offset_transform_30140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1864, 22), self_30139, 'get_offset_transform')
        # Calling get_offset_transform(args, kwargs) (line 1864)
        get_offset_transform_call_result_30142 = invoke(stypy.reporting.localization.Localization(__file__, 1864, 22), get_offset_transform_30140, *[], **kwargs_30141)
        
        # Assigning a type to the variable 'transOffset' (line 1864)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1864, 8), 'transOffset', get_offset_transform_call_result_30142)
        
        # Assigning a Attribute to a Name (line 1865):
        
        # Assigning a Attribute to a Name (line 1865):
        # Getting the type of 'self' (line 1865)
        self_30143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 18), 'self')
        # Obtaining the member '_offsets' of a type (line 1865)
        _offsets_30144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1865, 18), self_30143, '_offsets')
        # Assigning a type to the variable 'offsets' (line 1865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1865, 8), 'offsets', _offsets_30144)
        
        
        # Call to have_units(...): (line 1867)
        # Processing the call keyword arguments (line 1867)
        kwargs_30147 = {}
        # Getting the type of 'self' (line 1867)
        self_30145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 11), 'self', False)
        # Obtaining the member 'have_units' of a type (line 1867)
        have_units_30146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1867, 11), self_30145, 'have_units')
        # Calling have_units(args, kwargs) (line 1867)
        have_units_call_result_30148 = invoke(stypy.reporting.localization.Localization(__file__, 1867, 11), have_units_30146, *[], **kwargs_30147)
        
        # Testing the type of an if condition (line 1867)
        if_condition_30149 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1867, 8), have_units_call_result_30148)
        # Assigning a type to the variable 'if_condition_30149' (line 1867)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1867, 8), 'if_condition_30149', if_condition_30149)
        # SSA begins for if statement (line 1867)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to len(...): (line 1868)
        # Processing the call arguments (line 1868)
        # Getting the type of 'self' (line 1868)
        self_30151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 19), 'self', False)
        # Obtaining the member '_offsets' of a type (line 1868)
        _offsets_30152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 19), self_30151, '_offsets')
        # Processing the call keyword arguments (line 1868)
        kwargs_30153 = {}
        # Getting the type of 'len' (line 1868)
        len_30150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 15), 'len', False)
        # Calling len(args, kwargs) (line 1868)
        len_call_result_30154 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 15), len_30150, *[_offsets_30152], **kwargs_30153)
        
        # Testing the type of an if condition (line 1868)
        if_condition_30155 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1868, 12), len_call_result_30154)
        # Assigning a type to the variable 'if_condition_30155' (line 1868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'if_condition_30155', if_condition_30155)
        # SSA begins for if statement (line 1868)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1869):
        
        # Assigning a Call to a Name (line 1869):
        
        # Call to convert_xunits(...): (line 1869)
        # Processing the call arguments (line 1869)
        
        # Obtaining the type of the subscript
        slice_30158 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1869, 41), None, None, None)
        int_30159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 58), 'int')
        # Getting the type of 'self' (line 1869)
        self_30160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 41), 'self', False)
        # Obtaining the member '_offsets' of a type (line 1869)
        _offsets_30161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1869, 41), self_30160, '_offsets')
        # Obtaining the member '__getitem__' of a type (line 1869)
        getitem___30162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1869, 41), _offsets_30161, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1869)
        subscript_call_result_30163 = invoke(stypy.reporting.localization.Localization(__file__, 1869, 41), getitem___30162, (slice_30158, int_30159))
        
        # Processing the call keyword arguments (line 1869)
        kwargs_30164 = {}
        # Getting the type of 'self' (line 1869)
        self_30156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 21), 'self', False)
        # Obtaining the member 'convert_xunits' of a type (line 1869)
        convert_xunits_30157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1869, 21), self_30156, 'convert_xunits')
        # Calling convert_xunits(args, kwargs) (line 1869)
        convert_xunits_call_result_30165 = invoke(stypy.reporting.localization.Localization(__file__, 1869, 21), convert_xunits_30157, *[subscript_call_result_30163], **kwargs_30164)
        
        # Assigning a type to the variable 'xs' (line 1869)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1869, 16), 'xs', convert_xunits_call_result_30165)
        
        # Assigning a Call to a Name (line 1870):
        
        # Assigning a Call to a Name (line 1870):
        
        # Call to convert_yunits(...): (line 1870)
        # Processing the call arguments (line 1870)
        
        # Obtaining the type of the subscript
        slice_30168 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1870, 41), None, None, None)
        int_30169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1870, 58), 'int')
        # Getting the type of 'self' (line 1870)
        self_30170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 41), 'self', False)
        # Obtaining the member '_offsets' of a type (line 1870)
        _offsets_30171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1870, 41), self_30170, '_offsets')
        # Obtaining the member '__getitem__' of a type (line 1870)
        getitem___30172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1870, 41), _offsets_30171, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1870)
        subscript_call_result_30173 = invoke(stypy.reporting.localization.Localization(__file__, 1870, 41), getitem___30172, (slice_30168, int_30169))
        
        # Processing the call keyword arguments (line 1870)
        kwargs_30174 = {}
        # Getting the type of 'self' (line 1870)
        self_30166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 21), 'self', False)
        # Obtaining the member 'convert_yunits' of a type (line 1870)
        convert_yunits_30167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1870, 21), self_30166, 'convert_yunits')
        # Calling convert_yunits(args, kwargs) (line 1870)
        convert_yunits_call_result_30175 = invoke(stypy.reporting.localization.Localization(__file__, 1870, 21), convert_yunits_30167, *[subscript_call_result_30173], **kwargs_30174)
        
        # Assigning a type to the variable 'ys' (line 1870)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1870, 16), 'ys', convert_yunits_call_result_30175)
        
        # Assigning a Call to a Name (line 1871):
        
        # Assigning a Call to a Name (line 1871):
        
        # Call to column_stack(...): (line 1871)
        # Processing the call arguments (line 1871)
        
        # Obtaining an instance of the builtin type 'list' (line 1871)
        list_30178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1871)
        # Adding element type (line 1871)
        # Getting the type of 'xs' (line 1871)
        xs_30179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 43), 'xs', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1871, 42), list_30178, xs_30179)
        # Adding element type (line 1871)
        # Getting the type of 'ys' (line 1871)
        ys_30180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 47), 'ys', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1871, 42), list_30178, ys_30180)
        
        # Processing the call keyword arguments (line 1871)
        kwargs_30181 = {}
        # Getting the type of 'np' (line 1871)
        np_30176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 26), 'np', False)
        # Obtaining the member 'column_stack' of a type (line 1871)
        column_stack_30177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 26), np_30176, 'column_stack')
        # Calling column_stack(args, kwargs) (line 1871)
        column_stack_call_result_30182 = invoke(stypy.reporting.localization.Localization(__file__, 1871, 26), column_stack_30177, *[list_30178], **kwargs_30181)
        
        # Assigning a type to the variable 'offsets' (line 1871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 16), 'offsets', column_stack_call_result_30182)
        # SSA join for if statement (line 1868)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1867)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to update_scalarmappable(...): (line 1873)
        # Processing the call keyword arguments (line 1873)
        kwargs_30185 = {}
        # Getting the type of 'self' (line 1873)
        self_30183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 8), 'self', False)
        # Obtaining the member 'update_scalarmappable' of a type (line 1873)
        update_scalarmappable_30184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1873, 8), self_30183, 'update_scalarmappable')
        # Calling update_scalarmappable(args, kwargs) (line 1873)
        update_scalarmappable_call_result_30186 = invoke(stypy.reporting.localization.Localization(__file__, 1873, 8), update_scalarmappable_30184, *[], **kwargs_30185)
        
        
        
        # Getting the type of 'transform' (line 1875)
        transform_30187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1875, 15), 'transform')
        # Obtaining the member 'is_affine' of a type (line 1875)
        is_affine_30188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1875, 15), transform_30187, 'is_affine')
        # Applying the 'not' unary operator (line 1875)
        result_not__30189 = python_operator(stypy.reporting.localization.Localization(__file__, 1875, 11), 'not', is_affine_30188)
        
        # Testing the type of an if condition (line 1875)
        if_condition_30190 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1875, 8), result_not__30189)
        # Assigning a type to the variable 'if_condition_30190' (line 1875)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1875, 8), 'if_condition_30190', if_condition_30190)
        # SSA begins for if statement (line 1875)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1876):
        
        # Assigning a Call to a Name (line 1876):
        
        # Call to reshape(...): (line 1876)
        # Processing the call arguments (line 1876)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1876)
        tuple_30194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1876, 53), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1876)
        # Adding element type (line 1876)
        int_30195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1876, 53), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1876, 53), tuple_30194, int_30195)
        # Adding element type (line 1876)
        int_30196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1876, 57), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1876, 53), tuple_30194, int_30196)
        
        # Processing the call keyword arguments (line 1876)
        kwargs_30197 = {}
        # Getting the type of 'self' (line 1876)
        self_30191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 26), 'self', False)
        # Obtaining the member '_coordinates' of a type (line 1876)
        _coordinates_30192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1876, 26), self_30191, '_coordinates')
        # Obtaining the member 'reshape' of a type (line 1876)
        reshape_30193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1876, 26), _coordinates_30192, 'reshape')
        # Calling reshape(args, kwargs) (line 1876)
        reshape_call_result_30198 = invoke(stypy.reporting.localization.Localization(__file__, 1876, 26), reshape_30193, *[tuple_30194], **kwargs_30197)
        
        # Assigning a type to the variable 'coordinates' (line 1876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1876, 12), 'coordinates', reshape_call_result_30198)
        
        # Assigning a Call to a Name (line 1877):
        
        # Assigning a Call to a Name (line 1877):
        
        # Call to transform(...): (line 1877)
        # Processing the call arguments (line 1877)
        # Getting the type of 'coordinates' (line 1877)
        coordinates_30201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 46), 'coordinates', False)
        # Processing the call keyword arguments (line 1877)
        kwargs_30202 = {}
        # Getting the type of 'transform' (line 1877)
        transform_30199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 26), 'transform', False)
        # Obtaining the member 'transform' of a type (line 1877)
        transform_30200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1877, 26), transform_30199, 'transform')
        # Calling transform(args, kwargs) (line 1877)
        transform_call_result_30203 = invoke(stypy.reporting.localization.Localization(__file__, 1877, 26), transform_30200, *[coordinates_30201], **kwargs_30202)
        
        # Assigning a type to the variable 'coordinates' (line 1877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 12), 'coordinates', transform_call_result_30203)
        
        # Assigning a Call to a Name (line 1878):
        
        # Assigning a Call to a Name (line 1878):
        
        # Call to reshape(...): (line 1878)
        # Processing the call arguments (line 1878)
        # Getting the type of 'self' (line 1878)
        self_30206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 46), 'self', False)
        # Obtaining the member '_coordinates' of a type (line 1878)
        _coordinates_30207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 46), self_30206, '_coordinates')
        # Obtaining the member 'shape' of a type (line 1878)
        shape_30208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 46), _coordinates_30207, 'shape')
        # Processing the call keyword arguments (line 1878)
        kwargs_30209 = {}
        # Getting the type of 'coordinates' (line 1878)
        coordinates_30204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 26), 'coordinates', False)
        # Obtaining the member 'reshape' of a type (line 1878)
        reshape_30205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 26), coordinates_30204, 'reshape')
        # Calling reshape(args, kwargs) (line 1878)
        reshape_call_result_30210 = invoke(stypy.reporting.localization.Localization(__file__, 1878, 26), reshape_30205, *[shape_30208], **kwargs_30209)
        
        # Assigning a type to the variable 'coordinates' (line 1878)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1878, 12), 'coordinates', reshape_call_result_30210)
        
        # Assigning a Call to a Name (line 1879):
        
        # Assigning a Call to a Name (line 1879):
        
        # Call to IdentityTransform(...): (line 1879)
        # Processing the call keyword arguments (line 1879)
        kwargs_30213 = {}
        # Getting the type of 'transforms' (line 1879)
        transforms_30211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 24), 'transforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 1879)
        IdentityTransform_30212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1879, 24), transforms_30211, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 1879)
        IdentityTransform_call_result_30214 = invoke(stypy.reporting.localization.Localization(__file__, 1879, 24), IdentityTransform_30212, *[], **kwargs_30213)
        
        # Assigning a type to the variable 'transform' (line 1879)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1879, 12), 'transform', IdentityTransform_call_result_30214)
        # SSA branch for the else part of an if statement (line 1875)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 1881):
        
        # Assigning a Attribute to a Name (line 1881):
        # Getting the type of 'self' (line 1881)
        self_30215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 26), 'self')
        # Obtaining the member '_coordinates' of a type (line 1881)
        _coordinates_30216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1881, 26), self_30215, '_coordinates')
        # Assigning a type to the variable 'coordinates' (line 1881)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1881, 12), 'coordinates', _coordinates_30216)
        # SSA join for if statement (line 1875)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'transOffset' (line 1883)
        transOffset_30217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1883, 15), 'transOffset')
        # Obtaining the member 'is_affine' of a type (line 1883)
        is_affine_30218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1883, 15), transOffset_30217, 'is_affine')
        # Applying the 'not' unary operator (line 1883)
        result_not__30219 = python_operator(stypy.reporting.localization.Localization(__file__, 1883, 11), 'not', is_affine_30218)
        
        # Testing the type of an if condition (line 1883)
        if_condition_30220 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1883, 8), result_not__30219)
        # Assigning a type to the variable 'if_condition_30220' (line 1883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1883, 8), 'if_condition_30220', if_condition_30220)
        # SSA begins for if statement (line 1883)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1884):
        
        # Assigning a Call to a Name (line 1884):
        
        # Call to transform_non_affine(...): (line 1884)
        # Processing the call arguments (line 1884)
        # Getting the type of 'offsets' (line 1884)
        offsets_30223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 55), 'offsets', False)
        # Processing the call keyword arguments (line 1884)
        kwargs_30224 = {}
        # Getting the type of 'transOffset' (line 1884)
        transOffset_30221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 22), 'transOffset', False)
        # Obtaining the member 'transform_non_affine' of a type (line 1884)
        transform_non_affine_30222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1884, 22), transOffset_30221, 'transform_non_affine')
        # Calling transform_non_affine(args, kwargs) (line 1884)
        transform_non_affine_call_result_30225 = invoke(stypy.reporting.localization.Localization(__file__, 1884, 22), transform_non_affine_30222, *[offsets_30223], **kwargs_30224)
        
        # Assigning a type to the variable 'offsets' (line 1884)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1884, 12), 'offsets', transform_non_affine_call_result_30225)
        
        # Assigning a Call to a Name (line 1885):
        
        # Assigning a Call to a Name (line 1885):
        
        # Call to get_affine(...): (line 1885)
        # Processing the call keyword arguments (line 1885)
        kwargs_30228 = {}
        # Getting the type of 'transOffset' (line 1885)
        transOffset_30226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 26), 'transOffset', False)
        # Obtaining the member 'get_affine' of a type (line 1885)
        get_affine_30227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1885, 26), transOffset_30226, 'get_affine')
        # Calling get_affine(args, kwargs) (line 1885)
        get_affine_call_result_30229 = invoke(stypy.reporting.localization.Localization(__file__, 1885, 26), get_affine_30227, *[], **kwargs_30228)
        
        # Assigning a type to the variable 'transOffset' (line 1885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1885, 12), 'transOffset', get_affine_call_result_30229)
        # SSA join for if statement (line 1883)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1887):
        
        # Assigning a Call to a Name (line 1887):
        
        # Call to new_gc(...): (line 1887)
        # Processing the call keyword arguments (line 1887)
        kwargs_30232 = {}
        # Getting the type of 'renderer' (line 1887)
        renderer_30230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 13), 'renderer', False)
        # Obtaining the member 'new_gc' of a type (line 1887)
        new_gc_30231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1887, 13), renderer_30230, 'new_gc')
        # Calling new_gc(args, kwargs) (line 1887)
        new_gc_call_result_30233 = invoke(stypy.reporting.localization.Localization(__file__, 1887, 13), new_gc_30231, *[], **kwargs_30232)
        
        # Assigning a type to the variable 'gc' (line 1887)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1887, 8), 'gc', new_gc_call_result_30233)
        
        # Call to _set_gc_clip(...): (line 1888)
        # Processing the call arguments (line 1888)
        # Getting the type of 'gc' (line 1888)
        gc_30236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 26), 'gc', False)
        # Processing the call keyword arguments (line 1888)
        kwargs_30237 = {}
        # Getting the type of 'self' (line 1888)
        self_30234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 8), 'self', False)
        # Obtaining the member '_set_gc_clip' of a type (line 1888)
        _set_gc_clip_30235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1888, 8), self_30234, '_set_gc_clip')
        # Calling _set_gc_clip(args, kwargs) (line 1888)
        _set_gc_clip_call_result_30238 = invoke(stypy.reporting.localization.Localization(__file__, 1888, 8), _set_gc_clip_30235, *[gc_30236], **kwargs_30237)
        
        
        # Call to set_linewidth(...): (line 1889)
        # Processing the call arguments (line 1889)
        
        # Obtaining the type of the subscript
        int_30241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1889, 46), 'int')
        
        # Call to get_linewidth(...): (line 1889)
        # Processing the call keyword arguments (line 1889)
        kwargs_30244 = {}
        # Getting the type of 'self' (line 1889)
        self_30242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 25), 'self', False)
        # Obtaining the member 'get_linewidth' of a type (line 1889)
        get_linewidth_30243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1889, 25), self_30242, 'get_linewidth')
        # Calling get_linewidth(args, kwargs) (line 1889)
        get_linewidth_call_result_30245 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 25), get_linewidth_30243, *[], **kwargs_30244)
        
        # Obtaining the member '__getitem__' of a type (line 1889)
        getitem___30246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1889, 25), get_linewidth_call_result_30245, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1889)
        subscript_call_result_30247 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 25), getitem___30246, int_30241)
        
        # Processing the call keyword arguments (line 1889)
        kwargs_30248 = {}
        # Getting the type of 'gc' (line 1889)
        gc_30239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 8), 'gc', False)
        # Obtaining the member 'set_linewidth' of a type (line 1889)
        set_linewidth_30240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1889, 8), gc_30239, 'set_linewidth')
        # Calling set_linewidth(args, kwargs) (line 1889)
        set_linewidth_call_result_30249 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 8), set_linewidth_30240, *[subscript_call_result_30247], **kwargs_30248)
        
        
        
        # Getting the type of 'self' (line 1891)
        self_30250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1891, 11), 'self')
        # Obtaining the member '_shading' of a type (line 1891)
        _shading_30251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1891, 11), self_30250, '_shading')
        unicode_30252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1891, 28), 'unicode', u'gouraud')
        # Applying the binary operator '==' (line 1891)
        result_eq_30253 = python_operator(stypy.reporting.localization.Localization(__file__, 1891, 11), '==', _shading_30251, unicode_30252)
        
        # Testing the type of an if condition (line 1891)
        if_condition_30254 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1891, 8), result_eq_30253)
        # Assigning a type to the variable 'if_condition_30254' (line 1891)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1891, 8), 'if_condition_30254', if_condition_30254)
        # SSA begins for if statement (line 1891)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 1892):
        
        # Assigning a Call to a Name:
        
        # Call to convert_mesh_to_triangles(...): (line 1892)
        # Processing the call arguments (line 1892)
        # Getting the type of 'self' (line 1893)
        self_30257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 16), 'self', False)
        # Obtaining the member '_meshWidth' of a type (line 1893)
        _meshWidth_30258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1893, 16), self_30257, '_meshWidth')
        # Getting the type of 'self' (line 1893)
        self_30259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 33), 'self', False)
        # Obtaining the member '_meshHeight' of a type (line 1893)
        _meshHeight_30260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1893, 33), self_30259, '_meshHeight')
        # Getting the type of 'coordinates' (line 1893)
        coordinates_30261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 51), 'coordinates', False)
        # Processing the call keyword arguments (line 1892)
        kwargs_30262 = {}
        # Getting the type of 'self' (line 1892)
        self_30255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 32), 'self', False)
        # Obtaining the member 'convert_mesh_to_triangles' of a type (line 1892)
        convert_mesh_to_triangles_30256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 32), self_30255, 'convert_mesh_to_triangles')
        # Calling convert_mesh_to_triangles(args, kwargs) (line 1892)
        convert_mesh_to_triangles_call_result_30263 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 32), convert_mesh_to_triangles_30256, *[_meshWidth_30258, _meshHeight_30260, coordinates_30261], **kwargs_30262)
        
        # Assigning a type to the variable 'call_assignment_26233' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 12), 'call_assignment_26233', convert_mesh_to_triangles_call_result_30263)
        
        # Assigning a Call to a Name (line 1892):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_30266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1892, 12), 'int')
        # Processing the call keyword arguments
        kwargs_30267 = {}
        # Getting the type of 'call_assignment_26233' (line 1892)
        call_assignment_26233_30264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 12), 'call_assignment_26233', False)
        # Obtaining the member '__getitem__' of a type (line 1892)
        getitem___30265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 12), call_assignment_26233_30264, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_30268 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___30265, *[int_30266], **kwargs_30267)
        
        # Assigning a type to the variable 'call_assignment_26234' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 12), 'call_assignment_26234', getitem___call_result_30268)
        
        # Assigning a Name to a Name (line 1892):
        # Getting the type of 'call_assignment_26234' (line 1892)
        call_assignment_26234_30269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 12), 'call_assignment_26234')
        # Assigning a type to the variable 'triangles' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 12), 'triangles', call_assignment_26234_30269)
        
        # Assigning a Call to a Name (line 1892):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_30272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1892, 12), 'int')
        # Processing the call keyword arguments
        kwargs_30273 = {}
        # Getting the type of 'call_assignment_26233' (line 1892)
        call_assignment_26233_30270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 12), 'call_assignment_26233', False)
        # Obtaining the member '__getitem__' of a type (line 1892)
        getitem___30271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 12), call_assignment_26233_30270, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_30274 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___30271, *[int_30272], **kwargs_30273)
        
        # Assigning a type to the variable 'call_assignment_26235' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 12), 'call_assignment_26235', getitem___call_result_30274)
        
        # Assigning a Name to a Name (line 1892):
        # Getting the type of 'call_assignment_26235' (line 1892)
        call_assignment_26235_30275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 12), 'call_assignment_26235')
        # Assigning a type to the variable 'colors' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 23), 'colors', call_assignment_26235_30275)
        
        # Call to draw_gouraud_triangles(...): (line 1894)
        # Processing the call arguments (line 1894)
        # Getting the type of 'gc' (line 1895)
        gc_30278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 16), 'gc', False)
        # Getting the type of 'triangles' (line 1895)
        triangles_30279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 20), 'triangles', False)
        # Getting the type of 'colors' (line 1895)
        colors_30280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 31), 'colors', False)
        
        # Call to frozen(...): (line 1895)
        # Processing the call keyword arguments (line 1895)
        kwargs_30283 = {}
        # Getting the type of 'transform' (line 1895)
        transform_30281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 39), 'transform', False)
        # Obtaining the member 'frozen' of a type (line 1895)
        frozen_30282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1895, 39), transform_30281, 'frozen')
        # Calling frozen(args, kwargs) (line 1895)
        frozen_call_result_30284 = invoke(stypy.reporting.localization.Localization(__file__, 1895, 39), frozen_30282, *[], **kwargs_30283)
        
        # Processing the call keyword arguments (line 1894)
        kwargs_30285 = {}
        # Getting the type of 'renderer' (line 1894)
        renderer_30276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 12), 'renderer', False)
        # Obtaining the member 'draw_gouraud_triangles' of a type (line 1894)
        draw_gouraud_triangles_30277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1894, 12), renderer_30276, 'draw_gouraud_triangles')
        # Calling draw_gouraud_triangles(args, kwargs) (line 1894)
        draw_gouraud_triangles_call_result_30286 = invoke(stypy.reporting.localization.Localization(__file__, 1894, 12), draw_gouraud_triangles_30277, *[gc_30278, triangles_30279, colors_30280, frozen_call_result_30284], **kwargs_30285)
        
        # SSA branch for the else part of an if statement (line 1891)
        module_type_store.open_ssa_branch('else')
        
        # Call to draw_quad_mesh(...): (line 1897)
        # Processing the call arguments (line 1897)
        # Getting the type of 'gc' (line 1898)
        gc_30289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 16), 'gc', False)
        
        # Call to frozen(...): (line 1898)
        # Processing the call keyword arguments (line 1898)
        kwargs_30292 = {}
        # Getting the type of 'transform' (line 1898)
        transform_30290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 20), 'transform', False)
        # Obtaining the member 'frozen' of a type (line 1898)
        frozen_30291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1898, 20), transform_30290, 'frozen')
        # Calling frozen(args, kwargs) (line 1898)
        frozen_call_result_30293 = invoke(stypy.reporting.localization.Localization(__file__, 1898, 20), frozen_30291, *[], **kwargs_30292)
        
        # Getting the type of 'self' (line 1898)
        self_30294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 40), 'self', False)
        # Obtaining the member '_meshWidth' of a type (line 1898)
        _meshWidth_30295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1898, 40), self_30294, '_meshWidth')
        # Getting the type of 'self' (line 1898)
        self_30296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 57), 'self', False)
        # Obtaining the member '_meshHeight' of a type (line 1898)
        _meshHeight_30297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1898, 57), self_30296, '_meshHeight')
        # Getting the type of 'coordinates' (line 1899)
        coordinates_30298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 16), 'coordinates', False)
        # Getting the type of 'offsets' (line 1899)
        offsets_30299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 29), 'offsets', False)
        # Getting the type of 'transOffset' (line 1899)
        transOffset_30300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 38), 'transOffset', False)
        
        # Call to get_facecolor(...): (line 1899)
        # Processing the call keyword arguments (line 1899)
        kwargs_30303 = {}
        # Getting the type of 'self' (line 1899)
        self_30301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 51), 'self', False)
        # Obtaining the member 'get_facecolor' of a type (line 1899)
        get_facecolor_30302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1899, 51), self_30301, 'get_facecolor')
        # Calling get_facecolor(args, kwargs) (line 1899)
        get_facecolor_call_result_30304 = invoke(stypy.reporting.localization.Localization(__file__, 1899, 51), get_facecolor_30302, *[], **kwargs_30303)
        
        # Getting the type of 'self' (line 1900)
        self_30305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1900, 16), 'self', False)
        # Obtaining the member '_antialiased' of a type (line 1900)
        _antialiased_30306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1900, 16), self_30305, '_antialiased')
        
        # Call to get_edgecolors(...): (line 1900)
        # Processing the call keyword arguments (line 1900)
        kwargs_30309 = {}
        # Getting the type of 'self' (line 1900)
        self_30307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1900, 35), 'self', False)
        # Obtaining the member 'get_edgecolors' of a type (line 1900)
        get_edgecolors_30308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1900, 35), self_30307, 'get_edgecolors')
        # Calling get_edgecolors(args, kwargs) (line 1900)
        get_edgecolors_call_result_30310 = invoke(stypy.reporting.localization.Localization(__file__, 1900, 35), get_edgecolors_30308, *[], **kwargs_30309)
        
        # Processing the call keyword arguments (line 1897)
        kwargs_30311 = {}
        # Getting the type of 'renderer' (line 1897)
        renderer_30287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 12), 'renderer', False)
        # Obtaining the member 'draw_quad_mesh' of a type (line 1897)
        draw_quad_mesh_30288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1897, 12), renderer_30287, 'draw_quad_mesh')
        # Calling draw_quad_mesh(args, kwargs) (line 1897)
        draw_quad_mesh_call_result_30312 = invoke(stypy.reporting.localization.Localization(__file__, 1897, 12), draw_quad_mesh_30288, *[gc_30289, frozen_call_result_30293, _meshWidth_30295, _meshHeight_30297, coordinates_30298, offsets_30299, transOffset_30300, get_facecolor_call_result_30304, _antialiased_30306, get_edgecolors_call_result_30310], **kwargs_30311)
        
        # SSA join for if statement (line 1891)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to restore(...): (line 1901)
        # Processing the call keyword arguments (line 1901)
        kwargs_30315 = {}
        # Getting the type of 'gc' (line 1901)
        gc_30313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 8), 'gc', False)
        # Obtaining the member 'restore' of a type (line 1901)
        restore_30314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1901, 8), gc_30313, 'restore')
        # Calling restore(args, kwargs) (line 1901)
        restore_call_result_30316 = invoke(stypy.reporting.localization.Localization(__file__, 1901, 8), restore_30314, *[], **kwargs_30315)
        
        
        # Call to close_group(...): (line 1902)
        # Processing the call arguments (line 1902)
        # Getting the type of 'self' (line 1902)
        self_30319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1902, 29), 'self', False)
        # Obtaining the member '__class__' of a type (line 1902)
        class___30320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1902, 29), self_30319, '__class__')
        # Obtaining the member '__name__' of a type (line 1902)
        name___30321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1902, 29), class___30320, '__name__')
        # Processing the call keyword arguments (line 1902)
        kwargs_30322 = {}
        # Getting the type of 'renderer' (line 1902)
        renderer_30317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1902, 8), 'renderer', False)
        # Obtaining the member 'close_group' of a type (line 1902)
        close_group_30318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1902, 8), renderer_30317, 'close_group')
        # Calling close_group(args, kwargs) (line 1902)
        close_group_call_result_30323 = invoke(stypy.reporting.localization.Localization(__file__, 1902, 8), close_group_30318, *[name___30321], **kwargs_30322)
        
        
        # Assigning a Name to a Attribute (line 1903):
        
        # Assigning a Name to a Attribute (line 1903):
        # Getting the type of 'False' (line 1903)
        False_30324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1903, 21), 'False')
        # Getting the type of 'self' (line 1903)
        self_30325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1903, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1903)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1903, 8), self_30325, 'stale', False_30324)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1858)
        stypy_return_type_30326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30326)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_30326


# Assigning a type to the variable 'QuadMesh' (line 1731)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1731, 0), 'QuadMesh', QuadMesh)

# Assigning a Call to a Name (line 1906):

# Assigning a Call to a Name (line 1906):

# Call to kwdoc(...): (line 1906)
# Processing the call arguments (line 1906)
# Getting the type of 'Collection' (line 1906)
Collection_30329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 24), 'Collection', False)
# Processing the call keyword arguments (line 1906)
kwargs_30330 = {}
# Getting the type of 'artist' (line 1906)
artist_30327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 11), 'artist', False)
# Obtaining the member 'kwdoc' of a type (line 1906)
kwdoc_30328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1906, 11), artist_30327, 'kwdoc')
# Calling kwdoc(args, kwargs) (line 1906)
kwdoc_call_result_30331 = invoke(stypy.reporting.localization.Localization(__file__, 1906, 11), kwdoc_30328, *[Collection_30329], **kwargs_30330)

# Assigning a type to the variable 'patchstr' (line 1906)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1906, 0), 'patchstr', kwdoc_call_result_30331)


# Obtaining an instance of the builtin type 'tuple' (line 1907)
tuple_30332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1907, 10), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 1907)
# Adding element type (line 1907)
unicode_30333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1907, 10), 'unicode', u'QuadMesh')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 10), tuple_30332, unicode_30333)
# Adding element type (line 1907)
unicode_30334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1907, 22), 'unicode', u'TriMesh')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 10), tuple_30332, unicode_30334)
# Adding element type (line 1907)
unicode_30335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1907, 33), 'unicode', u'PolyCollection')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 10), tuple_30332, unicode_30335)
# Adding element type (line 1907)
unicode_30336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1907, 51), 'unicode', u'BrokenBarHCollection')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 10), tuple_30332, unicode_30336)
# Adding element type (line 1907)
unicode_30337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1908, 10), 'unicode', u'RegularPolyCollection')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 10), tuple_30332, unicode_30337)
# Adding element type (line 1907)
unicode_30338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1908, 35), 'unicode', u'PathCollection')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 10), tuple_30332, unicode_30338)
# Adding element type (line 1907)
unicode_30339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1909, 10), 'unicode', u'StarPolygonCollection')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 10), tuple_30332, unicode_30339)
# Adding element type (line 1907)
unicode_30340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1909, 35), 'unicode', u'PatchCollection')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 10), tuple_30332, unicode_30340)
# Adding element type (line 1907)
unicode_30341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1910, 10), 'unicode', u'CircleCollection')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 10), tuple_30332, unicode_30341)
# Adding element type (line 1907)
unicode_30342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1910, 30), 'unicode', u'Collection')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 10), tuple_30332, unicode_30342)

# Testing the type of a for loop iterable (line 1907)
is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1907, 0), tuple_30332)
# Getting the type of the for loop variable (line 1907)
for_loop_var_30343 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1907, 0), tuple_30332)
# Assigning a type to the variable 'k' (line 1907)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1907, 0), 'k', for_loop_var_30343)
# SSA begins for a for statement (line 1907)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')

# Call to update(...): (line 1911)
# Processing the call arguments (line 1911)

# Obtaining an instance of the builtin type 'dict' (line 1911)
dict_30347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1911, 29), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 1911)
# Adding element type (key, value) (line 1911)
# Getting the type of 'k' (line 1911)
k_30348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 30), 'k', False)
# Getting the type of 'patchstr' (line 1911)
patchstr_30349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 33), 'patchstr', False)
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1911, 29), dict_30347, (k_30348, patchstr_30349))

# Processing the call keyword arguments (line 1911)
kwargs_30350 = {}
# Getting the type of 'docstring' (line 1911)
docstring_30344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 4), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 1911)
interpd_30345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1911, 4), docstring_30344, 'interpd')
# Obtaining the member 'update' of a type (line 1911)
update_30346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1911, 4), interpd_30345, 'update')
# Calling update(args, kwargs) (line 1911)
update_call_result_30351 = invoke(stypy.reporting.localization.Localization(__file__, 1911, 4), update_30346, *[dict_30347], **kwargs_30350)

# SSA join for a for statement
module_type_store = module_type_store.join_ssa_context()


# Call to update(...): (line 1912)
# Processing the call keyword arguments (line 1912)

# Call to kwdoc(...): (line 1912)
# Processing the call arguments (line 1912)
# Getting the type of 'LineCollection' (line 1912)
LineCollection_30357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 53), 'LineCollection', False)
# Processing the call keyword arguments (line 1912)
kwargs_30358 = {}
# Getting the type of 'artist' (line 1912)
artist_30355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 40), 'artist', False)
# Obtaining the member 'kwdoc' of a type (line 1912)
kwdoc_30356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1912, 40), artist_30355, 'kwdoc')
# Calling kwdoc(args, kwargs) (line 1912)
kwdoc_call_result_30359 = invoke(stypy.reporting.localization.Localization(__file__, 1912, 40), kwdoc_30356, *[LineCollection_30357], **kwargs_30358)

keyword_30360 = kwdoc_call_result_30359
kwargs_30361 = {'LineCollection': keyword_30360}
# Getting the type of 'docstring' (line 1912)
docstring_30352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 0), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 1912)
interpd_30353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1912, 0), docstring_30352, 'interpd')
# Obtaining the member 'update' of a type (line 1912)
update_30354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1912, 0), interpd_30353, 'update')
# Calling update(args, kwargs) (line 1912)
update_call_result_30362 = invoke(stypy.reporting.localization.Localization(__file__, 1912, 0), update_30354, *[], **kwargs_30361)


# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
