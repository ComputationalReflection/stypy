
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: This is an object-oriented plotting library.
3: 
4: A procedural interface is provided by the companion pyplot module,
5: which may be imported directly, e.g.::
6: 
7:     import matplotlib.pyplot as plt
8: 
9: or using ipython::
10: 
11:     ipython
12: 
13: at your terminal, followed by::
14: 
15:     In [1]: %matplotlib
16:     In [2]: import matplotlib.pyplot as plt
17: 
18: at the ipython shell prompt.
19: 
20: For the most part, direct use of the object-oriented library is
21: encouraged when programming; pyplot is primarily for working
22: interactively.  The
23: exceptions are the pyplot commands :func:`~matplotlib.pyplot.figure`,
24: :func:`~matplotlib.pyplot.subplot`,
25: :func:`~matplotlib.pyplot.subplots`, and
26: :func:`~pyplot.savefig`, which can greatly simplify scripting.
27: 
28: Modules include:
29: 
30:     :mod:`matplotlib.axes`
31:         defines the :class:`~matplotlib.axes.Axes` class.  Most pylab
32:         commands are wrappers for :class:`~matplotlib.axes.Axes`
33:         methods.  The axes module is the highest level of OO access to
34:         the library.
35: 
36:     :mod:`matplotlib.figure`
37:         defines the :class:`~matplotlib.figure.Figure` class.
38: 
39:     :mod:`matplotlib.artist`
40:         defines the :class:`~matplotlib.artist.Artist` base class for
41:         all classes that draw things.
42: 
43:     :mod:`matplotlib.lines`
44:         defines the :class:`~matplotlib.lines.Line2D` class for
45:         drawing lines and markers
46: 
47:     :mod:`matplotlib.patches`
48:         defines classes for drawing polygons
49: 
50:     :mod:`matplotlib.text`
51:         defines the :class:`~matplotlib.text.Text`,
52:         :class:`~matplotlib.text.TextWithDash`, and
53:         :class:`~matplotlib.text.Annotate` classes
54: 
55:     :mod:`matplotlib.image`
56:         defines the :class:`~matplotlib.image.AxesImage` and
57:         :class:`~matplotlib.image.FigureImage` classes
58: 
59:     :mod:`matplotlib.collections`
60:         classes for efficient drawing of groups of lines or polygons
61: 
62:     :mod:`matplotlib.colors`
63:         classes for interpreting color specifications and for making
64:         colormaps
65: 
66:     :mod:`matplotlib.cm`
67:         colormaps and the :class:`~matplotlib.image.ScalarMappable`
68:         mixin class for providing color mapping functionality to other
69:         classes
70: 
71:     :mod:`matplotlib.ticker`
72:         classes for calculating tick mark locations and for formatting
73:         tick labels
74: 
75:     :mod:`matplotlib.backends`
76:         a subpackage with modules for various gui libraries and output
77:         formats
78: 
79: The base matplotlib namespace includes:
80: 
81:     :data:`~matplotlib.rcParams`
82:         a global dictionary of default configuration settings.  It is
83:         initialized by code which may be overridded by a matplotlibrc
84:         file.
85: 
86:     :func:`~matplotlib.rc`
87:         a function for setting groups of rcParams values
88: 
89:     :func:`~matplotlib.use`
90:         a function for setting the matplotlib backend.  If used, this
91:         function must be called immediately after importing matplotlib
92:         for the first time.  In particular, it must be called
93:         **before** importing pylab (if pylab is imported).
94: 
95: matplotlib was initially written by John D. Hunter (1968-2012) and is now
96: developed and maintained by a host of others.
97: 
98: Occasionally the internal documentation (python docstrings) will refer
99: to MATLAB&reg;, a registered trademark of The MathWorks, Inc.
100: 
101: '''
102: from __future__ import (absolute_import, division, print_function,
103:                         unicode_literals)
104: 
105: import six
106: 
107: from collections import MutableMapping
108: import contextlib
109: import distutils.version
110: import distutils.sysconfig
111: import functools
112: import io
113: import inspect
114: import itertools
115: import locale
116: import os
117: import re
118: import sys
119: import tempfile
120: import warnings
121: 
122: # cbook must import matplotlib only within function
123: # definitions, so it is safe to import from it here.
124: from . import cbook
125: from matplotlib.cbook import (
126:     _backports, mplDeprecation, dedent, get_label, sanitize_sequence)
127: from matplotlib.compat import subprocess
128: from matplotlib.rcsetup import defaultParams, validate_backend, cycler
129: 
130: import numpy
131: from six.moves.urllib.request import urlopen
132: from six.moves import reload_module as reload
133: 
134: # Get the version from the _version.py versioneer file. For a git checkout,
135: # this is computed based on the number of commits since the last tag.
136: from ._version import get_versions
137: __version__ = str(get_versions()['version'])
138: del get_versions
139: 
140: __version__numpy__ = str('1.7.1')  # minimum required numpy version
141: 
142: __bibtex__ = r'''@Article{Hunter:2007,
143:   Author    = {Hunter, J. D.},
144:   Title     = {Matplotlib: A 2D graphics environment},
145:   Journal   = {Computing In Science \& Engineering},
146:   Volume    = {9},
147:   Number    = {3},
148:   Pages     = {90--95},
149:   abstract  = {Matplotlib is a 2D graphics package used for Python
150:   for application development, interactive scripting, and
151:   publication-quality image generation across user
152:   interfaces and operating systems.},
153:   publisher = {IEEE COMPUTER SOC},
154:   year      = 2007
155: }'''
156: 
157: 
158: _python27 = (sys.version_info.major == 2 and sys.version_info.minor >= 7)
159: _python34 = (sys.version_info.major == 3 and sys.version_info.minor >= 4)
160: if not (_python27 or _python34):
161:     raise ImportError("Matplotlib requires Python 2.7 or 3.4 or later")
162: 
163: 
164: def compare_versions(a, b):
165:     "return True if a is greater than or equal to b"
166:     if a:
167:         if six.PY3:
168:             if isinstance(a, bytes):
169:                 a = a.decode('ascii')
170:             if isinstance(b, bytes):
171:                 b = b.decode('ascii')
172:         a = distutils.version.LooseVersion(a)
173:         b = distutils.version.LooseVersion(b)
174:         return a >= b
175:     else:
176:         return False
177: 
178: 
179: try:
180:     import dateutil
181: except ImportError:
182:     raise ImportError("Matplotlib requires dateutil")
183: 
184: 
185: if not compare_versions(six.__version__, '1.10'):
186:     raise ImportError(
187:         "Matplotlib requires six>=1.10; you have %s" % six.__version__)
188: 
189: 
190: try:
191:     import pyparsing
192: except ImportError:
193:     raise ImportError("Matplotlib requires pyparsing")
194: else:
195:     if not compare_versions(pyparsing.__version__, '2.0.1'):
196:         raise ImportError(
197:             "Matplotlib requires pyparsing>=2.0.1; you have %s"
198:             % pyparsing.__version__)
199: 
200: 
201: if not compare_versions(numpy.__version__, __version__numpy__):
202:     raise ImportError(
203:         "Matplotlib requires numpy>=%s; you have %s" % (
204:             __version__numpy__, numpy.__version__))
205: 
206: 
207: if not hasattr(sys, 'argv'):  # for modpython
208:     sys.argv = [str('modpython')]
209: 
210: 
211: def _is_writable_dir(p):
212:     '''
213:     p is a string pointing to a putative writable dir -- return True p
214:     is such a string, else False
215:     '''
216:     return os.access(p, os.W_OK) and os.path.isdir(p)
217: 
218: 
219: class Verbose(object):
220:     '''
221:     A class to handle reporting.  Set the fileo attribute to any file
222:     instance to handle the output.  Default is sys.stdout
223:     '''
224:     levels = ('silent', 'helpful', 'debug', 'debug-annoying')
225:     vald = {level: i for i, level in enumerate(levels)}
226: 
227:     # parse the verbosity from the command line; flags look like
228:     # --verbose-silent or --verbose-helpful
229:     _commandLineVerbose = None
230: 
231:     for arg in sys.argv[1:]:
232:         # cast to str because we are using unicode_literals,
233:         # and argv is always str
234:         if not arg.startswith(str('--verbose-')):
235:             continue
236:         level_str = arg[10:]
237:         # If it doesn't match one of ours, then don't even
238:         # bother noting it, we are just a 3rd-party library
239:         # to somebody else's script.
240:         if level_str in levels:
241:             _commandLineVerbose = level_str
242: 
243:     def __init__(self):
244:         self.set_level('silent')
245:         self.fileo = sys.stdout
246: 
247:     def set_level(self, level):
248:         'set the verbosity to one of the Verbose.levels strings'
249: 
250:         if self._commandLineVerbose is not None:
251:             level = self._commandLineVerbose
252:         if level not in self.levels:
253:             warnings.warn('matplotlib: unrecognized --verbose-* string "%s".'
254:                           ' Legal values are %s' % (level, self.levels))
255:         else:
256:             self.level = level
257: 
258:     def set_fileo(self, fname):
259:         std = {
260:             'sys.stdout': sys.stdout,
261:             'sys.stderr': sys.stderr,
262:         }
263:         if fname in std:
264:             self.fileo = std[fname]
265:         else:
266:             try:
267:                 fileo = open(fname, 'w')
268:             except IOError:
269:                 raise ValueError('Verbose object could not open log file "{0}"'
270:                                  ' for writing.\nCheck your matplotlibrc '
271:                                  'verbose.fileo setting'.format(fname))
272:             else:
273:                 self.fileo = fileo
274: 
275:     def report(self, s, level='helpful'):
276:         '''
277:         print message s to self.fileo if self.level>=level.  Return
278:         value indicates whether a message was issued
279: 
280:         '''
281:         if self.ge(level):
282:             print(s, file=self.fileo)
283:             return True
284:         return False
285: 
286:     def wrap(self, fmt, func, level='helpful', always=True):
287:         '''
288:         return a callable function that wraps func and reports it
289:         output through the verbose handler if current verbosity level
290:         is higher than level
291: 
292:         if always is True, the report will occur on every function
293:         call; otherwise only on the first time the function is called
294:         '''
295:         assert callable(func)
296: 
297:         def wrapper(*args, **kwargs):
298:             ret = func(*args, **kwargs)
299: 
300:             if (always or not wrapper._spoke):
301:                 spoke = self.report(fmt % ret, level)
302:                 if not wrapper._spoke:
303:                     wrapper._spoke = spoke
304:             return ret
305:         wrapper._spoke = False
306:         wrapper.__doc__ = func.__doc__
307:         return wrapper
308: 
309:     def ge(self, level):
310:         'return true if self.level is >= level'
311:         return self.vald[self.level] >= self.vald[level]
312: 
313: 
314: verbose = Verbose()
315: 
316: 
317: def checkdep_dvipng():
318:     try:
319:         s = subprocess.Popen([str('dvipng'), '-version'],
320:                              stdout=subprocess.PIPE,
321:                              stderr=subprocess.PIPE)
322:         stdout, stderr = s.communicate()
323:         line = stdout.decode('ascii').split('\n')[1]
324:         v = line.split()[-1]
325:         return v
326:     except (IndexError, ValueError, OSError):
327:         return None
328: 
329: 
330: def checkdep_ghostscript():
331:     if checkdep_ghostscript.executable is None:
332:         if sys.platform == 'win32':
333:             # mgs is the name in miktex
334:             gs_execs = ['gswin32c', 'gswin64c', 'mgs', 'gs']
335:         else:
336:             gs_execs = ['gs']
337:         for gs_exec in gs_execs:
338:             try:
339:                 s = subprocess.Popen(
340:                     [str(gs_exec), '--version'], stdout=subprocess.PIPE,
341:                     stderr=subprocess.PIPE)
342:                 stdout, stderr = s.communicate()
343:                 if s.returncode == 0:
344:                     v = stdout[:-1].decode('ascii')
345:                     checkdep_ghostscript.executable = gs_exec
346:                     checkdep_ghostscript.version = v
347:             except (IndexError, ValueError, OSError):
348:                 pass
349:     return checkdep_ghostscript.executable, checkdep_ghostscript.version
350: checkdep_ghostscript.executable = None
351: checkdep_ghostscript.version = None
352: 
353: 
354: # Deprecated, as it is unneeded and some distributions (e.g. MiKTeX 2.9.6350)
355: # do not actually report the TeX version.
356: @cbook.deprecated("2.1")
357: def checkdep_tex():
358:     try:
359:         s = subprocess.Popen([str('tex'), '-version'], stdout=subprocess.PIPE,
360:                              stderr=subprocess.PIPE)
361:         stdout, stderr = s.communicate()
362:         line = stdout.decode('ascii').split('\n')[0]
363:         pattern = r'3\.1\d+'
364:         match = re.search(pattern, line)
365:         v = match.group(0)
366:         return v
367:     except (IndexError, ValueError, AttributeError, OSError):
368:         return None
369: 
370: 
371: def checkdep_pdftops():
372:     try:
373:         s = subprocess.Popen([str('pdftops'), '-v'], stdout=subprocess.PIPE,
374:                              stderr=subprocess.PIPE)
375:         stdout, stderr = s.communicate()
376:         lines = stderr.decode('ascii').split('\n')
377:         for line in lines:
378:             if 'version' in line:
379:                 v = line.split()[-1]
380:         return v
381:     except (IndexError, ValueError, UnboundLocalError, OSError):
382:         return None
383: 
384: 
385: def checkdep_inkscape():
386:     if checkdep_inkscape.version is None:
387:         try:
388:             s = subprocess.Popen([str('inkscape'), '-V'],
389:                                  stdout=subprocess.PIPE,
390:                                  stderr=subprocess.PIPE)
391:             stdout, stderr = s.communicate()
392:             lines = stdout.decode('ascii').split('\n')
393:             for line in lines:
394:                 if 'Inkscape' in line:
395:                     v = line.split()[1]
396:                     break
397:             checkdep_inkscape.version = v
398:         except (IndexError, ValueError, UnboundLocalError, OSError):
399:             pass
400:     return checkdep_inkscape.version
401: checkdep_inkscape.version = None
402: 
403: 
404: @cbook.deprecated("2.1")
405: def checkdep_xmllint():
406:     try:
407:         s = subprocess.Popen([str('xmllint'), '--version'],
408:                              stdout=subprocess.PIPE,
409:                              stderr=subprocess.PIPE)
410:         stdout, stderr = s.communicate()
411:         lines = stderr.decode('ascii').split('\n')
412:         for line in lines:
413:             if 'version' in line:
414:                 v = line.split()[-1]
415:                 break
416:         return v
417:     except (IndexError, ValueError, UnboundLocalError, OSError):
418:         return None
419: 
420: 
421: def checkdep_ps_distiller(s):
422:     if not s:
423:         return False
424: 
425:     flag = True
426:     gs_req = '8.60'
427:     gs_exec, gs_v = checkdep_ghostscript()
428:     if not compare_versions(gs_v, gs_req):
429:         flag = False
430:         warnings.warn(('matplotlibrc ps.usedistiller option can not be used '
431:                        'unless ghostscript-%s or later is installed on your '
432:                        'system') % gs_req)
433: 
434:     if s == 'xpdf':
435:         pdftops_req = '3.0'
436:         pdftops_req_alt = '0.9'  # poppler version numbers, ugh
437:         pdftops_v = checkdep_pdftops()
438:         if compare_versions(pdftops_v, pdftops_req):
439:             pass
440:         elif (compare_versions(pdftops_v, pdftops_req_alt) and not
441:               compare_versions(pdftops_v, '1.0')):
442:             pass
443:         else:
444:             flag = False
445:             warnings.warn(('matplotlibrc ps.usedistiller can not be set to '
446:                            'xpdf unless xpdf-%s or later is installed on '
447:                            'your system') % pdftops_req)
448: 
449:     if flag:
450:         return s
451:     else:
452:         return False
453: 
454: 
455: def checkdep_usetex(s):
456:     if not s:
457:         return False
458: 
459:     gs_req = '8.60'
460:     dvipng_req = '1.6'
461:     flag = True
462: 
463:     if _backports.which("tex") is None:
464:         flag = False
465:         warnings.warn('matplotlibrc text.usetex option can not be used unless '
466:                       'TeX is installed on your system')
467: 
468:     dvipng_v = checkdep_dvipng()
469:     if not compare_versions(dvipng_v, dvipng_req):
470:         flag = False
471:         warnings.warn('matplotlibrc text.usetex can not be used with *Agg '
472:                       'backend unless dvipng-%s or later is installed on '
473:                       'your system' % dvipng_req)
474: 
475:     gs_exec, gs_v = checkdep_ghostscript()
476:     if not compare_versions(gs_v, gs_req):
477:         flag = False
478:         warnings.warn('matplotlibrc text.usetex can not be used unless '
479:                       'ghostscript-%s or later is installed on your system'
480:                       % gs_req)
481: 
482:     return flag
483: 
484: 
485: def _get_home():
486:     '''Find user's home directory if possible.
487:     Otherwise, returns None.
488: 
489:     :see:
490:         http://mail.python.org/pipermail/python-list/2005-February/325395.html
491:     '''
492:     if six.PY2 and sys.platform == 'win32':
493:         path = os.path.expanduser(b"~").decode(sys.getfilesystemencoding())
494:     else:
495:         path = os.path.expanduser("~")
496:     if os.path.isdir(path):
497:         return path
498:     for evar in ('HOME', 'USERPROFILE', 'TMP'):
499:         path = os.environ.get(evar)
500:         if path is not None and os.path.isdir(path):
501:             return path
502:     return None
503: 
504: 
505: def _create_tmp_config_dir():
506:     '''
507:     If the config directory can not be created, create a temporary
508:     directory.
509:     '''
510:     configdir = os.environ['MPLCONFIGDIR'] = (
511:         tempfile.mkdtemp(prefix='matplotlib-'))
512:     return configdir
513: 
514: 
515: get_home = verbose.wrap('$HOME=%s', _get_home, always=False)
516: 
517: 
518: def _get_xdg_config_dir():
519:     '''
520:     Returns the XDG configuration directory, according to the `XDG
521:     base directory spec
522:     <http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html>`_.
523:     '''
524:     path = os.environ.get('XDG_CONFIG_HOME')
525:     if path is None:
526:         path = get_home()
527:         if path is not None:
528:             path = os.path.join(path, '.config')
529:     return path
530: 
531: 
532: def _get_xdg_cache_dir():
533:     '''
534:     Returns the XDG cache directory, according to the `XDG
535:     base directory spec
536:     <http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html>`_.
537:     '''
538:     path = os.environ.get('XDG_CACHE_HOME')
539:     if path is None:
540:         path = get_home()
541:         if path is not None:
542:             path = os.path.join(path, '.cache')
543:     return path
544: 
545: 
546: def _get_config_or_cache_dir(xdg_base):
547:     from matplotlib.cbook import mkdirs
548: 
549:     configdir = os.environ.get('MPLCONFIGDIR')
550:     if configdir is not None:
551:         configdir = os.path.abspath(configdir)
552:         if not os.path.exists(configdir):
553:             mkdirs(configdir)
554: 
555:         if not _is_writable_dir(configdir):
556:             return _create_tmp_config_dir()
557:         return configdir
558: 
559:     p = None
560:     h = get_home()
561:     if h is not None:
562:         p = os.path.join(h, '.matplotlib')
563:     if sys.platform.startswith(('linux', 'freebsd')):
564:         p = None
565:         if xdg_base is not None:
566:             p = os.path.join(xdg_base, 'matplotlib')
567: 
568:     if p is not None:
569:         if os.path.exists(p):
570:             if _is_writable_dir(p):
571:                 return p
572:         else:
573:             try:
574:                 mkdirs(p)
575:             except OSError:
576:                 pass
577:             else:
578:                 return p
579: 
580:     return _create_tmp_config_dir()
581: 
582: 
583: def _get_configdir():
584:     '''
585:     Return the string representing the configuration directory.
586: 
587:     The directory is chosen as follows:
588: 
589:     1. If the MPLCONFIGDIR environment variable is supplied, choose that.
590: 
591:     2a. On Linux, follow the XDG specification and look first in
592:         `$XDG_CONFIG_HOME`, if defined, or `$HOME/.config`.
593: 
594:     2b. On other platforms, choose `$HOME/.matplotlib`.
595: 
596:     3. If the chosen directory exists and is writable, use that as the
597:        configuration directory.
598:     4. If possible, create a temporary directory, and use it as the
599:        configuration directory.
600:     5. A writable directory could not be found or created; return None.
601:     '''
602:     return _get_config_or_cache_dir(_get_xdg_config_dir())
603: 
604: get_configdir = verbose.wrap('CONFIGDIR=%s', _get_configdir, always=False)
605: 
606: 
607: def _get_cachedir():
608:     '''
609:     Return the location of the cache directory.
610: 
611:     The procedure used to find the directory is the same as for
612:     _get_config_dir, except using `$XDG_CACHE_HOME`/`~/.cache` instead.
613:     '''
614:     return _get_config_or_cache_dir(_get_xdg_cache_dir())
615: 
616: get_cachedir = verbose.wrap('CACHEDIR=%s', _get_cachedir, always=False)
617: 
618: 
619: def _decode_filesystem_path(path):
620:     if isinstance(path, bytes):
621:         return path.decode(sys.getfilesystemencoding())
622:     else:
623:         return path
624: 
625: 
626: def _get_data_path():
627:     'get the path to matplotlib data'
628: 
629:     if 'MATPLOTLIBDATA' in os.environ:
630:         path = os.environ['MATPLOTLIBDATA']
631:         if not os.path.isdir(path):
632:             raise RuntimeError('Path in environment MATPLOTLIBDATA not a '
633:                                'directory')
634:         return path
635: 
636:     _file = _decode_filesystem_path(__file__)
637:     path = os.sep.join([os.path.dirname(_file), 'mpl-data'])
638:     if os.path.isdir(path):
639:         return path
640: 
641:     # setuptools' namespace_packages may highjack this init file
642:     # so need to try something known to be in matplotlib, not basemap
643:     import matplotlib.afm
644:     _file = _decode_filesystem_path(matplotlib.afm.__file__)
645:     path = os.sep.join([os.path.dirname(_file), 'mpl-data'])
646:     if os.path.isdir(path):
647:         return path
648: 
649:     # py2exe zips pure python, so still need special check
650:     if getattr(sys, 'frozen', None):
651:         exe_path = os.path.dirname(_decode_filesystem_path(sys.executable))
652:         path = os.path.join(exe_path, 'mpl-data')
653:         if os.path.isdir(path):
654:             return path
655: 
656:         # Try again assuming we need to step up one more directory
657:         path = os.path.join(os.path.split(exe_path)[0], 'mpl-data')
658:         if os.path.isdir(path):
659:             return path
660: 
661:         # Try again assuming sys.path[0] is a dir not a exe
662:         path = os.path.join(sys.path[0], 'mpl-data')
663:         if os.path.isdir(path):
664:             return path
665: 
666:     raise RuntimeError('Could not find the matplotlib data files')
667: 
668: 
669: def _get_data_path_cached():
670:     if defaultParams['datapath'][0] is None:
671:         defaultParams['datapath'][0] = _get_data_path()
672:     return defaultParams['datapath'][0]
673: 
674: get_data_path = verbose.wrap('matplotlib data path %s', _get_data_path_cached,
675:                              always=False)
676: 
677: 
678: def get_py2exe_datafiles():
679:     datapath = get_data_path()
680:     _, tail = os.path.split(datapath)
681:     d = {}
682:     for root, _, files in os.walk(datapath):
683:         # Need to explicitly remove cocoa_agg files or py2exe complains
684:         # NOTE I dont know why, but do as previous version
685:         if 'Matplotlib.nib' in files:
686:             files.remove('Matplotlib.nib')
687:         files = [os.path.join(root, filename) for filename in files]
688:         root = root.replace(tail, 'mpl-data')
689:         root = root[root.index('mpl-data'):]
690:         d[root] = files
691:     return list(d.items())
692: 
693: 
694: def matplotlib_fname():
695:     '''
696:     Get the location of the config file.
697: 
698:     The file location is determined in the following order
699: 
700:     - `$PWD/matplotlibrc`
701: 
702:     - `$MATPLOTLIBRC` if it is a file
703: 
704:     - `$MATPLOTLIBRC/matplotlibrc`
705: 
706:     - `$MPLCONFIGDIR/matplotlibrc`
707: 
708:     - On Linux,
709: 
710:           - `$XDG_CONFIG_HOME/matplotlib/matplotlibrc` (if
711:             $XDG_CONFIG_HOME is defined)
712: 
713:           - or `$HOME/.config/matplotlib/matplotlibrc` (if
714:             $XDG_CONFIG_HOME is not defined)
715: 
716:     - On other platforms,
717: 
718:          - `$HOME/.matplotlib/matplotlibrc` if `$HOME` is defined.
719: 
720:     - Lastly, it looks in `$MATPLOTLIBDATA/matplotlibrc` for a
721:       system-defined copy.
722:     '''
723: 
724:     def gen_candidates():
725:         yield os.path.join(six.moves.getcwd(), 'matplotlibrc')
726:         try:
727:             matplotlibrc = os.environ['MATPLOTLIBRC']
728:         except KeyError:
729:             pass
730:         else:
731:             yield matplotlibrc
732:             yield os.path.join(matplotlibrc, 'matplotlibrc')
733:         yield os.path.join(_get_configdir(), 'matplotlibrc')
734:         yield os.path.join(get_data_path(), 'matplotlibrc')
735: 
736:     for fname in gen_candidates():
737:         if os.path.isfile(fname):
738:             break
739:     # Return first candidate that is a file, or last candidate if none is
740:     # valid (in that case, a warning is raised at startup by `rc_params`).
741:     return fname
742: 
743: 
744: # names of keys to deprecate
745: # the values are a tuple of (new_name, f_old_2_new, f_new_2_old)
746: # the inverse function may be `None`
747: _deprecated_map = {
748:     'text.fontstyle':   ('font.style', lambda x: x, None),
749:     'text.fontangle':   ('font.style', lambda x: x, None),
750:     'text.fontvariant': ('font.variant', lambda x: x, None),
751:     'text.fontweight':  ('font.weight', lambda x: x, None),
752:     'text.fontsize':    ('font.size', lambda x: x, None),
753:     'tick.size':        ('tick.major.size', lambda x: x, None),
754:     'svg.embed_char_paths': ('svg.fonttype',
755:                              lambda x: "path" if x else "none", None),
756:     'axes.color_cycle': ('axes.prop_cycle', lambda x: cycler('color', x),
757:                          lambda x: [c.get('color', None) for c in x]),
758:     'svg.image_noscale': ('image.interpolation', None, None),
759:     }
760: 
761: _deprecated_ignore_map = {}
762: 
763: _obsolete_set = {'text.dvipnghack', 'legend.isaxes'}
764: 
765: # The following may use a value of None to suppress the warning.
766: _deprecated_set = {'axes.hold'}  # do NOT include in _all_deprecated
767: 
768: _all_deprecated = set(itertools.chain(
769:     _deprecated_ignore_map, _deprecated_map, _obsolete_set))
770: 
771: 
772: class RcParams(MutableMapping, dict):
773: 
774:     '''
775:     A dictionary object including validation
776: 
777:     validating functions are defined and associated with rc parameters in
778:     :mod:`matplotlib.rcsetup`
779:     '''
780: 
781:     validate = dict((key, converter) for key, (default, converter) in
782:                     six.iteritems(defaultParams)
783:                     if key not in _all_deprecated)
784:     msg_depr = "%s is deprecated and replaced with %s; please use the latter."
785:     msg_depr_set = ("%s is deprecated. Please remove it from your "
786:                     "matplotlibrc and/or style files.")
787:     msg_depr_ignore = "%s is deprecated and ignored. Use %s"
788:     msg_obsolete = ("%s is obsolete. Please remove it from your matplotlibrc "
789:                     "and/or style files.")
790: 
791:     # validate values on the way in
792:     def __init__(self, *args, **kwargs):
793:         self.update(*args, **kwargs)
794: 
795:     def __setitem__(self, key, val):
796:         try:
797:             if key in _deprecated_map:
798:                 alt_key, alt_val, inverse_alt = _deprecated_map[key]
799:                 warnings.warn(self.msg_depr % (key, alt_key),
800:                               mplDeprecation)
801:                 key = alt_key
802:                 val = alt_val(val)
803:             elif key in _deprecated_set and val is not None:
804:                 warnings.warn(self.msg_depr_set % key,
805:                               mplDeprecation)
806:             elif key in _deprecated_ignore_map:
807:                 alt = _deprecated_ignore_map[key]
808:                 warnings.warn(self.msg_depr_ignore % (key, alt),
809:                               mplDeprecation)
810:                 return
811:             elif key in _obsolete_set:
812:                 warnings.warn(self.msg_obsolete % (key, ),
813:                               mplDeprecation)
814:                 return
815:             try:
816:                 cval = self.validate[key](val)
817:             except ValueError as ve:
818:                 raise ValueError("Key %s: %s" % (key, str(ve)))
819:             dict.__setitem__(self, key, cval)
820:         except KeyError:
821:             raise KeyError(
822:                 '%s is not a valid rc parameter. See rcParams.keys() for a '
823:                 'list of valid parameters.' % (key,))
824: 
825:     def __getitem__(self, key):
826:         inverse_alt = None
827:         if key in _deprecated_map:
828:             alt_key, alt_val, inverse_alt = _deprecated_map[key]
829:             warnings.warn(self.msg_depr % (key, alt_key),
830:                           mplDeprecation)
831:             key = alt_key
832: 
833:         elif key in _deprecated_ignore_map:
834:             alt = _deprecated_ignore_map[key]
835:             warnings.warn(self.msg_depr_ignore % (key, alt),
836:                           mplDeprecation)
837:             key = alt
838: 
839:         elif key in _obsolete_set:
840:             warnings.warn(self.msg_obsolete % (key, ),
841:                           mplDeprecation)
842:             return None
843: 
844:         val = dict.__getitem__(self, key)
845:         if inverse_alt is not None:
846:             return inverse_alt(val)
847:         else:
848:             return val
849: 
850:     def __repr__(self):
851:         import pprint
852:         class_name = self.__class__.__name__
853:         indent = len(class_name) + 1
854:         repr_split = pprint.pformat(dict(self), indent=1,
855:                                     width=80 - indent).split('\n')
856:         repr_indented = ('\n' + ' ' * indent).join(repr_split)
857:         return '{0}({1})'.format(class_name, repr_indented)
858: 
859:     def __str__(self):
860:         return '\n'.join('{0}: {1}'.format(k, v)
861:                          for k, v in sorted(self.items()))
862: 
863:     def __iter__(self):
864:         '''
865:         Yield sorted list of keys.
866:         '''
867:         for k in sorted(dict.__iter__(self)):
868:             yield k
869: 
870:     def find_all(self, pattern):
871:         '''
872:         Return the subset of this RcParams dictionary whose keys match,
873:         using :func:`re.search`, the given ``pattern``.
874: 
875:         .. note::
876: 
877:             Changes to the returned dictionary are *not* propagated to
878:             the parent RcParams dictionary.
879: 
880:         '''
881:         import re
882:         pattern_re = re.compile(pattern)
883:         return RcParams((key, value)
884:                         for key, value in self.items()
885:                         if pattern_re.search(key))
886: 
887: 
888: def rc_params(fail_on_error=False):
889:     '''Return a :class:`matplotlib.RcParams` instance from the
890:     default matplotlib rc file.
891:     '''
892:     fname = matplotlib_fname()
893:     if not os.path.exists(fname):
894:         # this should never happen, default in mpl-data should always be found
895:         message = 'could not find rc file; returning defaults'
896:         ret = RcParams([(key, default) for key, (default, _) in
897:                         six.iteritems(defaultParams)
898:                         if key not in _all_deprecated])
899:         warnings.warn(message)
900:         return ret
901: 
902:     return rc_params_from_file(fname, fail_on_error)
903: 
904: 
905: URL_REGEX = re.compile(r'http://|https://|ftp://|file://|file:\\')
906: 
907: 
908: def is_url(filename):
909:     '''Return True if string is an http, ftp, or file URL path.'''
910:     return URL_REGEX.match(filename) is not None
911: 
912: 
913: def _url_lines(f):
914:     # Compatibility for urlopen in python 3, which yields bytes.
915:     for line in f:
916:         yield line.decode('utf8')
917: 
918: 
919: @contextlib.contextmanager
920: def _open_file_or_url(fname):
921:     if is_url(fname):
922:         f = urlopen(fname)
923:         yield _url_lines(f)
924:         f.close()
925:     else:
926:         fname = os.path.expanduser(fname)
927:         encoding = locale.getpreferredencoding(do_setlocale=False)
928:         if encoding is None:
929:             encoding = "utf-8"
930:         with io.open(fname, encoding=encoding) as f:
931:             yield f
932: 
933: 
934: _error_details_fmt = 'line #%d\n\t"%s"\n\tin file "%s"'
935: 
936: 
937: def _rc_params_in_file(fname, fail_on_error=False):
938:     '''Return :class:`matplotlib.RcParams` from the contents of the given file.
939: 
940:     Unlike `rc_params_from_file`, the configuration class only contains the
941:     parameters specified in the file (i.e. default values are not filled in).
942:     '''
943:     cnt = 0
944:     rc_temp = {}
945:     with _open_file_or_url(fname) as fd:
946:         try:
947:             for line in fd:
948:                 cnt += 1
949:                 strippedline = line.split('#', 1)[0].strip()
950:                 if not strippedline:
951:                     continue
952:                 tup = strippedline.split(':', 1)
953:                 if len(tup) != 2:
954:                     error_details = _error_details_fmt % (cnt, line, fname)
955:                     warnings.warn('Illegal %s' % error_details)
956:                     continue
957:                 key, val = tup
958:                 key = key.strip()
959:                 val = val.strip()
960:                 if key in rc_temp:
961:                     warnings.warn('Duplicate key in file "%s", line #%d' %
962:                                   (fname, cnt))
963:                 rc_temp[key] = (val, line, cnt)
964:         except UnicodeDecodeError:
965:             warnings.warn(
966:                 ('Cannot decode configuration file %s with '
967:                  'encoding %s, check LANG and LC_* variables')
968:                 % (fname, locale.getpreferredencoding(do_setlocale=False) or
969:                    'utf-8 (default)'))
970:             raise
971: 
972:     config = RcParams()
973: 
974:     for key in ('verbose.level', 'verbose.fileo'):
975:         if key in rc_temp:
976:             val, line, cnt = rc_temp.pop(key)
977:             if fail_on_error:
978:                 config[key] = val  # try to convert to proper type or raise
979:             else:
980:                 try:
981:                     config[key] = val  # try to convert to proper type or skip
982:                 except Exception as msg:
983:                     error_details = _error_details_fmt % (cnt, line, fname)
984:                     warnings.warn('Bad val "%s" on %s\n\t%s' %
985:                                   (val, error_details, msg))
986: 
987:     for key, (val, line, cnt) in six.iteritems(rc_temp):
988:         if key in defaultParams:
989:             if fail_on_error:
990:                 config[key] = val  # try to convert to proper type or raise
991:             else:
992:                 try:
993:                     config[key] = val  # try to convert to proper type or skip
994:                 except Exception as msg:
995:                     error_details = _error_details_fmt % (cnt, line, fname)
996:                     warnings.warn('Bad val "%s" on %s\n\t%s' %
997:                                   (val, error_details, msg))
998:         elif key in _deprecated_ignore_map:
999:             warnings.warn('%s is deprecated. Update your matplotlibrc to use '
1000:                           '%s instead.' % (key, _deprecated_ignore_map[key]),
1001:                           mplDeprecation)
1002: 
1003:         else:
1004:             print('''
1005: Bad key "%s" on line %d in
1006: %s.
1007: You probably need to get an updated matplotlibrc file from
1008: http://github.com/matplotlib/matplotlib/blob/master/matplotlibrc.template
1009: or from the matplotlib source distribution''' % (key, cnt, fname),
1010:                   file=sys.stderr)
1011: 
1012:     return config
1013: 
1014: 
1015: def rc_params_from_file(fname, fail_on_error=False, use_default_template=True):
1016:     '''Return :class:`matplotlib.RcParams` from the contents of the given file.
1017: 
1018:     Parameters
1019:     ----------
1020:     fname : str
1021:         Name of file parsed for matplotlib settings.
1022:     fail_on_error : bool
1023:         If True, raise an error when the parser fails to convert a parameter.
1024:     use_default_template : bool
1025:         If True, initialize with default parameters before updating with those
1026:         in the given file. If False, the configuration class only contains the
1027:         parameters specified in the file. (Useful for updating dicts.)
1028:     '''
1029:     config_from_file = _rc_params_in_file(fname, fail_on_error)
1030: 
1031:     if not use_default_template:
1032:         return config_from_file
1033: 
1034:     iter_params = six.iteritems(defaultParams)
1035:     config = RcParams([(key, default) for key, (default, _) in iter_params
1036:                                       if key not in _all_deprecated])
1037:     config.update(config_from_file)
1038: 
1039:     verbose.set_level(config['verbose.level'])
1040:     verbose.set_fileo(config['verbose.fileo'])
1041: 
1042:     if config['datapath'] is None:
1043:         config['datapath'] = get_data_path()
1044: 
1045:     if "".join(config['text.latex.preamble']):
1046:         verbose.report('''
1047: *****************************************************************
1048: You have the following UNSUPPORTED LaTeX preamble customizations:
1049: %s
1050: Please do not ask for support with these customizations active.
1051: *****************************************************************
1052: ''' % '\n'.join(config['text.latex.preamble']), 'helpful')
1053: 
1054:     verbose.report('loaded rc file %s' % fname)
1055: 
1056:     return config
1057: 
1058: 
1059: # this is the instance used by the matplotlib classes
1060: rcParams = rc_params()
1061: 
1062: if rcParams['examples.directory']:
1063:     # paths that are intended to be relative to matplotlib_fname()
1064:     # are allowed for the examples.directory parameter.
1065:     # However, we will need to fully qualify the path because
1066:     # Sphinx requires absolute paths.
1067:     if not os.path.isabs(rcParams['examples.directory']):
1068:         _basedir, _fname = os.path.split(matplotlib_fname())
1069:         # Sometimes matplotlib_fname() can return relative paths,
1070:         # Also, using realpath() guarentees that Sphinx will use
1071:         # the same path that matplotlib sees (in case of weird symlinks).
1072:         _basedir = os.path.realpath(_basedir)
1073:         _fullpath = os.path.join(_basedir, rcParams['examples.directory'])
1074:         rcParams['examples.directory'] = _fullpath
1075: 
1076: rcParamsOrig = rcParams.copy()
1077: 
1078: rcParamsDefault = RcParams([(key, default) for key, (default, converter) in
1079:                             six.iteritems(defaultParams)
1080:                             if key not in _all_deprecated])
1081: 
1082: rcParams['ps.usedistiller'] = checkdep_ps_distiller(
1083:                       rcParams['ps.usedistiller'])
1084: 
1085: rcParams['text.usetex'] = checkdep_usetex(rcParams['text.usetex'])
1086: 
1087: if rcParams['axes.formatter.use_locale']:
1088:     locale.setlocale(locale.LC_ALL, '')
1089: 
1090: 
1091: def rc(group, **kwargs):
1092:     '''
1093:     Set the current rc params.  Group is the grouping for the rc, e.g.,
1094:     for ``lines.linewidth`` the group is ``lines``, for
1095:     ``axes.facecolor``, the group is ``axes``, and so on.  Group may
1096:     also be a list or tuple of group names, e.g., (*xtick*, *ytick*).
1097:     *kwargs* is a dictionary attribute name/value pairs, e.g.,::
1098: 
1099:       rc('lines', linewidth=2, color='r')
1100: 
1101:     sets the current rc params and is equivalent to::
1102: 
1103:       rcParams['lines.linewidth'] = 2
1104:       rcParams['lines.color'] = 'r'
1105: 
1106:     The following aliases are available to save typing for interactive
1107:     users:
1108: 
1109:     =====   =================
1110:     Alias   Property
1111:     =====   =================
1112:     'lw'    'linewidth'
1113:     'ls'    'linestyle'
1114:     'c'     'color'
1115:     'fc'    'facecolor'
1116:     'ec'    'edgecolor'
1117:     'mew'   'markeredgewidth'
1118:     'aa'    'antialiased'
1119:     =====   =================
1120: 
1121:     Thus you could abbreviate the above rc command as::
1122: 
1123:           rc('lines', lw=2, c='r')
1124: 
1125: 
1126:     Note you can use python's kwargs dictionary facility to store
1127:     dictionaries of default parameters.  e.g., you can customize the
1128:     font rc as follows::
1129: 
1130:       font = {'family' : 'monospace',
1131:               'weight' : 'bold',
1132:               'size'   : 'larger'}
1133: 
1134:       rc('font', **font)  # pass in the font dict as kwargs
1135: 
1136:     This enables you to easily switch between several configurations.  Use
1137:     ``matplotlib.style.use('default')`` or :func:`~matplotlib.rcdefaults` to
1138:     restore the default rc params after changes.
1139:     '''
1140: 
1141:     aliases = {
1142:         'lw':  'linewidth',
1143:         'ls':  'linestyle',
1144:         'c':   'color',
1145:         'fc':  'facecolor',
1146:         'ec':  'edgecolor',
1147:         'mew': 'markeredgewidth',
1148:         'aa':  'antialiased',
1149:         }
1150: 
1151:     if isinstance(group, six.string_types):
1152:         group = (group,)
1153:     for g in group:
1154:         for k, v in six.iteritems(kwargs):
1155:             name = aliases.get(k) or k
1156:             key = '%s.%s' % (g, name)
1157:             try:
1158:                 rcParams[key] = v
1159:             except KeyError:
1160:                 raise KeyError(('Unrecognized key "%s" for group "%s" and '
1161:                                 'name "%s"') % (key, g, name))
1162: 
1163: 
1164: def rcdefaults():
1165:     '''Restore the rc params from Matplotlib's internal defaults.
1166: 
1167:     See Also
1168:     --------
1169:     rc_file_defaults :
1170:         Restore the rc params from the rc file originally loaded by Matplotlib.
1171:     matplotlib.style.use :
1172:         Use a specific style file.  Call ``style.use('default')`` to restore
1173:         the default style.
1174:     '''
1175:     rcParams.clear()
1176:     rcParams.update(rcParamsDefault)
1177: 
1178: 
1179: def rc_file_defaults():
1180:     '''Restore the rc params from the original rc file loaded by Matplotlib.
1181:     '''
1182:     rcParams.update(rcParamsOrig)
1183: 
1184: 
1185: def rc_file(fname):
1186:     '''
1187:     Update rc params from file.
1188:     '''
1189:     rcParams.update(rc_params_from_file(fname))
1190: 
1191: 
1192: @contextlib.contextmanager
1193: def rc_context(rc=None, fname=None):
1194:     '''
1195:     Return a context manager for managing rc settings.
1196: 
1197:     This allows one to do::
1198: 
1199:         with mpl.rc_context(fname='screen.rc'):
1200:             plt.plot(x, a)
1201:             with mpl.rc_context(fname='print.rc'):
1202:                 plt.plot(x, b)
1203:             plt.plot(x, c)
1204: 
1205:     The 'a' vs 'x' and 'c' vs 'x' plots would have settings from
1206:     'screen.rc', while the 'b' vs 'x' plot would have settings from
1207:     'print.rc'.
1208: 
1209:     A dictionary can also be passed to the context manager::
1210: 
1211:         with mpl.rc_context(rc={'text.usetex': True}, fname='screen.rc'):
1212:             plt.plot(x, a)
1213: 
1214:     The 'rc' dictionary takes precedence over the settings loaded from
1215:     'fname'.  Passing a dictionary only is also valid. For example a
1216:     common usage is::
1217: 
1218:         with mpl.rc_context(rc={'interactive': False}):
1219:             fig, ax = plt.subplots()
1220:             ax.plot(range(3), range(3))
1221:             fig.savefig('A.png', format='png')
1222:             plt.close(fig)
1223: 
1224:     '''
1225: 
1226:     orig = rcParams.copy()
1227:     try:
1228:         if fname:
1229:             rc_file(fname)
1230:         if rc:
1231:             rcParams.update(rc)
1232:         yield
1233:     finally:
1234:         # No need to revalidate the original values.
1235:         dict.update(rcParams, orig)
1236: 
1237: 
1238: _use_error_msg = '''
1239: This call to matplotlib.use() has no effect because the backend has already
1240: been chosen; matplotlib.use() must be called *before* pylab, matplotlib.pyplot,
1241: or matplotlib.backends is imported for the first time.
1242: 
1243: The backend was *originally* set to {backend!r} by the following code:
1244: {tb}
1245: '''
1246: 
1247: 
1248: def use(arg, warn=True, force=False):
1249:     '''
1250:     Set the matplotlib backend to one of the known backends.
1251: 
1252:     The argument is case-insensitive. *warn* specifies whether a
1253:     warning should be issued if a backend has already been set up.
1254:     *force* is an **experimental** flag that tells matplotlib to
1255:     attempt to initialize a new backend by reloading the backend
1256:     module.
1257: 
1258:     .. note::
1259: 
1260:         This function must be called *before* importing pyplot for
1261:         the first time; or, if you are not using pyplot, it must be called
1262:         before importing matplotlib.backends.  If warn is True, a warning
1263:         is issued if you try and call this after pylab or pyplot have been
1264:         loaded.  In certain black magic use cases, e.g.
1265:         :func:`pyplot.switch_backend`, we are doing the reloading necessary to
1266:         make the backend switch work (in some cases, e.g., pure image
1267:         backends) so one can set warn=False to suppress the warnings.
1268: 
1269:     To find out which backend is currently set, see
1270:     :func:`matplotlib.get_backend`.
1271: 
1272:     '''
1273:     # Lets determine the proper backend name first
1274:     if arg.startswith('module://'):
1275:         name = arg
1276:     else:
1277:         # Lowercase only non-module backend names (modules are case-sensitive)
1278:         arg = arg.lower()
1279:         name = validate_backend(arg)
1280: 
1281:     # Check if we've already set up a backend
1282:     if 'matplotlib.backends' in sys.modules:
1283:         # Warn only if called with a different name
1284:         if (rcParams['backend'] != name) and warn:
1285:             import matplotlib.backends
1286:             warnings.warn(
1287:                 _use_error_msg.format(
1288:                     backend=rcParams['backend'],
1289:                     tb=matplotlib.backends._backend_loading_tb),
1290:                 stacklevel=2)
1291: 
1292:         # Unless we've been told to force it, just return
1293:         if not force:
1294:             return
1295:         need_reload = True
1296:     else:
1297:         need_reload = False
1298: 
1299:     # Store the backend name
1300:     rcParams['backend'] = name
1301: 
1302:     # If needed we reload here because a lot of setup code is triggered on
1303:     # module import. See backends/__init__.py for more detail.
1304:     if need_reload:
1305:         reload(sys.modules['matplotlib.backends'])
1306: 
1307: 
1308: try:
1309:     use(os.environ['MPLBACKEND'])
1310: except KeyError:
1311:     pass
1312: 
1313: 
1314: def get_backend():
1315:     '''Return the name of the current backend.'''
1316:     return rcParams['backend']
1317: 
1318: 
1319: def interactive(b):
1320:     '''
1321:     Set interactive mode to boolean b.
1322: 
1323:     If b is True, then draw after every plotting command, e.g., after xlabel
1324:     '''
1325:     rcParams['interactive'] = b
1326: 
1327: 
1328: def is_interactive():
1329:     'Return true if plot mode is interactive'
1330:     return rcParams['interactive']
1331: 
1332: 
1333: def tk_window_focus():
1334:     '''Return true if focus maintenance under TkAgg on win32 is on.
1335:      This currently works only for python.exe and IPython.exe.
1336:      Both IDLE and Pythonwin.exe fail badly when tk_window_focus is on.'''
1337:     if rcParams['backend'] != 'TkAgg':
1338:         return False
1339:     return rcParams['tk.window_focus']
1340: 
1341: 
1342: default_test_modules = [
1343:     'matplotlib.tests',
1344:     'matplotlib.sphinxext.tests',
1345:     'mpl_toolkits.tests',
1346: ]
1347: 
1348: 
1349: def _init_tests():
1350:     try:
1351:         import faulthandler
1352:     except ImportError:
1353:         pass
1354:     else:
1355:         faulthandler.enable()
1356: 
1357:     # The version of FreeType to install locally for running the
1358:     # tests.  This must match the value in `setupext.py`
1359:     LOCAL_FREETYPE_VERSION = '2.6.1'
1360: 
1361:     from matplotlib import ft2font
1362:     if (ft2font.__freetype_version__ != LOCAL_FREETYPE_VERSION or
1363:         ft2font.__freetype_build_type__ != 'local'):
1364:         warnings.warn(
1365:             "Matplotlib is not built with the correct FreeType version to run "
1366:             "tests.  Set local_freetype=True in setup.cfg and rebuild. "
1367:             "Expect many image comparison failures below. "
1368:             "Expected freetype version {0}. "
1369:             "Found freetype version {1}. "
1370:             "Freetype build type is {2}local".format(
1371:                 LOCAL_FREETYPE_VERSION,
1372:                 ft2font.__freetype_version__,
1373:                 "" if ft2font.__freetype_build_type__ == 'local' else "not "
1374:             )
1375:         )
1376: 
1377:     try:
1378:         import pytest
1379:         try:
1380:             from unittest import mock
1381:         except ImportError:
1382:             import mock
1383:     except ImportError:
1384:         print("matplotlib.test requires pytest and mock to run.")
1385:         raise
1386: 
1387: 
1388: def test(verbosity=None, coverage=False, switch_backend_warn=True,
1389:          recursionlimit=0, **kwargs):
1390:     '''run the matplotlib test suite'''
1391:     _init_tests()
1392:     if not os.path.isdir(os.path.join(os.path.dirname(__file__), 'tests')):
1393:         raise ImportError("Matplotlib test data is not installed")
1394: 
1395:     old_backend = get_backend()
1396:     old_recursionlimit = sys.getrecursionlimit()
1397:     try:
1398:         use('agg')
1399:         if recursionlimit:
1400:             sys.setrecursionlimit(recursionlimit)
1401:         import pytest
1402: 
1403:         args = kwargs.pop('argv', [])
1404:         provide_default_modules = True
1405:         use_pyargs = True
1406:         for arg in args:
1407:             if any(arg.startswith(module_path)
1408:                    for module_path in default_test_modules):
1409:                 provide_default_modules = False
1410:                 break
1411:             if os.path.exists(arg):
1412:                 provide_default_modules = False
1413:                 use_pyargs = False
1414:                 break
1415:         if use_pyargs:
1416:             args += ['--pyargs']
1417:         if provide_default_modules:
1418:             args += default_test_modules
1419: 
1420:         if coverage:
1421:             args += ['--cov']
1422: 
1423:         if verbosity:
1424:             args += ['-' + 'v' * verbosity]
1425: 
1426:         retcode = pytest.main(args, **kwargs)
1427:     finally:
1428:         if old_backend.lower() != 'agg':
1429:             use(old_backend, warn=switch_backend_warn)
1430:         if recursionlimit:
1431:             sys.setrecursionlimit(old_recursionlimit)
1432: 
1433:     return retcode
1434: 
1435: 
1436: test.__test__ = False  # pytest: this function is not a test
1437: 
1438: 
1439: def _replacer(data, key):
1440:     '''Either returns data[key] or passes data back. Also
1441:     converts input data to a sequence as needed.
1442:     '''
1443:     # if key isn't a string don't bother
1444:     if not isinstance(key, six.string_types):
1445:         return (key)
1446:     # try to use __getitem__
1447:     try:
1448:         return sanitize_sequence(data[key])
1449:     # key does not exist, silently fall back to key
1450:     except KeyError:
1451:         return key
1452: 
1453: 
1454: _DATA_DOC_APPENDIX = '''
1455: 
1456: .. note::
1457:     In addition to the above described arguments, this function can take a
1458:     **data** keyword argument. If such a **data** argument is given, the
1459:     following arguments are replaced by **data[<arg>]**:
1460: 
1461:     {replaced}
1462: '''
1463: 
1464: 
1465: def _preprocess_data(replace_names=None, replace_all_args=False,
1466:                      label_namer=None, positional_parameter_names=None):
1467:     '''
1468:     A decorator to add a 'data' kwarg to any a function.  The signature
1469:     of the input function must include the ax argument at the first position ::
1470: 
1471:        def foo(ax, *args, **kwargs)
1472: 
1473:     so this is suitable for use with Axes methods.
1474: 
1475:     Parameters
1476:     ----------
1477:     replace_names : list of strings, optional, default: None
1478:         The list of parameter names which arguments should be replaced by
1479:         `data[name]`. If None, all arguments are replaced if they are
1480:         included in `data`.
1481:     replace_all_args : bool, default: False
1482:         If True, all arguments in *args get replaced, even if they are not
1483:         in replace_names.
1484:     label_namer : string, optional, default: None
1485:         The name of the parameter which argument should be used as label, if
1486:         label is not set. If None, the label keyword argument is not set.
1487:     positional_parameter_names : list of strings or callable, optional
1488:         The full list of positional parameter names (excluding an explicit
1489:         `ax`/'self' argument at the first place and including all possible
1490:         positional parameter in `*args`), in the right order. Can also include
1491:         all other keyword parameter. Only needed if the wrapped function does
1492:         contain `*args` and (replace_names is not None or replace_all_args is
1493:         False). If it is a callable, it will be called with the actual
1494:         tuple of *args and the data and should return a list like
1495:         above.
1496:         NOTE: callables should only be used when the names and order of *args
1497:         can only be determined at runtime. Please use list of names
1498:         when the order and names of *args is clear before runtime!
1499: 
1500:     .. note:: decorator also converts MappingView input data to list.
1501:     '''
1502:     if replace_names is not None:
1503:         replace_names = set(replace_names)
1504: 
1505:     def param(func):
1506:         new_sig = None
1507:         # signature is since 3.3 and wrapped since 3.2, but we support 3.4+.
1508:         python_has_signature = python_has_wrapped = six.PY3
1509: 
1510:         # if in a legacy version of python and IPython is already imported
1511:         # try to use their back-ported signature
1512:         if not python_has_signature and 'IPython' in sys.modules:
1513:             try:
1514:                 import IPython.utils.signatures
1515:                 signature = IPython.utils.signatures.signature
1516:                 Parameter = IPython.utils.signatures.Parameter
1517:             except ImportError:
1518:                 pass
1519:             else:
1520:                 python_has_signature = True
1521:         else:
1522:             if python_has_signature:
1523:                 signature = inspect.signature
1524:                 Parameter = inspect.Parameter
1525: 
1526:         if not python_has_signature:
1527:             arg_spec = inspect.getargspec(func)
1528:             _arg_names = arg_spec.args
1529:             _has_varargs = arg_spec.varargs is not None
1530:             _has_varkwargs = arg_spec.keywords is not None
1531:         else:
1532:             sig = signature(func)
1533:             _has_varargs = False
1534:             _has_varkwargs = False
1535:             _arg_names = []
1536:             params = list(sig.parameters.values())
1537:             for p in params:
1538:                 if p.kind is Parameter.VAR_POSITIONAL:
1539:                     _has_varargs = True
1540:                 elif p.kind is Parameter.VAR_KEYWORD:
1541:                     _has_varkwargs = True
1542:                 else:
1543:                     _arg_names.append(p.name)
1544:             data_param = Parameter('data',
1545:                                    Parameter.KEYWORD_ONLY,
1546:                                    default=None)
1547:             if _has_varkwargs:
1548:                 params.insert(-1, data_param)
1549:             else:
1550:                 params.append(data_param)
1551:             new_sig = sig.replace(parameters=params)
1552:         # Import-time check: do we have enough information to replace *args?
1553:         arg_names_at_runtime = False
1554:         # there can't be any positional arguments behind *args and no
1555:         # positional args can end up in **kwargs, so only *varargs make
1556:         # problems.
1557:         # http://stupidpythonideas.blogspot.de/2013/08/arguments-and-parameters.html
1558:         if not _has_varargs:
1559:             # all args are "named", so no problem
1560:             # remove the first "ax" / self arg
1561:             arg_names = _arg_names[1:]
1562:         else:
1563:             # Here we have "unnamed" variables and we need a way to determine
1564:             # whether to replace a arg or not
1565:             if replace_names is None:
1566:                 # all argnames should be replaced
1567:                 arg_names = None
1568:             elif len(replace_names) == 0:
1569:                 # No argnames should be replaced
1570:                 arg_names = []
1571:             elif len(_arg_names) > 1 and (positional_parameter_names is None):
1572:                 # we got no manual parameter names but more than an 'ax' ...
1573:                 if len(replace_names - set(_arg_names[1:])) == 0:
1574:                     # all to be replaced arguments are in the list
1575:                     arg_names = _arg_names[1:]
1576:                 else:
1577:                     msg = ("Got unknown 'replace_names' and wrapped function "
1578:                            "'%s' uses '*args', need "
1579:                            "'positional_parameter_names'!")
1580:                     raise AssertionError(msg % func.__name__)
1581:             else:
1582:                 if positional_parameter_names is not None:
1583:                     if callable(positional_parameter_names):
1584:                         # determined by the function at runtime
1585:                         arg_names_at_runtime = True
1586:                         # so that we don't compute the label_pos at import time
1587:                         arg_names = []
1588:                     else:
1589:                         arg_names = positional_parameter_names
1590:                 else:
1591:                     if replace_all_args:
1592:                         arg_names = []
1593:                     else:
1594:                         msg = ("Got 'replace_names' and wrapped function "
1595:                                "'%s' uses *args, need "
1596:                                "'positional_parameter_names' or "
1597:                                "'replace_all_args'!")
1598:                         raise AssertionError(msg % func.__name__)
1599: 
1600:         # compute the possible label_namer and label position in positional
1601:         # arguments
1602:         label_pos = 9999  # bigger than all "possible" argument lists
1603:         label_namer_pos = 9999  # bigger than all "possible" argument lists
1604:         if (label_namer and  # we actually want a label here ...
1605:                 arg_names and  # and we can determine a label in *args ...
1606:                 (label_namer in arg_names)):  # and it is in *args
1607:             label_namer_pos = arg_names.index(label_namer)
1608:             if "label" in arg_names:
1609:                 label_pos = arg_names.index("label")
1610: 
1611:         # Check the case we know a label_namer but we can't find it the
1612:         # arg_names... Unfortunately the label_namer can be in **kwargs,
1613:         # which we can't detect here and which results in a non-set label
1614:         # which might surprise the user :-(
1615:         if label_namer and not arg_names_at_runtime and not _has_varkwargs:
1616:             if not arg_names:
1617:                 msg = ("label_namer '%s' can't be found as the parameter "
1618:                        "without 'positional_parameter_names'.")
1619:                 raise AssertionError(msg % label_namer)
1620:             elif label_namer not in arg_names:
1621:                 msg = ("label_namer '%s' can't be found in the parameter "
1622:                        "names (known argnames: %s).")
1623:                 raise AssertionError(msg % (label_namer, arg_names))
1624:             else:
1625:                 # this is the case when the name is in arg_names
1626:                 pass
1627: 
1628:         @functools.wraps(func)
1629:         def inner(ax, *args, **kwargs):
1630:             # this is needed because we want to change these values if
1631:             # arg_names_at_runtime==True, but python does not allow assigning
1632:             # to a variable in a outer scope. So use some new local ones and
1633:             # set them to the already computed values.
1634:             _label_pos = label_pos
1635:             _label_namer_pos = label_namer_pos
1636:             _arg_names = arg_names
1637: 
1638:             label = None
1639: 
1640:             data = kwargs.pop('data', None)
1641: 
1642:             if data is None:  # data validation
1643:                 args = tuple(sanitize_sequence(a) for a in args)
1644:             else:
1645:                 if arg_names_at_runtime:
1646:                     # update the information about replace names and
1647:                     # label position
1648:                     _arg_names = positional_parameter_names(args, data)
1649:                     if (label_namer and  # we actually want a label here ...
1650:                             _arg_names and  # and we can find a label in *args
1651:                             (label_namer in _arg_names)):  # and it is in *args
1652:                         _label_namer_pos = _arg_names.index(label_namer)
1653:                         if "label" in _arg_names:
1654:                             _label_pos = arg_names.index("label")
1655: 
1656:                 # save the current label_namer value so that it can be used as
1657:                 # a label
1658:                 if _label_namer_pos < len(args):
1659:                     label = args[_label_namer_pos]
1660:                 else:
1661:                     label = kwargs.get(label_namer, None)
1662:                 # ensure a string, as label can't be anything else
1663:                 if not isinstance(label, six.string_types):
1664:                     label = None
1665: 
1666:                 if (replace_names is None) or (replace_all_args is True):
1667:                     # all should be replaced
1668:                     args = tuple(_replacer(data, a) for
1669:                                  j, a in enumerate(args))
1670:                 else:
1671:                     # An arg is replaced if the arg_name of that position is
1672:                     #   in replace_names ...
1673:                     if len(_arg_names) < len(args):
1674:                         raise RuntimeError(
1675:                             "Got more args than function expects")
1676:                     args = tuple(_replacer(data, a)
1677:                                  if _arg_names[j] in replace_names else a
1678:                                  for j, a in enumerate(args))
1679: 
1680:                 if replace_names is None:
1681:                     # replace all kwargs ...
1682:                     kwargs = dict((k, _replacer(data, v))
1683:                                   for k, v in six.iteritems(kwargs))
1684:                 else:
1685:                     # ... or only if a kwarg of that name is in replace_names
1686:                     kwargs = dict((k, _replacer(data, v)
1687:                                    if k in replace_names else v)
1688:                                   for k, v in six.iteritems(kwargs))
1689: 
1690:             # replace the label if this func "wants" a label arg and the user
1691:             # didn't set one. Note: if the user puts in "label=None", it does
1692:             # *NOT* get replaced!
1693:             user_supplied_label = (
1694:                 (len(args) >= _label_pos) or  # label is included in args
1695:                 ('label' in kwargs)  # ... or in kwargs
1696:             )
1697:             if (label_namer and not user_supplied_label):
1698:                 if _label_namer_pos < len(args):
1699:                     kwargs['label'] = get_label(args[_label_namer_pos], label)
1700:                 elif label_namer in kwargs:
1701:                     kwargs['label'] = get_label(kwargs[label_namer], label)
1702:                 else:
1703:                     import warnings
1704:                     msg = ("Tried to set a label via parameter '%s' in "
1705:                            "func '%s' but couldn't find such an argument. \n"
1706:                            "(This is a programming error, please report to "
1707:                            "the matplotlib list!)")
1708:                     warnings.warn(msg % (label_namer, func.__name__),
1709:                                   RuntimeWarning, stacklevel=2)
1710:             return func(ax, *args, **kwargs)
1711:         pre_doc = inner.__doc__
1712:         if pre_doc is None:
1713:             pre_doc = ''
1714:         else:
1715:             pre_doc = dedent(pre_doc)
1716:         _repl = ""
1717:         if replace_names is None:
1718:             _repl = "* All positional and all keyword arguments."
1719:         else:
1720:             if len(replace_names) != 0:
1721:                 _repl = "* All arguments with the following names: '{names}'."
1722:             if replace_all_args:
1723:                 _repl += "\n    * All positional arguments."
1724:             _repl = _repl.format(names="', '".join(sorted(replace_names)))
1725:         inner.__doc__ = (pre_doc +
1726:                          _DATA_DOC_APPENDIX.format(replaced=_repl))
1727:         if not python_has_wrapped:
1728:             inner.__wrapped__ = func
1729:         if new_sig is not None:
1730:             inner.__signature__ = new_sig
1731:         return inner
1732:     return param
1733: 
1734: 
1735: verbose.report('matplotlib version %s' % __version__)
1736: verbose.report('verbose.level %s' % verbose.level)
1737: verbose.report('interactive is %s' % is_interactive())
1738: verbose.report('platform is %s' % sys.platform)
1739: verbose.report('loaded modules: %s' % list(sys.modules), 'debug')
1740: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_188222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 101, (-1)), 'unicode', u'\nThis is an object-oriented plotting library.\n\nA procedural interface is provided by the companion pyplot module,\nwhich may be imported directly, e.g.::\n\n    import matplotlib.pyplot as plt\n\nor using ipython::\n\n    ipython\n\nat your terminal, followed by::\n\n    In [1]: %matplotlib\n    In [2]: import matplotlib.pyplot as plt\n\nat the ipython shell prompt.\n\nFor the most part, direct use of the object-oriented library is\nencouraged when programming; pyplot is primarily for working\ninteractively.  The\nexceptions are the pyplot commands :func:`~matplotlib.pyplot.figure`,\n:func:`~matplotlib.pyplot.subplot`,\n:func:`~matplotlib.pyplot.subplots`, and\n:func:`~pyplot.savefig`, which can greatly simplify scripting.\n\nModules include:\n\n    :mod:`matplotlib.axes`\n        defines the :class:`~matplotlib.axes.Axes` class.  Most pylab\n        commands are wrappers for :class:`~matplotlib.axes.Axes`\n        methods.  The axes module is the highest level of OO access to\n        the library.\n\n    :mod:`matplotlib.figure`\n        defines the :class:`~matplotlib.figure.Figure` class.\n\n    :mod:`matplotlib.artist`\n        defines the :class:`~matplotlib.artist.Artist` base class for\n        all classes that draw things.\n\n    :mod:`matplotlib.lines`\n        defines the :class:`~matplotlib.lines.Line2D` class for\n        drawing lines and markers\n\n    :mod:`matplotlib.patches`\n        defines classes for drawing polygons\n\n    :mod:`matplotlib.text`\n        defines the :class:`~matplotlib.text.Text`,\n        :class:`~matplotlib.text.TextWithDash`, and\n        :class:`~matplotlib.text.Annotate` classes\n\n    :mod:`matplotlib.image`\n        defines the :class:`~matplotlib.image.AxesImage` and\n        :class:`~matplotlib.image.FigureImage` classes\n\n    :mod:`matplotlib.collections`\n        classes for efficient drawing of groups of lines or polygons\n\n    :mod:`matplotlib.colors`\n        classes for interpreting color specifications and for making\n        colormaps\n\n    :mod:`matplotlib.cm`\n        colormaps and the :class:`~matplotlib.image.ScalarMappable`\n        mixin class for providing color mapping functionality to other\n        classes\n\n    :mod:`matplotlib.ticker`\n        classes for calculating tick mark locations and for formatting\n        tick labels\n\n    :mod:`matplotlib.backends`\n        a subpackage with modules for various gui libraries and output\n        formats\n\nThe base matplotlib namespace includes:\n\n    :data:`~matplotlib.rcParams`\n        a global dictionary of default configuration settings.  It is\n        initialized by code which may be overridded by a matplotlibrc\n        file.\n\n    :func:`~matplotlib.rc`\n        a function for setting groups of rcParams values\n\n    :func:`~matplotlib.use`\n        a function for setting the matplotlib backend.  If used, this\n        function must be called immediately after importing matplotlib\n        for the first time.  In particular, it must be called\n        **before** importing pylab (if pylab is imported).\n\nmatplotlib was initially written by John D. Hunter (1968-2012) and is now\ndeveloped and maintained by a host of others.\n\nOccasionally the internal documentation (python docstrings) will refer\nto MATLAB&reg;, a registered trademark of The MathWorks, Inc.\n\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 105, 0))

# 'import six' statement (line 105)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_188223 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 105, 0), 'six')

if (type(import_188223) is not StypyTypeError):

    if (import_188223 != 'pyd_module'):
        __import__(import_188223)
        sys_modules_188224 = sys.modules[import_188223]
        import_module(stypy.reporting.localization.Localization(__file__, 105, 0), 'six', sys_modules_188224.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 105, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 105, 0), 'six', import_188223)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 107, 0))

# 'from collections import MutableMapping' statement (line 107)
try:
    from collections import MutableMapping

except:
    MutableMapping = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 107, 0), 'collections', None, module_type_store, ['MutableMapping'], [MutableMapping])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 108, 0))

# 'import contextlib' statement (line 108)
import contextlib

import_module(stypy.reporting.localization.Localization(__file__, 108, 0), 'contextlib', contextlib, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 109, 0))

# 'import distutils.version' statement (line 109)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_188225 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 109, 0), 'distutils.version')

if (type(import_188225) is not StypyTypeError):

    if (import_188225 != 'pyd_module'):
        __import__(import_188225)
        sys_modules_188226 = sys.modules[import_188225]
        import_module(stypy.reporting.localization.Localization(__file__, 109, 0), 'distutils.version', sys_modules_188226.module_type_store, module_type_store)
    else:
        import distutils.version

        import_module(stypy.reporting.localization.Localization(__file__, 109, 0), 'distutils.version', distutils.version, module_type_store)

else:
    # Assigning a type to the variable 'distutils.version' (line 109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 109, 0), 'distutils.version', import_188225)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 110, 0))

# 'import distutils.sysconfig' statement (line 110)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_188227 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 110, 0), 'distutils.sysconfig')

if (type(import_188227) is not StypyTypeError):

    if (import_188227 != 'pyd_module'):
        __import__(import_188227)
        sys_modules_188228 = sys.modules[import_188227]
        import_module(stypy.reporting.localization.Localization(__file__, 110, 0), 'distutils.sysconfig', sys_modules_188228.module_type_store, module_type_store)
    else:
        import distutils.sysconfig

        import_module(stypy.reporting.localization.Localization(__file__, 110, 0), 'distutils.sysconfig', distutils.sysconfig, module_type_store)

else:
    # Assigning a type to the variable 'distutils.sysconfig' (line 110)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 110, 0), 'distutils.sysconfig', import_188227)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 111, 0))

# 'import functools' statement (line 111)
import functools

import_module(stypy.reporting.localization.Localization(__file__, 111, 0), 'functools', functools, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 112, 0))

# 'import io' statement (line 112)
import io

import_module(stypy.reporting.localization.Localization(__file__, 112, 0), 'io', io, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 113, 0))

# 'import inspect' statement (line 113)
import inspect

import_module(stypy.reporting.localization.Localization(__file__, 113, 0), 'inspect', inspect, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 114, 0))

# 'import itertools' statement (line 114)
import itertools

import_module(stypy.reporting.localization.Localization(__file__, 114, 0), 'itertools', itertools, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 115, 0))

# 'import locale' statement (line 115)
import locale

import_module(stypy.reporting.localization.Localization(__file__, 115, 0), 'locale', locale, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 116, 0))

# 'import os' statement (line 116)
import os

import_module(stypy.reporting.localization.Localization(__file__, 116, 0), 'os', os, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 117, 0))

# 'import re' statement (line 117)
import re

import_module(stypy.reporting.localization.Localization(__file__, 117, 0), 're', re, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 118, 0))

# 'import sys' statement (line 118)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 118, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 119, 0))

# 'import tempfile' statement (line 119)
import tempfile

import_module(stypy.reporting.localization.Localization(__file__, 119, 0), 'tempfile', tempfile, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 120, 0))

# 'import warnings' statement (line 120)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 120, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 124, 0))

# 'from matplotlib import cbook' statement (line 124)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_188229 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 124, 0), 'matplotlib')

if (type(import_188229) is not StypyTypeError):

    if (import_188229 != 'pyd_module'):
        __import__(import_188229)
        sys_modules_188230 = sys.modules[import_188229]
        import_from_module(stypy.reporting.localization.Localization(__file__, 124, 0), 'matplotlib', sys_modules_188230.module_type_store, module_type_store, ['cbook'])
        nest_module(stypy.reporting.localization.Localization(__file__, 124, 0), __file__, sys_modules_188230, sys_modules_188230.module_type_store, module_type_store)
    else:
        from matplotlib import cbook

        import_from_module(stypy.reporting.localization.Localization(__file__, 124, 0), 'matplotlib', None, module_type_store, ['cbook'], [cbook])

else:
    # Assigning a type to the variable 'matplotlib' (line 124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 124, 0), 'matplotlib', import_188229)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 125, 0))

# 'from matplotlib.cbook import _backports, mplDeprecation, dedent, get_label, sanitize_sequence' statement (line 125)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_188231 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 125, 0), 'matplotlib.cbook')

if (type(import_188231) is not StypyTypeError):

    if (import_188231 != 'pyd_module'):
        __import__(import_188231)
        sys_modules_188232 = sys.modules[import_188231]
        import_from_module(stypy.reporting.localization.Localization(__file__, 125, 0), 'matplotlib.cbook', sys_modules_188232.module_type_store, module_type_store, ['_backports', 'mplDeprecation', 'dedent', 'get_label', 'sanitize_sequence'])
        nest_module(stypy.reporting.localization.Localization(__file__, 125, 0), __file__, sys_modules_188232, sys_modules_188232.module_type_store, module_type_store)
    else:
        from matplotlib.cbook import _backports, mplDeprecation, dedent, get_label, sanitize_sequence

        import_from_module(stypy.reporting.localization.Localization(__file__, 125, 0), 'matplotlib.cbook', None, module_type_store, ['_backports', 'mplDeprecation', 'dedent', 'get_label', 'sanitize_sequence'], [_backports, mplDeprecation, dedent, get_label, sanitize_sequence])

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 125)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 125, 0), 'matplotlib.cbook', import_188231)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 127, 0))

# 'from matplotlib.compat import subprocess' statement (line 127)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_188233 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 127, 0), 'matplotlib.compat')

if (type(import_188233) is not StypyTypeError):

    if (import_188233 != 'pyd_module'):
        __import__(import_188233)
        sys_modules_188234 = sys.modules[import_188233]
        import_from_module(stypy.reporting.localization.Localization(__file__, 127, 0), 'matplotlib.compat', sys_modules_188234.module_type_store, module_type_store, ['subprocess'])
        nest_module(stypy.reporting.localization.Localization(__file__, 127, 0), __file__, sys_modules_188234, sys_modules_188234.module_type_store, module_type_store)
    else:
        from matplotlib.compat import subprocess

        import_from_module(stypy.reporting.localization.Localization(__file__, 127, 0), 'matplotlib.compat', None, module_type_store, ['subprocess'], [subprocess])

else:
    # Assigning a type to the variable 'matplotlib.compat' (line 127)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 127, 0), 'matplotlib.compat', import_188233)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 128, 0))

# 'from matplotlib.rcsetup import defaultParams, validate_backend, cycler' statement (line 128)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_188235 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 128, 0), 'matplotlib.rcsetup')

if (type(import_188235) is not StypyTypeError):

    if (import_188235 != 'pyd_module'):
        __import__(import_188235)
        sys_modules_188236 = sys.modules[import_188235]
        import_from_module(stypy.reporting.localization.Localization(__file__, 128, 0), 'matplotlib.rcsetup', sys_modules_188236.module_type_store, module_type_store, ['defaultParams', 'validate_backend', 'cycler'])
        nest_module(stypy.reporting.localization.Localization(__file__, 128, 0), __file__, sys_modules_188236, sys_modules_188236.module_type_store, module_type_store)
    else:
        from matplotlib.rcsetup import defaultParams, validate_backend, cycler

        import_from_module(stypy.reporting.localization.Localization(__file__, 128, 0), 'matplotlib.rcsetup', None, module_type_store, ['defaultParams', 'validate_backend', 'cycler'], [defaultParams, validate_backend, cycler])

else:
    # Assigning a type to the variable 'matplotlib.rcsetup' (line 128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 128, 0), 'matplotlib.rcsetup', import_188235)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 130, 0))

# 'import numpy' statement (line 130)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_188237 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 130, 0), 'numpy')

if (type(import_188237) is not StypyTypeError):

    if (import_188237 != 'pyd_module'):
        __import__(import_188237)
        sys_modules_188238 = sys.modules[import_188237]
        import_module(stypy.reporting.localization.Localization(__file__, 130, 0), 'numpy', sys_modules_188238.module_type_store, module_type_store)
    else:
        import numpy

        import_module(stypy.reporting.localization.Localization(__file__, 130, 0), 'numpy', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 0), 'numpy', import_188237)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 131, 0))

# 'from six.moves.urllib.request import urlopen' statement (line 131)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_188239 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 131, 0), 'six.moves.urllib.request')

if (type(import_188239) is not StypyTypeError):

    if (import_188239 != 'pyd_module'):
        __import__(import_188239)
        sys_modules_188240 = sys.modules[import_188239]
        import_from_module(stypy.reporting.localization.Localization(__file__, 131, 0), 'six.moves.urllib.request', sys_modules_188240.module_type_store, module_type_store, ['urlopen'])
        nest_module(stypy.reporting.localization.Localization(__file__, 131, 0), __file__, sys_modules_188240, sys_modules_188240.module_type_store, module_type_store)
    else:
        from six.moves.urllib.request import urlopen

        import_from_module(stypy.reporting.localization.Localization(__file__, 131, 0), 'six.moves.urllib.request', None, module_type_store, ['urlopen'], [urlopen])

else:
    # Assigning a type to the variable 'six.moves.urllib.request' (line 131)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 131, 0), 'six.moves.urllib.request', import_188239)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 132, 0))

# 'from six.moves import reload' statement (line 132)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_188241 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 132, 0), 'six.moves')

if (type(import_188241) is not StypyTypeError):

    if (import_188241 != 'pyd_module'):
        __import__(import_188241)
        sys_modules_188242 = sys.modules[import_188241]
        import_from_module(stypy.reporting.localization.Localization(__file__, 132, 0), 'six.moves', sys_modules_188242.module_type_store, module_type_store, ['reload_module'])
        nest_module(stypy.reporting.localization.Localization(__file__, 132, 0), __file__, sys_modules_188242, sys_modules_188242.module_type_store, module_type_store)
    else:
        from six.moves import reload_module as reload

        import_from_module(stypy.reporting.localization.Localization(__file__, 132, 0), 'six.moves', None, module_type_store, ['reload_module'], [reload])

else:
    # Assigning a type to the variable 'six.moves' (line 132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 132, 0), 'six.moves', import_188241)

# Adding an alias
module_type_store.add_alias('reload', 'reload_module')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 136, 0))

# 'from matplotlib._version import get_versions' statement (line 136)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_188243 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 136, 0), 'matplotlib._version')

if (type(import_188243) is not StypyTypeError):

    if (import_188243 != 'pyd_module'):
        __import__(import_188243)
        sys_modules_188244 = sys.modules[import_188243]
        import_from_module(stypy.reporting.localization.Localization(__file__, 136, 0), 'matplotlib._version', sys_modules_188244.module_type_store, module_type_store, ['get_versions'])
        nest_module(stypy.reporting.localization.Localization(__file__, 136, 0), __file__, sys_modules_188244, sys_modules_188244.module_type_store, module_type_store)
    else:
        from matplotlib._version import get_versions

        import_from_module(stypy.reporting.localization.Localization(__file__, 136, 0), 'matplotlib._version', None, module_type_store, ['get_versions'], [get_versions])

else:
    # Assigning a type to the variable 'matplotlib._version' (line 136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 0), 'matplotlib._version', import_188243)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')


# Assigning a Call to a Name (line 137):

# Assigning a Call to a Name (line 137):

# Call to str(...): (line 137)
# Processing the call arguments (line 137)

# Obtaining the type of the subscript
unicode_188246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 137, 33), 'unicode', u'version')

# Call to get_versions(...): (line 137)
# Processing the call keyword arguments (line 137)
kwargs_188248 = {}
# Getting the type of 'get_versions' (line 137)
get_versions_188247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 18), 'get_versions', False)
# Calling get_versions(args, kwargs) (line 137)
get_versions_call_result_188249 = invoke(stypy.reporting.localization.Localization(__file__, 137, 18), get_versions_188247, *[], **kwargs_188248)

# Obtaining the member '__getitem__' of a type (line 137)
getitem___188250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 137, 18), get_versions_call_result_188249, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 137)
subscript_call_result_188251 = invoke(stypy.reporting.localization.Localization(__file__, 137, 18), getitem___188250, unicode_188246)

# Processing the call keyword arguments (line 137)
kwargs_188252 = {}
# Getting the type of 'str' (line 137)
str_188245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 14), 'str', False)
# Calling str(args, kwargs) (line 137)
str_call_result_188253 = invoke(stypy.reporting.localization.Localization(__file__, 137, 14), str_188245, *[subscript_call_result_188251], **kwargs_188252)

# Assigning a type to the variable '__version__' (line 137)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 0), '__version__', str_call_result_188253)
# Deleting a member
module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 138, 0), module_type_store, 'get_versions')

# Assigning a Call to a Name (line 140):

# Assigning a Call to a Name (line 140):

# Call to str(...): (line 140)
# Processing the call arguments (line 140)
unicode_188255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 140, 25), 'unicode', u'1.7.1')
# Processing the call keyword arguments (line 140)
kwargs_188256 = {}
# Getting the type of 'str' (line 140)
str_188254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 21), 'str', False)
# Calling str(args, kwargs) (line 140)
str_call_result_188257 = invoke(stypy.reporting.localization.Localization(__file__, 140, 21), str_188254, *[unicode_188255], **kwargs_188256)

# Assigning a type to the variable '__version__numpy__' (line 140)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 140, 0), '__version__numpy__', str_call_result_188257)

# Assigning a Str to a Name (line 142):

# Assigning a Str to a Name (line 142):
unicode_188258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 155, (-1)), 'unicode', u'@Article{Hunter:2007,\n  Author    = {Hunter, J. D.},\n  Title     = {Matplotlib: A 2D graphics environment},\n  Journal   = {Computing In Science \\& Engineering},\n  Volume    = {9},\n  Number    = {3},\n  Pages     = {90--95},\n  abstract  = {Matplotlib is a 2D graphics package used for Python\n  for application development, interactive scripting, and\n  publication-quality image generation across user\n  interfaces and operating systems.},\n  publisher = {IEEE COMPUTER SOC},\n  year      = 2007\n}')
# Assigning a type to the variable '__bibtex__' (line 142)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 0), '__bibtex__', unicode_188258)

# Assigning a BoolOp to a Name (line 158):

# Assigning a BoolOp to a Name (line 158):

# Evaluating a boolean operation

# Getting the type of 'sys' (line 158)
sys_188259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 13), 'sys')
# Obtaining the member 'version_info' of a type (line 158)
version_info_188260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 13), sys_188259, 'version_info')
# Obtaining the member 'major' of a type (line 158)
major_188261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 13), version_info_188260, 'major')
int_188262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 158, 39), 'int')
# Applying the binary operator '==' (line 158)
result_eq_188263 = python_operator(stypy.reporting.localization.Localization(__file__, 158, 13), '==', major_188261, int_188262)


# Getting the type of 'sys' (line 158)
sys_188264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 45), 'sys')
# Obtaining the member 'version_info' of a type (line 158)
version_info_188265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 45), sys_188264, 'version_info')
# Obtaining the member 'minor' of a type (line 158)
minor_188266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 45), version_info_188265, 'minor')
int_188267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 158, 71), 'int')
# Applying the binary operator '>=' (line 158)
result_ge_188268 = python_operator(stypy.reporting.localization.Localization(__file__, 158, 45), '>=', minor_188266, int_188267)

# Applying the binary operator 'and' (line 158)
result_and_keyword_188269 = python_operator(stypy.reporting.localization.Localization(__file__, 158, 13), 'and', result_eq_188263, result_ge_188268)

# Assigning a type to the variable '_python27' (line 158)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 0), '_python27', result_and_keyword_188269)

# Assigning a BoolOp to a Name (line 159):

# Assigning a BoolOp to a Name (line 159):

# Evaluating a boolean operation

# Getting the type of 'sys' (line 159)
sys_188270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 13), 'sys')
# Obtaining the member 'version_info' of a type (line 159)
version_info_188271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 13), sys_188270, 'version_info')
# Obtaining the member 'major' of a type (line 159)
major_188272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 13), version_info_188271, 'major')
int_188273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 39), 'int')
# Applying the binary operator '==' (line 159)
result_eq_188274 = python_operator(stypy.reporting.localization.Localization(__file__, 159, 13), '==', major_188272, int_188273)


# Getting the type of 'sys' (line 159)
sys_188275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 45), 'sys')
# Obtaining the member 'version_info' of a type (line 159)
version_info_188276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 45), sys_188275, 'version_info')
# Obtaining the member 'minor' of a type (line 159)
minor_188277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 45), version_info_188276, 'minor')
int_188278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 71), 'int')
# Applying the binary operator '>=' (line 159)
result_ge_188279 = python_operator(stypy.reporting.localization.Localization(__file__, 159, 45), '>=', minor_188277, int_188278)

# Applying the binary operator 'and' (line 159)
result_and_keyword_188280 = python_operator(stypy.reporting.localization.Localization(__file__, 159, 13), 'and', result_eq_188274, result_ge_188279)

# Assigning a type to the variable '_python34' (line 159)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 0), '_python34', result_and_keyword_188280)



# Evaluating a boolean operation
# Getting the type of '_python27' (line 160)
_python27_188281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 8), '_python27')
# Getting the type of '_python34' (line 160)
_python34_188282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 21), '_python34')
# Applying the binary operator 'or' (line 160)
result_or_keyword_188283 = python_operator(stypy.reporting.localization.Localization(__file__, 160, 8), 'or', _python27_188281, _python34_188282)

# Applying the 'not' unary operator (line 160)
result_not__188284 = python_operator(stypy.reporting.localization.Localization(__file__, 160, 3), 'not', result_or_keyword_188283)

# Testing the type of an if condition (line 160)
if_condition_188285 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 160, 0), result_not__188284)
# Assigning a type to the variable 'if_condition_188285' (line 160)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 0), 'if_condition_188285', if_condition_188285)
# SSA begins for if statement (line 160)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Call to ImportError(...): (line 161)
# Processing the call arguments (line 161)
unicode_188287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 22), 'unicode', u'Matplotlib requires Python 2.7 or 3.4 or later')
# Processing the call keyword arguments (line 161)
kwargs_188288 = {}
# Getting the type of 'ImportError' (line 161)
ImportError_188286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 10), 'ImportError', False)
# Calling ImportError(args, kwargs) (line 161)
ImportError_call_result_188289 = invoke(stypy.reporting.localization.Localization(__file__, 161, 10), ImportError_188286, *[unicode_188287], **kwargs_188288)

ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 161, 4), ImportError_call_result_188289, 'raise parameter', BaseException)
# SSA join for if statement (line 160)
module_type_store = module_type_store.join_ssa_context()


@norecursion
def compare_versions(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'compare_versions'
    module_type_store = module_type_store.open_function_context('compare_versions', 164, 0, False)
    
    # Passed parameters checking function
    compare_versions.stypy_localization = localization
    compare_versions.stypy_type_of_self = None
    compare_versions.stypy_type_store = module_type_store
    compare_versions.stypy_function_name = 'compare_versions'
    compare_versions.stypy_param_names_list = ['a', 'b']
    compare_versions.stypy_varargs_param_name = None
    compare_versions.stypy_kwargs_param_name = None
    compare_versions.stypy_call_defaults = defaults
    compare_versions.stypy_call_varargs = varargs
    compare_versions.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'compare_versions', ['a', 'b'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'compare_versions', localization, ['a', 'b'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'compare_versions(...)' code ##################

    unicode_188290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 4), 'unicode', u'return True if a is greater than or equal to b')
    
    # Getting the type of 'a' (line 166)
    a_188291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 7), 'a')
    # Testing the type of an if condition (line 166)
    if_condition_188292 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 166, 4), a_188291)
    # Assigning a type to the variable 'if_condition_188292' (line 166)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 166, 4), 'if_condition_188292', if_condition_188292)
    # SSA begins for if statement (line 166)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'six' (line 167)
    six_188293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 11), 'six')
    # Obtaining the member 'PY3' of a type (line 167)
    PY3_188294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 11), six_188293, 'PY3')
    # Testing the type of an if condition (line 167)
    if_condition_188295 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 167, 8), PY3_188294)
    # Assigning a type to the variable 'if_condition_188295' (line 167)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 8), 'if_condition_188295', if_condition_188295)
    # SSA begins for if statement (line 167)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Type idiom detected: calculating its left and rigth part (line 168)
    # Getting the type of 'bytes' (line 168)
    bytes_188296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 29), 'bytes')
    # Getting the type of 'a' (line 168)
    a_188297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 26), 'a')
    
    (may_be_188298, more_types_in_union_188299) = may_be_subtype(bytes_188296, a_188297)

    if may_be_188298:

        if more_types_in_union_188299:
            # Runtime conditional SSA (line 168)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'a' (line 168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 12), 'a', remove_not_subtype_from_union(a_188297, bytes))
        
        # Assigning a Call to a Name (line 169):
        
        # Assigning a Call to a Name (line 169):
        
        # Call to decode(...): (line 169)
        # Processing the call arguments (line 169)
        unicode_188302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 29), 'unicode', u'ascii')
        # Processing the call keyword arguments (line 169)
        kwargs_188303 = {}
        # Getting the type of 'a' (line 169)
        a_188300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 20), 'a', False)
        # Obtaining the member 'decode' of a type (line 169)
        decode_188301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 20), a_188300, 'decode')
        # Calling decode(args, kwargs) (line 169)
        decode_call_result_188304 = invoke(stypy.reporting.localization.Localization(__file__, 169, 20), decode_188301, *[unicode_188302], **kwargs_188303)
        
        # Assigning a type to the variable 'a' (line 169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 16), 'a', decode_call_result_188304)

        if more_types_in_union_188299:
            # SSA join for if statement (line 168)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 170)
    # Getting the type of 'bytes' (line 170)
    bytes_188305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 29), 'bytes')
    # Getting the type of 'b' (line 170)
    b_188306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 26), 'b')
    
    (may_be_188307, more_types_in_union_188308) = may_be_subtype(bytes_188305, b_188306)

    if may_be_188307:

        if more_types_in_union_188308:
            # Runtime conditional SSA (line 170)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'b' (line 170)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 170, 12), 'b', remove_not_subtype_from_union(b_188306, bytes))
        
        # Assigning a Call to a Name (line 171):
        
        # Assigning a Call to a Name (line 171):
        
        # Call to decode(...): (line 171)
        # Processing the call arguments (line 171)
        unicode_188311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 171, 29), 'unicode', u'ascii')
        # Processing the call keyword arguments (line 171)
        kwargs_188312 = {}
        # Getting the type of 'b' (line 171)
        b_188309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 20), 'b', False)
        # Obtaining the member 'decode' of a type (line 171)
        decode_188310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 20), b_188309, 'decode')
        # Calling decode(args, kwargs) (line 171)
        decode_call_result_188313 = invoke(stypy.reporting.localization.Localization(__file__, 171, 20), decode_188310, *[unicode_188311], **kwargs_188312)
        
        # Assigning a type to the variable 'b' (line 171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 171, 16), 'b', decode_call_result_188313)

        if more_types_in_union_188308:
            # SSA join for if statement (line 170)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 167)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 172):
    
    # Assigning a Call to a Name (line 172):
    
    # Call to LooseVersion(...): (line 172)
    # Processing the call arguments (line 172)
    # Getting the type of 'a' (line 172)
    a_188317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 43), 'a', False)
    # Processing the call keyword arguments (line 172)
    kwargs_188318 = {}
    # Getting the type of 'distutils' (line 172)
    distutils_188314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 12), 'distutils', False)
    # Obtaining the member 'version' of a type (line 172)
    version_188315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 12), distutils_188314, 'version')
    # Obtaining the member 'LooseVersion' of a type (line 172)
    LooseVersion_188316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 12), version_188315, 'LooseVersion')
    # Calling LooseVersion(args, kwargs) (line 172)
    LooseVersion_call_result_188319 = invoke(stypy.reporting.localization.Localization(__file__, 172, 12), LooseVersion_188316, *[a_188317], **kwargs_188318)
    
    # Assigning a type to the variable 'a' (line 172)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 172, 8), 'a', LooseVersion_call_result_188319)
    
    # Assigning a Call to a Name (line 173):
    
    # Assigning a Call to a Name (line 173):
    
    # Call to LooseVersion(...): (line 173)
    # Processing the call arguments (line 173)
    # Getting the type of 'b' (line 173)
    b_188323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 43), 'b', False)
    # Processing the call keyword arguments (line 173)
    kwargs_188324 = {}
    # Getting the type of 'distutils' (line 173)
    distutils_188320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 12), 'distutils', False)
    # Obtaining the member 'version' of a type (line 173)
    version_188321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 12), distutils_188320, 'version')
    # Obtaining the member 'LooseVersion' of a type (line 173)
    LooseVersion_188322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 12), version_188321, 'LooseVersion')
    # Calling LooseVersion(args, kwargs) (line 173)
    LooseVersion_call_result_188325 = invoke(stypy.reporting.localization.Localization(__file__, 173, 12), LooseVersion_188322, *[b_188323], **kwargs_188324)
    
    # Assigning a type to the variable 'b' (line 173)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 8), 'b', LooseVersion_call_result_188325)
    
    # Getting the type of 'a' (line 174)
    a_188326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 15), 'a')
    # Getting the type of 'b' (line 174)
    b_188327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 20), 'b')
    # Applying the binary operator '>=' (line 174)
    result_ge_188328 = python_operator(stypy.reporting.localization.Localization(__file__, 174, 15), '>=', a_188326, b_188327)
    
    # Assigning a type to the variable 'stypy_return_type' (line 174)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 174, 8), 'stypy_return_type', result_ge_188328)
    # SSA branch for the else part of an if statement (line 166)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'False' (line 176)
    False_188329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 176)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 8), 'stypy_return_type', False_188329)
    # SSA join for if statement (line 166)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'compare_versions(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'compare_versions' in the type store
    # Getting the type of 'stypy_return_type' (line 164)
    stypy_return_type_188330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_188330)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'compare_versions'
    return stypy_return_type_188330

# Assigning a type to the variable 'compare_versions' (line 164)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 0), 'compare_versions', compare_versions)


# SSA begins for try-except statement (line 179)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 180, 4))

# 'import dateutil' statement (line 180)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_188331 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 180, 4), 'dateutil')

if (type(import_188331) is not StypyTypeError):

    if (import_188331 != 'pyd_module'):
        __import__(import_188331)
        sys_modules_188332 = sys.modules[import_188331]
        import_module(stypy.reporting.localization.Localization(__file__, 180, 4), 'dateutil', sys_modules_188332.module_type_store, module_type_store)
    else:
        import dateutil

        import_module(stypy.reporting.localization.Localization(__file__, 180, 4), 'dateutil', dateutil, module_type_store)

else:
    # Assigning a type to the variable 'dateutil' (line 180)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 180, 4), 'dateutil', import_188331)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

# SSA branch for the except part of a try statement (line 179)
# SSA branch for the except 'ImportError' branch of a try statement (line 179)
module_type_store.open_ssa_branch('except')

# Call to ImportError(...): (line 182)
# Processing the call arguments (line 182)
unicode_188334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 182, 22), 'unicode', u'Matplotlib requires dateutil')
# Processing the call keyword arguments (line 182)
kwargs_188335 = {}
# Getting the type of 'ImportError' (line 182)
ImportError_188333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 10), 'ImportError', False)
# Calling ImportError(args, kwargs) (line 182)
ImportError_call_result_188336 = invoke(stypy.reporting.localization.Localization(__file__, 182, 10), ImportError_188333, *[unicode_188334], **kwargs_188335)

ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 182, 4), ImportError_call_result_188336, 'raise parameter', BaseException)
# SSA join for try-except statement (line 179)
module_type_store = module_type_store.join_ssa_context()




# Call to compare_versions(...): (line 185)
# Processing the call arguments (line 185)
# Getting the type of 'six' (line 185)
six_188338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 24), 'six', False)
# Obtaining the member '__version__' of a type (line 185)
version___188339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 24), six_188338, '__version__')
unicode_188340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 41), 'unicode', u'1.10')
# Processing the call keyword arguments (line 185)
kwargs_188341 = {}
# Getting the type of 'compare_versions' (line 185)
compare_versions_188337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 7), 'compare_versions', False)
# Calling compare_versions(args, kwargs) (line 185)
compare_versions_call_result_188342 = invoke(stypy.reporting.localization.Localization(__file__, 185, 7), compare_versions_188337, *[version___188339, unicode_188340], **kwargs_188341)

# Applying the 'not' unary operator (line 185)
result_not__188343 = python_operator(stypy.reporting.localization.Localization(__file__, 185, 3), 'not', compare_versions_call_result_188342)

# Testing the type of an if condition (line 185)
if_condition_188344 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 185, 0), result_not__188343)
# Assigning a type to the variable 'if_condition_188344' (line 185)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 185, 0), 'if_condition_188344', if_condition_188344)
# SSA begins for if statement (line 185)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Call to ImportError(...): (line 186)
# Processing the call arguments (line 186)
unicode_188346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 187, 8), 'unicode', u'Matplotlib requires six>=1.10; you have %s')
# Getting the type of 'six' (line 187)
six_188347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 55), 'six', False)
# Obtaining the member '__version__' of a type (line 187)
version___188348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 187, 55), six_188347, '__version__')
# Applying the binary operator '%' (line 187)
result_mod_188349 = python_operator(stypy.reporting.localization.Localization(__file__, 187, 8), '%', unicode_188346, version___188348)

# Processing the call keyword arguments (line 186)
kwargs_188350 = {}
# Getting the type of 'ImportError' (line 186)
ImportError_188345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 10), 'ImportError', False)
# Calling ImportError(args, kwargs) (line 186)
ImportError_call_result_188351 = invoke(stypy.reporting.localization.Localization(__file__, 186, 10), ImportError_188345, *[result_mod_188349], **kwargs_188350)

ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 186, 4), ImportError_call_result_188351, 'raise parameter', BaseException)
# SSA join for if statement (line 185)
module_type_store = module_type_store.join_ssa_context()



# SSA begins for try-except statement (line 190)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 191, 4))

# 'import pyparsing' statement (line 191)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_188352 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 191, 4), 'pyparsing')

if (type(import_188352) is not StypyTypeError):

    if (import_188352 != 'pyd_module'):
        __import__(import_188352)
        sys_modules_188353 = sys.modules[import_188352]
        import_module(stypy.reporting.localization.Localization(__file__, 191, 4), 'pyparsing', sys_modules_188353.module_type_store, module_type_store)
    else:
        import pyparsing

        import_module(stypy.reporting.localization.Localization(__file__, 191, 4), 'pyparsing', pyparsing, module_type_store)

else:
    # Assigning a type to the variable 'pyparsing' (line 191)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 191, 4), 'pyparsing', import_188352)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

# SSA branch for the except part of a try statement (line 190)
# SSA branch for the except 'ImportError' branch of a try statement (line 190)
module_type_store.open_ssa_branch('except')

# Call to ImportError(...): (line 193)
# Processing the call arguments (line 193)
unicode_188355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 22), 'unicode', u'Matplotlib requires pyparsing')
# Processing the call keyword arguments (line 193)
kwargs_188356 = {}
# Getting the type of 'ImportError' (line 193)
ImportError_188354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 10), 'ImportError', False)
# Calling ImportError(args, kwargs) (line 193)
ImportError_call_result_188357 = invoke(stypy.reporting.localization.Localization(__file__, 193, 10), ImportError_188354, *[unicode_188355], **kwargs_188356)

ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 193, 4), ImportError_call_result_188357, 'raise parameter', BaseException)
# SSA branch for the else branch of a try statement (line 190)
module_type_store.open_ssa_branch('except else')



# Call to compare_versions(...): (line 195)
# Processing the call arguments (line 195)
# Getting the type of 'pyparsing' (line 195)
pyparsing_188359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 28), 'pyparsing', False)
# Obtaining the member '__version__' of a type (line 195)
version___188360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 28), pyparsing_188359, '__version__')
unicode_188361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 51), 'unicode', u'2.0.1')
# Processing the call keyword arguments (line 195)
kwargs_188362 = {}
# Getting the type of 'compare_versions' (line 195)
compare_versions_188358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 11), 'compare_versions', False)
# Calling compare_versions(args, kwargs) (line 195)
compare_versions_call_result_188363 = invoke(stypy.reporting.localization.Localization(__file__, 195, 11), compare_versions_188358, *[version___188360, unicode_188361], **kwargs_188362)

# Applying the 'not' unary operator (line 195)
result_not__188364 = python_operator(stypy.reporting.localization.Localization(__file__, 195, 7), 'not', compare_versions_call_result_188363)

# Testing the type of an if condition (line 195)
if_condition_188365 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 195, 4), result_not__188364)
# Assigning a type to the variable 'if_condition_188365' (line 195)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 4), 'if_condition_188365', if_condition_188365)
# SSA begins for if statement (line 195)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Call to ImportError(...): (line 196)
# Processing the call arguments (line 196)
unicode_188367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 197, 12), 'unicode', u'Matplotlib requires pyparsing>=2.0.1; you have %s')
# Getting the type of 'pyparsing' (line 198)
pyparsing_188368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 14), 'pyparsing', False)
# Obtaining the member '__version__' of a type (line 198)
version___188369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 14), pyparsing_188368, '__version__')
# Applying the binary operator '%' (line 197)
result_mod_188370 = python_operator(stypy.reporting.localization.Localization(__file__, 197, 12), '%', unicode_188367, version___188369)

# Processing the call keyword arguments (line 196)
kwargs_188371 = {}
# Getting the type of 'ImportError' (line 196)
ImportError_188366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 14), 'ImportError', False)
# Calling ImportError(args, kwargs) (line 196)
ImportError_call_result_188372 = invoke(stypy.reporting.localization.Localization(__file__, 196, 14), ImportError_188366, *[result_mod_188370], **kwargs_188371)

ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 196, 8), ImportError_call_result_188372, 'raise parameter', BaseException)
# SSA join for if statement (line 195)
module_type_store = module_type_store.join_ssa_context()

# SSA join for try-except statement (line 190)
module_type_store = module_type_store.join_ssa_context()




# Call to compare_versions(...): (line 201)
# Processing the call arguments (line 201)
# Getting the type of 'numpy' (line 201)
numpy_188374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 24), 'numpy', False)
# Obtaining the member '__version__' of a type (line 201)
version___188375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 24), numpy_188374, '__version__')
# Getting the type of '__version__numpy__' (line 201)
version__numpy___188376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 43), '__version__numpy__', False)
# Processing the call keyword arguments (line 201)
kwargs_188377 = {}
# Getting the type of 'compare_versions' (line 201)
compare_versions_188373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 7), 'compare_versions', False)
# Calling compare_versions(args, kwargs) (line 201)
compare_versions_call_result_188378 = invoke(stypy.reporting.localization.Localization(__file__, 201, 7), compare_versions_188373, *[version___188375, version__numpy___188376], **kwargs_188377)

# Applying the 'not' unary operator (line 201)
result_not__188379 = python_operator(stypy.reporting.localization.Localization(__file__, 201, 3), 'not', compare_versions_call_result_188378)

# Testing the type of an if condition (line 201)
if_condition_188380 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 201, 0), result_not__188379)
# Assigning a type to the variable 'if_condition_188380' (line 201)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 201, 0), 'if_condition_188380', if_condition_188380)
# SSA begins for if statement (line 201)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Call to ImportError(...): (line 202)
# Processing the call arguments (line 202)
unicode_188382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, 8), 'unicode', u'Matplotlib requires numpy>=%s; you have %s')

# Obtaining an instance of the builtin type 'tuple' (line 204)
tuple_188383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 12), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 204)
# Adding element type (line 204)
# Getting the type of '__version__numpy__' (line 204)
version__numpy___188384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 12), '__version__numpy__', False)
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 204, 12), tuple_188383, version__numpy___188384)
# Adding element type (line 204)
# Getting the type of 'numpy' (line 204)
numpy_188385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 32), 'numpy', False)
# Obtaining the member '__version__' of a type (line 204)
version___188386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 32), numpy_188385, '__version__')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 204, 12), tuple_188383, version___188386)

# Applying the binary operator '%' (line 203)
result_mod_188387 = python_operator(stypy.reporting.localization.Localization(__file__, 203, 8), '%', unicode_188382, tuple_188383)

# Processing the call keyword arguments (line 202)
kwargs_188388 = {}
# Getting the type of 'ImportError' (line 202)
ImportError_188381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 10), 'ImportError', False)
# Calling ImportError(args, kwargs) (line 202)
ImportError_call_result_188389 = invoke(stypy.reporting.localization.Localization(__file__, 202, 10), ImportError_188381, *[result_mod_188387], **kwargs_188388)

ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 202, 4), ImportError_call_result_188389, 'raise parameter', BaseException)
# SSA join for if statement (line 201)
module_type_store = module_type_store.join_ssa_context()


# Type idiom detected: calculating its left and rigth part (line 207)
unicode_188390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, 20), 'unicode', u'argv')
# Getting the type of 'sys' (line 207)
sys_188391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 15), 'sys')

(may_be_188392, more_types_in_union_188393) = may_not_provide_member(unicode_188390, sys_188391)

if may_be_188392:

    if more_types_in_union_188393:
        # Runtime conditional SSA (line 207)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
    else:
        module_type_store = module_type_store

    # Assigning a type to the variable 'sys' (line 207)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 0), 'sys', remove_member_provider_from_union(sys_188391, u'argv'))
    
    # Assigning a List to a Attribute (line 208):
    
    # Assigning a List to a Attribute (line 208):
    
    # Obtaining an instance of the builtin type 'list' (line 208)
    list_188394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 208, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 208)
    # Adding element type (line 208)
    
    # Call to str(...): (line 208)
    # Processing the call arguments (line 208)
    unicode_188396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 208, 20), 'unicode', u'modpython')
    # Processing the call keyword arguments (line 208)
    kwargs_188397 = {}
    # Getting the type of 'str' (line 208)
    str_188395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 16), 'str', False)
    # Calling str(args, kwargs) (line 208)
    str_call_result_188398 = invoke(stypy.reporting.localization.Localization(__file__, 208, 16), str_188395, *[unicode_188396], **kwargs_188397)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 208, 15), list_188394, str_call_result_188398)
    
    # Getting the type of 'sys' (line 208)
    sys_188399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 4), 'sys')
    # Setting the type of the member 'argv' of a type (line 208)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 208, 4), sys_188399, 'argv', list_188394)

    if more_types_in_union_188393:
        # SSA join for if statement (line 207)
        module_type_store = module_type_store.join_ssa_context()




@norecursion
def _is_writable_dir(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_is_writable_dir'
    module_type_store = module_type_store.open_function_context('_is_writable_dir', 211, 0, False)
    
    # Passed parameters checking function
    _is_writable_dir.stypy_localization = localization
    _is_writable_dir.stypy_type_of_self = None
    _is_writable_dir.stypy_type_store = module_type_store
    _is_writable_dir.stypy_function_name = '_is_writable_dir'
    _is_writable_dir.stypy_param_names_list = ['p']
    _is_writable_dir.stypy_varargs_param_name = None
    _is_writable_dir.stypy_kwargs_param_name = None
    _is_writable_dir.stypy_call_defaults = defaults
    _is_writable_dir.stypy_call_varargs = varargs
    _is_writable_dir.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_is_writable_dir', ['p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_is_writable_dir', localization, ['p'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_is_writable_dir(...)' code ##################

    unicode_188400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 215, (-1)), 'unicode', u'\n    p is a string pointing to a putative writable dir -- return True p\n    is such a string, else False\n    ')
    
    # Evaluating a boolean operation
    
    # Call to access(...): (line 216)
    # Processing the call arguments (line 216)
    # Getting the type of 'p' (line 216)
    p_188403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 21), 'p', False)
    # Getting the type of 'os' (line 216)
    os_188404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 24), 'os', False)
    # Obtaining the member 'W_OK' of a type (line 216)
    W_OK_188405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 24), os_188404, 'W_OK')
    # Processing the call keyword arguments (line 216)
    kwargs_188406 = {}
    # Getting the type of 'os' (line 216)
    os_188401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 11), 'os', False)
    # Obtaining the member 'access' of a type (line 216)
    access_188402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 11), os_188401, 'access')
    # Calling access(args, kwargs) (line 216)
    access_call_result_188407 = invoke(stypy.reporting.localization.Localization(__file__, 216, 11), access_188402, *[p_188403, W_OK_188405], **kwargs_188406)
    
    
    # Call to isdir(...): (line 216)
    # Processing the call arguments (line 216)
    # Getting the type of 'p' (line 216)
    p_188411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 51), 'p', False)
    # Processing the call keyword arguments (line 216)
    kwargs_188412 = {}
    # Getting the type of 'os' (line 216)
    os_188408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 37), 'os', False)
    # Obtaining the member 'path' of a type (line 216)
    path_188409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 37), os_188408, 'path')
    # Obtaining the member 'isdir' of a type (line 216)
    isdir_188410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 37), path_188409, 'isdir')
    # Calling isdir(args, kwargs) (line 216)
    isdir_call_result_188413 = invoke(stypy.reporting.localization.Localization(__file__, 216, 37), isdir_188410, *[p_188411], **kwargs_188412)
    
    # Applying the binary operator 'and' (line 216)
    result_and_keyword_188414 = python_operator(stypy.reporting.localization.Localization(__file__, 216, 11), 'and', access_call_result_188407, isdir_call_result_188413)
    
    # Assigning a type to the variable 'stypy_return_type' (line 216)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 4), 'stypy_return_type', result_and_keyword_188414)
    
    # ################# End of '_is_writable_dir(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_is_writable_dir' in the type store
    # Getting the type of 'stypy_return_type' (line 211)
    stypy_return_type_188415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_188415)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_is_writable_dir'
    return stypy_return_type_188415

# Assigning a type to the variable '_is_writable_dir' (line 211)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 0), '_is_writable_dir', _is_writable_dir)
# Declaration of the 'Verbose' class

class Verbose(object, ):
    unicode_188416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 223, (-1)), 'unicode', u'\n    A class to handle reporting.  Set the fileo attribute to any file\n    instance to handle the output.  Default is sys.stdout\n    ')
    
    # Assigning a Tuple to a Name (line 224):
    
    # Assigning a DictComp to a Name (line 225):
    
    # Assigning a Name to a Name (line 229):
    
    
    # Obtaining the type of the subscript
    int_188417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 24), 'int')
    slice_188418 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 231, 15), int_188417, None, None)
    # Getting the type of 'sys' (line 231)
    sys_188419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 15), 'sys')
    # Obtaining the member 'argv' of a type (line 231)
    argv_188420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 15), sys_188419, 'argv')
    # Obtaining the member '__getitem__' of a type (line 231)
    getitem___188421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 15), argv_188420, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 231)
    subscript_call_result_188422 = invoke(stypy.reporting.localization.Localization(__file__, 231, 15), getitem___188421, slice_188418)
    
    # Testing the type of a for loop iterable (line 231)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 231, 4), subscript_call_result_188422)
    # Getting the type of the for loop variable (line 231)
    for_loop_var_188423 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 231, 4), subscript_call_result_188422)
    # Assigning a type to the variable 'arg' (line 231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'arg', for_loop_var_188423)
    # SSA begins for a for statement (line 231)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to startswith(...): (line 234)
    # Processing the call arguments (line 234)
    
    # Call to str(...): (line 234)
    # Processing the call arguments (line 234)
    unicode_188427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 234, 34), 'unicode', u'--verbose-')
    # Processing the call keyword arguments (line 234)
    kwargs_188428 = {}
    # Getting the type of 'str' (line 234)
    str_188426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 30), 'str', False)
    # Calling str(args, kwargs) (line 234)
    str_call_result_188429 = invoke(stypy.reporting.localization.Localization(__file__, 234, 30), str_188426, *[unicode_188427], **kwargs_188428)
    
    # Processing the call keyword arguments (line 234)
    kwargs_188430 = {}
    # Getting the type of 'arg' (line 234)
    arg_188424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 15), 'arg', False)
    # Obtaining the member 'startswith' of a type (line 234)
    startswith_188425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 234, 15), arg_188424, 'startswith')
    # Calling startswith(args, kwargs) (line 234)
    startswith_call_result_188431 = invoke(stypy.reporting.localization.Localization(__file__, 234, 15), startswith_188425, *[str_call_result_188429], **kwargs_188430)
    
    # Applying the 'not' unary operator (line 234)
    result_not__188432 = python_operator(stypy.reporting.localization.Localization(__file__, 234, 11), 'not', startswith_call_result_188431)
    
    # Testing the type of an if condition (line 234)
    if_condition_188433 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 234, 8), result_not__188432)
    # Assigning a type to the variable 'if_condition_188433' (line 234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 8), 'if_condition_188433', if_condition_188433)
    # SSA begins for if statement (line 234)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 234)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 236):
    
    # Assigning a Subscript to a Name (line 236):
    
    # Obtaining the type of the subscript
    int_188434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 236, 24), 'int')
    slice_188435 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 236, 20), int_188434, None, None)
    # Getting the type of 'arg' (line 236)
    arg_188436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 20), 'arg')
    # Obtaining the member '__getitem__' of a type (line 236)
    getitem___188437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 20), arg_188436, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 236)
    subscript_call_result_188438 = invoke(stypy.reporting.localization.Localization(__file__, 236, 20), getitem___188437, slice_188435)
    
    # Assigning a type to the variable 'level_str' (line 236)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 236, 8), 'level_str', subscript_call_result_188438)
    
    
    # Getting the type of 'level_str' (line 240)
    level_str_188439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 11), 'level_str')
    # Getting the type of 'levels' (line 240)
    levels_188440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 24), 'levels')
    # Applying the binary operator 'in' (line 240)
    result_contains_188441 = python_operator(stypy.reporting.localization.Localization(__file__, 240, 11), 'in', level_str_188439, levels_188440)
    
    # Testing the type of an if condition (line 240)
    if_condition_188442 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 240, 8), result_contains_188441)
    # Assigning a type to the variable 'if_condition_188442' (line 240)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 240, 8), 'if_condition_188442', if_condition_188442)
    # SSA begins for if statement (line 240)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 241):
    
    # Assigning a Name to a Name (line 241):
    # Getting the type of 'level_str' (line 241)
    level_str_188443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 34), 'level_str')
    # Assigning a type to the variable '_commandLineVerbose' (line 241)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 241, 12), '_commandLineVerbose', level_str_188443)
    # SSA join for if statement (line 240)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 243, 4, False)
        # Assigning a type to the variable 'self' (line 244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Verbose.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to set_level(...): (line 244)
        # Processing the call arguments (line 244)
        unicode_188446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 23), 'unicode', u'silent')
        # Processing the call keyword arguments (line 244)
        kwargs_188447 = {}
        # Getting the type of 'self' (line 244)
        self_188444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 8), 'self', False)
        # Obtaining the member 'set_level' of a type (line 244)
        set_level_188445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 8), self_188444, 'set_level')
        # Calling set_level(args, kwargs) (line 244)
        set_level_call_result_188448 = invoke(stypy.reporting.localization.Localization(__file__, 244, 8), set_level_188445, *[unicode_188446], **kwargs_188447)
        
        
        # Assigning a Attribute to a Attribute (line 245):
        
        # Assigning a Attribute to a Attribute (line 245):
        # Getting the type of 'sys' (line 245)
        sys_188449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 21), 'sys')
        # Obtaining the member 'stdout' of a type (line 245)
        stdout_188450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 21), sys_188449, 'stdout')
        # Getting the type of 'self' (line 245)
        self_188451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 8), 'self')
        # Setting the type of the member 'fileo' of a type (line 245)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 8), self_188451, 'fileo', stdout_188450)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_level(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_level'
        module_type_store = module_type_store.open_function_context('set_level', 247, 4, False)
        # Assigning a type to the variable 'self' (line 248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 248, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Verbose.set_level.__dict__.__setitem__('stypy_localization', localization)
        Verbose.set_level.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Verbose.set_level.__dict__.__setitem__('stypy_type_store', module_type_store)
        Verbose.set_level.__dict__.__setitem__('stypy_function_name', 'Verbose.set_level')
        Verbose.set_level.__dict__.__setitem__('stypy_param_names_list', ['level'])
        Verbose.set_level.__dict__.__setitem__('stypy_varargs_param_name', None)
        Verbose.set_level.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Verbose.set_level.__dict__.__setitem__('stypy_call_defaults', defaults)
        Verbose.set_level.__dict__.__setitem__('stypy_call_varargs', varargs)
        Verbose.set_level.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Verbose.set_level.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Verbose.set_level', ['level'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_level', localization, ['level'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_level(...)' code ##################

        unicode_188452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 8), 'unicode', u'set the verbosity to one of the Verbose.levels strings')
        
        
        # Getting the type of 'self' (line 250)
        self_188453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 11), 'self')
        # Obtaining the member '_commandLineVerbose' of a type (line 250)
        _commandLineVerbose_188454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 250, 11), self_188453, '_commandLineVerbose')
        # Getting the type of 'None' (line 250)
        None_188455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 43), 'None')
        # Applying the binary operator 'isnot' (line 250)
        result_is_not_188456 = python_operator(stypy.reporting.localization.Localization(__file__, 250, 11), 'isnot', _commandLineVerbose_188454, None_188455)
        
        # Testing the type of an if condition (line 250)
        if_condition_188457 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 250, 8), result_is_not_188456)
        # Assigning a type to the variable 'if_condition_188457' (line 250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 250, 8), 'if_condition_188457', if_condition_188457)
        # SSA begins for if statement (line 250)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 251):
        
        # Assigning a Attribute to a Name (line 251):
        # Getting the type of 'self' (line 251)
        self_188458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 20), 'self')
        # Obtaining the member '_commandLineVerbose' of a type (line 251)
        _commandLineVerbose_188459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 251, 20), self_188458, '_commandLineVerbose')
        # Assigning a type to the variable 'level' (line 251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 12), 'level', _commandLineVerbose_188459)
        # SSA join for if statement (line 250)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'level' (line 252)
        level_188460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 11), 'level')
        # Getting the type of 'self' (line 252)
        self_188461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 24), 'self')
        # Obtaining the member 'levels' of a type (line 252)
        levels_188462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 24), self_188461, 'levels')
        # Applying the binary operator 'notin' (line 252)
        result_contains_188463 = python_operator(stypy.reporting.localization.Localization(__file__, 252, 11), 'notin', level_188460, levels_188462)
        
        # Testing the type of an if condition (line 252)
        if_condition_188464 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 252, 8), result_contains_188463)
        # Assigning a type to the variable 'if_condition_188464' (line 252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 8), 'if_condition_188464', if_condition_188464)
        # SSA begins for if statement (line 252)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 253)
        # Processing the call arguments (line 253)
        unicode_188467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 253, 26), 'unicode', u'matplotlib: unrecognized --verbose-* string "%s". Legal values are %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 254)
        tuple_188468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 52), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 254)
        # Adding element type (line 254)
        # Getting the type of 'level' (line 254)
        level_188469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 52), 'level', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 254, 52), tuple_188468, level_188469)
        # Adding element type (line 254)
        # Getting the type of 'self' (line 254)
        self_188470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 59), 'self', False)
        # Obtaining the member 'levels' of a type (line 254)
        levels_188471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 59), self_188470, 'levels')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 254, 52), tuple_188468, levels_188471)
        
        # Applying the binary operator '%' (line 253)
        result_mod_188472 = python_operator(stypy.reporting.localization.Localization(__file__, 253, 26), '%', unicode_188467, tuple_188468)
        
        # Processing the call keyword arguments (line 253)
        kwargs_188473 = {}
        # Getting the type of 'warnings' (line 253)
        warnings_188465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 253)
        warn_188466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 253, 12), warnings_188465, 'warn')
        # Calling warn(args, kwargs) (line 253)
        warn_call_result_188474 = invoke(stypy.reporting.localization.Localization(__file__, 253, 12), warn_188466, *[result_mod_188472], **kwargs_188473)
        
        # SSA branch for the else part of an if statement (line 252)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 256):
        
        # Assigning a Name to a Attribute (line 256):
        # Getting the type of 'level' (line 256)
        level_188475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 25), 'level')
        # Getting the type of 'self' (line 256)
        self_188476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 12), 'self')
        # Setting the type of the member 'level' of a type (line 256)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 12), self_188476, 'level', level_188475)
        # SSA join for if statement (line 252)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_level(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_level' in the type store
        # Getting the type of 'stypy_return_type' (line 247)
        stypy_return_type_188477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_188477)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_level'
        return stypy_return_type_188477


    @norecursion
    def set_fileo(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_fileo'
        module_type_store = module_type_store.open_function_context('set_fileo', 258, 4, False)
        # Assigning a type to the variable 'self' (line 259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Verbose.set_fileo.__dict__.__setitem__('stypy_localization', localization)
        Verbose.set_fileo.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Verbose.set_fileo.__dict__.__setitem__('stypy_type_store', module_type_store)
        Verbose.set_fileo.__dict__.__setitem__('stypy_function_name', 'Verbose.set_fileo')
        Verbose.set_fileo.__dict__.__setitem__('stypy_param_names_list', ['fname'])
        Verbose.set_fileo.__dict__.__setitem__('stypy_varargs_param_name', None)
        Verbose.set_fileo.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Verbose.set_fileo.__dict__.__setitem__('stypy_call_defaults', defaults)
        Verbose.set_fileo.__dict__.__setitem__('stypy_call_varargs', varargs)
        Verbose.set_fileo.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Verbose.set_fileo.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Verbose.set_fileo', ['fname'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_fileo', localization, ['fname'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_fileo(...)' code ##################

        
        # Assigning a Dict to a Name (line 259):
        
        # Assigning a Dict to a Name (line 259):
        
        # Obtaining an instance of the builtin type 'dict' (line 259)
        dict_188478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 259, 14), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 259)
        # Adding element type (key, value) (line 259)
        unicode_188479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 260, 12), 'unicode', u'sys.stdout')
        # Getting the type of 'sys' (line 260)
        sys_188480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 26), 'sys')
        # Obtaining the member 'stdout' of a type (line 260)
        stdout_188481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 260, 26), sys_188480, 'stdout')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 259, 14), dict_188478, (unicode_188479, stdout_188481))
        # Adding element type (key, value) (line 259)
        unicode_188482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 261, 12), 'unicode', u'sys.stderr')
        # Getting the type of 'sys' (line 261)
        sys_188483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 26), 'sys')
        # Obtaining the member 'stderr' of a type (line 261)
        stderr_188484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 261, 26), sys_188483, 'stderr')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 259, 14), dict_188478, (unicode_188482, stderr_188484))
        
        # Assigning a type to the variable 'std' (line 259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 8), 'std', dict_188478)
        
        
        # Getting the type of 'fname' (line 263)
        fname_188485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 11), 'fname')
        # Getting the type of 'std' (line 263)
        std_188486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 20), 'std')
        # Applying the binary operator 'in' (line 263)
        result_contains_188487 = python_operator(stypy.reporting.localization.Localization(__file__, 263, 11), 'in', fname_188485, std_188486)
        
        # Testing the type of an if condition (line 263)
        if_condition_188488 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 263, 8), result_contains_188487)
        # Assigning a type to the variable 'if_condition_188488' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'if_condition_188488', if_condition_188488)
        # SSA begins for if statement (line 263)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Attribute (line 264):
        
        # Assigning a Subscript to a Attribute (line 264):
        
        # Obtaining the type of the subscript
        # Getting the type of 'fname' (line 264)
        fname_188489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 29), 'fname')
        # Getting the type of 'std' (line 264)
        std_188490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 25), 'std')
        # Obtaining the member '__getitem__' of a type (line 264)
        getitem___188491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 264, 25), std_188490, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 264)
        subscript_call_result_188492 = invoke(stypy.reporting.localization.Localization(__file__, 264, 25), getitem___188491, fname_188489)
        
        # Getting the type of 'self' (line 264)
        self_188493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 12), 'self')
        # Setting the type of the member 'fileo' of a type (line 264)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 264, 12), self_188493, 'fileo', subscript_call_result_188492)
        # SSA branch for the else part of an if statement (line 263)
        module_type_store.open_ssa_branch('else')
        
        
        # SSA begins for try-except statement (line 266)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 267):
        
        # Assigning a Call to a Name (line 267):
        
        # Call to open(...): (line 267)
        # Processing the call arguments (line 267)
        # Getting the type of 'fname' (line 267)
        fname_188495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 29), 'fname', False)
        unicode_188496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, 36), 'unicode', u'w')
        # Processing the call keyword arguments (line 267)
        kwargs_188497 = {}
        # Getting the type of 'open' (line 267)
        open_188494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 24), 'open', False)
        # Calling open(args, kwargs) (line 267)
        open_call_result_188498 = invoke(stypy.reporting.localization.Localization(__file__, 267, 24), open_188494, *[fname_188495, unicode_188496], **kwargs_188497)
        
        # Assigning a type to the variable 'fileo' (line 267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 267, 16), 'fileo', open_call_result_188498)
        # SSA branch for the except part of a try statement (line 266)
        # SSA branch for the except 'IOError' branch of a try statement (line 266)
        module_type_store.open_ssa_branch('except')
        
        # Call to ValueError(...): (line 269)
        # Processing the call arguments (line 269)
        
        # Call to format(...): (line 269)
        # Processing the call arguments (line 269)
        # Getting the type of 'fname' (line 271)
        fname_188502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 64), 'fname', False)
        # Processing the call keyword arguments (line 269)
        kwargs_188503 = {}
        unicode_188500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 269, 33), 'unicode', u'Verbose object could not open log file "{0}" for writing.\nCheck your matplotlibrc verbose.fileo setting')
        # Obtaining the member 'format' of a type (line 269)
        format_188501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 269, 33), unicode_188500, 'format')
        # Calling format(args, kwargs) (line 269)
        format_call_result_188504 = invoke(stypy.reporting.localization.Localization(__file__, 269, 33), format_188501, *[fname_188502], **kwargs_188503)
        
        # Processing the call keyword arguments (line 269)
        kwargs_188505 = {}
        # Getting the type of 'ValueError' (line 269)
        ValueError_188499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 269)
        ValueError_call_result_188506 = invoke(stypy.reporting.localization.Localization(__file__, 269, 22), ValueError_188499, *[format_call_result_188504], **kwargs_188505)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 269, 16), ValueError_call_result_188506, 'raise parameter', BaseException)
        # SSA branch for the else branch of a try statement (line 266)
        module_type_store.open_ssa_branch('except else')
        
        # Assigning a Name to a Attribute (line 273):
        
        # Assigning a Name to a Attribute (line 273):
        # Getting the type of 'fileo' (line 273)
        fileo_188507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 29), 'fileo')
        # Getting the type of 'self' (line 273)
        self_188508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 16), 'self')
        # Setting the type of the member 'fileo' of a type (line 273)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 273, 16), self_188508, 'fileo', fileo_188507)
        # SSA join for try-except statement (line 266)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 263)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_fileo(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_fileo' in the type store
        # Getting the type of 'stypy_return_type' (line 258)
        stypy_return_type_188509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_188509)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_fileo'
        return stypy_return_type_188509


    @norecursion
    def report(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_188510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 30), 'unicode', u'helpful')
        defaults = [unicode_188510]
        # Create a new context for function 'report'
        module_type_store = module_type_store.open_function_context('report', 275, 4, False)
        # Assigning a type to the variable 'self' (line 276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Verbose.report.__dict__.__setitem__('stypy_localization', localization)
        Verbose.report.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Verbose.report.__dict__.__setitem__('stypy_type_store', module_type_store)
        Verbose.report.__dict__.__setitem__('stypy_function_name', 'Verbose.report')
        Verbose.report.__dict__.__setitem__('stypy_param_names_list', ['s', 'level'])
        Verbose.report.__dict__.__setitem__('stypy_varargs_param_name', None)
        Verbose.report.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Verbose.report.__dict__.__setitem__('stypy_call_defaults', defaults)
        Verbose.report.__dict__.__setitem__('stypy_call_varargs', varargs)
        Verbose.report.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Verbose.report.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Verbose.report', ['s', 'level'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'report', localization, ['s', 'level'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'report(...)' code ##################

        unicode_188511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, (-1)), 'unicode', u'\n        print message s to self.fileo if self.level>=level.  Return\n        value indicates whether a message was issued\n\n        ')
        
        
        # Call to ge(...): (line 281)
        # Processing the call arguments (line 281)
        # Getting the type of 'level' (line 281)
        level_188514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 19), 'level', False)
        # Processing the call keyword arguments (line 281)
        kwargs_188515 = {}
        # Getting the type of 'self' (line 281)
        self_188512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 11), 'self', False)
        # Obtaining the member 'ge' of a type (line 281)
        ge_188513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 281, 11), self_188512, 'ge')
        # Calling ge(args, kwargs) (line 281)
        ge_call_result_188516 = invoke(stypy.reporting.localization.Localization(__file__, 281, 11), ge_188513, *[level_188514], **kwargs_188515)
        
        # Testing the type of an if condition (line 281)
        if_condition_188517 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 281, 8), ge_call_result_188516)
        # Assigning a type to the variable 'if_condition_188517' (line 281)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 281, 8), 'if_condition_188517', if_condition_188517)
        # SSA begins for if statement (line 281)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to print(...): (line 282)
        # Processing the call arguments (line 282)
        # Getting the type of 's' (line 282)
        s_188519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 18), 's', False)
        # Processing the call keyword arguments (line 282)
        # Getting the type of 'self' (line 282)
        self_188520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 26), 'self', False)
        # Obtaining the member 'fileo' of a type (line 282)
        fileo_188521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 282, 26), self_188520, 'fileo')
        keyword_188522 = fileo_188521
        kwargs_188523 = {'file': keyword_188522}
        # Getting the type of 'print' (line 282)
        print_188518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 12), 'print', False)
        # Calling print(args, kwargs) (line 282)
        print_call_result_188524 = invoke(stypy.reporting.localization.Localization(__file__, 282, 12), print_188518, *[s_188519], **kwargs_188523)
        
        # Getting the type of 'True' (line 283)
        True_188525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 19), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 283, 12), 'stypy_return_type', True_188525)
        # SSA join for if statement (line 281)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'False' (line 284)
        False_188526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 8), 'stypy_return_type', False_188526)
        
        # ################# End of 'report(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'report' in the type store
        # Getting the type of 'stypy_return_type' (line 275)
        stypy_return_type_188527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_188527)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'report'
        return stypy_return_type_188527


    @norecursion
    def wrap(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_188528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, 36), 'unicode', u'helpful')
        # Getting the type of 'True' (line 286)
        True_188529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 54), 'True')
        defaults = [unicode_188528, True_188529]
        # Create a new context for function 'wrap'
        module_type_store = module_type_store.open_function_context('wrap', 286, 4, False)
        # Assigning a type to the variable 'self' (line 287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 287, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Verbose.wrap.__dict__.__setitem__('stypy_localization', localization)
        Verbose.wrap.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Verbose.wrap.__dict__.__setitem__('stypy_type_store', module_type_store)
        Verbose.wrap.__dict__.__setitem__('stypy_function_name', 'Verbose.wrap')
        Verbose.wrap.__dict__.__setitem__('stypy_param_names_list', ['fmt', 'func', 'level', 'always'])
        Verbose.wrap.__dict__.__setitem__('stypy_varargs_param_name', None)
        Verbose.wrap.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Verbose.wrap.__dict__.__setitem__('stypy_call_defaults', defaults)
        Verbose.wrap.__dict__.__setitem__('stypy_call_varargs', varargs)
        Verbose.wrap.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Verbose.wrap.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Verbose.wrap', ['fmt', 'func', 'level', 'always'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'wrap', localization, ['fmt', 'func', 'level', 'always'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'wrap(...)' code ##################

        unicode_188530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 294, (-1)), 'unicode', u'\n        return a callable function that wraps func and reports it\n        output through the verbose handler if current verbosity level\n        is higher than level\n\n        if always is True, the report will occur on every function\n        call; otherwise only on the first time the function is called\n        ')
        # Evaluating assert statement condition
        
        # Call to callable(...): (line 295)
        # Processing the call arguments (line 295)
        # Getting the type of 'func' (line 295)
        func_188532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 24), 'func', False)
        # Processing the call keyword arguments (line 295)
        kwargs_188533 = {}
        # Getting the type of 'callable' (line 295)
        callable_188531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 15), 'callable', False)
        # Calling callable(args, kwargs) (line 295)
        callable_call_result_188534 = invoke(stypy.reporting.localization.Localization(__file__, 295, 15), callable_188531, *[func_188532], **kwargs_188533)
        

        @norecursion
        def wrapper(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'wrapper'
            module_type_store = module_type_store.open_function_context('wrapper', 297, 8, False)
            
            # Passed parameters checking function
            wrapper.stypy_localization = localization
            wrapper.stypy_type_of_self = None
            wrapper.stypy_type_store = module_type_store
            wrapper.stypy_function_name = 'wrapper'
            wrapper.stypy_param_names_list = []
            wrapper.stypy_varargs_param_name = 'args'
            wrapper.stypy_kwargs_param_name = 'kwargs'
            wrapper.stypy_call_defaults = defaults
            wrapper.stypy_call_varargs = varargs
            wrapper.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'wrapper', [], 'args', 'kwargs', defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'wrapper', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'wrapper(...)' code ##################

            
            # Assigning a Call to a Name (line 298):
            
            # Assigning a Call to a Name (line 298):
            
            # Call to func(...): (line 298)
            # Getting the type of 'args' (line 298)
            args_188536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 24), 'args', False)
            # Processing the call keyword arguments (line 298)
            # Getting the type of 'kwargs' (line 298)
            kwargs_188537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 32), 'kwargs', False)
            kwargs_188538 = {'kwargs_188537': kwargs_188537}
            # Getting the type of 'func' (line 298)
            func_188535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 18), 'func', False)
            # Calling func(args, kwargs) (line 298)
            func_call_result_188539 = invoke(stypy.reporting.localization.Localization(__file__, 298, 18), func_188535, *[args_188536], **kwargs_188538)
            
            # Assigning a type to the variable 'ret' (line 298)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 12), 'ret', func_call_result_188539)
            
            
            # Evaluating a boolean operation
            # Getting the type of 'always' (line 300)
            always_188540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 16), 'always')
            
            # Getting the type of 'wrapper' (line 300)
            wrapper_188541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 30), 'wrapper')
            # Obtaining the member '_spoke' of a type (line 300)
            _spoke_188542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 300, 30), wrapper_188541, '_spoke')
            # Applying the 'not' unary operator (line 300)
            result_not__188543 = python_operator(stypy.reporting.localization.Localization(__file__, 300, 26), 'not', _spoke_188542)
            
            # Applying the binary operator 'or' (line 300)
            result_or_keyword_188544 = python_operator(stypy.reporting.localization.Localization(__file__, 300, 16), 'or', always_188540, result_not__188543)
            
            # Testing the type of an if condition (line 300)
            if_condition_188545 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 300, 12), result_or_keyword_188544)
            # Assigning a type to the variable 'if_condition_188545' (line 300)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 12), 'if_condition_188545', if_condition_188545)
            # SSA begins for if statement (line 300)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 301):
            
            # Assigning a Call to a Name (line 301):
            
            # Call to report(...): (line 301)
            # Processing the call arguments (line 301)
            # Getting the type of 'fmt' (line 301)
            fmt_188548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 36), 'fmt', False)
            # Getting the type of 'ret' (line 301)
            ret_188549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 42), 'ret', False)
            # Applying the binary operator '%' (line 301)
            result_mod_188550 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 36), '%', fmt_188548, ret_188549)
            
            # Getting the type of 'level' (line 301)
            level_188551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 47), 'level', False)
            # Processing the call keyword arguments (line 301)
            kwargs_188552 = {}
            # Getting the type of 'self' (line 301)
            self_188546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 24), 'self', False)
            # Obtaining the member 'report' of a type (line 301)
            report_188547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 24), self_188546, 'report')
            # Calling report(args, kwargs) (line 301)
            report_call_result_188553 = invoke(stypy.reporting.localization.Localization(__file__, 301, 24), report_188547, *[result_mod_188550, level_188551], **kwargs_188552)
            
            # Assigning a type to the variable 'spoke' (line 301)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 16), 'spoke', report_call_result_188553)
            
            
            # Getting the type of 'wrapper' (line 302)
            wrapper_188554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 23), 'wrapper')
            # Obtaining the member '_spoke' of a type (line 302)
            _spoke_188555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 23), wrapper_188554, '_spoke')
            # Applying the 'not' unary operator (line 302)
            result_not__188556 = python_operator(stypy.reporting.localization.Localization(__file__, 302, 19), 'not', _spoke_188555)
            
            # Testing the type of an if condition (line 302)
            if_condition_188557 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 302, 16), result_not__188556)
            # Assigning a type to the variable 'if_condition_188557' (line 302)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 302, 16), 'if_condition_188557', if_condition_188557)
            # SSA begins for if statement (line 302)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Attribute (line 303):
            
            # Assigning a Name to a Attribute (line 303):
            # Getting the type of 'spoke' (line 303)
            spoke_188558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 37), 'spoke')
            # Getting the type of 'wrapper' (line 303)
            wrapper_188559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 20), 'wrapper')
            # Setting the type of the member '_spoke' of a type (line 303)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 303, 20), wrapper_188559, '_spoke', spoke_188558)
            # SSA join for if statement (line 302)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 300)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'ret' (line 304)
            ret_188560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 19), 'ret')
            # Assigning a type to the variable 'stypy_return_type' (line 304)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 304, 12), 'stypy_return_type', ret_188560)
            
            # ################# End of 'wrapper(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'wrapper' in the type store
            # Getting the type of 'stypy_return_type' (line 297)
            stypy_return_type_188561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_188561)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'wrapper'
            return stypy_return_type_188561

        # Assigning a type to the variable 'wrapper' (line 297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 8), 'wrapper', wrapper)
        
        # Assigning a Name to a Attribute (line 305):
        
        # Assigning a Name to a Attribute (line 305):
        # Getting the type of 'False' (line 305)
        False_188562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 25), 'False')
        # Getting the type of 'wrapper' (line 305)
        wrapper_188563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 8), 'wrapper')
        # Setting the type of the member '_spoke' of a type (line 305)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 8), wrapper_188563, '_spoke', False_188562)
        
        # Assigning a Attribute to a Attribute (line 306):
        
        # Assigning a Attribute to a Attribute (line 306):
        # Getting the type of 'func' (line 306)
        func_188564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 26), 'func')
        # Obtaining the member '__doc__' of a type (line 306)
        doc___188565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 26), func_188564, '__doc__')
        # Getting the type of 'wrapper' (line 306)
        wrapper_188566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 8), 'wrapper')
        # Setting the type of the member '__doc__' of a type (line 306)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 8), wrapper_188566, '__doc__', doc___188565)
        # Getting the type of 'wrapper' (line 307)
        wrapper_188567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 15), 'wrapper')
        # Assigning a type to the variable 'stypy_return_type' (line 307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 307, 8), 'stypy_return_type', wrapper_188567)
        
        # ################# End of 'wrap(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'wrap' in the type store
        # Getting the type of 'stypy_return_type' (line 286)
        stypy_return_type_188568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_188568)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'wrap'
        return stypy_return_type_188568


    @norecursion
    def ge(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'ge'
        module_type_store = module_type_store.open_function_context('ge', 309, 4, False)
        # Assigning a type to the variable 'self' (line 310)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Verbose.ge.__dict__.__setitem__('stypy_localization', localization)
        Verbose.ge.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Verbose.ge.__dict__.__setitem__('stypy_type_store', module_type_store)
        Verbose.ge.__dict__.__setitem__('stypy_function_name', 'Verbose.ge')
        Verbose.ge.__dict__.__setitem__('stypy_param_names_list', ['level'])
        Verbose.ge.__dict__.__setitem__('stypy_varargs_param_name', None)
        Verbose.ge.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Verbose.ge.__dict__.__setitem__('stypy_call_defaults', defaults)
        Verbose.ge.__dict__.__setitem__('stypy_call_varargs', varargs)
        Verbose.ge.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Verbose.ge.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Verbose.ge', ['level'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ge', localization, ['level'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ge(...)' code ##################

        unicode_188569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 310, 8), 'unicode', u'return true if self.level is >= level')
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 311)
        self_188570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 25), 'self')
        # Obtaining the member 'level' of a type (line 311)
        level_188571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 25), self_188570, 'level')
        # Getting the type of 'self' (line 311)
        self_188572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 15), 'self')
        # Obtaining the member 'vald' of a type (line 311)
        vald_188573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 15), self_188572, 'vald')
        # Obtaining the member '__getitem__' of a type (line 311)
        getitem___188574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 15), vald_188573, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 311)
        subscript_call_result_188575 = invoke(stypy.reporting.localization.Localization(__file__, 311, 15), getitem___188574, level_188571)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'level' (line 311)
        level_188576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 50), 'level')
        # Getting the type of 'self' (line 311)
        self_188577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 40), 'self')
        # Obtaining the member 'vald' of a type (line 311)
        vald_188578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 40), self_188577, 'vald')
        # Obtaining the member '__getitem__' of a type (line 311)
        getitem___188579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 40), vald_188578, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 311)
        subscript_call_result_188580 = invoke(stypy.reporting.localization.Localization(__file__, 311, 40), getitem___188579, level_188576)
        
        # Applying the binary operator '>=' (line 311)
        result_ge_188581 = python_operator(stypy.reporting.localization.Localization(__file__, 311, 15), '>=', subscript_call_result_188575, subscript_call_result_188580)
        
        # Assigning a type to the variable 'stypy_return_type' (line 311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 311, 8), 'stypy_return_type', result_ge_188581)
        
        # ################# End of 'ge(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ge' in the type store
        # Getting the type of 'stypy_return_type' (line 309)
        stypy_return_type_188582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_188582)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ge'
        return stypy_return_type_188582


# Assigning a type to the variable 'Verbose' (line 219)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 0), 'Verbose', Verbose)

# Assigning a Tuple to a Name (line 224):

# Obtaining an instance of the builtin type 'tuple' (line 224)
tuple_188583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, 14), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 224)
# Adding element type (line 224)
unicode_188584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, 14), 'unicode', u'silent')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 224, 14), tuple_188583, unicode_188584)
# Adding element type (line 224)
unicode_188585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, 24), 'unicode', u'helpful')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 224, 14), tuple_188583, unicode_188585)
# Adding element type (line 224)
unicode_188586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, 35), 'unicode', u'debug')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 224, 14), tuple_188583, unicode_188586)
# Adding element type (line 224)
unicode_188587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, 44), 'unicode', u'debug-annoying')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 224, 14), tuple_188583, unicode_188587)

# Getting the type of 'Verbose'
Verbose_188588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Verbose')
# Setting the type of the member 'levels' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Verbose_188588, 'levels', tuple_188583)

# Assigning a DictComp to a Name (line 225):
# Calculating dict comprehension
module_type_store = module_type_store.open_function_context('dict comprehension expression', 225, 12, True)
# Calculating comprehension expression

# Call to enumerate(...): (line 225)
# Processing the call arguments (line 225)
# Getting the type of 'Verbose'
Verbose_188592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Verbose', False)
# Obtaining the member 'levels' of a type
levels_188593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Verbose_188592, 'levels')
# Processing the call keyword arguments (line 225)
kwargs_188594 = {}
# Getting the type of 'enumerate' (line 225)
enumerate_188591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 37), 'enumerate', False)
# Calling enumerate(args, kwargs) (line 225)
enumerate_call_result_188595 = invoke(stypy.reporting.localization.Localization(__file__, 225, 37), enumerate_188591, *[levels_188593], **kwargs_188594)

comprehension_188596 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 225, 12), enumerate_call_result_188595)
# Assigning a type to the variable 'i' (line 225)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 12), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 225, 12), comprehension_188596))
# Assigning a type to the variable 'level' (line 225)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 12), 'level', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 225, 12), comprehension_188596))
# Getting the type of 'level' (line 225)
level_188589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 12), 'level')
# Getting the type of 'i' (line 225)
i_188590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 19), 'i')
dict_188597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 12), 'dict')
# Destroy the current context
module_type_store = module_type_store.close_function_context()
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 225, 12), dict_188597, (level_188589, i_188590))
# Getting the type of 'Verbose'
Verbose_188598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Verbose')
# Setting the type of the member 'vald' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Verbose_188598, 'vald', dict_188597)

# Assigning a Name to a Name (line 229):
# Getting the type of 'None' (line 229)
None_188599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 26), 'None')
# Getting the type of 'Verbose'
Verbose_188600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Verbose')
# Setting the type of the member '_commandLineVerbose' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Verbose_188600, '_commandLineVerbose', None_188599)

# Assigning a Call to a Name (line 314):

# Assigning a Call to a Name (line 314):

# Call to Verbose(...): (line 314)
# Processing the call keyword arguments (line 314)
kwargs_188602 = {}
# Getting the type of 'Verbose' (line 314)
Verbose_188601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 10), 'Verbose', False)
# Calling Verbose(args, kwargs) (line 314)
Verbose_call_result_188603 = invoke(stypy.reporting.localization.Localization(__file__, 314, 10), Verbose_188601, *[], **kwargs_188602)

# Assigning a type to the variable 'verbose' (line 314)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 0), 'verbose', Verbose_call_result_188603)

@norecursion
def checkdep_dvipng(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'checkdep_dvipng'
    module_type_store = module_type_store.open_function_context('checkdep_dvipng', 317, 0, False)
    
    # Passed parameters checking function
    checkdep_dvipng.stypy_localization = localization
    checkdep_dvipng.stypy_type_of_self = None
    checkdep_dvipng.stypy_type_store = module_type_store
    checkdep_dvipng.stypy_function_name = 'checkdep_dvipng'
    checkdep_dvipng.stypy_param_names_list = []
    checkdep_dvipng.stypy_varargs_param_name = None
    checkdep_dvipng.stypy_kwargs_param_name = None
    checkdep_dvipng.stypy_call_defaults = defaults
    checkdep_dvipng.stypy_call_varargs = varargs
    checkdep_dvipng.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'checkdep_dvipng', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'checkdep_dvipng', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'checkdep_dvipng(...)' code ##################

    
    
    # SSA begins for try-except statement (line 318)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 319):
    
    # Assigning a Call to a Name (line 319):
    
    # Call to Popen(...): (line 319)
    # Processing the call arguments (line 319)
    
    # Obtaining an instance of the builtin type 'list' (line 319)
    list_188606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 29), 'list')
    # Adding type elements to the builtin type 'list' instance (line 319)
    # Adding element type (line 319)
    
    # Call to str(...): (line 319)
    # Processing the call arguments (line 319)
    unicode_188608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 34), 'unicode', u'dvipng')
    # Processing the call keyword arguments (line 319)
    kwargs_188609 = {}
    # Getting the type of 'str' (line 319)
    str_188607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 30), 'str', False)
    # Calling str(args, kwargs) (line 319)
    str_call_result_188610 = invoke(stypy.reporting.localization.Localization(__file__, 319, 30), str_188607, *[unicode_188608], **kwargs_188609)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 319, 29), list_188606, str_call_result_188610)
    # Adding element type (line 319)
    unicode_188611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 45), 'unicode', u'-version')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 319, 29), list_188606, unicode_188611)
    
    # Processing the call keyword arguments (line 319)
    # Getting the type of 'subprocess' (line 320)
    subprocess_188612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 36), 'subprocess', False)
    # Obtaining the member 'PIPE' of a type (line 320)
    PIPE_188613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 36), subprocess_188612, 'PIPE')
    keyword_188614 = PIPE_188613
    # Getting the type of 'subprocess' (line 321)
    subprocess_188615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 36), 'subprocess', False)
    # Obtaining the member 'PIPE' of a type (line 321)
    PIPE_188616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 36), subprocess_188615, 'PIPE')
    keyword_188617 = PIPE_188616
    kwargs_188618 = {'stderr': keyword_188617, 'stdout': keyword_188614}
    # Getting the type of 'subprocess' (line 319)
    subprocess_188604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 12), 'subprocess', False)
    # Obtaining the member 'Popen' of a type (line 319)
    Popen_188605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 319, 12), subprocess_188604, 'Popen')
    # Calling Popen(args, kwargs) (line 319)
    Popen_call_result_188619 = invoke(stypy.reporting.localization.Localization(__file__, 319, 12), Popen_188605, *[list_188606], **kwargs_188618)
    
    # Assigning a type to the variable 's' (line 319)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 319, 8), 's', Popen_call_result_188619)
    
    # Assigning a Call to a Tuple (line 322):
    
    # Assigning a Call to a Name:
    
    # Call to communicate(...): (line 322)
    # Processing the call keyword arguments (line 322)
    kwargs_188622 = {}
    # Getting the type of 's' (line 322)
    s_188620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 25), 's', False)
    # Obtaining the member 'communicate' of a type (line 322)
    communicate_188621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 25), s_188620, 'communicate')
    # Calling communicate(args, kwargs) (line 322)
    communicate_call_result_188623 = invoke(stypy.reporting.localization.Localization(__file__, 322, 25), communicate_188621, *[], **kwargs_188622)
    
    # Assigning a type to the variable 'call_assignment_188180' (line 322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 'call_assignment_188180', communicate_call_result_188623)
    
    # Assigning a Call to a Name (line 322):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_188626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 322, 8), 'int')
    # Processing the call keyword arguments
    kwargs_188627 = {}
    # Getting the type of 'call_assignment_188180' (line 322)
    call_assignment_188180_188624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 'call_assignment_188180', False)
    # Obtaining the member '__getitem__' of a type (line 322)
    getitem___188625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 8), call_assignment_188180_188624, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_188628 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___188625, *[int_188626], **kwargs_188627)
    
    # Assigning a type to the variable 'call_assignment_188181' (line 322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 'call_assignment_188181', getitem___call_result_188628)
    
    # Assigning a Name to a Name (line 322):
    # Getting the type of 'call_assignment_188181' (line 322)
    call_assignment_188181_188629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 'call_assignment_188181')
    # Assigning a type to the variable 'stdout' (line 322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 'stdout', call_assignment_188181_188629)
    
    # Assigning a Call to a Name (line 322):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_188632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 322, 8), 'int')
    # Processing the call keyword arguments
    kwargs_188633 = {}
    # Getting the type of 'call_assignment_188180' (line 322)
    call_assignment_188180_188630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 'call_assignment_188180', False)
    # Obtaining the member '__getitem__' of a type (line 322)
    getitem___188631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 8), call_assignment_188180_188630, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_188634 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___188631, *[int_188632], **kwargs_188633)
    
    # Assigning a type to the variable 'call_assignment_188182' (line 322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 'call_assignment_188182', getitem___call_result_188634)
    
    # Assigning a Name to a Name (line 322):
    # Getting the type of 'call_assignment_188182' (line 322)
    call_assignment_188182_188635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 'call_assignment_188182')
    # Assigning a type to the variable 'stderr' (line 322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 16), 'stderr', call_assignment_188182_188635)
    
    # Assigning a Subscript to a Name (line 323):
    
    # Assigning a Subscript to a Name (line 323):
    
    # Obtaining the type of the subscript
    int_188636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 50), 'int')
    
    # Call to split(...): (line 323)
    # Processing the call arguments (line 323)
    unicode_188643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 44), 'unicode', u'\n')
    # Processing the call keyword arguments (line 323)
    kwargs_188644 = {}
    
    # Call to decode(...): (line 323)
    # Processing the call arguments (line 323)
    unicode_188639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 29), 'unicode', u'ascii')
    # Processing the call keyword arguments (line 323)
    kwargs_188640 = {}
    # Getting the type of 'stdout' (line 323)
    stdout_188637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 15), 'stdout', False)
    # Obtaining the member 'decode' of a type (line 323)
    decode_188638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 15), stdout_188637, 'decode')
    # Calling decode(args, kwargs) (line 323)
    decode_call_result_188641 = invoke(stypy.reporting.localization.Localization(__file__, 323, 15), decode_188638, *[unicode_188639], **kwargs_188640)
    
    # Obtaining the member 'split' of a type (line 323)
    split_188642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 15), decode_call_result_188641, 'split')
    # Calling split(args, kwargs) (line 323)
    split_call_result_188645 = invoke(stypy.reporting.localization.Localization(__file__, 323, 15), split_188642, *[unicode_188643], **kwargs_188644)
    
    # Obtaining the member '__getitem__' of a type (line 323)
    getitem___188646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 15), split_call_result_188645, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 323)
    subscript_call_result_188647 = invoke(stypy.reporting.localization.Localization(__file__, 323, 15), getitem___188646, int_188636)
    
    # Assigning a type to the variable 'line' (line 323)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 323, 8), 'line', subscript_call_result_188647)
    
    # Assigning a Subscript to a Name (line 324):
    
    # Assigning a Subscript to a Name (line 324):
    
    # Obtaining the type of the subscript
    int_188648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 324, 25), 'int')
    
    # Call to split(...): (line 324)
    # Processing the call keyword arguments (line 324)
    kwargs_188651 = {}
    # Getting the type of 'line' (line 324)
    line_188649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 12), 'line', False)
    # Obtaining the member 'split' of a type (line 324)
    split_188650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 12), line_188649, 'split')
    # Calling split(args, kwargs) (line 324)
    split_call_result_188652 = invoke(stypy.reporting.localization.Localization(__file__, 324, 12), split_188650, *[], **kwargs_188651)
    
    # Obtaining the member '__getitem__' of a type (line 324)
    getitem___188653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 12), split_call_result_188652, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 324)
    subscript_call_result_188654 = invoke(stypy.reporting.localization.Localization(__file__, 324, 12), getitem___188653, int_188648)
    
    # Assigning a type to the variable 'v' (line 324)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 324, 8), 'v', subscript_call_result_188654)
    # Getting the type of 'v' (line 325)
    v_188655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 15), 'v')
    # Assigning a type to the variable 'stypy_return_type' (line 325)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 325, 8), 'stypy_return_type', v_188655)
    # SSA branch for the except part of a try statement (line 318)
    # SSA branch for the except 'Tuple' branch of a try statement (line 318)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'None' (line 327)
    None_188656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 15), 'None')
    # Assigning a type to the variable 'stypy_return_type' (line 327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'stypy_return_type', None_188656)
    # SSA join for try-except statement (line 318)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'checkdep_dvipng(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'checkdep_dvipng' in the type store
    # Getting the type of 'stypy_return_type' (line 317)
    stypy_return_type_188657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_188657)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'checkdep_dvipng'
    return stypy_return_type_188657

# Assigning a type to the variable 'checkdep_dvipng' (line 317)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 0), 'checkdep_dvipng', checkdep_dvipng)

@norecursion
def checkdep_ghostscript(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'checkdep_ghostscript'
    module_type_store = module_type_store.open_function_context('checkdep_ghostscript', 330, 0, False)
    
    # Passed parameters checking function
    checkdep_ghostscript.stypy_localization = localization
    checkdep_ghostscript.stypy_type_of_self = None
    checkdep_ghostscript.stypy_type_store = module_type_store
    checkdep_ghostscript.stypy_function_name = 'checkdep_ghostscript'
    checkdep_ghostscript.stypy_param_names_list = []
    checkdep_ghostscript.stypy_varargs_param_name = None
    checkdep_ghostscript.stypy_kwargs_param_name = None
    checkdep_ghostscript.stypy_call_defaults = defaults
    checkdep_ghostscript.stypy_call_varargs = varargs
    checkdep_ghostscript.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'checkdep_ghostscript', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'checkdep_ghostscript', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'checkdep_ghostscript(...)' code ##################

    
    # Type idiom detected: calculating its left and rigth part (line 331)
    # Getting the type of 'checkdep_ghostscript' (line 331)
    checkdep_ghostscript_188658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 7), 'checkdep_ghostscript')
    # Obtaining the member 'executable' of a type (line 331)
    executable_188659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 7), checkdep_ghostscript_188658, 'executable')
    # Getting the type of 'None' (line 331)
    None_188660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 42), 'None')
    
    (may_be_188661, more_types_in_union_188662) = may_be_none(executable_188659, None_188660)

    if may_be_188661:

        if more_types_in_union_188662:
            # Runtime conditional SSA (line 331)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Getting the type of 'sys' (line 332)
        sys_188663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 332)
        platform_188664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 11), sys_188663, 'platform')
        unicode_188665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 332, 27), 'unicode', u'win32')
        # Applying the binary operator '==' (line 332)
        result_eq_188666 = python_operator(stypy.reporting.localization.Localization(__file__, 332, 11), '==', platform_188664, unicode_188665)
        
        # Testing the type of an if condition (line 332)
        if_condition_188667 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 332, 8), result_eq_188666)
        # Assigning a type to the variable 'if_condition_188667' (line 332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 8), 'if_condition_188667', if_condition_188667)
        # SSA begins for if statement (line 332)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 334):
        
        # Assigning a List to a Name (line 334):
        
        # Obtaining an instance of the builtin type 'list' (line 334)
        list_188668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 334, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 334)
        # Adding element type (line 334)
        unicode_188669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 334, 24), 'unicode', u'gswin32c')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 334, 23), list_188668, unicode_188669)
        # Adding element type (line 334)
        unicode_188670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 334, 36), 'unicode', u'gswin64c')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 334, 23), list_188668, unicode_188670)
        # Adding element type (line 334)
        unicode_188671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 334, 48), 'unicode', u'mgs')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 334, 23), list_188668, unicode_188671)
        # Adding element type (line 334)
        unicode_188672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 334, 55), 'unicode', u'gs')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 334, 23), list_188668, unicode_188672)
        
        # Assigning a type to the variable 'gs_execs' (line 334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 12), 'gs_execs', list_188668)
        # SSA branch for the else part of an if statement (line 332)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a List to a Name (line 336):
        
        # Assigning a List to a Name (line 336):
        
        # Obtaining an instance of the builtin type 'list' (line 336)
        list_188673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 336, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 336)
        # Adding element type (line 336)
        unicode_188674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 336, 24), 'unicode', u'gs')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 336, 23), list_188673, unicode_188674)
        
        # Assigning a type to the variable 'gs_execs' (line 336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 12), 'gs_execs', list_188673)
        # SSA join for if statement (line 332)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'gs_execs' (line 337)
        gs_execs_188675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 23), 'gs_execs')
        # Testing the type of a for loop iterable (line 337)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 337, 8), gs_execs_188675)
        # Getting the type of the for loop variable (line 337)
        for_loop_var_188676 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 337, 8), gs_execs_188675)
        # Assigning a type to the variable 'gs_exec' (line 337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 337, 8), 'gs_exec', for_loop_var_188676)
        # SSA begins for a for statement (line 337)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # SSA begins for try-except statement (line 338)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 339):
        
        # Assigning a Call to a Name (line 339):
        
        # Call to Popen(...): (line 339)
        # Processing the call arguments (line 339)
        
        # Obtaining an instance of the builtin type 'list' (line 340)
        list_188679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 340, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 340)
        # Adding element type (line 340)
        
        # Call to str(...): (line 340)
        # Processing the call arguments (line 340)
        # Getting the type of 'gs_exec' (line 340)
        gs_exec_188681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 25), 'gs_exec', False)
        # Processing the call keyword arguments (line 340)
        kwargs_188682 = {}
        # Getting the type of 'str' (line 340)
        str_188680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 21), 'str', False)
        # Calling str(args, kwargs) (line 340)
        str_call_result_188683 = invoke(stypy.reporting.localization.Localization(__file__, 340, 21), str_188680, *[gs_exec_188681], **kwargs_188682)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 340, 20), list_188679, str_call_result_188683)
        # Adding element type (line 340)
        unicode_188684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 340, 35), 'unicode', u'--version')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 340, 20), list_188679, unicode_188684)
        
        # Processing the call keyword arguments (line 339)
        # Getting the type of 'subprocess' (line 340)
        subprocess_188685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 56), 'subprocess', False)
        # Obtaining the member 'PIPE' of a type (line 340)
        PIPE_188686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 56), subprocess_188685, 'PIPE')
        keyword_188687 = PIPE_188686
        # Getting the type of 'subprocess' (line 341)
        subprocess_188688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 27), 'subprocess', False)
        # Obtaining the member 'PIPE' of a type (line 341)
        PIPE_188689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 341, 27), subprocess_188688, 'PIPE')
        keyword_188690 = PIPE_188689
        kwargs_188691 = {'stderr': keyword_188690, 'stdout': keyword_188687}
        # Getting the type of 'subprocess' (line 339)
        subprocess_188677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 20), 'subprocess', False)
        # Obtaining the member 'Popen' of a type (line 339)
        Popen_188678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 20), subprocess_188677, 'Popen')
        # Calling Popen(args, kwargs) (line 339)
        Popen_call_result_188692 = invoke(stypy.reporting.localization.Localization(__file__, 339, 20), Popen_188678, *[list_188679], **kwargs_188691)
        
        # Assigning a type to the variable 's' (line 339)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 339, 16), 's', Popen_call_result_188692)
        
        # Assigning a Call to a Tuple (line 342):
        
        # Assigning a Call to a Name:
        
        # Call to communicate(...): (line 342)
        # Processing the call keyword arguments (line 342)
        kwargs_188695 = {}
        # Getting the type of 's' (line 342)
        s_188693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 33), 's', False)
        # Obtaining the member 'communicate' of a type (line 342)
        communicate_188694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 342, 33), s_188693, 'communicate')
        # Calling communicate(args, kwargs) (line 342)
        communicate_call_result_188696 = invoke(stypy.reporting.localization.Localization(__file__, 342, 33), communicate_188694, *[], **kwargs_188695)
        
        # Assigning a type to the variable 'call_assignment_188183' (line 342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 16), 'call_assignment_188183', communicate_call_result_188696)
        
        # Assigning a Call to a Name (line 342):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_188699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 16), 'int')
        # Processing the call keyword arguments
        kwargs_188700 = {}
        # Getting the type of 'call_assignment_188183' (line 342)
        call_assignment_188183_188697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 16), 'call_assignment_188183', False)
        # Obtaining the member '__getitem__' of a type (line 342)
        getitem___188698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 342, 16), call_assignment_188183_188697, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_188701 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___188698, *[int_188699], **kwargs_188700)
        
        # Assigning a type to the variable 'call_assignment_188184' (line 342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 16), 'call_assignment_188184', getitem___call_result_188701)
        
        # Assigning a Name to a Name (line 342):
        # Getting the type of 'call_assignment_188184' (line 342)
        call_assignment_188184_188702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 16), 'call_assignment_188184')
        # Assigning a type to the variable 'stdout' (line 342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 16), 'stdout', call_assignment_188184_188702)
        
        # Assigning a Call to a Name (line 342):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_188705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 16), 'int')
        # Processing the call keyword arguments
        kwargs_188706 = {}
        # Getting the type of 'call_assignment_188183' (line 342)
        call_assignment_188183_188703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 16), 'call_assignment_188183', False)
        # Obtaining the member '__getitem__' of a type (line 342)
        getitem___188704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 342, 16), call_assignment_188183_188703, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_188707 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___188704, *[int_188705], **kwargs_188706)
        
        # Assigning a type to the variable 'call_assignment_188185' (line 342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 16), 'call_assignment_188185', getitem___call_result_188707)
        
        # Assigning a Name to a Name (line 342):
        # Getting the type of 'call_assignment_188185' (line 342)
        call_assignment_188185_188708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 16), 'call_assignment_188185')
        # Assigning a type to the variable 'stderr' (line 342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 24), 'stderr', call_assignment_188185_188708)
        
        
        # Getting the type of 's' (line 343)
        s_188709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 19), 's')
        # Obtaining the member 'returncode' of a type (line 343)
        returncode_188710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 19), s_188709, 'returncode')
        int_188711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 35), 'int')
        # Applying the binary operator '==' (line 343)
        result_eq_188712 = python_operator(stypy.reporting.localization.Localization(__file__, 343, 19), '==', returncode_188710, int_188711)
        
        # Testing the type of an if condition (line 343)
        if_condition_188713 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 343, 16), result_eq_188712)
        # Assigning a type to the variable 'if_condition_188713' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 16), 'if_condition_188713', if_condition_188713)
        # SSA begins for if statement (line 343)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 344):
        
        # Assigning a Call to a Name (line 344):
        
        # Call to decode(...): (line 344)
        # Processing the call arguments (line 344)
        unicode_188720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 344, 43), 'unicode', u'ascii')
        # Processing the call keyword arguments (line 344)
        kwargs_188721 = {}
        
        # Obtaining the type of the subscript
        int_188714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 344, 32), 'int')
        slice_188715 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 344, 24), None, int_188714, None)
        # Getting the type of 'stdout' (line 344)
        stdout_188716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 24), 'stdout', False)
        # Obtaining the member '__getitem__' of a type (line 344)
        getitem___188717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 344, 24), stdout_188716, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 344)
        subscript_call_result_188718 = invoke(stypy.reporting.localization.Localization(__file__, 344, 24), getitem___188717, slice_188715)
        
        # Obtaining the member 'decode' of a type (line 344)
        decode_188719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 344, 24), subscript_call_result_188718, 'decode')
        # Calling decode(args, kwargs) (line 344)
        decode_call_result_188722 = invoke(stypy.reporting.localization.Localization(__file__, 344, 24), decode_188719, *[unicode_188720], **kwargs_188721)
        
        # Assigning a type to the variable 'v' (line 344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 344, 20), 'v', decode_call_result_188722)
        
        # Assigning a Name to a Attribute (line 345):
        
        # Assigning a Name to a Attribute (line 345):
        # Getting the type of 'gs_exec' (line 345)
        gs_exec_188723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 54), 'gs_exec')
        # Getting the type of 'checkdep_ghostscript' (line 345)
        checkdep_ghostscript_188724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 20), 'checkdep_ghostscript')
        # Setting the type of the member 'executable' of a type (line 345)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 20), checkdep_ghostscript_188724, 'executable', gs_exec_188723)
        
        # Assigning a Name to a Attribute (line 346):
        
        # Assigning a Name to a Attribute (line 346):
        # Getting the type of 'v' (line 346)
        v_188725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 51), 'v')
        # Getting the type of 'checkdep_ghostscript' (line 346)
        checkdep_ghostscript_188726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 20), 'checkdep_ghostscript')
        # Setting the type of the member 'version' of a type (line 346)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 20), checkdep_ghostscript_188726, 'version', v_188725)
        # SSA join for if statement (line 343)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 338)
        # SSA branch for the except 'Tuple' branch of a try statement (line 338)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 338)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_188662:
            # SSA join for if statement (line 331)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Obtaining an instance of the builtin type 'tuple' (line 349)
    tuple_188727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 349, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 349)
    # Adding element type (line 349)
    # Getting the type of 'checkdep_ghostscript' (line 349)
    checkdep_ghostscript_188728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 11), 'checkdep_ghostscript')
    # Obtaining the member 'executable' of a type (line 349)
    executable_188729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 11), checkdep_ghostscript_188728, 'executable')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 349, 11), tuple_188727, executable_188729)
    # Adding element type (line 349)
    # Getting the type of 'checkdep_ghostscript' (line 349)
    checkdep_ghostscript_188730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 44), 'checkdep_ghostscript')
    # Obtaining the member 'version' of a type (line 349)
    version_188731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 44), checkdep_ghostscript_188730, 'version')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 349, 11), tuple_188727, version_188731)
    
    # Assigning a type to the variable 'stypy_return_type' (line 349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 4), 'stypy_return_type', tuple_188727)
    
    # ################# End of 'checkdep_ghostscript(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'checkdep_ghostscript' in the type store
    # Getting the type of 'stypy_return_type' (line 330)
    stypy_return_type_188732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_188732)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'checkdep_ghostscript'
    return stypy_return_type_188732

# Assigning a type to the variable 'checkdep_ghostscript' (line 330)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 330, 0), 'checkdep_ghostscript', checkdep_ghostscript)

# Assigning a Name to a Attribute (line 350):

# Assigning a Name to a Attribute (line 350):
# Getting the type of 'None' (line 350)
None_188733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 34), 'None')
# Getting the type of 'checkdep_ghostscript' (line 350)
checkdep_ghostscript_188734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 0), 'checkdep_ghostscript')
# Setting the type of the member 'executable' of a type (line 350)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 350, 0), checkdep_ghostscript_188734, 'executable', None_188733)

# Assigning a Name to a Attribute (line 351):

# Assigning a Name to a Attribute (line 351):
# Getting the type of 'None' (line 351)
None_188735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 31), 'None')
# Getting the type of 'checkdep_ghostscript' (line 351)
checkdep_ghostscript_188736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 0), 'checkdep_ghostscript')
# Setting the type of the member 'version' of a type (line 351)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 351, 0), checkdep_ghostscript_188736, 'version', None_188735)

@norecursion
def checkdep_tex(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'checkdep_tex'
    module_type_store = module_type_store.open_function_context('checkdep_tex', 356, 0, False)
    
    # Passed parameters checking function
    checkdep_tex.stypy_localization = localization
    checkdep_tex.stypy_type_of_self = None
    checkdep_tex.stypy_type_store = module_type_store
    checkdep_tex.stypy_function_name = 'checkdep_tex'
    checkdep_tex.stypy_param_names_list = []
    checkdep_tex.stypy_varargs_param_name = None
    checkdep_tex.stypy_kwargs_param_name = None
    checkdep_tex.stypy_call_defaults = defaults
    checkdep_tex.stypy_call_varargs = varargs
    checkdep_tex.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'checkdep_tex', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'checkdep_tex', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'checkdep_tex(...)' code ##################

    
    
    # SSA begins for try-except statement (line 358)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 359):
    
    # Assigning a Call to a Name (line 359):
    
    # Call to Popen(...): (line 359)
    # Processing the call arguments (line 359)
    
    # Obtaining an instance of the builtin type 'list' (line 359)
    list_188739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 29), 'list')
    # Adding type elements to the builtin type 'list' instance (line 359)
    # Adding element type (line 359)
    
    # Call to str(...): (line 359)
    # Processing the call arguments (line 359)
    unicode_188741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 34), 'unicode', u'tex')
    # Processing the call keyword arguments (line 359)
    kwargs_188742 = {}
    # Getting the type of 'str' (line 359)
    str_188740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 30), 'str', False)
    # Calling str(args, kwargs) (line 359)
    str_call_result_188743 = invoke(stypy.reporting.localization.Localization(__file__, 359, 30), str_188740, *[unicode_188741], **kwargs_188742)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 359, 29), list_188739, str_call_result_188743)
    # Adding element type (line 359)
    unicode_188744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 42), 'unicode', u'-version')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 359, 29), list_188739, unicode_188744)
    
    # Processing the call keyword arguments (line 359)
    # Getting the type of 'subprocess' (line 359)
    subprocess_188745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 62), 'subprocess', False)
    # Obtaining the member 'PIPE' of a type (line 359)
    PIPE_188746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 62), subprocess_188745, 'PIPE')
    keyword_188747 = PIPE_188746
    # Getting the type of 'subprocess' (line 360)
    subprocess_188748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 36), 'subprocess', False)
    # Obtaining the member 'PIPE' of a type (line 360)
    PIPE_188749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 360, 36), subprocess_188748, 'PIPE')
    keyword_188750 = PIPE_188749
    kwargs_188751 = {'stderr': keyword_188750, 'stdout': keyword_188747}
    # Getting the type of 'subprocess' (line 359)
    subprocess_188737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 12), 'subprocess', False)
    # Obtaining the member 'Popen' of a type (line 359)
    Popen_188738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 12), subprocess_188737, 'Popen')
    # Calling Popen(args, kwargs) (line 359)
    Popen_call_result_188752 = invoke(stypy.reporting.localization.Localization(__file__, 359, 12), Popen_188738, *[list_188739], **kwargs_188751)
    
    # Assigning a type to the variable 's' (line 359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 8), 's', Popen_call_result_188752)
    
    # Assigning a Call to a Tuple (line 361):
    
    # Assigning a Call to a Name:
    
    # Call to communicate(...): (line 361)
    # Processing the call keyword arguments (line 361)
    kwargs_188755 = {}
    # Getting the type of 's' (line 361)
    s_188753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 25), 's', False)
    # Obtaining the member 'communicate' of a type (line 361)
    communicate_188754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 25), s_188753, 'communicate')
    # Calling communicate(args, kwargs) (line 361)
    communicate_call_result_188756 = invoke(stypy.reporting.localization.Localization(__file__, 361, 25), communicate_188754, *[], **kwargs_188755)
    
    # Assigning a type to the variable 'call_assignment_188186' (line 361)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'call_assignment_188186', communicate_call_result_188756)
    
    # Assigning a Call to a Name (line 361):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_188759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 8), 'int')
    # Processing the call keyword arguments
    kwargs_188760 = {}
    # Getting the type of 'call_assignment_188186' (line 361)
    call_assignment_188186_188757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'call_assignment_188186', False)
    # Obtaining the member '__getitem__' of a type (line 361)
    getitem___188758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 8), call_assignment_188186_188757, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_188761 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___188758, *[int_188759], **kwargs_188760)
    
    # Assigning a type to the variable 'call_assignment_188187' (line 361)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'call_assignment_188187', getitem___call_result_188761)
    
    # Assigning a Name to a Name (line 361):
    # Getting the type of 'call_assignment_188187' (line 361)
    call_assignment_188187_188762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'call_assignment_188187')
    # Assigning a type to the variable 'stdout' (line 361)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'stdout', call_assignment_188187_188762)
    
    # Assigning a Call to a Name (line 361):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_188765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 8), 'int')
    # Processing the call keyword arguments
    kwargs_188766 = {}
    # Getting the type of 'call_assignment_188186' (line 361)
    call_assignment_188186_188763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'call_assignment_188186', False)
    # Obtaining the member '__getitem__' of a type (line 361)
    getitem___188764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 8), call_assignment_188186_188763, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_188767 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___188764, *[int_188765], **kwargs_188766)
    
    # Assigning a type to the variable 'call_assignment_188188' (line 361)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'call_assignment_188188', getitem___call_result_188767)
    
    # Assigning a Name to a Name (line 361):
    # Getting the type of 'call_assignment_188188' (line 361)
    call_assignment_188188_188768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'call_assignment_188188')
    # Assigning a type to the variable 'stderr' (line 361)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 16), 'stderr', call_assignment_188188_188768)
    
    # Assigning a Subscript to a Name (line 362):
    
    # Assigning a Subscript to a Name (line 362):
    
    # Obtaining the type of the subscript
    int_188769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, 50), 'int')
    
    # Call to split(...): (line 362)
    # Processing the call arguments (line 362)
    unicode_188776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, 44), 'unicode', u'\n')
    # Processing the call keyword arguments (line 362)
    kwargs_188777 = {}
    
    # Call to decode(...): (line 362)
    # Processing the call arguments (line 362)
    unicode_188772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, 29), 'unicode', u'ascii')
    # Processing the call keyword arguments (line 362)
    kwargs_188773 = {}
    # Getting the type of 'stdout' (line 362)
    stdout_188770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 15), 'stdout', False)
    # Obtaining the member 'decode' of a type (line 362)
    decode_188771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 15), stdout_188770, 'decode')
    # Calling decode(args, kwargs) (line 362)
    decode_call_result_188774 = invoke(stypy.reporting.localization.Localization(__file__, 362, 15), decode_188771, *[unicode_188772], **kwargs_188773)
    
    # Obtaining the member 'split' of a type (line 362)
    split_188775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 15), decode_call_result_188774, 'split')
    # Calling split(args, kwargs) (line 362)
    split_call_result_188778 = invoke(stypy.reporting.localization.Localization(__file__, 362, 15), split_188775, *[unicode_188776], **kwargs_188777)
    
    # Obtaining the member '__getitem__' of a type (line 362)
    getitem___188779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 15), split_call_result_188778, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 362)
    subscript_call_result_188780 = invoke(stypy.reporting.localization.Localization(__file__, 362, 15), getitem___188779, int_188769)
    
    # Assigning a type to the variable 'line' (line 362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 8), 'line', subscript_call_result_188780)
    
    # Assigning a Str to a Name (line 363):
    
    # Assigning a Str to a Name (line 363):
    unicode_188781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 363, 18), 'unicode', u'3\\.1\\d+')
    # Assigning a type to the variable 'pattern' (line 363)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 8), 'pattern', unicode_188781)
    
    # Assigning a Call to a Name (line 364):
    
    # Assigning a Call to a Name (line 364):
    
    # Call to search(...): (line 364)
    # Processing the call arguments (line 364)
    # Getting the type of 'pattern' (line 364)
    pattern_188784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 26), 'pattern', False)
    # Getting the type of 'line' (line 364)
    line_188785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 35), 'line', False)
    # Processing the call keyword arguments (line 364)
    kwargs_188786 = {}
    # Getting the type of 're' (line 364)
    re_188782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 16), 're', False)
    # Obtaining the member 'search' of a type (line 364)
    search_188783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 16), re_188782, 'search')
    # Calling search(args, kwargs) (line 364)
    search_call_result_188787 = invoke(stypy.reporting.localization.Localization(__file__, 364, 16), search_188783, *[pattern_188784, line_188785], **kwargs_188786)
    
    # Assigning a type to the variable 'match' (line 364)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 364, 8), 'match', search_call_result_188787)
    
    # Assigning a Call to a Name (line 365):
    
    # Assigning a Call to a Name (line 365):
    
    # Call to group(...): (line 365)
    # Processing the call arguments (line 365)
    int_188790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, 24), 'int')
    # Processing the call keyword arguments (line 365)
    kwargs_188791 = {}
    # Getting the type of 'match' (line 365)
    match_188788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 12), 'match', False)
    # Obtaining the member 'group' of a type (line 365)
    group_188789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 12), match_188788, 'group')
    # Calling group(args, kwargs) (line 365)
    group_call_result_188792 = invoke(stypy.reporting.localization.Localization(__file__, 365, 12), group_188789, *[int_188790], **kwargs_188791)
    
    # Assigning a type to the variable 'v' (line 365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 8), 'v', group_call_result_188792)
    # Getting the type of 'v' (line 366)
    v_188793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 15), 'v')
    # Assigning a type to the variable 'stypy_return_type' (line 366)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 366, 8), 'stypy_return_type', v_188793)
    # SSA branch for the except part of a try statement (line 358)
    # SSA branch for the except 'Tuple' branch of a try statement (line 358)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'None' (line 368)
    None_188794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 15), 'None')
    # Assigning a type to the variable 'stypy_return_type' (line 368)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 368, 8), 'stypy_return_type', None_188794)
    # SSA join for try-except statement (line 358)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'checkdep_tex(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'checkdep_tex' in the type store
    # Getting the type of 'stypy_return_type' (line 356)
    stypy_return_type_188795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_188795)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'checkdep_tex'
    return stypy_return_type_188795

# Assigning a type to the variable 'checkdep_tex' (line 356)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 0), 'checkdep_tex', checkdep_tex)

@norecursion
def checkdep_pdftops(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'checkdep_pdftops'
    module_type_store = module_type_store.open_function_context('checkdep_pdftops', 371, 0, False)
    
    # Passed parameters checking function
    checkdep_pdftops.stypy_localization = localization
    checkdep_pdftops.stypy_type_of_self = None
    checkdep_pdftops.stypy_type_store = module_type_store
    checkdep_pdftops.stypy_function_name = 'checkdep_pdftops'
    checkdep_pdftops.stypy_param_names_list = []
    checkdep_pdftops.stypy_varargs_param_name = None
    checkdep_pdftops.stypy_kwargs_param_name = None
    checkdep_pdftops.stypy_call_defaults = defaults
    checkdep_pdftops.stypy_call_varargs = varargs
    checkdep_pdftops.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'checkdep_pdftops', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'checkdep_pdftops', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'checkdep_pdftops(...)' code ##################

    
    
    # SSA begins for try-except statement (line 372)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 373):
    
    # Assigning a Call to a Name (line 373):
    
    # Call to Popen(...): (line 373)
    # Processing the call arguments (line 373)
    
    # Obtaining an instance of the builtin type 'list' (line 373)
    list_188798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, 29), 'list')
    # Adding type elements to the builtin type 'list' instance (line 373)
    # Adding element type (line 373)
    
    # Call to str(...): (line 373)
    # Processing the call arguments (line 373)
    unicode_188800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, 34), 'unicode', u'pdftops')
    # Processing the call keyword arguments (line 373)
    kwargs_188801 = {}
    # Getting the type of 'str' (line 373)
    str_188799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 30), 'str', False)
    # Calling str(args, kwargs) (line 373)
    str_call_result_188802 = invoke(stypy.reporting.localization.Localization(__file__, 373, 30), str_188799, *[unicode_188800], **kwargs_188801)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 373, 29), list_188798, str_call_result_188802)
    # Adding element type (line 373)
    unicode_188803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, 46), 'unicode', u'-v')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 373, 29), list_188798, unicode_188803)
    
    # Processing the call keyword arguments (line 373)
    # Getting the type of 'subprocess' (line 373)
    subprocess_188804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 60), 'subprocess', False)
    # Obtaining the member 'PIPE' of a type (line 373)
    PIPE_188805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 373, 60), subprocess_188804, 'PIPE')
    keyword_188806 = PIPE_188805
    # Getting the type of 'subprocess' (line 374)
    subprocess_188807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 36), 'subprocess', False)
    # Obtaining the member 'PIPE' of a type (line 374)
    PIPE_188808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 374, 36), subprocess_188807, 'PIPE')
    keyword_188809 = PIPE_188808
    kwargs_188810 = {'stderr': keyword_188809, 'stdout': keyword_188806}
    # Getting the type of 'subprocess' (line 373)
    subprocess_188796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 12), 'subprocess', False)
    # Obtaining the member 'Popen' of a type (line 373)
    Popen_188797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 373, 12), subprocess_188796, 'Popen')
    # Calling Popen(args, kwargs) (line 373)
    Popen_call_result_188811 = invoke(stypy.reporting.localization.Localization(__file__, 373, 12), Popen_188797, *[list_188798], **kwargs_188810)
    
    # Assigning a type to the variable 's' (line 373)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 8), 's', Popen_call_result_188811)
    
    # Assigning a Call to a Tuple (line 375):
    
    # Assigning a Call to a Name:
    
    # Call to communicate(...): (line 375)
    # Processing the call keyword arguments (line 375)
    kwargs_188814 = {}
    # Getting the type of 's' (line 375)
    s_188812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 25), 's', False)
    # Obtaining the member 'communicate' of a type (line 375)
    communicate_188813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 25), s_188812, 'communicate')
    # Calling communicate(args, kwargs) (line 375)
    communicate_call_result_188815 = invoke(stypy.reporting.localization.Localization(__file__, 375, 25), communicate_188813, *[], **kwargs_188814)
    
    # Assigning a type to the variable 'call_assignment_188189' (line 375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 8), 'call_assignment_188189', communicate_call_result_188815)
    
    # Assigning a Call to a Name (line 375):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_188818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, 8), 'int')
    # Processing the call keyword arguments
    kwargs_188819 = {}
    # Getting the type of 'call_assignment_188189' (line 375)
    call_assignment_188189_188816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 8), 'call_assignment_188189', False)
    # Obtaining the member '__getitem__' of a type (line 375)
    getitem___188817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 8), call_assignment_188189_188816, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_188820 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___188817, *[int_188818], **kwargs_188819)
    
    # Assigning a type to the variable 'call_assignment_188190' (line 375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 8), 'call_assignment_188190', getitem___call_result_188820)
    
    # Assigning a Name to a Name (line 375):
    # Getting the type of 'call_assignment_188190' (line 375)
    call_assignment_188190_188821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 8), 'call_assignment_188190')
    # Assigning a type to the variable 'stdout' (line 375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 8), 'stdout', call_assignment_188190_188821)
    
    # Assigning a Call to a Name (line 375):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_188824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, 8), 'int')
    # Processing the call keyword arguments
    kwargs_188825 = {}
    # Getting the type of 'call_assignment_188189' (line 375)
    call_assignment_188189_188822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 8), 'call_assignment_188189', False)
    # Obtaining the member '__getitem__' of a type (line 375)
    getitem___188823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 8), call_assignment_188189_188822, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_188826 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___188823, *[int_188824], **kwargs_188825)
    
    # Assigning a type to the variable 'call_assignment_188191' (line 375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 8), 'call_assignment_188191', getitem___call_result_188826)
    
    # Assigning a Name to a Name (line 375):
    # Getting the type of 'call_assignment_188191' (line 375)
    call_assignment_188191_188827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 8), 'call_assignment_188191')
    # Assigning a type to the variable 'stderr' (line 375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 16), 'stderr', call_assignment_188191_188827)
    
    # Assigning a Call to a Name (line 376):
    
    # Assigning a Call to a Name (line 376):
    
    # Call to split(...): (line 376)
    # Processing the call arguments (line 376)
    unicode_188834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 45), 'unicode', u'\n')
    # Processing the call keyword arguments (line 376)
    kwargs_188835 = {}
    
    # Call to decode(...): (line 376)
    # Processing the call arguments (line 376)
    unicode_188830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 30), 'unicode', u'ascii')
    # Processing the call keyword arguments (line 376)
    kwargs_188831 = {}
    # Getting the type of 'stderr' (line 376)
    stderr_188828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 16), 'stderr', False)
    # Obtaining the member 'decode' of a type (line 376)
    decode_188829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 16), stderr_188828, 'decode')
    # Calling decode(args, kwargs) (line 376)
    decode_call_result_188832 = invoke(stypy.reporting.localization.Localization(__file__, 376, 16), decode_188829, *[unicode_188830], **kwargs_188831)
    
    # Obtaining the member 'split' of a type (line 376)
    split_188833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 16), decode_call_result_188832, 'split')
    # Calling split(args, kwargs) (line 376)
    split_call_result_188836 = invoke(stypy.reporting.localization.Localization(__file__, 376, 16), split_188833, *[unicode_188834], **kwargs_188835)
    
    # Assigning a type to the variable 'lines' (line 376)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 8), 'lines', split_call_result_188836)
    
    # Getting the type of 'lines' (line 377)
    lines_188837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 20), 'lines')
    # Testing the type of a for loop iterable (line 377)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 377, 8), lines_188837)
    # Getting the type of the for loop variable (line 377)
    for_loop_var_188838 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 377, 8), lines_188837)
    # Assigning a type to the variable 'line' (line 377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'line', for_loop_var_188838)
    # SSA begins for a for statement (line 377)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    unicode_188839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 378, 15), 'unicode', u'version')
    # Getting the type of 'line' (line 378)
    line_188840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 28), 'line')
    # Applying the binary operator 'in' (line 378)
    result_contains_188841 = python_operator(stypy.reporting.localization.Localization(__file__, 378, 15), 'in', unicode_188839, line_188840)
    
    # Testing the type of an if condition (line 378)
    if_condition_188842 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 378, 12), result_contains_188841)
    # Assigning a type to the variable 'if_condition_188842' (line 378)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 378, 12), 'if_condition_188842', if_condition_188842)
    # SSA begins for if statement (line 378)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 379):
    
    # Assigning a Subscript to a Name (line 379):
    
    # Obtaining the type of the subscript
    int_188843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 33), 'int')
    
    # Call to split(...): (line 379)
    # Processing the call keyword arguments (line 379)
    kwargs_188846 = {}
    # Getting the type of 'line' (line 379)
    line_188844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 20), 'line', False)
    # Obtaining the member 'split' of a type (line 379)
    split_188845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 20), line_188844, 'split')
    # Calling split(args, kwargs) (line 379)
    split_call_result_188847 = invoke(stypy.reporting.localization.Localization(__file__, 379, 20), split_188845, *[], **kwargs_188846)
    
    # Obtaining the member '__getitem__' of a type (line 379)
    getitem___188848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 20), split_call_result_188847, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 379)
    subscript_call_result_188849 = invoke(stypy.reporting.localization.Localization(__file__, 379, 20), getitem___188848, int_188843)
    
    # Assigning a type to the variable 'v' (line 379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 16), 'v', subscript_call_result_188849)
    # SSA join for if statement (line 378)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'v' (line 380)
    v_188850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 15), 'v')
    # Assigning a type to the variable 'stypy_return_type' (line 380)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 8), 'stypy_return_type', v_188850)
    # SSA branch for the except part of a try statement (line 372)
    # SSA branch for the except 'Tuple' branch of a try statement (line 372)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'None' (line 382)
    None_188851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 15), 'None')
    # Assigning a type to the variable 'stypy_return_type' (line 382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 8), 'stypy_return_type', None_188851)
    # SSA join for try-except statement (line 372)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'checkdep_pdftops(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'checkdep_pdftops' in the type store
    # Getting the type of 'stypy_return_type' (line 371)
    stypy_return_type_188852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_188852)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'checkdep_pdftops'
    return stypy_return_type_188852

# Assigning a type to the variable 'checkdep_pdftops' (line 371)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 0), 'checkdep_pdftops', checkdep_pdftops)

@norecursion
def checkdep_inkscape(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'checkdep_inkscape'
    module_type_store = module_type_store.open_function_context('checkdep_inkscape', 385, 0, False)
    
    # Passed parameters checking function
    checkdep_inkscape.stypy_localization = localization
    checkdep_inkscape.stypy_type_of_self = None
    checkdep_inkscape.stypy_type_store = module_type_store
    checkdep_inkscape.stypy_function_name = 'checkdep_inkscape'
    checkdep_inkscape.stypy_param_names_list = []
    checkdep_inkscape.stypy_varargs_param_name = None
    checkdep_inkscape.stypy_kwargs_param_name = None
    checkdep_inkscape.stypy_call_defaults = defaults
    checkdep_inkscape.stypy_call_varargs = varargs
    checkdep_inkscape.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'checkdep_inkscape', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'checkdep_inkscape', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'checkdep_inkscape(...)' code ##################

    
    # Type idiom detected: calculating its left and rigth part (line 386)
    # Getting the type of 'checkdep_inkscape' (line 386)
    checkdep_inkscape_188853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 7), 'checkdep_inkscape')
    # Obtaining the member 'version' of a type (line 386)
    version_188854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 7), checkdep_inkscape_188853, 'version')
    # Getting the type of 'None' (line 386)
    None_188855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 36), 'None')
    
    (may_be_188856, more_types_in_union_188857) = may_be_none(version_188854, None_188855)

    if may_be_188856:

        if more_types_in_union_188857:
            # Runtime conditional SSA (line 386)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # SSA begins for try-except statement (line 387)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 388):
        
        # Assigning a Call to a Name (line 388):
        
        # Call to Popen(...): (line 388)
        # Processing the call arguments (line 388)
        
        # Obtaining an instance of the builtin type 'list' (line 388)
        list_188860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 388)
        # Adding element type (line 388)
        
        # Call to str(...): (line 388)
        # Processing the call arguments (line 388)
        unicode_188862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 38), 'unicode', u'inkscape')
        # Processing the call keyword arguments (line 388)
        kwargs_188863 = {}
        # Getting the type of 'str' (line 388)
        str_188861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 34), 'str', False)
        # Calling str(args, kwargs) (line 388)
        str_call_result_188864 = invoke(stypy.reporting.localization.Localization(__file__, 388, 34), str_188861, *[unicode_188862], **kwargs_188863)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 388, 33), list_188860, str_call_result_188864)
        # Adding element type (line 388)
        unicode_188865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 51), 'unicode', u'-V')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 388, 33), list_188860, unicode_188865)
        
        # Processing the call keyword arguments (line 388)
        # Getting the type of 'subprocess' (line 389)
        subprocess_188866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 40), 'subprocess', False)
        # Obtaining the member 'PIPE' of a type (line 389)
        PIPE_188867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 40), subprocess_188866, 'PIPE')
        keyword_188868 = PIPE_188867
        # Getting the type of 'subprocess' (line 390)
        subprocess_188869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 40), 'subprocess', False)
        # Obtaining the member 'PIPE' of a type (line 390)
        PIPE_188870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 40), subprocess_188869, 'PIPE')
        keyword_188871 = PIPE_188870
        kwargs_188872 = {'stderr': keyword_188871, 'stdout': keyword_188868}
        # Getting the type of 'subprocess' (line 388)
        subprocess_188858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 16), 'subprocess', False)
        # Obtaining the member 'Popen' of a type (line 388)
        Popen_188859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 16), subprocess_188858, 'Popen')
        # Calling Popen(args, kwargs) (line 388)
        Popen_call_result_188873 = invoke(stypy.reporting.localization.Localization(__file__, 388, 16), Popen_188859, *[list_188860], **kwargs_188872)
        
        # Assigning a type to the variable 's' (line 388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 12), 's', Popen_call_result_188873)
        
        # Assigning a Call to a Tuple (line 391):
        
        # Assigning a Call to a Name:
        
        # Call to communicate(...): (line 391)
        # Processing the call keyword arguments (line 391)
        kwargs_188876 = {}
        # Getting the type of 's' (line 391)
        s_188874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 29), 's', False)
        # Obtaining the member 'communicate' of a type (line 391)
        communicate_188875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 29), s_188874, 'communicate')
        # Calling communicate(args, kwargs) (line 391)
        communicate_call_result_188877 = invoke(stypy.reporting.localization.Localization(__file__, 391, 29), communicate_188875, *[], **kwargs_188876)
        
        # Assigning a type to the variable 'call_assignment_188192' (line 391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 12), 'call_assignment_188192', communicate_call_result_188877)
        
        # Assigning a Call to a Name (line 391):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_188880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 12), 'int')
        # Processing the call keyword arguments
        kwargs_188881 = {}
        # Getting the type of 'call_assignment_188192' (line 391)
        call_assignment_188192_188878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 12), 'call_assignment_188192', False)
        # Obtaining the member '__getitem__' of a type (line 391)
        getitem___188879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 12), call_assignment_188192_188878, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_188882 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___188879, *[int_188880], **kwargs_188881)
        
        # Assigning a type to the variable 'call_assignment_188193' (line 391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 12), 'call_assignment_188193', getitem___call_result_188882)
        
        # Assigning a Name to a Name (line 391):
        # Getting the type of 'call_assignment_188193' (line 391)
        call_assignment_188193_188883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 12), 'call_assignment_188193')
        # Assigning a type to the variable 'stdout' (line 391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 12), 'stdout', call_assignment_188193_188883)
        
        # Assigning a Call to a Name (line 391):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_188886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 12), 'int')
        # Processing the call keyword arguments
        kwargs_188887 = {}
        # Getting the type of 'call_assignment_188192' (line 391)
        call_assignment_188192_188884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 12), 'call_assignment_188192', False)
        # Obtaining the member '__getitem__' of a type (line 391)
        getitem___188885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 12), call_assignment_188192_188884, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_188888 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___188885, *[int_188886], **kwargs_188887)
        
        # Assigning a type to the variable 'call_assignment_188194' (line 391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 12), 'call_assignment_188194', getitem___call_result_188888)
        
        # Assigning a Name to a Name (line 391):
        # Getting the type of 'call_assignment_188194' (line 391)
        call_assignment_188194_188889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 12), 'call_assignment_188194')
        # Assigning a type to the variable 'stderr' (line 391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 20), 'stderr', call_assignment_188194_188889)
        
        # Assigning a Call to a Name (line 392):
        
        # Assigning a Call to a Name (line 392):
        
        # Call to split(...): (line 392)
        # Processing the call arguments (line 392)
        unicode_188896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 49), 'unicode', u'\n')
        # Processing the call keyword arguments (line 392)
        kwargs_188897 = {}
        
        # Call to decode(...): (line 392)
        # Processing the call arguments (line 392)
        unicode_188892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 34), 'unicode', u'ascii')
        # Processing the call keyword arguments (line 392)
        kwargs_188893 = {}
        # Getting the type of 'stdout' (line 392)
        stdout_188890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 20), 'stdout', False)
        # Obtaining the member 'decode' of a type (line 392)
        decode_188891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 20), stdout_188890, 'decode')
        # Calling decode(args, kwargs) (line 392)
        decode_call_result_188894 = invoke(stypy.reporting.localization.Localization(__file__, 392, 20), decode_188891, *[unicode_188892], **kwargs_188893)
        
        # Obtaining the member 'split' of a type (line 392)
        split_188895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 20), decode_call_result_188894, 'split')
        # Calling split(args, kwargs) (line 392)
        split_call_result_188898 = invoke(stypy.reporting.localization.Localization(__file__, 392, 20), split_188895, *[unicode_188896], **kwargs_188897)
        
        # Assigning a type to the variable 'lines' (line 392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 12), 'lines', split_call_result_188898)
        
        # Getting the type of 'lines' (line 393)
        lines_188899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 24), 'lines')
        # Testing the type of a for loop iterable (line 393)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 393, 12), lines_188899)
        # Getting the type of the for loop variable (line 393)
        for_loop_var_188900 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 393, 12), lines_188899)
        # Assigning a type to the variable 'line' (line 393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 12), 'line', for_loop_var_188900)
        # SSA begins for a for statement (line 393)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        unicode_188901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 19), 'unicode', u'Inkscape')
        # Getting the type of 'line' (line 394)
        line_188902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 33), 'line')
        # Applying the binary operator 'in' (line 394)
        result_contains_188903 = python_operator(stypy.reporting.localization.Localization(__file__, 394, 19), 'in', unicode_188901, line_188902)
        
        # Testing the type of an if condition (line 394)
        if_condition_188904 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 394, 16), result_contains_188903)
        # Assigning a type to the variable 'if_condition_188904' (line 394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 16), 'if_condition_188904', if_condition_188904)
        # SSA begins for if statement (line 394)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 395):
        
        # Assigning a Subscript to a Name (line 395):
        
        # Obtaining the type of the subscript
        int_188905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 395, 37), 'int')
        
        # Call to split(...): (line 395)
        # Processing the call keyword arguments (line 395)
        kwargs_188908 = {}
        # Getting the type of 'line' (line 395)
        line_188906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 24), 'line', False)
        # Obtaining the member 'split' of a type (line 395)
        split_188907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 395, 24), line_188906, 'split')
        # Calling split(args, kwargs) (line 395)
        split_call_result_188909 = invoke(stypy.reporting.localization.Localization(__file__, 395, 24), split_188907, *[], **kwargs_188908)
        
        # Obtaining the member '__getitem__' of a type (line 395)
        getitem___188910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 395, 24), split_call_result_188909, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 395)
        subscript_call_result_188911 = invoke(stypy.reporting.localization.Localization(__file__, 395, 24), getitem___188910, int_188905)
        
        # Assigning a type to the variable 'v' (line 395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 20), 'v', subscript_call_result_188911)
        # SSA join for if statement (line 394)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 397):
        
        # Assigning a Name to a Attribute (line 397):
        # Getting the type of 'v' (line 397)
        v_188912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 40), 'v')
        # Getting the type of 'checkdep_inkscape' (line 397)
        checkdep_inkscape_188913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 12), 'checkdep_inkscape')
        # Setting the type of the member 'version' of a type (line 397)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 397, 12), checkdep_inkscape_188913, 'version', v_188912)
        # SSA branch for the except part of a try statement (line 387)
        # SSA branch for the except 'Tuple' branch of a try statement (line 387)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 387)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_188857:
            # SSA join for if statement (line 386)
            module_type_store = module_type_store.join_ssa_context()


    
    # Getting the type of 'checkdep_inkscape' (line 400)
    checkdep_inkscape_188914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 11), 'checkdep_inkscape')
    # Obtaining the member 'version' of a type (line 400)
    version_188915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 400, 11), checkdep_inkscape_188914, 'version')
    # Assigning a type to the variable 'stypy_return_type' (line 400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 4), 'stypy_return_type', version_188915)
    
    # ################# End of 'checkdep_inkscape(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'checkdep_inkscape' in the type store
    # Getting the type of 'stypy_return_type' (line 385)
    stypy_return_type_188916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_188916)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'checkdep_inkscape'
    return stypy_return_type_188916

# Assigning a type to the variable 'checkdep_inkscape' (line 385)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 385, 0), 'checkdep_inkscape', checkdep_inkscape)

# Assigning a Name to a Attribute (line 401):

# Assigning a Name to a Attribute (line 401):
# Getting the type of 'None' (line 401)
None_188917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 28), 'None')
# Getting the type of 'checkdep_inkscape' (line 401)
checkdep_inkscape_188918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 0), 'checkdep_inkscape')
# Setting the type of the member 'version' of a type (line 401)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 401, 0), checkdep_inkscape_188918, 'version', None_188917)

@norecursion
def checkdep_xmllint(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'checkdep_xmllint'
    module_type_store = module_type_store.open_function_context('checkdep_xmllint', 404, 0, False)
    
    # Passed parameters checking function
    checkdep_xmllint.stypy_localization = localization
    checkdep_xmllint.stypy_type_of_self = None
    checkdep_xmllint.stypy_type_store = module_type_store
    checkdep_xmllint.stypy_function_name = 'checkdep_xmllint'
    checkdep_xmllint.stypy_param_names_list = []
    checkdep_xmllint.stypy_varargs_param_name = None
    checkdep_xmllint.stypy_kwargs_param_name = None
    checkdep_xmllint.stypy_call_defaults = defaults
    checkdep_xmllint.stypy_call_varargs = varargs
    checkdep_xmllint.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'checkdep_xmllint', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'checkdep_xmllint', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'checkdep_xmllint(...)' code ##################

    
    
    # SSA begins for try-except statement (line 406)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 407):
    
    # Assigning a Call to a Name (line 407):
    
    # Call to Popen(...): (line 407)
    # Processing the call arguments (line 407)
    
    # Obtaining an instance of the builtin type 'list' (line 407)
    list_188921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 407, 29), 'list')
    # Adding type elements to the builtin type 'list' instance (line 407)
    # Adding element type (line 407)
    
    # Call to str(...): (line 407)
    # Processing the call arguments (line 407)
    unicode_188923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 407, 34), 'unicode', u'xmllint')
    # Processing the call keyword arguments (line 407)
    kwargs_188924 = {}
    # Getting the type of 'str' (line 407)
    str_188922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 30), 'str', False)
    # Calling str(args, kwargs) (line 407)
    str_call_result_188925 = invoke(stypy.reporting.localization.Localization(__file__, 407, 30), str_188922, *[unicode_188923], **kwargs_188924)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 407, 29), list_188921, str_call_result_188925)
    # Adding element type (line 407)
    unicode_188926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 407, 46), 'unicode', u'--version')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 407, 29), list_188921, unicode_188926)
    
    # Processing the call keyword arguments (line 407)
    # Getting the type of 'subprocess' (line 408)
    subprocess_188927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 36), 'subprocess', False)
    # Obtaining the member 'PIPE' of a type (line 408)
    PIPE_188928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 36), subprocess_188927, 'PIPE')
    keyword_188929 = PIPE_188928
    # Getting the type of 'subprocess' (line 409)
    subprocess_188930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 36), 'subprocess', False)
    # Obtaining the member 'PIPE' of a type (line 409)
    PIPE_188931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 409, 36), subprocess_188930, 'PIPE')
    keyword_188932 = PIPE_188931
    kwargs_188933 = {'stderr': keyword_188932, 'stdout': keyword_188929}
    # Getting the type of 'subprocess' (line 407)
    subprocess_188919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 12), 'subprocess', False)
    # Obtaining the member 'Popen' of a type (line 407)
    Popen_188920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 407, 12), subprocess_188919, 'Popen')
    # Calling Popen(args, kwargs) (line 407)
    Popen_call_result_188934 = invoke(stypy.reporting.localization.Localization(__file__, 407, 12), Popen_188920, *[list_188921], **kwargs_188933)
    
    # Assigning a type to the variable 's' (line 407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 407, 8), 's', Popen_call_result_188934)
    
    # Assigning a Call to a Tuple (line 410):
    
    # Assigning a Call to a Name:
    
    # Call to communicate(...): (line 410)
    # Processing the call keyword arguments (line 410)
    kwargs_188937 = {}
    # Getting the type of 's' (line 410)
    s_188935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 25), 's', False)
    # Obtaining the member 'communicate' of a type (line 410)
    communicate_188936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 25), s_188935, 'communicate')
    # Calling communicate(args, kwargs) (line 410)
    communicate_call_result_188938 = invoke(stypy.reporting.localization.Localization(__file__, 410, 25), communicate_188936, *[], **kwargs_188937)
    
    # Assigning a type to the variable 'call_assignment_188195' (line 410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'call_assignment_188195', communicate_call_result_188938)
    
    # Assigning a Call to a Name (line 410):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_188941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 8), 'int')
    # Processing the call keyword arguments
    kwargs_188942 = {}
    # Getting the type of 'call_assignment_188195' (line 410)
    call_assignment_188195_188939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'call_assignment_188195', False)
    # Obtaining the member '__getitem__' of a type (line 410)
    getitem___188940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 8), call_assignment_188195_188939, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_188943 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___188940, *[int_188941], **kwargs_188942)
    
    # Assigning a type to the variable 'call_assignment_188196' (line 410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'call_assignment_188196', getitem___call_result_188943)
    
    # Assigning a Name to a Name (line 410):
    # Getting the type of 'call_assignment_188196' (line 410)
    call_assignment_188196_188944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'call_assignment_188196')
    # Assigning a type to the variable 'stdout' (line 410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'stdout', call_assignment_188196_188944)
    
    # Assigning a Call to a Name (line 410):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_188947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 8), 'int')
    # Processing the call keyword arguments
    kwargs_188948 = {}
    # Getting the type of 'call_assignment_188195' (line 410)
    call_assignment_188195_188945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'call_assignment_188195', False)
    # Obtaining the member '__getitem__' of a type (line 410)
    getitem___188946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 8), call_assignment_188195_188945, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_188949 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___188946, *[int_188947], **kwargs_188948)
    
    # Assigning a type to the variable 'call_assignment_188197' (line 410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'call_assignment_188197', getitem___call_result_188949)
    
    # Assigning a Name to a Name (line 410):
    # Getting the type of 'call_assignment_188197' (line 410)
    call_assignment_188197_188950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'call_assignment_188197')
    # Assigning a type to the variable 'stderr' (line 410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 16), 'stderr', call_assignment_188197_188950)
    
    # Assigning a Call to a Name (line 411):
    
    # Assigning a Call to a Name (line 411):
    
    # Call to split(...): (line 411)
    # Processing the call arguments (line 411)
    unicode_188957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 411, 45), 'unicode', u'\n')
    # Processing the call keyword arguments (line 411)
    kwargs_188958 = {}
    
    # Call to decode(...): (line 411)
    # Processing the call arguments (line 411)
    unicode_188953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 411, 30), 'unicode', u'ascii')
    # Processing the call keyword arguments (line 411)
    kwargs_188954 = {}
    # Getting the type of 'stderr' (line 411)
    stderr_188951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 16), 'stderr', False)
    # Obtaining the member 'decode' of a type (line 411)
    decode_188952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 16), stderr_188951, 'decode')
    # Calling decode(args, kwargs) (line 411)
    decode_call_result_188955 = invoke(stypy.reporting.localization.Localization(__file__, 411, 16), decode_188952, *[unicode_188953], **kwargs_188954)
    
    # Obtaining the member 'split' of a type (line 411)
    split_188956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 16), decode_call_result_188955, 'split')
    # Calling split(args, kwargs) (line 411)
    split_call_result_188959 = invoke(stypy.reporting.localization.Localization(__file__, 411, 16), split_188956, *[unicode_188957], **kwargs_188958)
    
    # Assigning a type to the variable 'lines' (line 411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 8), 'lines', split_call_result_188959)
    
    # Getting the type of 'lines' (line 412)
    lines_188960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 20), 'lines')
    # Testing the type of a for loop iterable (line 412)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 412, 8), lines_188960)
    # Getting the type of the for loop variable (line 412)
    for_loop_var_188961 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 412, 8), lines_188960)
    # Assigning a type to the variable 'line' (line 412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 8), 'line', for_loop_var_188961)
    # SSA begins for a for statement (line 412)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    unicode_188962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 413, 15), 'unicode', u'version')
    # Getting the type of 'line' (line 413)
    line_188963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 28), 'line')
    # Applying the binary operator 'in' (line 413)
    result_contains_188964 = python_operator(stypy.reporting.localization.Localization(__file__, 413, 15), 'in', unicode_188962, line_188963)
    
    # Testing the type of an if condition (line 413)
    if_condition_188965 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 413, 12), result_contains_188964)
    # Assigning a type to the variable 'if_condition_188965' (line 413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 12), 'if_condition_188965', if_condition_188965)
    # SSA begins for if statement (line 413)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 414):
    
    # Assigning a Subscript to a Name (line 414):
    
    # Obtaining the type of the subscript
    int_188966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 414, 33), 'int')
    
    # Call to split(...): (line 414)
    # Processing the call keyword arguments (line 414)
    kwargs_188969 = {}
    # Getting the type of 'line' (line 414)
    line_188967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 20), 'line', False)
    # Obtaining the member 'split' of a type (line 414)
    split_188968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 20), line_188967, 'split')
    # Calling split(args, kwargs) (line 414)
    split_call_result_188970 = invoke(stypy.reporting.localization.Localization(__file__, 414, 20), split_188968, *[], **kwargs_188969)
    
    # Obtaining the member '__getitem__' of a type (line 414)
    getitem___188971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 20), split_call_result_188970, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 414)
    subscript_call_result_188972 = invoke(stypy.reporting.localization.Localization(__file__, 414, 20), getitem___188971, int_188966)
    
    # Assigning a type to the variable 'v' (line 414)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 414, 16), 'v', subscript_call_result_188972)
    # SSA join for if statement (line 413)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'v' (line 416)
    v_188973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 15), 'v')
    # Assigning a type to the variable 'stypy_return_type' (line 416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 416, 8), 'stypy_return_type', v_188973)
    # SSA branch for the except part of a try statement (line 406)
    # SSA branch for the except 'Tuple' branch of a try statement (line 406)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'None' (line 418)
    None_188974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 15), 'None')
    # Assigning a type to the variable 'stypy_return_type' (line 418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 8), 'stypy_return_type', None_188974)
    # SSA join for try-except statement (line 406)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'checkdep_xmllint(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'checkdep_xmllint' in the type store
    # Getting the type of 'stypy_return_type' (line 404)
    stypy_return_type_188975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_188975)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'checkdep_xmllint'
    return stypy_return_type_188975

# Assigning a type to the variable 'checkdep_xmllint' (line 404)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 0), 'checkdep_xmllint', checkdep_xmllint)

@norecursion
def checkdep_ps_distiller(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'checkdep_ps_distiller'
    module_type_store = module_type_store.open_function_context('checkdep_ps_distiller', 421, 0, False)
    
    # Passed parameters checking function
    checkdep_ps_distiller.stypy_localization = localization
    checkdep_ps_distiller.stypy_type_of_self = None
    checkdep_ps_distiller.stypy_type_store = module_type_store
    checkdep_ps_distiller.stypy_function_name = 'checkdep_ps_distiller'
    checkdep_ps_distiller.stypy_param_names_list = ['s']
    checkdep_ps_distiller.stypy_varargs_param_name = None
    checkdep_ps_distiller.stypy_kwargs_param_name = None
    checkdep_ps_distiller.stypy_call_defaults = defaults
    checkdep_ps_distiller.stypy_call_varargs = varargs
    checkdep_ps_distiller.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'checkdep_ps_distiller', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'checkdep_ps_distiller', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'checkdep_ps_distiller(...)' code ##################

    
    
    # Getting the type of 's' (line 422)
    s_188976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 11), 's')
    # Applying the 'not' unary operator (line 422)
    result_not__188977 = python_operator(stypy.reporting.localization.Localization(__file__, 422, 7), 'not', s_188976)
    
    # Testing the type of an if condition (line 422)
    if_condition_188978 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 422, 4), result_not__188977)
    # Assigning a type to the variable 'if_condition_188978' (line 422)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 422, 4), 'if_condition_188978', if_condition_188978)
    # SSA begins for if statement (line 422)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 423)
    False_188979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 423)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 423, 8), 'stypy_return_type', False_188979)
    # SSA join for if statement (line 422)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 425):
    
    # Assigning a Name to a Name (line 425):
    # Getting the type of 'True' (line 425)
    True_188980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 11), 'True')
    # Assigning a type to the variable 'flag' (line 425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 425, 4), 'flag', True_188980)
    
    # Assigning a Str to a Name (line 426):
    
    # Assigning a Str to a Name (line 426):
    unicode_188981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 13), 'unicode', u'8.60')
    # Assigning a type to the variable 'gs_req' (line 426)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 4), 'gs_req', unicode_188981)
    
    # Assigning a Call to a Tuple (line 427):
    
    # Assigning a Call to a Name:
    
    # Call to checkdep_ghostscript(...): (line 427)
    # Processing the call keyword arguments (line 427)
    kwargs_188983 = {}
    # Getting the type of 'checkdep_ghostscript' (line 427)
    checkdep_ghostscript_188982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 20), 'checkdep_ghostscript', False)
    # Calling checkdep_ghostscript(args, kwargs) (line 427)
    checkdep_ghostscript_call_result_188984 = invoke(stypy.reporting.localization.Localization(__file__, 427, 20), checkdep_ghostscript_188982, *[], **kwargs_188983)
    
    # Assigning a type to the variable 'call_assignment_188198' (line 427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 4), 'call_assignment_188198', checkdep_ghostscript_call_result_188984)
    
    # Assigning a Call to a Name (line 427):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_188987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 427, 4), 'int')
    # Processing the call keyword arguments
    kwargs_188988 = {}
    # Getting the type of 'call_assignment_188198' (line 427)
    call_assignment_188198_188985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 4), 'call_assignment_188198', False)
    # Obtaining the member '__getitem__' of a type (line 427)
    getitem___188986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 4), call_assignment_188198_188985, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_188989 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___188986, *[int_188987], **kwargs_188988)
    
    # Assigning a type to the variable 'call_assignment_188199' (line 427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 4), 'call_assignment_188199', getitem___call_result_188989)
    
    # Assigning a Name to a Name (line 427):
    # Getting the type of 'call_assignment_188199' (line 427)
    call_assignment_188199_188990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 4), 'call_assignment_188199')
    # Assigning a type to the variable 'gs_exec' (line 427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 4), 'gs_exec', call_assignment_188199_188990)
    
    # Assigning a Call to a Name (line 427):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_188993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 427, 4), 'int')
    # Processing the call keyword arguments
    kwargs_188994 = {}
    # Getting the type of 'call_assignment_188198' (line 427)
    call_assignment_188198_188991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 4), 'call_assignment_188198', False)
    # Obtaining the member '__getitem__' of a type (line 427)
    getitem___188992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 4), call_assignment_188198_188991, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_188995 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___188992, *[int_188993], **kwargs_188994)
    
    # Assigning a type to the variable 'call_assignment_188200' (line 427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 4), 'call_assignment_188200', getitem___call_result_188995)
    
    # Assigning a Name to a Name (line 427):
    # Getting the type of 'call_assignment_188200' (line 427)
    call_assignment_188200_188996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 4), 'call_assignment_188200')
    # Assigning a type to the variable 'gs_v' (line 427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 13), 'gs_v', call_assignment_188200_188996)
    
    
    
    # Call to compare_versions(...): (line 428)
    # Processing the call arguments (line 428)
    # Getting the type of 'gs_v' (line 428)
    gs_v_188998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 28), 'gs_v', False)
    # Getting the type of 'gs_req' (line 428)
    gs_req_188999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 34), 'gs_req', False)
    # Processing the call keyword arguments (line 428)
    kwargs_189000 = {}
    # Getting the type of 'compare_versions' (line 428)
    compare_versions_188997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 11), 'compare_versions', False)
    # Calling compare_versions(args, kwargs) (line 428)
    compare_versions_call_result_189001 = invoke(stypy.reporting.localization.Localization(__file__, 428, 11), compare_versions_188997, *[gs_v_188998, gs_req_188999], **kwargs_189000)
    
    # Applying the 'not' unary operator (line 428)
    result_not__189002 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 7), 'not', compare_versions_call_result_189001)
    
    # Testing the type of an if condition (line 428)
    if_condition_189003 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 428, 4), result_not__189002)
    # Assigning a type to the variable 'if_condition_189003' (line 428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 4), 'if_condition_189003', if_condition_189003)
    # SSA begins for if statement (line 428)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 429):
    
    # Assigning a Name to a Name (line 429):
    # Getting the type of 'False' (line 429)
    False_189004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 15), 'False')
    # Assigning a type to the variable 'flag' (line 429)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 429, 8), 'flag', False_189004)
    
    # Call to warn(...): (line 430)
    # Processing the call arguments (line 430)
    unicode_189007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 430, 23), 'unicode', u'matplotlibrc ps.usedistiller option can not be used unless ghostscript-%s or later is installed on your system')
    # Getting the type of 'gs_req' (line 432)
    gs_req_189008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 35), 'gs_req', False)
    # Applying the binary operator '%' (line 430)
    result_mod_189009 = python_operator(stypy.reporting.localization.Localization(__file__, 430, 22), '%', unicode_189007, gs_req_189008)
    
    # Processing the call keyword arguments (line 430)
    kwargs_189010 = {}
    # Getting the type of 'warnings' (line 430)
    warnings_189005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 430)
    warn_189006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 8), warnings_189005, 'warn')
    # Calling warn(args, kwargs) (line 430)
    warn_call_result_189011 = invoke(stypy.reporting.localization.Localization(__file__, 430, 8), warn_189006, *[result_mod_189009], **kwargs_189010)
    
    # SSA join for if statement (line 428)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 's' (line 434)
    s_189012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 7), 's')
    unicode_189013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 434, 12), 'unicode', u'xpdf')
    # Applying the binary operator '==' (line 434)
    result_eq_189014 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 7), '==', s_189012, unicode_189013)
    
    # Testing the type of an if condition (line 434)
    if_condition_189015 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 434, 4), result_eq_189014)
    # Assigning a type to the variable 'if_condition_189015' (line 434)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 4), 'if_condition_189015', if_condition_189015)
    # SSA begins for if statement (line 434)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 435):
    
    # Assigning a Str to a Name (line 435):
    unicode_189016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 435, 22), 'unicode', u'3.0')
    # Assigning a type to the variable 'pdftops_req' (line 435)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'pdftops_req', unicode_189016)
    
    # Assigning a Str to a Name (line 436):
    
    # Assigning a Str to a Name (line 436):
    unicode_189017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, 26), 'unicode', u'0.9')
    # Assigning a type to the variable 'pdftops_req_alt' (line 436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 436, 8), 'pdftops_req_alt', unicode_189017)
    
    # Assigning a Call to a Name (line 437):
    
    # Assigning a Call to a Name (line 437):
    
    # Call to checkdep_pdftops(...): (line 437)
    # Processing the call keyword arguments (line 437)
    kwargs_189019 = {}
    # Getting the type of 'checkdep_pdftops' (line 437)
    checkdep_pdftops_189018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 20), 'checkdep_pdftops', False)
    # Calling checkdep_pdftops(args, kwargs) (line 437)
    checkdep_pdftops_call_result_189020 = invoke(stypy.reporting.localization.Localization(__file__, 437, 20), checkdep_pdftops_189018, *[], **kwargs_189019)
    
    # Assigning a type to the variable 'pdftops_v' (line 437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 437, 8), 'pdftops_v', checkdep_pdftops_call_result_189020)
    
    
    # Call to compare_versions(...): (line 438)
    # Processing the call arguments (line 438)
    # Getting the type of 'pdftops_v' (line 438)
    pdftops_v_189022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 28), 'pdftops_v', False)
    # Getting the type of 'pdftops_req' (line 438)
    pdftops_req_189023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 39), 'pdftops_req', False)
    # Processing the call keyword arguments (line 438)
    kwargs_189024 = {}
    # Getting the type of 'compare_versions' (line 438)
    compare_versions_189021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 11), 'compare_versions', False)
    # Calling compare_versions(args, kwargs) (line 438)
    compare_versions_call_result_189025 = invoke(stypy.reporting.localization.Localization(__file__, 438, 11), compare_versions_189021, *[pdftops_v_189022, pdftops_req_189023], **kwargs_189024)
    
    # Testing the type of an if condition (line 438)
    if_condition_189026 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 438, 8), compare_versions_call_result_189025)
    # Assigning a type to the variable 'if_condition_189026' (line 438)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 8), 'if_condition_189026', if_condition_189026)
    # SSA begins for if statement (line 438)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    pass
    # SSA branch for the else part of an if statement (line 438)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Call to compare_versions(...): (line 440)
    # Processing the call arguments (line 440)
    # Getting the type of 'pdftops_v' (line 440)
    pdftops_v_189028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 31), 'pdftops_v', False)
    # Getting the type of 'pdftops_req_alt' (line 440)
    pdftops_req_alt_189029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 42), 'pdftops_req_alt', False)
    # Processing the call keyword arguments (line 440)
    kwargs_189030 = {}
    # Getting the type of 'compare_versions' (line 440)
    compare_versions_189027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 14), 'compare_versions', False)
    # Calling compare_versions(args, kwargs) (line 440)
    compare_versions_call_result_189031 = invoke(stypy.reporting.localization.Localization(__file__, 440, 14), compare_versions_189027, *[pdftops_v_189028, pdftops_req_alt_189029], **kwargs_189030)
    
    
    
    # Call to compare_versions(...): (line 441)
    # Processing the call arguments (line 441)
    # Getting the type of 'pdftops_v' (line 441)
    pdftops_v_189033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 31), 'pdftops_v', False)
    unicode_189034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 441, 42), 'unicode', u'1.0')
    # Processing the call keyword arguments (line 441)
    kwargs_189035 = {}
    # Getting the type of 'compare_versions' (line 441)
    compare_versions_189032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 14), 'compare_versions', False)
    # Calling compare_versions(args, kwargs) (line 441)
    compare_versions_call_result_189036 = invoke(stypy.reporting.localization.Localization(__file__, 441, 14), compare_versions_189032, *[pdftops_v_189033, unicode_189034], **kwargs_189035)
    
    # Applying the 'not' unary operator (line 440)
    result_not__189037 = python_operator(stypy.reporting.localization.Localization(__file__, 440, 63), 'not', compare_versions_call_result_189036)
    
    # Applying the binary operator 'and' (line 440)
    result_and_keyword_189038 = python_operator(stypy.reporting.localization.Localization(__file__, 440, 14), 'and', compare_versions_call_result_189031, result_not__189037)
    
    # Testing the type of an if condition (line 440)
    if_condition_189039 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 440, 13), result_and_keyword_189038)
    # Assigning a type to the variable 'if_condition_189039' (line 440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 440, 13), 'if_condition_189039', if_condition_189039)
    # SSA begins for if statement (line 440)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    pass
    # SSA branch for the else part of an if statement (line 440)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 444):
    
    # Assigning a Name to a Name (line 444):
    # Getting the type of 'False' (line 444)
    False_189040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 19), 'False')
    # Assigning a type to the variable 'flag' (line 444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 12), 'flag', False_189040)
    
    # Call to warn(...): (line 445)
    # Processing the call arguments (line 445)
    unicode_189043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 445, 27), 'unicode', u'matplotlibrc ps.usedistiller can not be set to xpdf unless xpdf-%s or later is installed on your system')
    # Getting the type of 'pdftops_req' (line 447)
    pdftops_req_189044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 44), 'pdftops_req', False)
    # Applying the binary operator '%' (line 445)
    result_mod_189045 = python_operator(stypy.reporting.localization.Localization(__file__, 445, 26), '%', unicode_189043, pdftops_req_189044)
    
    # Processing the call keyword arguments (line 445)
    kwargs_189046 = {}
    # Getting the type of 'warnings' (line 445)
    warnings_189041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 12), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 445)
    warn_189042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 12), warnings_189041, 'warn')
    # Calling warn(args, kwargs) (line 445)
    warn_call_result_189047 = invoke(stypy.reporting.localization.Localization(__file__, 445, 12), warn_189042, *[result_mod_189045], **kwargs_189046)
    
    # SSA join for if statement (line 440)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 438)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 434)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'flag' (line 449)
    flag_189048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 7), 'flag')
    # Testing the type of an if condition (line 449)
    if_condition_189049 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 449, 4), flag_189048)
    # Assigning a type to the variable 'if_condition_189049' (line 449)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 449, 4), 'if_condition_189049', if_condition_189049)
    # SSA begins for if statement (line 449)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 's' (line 450)
    s_189050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 15), 's')
    # Assigning a type to the variable 'stypy_return_type' (line 450)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 8), 'stypy_return_type', s_189050)
    # SSA branch for the else part of an if statement (line 449)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'False' (line 452)
    False_189051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 452)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 452, 8), 'stypy_return_type', False_189051)
    # SSA join for if statement (line 449)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'checkdep_ps_distiller(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'checkdep_ps_distiller' in the type store
    # Getting the type of 'stypy_return_type' (line 421)
    stypy_return_type_189052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189052)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'checkdep_ps_distiller'
    return stypy_return_type_189052

# Assigning a type to the variable 'checkdep_ps_distiller' (line 421)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 421, 0), 'checkdep_ps_distiller', checkdep_ps_distiller)

@norecursion
def checkdep_usetex(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'checkdep_usetex'
    module_type_store = module_type_store.open_function_context('checkdep_usetex', 455, 0, False)
    
    # Passed parameters checking function
    checkdep_usetex.stypy_localization = localization
    checkdep_usetex.stypy_type_of_self = None
    checkdep_usetex.stypy_type_store = module_type_store
    checkdep_usetex.stypy_function_name = 'checkdep_usetex'
    checkdep_usetex.stypy_param_names_list = ['s']
    checkdep_usetex.stypy_varargs_param_name = None
    checkdep_usetex.stypy_kwargs_param_name = None
    checkdep_usetex.stypy_call_defaults = defaults
    checkdep_usetex.stypy_call_varargs = varargs
    checkdep_usetex.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'checkdep_usetex', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'checkdep_usetex', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'checkdep_usetex(...)' code ##################

    
    
    # Getting the type of 's' (line 456)
    s_189053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 11), 's')
    # Applying the 'not' unary operator (line 456)
    result_not__189054 = python_operator(stypy.reporting.localization.Localization(__file__, 456, 7), 'not', s_189053)
    
    # Testing the type of an if condition (line 456)
    if_condition_189055 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 456, 4), result_not__189054)
    # Assigning a type to the variable 'if_condition_189055' (line 456)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 456, 4), 'if_condition_189055', if_condition_189055)
    # SSA begins for if statement (line 456)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 457)
    False_189056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 457)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 457, 8), 'stypy_return_type', False_189056)
    # SSA join for if statement (line 456)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Str to a Name (line 459):
    
    # Assigning a Str to a Name (line 459):
    unicode_189057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 459, 13), 'unicode', u'8.60')
    # Assigning a type to the variable 'gs_req' (line 459)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 459, 4), 'gs_req', unicode_189057)
    
    # Assigning a Str to a Name (line 460):
    
    # Assigning a Str to a Name (line 460):
    unicode_189058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 460, 17), 'unicode', u'1.6')
    # Assigning a type to the variable 'dvipng_req' (line 460)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 4), 'dvipng_req', unicode_189058)
    
    # Assigning a Name to a Name (line 461):
    
    # Assigning a Name to a Name (line 461):
    # Getting the type of 'True' (line 461)
    True_189059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 11), 'True')
    # Assigning a type to the variable 'flag' (line 461)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 461, 4), 'flag', True_189059)
    
    # Type idiom detected: calculating its left and rigth part (line 463)
    
    # Call to which(...): (line 463)
    # Processing the call arguments (line 463)
    unicode_189062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 463, 24), 'unicode', u'tex')
    # Processing the call keyword arguments (line 463)
    kwargs_189063 = {}
    # Getting the type of '_backports' (line 463)
    _backports_189060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 7), '_backports', False)
    # Obtaining the member 'which' of a type (line 463)
    which_189061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 463, 7), _backports_189060, 'which')
    # Calling which(args, kwargs) (line 463)
    which_call_result_189064 = invoke(stypy.reporting.localization.Localization(__file__, 463, 7), which_189061, *[unicode_189062], **kwargs_189063)
    
    # Getting the type of 'None' (line 463)
    None_189065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 34), 'None')
    
    (may_be_189066, more_types_in_union_189067) = may_be_none(which_call_result_189064, None_189065)

    if may_be_189066:

        if more_types_in_union_189067:
            # Runtime conditional SSA (line 463)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Name (line 464):
        
        # Assigning a Name to a Name (line 464):
        # Getting the type of 'False' (line 464)
        False_189068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 15), 'False')
        # Assigning a type to the variable 'flag' (line 464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 8), 'flag', False_189068)
        
        # Call to warn(...): (line 465)
        # Processing the call arguments (line 465)
        unicode_189071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 465, 22), 'unicode', u'matplotlibrc text.usetex option can not be used unless TeX is installed on your system')
        # Processing the call keyword arguments (line 465)
        kwargs_189072 = {}
        # Getting the type of 'warnings' (line 465)
        warnings_189069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 465)
        warn_189070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 465, 8), warnings_189069, 'warn')
        # Calling warn(args, kwargs) (line 465)
        warn_call_result_189073 = invoke(stypy.reporting.localization.Localization(__file__, 465, 8), warn_189070, *[unicode_189071], **kwargs_189072)
        

        if more_types_in_union_189067:
            # SSA join for if statement (line 463)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 468):
    
    # Assigning a Call to a Name (line 468):
    
    # Call to checkdep_dvipng(...): (line 468)
    # Processing the call keyword arguments (line 468)
    kwargs_189075 = {}
    # Getting the type of 'checkdep_dvipng' (line 468)
    checkdep_dvipng_189074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 15), 'checkdep_dvipng', False)
    # Calling checkdep_dvipng(args, kwargs) (line 468)
    checkdep_dvipng_call_result_189076 = invoke(stypy.reporting.localization.Localization(__file__, 468, 15), checkdep_dvipng_189074, *[], **kwargs_189075)
    
    # Assigning a type to the variable 'dvipng_v' (line 468)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 4), 'dvipng_v', checkdep_dvipng_call_result_189076)
    
    
    
    # Call to compare_versions(...): (line 469)
    # Processing the call arguments (line 469)
    # Getting the type of 'dvipng_v' (line 469)
    dvipng_v_189078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 28), 'dvipng_v', False)
    # Getting the type of 'dvipng_req' (line 469)
    dvipng_req_189079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 38), 'dvipng_req', False)
    # Processing the call keyword arguments (line 469)
    kwargs_189080 = {}
    # Getting the type of 'compare_versions' (line 469)
    compare_versions_189077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 11), 'compare_versions', False)
    # Calling compare_versions(args, kwargs) (line 469)
    compare_versions_call_result_189081 = invoke(stypy.reporting.localization.Localization(__file__, 469, 11), compare_versions_189077, *[dvipng_v_189078, dvipng_req_189079], **kwargs_189080)
    
    # Applying the 'not' unary operator (line 469)
    result_not__189082 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 7), 'not', compare_versions_call_result_189081)
    
    # Testing the type of an if condition (line 469)
    if_condition_189083 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 469, 4), result_not__189082)
    # Assigning a type to the variable 'if_condition_189083' (line 469)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 4), 'if_condition_189083', if_condition_189083)
    # SSA begins for if statement (line 469)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 470):
    
    # Assigning a Name to a Name (line 470):
    # Getting the type of 'False' (line 470)
    False_189084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 15), 'False')
    # Assigning a type to the variable 'flag' (line 470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 8), 'flag', False_189084)
    
    # Call to warn(...): (line 471)
    # Processing the call arguments (line 471)
    unicode_189087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 471, 22), 'unicode', u'matplotlibrc text.usetex can not be used with *Agg backend unless dvipng-%s or later is installed on your system')
    # Getting the type of 'dvipng_req' (line 473)
    dvipng_req_189088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 38), 'dvipng_req', False)
    # Applying the binary operator '%' (line 471)
    result_mod_189089 = python_operator(stypy.reporting.localization.Localization(__file__, 471, 22), '%', unicode_189087, dvipng_req_189088)
    
    # Processing the call keyword arguments (line 471)
    kwargs_189090 = {}
    # Getting the type of 'warnings' (line 471)
    warnings_189085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 471)
    warn_189086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 8), warnings_189085, 'warn')
    # Calling warn(args, kwargs) (line 471)
    warn_call_result_189091 = invoke(stypy.reporting.localization.Localization(__file__, 471, 8), warn_189086, *[result_mod_189089], **kwargs_189090)
    
    # SSA join for if statement (line 469)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 475):
    
    # Assigning a Call to a Name:
    
    # Call to checkdep_ghostscript(...): (line 475)
    # Processing the call keyword arguments (line 475)
    kwargs_189093 = {}
    # Getting the type of 'checkdep_ghostscript' (line 475)
    checkdep_ghostscript_189092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 20), 'checkdep_ghostscript', False)
    # Calling checkdep_ghostscript(args, kwargs) (line 475)
    checkdep_ghostscript_call_result_189094 = invoke(stypy.reporting.localization.Localization(__file__, 475, 20), checkdep_ghostscript_189092, *[], **kwargs_189093)
    
    # Assigning a type to the variable 'call_assignment_188201' (line 475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 4), 'call_assignment_188201', checkdep_ghostscript_call_result_189094)
    
    # Assigning a Call to a Name (line 475):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_189097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 4), 'int')
    # Processing the call keyword arguments
    kwargs_189098 = {}
    # Getting the type of 'call_assignment_188201' (line 475)
    call_assignment_188201_189095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 4), 'call_assignment_188201', False)
    # Obtaining the member '__getitem__' of a type (line 475)
    getitem___189096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 4), call_assignment_188201_189095, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_189099 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___189096, *[int_189097], **kwargs_189098)
    
    # Assigning a type to the variable 'call_assignment_188202' (line 475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 4), 'call_assignment_188202', getitem___call_result_189099)
    
    # Assigning a Name to a Name (line 475):
    # Getting the type of 'call_assignment_188202' (line 475)
    call_assignment_188202_189100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 4), 'call_assignment_188202')
    # Assigning a type to the variable 'gs_exec' (line 475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 4), 'gs_exec', call_assignment_188202_189100)
    
    # Assigning a Call to a Name (line 475):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_189103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 4), 'int')
    # Processing the call keyword arguments
    kwargs_189104 = {}
    # Getting the type of 'call_assignment_188201' (line 475)
    call_assignment_188201_189101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 4), 'call_assignment_188201', False)
    # Obtaining the member '__getitem__' of a type (line 475)
    getitem___189102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 4), call_assignment_188201_189101, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_189105 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___189102, *[int_189103], **kwargs_189104)
    
    # Assigning a type to the variable 'call_assignment_188203' (line 475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 4), 'call_assignment_188203', getitem___call_result_189105)
    
    # Assigning a Name to a Name (line 475):
    # Getting the type of 'call_assignment_188203' (line 475)
    call_assignment_188203_189106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 4), 'call_assignment_188203')
    # Assigning a type to the variable 'gs_v' (line 475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 13), 'gs_v', call_assignment_188203_189106)
    
    
    
    # Call to compare_versions(...): (line 476)
    # Processing the call arguments (line 476)
    # Getting the type of 'gs_v' (line 476)
    gs_v_189108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 28), 'gs_v', False)
    # Getting the type of 'gs_req' (line 476)
    gs_req_189109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 34), 'gs_req', False)
    # Processing the call keyword arguments (line 476)
    kwargs_189110 = {}
    # Getting the type of 'compare_versions' (line 476)
    compare_versions_189107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 11), 'compare_versions', False)
    # Calling compare_versions(args, kwargs) (line 476)
    compare_versions_call_result_189111 = invoke(stypy.reporting.localization.Localization(__file__, 476, 11), compare_versions_189107, *[gs_v_189108, gs_req_189109], **kwargs_189110)
    
    # Applying the 'not' unary operator (line 476)
    result_not__189112 = python_operator(stypy.reporting.localization.Localization(__file__, 476, 7), 'not', compare_versions_call_result_189111)
    
    # Testing the type of an if condition (line 476)
    if_condition_189113 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 476, 4), result_not__189112)
    # Assigning a type to the variable 'if_condition_189113' (line 476)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 476, 4), 'if_condition_189113', if_condition_189113)
    # SSA begins for if statement (line 476)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 477):
    
    # Assigning a Name to a Name (line 477):
    # Getting the type of 'False' (line 477)
    False_189114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 15), 'False')
    # Assigning a type to the variable 'flag' (line 477)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 8), 'flag', False_189114)
    
    # Call to warn(...): (line 478)
    # Processing the call arguments (line 478)
    unicode_189117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, 22), 'unicode', u'matplotlibrc text.usetex can not be used unless ghostscript-%s or later is installed on your system')
    # Getting the type of 'gs_req' (line 480)
    gs_req_189118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 24), 'gs_req', False)
    # Applying the binary operator '%' (line 478)
    result_mod_189119 = python_operator(stypy.reporting.localization.Localization(__file__, 478, 22), '%', unicode_189117, gs_req_189118)
    
    # Processing the call keyword arguments (line 478)
    kwargs_189120 = {}
    # Getting the type of 'warnings' (line 478)
    warnings_189115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 478)
    warn_189116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 478, 8), warnings_189115, 'warn')
    # Calling warn(args, kwargs) (line 478)
    warn_call_result_189121 = invoke(stypy.reporting.localization.Localization(__file__, 478, 8), warn_189116, *[result_mod_189119], **kwargs_189120)
    
    # SSA join for if statement (line 476)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'flag' (line 482)
    flag_189122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 11), 'flag')
    # Assigning a type to the variable 'stypy_return_type' (line 482)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 4), 'stypy_return_type', flag_189122)
    
    # ################# End of 'checkdep_usetex(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'checkdep_usetex' in the type store
    # Getting the type of 'stypy_return_type' (line 455)
    stypy_return_type_189123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189123)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'checkdep_usetex'
    return stypy_return_type_189123

# Assigning a type to the variable 'checkdep_usetex' (line 455)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 0), 'checkdep_usetex', checkdep_usetex)

@norecursion
def _get_home(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_home'
    module_type_store = module_type_store.open_function_context('_get_home', 485, 0, False)
    
    # Passed parameters checking function
    _get_home.stypy_localization = localization
    _get_home.stypy_type_of_self = None
    _get_home.stypy_type_store = module_type_store
    _get_home.stypy_function_name = '_get_home'
    _get_home.stypy_param_names_list = []
    _get_home.stypy_varargs_param_name = None
    _get_home.stypy_kwargs_param_name = None
    _get_home.stypy_call_defaults = defaults
    _get_home.stypy_call_varargs = varargs
    _get_home.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_home', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_home', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_home(...)' code ##################

    unicode_189124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 491, (-1)), 'unicode', u"Find user's home directory if possible.\n    Otherwise, returns None.\n\n    :see:\n        http://mail.python.org/pipermail/python-list/2005-February/325395.html\n    ")
    
    
    # Evaluating a boolean operation
    # Getting the type of 'six' (line 492)
    six_189125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 7), 'six')
    # Obtaining the member 'PY2' of a type (line 492)
    PY2_189126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 7), six_189125, 'PY2')
    
    # Getting the type of 'sys' (line 492)
    sys_189127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 19), 'sys')
    # Obtaining the member 'platform' of a type (line 492)
    platform_189128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 19), sys_189127, 'platform')
    unicode_189129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 492, 35), 'unicode', u'win32')
    # Applying the binary operator '==' (line 492)
    result_eq_189130 = python_operator(stypy.reporting.localization.Localization(__file__, 492, 19), '==', platform_189128, unicode_189129)
    
    # Applying the binary operator 'and' (line 492)
    result_and_keyword_189131 = python_operator(stypy.reporting.localization.Localization(__file__, 492, 7), 'and', PY2_189126, result_eq_189130)
    
    # Testing the type of an if condition (line 492)
    if_condition_189132 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 492, 4), result_and_keyword_189131)
    # Assigning a type to the variable 'if_condition_189132' (line 492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 4), 'if_condition_189132', if_condition_189132)
    # SSA begins for if statement (line 492)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 493):
    
    # Assigning a Call to a Name (line 493):
    
    # Call to decode(...): (line 493)
    # Processing the call arguments (line 493)
    
    # Call to getfilesystemencoding(...): (line 493)
    # Processing the call keyword arguments (line 493)
    kwargs_189142 = {}
    # Getting the type of 'sys' (line 493)
    sys_189140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 47), 'sys', False)
    # Obtaining the member 'getfilesystemencoding' of a type (line 493)
    getfilesystemencoding_189141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 47), sys_189140, 'getfilesystemencoding')
    # Calling getfilesystemencoding(args, kwargs) (line 493)
    getfilesystemencoding_call_result_189143 = invoke(stypy.reporting.localization.Localization(__file__, 493, 47), getfilesystemencoding_189141, *[], **kwargs_189142)
    
    # Processing the call keyword arguments (line 493)
    kwargs_189144 = {}
    
    # Call to expanduser(...): (line 493)
    # Processing the call arguments (line 493)
    str_189136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 493, 34), 'str', '~')
    # Processing the call keyword arguments (line 493)
    kwargs_189137 = {}
    # Getting the type of 'os' (line 493)
    os_189133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 15), 'os', False)
    # Obtaining the member 'path' of a type (line 493)
    path_189134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 15), os_189133, 'path')
    # Obtaining the member 'expanduser' of a type (line 493)
    expanduser_189135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 15), path_189134, 'expanduser')
    # Calling expanduser(args, kwargs) (line 493)
    expanduser_call_result_189138 = invoke(stypy.reporting.localization.Localization(__file__, 493, 15), expanduser_189135, *[str_189136], **kwargs_189137)
    
    # Obtaining the member 'decode' of a type (line 493)
    decode_189139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 15), expanduser_call_result_189138, 'decode')
    # Calling decode(args, kwargs) (line 493)
    decode_call_result_189145 = invoke(stypy.reporting.localization.Localization(__file__, 493, 15), decode_189139, *[getfilesystemencoding_call_result_189143], **kwargs_189144)
    
    # Assigning a type to the variable 'path' (line 493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 8), 'path', decode_call_result_189145)
    # SSA branch for the else part of an if statement (line 492)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 495):
    
    # Assigning a Call to a Name (line 495):
    
    # Call to expanduser(...): (line 495)
    # Processing the call arguments (line 495)
    unicode_189149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, 34), 'unicode', u'~')
    # Processing the call keyword arguments (line 495)
    kwargs_189150 = {}
    # Getting the type of 'os' (line 495)
    os_189146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 15), 'os', False)
    # Obtaining the member 'path' of a type (line 495)
    path_189147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 15), os_189146, 'path')
    # Obtaining the member 'expanduser' of a type (line 495)
    expanduser_189148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 15), path_189147, 'expanduser')
    # Calling expanduser(args, kwargs) (line 495)
    expanduser_call_result_189151 = invoke(stypy.reporting.localization.Localization(__file__, 495, 15), expanduser_189148, *[unicode_189149], **kwargs_189150)
    
    # Assigning a type to the variable 'path' (line 495)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 8), 'path', expanduser_call_result_189151)
    # SSA join for if statement (line 492)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to isdir(...): (line 496)
    # Processing the call arguments (line 496)
    # Getting the type of 'path' (line 496)
    path_189155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 21), 'path', False)
    # Processing the call keyword arguments (line 496)
    kwargs_189156 = {}
    # Getting the type of 'os' (line 496)
    os_189152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 7), 'os', False)
    # Obtaining the member 'path' of a type (line 496)
    path_189153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 7), os_189152, 'path')
    # Obtaining the member 'isdir' of a type (line 496)
    isdir_189154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 7), path_189153, 'isdir')
    # Calling isdir(args, kwargs) (line 496)
    isdir_call_result_189157 = invoke(stypy.reporting.localization.Localization(__file__, 496, 7), isdir_189154, *[path_189155], **kwargs_189156)
    
    # Testing the type of an if condition (line 496)
    if_condition_189158 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 496, 4), isdir_call_result_189157)
    # Assigning a type to the variable 'if_condition_189158' (line 496)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 4), 'if_condition_189158', if_condition_189158)
    # SSA begins for if statement (line 496)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'path' (line 497)
    path_189159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 15), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 497)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 8), 'stypy_return_type', path_189159)
    # SSA join for if statement (line 496)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 498)
    tuple_189160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 498, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 498)
    # Adding element type (line 498)
    unicode_189161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 498, 17), 'unicode', u'HOME')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 498, 17), tuple_189160, unicode_189161)
    # Adding element type (line 498)
    unicode_189162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 498, 25), 'unicode', u'USERPROFILE')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 498, 17), tuple_189160, unicode_189162)
    # Adding element type (line 498)
    unicode_189163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 498, 40), 'unicode', u'TMP')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 498, 17), tuple_189160, unicode_189163)
    
    # Testing the type of a for loop iterable (line 498)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 498, 4), tuple_189160)
    # Getting the type of the for loop variable (line 498)
    for_loop_var_189164 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 498, 4), tuple_189160)
    # Assigning a type to the variable 'evar' (line 498)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 4), 'evar', for_loop_var_189164)
    # SSA begins for a for statement (line 498)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 499):
    
    # Assigning a Call to a Name (line 499):
    
    # Call to get(...): (line 499)
    # Processing the call arguments (line 499)
    # Getting the type of 'evar' (line 499)
    evar_189168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 30), 'evar', False)
    # Processing the call keyword arguments (line 499)
    kwargs_189169 = {}
    # Getting the type of 'os' (line 499)
    os_189165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 15), 'os', False)
    # Obtaining the member 'environ' of a type (line 499)
    environ_189166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 499, 15), os_189165, 'environ')
    # Obtaining the member 'get' of a type (line 499)
    get_189167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 499, 15), environ_189166, 'get')
    # Calling get(args, kwargs) (line 499)
    get_call_result_189170 = invoke(stypy.reporting.localization.Localization(__file__, 499, 15), get_189167, *[evar_189168], **kwargs_189169)
    
    # Assigning a type to the variable 'path' (line 499)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 8), 'path', get_call_result_189170)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'path' (line 500)
    path_189171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 11), 'path')
    # Getting the type of 'None' (line 500)
    None_189172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 23), 'None')
    # Applying the binary operator 'isnot' (line 500)
    result_is_not_189173 = python_operator(stypy.reporting.localization.Localization(__file__, 500, 11), 'isnot', path_189171, None_189172)
    
    
    # Call to isdir(...): (line 500)
    # Processing the call arguments (line 500)
    # Getting the type of 'path' (line 500)
    path_189177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 46), 'path', False)
    # Processing the call keyword arguments (line 500)
    kwargs_189178 = {}
    # Getting the type of 'os' (line 500)
    os_189174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 32), 'os', False)
    # Obtaining the member 'path' of a type (line 500)
    path_189175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 500, 32), os_189174, 'path')
    # Obtaining the member 'isdir' of a type (line 500)
    isdir_189176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 500, 32), path_189175, 'isdir')
    # Calling isdir(args, kwargs) (line 500)
    isdir_call_result_189179 = invoke(stypy.reporting.localization.Localization(__file__, 500, 32), isdir_189176, *[path_189177], **kwargs_189178)
    
    # Applying the binary operator 'and' (line 500)
    result_and_keyword_189180 = python_operator(stypy.reporting.localization.Localization(__file__, 500, 11), 'and', result_is_not_189173, isdir_call_result_189179)
    
    # Testing the type of an if condition (line 500)
    if_condition_189181 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 500, 8), result_and_keyword_189180)
    # Assigning a type to the variable 'if_condition_189181' (line 500)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 8), 'if_condition_189181', if_condition_189181)
    # SSA begins for if statement (line 500)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'path' (line 501)
    path_189182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 19), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 501, 12), 'stypy_return_type', path_189182)
    # SSA join for if statement (line 500)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'None' (line 502)
    None_189183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 11), 'None')
    # Assigning a type to the variable 'stypy_return_type' (line 502)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 502, 4), 'stypy_return_type', None_189183)
    
    # ################# End of '_get_home(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_home' in the type store
    # Getting the type of 'stypy_return_type' (line 485)
    stypy_return_type_189184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189184)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_home'
    return stypy_return_type_189184

# Assigning a type to the variable '_get_home' (line 485)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 485, 0), '_get_home', _get_home)

@norecursion
def _create_tmp_config_dir(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_create_tmp_config_dir'
    module_type_store = module_type_store.open_function_context('_create_tmp_config_dir', 505, 0, False)
    
    # Passed parameters checking function
    _create_tmp_config_dir.stypy_localization = localization
    _create_tmp_config_dir.stypy_type_of_self = None
    _create_tmp_config_dir.stypy_type_store = module_type_store
    _create_tmp_config_dir.stypy_function_name = '_create_tmp_config_dir'
    _create_tmp_config_dir.stypy_param_names_list = []
    _create_tmp_config_dir.stypy_varargs_param_name = None
    _create_tmp_config_dir.stypy_kwargs_param_name = None
    _create_tmp_config_dir.stypy_call_defaults = defaults
    _create_tmp_config_dir.stypy_call_varargs = varargs
    _create_tmp_config_dir.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_create_tmp_config_dir', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_create_tmp_config_dir', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_create_tmp_config_dir(...)' code ##################

    unicode_189185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, (-1)), 'unicode', u'\n    If the config directory can not be created, create a temporary\n    directory.\n    ')
    
    # Multiple assignment of 2 elements.
    
    # Assigning a Call to a Subscript (line 510):
    
    # Call to mkdtemp(...): (line 511)
    # Processing the call keyword arguments (line 511)
    unicode_189188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 511, 32), 'unicode', u'matplotlib-')
    keyword_189189 = unicode_189188
    kwargs_189190 = {'prefix': keyword_189189}
    # Getting the type of 'tempfile' (line 511)
    tempfile_189186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 8), 'tempfile', False)
    # Obtaining the member 'mkdtemp' of a type (line 511)
    mkdtemp_189187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 8), tempfile_189186, 'mkdtemp')
    # Calling mkdtemp(args, kwargs) (line 511)
    mkdtemp_call_result_189191 = invoke(stypy.reporting.localization.Localization(__file__, 511, 8), mkdtemp_189187, *[], **kwargs_189190)
    
    # Getting the type of 'os' (line 510)
    os_189192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 16), 'os')
    # Obtaining the member 'environ' of a type (line 510)
    environ_189193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 16), os_189192, 'environ')
    unicode_189194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 27), 'unicode', u'MPLCONFIGDIR')
    # Storing an element on a container (line 510)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 510, 16), environ_189193, (unicode_189194, mkdtemp_call_result_189191))
    
    # Assigning a Subscript to a Name (line 510):
    
    # Obtaining the type of the subscript
    unicode_189195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 27), 'unicode', u'MPLCONFIGDIR')
    # Getting the type of 'os' (line 510)
    os_189196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 16), 'os')
    # Obtaining the member 'environ' of a type (line 510)
    environ_189197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 16), os_189196, 'environ')
    # Obtaining the member '__getitem__' of a type (line 510)
    getitem___189198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 16), environ_189197, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 510)
    subscript_call_result_189199 = invoke(stypy.reporting.localization.Localization(__file__, 510, 16), getitem___189198, unicode_189195)
    
    # Assigning a type to the variable 'configdir' (line 510)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 4), 'configdir', subscript_call_result_189199)
    # Getting the type of 'configdir' (line 512)
    configdir_189200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 11), 'configdir')
    # Assigning a type to the variable 'stypy_return_type' (line 512)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 4), 'stypy_return_type', configdir_189200)
    
    # ################# End of '_create_tmp_config_dir(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_create_tmp_config_dir' in the type store
    # Getting the type of 'stypy_return_type' (line 505)
    stypy_return_type_189201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189201)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_create_tmp_config_dir'
    return stypy_return_type_189201

# Assigning a type to the variable '_create_tmp_config_dir' (line 505)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 505, 0), '_create_tmp_config_dir', _create_tmp_config_dir)

# Assigning a Call to a Name (line 515):

# Assigning a Call to a Name (line 515):

# Call to wrap(...): (line 515)
# Processing the call arguments (line 515)
unicode_189204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 515, 24), 'unicode', u'$HOME=%s')
# Getting the type of '_get_home' (line 515)
_get_home_189205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 36), '_get_home', False)
# Processing the call keyword arguments (line 515)
# Getting the type of 'False' (line 515)
False_189206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 54), 'False', False)
keyword_189207 = False_189206
kwargs_189208 = {'always': keyword_189207}
# Getting the type of 'verbose' (line 515)
verbose_189202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 11), 'verbose', False)
# Obtaining the member 'wrap' of a type (line 515)
wrap_189203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 11), verbose_189202, 'wrap')
# Calling wrap(args, kwargs) (line 515)
wrap_call_result_189209 = invoke(stypy.reporting.localization.Localization(__file__, 515, 11), wrap_189203, *[unicode_189204, _get_home_189205], **kwargs_189208)

# Assigning a type to the variable 'get_home' (line 515)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 0), 'get_home', wrap_call_result_189209)

@norecursion
def _get_xdg_config_dir(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_xdg_config_dir'
    module_type_store = module_type_store.open_function_context('_get_xdg_config_dir', 518, 0, False)
    
    # Passed parameters checking function
    _get_xdg_config_dir.stypy_localization = localization
    _get_xdg_config_dir.stypy_type_of_self = None
    _get_xdg_config_dir.stypy_type_store = module_type_store
    _get_xdg_config_dir.stypy_function_name = '_get_xdg_config_dir'
    _get_xdg_config_dir.stypy_param_names_list = []
    _get_xdg_config_dir.stypy_varargs_param_name = None
    _get_xdg_config_dir.stypy_kwargs_param_name = None
    _get_xdg_config_dir.stypy_call_defaults = defaults
    _get_xdg_config_dir.stypy_call_varargs = varargs
    _get_xdg_config_dir.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_xdg_config_dir', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_xdg_config_dir', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_xdg_config_dir(...)' code ##################

    unicode_189210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, (-1)), 'unicode', u'\n    Returns the XDG configuration directory, according to the `XDG\n    base directory spec\n    <http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html>`_.\n    ')
    
    # Assigning a Call to a Name (line 524):
    
    # Assigning a Call to a Name (line 524):
    
    # Call to get(...): (line 524)
    # Processing the call arguments (line 524)
    unicode_189214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 26), 'unicode', u'XDG_CONFIG_HOME')
    # Processing the call keyword arguments (line 524)
    kwargs_189215 = {}
    # Getting the type of 'os' (line 524)
    os_189211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 11), 'os', False)
    # Obtaining the member 'environ' of a type (line 524)
    environ_189212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 11), os_189211, 'environ')
    # Obtaining the member 'get' of a type (line 524)
    get_189213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 11), environ_189212, 'get')
    # Calling get(args, kwargs) (line 524)
    get_call_result_189216 = invoke(stypy.reporting.localization.Localization(__file__, 524, 11), get_189213, *[unicode_189214], **kwargs_189215)
    
    # Assigning a type to the variable 'path' (line 524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 4), 'path', get_call_result_189216)
    
    # Type idiom detected: calculating its left and rigth part (line 525)
    # Getting the type of 'path' (line 525)
    path_189217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 7), 'path')
    # Getting the type of 'None' (line 525)
    None_189218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 15), 'None')
    
    (may_be_189219, more_types_in_union_189220) = may_be_none(path_189217, None_189218)

    if may_be_189219:

        if more_types_in_union_189220:
            # Runtime conditional SSA (line 525)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 526):
        
        # Assigning a Call to a Name (line 526):
        
        # Call to get_home(...): (line 526)
        # Processing the call keyword arguments (line 526)
        kwargs_189222 = {}
        # Getting the type of 'get_home' (line 526)
        get_home_189221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 15), 'get_home', False)
        # Calling get_home(args, kwargs) (line 526)
        get_home_call_result_189223 = invoke(stypy.reporting.localization.Localization(__file__, 526, 15), get_home_189221, *[], **kwargs_189222)
        
        # Assigning a type to the variable 'path' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'path', get_home_call_result_189223)
        
        # Type idiom detected: calculating its left and rigth part (line 527)
        # Getting the type of 'path' (line 527)
        path_189224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 8), 'path')
        # Getting the type of 'None' (line 527)
        None_189225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 23), 'None')
        
        (may_be_189226, more_types_in_union_189227) = may_not_be_none(path_189224, None_189225)

        if may_be_189226:

            if more_types_in_union_189227:
                # Runtime conditional SSA (line 527)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 528):
            
            # Assigning a Call to a Name (line 528):
            
            # Call to join(...): (line 528)
            # Processing the call arguments (line 528)
            # Getting the type of 'path' (line 528)
            path_189231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 32), 'path', False)
            unicode_189232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 38), 'unicode', u'.config')
            # Processing the call keyword arguments (line 528)
            kwargs_189233 = {}
            # Getting the type of 'os' (line 528)
            os_189228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 19), 'os', False)
            # Obtaining the member 'path' of a type (line 528)
            path_189229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 19), os_189228, 'path')
            # Obtaining the member 'join' of a type (line 528)
            join_189230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 19), path_189229, 'join')
            # Calling join(args, kwargs) (line 528)
            join_call_result_189234 = invoke(stypy.reporting.localization.Localization(__file__, 528, 19), join_189230, *[path_189231, unicode_189232], **kwargs_189233)
            
            # Assigning a type to the variable 'path' (line 528)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 12), 'path', join_call_result_189234)

            if more_types_in_union_189227:
                # SSA join for if statement (line 527)
                module_type_store = module_type_store.join_ssa_context()


        

        if more_types_in_union_189220:
            # SSA join for if statement (line 525)
            module_type_store = module_type_store.join_ssa_context()


    
    # Getting the type of 'path' (line 529)
    path_189235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 11), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 4), 'stypy_return_type', path_189235)
    
    # ################# End of '_get_xdg_config_dir(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_xdg_config_dir' in the type store
    # Getting the type of 'stypy_return_type' (line 518)
    stypy_return_type_189236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189236)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_xdg_config_dir'
    return stypy_return_type_189236

# Assigning a type to the variable '_get_xdg_config_dir' (line 518)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 0), '_get_xdg_config_dir', _get_xdg_config_dir)

@norecursion
def _get_xdg_cache_dir(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_xdg_cache_dir'
    module_type_store = module_type_store.open_function_context('_get_xdg_cache_dir', 532, 0, False)
    
    # Passed parameters checking function
    _get_xdg_cache_dir.stypy_localization = localization
    _get_xdg_cache_dir.stypy_type_of_self = None
    _get_xdg_cache_dir.stypy_type_store = module_type_store
    _get_xdg_cache_dir.stypy_function_name = '_get_xdg_cache_dir'
    _get_xdg_cache_dir.stypy_param_names_list = []
    _get_xdg_cache_dir.stypy_varargs_param_name = None
    _get_xdg_cache_dir.stypy_kwargs_param_name = None
    _get_xdg_cache_dir.stypy_call_defaults = defaults
    _get_xdg_cache_dir.stypy_call_varargs = varargs
    _get_xdg_cache_dir.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_xdg_cache_dir', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_xdg_cache_dir', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_xdg_cache_dir(...)' code ##################

    unicode_189237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 537, (-1)), 'unicode', u'\n    Returns the XDG cache directory, according to the `XDG\n    base directory spec\n    <http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html>`_.\n    ')
    
    # Assigning a Call to a Name (line 538):
    
    # Assigning a Call to a Name (line 538):
    
    # Call to get(...): (line 538)
    # Processing the call arguments (line 538)
    unicode_189241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 26), 'unicode', u'XDG_CACHE_HOME')
    # Processing the call keyword arguments (line 538)
    kwargs_189242 = {}
    # Getting the type of 'os' (line 538)
    os_189238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 11), 'os', False)
    # Obtaining the member 'environ' of a type (line 538)
    environ_189239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 11), os_189238, 'environ')
    # Obtaining the member 'get' of a type (line 538)
    get_189240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 11), environ_189239, 'get')
    # Calling get(args, kwargs) (line 538)
    get_call_result_189243 = invoke(stypy.reporting.localization.Localization(__file__, 538, 11), get_189240, *[unicode_189241], **kwargs_189242)
    
    # Assigning a type to the variable 'path' (line 538)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 4), 'path', get_call_result_189243)
    
    # Type idiom detected: calculating its left and rigth part (line 539)
    # Getting the type of 'path' (line 539)
    path_189244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 7), 'path')
    # Getting the type of 'None' (line 539)
    None_189245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 15), 'None')
    
    (may_be_189246, more_types_in_union_189247) = may_be_none(path_189244, None_189245)

    if may_be_189246:

        if more_types_in_union_189247:
            # Runtime conditional SSA (line 539)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 540):
        
        # Assigning a Call to a Name (line 540):
        
        # Call to get_home(...): (line 540)
        # Processing the call keyword arguments (line 540)
        kwargs_189249 = {}
        # Getting the type of 'get_home' (line 540)
        get_home_189248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 15), 'get_home', False)
        # Calling get_home(args, kwargs) (line 540)
        get_home_call_result_189250 = invoke(stypy.reporting.localization.Localization(__file__, 540, 15), get_home_189248, *[], **kwargs_189249)
        
        # Assigning a type to the variable 'path' (line 540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 8), 'path', get_home_call_result_189250)
        
        # Type idiom detected: calculating its left and rigth part (line 541)
        # Getting the type of 'path' (line 541)
        path_189251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'path')
        # Getting the type of 'None' (line 541)
        None_189252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 23), 'None')
        
        (may_be_189253, more_types_in_union_189254) = may_not_be_none(path_189251, None_189252)

        if may_be_189253:

            if more_types_in_union_189254:
                # Runtime conditional SSA (line 541)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 542):
            
            # Assigning a Call to a Name (line 542):
            
            # Call to join(...): (line 542)
            # Processing the call arguments (line 542)
            # Getting the type of 'path' (line 542)
            path_189258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 32), 'path', False)
            unicode_189259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 38), 'unicode', u'.cache')
            # Processing the call keyword arguments (line 542)
            kwargs_189260 = {}
            # Getting the type of 'os' (line 542)
            os_189255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 19), 'os', False)
            # Obtaining the member 'path' of a type (line 542)
            path_189256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 19), os_189255, 'path')
            # Obtaining the member 'join' of a type (line 542)
            join_189257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 19), path_189256, 'join')
            # Calling join(args, kwargs) (line 542)
            join_call_result_189261 = invoke(stypy.reporting.localization.Localization(__file__, 542, 19), join_189257, *[path_189258, unicode_189259], **kwargs_189260)
            
            # Assigning a type to the variable 'path' (line 542)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 12), 'path', join_call_result_189261)

            if more_types_in_union_189254:
                # SSA join for if statement (line 541)
                module_type_store = module_type_store.join_ssa_context()


        

        if more_types_in_union_189247:
            # SSA join for if statement (line 539)
            module_type_store = module_type_store.join_ssa_context()


    
    # Getting the type of 'path' (line 543)
    path_189262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 11), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 4), 'stypy_return_type', path_189262)
    
    # ################# End of '_get_xdg_cache_dir(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_xdg_cache_dir' in the type store
    # Getting the type of 'stypy_return_type' (line 532)
    stypy_return_type_189263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189263)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_xdg_cache_dir'
    return stypy_return_type_189263

# Assigning a type to the variable '_get_xdg_cache_dir' (line 532)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 532, 0), '_get_xdg_cache_dir', _get_xdg_cache_dir)

@norecursion
def _get_config_or_cache_dir(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_config_or_cache_dir'
    module_type_store = module_type_store.open_function_context('_get_config_or_cache_dir', 546, 0, False)
    
    # Passed parameters checking function
    _get_config_or_cache_dir.stypy_localization = localization
    _get_config_or_cache_dir.stypy_type_of_self = None
    _get_config_or_cache_dir.stypy_type_store = module_type_store
    _get_config_or_cache_dir.stypy_function_name = '_get_config_or_cache_dir'
    _get_config_or_cache_dir.stypy_param_names_list = ['xdg_base']
    _get_config_or_cache_dir.stypy_varargs_param_name = None
    _get_config_or_cache_dir.stypy_kwargs_param_name = None
    _get_config_or_cache_dir.stypy_call_defaults = defaults
    _get_config_or_cache_dir.stypy_call_varargs = varargs
    _get_config_or_cache_dir.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_config_or_cache_dir', ['xdg_base'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_config_or_cache_dir', localization, ['xdg_base'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_config_or_cache_dir(...)' code ##################

    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 547, 4))
    
    # 'from matplotlib.cbook import mkdirs' statement (line 547)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_189264 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 547, 4), 'matplotlib.cbook')

    if (type(import_189264) is not StypyTypeError):

        if (import_189264 != 'pyd_module'):
            __import__(import_189264)
            sys_modules_189265 = sys.modules[import_189264]
            import_from_module(stypy.reporting.localization.Localization(__file__, 547, 4), 'matplotlib.cbook', sys_modules_189265.module_type_store, module_type_store, ['mkdirs'])
            nest_module(stypy.reporting.localization.Localization(__file__, 547, 4), __file__, sys_modules_189265, sys_modules_189265.module_type_store, module_type_store)
        else:
            from matplotlib.cbook import mkdirs

            import_from_module(stypy.reporting.localization.Localization(__file__, 547, 4), 'matplotlib.cbook', None, module_type_store, ['mkdirs'], [mkdirs])

    else:
        # Assigning a type to the variable 'matplotlib.cbook' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 4), 'matplotlib.cbook', import_189264)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    # Assigning a Call to a Name (line 549):
    
    # Assigning a Call to a Name (line 549):
    
    # Call to get(...): (line 549)
    # Processing the call arguments (line 549)
    unicode_189269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 549, 31), 'unicode', u'MPLCONFIGDIR')
    # Processing the call keyword arguments (line 549)
    kwargs_189270 = {}
    # Getting the type of 'os' (line 549)
    os_189266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 16), 'os', False)
    # Obtaining the member 'environ' of a type (line 549)
    environ_189267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 16), os_189266, 'environ')
    # Obtaining the member 'get' of a type (line 549)
    get_189268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 16), environ_189267, 'get')
    # Calling get(args, kwargs) (line 549)
    get_call_result_189271 = invoke(stypy.reporting.localization.Localization(__file__, 549, 16), get_189268, *[unicode_189269], **kwargs_189270)
    
    # Assigning a type to the variable 'configdir' (line 549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 4), 'configdir', get_call_result_189271)
    
    # Type idiom detected: calculating its left and rigth part (line 550)
    # Getting the type of 'configdir' (line 550)
    configdir_189272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 4), 'configdir')
    # Getting the type of 'None' (line 550)
    None_189273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 24), 'None')
    
    (may_be_189274, more_types_in_union_189275) = may_not_be_none(configdir_189272, None_189273)

    if may_be_189274:

        if more_types_in_union_189275:
            # Runtime conditional SSA (line 550)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 551):
        
        # Assigning a Call to a Name (line 551):
        
        # Call to abspath(...): (line 551)
        # Processing the call arguments (line 551)
        # Getting the type of 'configdir' (line 551)
        configdir_189279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 36), 'configdir', False)
        # Processing the call keyword arguments (line 551)
        kwargs_189280 = {}
        # Getting the type of 'os' (line 551)
        os_189276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 20), 'os', False)
        # Obtaining the member 'path' of a type (line 551)
        path_189277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 20), os_189276, 'path')
        # Obtaining the member 'abspath' of a type (line 551)
        abspath_189278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 20), path_189277, 'abspath')
        # Calling abspath(args, kwargs) (line 551)
        abspath_call_result_189281 = invoke(stypy.reporting.localization.Localization(__file__, 551, 20), abspath_189278, *[configdir_189279], **kwargs_189280)
        
        # Assigning a type to the variable 'configdir' (line 551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 8), 'configdir', abspath_call_result_189281)
        
        
        
        # Call to exists(...): (line 552)
        # Processing the call arguments (line 552)
        # Getting the type of 'configdir' (line 552)
        configdir_189285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 30), 'configdir', False)
        # Processing the call keyword arguments (line 552)
        kwargs_189286 = {}
        # Getting the type of 'os' (line 552)
        os_189282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 15), 'os', False)
        # Obtaining the member 'path' of a type (line 552)
        path_189283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 15), os_189282, 'path')
        # Obtaining the member 'exists' of a type (line 552)
        exists_189284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 15), path_189283, 'exists')
        # Calling exists(args, kwargs) (line 552)
        exists_call_result_189287 = invoke(stypy.reporting.localization.Localization(__file__, 552, 15), exists_189284, *[configdir_189285], **kwargs_189286)
        
        # Applying the 'not' unary operator (line 552)
        result_not__189288 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 11), 'not', exists_call_result_189287)
        
        # Testing the type of an if condition (line 552)
        if_condition_189289 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 552, 8), result_not__189288)
        # Assigning a type to the variable 'if_condition_189289' (line 552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 8), 'if_condition_189289', if_condition_189289)
        # SSA begins for if statement (line 552)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to mkdirs(...): (line 553)
        # Processing the call arguments (line 553)
        # Getting the type of 'configdir' (line 553)
        configdir_189291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 19), 'configdir', False)
        # Processing the call keyword arguments (line 553)
        kwargs_189292 = {}
        # Getting the type of 'mkdirs' (line 553)
        mkdirs_189290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'mkdirs', False)
        # Calling mkdirs(args, kwargs) (line 553)
        mkdirs_call_result_189293 = invoke(stypy.reporting.localization.Localization(__file__, 553, 12), mkdirs_189290, *[configdir_189291], **kwargs_189292)
        
        # SSA join for if statement (line 552)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to _is_writable_dir(...): (line 555)
        # Processing the call arguments (line 555)
        # Getting the type of 'configdir' (line 555)
        configdir_189295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 32), 'configdir', False)
        # Processing the call keyword arguments (line 555)
        kwargs_189296 = {}
        # Getting the type of '_is_writable_dir' (line 555)
        _is_writable_dir_189294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 15), '_is_writable_dir', False)
        # Calling _is_writable_dir(args, kwargs) (line 555)
        _is_writable_dir_call_result_189297 = invoke(stypy.reporting.localization.Localization(__file__, 555, 15), _is_writable_dir_189294, *[configdir_189295], **kwargs_189296)
        
        # Applying the 'not' unary operator (line 555)
        result_not__189298 = python_operator(stypy.reporting.localization.Localization(__file__, 555, 11), 'not', _is_writable_dir_call_result_189297)
        
        # Testing the type of an if condition (line 555)
        if_condition_189299 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 555, 8), result_not__189298)
        # Assigning a type to the variable 'if_condition_189299' (line 555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 8), 'if_condition_189299', if_condition_189299)
        # SSA begins for if statement (line 555)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _create_tmp_config_dir(...): (line 556)
        # Processing the call keyword arguments (line 556)
        kwargs_189301 = {}
        # Getting the type of '_create_tmp_config_dir' (line 556)
        _create_tmp_config_dir_189300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 19), '_create_tmp_config_dir', False)
        # Calling _create_tmp_config_dir(args, kwargs) (line 556)
        _create_tmp_config_dir_call_result_189302 = invoke(stypy.reporting.localization.Localization(__file__, 556, 19), _create_tmp_config_dir_189300, *[], **kwargs_189301)
        
        # Assigning a type to the variable 'stypy_return_type' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 12), 'stypy_return_type', _create_tmp_config_dir_call_result_189302)
        # SSA join for if statement (line 555)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'configdir' (line 557)
        configdir_189303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 15), 'configdir')
        # Assigning a type to the variable 'stypy_return_type' (line 557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 8), 'stypy_return_type', configdir_189303)

        if more_types_in_union_189275:
            # SSA join for if statement (line 550)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Name (line 559):
    
    # Assigning a Name to a Name (line 559):
    # Getting the type of 'None' (line 559)
    None_189304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 8), 'None')
    # Assigning a type to the variable 'p' (line 559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 559, 4), 'p', None_189304)
    
    # Assigning a Call to a Name (line 560):
    
    # Assigning a Call to a Name (line 560):
    
    # Call to get_home(...): (line 560)
    # Processing the call keyword arguments (line 560)
    kwargs_189306 = {}
    # Getting the type of 'get_home' (line 560)
    get_home_189305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'get_home', False)
    # Calling get_home(args, kwargs) (line 560)
    get_home_call_result_189307 = invoke(stypy.reporting.localization.Localization(__file__, 560, 8), get_home_189305, *[], **kwargs_189306)
    
    # Assigning a type to the variable 'h' (line 560)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 4), 'h', get_home_call_result_189307)
    
    # Type idiom detected: calculating its left and rigth part (line 561)
    # Getting the type of 'h' (line 561)
    h_189308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 4), 'h')
    # Getting the type of 'None' (line 561)
    None_189309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 16), 'None')
    
    (may_be_189310, more_types_in_union_189311) = may_not_be_none(h_189308, None_189309)

    if may_be_189310:

        if more_types_in_union_189311:
            # Runtime conditional SSA (line 561)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 562):
        
        # Assigning a Call to a Name (line 562):
        
        # Call to join(...): (line 562)
        # Processing the call arguments (line 562)
        # Getting the type of 'h' (line 562)
        h_189315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 25), 'h', False)
        unicode_189316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 28), 'unicode', u'.matplotlib')
        # Processing the call keyword arguments (line 562)
        kwargs_189317 = {}
        # Getting the type of 'os' (line 562)
        os_189312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 12), 'os', False)
        # Obtaining the member 'path' of a type (line 562)
        path_189313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 12), os_189312, 'path')
        # Obtaining the member 'join' of a type (line 562)
        join_189314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 12), path_189313, 'join')
        # Calling join(args, kwargs) (line 562)
        join_call_result_189318 = invoke(stypy.reporting.localization.Localization(__file__, 562, 12), join_189314, *[h_189315, unicode_189316], **kwargs_189317)
        
        # Assigning a type to the variable 'p' (line 562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 562, 8), 'p', join_call_result_189318)

        if more_types_in_union_189311:
            # SSA join for if statement (line 561)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Call to startswith(...): (line 563)
    # Processing the call arguments (line 563)
    
    # Obtaining an instance of the builtin type 'tuple' (line 563)
    tuple_189322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 563, 32), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 563)
    # Adding element type (line 563)
    unicode_189323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 563, 32), 'unicode', u'linux')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 563, 32), tuple_189322, unicode_189323)
    # Adding element type (line 563)
    unicode_189324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 563, 41), 'unicode', u'freebsd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 563, 32), tuple_189322, unicode_189324)
    
    # Processing the call keyword arguments (line 563)
    kwargs_189325 = {}
    # Getting the type of 'sys' (line 563)
    sys_189319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 7), 'sys', False)
    # Obtaining the member 'platform' of a type (line 563)
    platform_189320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 7), sys_189319, 'platform')
    # Obtaining the member 'startswith' of a type (line 563)
    startswith_189321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 7), platform_189320, 'startswith')
    # Calling startswith(args, kwargs) (line 563)
    startswith_call_result_189326 = invoke(stypy.reporting.localization.Localization(__file__, 563, 7), startswith_189321, *[tuple_189322], **kwargs_189325)
    
    # Testing the type of an if condition (line 563)
    if_condition_189327 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 563, 4), startswith_call_result_189326)
    # Assigning a type to the variable 'if_condition_189327' (line 563)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 563, 4), 'if_condition_189327', if_condition_189327)
    # SSA begins for if statement (line 563)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 564):
    
    # Assigning a Name to a Name (line 564):
    # Getting the type of 'None' (line 564)
    None_189328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 12), 'None')
    # Assigning a type to the variable 'p' (line 564)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 8), 'p', None_189328)
    
    # Type idiom detected: calculating its left and rigth part (line 565)
    # Getting the type of 'xdg_base' (line 565)
    xdg_base_189329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'xdg_base')
    # Getting the type of 'None' (line 565)
    None_189330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 27), 'None')
    
    (may_be_189331, more_types_in_union_189332) = may_not_be_none(xdg_base_189329, None_189330)

    if may_be_189331:

        if more_types_in_union_189332:
            # Runtime conditional SSA (line 565)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 566):
        
        # Assigning a Call to a Name (line 566):
        
        # Call to join(...): (line 566)
        # Processing the call arguments (line 566)
        # Getting the type of 'xdg_base' (line 566)
        xdg_base_189336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 29), 'xdg_base', False)
        unicode_189337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 566, 39), 'unicode', u'matplotlib')
        # Processing the call keyword arguments (line 566)
        kwargs_189338 = {}
        # Getting the type of 'os' (line 566)
        os_189333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 16), 'os', False)
        # Obtaining the member 'path' of a type (line 566)
        path_189334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 16), os_189333, 'path')
        # Obtaining the member 'join' of a type (line 566)
        join_189335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 16), path_189334, 'join')
        # Calling join(args, kwargs) (line 566)
        join_call_result_189339 = invoke(stypy.reporting.localization.Localization(__file__, 566, 16), join_189335, *[xdg_base_189336, unicode_189337], **kwargs_189338)
        
        # Assigning a type to the variable 'p' (line 566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 12), 'p', join_call_result_189339)

        if more_types_in_union_189332:
            # SSA join for if statement (line 565)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 563)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 568)
    # Getting the type of 'p' (line 568)
    p_189340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 4), 'p')
    # Getting the type of 'None' (line 568)
    None_189341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 16), 'None')
    
    (may_be_189342, more_types_in_union_189343) = may_not_be_none(p_189340, None_189341)

    if may_be_189342:

        if more_types_in_union_189343:
            # Runtime conditional SSA (line 568)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Call to exists(...): (line 569)
        # Processing the call arguments (line 569)
        # Getting the type of 'p' (line 569)
        p_189347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 26), 'p', False)
        # Processing the call keyword arguments (line 569)
        kwargs_189348 = {}
        # Getting the type of 'os' (line 569)
        os_189344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 11), 'os', False)
        # Obtaining the member 'path' of a type (line 569)
        path_189345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 11), os_189344, 'path')
        # Obtaining the member 'exists' of a type (line 569)
        exists_189346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 11), path_189345, 'exists')
        # Calling exists(args, kwargs) (line 569)
        exists_call_result_189349 = invoke(stypy.reporting.localization.Localization(__file__, 569, 11), exists_189346, *[p_189347], **kwargs_189348)
        
        # Testing the type of an if condition (line 569)
        if_condition_189350 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 569, 8), exists_call_result_189349)
        # Assigning a type to the variable 'if_condition_189350' (line 569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 569, 8), 'if_condition_189350', if_condition_189350)
        # SSA begins for if statement (line 569)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to _is_writable_dir(...): (line 570)
        # Processing the call arguments (line 570)
        # Getting the type of 'p' (line 570)
        p_189352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 32), 'p', False)
        # Processing the call keyword arguments (line 570)
        kwargs_189353 = {}
        # Getting the type of '_is_writable_dir' (line 570)
        _is_writable_dir_189351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 15), '_is_writable_dir', False)
        # Calling _is_writable_dir(args, kwargs) (line 570)
        _is_writable_dir_call_result_189354 = invoke(stypy.reporting.localization.Localization(__file__, 570, 15), _is_writable_dir_189351, *[p_189352], **kwargs_189353)
        
        # Testing the type of an if condition (line 570)
        if_condition_189355 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 570, 12), _is_writable_dir_call_result_189354)
        # Assigning a type to the variable 'if_condition_189355' (line 570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 570, 12), 'if_condition_189355', if_condition_189355)
        # SSA begins for if statement (line 570)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'p' (line 571)
        p_189356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 23), 'p')
        # Assigning a type to the variable 'stypy_return_type' (line 571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 16), 'stypy_return_type', p_189356)
        # SSA join for if statement (line 570)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 569)
        module_type_store.open_ssa_branch('else')
        
        
        # SSA begins for try-except statement (line 573)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to mkdirs(...): (line 574)
        # Processing the call arguments (line 574)
        # Getting the type of 'p' (line 574)
        p_189358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 23), 'p', False)
        # Processing the call keyword arguments (line 574)
        kwargs_189359 = {}
        # Getting the type of 'mkdirs' (line 574)
        mkdirs_189357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 16), 'mkdirs', False)
        # Calling mkdirs(args, kwargs) (line 574)
        mkdirs_call_result_189360 = invoke(stypy.reporting.localization.Localization(__file__, 574, 16), mkdirs_189357, *[p_189358], **kwargs_189359)
        
        # SSA branch for the except part of a try statement (line 573)
        # SSA branch for the except 'OSError' branch of a try statement (line 573)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the else branch of a try statement (line 573)
        module_type_store.open_ssa_branch('except else')
        # Getting the type of 'p' (line 578)
        p_189361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 23), 'p')
        # Assigning a type to the variable 'stypy_return_type' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 16), 'stypy_return_type', p_189361)
        # SSA join for try-except statement (line 573)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 569)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_189343:
            # SSA join for if statement (line 568)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to _create_tmp_config_dir(...): (line 580)
    # Processing the call keyword arguments (line 580)
    kwargs_189363 = {}
    # Getting the type of '_create_tmp_config_dir' (line 580)
    _create_tmp_config_dir_189362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 11), '_create_tmp_config_dir', False)
    # Calling _create_tmp_config_dir(args, kwargs) (line 580)
    _create_tmp_config_dir_call_result_189364 = invoke(stypy.reporting.localization.Localization(__file__, 580, 11), _create_tmp_config_dir_189362, *[], **kwargs_189363)
    
    # Assigning a type to the variable 'stypy_return_type' (line 580)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 580, 4), 'stypy_return_type', _create_tmp_config_dir_call_result_189364)
    
    # ################# End of '_get_config_or_cache_dir(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_config_or_cache_dir' in the type store
    # Getting the type of 'stypy_return_type' (line 546)
    stypy_return_type_189365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189365)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_config_or_cache_dir'
    return stypy_return_type_189365

# Assigning a type to the variable '_get_config_or_cache_dir' (line 546)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 0), '_get_config_or_cache_dir', _get_config_or_cache_dir)

@norecursion
def _get_configdir(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_configdir'
    module_type_store = module_type_store.open_function_context('_get_configdir', 583, 0, False)
    
    # Passed parameters checking function
    _get_configdir.stypy_localization = localization
    _get_configdir.stypy_type_of_self = None
    _get_configdir.stypy_type_store = module_type_store
    _get_configdir.stypy_function_name = '_get_configdir'
    _get_configdir.stypy_param_names_list = []
    _get_configdir.stypy_varargs_param_name = None
    _get_configdir.stypy_kwargs_param_name = None
    _get_configdir.stypy_call_defaults = defaults
    _get_configdir.stypy_call_varargs = varargs
    _get_configdir.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_configdir', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_configdir', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_configdir(...)' code ##################

    unicode_189366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, (-1)), 'unicode', u'\n    Return the string representing the configuration directory.\n\n    The directory is chosen as follows:\n\n    1. If the MPLCONFIGDIR environment variable is supplied, choose that.\n\n    2a. On Linux, follow the XDG specification and look first in\n        `$XDG_CONFIG_HOME`, if defined, or `$HOME/.config`.\n\n    2b. On other platforms, choose `$HOME/.matplotlib`.\n\n    3. If the chosen directory exists and is writable, use that as the\n       configuration directory.\n    4. If possible, create a temporary directory, and use it as the\n       configuration directory.\n    5. A writable directory could not be found or created; return None.\n    ')
    
    # Call to _get_config_or_cache_dir(...): (line 602)
    # Processing the call arguments (line 602)
    
    # Call to _get_xdg_config_dir(...): (line 602)
    # Processing the call keyword arguments (line 602)
    kwargs_189369 = {}
    # Getting the type of '_get_xdg_config_dir' (line 602)
    _get_xdg_config_dir_189368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 36), '_get_xdg_config_dir', False)
    # Calling _get_xdg_config_dir(args, kwargs) (line 602)
    _get_xdg_config_dir_call_result_189370 = invoke(stypy.reporting.localization.Localization(__file__, 602, 36), _get_xdg_config_dir_189368, *[], **kwargs_189369)
    
    # Processing the call keyword arguments (line 602)
    kwargs_189371 = {}
    # Getting the type of '_get_config_or_cache_dir' (line 602)
    _get_config_or_cache_dir_189367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 11), '_get_config_or_cache_dir', False)
    # Calling _get_config_or_cache_dir(args, kwargs) (line 602)
    _get_config_or_cache_dir_call_result_189372 = invoke(stypy.reporting.localization.Localization(__file__, 602, 11), _get_config_or_cache_dir_189367, *[_get_xdg_config_dir_call_result_189370], **kwargs_189371)
    
    # Assigning a type to the variable 'stypy_return_type' (line 602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 4), 'stypy_return_type', _get_config_or_cache_dir_call_result_189372)
    
    # ################# End of '_get_configdir(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_configdir' in the type store
    # Getting the type of 'stypy_return_type' (line 583)
    stypy_return_type_189373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189373)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_configdir'
    return stypy_return_type_189373

# Assigning a type to the variable '_get_configdir' (line 583)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 583, 0), '_get_configdir', _get_configdir)

# Assigning a Call to a Name (line 604):

# Assigning a Call to a Name (line 604):

# Call to wrap(...): (line 604)
# Processing the call arguments (line 604)
unicode_189376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 604, 29), 'unicode', u'CONFIGDIR=%s')
# Getting the type of '_get_configdir' (line 604)
_get_configdir_189377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 45), '_get_configdir', False)
# Processing the call keyword arguments (line 604)
# Getting the type of 'False' (line 604)
False_189378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 68), 'False', False)
keyword_189379 = False_189378
kwargs_189380 = {'always': keyword_189379}
# Getting the type of 'verbose' (line 604)
verbose_189374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 16), 'verbose', False)
# Obtaining the member 'wrap' of a type (line 604)
wrap_189375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 16), verbose_189374, 'wrap')
# Calling wrap(args, kwargs) (line 604)
wrap_call_result_189381 = invoke(stypy.reporting.localization.Localization(__file__, 604, 16), wrap_189375, *[unicode_189376, _get_configdir_189377], **kwargs_189380)

# Assigning a type to the variable 'get_configdir' (line 604)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 604, 0), 'get_configdir', wrap_call_result_189381)

@norecursion
def _get_cachedir(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_cachedir'
    module_type_store = module_type_store.open_function_context('_get_cachedir', 607, 0, False)
    
    # Passed parameters checking function
    _get_cachedir.stypy_localization = localization
    _get_cachedir.stypy_type_of_self = None
    _get_cachedir.stypy_type_store = module_type_store
    _get_cachedir.stypy_function_name = '_get_cachedir'
    _get_cachedir.stypy_param_names_list = []
    _get_cachedir.stypy_varargs_param_name = None
    _get_cachedir.stypy_kwargs_param_name = None
    _get_cachedir.stypy_call_defaults = defaults
    _get_cachedir.stypy_call_varargs = varargs
    _get_cachedir.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_cachedir', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_cachedir', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_cachedir(...)' code ##################

    unicode_189382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, (-1)), 'unicode', u'\n    Return the location of the cache directory.\n\n    The procedure used to find the directory is the same as for\n    _get_config_dir, except using `$XDG_CACHE_HOME`/`~/.cache` instead.\n    ')
    
    # Call to _get_config_or_cache_dir(...): (line 614)
    # Processing the call arguments (line 614)
    
    # Call to _get_xdg_cache_dir(...): (line 614)
    # Processing the call keyword arguments (line 614)
    kwargs_189385 = {}
    # Getting the type of '_get_xdg_cache_dir' (line 614)
    _get_xdg_cache_dir_189384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 36), '_get_xdg_cache_dir', False)
    # Calling _get_xdg_cache_dir(args, kwargs) (line 614)
    _get_xdg_cache_dir_call_result_189386 = invoke(stypy.reporting.localization.Localization(__file__, 614, 36), _get_xdg_cache_dir_189384, *[], **kwargs_189385)
    
    # Processing the call keyword arguments (line 614)
    kwargs_189387 = {}
    # Getting the type of '_get_config_or_cache_dir' (line 614)
    _get_config_or_cache_dir_189383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 11), '_get_config_or_cache_dir', False)
    # Calling _get_config_or_cache_dir(args, kwargs) (line 614)
    _get_config_or_cache_dir_call_result_189388 = invoke(stypy.reporting.localization.Localization(__file__, 614, 11), _get_config_or_cache_dir_189383, *[_get_xdg_cache_dir_call_result_189386], **kwargs_189387)
    
    # Assigning a type to the variable 'stypy_return_type' (line 614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 614, 4), 'stypy_return_type', _get_config_or_cache_dir_call_result_189388)
    
    # ################# End of '_get_cachedir(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_cachedir' in the type store
    # Getting the type of 'stypy_return_type' (line 607)
    stypy_return_type_189389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189389)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_cachedir'
    return stypy_return_type_189389

# Assigning a type to the variable '_get_cachedir' (line 607)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 0), '_get_cachedir', _get_cachedir)

# Assigning a Call to a Name (line 616):

# Assigning a Call to a Name (line 616):

# Call to wrap(...): (line 616)
# Processing the call arguments (line 616)
unicode_189392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 28), 'unicode', u'CACHEDIR=%s')
# Getting the type of '_get_cachedir' (line 616)
_get_cachedir_189393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 43), '_get_cachedir', False)
# Processing the call keyword arguments (line 616)
# Getting the type of 'False' (line 616)
False_189394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 65), 'False', False)
keyword_189395 = False_189394
kwargs_189396 = {'always': keyword_189395}
# Getting the type of 'verbose' (line 616)
verbose_189390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 15), 'verbose', False)
# Obtaining the member 'wrap' of a type (line 616)
wrap_189391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 15), verbose_189390, 'wrap')
# Calling wrap(args, kwargs) (line 616)
wrap_call_result_189397 = invoke(stypy.reporting.localization.Localization(__file__, 616, 15), wrap_189391, *[unicode_189392, _get_cachedir_189393], **kwargs_189396)

# Assigning a type to the variable 'get_cachedir' (line 616)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 0), 'get_cachedir', wrap_call_result_189397)

@norecursion
def _decode_filesystem_path(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_decode_filesystem_path'
    module_type_store = module_type_store.open_function_context('_decode_filesystem_path', 619, 0, False)
    
    # Passed parameters checking function
    _decode_filesystem_path.stypy_localization = localization
    _decode_filesystem_path.stypy_type_of_self = None
    _decode_filesystem_path.stypy_type_store = module_type_store
    _decode_filesystem_path.stypy_function_name = '_decode_filesystem_path'
    _decode_filesystem_path.stypy_param_names_list = ['path']
    _decode_filesystem_path.stypy_varargs_param_name = None
    _decode_filesystem_path.stypy_kwargs_param_name = None
    _decode_filesystem_path.stypy_call_defaults = defaults
    _decode_filesystem_path.stypy_call_varargs = varargs
    _decode_filesystem_path.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_decode_filesystem_path', ['path'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_decode_filesystem_path', localization, ['path'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_decode_filesystem_path(...)' code ##################

    
    # Type idiom detected: calculating its left and rigth part (line 620)
    # Getting the type of 'bytes' (line 620)
    bytes_189398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 24), 'bytes')
    # Getting the type of 'path' (line 620)
    path_189399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 18), 'path')
    
    (may_be_189400, more_types_in_union_189401) = may_be_subtype(bytes_189398, path_189399)

    if may_be_189400:

        if more_types_in_union_189401:
            # Runtime conditional SSA (line 620)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'path' (line 620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 4), 'path', remove_not_subtype_from_union(path_189399, bytes))
        
        # Call to decode(...): (line 621)
        # Processing the call arguments (line 621)
        
        # Call to getfilesystemencoding(...): (line 621)
        # Processing the call keyword arguments (line 621)
        kwargs_189406 = {}
        # Getting the type of 'sys' (line 621)
        sys_189404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 27), 'sys', False)
        # Obtaining the member 'getfilesystemencoding' of a type (line 621)
        getfilesystemencoding_189405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 27), sys_189404, 'getfilesystemencoding')
        # Calling getfilesystemencoding(args, kwargs) (line 621)
        getfilesystemencoding_call_result_189407 = invoke(stypy.reporting.localization.Localization(__file__, 621, 27), getfilesystemencoding_189405, *[], **kwargs_189406)
        
        # Processing the call keyword arguments (line 621)
        kwargs_189408 = {}
        # Getting the type of 'path' (line 621)
        path_189402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 15), 'path', False)
        # Obtaining the member 'decode' of a type (line 621)
        decode_189403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 15), path_189402, 'decode')
        # Calling decode(args, kwargs) (line 621)
        decode_call_result_189409 = invoke(stypy.reporting.localization.Localization(__file__, 621, 15), decode_189403, *[getfilesystemencoding_call_result_189407], **kwargs_189408)
        
        # Assigning a type to the variable 'stypy_return_type' (line 621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 8), 'stypy_return_type', decode_call_result_189409)

        if more_types_in_union_189401:
            # Runtime conditional SSA for else branch (line 620)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_189400) or more_types_in_union_189401):
        # Assigning a type to the variable 'path' (line 620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 4), 'path', remove_subtype_from_union(path_189399, bytes))
        # Getting the type of 'path' (line 623)
        path_189410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 15), 'path')
        # Assigning a type to the variable 'stypy_return_type' (line 623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 8), 'stypy_return_type', path_189410)

        if (may_be_189400 and more_types_in_union_189401):
            # SSA join for if statement (line 620)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of '_decode_filesystem_path(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_decode_filesystem_path' in the type store
    # Getting the type of 'stypy_return_type' (line 619)
    stypy_return_type_189411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189411)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_decode_filesystem_path'
    return stypy_return_type_189411

# Assigning a type to the variable '_decode_filesystem_path' (line 619)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 0), '_decode_filesystem_path', _decode_filesystem_path)

@norecursion
def _get_data_path(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_data_path'
    module_type_store = module_type_store.open_function_context('_get_data_path', 626, 0, False)
    
    # Passed parameters checking function
    _get_data_path.stypy_localization = localization
    _get_data_path.stypy_type_of_self = None
    _get_data_path.stypy_type_store = module_type_store
    _get_data_path.stypy_function_name = '_get_data_path'
    _get_data_path.stypy_param_names_list = []
    _get_data_path.stypy_varargs_param_name = None
    _get_data_path.stypy_kwargs_param_name = None
    _get_data_path.stypy_call_defaults = defaults
    _get_data_path.stypy_call_varargs = varargs
    _get_data_path.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_data_path', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_data_path', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_data_path(...)' code ##################

    unicode_189412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 4), 'unicode', u'get the path to matplotlib data')
    
    
    unicode_189413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 7), 'unicode', u'MATPLOTLIBDATA')
    # Getting the type of 'os' (line 629)
    os_189414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 27), 'os')
    # Obtaining the member 'environ' of a type (line 629)
    environ_189415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 27), os_189414, 'environ')
    # Applying the binary operator 'in' (line 629)
    result_contains_189416 = python_operator(stypy.reporting.localization.Localization(__file__, 629, 7), 'in', unicode_189413, environ_189415)
    
    # Testing the type of an if condition (line 629)
    if_condition_189417 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 629, 4), result_contains_189416)
    # Assigning a type to the variable 'if_condition_189417' (line 629)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 4), 'if_condition_189417', if_condition_189417)
    # SSA begins for if statement (line 629)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 630):
    
    # Assigning a Subscript to a Name (line 630):
    
    # Obtaining the type of the subscript
    unicode_189418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 26), 'unicode', u'MATPLOTLIBDATA')
    # Getting the type of 'os' (line 630)
    os_189419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 15), 'os')
    # Obtaining the member 'environ' of a type (line 630)
    environ_189420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 15), os_189419, 'environ')
    # Obtaining the member '__getitem__' of a type (line 630)
    getitem___189421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 15), environ_189420, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 630)
    subscript_call_result_189422 = invoke(stypy.reporting.localization.Localization(__file__, 630, 15), getitem___189421, unicode_189418)
    
    # Assigning a type to the variable 'path' (line 630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 8), 'path', subscript_call_result_189422)
    
    
    
    # Call to isdir(...): (line 631)
    # Processing the call arguments (line 631)
    # Getting the type of 'path' (line 631)
    path_189426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 29), 'path', False)
    # Processing the call keyword arguments (line 631)
    kwargs_189427 = {}
    # Getting the type of 'os' (line 631)
    os_189423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 15), 'os', False)
    # Obtaining the member 'path' of a type (line 631)
    path_189424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 631, 15), os_189423, 'path')
    # Obtaining the member 'isdir' of a type (line 631)
    isdir_189425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 631, 15), path_189424, 'isdir')
    # Calling isdir(args, kwargs) (line 631)
    isdir_call_result_189428 = invoke(stypy.reporting.localization.Localization(__file__, 631, 15), isdir_189425, *[path_189426], **kwargs_189427)
    
    # Applying the 'not' unary operator (line 631)
    result_not__189429 = python_operator(stypy.reporting.localization.Localization(__file__, 631, 11), 'not', isdir_call_result_189428)
    
    # Testing the type of an if condition (line 631)
    if_condition_189430 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 631, 8), result_not__189429)
    # Assigning a type to the variable 'if_condition_189430' (line 631)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 631, 8), 'if_condition_189430', if_condition_189430)
    # SSA begins for if statement (line 631)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to RuntimeError(...): (line 632)
    # Processing the call arguments (line 632)
    unicode_189432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 632, 31), 'unicode', u'Path in environment MATPLOTLIBDATA not a directory')
    # Processing the call keyword arguments (line 632)
    kwargs_189433 = {}
    # Getting the type of 'RuntimeError' (line 632)
    RuntimeError_189431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 18), 'RuntimeError', False)
    # Calling RuntimeError(args, kwargs) (line 632)
    RuntimeError_call_result_189434 = invoke(stypy.reporting.localization.Localization(__file__, 632, 18), RuntimeError_189431, *[unicode_189432], **kwargs_189433)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 632, 12), RuntimeError_call_result_189434, 'raise parameter', BaseException)
    # SSA join for if statement (line 631)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'path' (line 634)
    path_189435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 15), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 634)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 8), 'stypy_return_type', path_189435)
    # SSA join for if statement (line 629)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 636):
    
    # Assigning a Call to a Name (line 636):
    
    # Call to _decode_filesystem_path(...): (line 636)
    # Processing the call arguments (line 636)
    # Getting the type of '__file__' (line 636)
    file___189437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 36), '__file__', False)
    # Processing the call keyword arguments (line 636)
    kwargs_189438 = {}
    # Getting the type of '_decode_filesystem_path' (line 636)
    _decode_filesystem_path_189436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 12), '_decode_filesystem_path', False)
    # Calling _decode_filesystem_path(args, kwargs) (line 636)
    _decode_filesystem_path_call_result_189439 = invoke(stypy.reporting.localization.Localization(__file__, 636, 12), _decode_filesystem_path_189436, *[file___189437], **kwargs_189438)
    
    # Assigning a type to the variable '_file' (line 636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 636, 4), '_file', _decode_filesystem_path_call_result_189439)
    
    # Assigning a Call to a Name (line 637):
    
    # Assigning a Call to a Name (line 637):
    
    # Call to join(...): (line 637)
    # Processing the call arguments (line 637)
    
    # Obtaining an instance of the builtin type 'list' (line 637)
    list_189443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 637)
    # Adding element type (line 637)
    
    # Call to dirname(...): (line 637)
    # Processing the call arguments (line 637)
    # Getting the type of '_file' (line 637)
    _file_189447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 40), '_file', False)
    # Processing the call keyword arguments (line 637)
    kwargs_189448 = {}
    # Getting the type of 'os' (line 637)
    os_189444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 24), 'os', False)
    # Obtaining the member 'path' of a type (line 637)
    path_189445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 24), os_189444, 'path')
    # Obtaining the member 'dirname' of a type (line 637)
    dirname_189446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 24), path_189445, 'dirname')
    # Calling dirname(args, kwargs) (line 637)
    dirname_call_result_189449 = invoke(stypy.reporting.localization.Localization(__file__, 637, 24), dirname_189446, *[_file_189447], **kwargs_189448)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 637, 23), list_189443, dirname_call_result_189449)
    # Adding element type (line 637)
    unicode_189450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 48), 'unicode', u'mpl-data')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 637, 23), list_189443, unicode_189450)
    
    # Processing the call keyword arguments (line 637)
    kwargs_189451 = {}
    # Getting the type of 'os' (line 637)
    os_189440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 11), 'os', False)
    # Obtaining the member 'sep' of a type (line 637)
    sep_189441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 11), os_189440, 'sep')
    # Obtaining the member 'join' of a type (line 637)
    join_189442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 11), sep_189441, 'join')
    # Calling join(args, kwargs) (line 637)
    join_call_result_189452 = invoke(stypy.reporting.localization.Localization(__file__, 637, 11), join_189442, *[list_189443], **kwargs_189451)
    
    # Assigning a type to the variable 'path' (line 637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 637, 4), 'path', join_call_result_189452)
    
    
    # Call to isdir(...): (line 638)
    # Processing the call arguments (line 638)
    # Getting the type of 'path' (line 638)
    path_189456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 21), 'path', False)
    # Processing the call keyword arguments (line 638)
    kwargs_189457 = {}
    # Getting the type of 'os' (line 638)
    os_189453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 7), 'os', False)
    # Obtaining the member 'path' of a type (line 638)
    path_189454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 7), os_189453, 'path')
    # Obtaining the member 'isdir' of a type (line 638)
    isdir_189455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 7), path_189454, 'isdir')
    # Calling isdir(args, kwargs) (line 638)
    isdir_call_result_189458 = invoke(stypy.reporting.localization.Localization(__file__, 638, 7), isdir_189455, *[path_189456], **kwargs_189457)
    
    # Testing the type of an if condition (line 638)
    if_condition_189459 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 638, 4), isdir_call_result_189458)
    # Assigning a type to the variable 'if_condition_189459' (line 638)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 4), 'if_condition_189459', if_condition_189459)
    # SSA begins for if statement (line 638)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'path' (line 639)
    path_189460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 15), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 639)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 8), 'stypy_return_type', path_189460)
    # SSA join for if statement (line 638)
    module_type_store = module_type_store.join_ssa_context()
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 643, 4))
    
    # 'import matplotlib.afm' statement (line 643)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_189461 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 643, 4), 'matplotlib.afm')

    if (type(import_189461) is not StypyTypeError):

        if (import_189461 != 'pyd_module'):
            __import__(import_189461)
            sys_modules_189462 = sys.modules[import_189461]
            import_module(stypy.reporting.localization.Localization(__file__, 643, 4), 'matplotlib.afm', sys_modules_189462.module_type_store, module_type_store)
        else:
            import matplotlib.afm

            import_module(stypy.reporting.localization.Localization(__file__, 643, 4), 'matplotlib.afm', matplotlib.afm, module_type_store)

    else:
        # Assigning a type to the variable 'matplotlib.afm' (line 643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 4), 'matplotlib.afm', import_189461)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    # Assigning a Call to a Name (line 644):
    
    # Assigning a Call to a Name (line 644):
    
    # Call to _decode_filesystem_path(...): (line 644)
    # Processing the call arguments (line 644)
    # Getting the type of 'matplotlib' (line 644)
    matplotlib_189464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 36), 'matplotlib', False)
    # Obtaining the member 'afm' of a type (line 644)
    afm_189465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 36), matplotlib_189464, 'afm')
    # Obtaining the member '__file__' of a type (line 644)
    file___189466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 36), afm_189465, '__file__')
    # Processing the call keyword arguments (line 644)
    kwargs_189467 = {}
    # Getting the type of '_decode_filesystem_path' (line 644)
    _decode_filesystem_path_189463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 12), '_decode_filesystem_path', False)
    # Calling _decode_filesystem_path(args, kwargs) (line 644)
    _decode_filesystem_path_call_result_189468 = invoke(stypy.reporting.localization.Localization(__file__, 644, 12), _decode_filesystem_path_189463, *[file___189466], **kwargs_189467)
    
    # Assigning a type to the variable '_file' (line 644)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 644, 4), '_file', _decode_filesystem_path_call_result_189468)
    
    # Assigning a Call to a Name (line 645):
    
    # Assigning a Call to a Name (line 645):
    
    # Call to join(...): (line 645)
    # Processing the call arguments (line 645)
    
    # Obtaining an instance of the builtin type 'list' (line 645)
    list_189472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 645, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 645)
    # Adding element type (line 645)
    
    # Call to dirname(...): (line 645)
    # Processing the call arguments (line 645)
    # Getting the type of '_file' (line 645)
    _file_189476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 40), '_file', False)
    # Processing the call keyword arguments (line 645)
    kwargs_189477 = {}
    # Getting the type of 'os' (line 645)
    os_189473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 24), 'os', False)
    # Obtaining the member 'path' of a type (line 645)
    path_189474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 645, 24), os_189473, 'path')
    # Obtaining the member 'dirname' of a type (line 645)
    dirname_189475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 645, 24), path_189474, 'dirname')
    # Calling dirname(args, kwargs) (line 645)
    dirname_call_result_189478 = invoke(stypy.reporting.localization.Localization(__file__, 645, 24), dirname_189475, *[_file_189476], **kwargs_189477)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 645, 23), list_189472, dirname_call_result_189478)
    # Adding element type (line 645)
    unicode_189479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 645, 48), 'unicode', u'mpl-data')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 645, 23), list_189472, unicode_189479)
    
    # Processing the call keyword arguments (line 645)
    kwargs_189480 = {}
    # Getting the type of 'os' (line 645)
    os_189469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 11), 'os', False)
    # Obtaining the member 'sep' of a type (line 645)
    sep_189470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 645, 11), os_189469, 'sep')
    # Obtaining the member 'join' of a type (line 645)
    join_189471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 645, 11), sep_189470, 'join')
    # Calling join(args, kwargs) (line 645)
    join_call_result_189481 = invoke(stypy.reporting.localization.Localization(__file__, 645, 11), join_189471, *[list_189472], **kwargs_189480)
    
    # Assigning a type to the variable 'path' (line 645)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 645, 4), 'path', join_call_result_189481)
    
    
    # Call to isdir(...): (line 646)
    # Processing the call arguments (line 646)
    # Getting the type of 'path' (line 646)
    path_189485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 21), 'path', False)
    # Processing the call keyword arguments (line 646)
    kwargs_189486 = {}
    # Getting the type of 'os' (line 646)
    os_189482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 7), 'os', False)
    # Obtaining the member 'path' of a type (line 646)
    path_189483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 646, 7), os_189482, 'path')
    # Obtaining the member 'isdir' of a type (line 646)
    isdir_189484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 646, 7), path_189483, 'isdir')
    # Calling isdir(args, kwargs) (line 646)
    isdir_call_result_189487 = invoke(stypy.reporting.localization.Localization(__file__, 646, 7), isdir_189484, *[path_189485], **kwargs_189486)
    
    # Testing the type of an if condition (line 646)
    if_condition_189488 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 646, 4), isdir_call_result_189487)
    # Assigning a type to the variable 'if_condition_189488' (line 646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 4), 'if_condition_189488', if_condition_189488)
    # SSA begins for if statement (line 646)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'path' (line 647)
    path_189489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 15), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 647, 8), 'stypy_return_type', path_189489)
    # SSA join for if statement (line 646)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to getattr(...): (line 650)
    # Processing the call arguments (line 650)
    # Getting the type of 'sys' (line 650)
    sys_189491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 15), 'sys', False)
    unicode_189492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 20), 'unicode', u'frozen')
    # Getting the type of 'None' (line 650)
    None_189493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 30), 'None', False)
    # Processing the call keyword arguments (line 650)
    kwargs_189494 = {}
    # Getting the type of 'getattr' (line 650)
    getattr_189490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 7), 'getattr', False)
    # Calling getattr(args, kwargs) (line 650)
    getattr_call_result_189495 = invoke(stypy.reporting.localization.Localization(__file__, 650, 7), getattr_189490, *[sys_189491, unicode_189492, None_189493], **kwargs_189494)
    
    # Testing the type of an if condition (line 650)
    if_condition_189496 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 650, 4), getattr_call_result_189495)
    # Assigning a type to the variable 'if_condition_189496' (line 650)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 4), 'if_condition_189496', if_condition_189496)
    # SSA begins for if statement (line 650)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 651):
    
    # Assigning a Call to a Name (line 651):
    
    # Call to dirname(...): (line 651)
    # Processing the call arguments (line 651)
    
    # Call to _decode_filesystem_path(...): (line 651)
    # Processing the call arguments (line 651)
    # Getting the type of 'sys' (line 651)
    sys_189501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 59), 'sys', False)
    # Obtaining the member 'executable' of a type (line 651)
    executable_189502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 651, 59), sys_189501, 'executable')
    # Processing the call keyword arguments (line 651)
    kwargs_189503 = {}
    # Getting the type of '_decode_filesystem_path' (line 651)
    _decode_filesystem_path_189500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 35), '_decode_filesystem_path', False)
    # Calling _decode_filesystem_path(args, kwargs) (line 651)
    _decode_filesystem_path_call_result_189504 = invoke(stypy.reporting.localization.Localization(__file__, 651, 35), _decode_filesystem_path_189500, *[executable_189502], **kwargs_189503)
    
    # Processing the call keyword arguments (line 651)
    kwargs_189505 = {}
    # Getting the type of 'os' (line 651)
    os_189497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 19), 'os', False)
    # Obtaining the member 'path' of a type (line 651)
    path_189498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 651, 19), os_189497, 'path')
    # Obtaining the member 'dirname' of a type (line 651)
    dirname_189499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 651, 19), path_189498, 'dirname')
    # Calling dirname(args, kwargs) (line 651)
    dirname_call_result_189506 = invoke(stypy.reporting.localization.Localization(__file__, 651, 19), dirname_189499, *[_decode_filesystem_path_call_result_189504], **kwargs_189505)
    
    # Assigning a type to the variable 'exe_path' (line 651)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 651, 8), 'exe_path', dirname_call_result_189506)
    
    # Assigning a Call to a Name (line 652):
    
    # Assigning a Call to a Name (line 652):
    
    # Call to join(...): (line 652)
    # Processing the call arguments (line 652)
    # Getting the type of 'exe_path' (line 652)
    exe_path_189510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 28), 'exe_path', False)
    unicode_189511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 652, 38), 'unicode', u'mpl-data')
    # Processing the call keyword arguments (line 652)
    kwargs_189512 = {}
    # Getting the type of 'os' (line 652)
    os_189507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 15), 'os', False)
    # Obtaining the member 'path' of a type (line 652)
    path_189508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 15), os_189507, 'path')
    # Obtaining the member 'join' of a type (line 652)
    join_189509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 15), path_189508, 'join')
    # Calling join(args, kwargs) (line 652)
    join_call_result_189513 = invoke(stypy.reporting.localization.Localization(__file__, 652, 15), join_189509, *[exe_path_189510, unicode_189511], **kwargs_189512)
    
    # Assigning a type to the variable 'path' (line 652)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 8), 'path', join_call_result_189513)
    
    
    # Call to isdir(...): (line 653)
    # Processing the call arguments (line 653)
    # Getting the type of 'path' (line 653)
    path_189517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 25), 'path', False)
    # Processing the call keyword arguments (line 653)
    kwargs_189518 = {}
    # Getting the type of 'os' (line 653)
    os_189514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 653)
    path_189515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 653, 11), os_189514, 'path')
    # Obtaining the member 'isdir' of a type (line 653)
    isdir_189516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 653, 11), path_189515, 'isdir')
    # Calling isdir(args, kwargs) (line 653)
    isdir_call_result_189519 = invoke(stypy.reporting.localization.Localization(__file__, 653, 11), isdir_189516, *[path_189517], **kwargs_189518)
    
    # Testing the type of an if condition (line 653)
    if_condition_189520 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 653, 8), isdir_call_result_189519)
    # Assigning a type to the variable 'if_condition_189520' (line 653)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 653, 8), 'if_condition_189520', if_condition_189520)
    # SSA begins for if statement (line 653)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'path' (line 654)
    path_189521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 19), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 654)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 12), 'stypy_return_type', path_189521)
    # SSA join for if statement (line 653)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 657):
    
    # Assigning a Call to a Name (line 657):
    
    # Call to join(...): (line 657)
    # Processing the call arguments (line 657)
    
    # Obtaining the type of the subscript
    int_189525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 657, 52), 'int')
    
    # Call to split(...): (line 657)
    # Processing the call arguments (line 657)
    # Getting the type of 'exe_path' (line 657)
    exe_path_189529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 42), 'exe_path', False)
    # Processing the call keyword arguments (line 657)
    kwargs_189530 = {}
    # Getting the type of 'os' (line 657)
    os_189526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 28), 'os', False)
    # Obtaining the member 'path' of a type (line 657)
    path_189527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 657, 28), os_189526, 'path')
    # Obtaining the member 'split' of a type (line 657)
    split_189528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 657, 28), path_189527, 'split')
    # Calling split(args, kwargs) (line 657)
    split_call_result_189531 = invoke(stypy.reporting.localization.Localization(__file__, 657, 28), split_189528, *[exe_path_189529], **kwargs_189530)
    
    # Obtaining the member '__getitem__' of a type (line 657)
    getitem___189532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 657, 28), split_call_result_189531, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 657)
    subscript_call_result_189533 = invoke(stypy.reporting.localization.Localization(__file__, 657, 28), getitem___189532, int_189525)
    
    unicode_189534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 657, 56), 'unicode', u'mpl-data')
    # Processing the call keyword arguments (line 657)
    kwargs_189535 = {}
    # Getting the type of 'os' (line 657)
    os_189522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 15), 'os', False)
    # Obtaining the member 'path' of a type (line 657)
    path_189523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 657, 15), os_189522, 'path')
    # Obtaining the member 'join' of a type (line 657)
    join_189524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 657, 15), path_189523, 'join')
    # Calling join(args, kwargs) (line 657)
    join_call_result_189536 = invoke(stypy.reporting.localization.Localization(__file__, 657, 15), join_189524, *[subscript_call_result_189533, unicode_189534], **kwargs_189535)
    
    # Assigning a type to the variable 'path' (line 657)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 657, 8), 'path', join_call_result_189536)
    
    
    # Call to isdir(...): (line 658)
    # Processing the call arguments (line 658)
    # Getting the type of 'path' (line 658)
    path_189540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 25), 'path', False)
    # Processing the call keyword arguments (line 658)
    kwargs_189541 = {}
    # Getting the type of 'os' (line 658)
    os_189537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 658)
    path_189538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 11), os_189537, 'path')
    # Obtaining the member 'isdir' of a type (line 658)
    isdir_189539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 11), path_189538, 'isdir')
    # Calling isdir(args, kwargs) (line 658)
    isdir_call_result_189542 = invoke(stypy.reporting.localization.Localization(__file__, 658, 11), isdir_189539, *[path_189540], **kwargs_189541)
    
    # Testing the type of an if condition (line 658)
    if_condition_189543 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 658, 8), isdir_call_result_189542)
    # Assigning a type to the variable 'if_condition_189543' (line 658)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 658, 8), 'if_condition_189543', if_condition_189543)
    # SSA begins for if statement (line 658)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'path' (line 659)
    path_189544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 19), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 659)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 659, 12), 'stypy_return_type', path_189544)
    # SSA join for if statement (line 658)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 662):
    
    # Assigning a Call to a Name (line 662):
    
    # Call to join(...): (line 662)
    # Processing the call arguments (line 662)
    
    # Obtaining the type of the subscript
    int_189548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 662, 37), 'int')
    # Getting the type of 'sys' (line 662)
    sys_189549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 28), 'sys', False)
    # Obtaining the member 'path' of a type (line 662)
    path_189550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 28), sys_189549, 'path')
    # Obtaining the member '__getitem__' of a type (line 662)
    getitem___189551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 28), path_189550, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 662)
    subscript_call_result_189552 = invoke(stypy.reporting.localization.Localization(__file__, 662, 28), getitem___189551, int_189548)
    
    unicode_189553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 662, 41), 'unicode', u'mpl-data')
    # Processing the call keyword arguments (line 662)
    kwargs_189554 = {}
    # Getting the type of 'os' (line 662)
    os_189545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 15), 'os', False)
    # Obtaining the member 'path' of a type (line 662)
    path_189546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 15), os_189545, 'path')
    # Obtaining the member 'join' of a type (line 662)
    join_189547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 15), path_189546, 'join')
    # Calling join(args, kwargs) (line 662)
    join_call_result_189555 = invoke(stypy.reporting.localization.Localization(__file__, 662, 15), join_189547, *[subscript_call_result_189552, unicode_189553], **kwargs_189554)
    
    # Assigning a type to the variable 'path' (line 662)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 662, 8), 'path', join_call_result_189555)
    
    
    # Call to isdir(...): (line 663)
    # Processing the call arguments (line 663)
    # Getting the type of 'path' (line 663)
    path_189559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 25), 'path', False)
    # Processing the call keyword arguments (line 663)
    kwargs_189560 = {}
    # Getting the type of 'os' (line 663)
    os_189556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 663)
    path_189557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 663, 11), os_189556, 'path')
    # Obtaining the member 'isdir' of a type (line 663)
    isdir_189558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 663, 11), path_189557, 'isdir')
    # Calling isdir(args, kwargs) (line 663)
    isdir_call_result_189561 = invoke(stypy.reporting.localization.Localization(__file__, 663, 11), isdir_189558, *[path_189559], **kwargs_189560)
    
    # Testing the type of an if condition (line 663)
    if_condition_189562 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 663, 8), isdir_call_result_189561)
    # Assigning a type to the variable 'if_condition_189562' (line 663)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 663, 8), 'if_condition_189562', if_condition_189562)
    # SSA begins for if statement (line 663)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'path' (line 664)
    path_189563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 19), 'path')
    # Assigning a type to the variable 'stypy_return_type' (line 664)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 664, 12), 'stypy_return_type', path_189563)
    # SSA join for if statement (line 663)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 650)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to RuntimeError(...): (line 666)
    # Processing the call arguments (line 666)
    unicode_189565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 23), 'unicode', u'Could not find the matplotlib data files')
    # Processing the call keyword arguments (line 666)
    kwargs_189566 = {}
    # Getting the type of 'RuntimeError' (line 666)
    RuntimeError_189564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 10), 'RuntimeError', False)
    # Calling RuntimeError(args, kwargs) (line 666)
    RuntimeError_call_result_189567 = invoke(stypy.reporting.localization.Localization(__file__, 666, 10), RuntimeError_189564, *[unicode_189565], **kwargs_189566)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 666, 4), RuntimeError_call_result_189567, 'raise parameter', BaseException)
    
    # ################# End of '_get_data_path(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_data_path' in the type store
    # Getting the type of 'stypy_return_type' (line 626)
    stypy_return_type_189568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189568)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_data_path'
    return stypy_return_type_189568

# Assigning a type to the variable '_get_data_path' (line 626)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 0), '_get_data_path', _get_data_path)

@norecursion
def _get_data_path_cached(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_data_path_cached'
    module_type_store = module_type_store.open_function_context('_get_data_path_cached', 669, 0, False)
    
    # Passed parameters checking function
    _get_data_path_cached.stypy_localization = localization
    _get_data_path_cached.stypy_type_of_self = None
    _get_data_path_cached.stypy_type_store = module_type_store
    _get_data_path_cached.stypy_function_name = '_get_data_path_cached'
    _get_data_path_cached.stypy_param_names_list = []
    _get_data_path_cached.stypy_varargs_param_name = None
    _get_data_path_cached.stypy_kwargs_param_name = None
    _get_data_path_cached.stypy_call_defaults = defaults
    _get_data_path_cached.stypy_call_varargs = varargs
    _get_data_path_cached.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_data_path_cached', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_data_path_cached', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_data_path_cached(...)' code ##################

    
    # Type idiom detected: calculating its left and rigth part (line 670)
    
    # Obtaining the type of the subscript
    int_189569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 670, 33), 'int')
    
    # Obtaining the type of the subscript
    unicode_189570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 670, 21), 'unicode', u'datapath')
    # Getting the type of 'defaultParams' (line 670)
    defaultParams_189571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 7), 'defaultParams')
    # Obtaining the member '__getitem__' of a type (line 670)
    getitem___189572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 7), defaultParams_189571, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 670)
    subscript_call_result_189573 = invoke(stypy.reporting.localization.Localization(__file__, 670, 7), getitem___189572, unicode_189570)
    
    # Obtaining the member '__getitem__' of a type (line 670)
    getitem___189574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 7), subscript_call_result_189573, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 670)
    subscript_call_result_189575 = invoke(stypy.reporting.localization.Localization(__file__, 670, 7), getitem___189574, int_189569)
    
    # Getting the type of 'None' (line 670)
    None_189576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 39), 'None')
    
    (may_be_189577, more_types_in_union_189578) = may_be_none(subscript_call_result_189575, None_189576)

    if may_be_189577:

        if more_types_in_union_189578:
            # Runtime conditional SSA (line 670)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Subscript (line 671):
        
        # Assigning a Call to a Subscript (line 671):
        
        # Call to _get_data_path(...): (line 671)
        # Processing the call keyword arguments (line 671)
        kwargs_189580 = {}
        # Getting the type of '_get_data_path' (line 671)
        _get_data_path_189579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 39), '_get_data_path', False)
        # Calling _get_data_path(args, kwargs) (line 671)
        _get_data_path_call_result_189581 = invoke(stypy.reporting.localization.Localization(__file__, 671, 39), _get_data_path_189579, *[], **kwargs_189580)
        
        
        # Obtaining the type of the subscript
        unicode_189582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 671, 22), 'unicode', u'datapath')
        # Getting the type of 'defaultParams' (line 671)
        defaultParams_189583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 8), 'defaultParams')
        # Obtaining the member '__getitem__' of a type (line 671)
        getitem___189584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 8), defaultParams_189583, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 671)
        subscript_call_result_189585 = invoke(stypy.reporting.localization.Localization(__file__, 671, 8), getitem___189584, unicode_189582)
        
        int_189586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 671, 34), 'int')
        # Storing an element on a container (line 671)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 671, 8), subscript_call_result_189585, (int_189586, _get_data_path_call_result_189581))

        if more_types_in_union_189578:
            # SSA join for if statement (line 670)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Obtaining the type of the subscript
    int_189587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, 37), 'int')
    
    # Obtaining the type of the subscript
    unicode_189588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, 25), 'unicode', u'datapath')
    # Getting the type of 'defaultParams' (line 672)
    defaultParams_189589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 11), 'defaultParams')
    # Obtaining the member '__getitem__' of a type (line 672)
    getitem___189590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 11), defaultParams_189589, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 672)
    subscript_call_result_189591 = invoke(stypy.reporting.localization.Localization(__file__, 672, 11), getitem___189590, unicode_189588)
    
    # Obtaining the member '__getitem__' of a type (line 672)
    getitem___189592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 11), subscript_call_result_189591, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 672)
    subscript_call_result_189593 = invoke(stypy.reporting.localization.Localization(__file__, 672, 11), getitem___189592, int_189587)
    
    # Assigning a type to the variable 'stypy_return_type' (line 672)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 4), 'stypy_return_type', subscript_call_result_189593)
    
    # ################# End of '_get_data_path_cached(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_data_path_cached' in the type store
    # Getting the type of 'stypy_return_type' (line 669)
    stypy_return_type_189594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189594)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_data_path_cached'
    return stypy_return_type_189594

# Assigning a type to the variable '_get_data_path_cached' (line 669)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 669, 0), '_get_data_path_cached', _get_data_path_cached)

# Assigning a Call to a Name (line 674):

# Assigning a Call to a Name (line 674):

# Call to wrap(...): (line 674)
# Processing the call arguments (line 674)
unicode_189597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 674, 29), 'unicode', u'matplotlib data path %s')
# Getting the type of '_get_data_path_cached' (line 674)
_get_data_path_cached_189598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 56), '_get_data_path_cached', False)
# Processing the call keyword arguments (line 674)
# Getting the type of 'False' (line 675)
False_189599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 36), 'False', False)
keyword_189600 = False_189599
kwargs_189601 = {'always': keyword_189600}
# Getting the type of 'verbose' (line 674)
verbose_189595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 16), 'verbose', False)
# Obtaining the member 'wrap' of a type (line 674)
wrap_189596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 16), verbose_189595, 'wrap')
# Calling wrap(args, kwargs) (line 674)
wrap_call_result_189602 = invoke(stypy.reporting.localization.Localization(__file__, 674, 16), wrap_189596, *[unicode_189597, _get_data_path_cached_189598], **kwargs_189601)

# Assigning a type to the variable 'get_data_path' (line 674)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 0), 'get_data_path', wrap_call_result_189602)

@norecursion
def get_py2exe_datafiles(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_py2exe_datafiles'
    module_type_store = module_type_store.open_function_context('get_py2exe_datafiles', 678, 0, False)
    
    # Passed parameters checking function
    get_py2exe_datafiles.stypy_localization = localization
    get_py2exe_datafiles.stypy_type_of_self = None
    get_py2exe_datafiles.stypy_type_store = module_type_store
    get_py2exe_datafiles.stypy_function_name = 'get_py2exe_datafiles'
    get_py2exe_datafiles.stypy_param_names_list = []
    get_py2exe_datafiles.stypy_varargs_param_name = None
    get_py2exe_datafiles.stypy_kwargs_param_name = None
    get_py2exe_datafiles.stypy_call_defaults = defaults
    get_py2exe_datafiles.stypy_call_varargs = varargs
    get_py2exe_datafiles.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_py2exe_datafiles', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_py2exe_datafiles', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_py2exe_datafiles(...)' code ##################

    
    # Assigning a Call to a Name (line 679):
    
    # Assigning a Call to a Name (line 679):
    
    # Call to get_data_path(...): (line 679)
    # Processing the call keyword arguments (line 679)
    kwargs_189604 = {}
    # Getting the type of 'get_data_path' (line 679)
    get_data_path_189603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 15), 'get_data_path', False)
    # Calling get_data_path(args, kwargs) (line 679)
    get_data_path_call_result_189605 = invoke(stypy.reporting.localization.Localization(__file__, 679, 15), get_data_path_189603, *[], **kwargs_189604)
    
    # Assigning a type to the variable 'datapath' (line 679)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 4), 'datapath', get_data_path_call_result_189605)
    
    # Assigning a Call to a Tuple (line 680):
    
    # Assigning a Call to a Name:
    
    # Call to split(...): (line 680)
    # Processing the call arguments (line 680)
    # Getting the type of 'datapath' (line 680)
    datapath_189609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 28), 'datapath', False)
    # Processing the call keyword arguments (line 680)
    kwargs_189610 = {}
    # Getting the type of 'os' (line 680)
    os_189606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 14), 'os', False)
    # Obtaining the member 'path' of a type (line 680)
    path_189607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 14), os_189606, 'path')
    # Obtaining the member 'split' of a type (line 680)
    split_189608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 14), path_189607, 'split')
    # Calling split(args, kwargs) (line 680)
    split_call_result_189611 = invoke(stypy.reporting.localization.Localization(__file__, 680, 14), split_189608, *[datapath_189609], **kwargs_189610)
    
    # Assigning a type to the variable 'call_assignment_188204' (line 680)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 4), 'call_assignment_188204', split_call_result_189611)
    
    # Assigning a Call to a Name (line 680):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_189614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 680, 4), 'int')
    # Processing the call keyword arguments
    kwargs_189615 = {}
    # Getting the type of 'call_assignment_188204' (line 680)
    call_assignment_188204_189612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 4), 'call_assignment_188204', False)
    # Obtaining the member '__getitem__' of a type (line 680)
    getitem___189613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 4), call_assignment_188204_189612, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_189616 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___189613, *[int_189614], **kwargs_189615)
    
    # Assigning a type to the variable 'call_assignment_188205' (line 680)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 4), 'call_assignment_188205', getitem___call_result_189616)
    
    # Assigning a Name to a Name (line 680):
    # Getting the type of 'call_assignment_188205' (line 680)
    call_assignment_188205_189617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 4), 'call_assignment_188205')
    # Assigning a type to the variable '_' (line 680)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 4), '_', call_assignment_188205_189617)
    
    # Assigning a Call to a Name (line 680):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_189620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 680, 4), 'int')
    # Processing the call keyword arguments
    kwargs_189621 = {}
    # Getting the type of 'call_assignment_188204' (line 680)
    call_assignment_188204_189618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 4), 'call_assignment_188204', False)
    # Obtaining the member '__getitem__' of a type (line 680)
    getitem___189619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 4), call_assignment_188204_189618, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_189622 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___189619, *[int_189620], **kwargs_189621)
    
    # Assigning a type to the variable 'call_assignment_188206' (line 680)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 4), 'call_assignment_188206', getitem___call_result_189622)
    
    # Assigning a Name to a Name (line 680):
    # Getting the type of 'call_assignment_188206' (line 680)
    call_assignment_188206_189623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 4), 'call_assignment_188206')
    # Assigning a type to the variable 'tail' (line 680)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 7), 'tail', call_assignment_188206_189623)
    
    # Assigning a Dict to a Name (line 681):
    
    # Assigning a Dict to a Name (line 681):
    
    # Obtaining an instance of the builtin type 'dict' (line 681)
    dict_189624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 681, 8), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 681)
    
    # Assigning a type to the variable 'd' (line 681)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 681, 4), 'd', dict_189624)
    
    
    # Call to walk(...): (line 682)
    # Processing the call arguments (line 682)
    # Getting the type of 'datapath' (line 682)
    datapath_189627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 34), 'datapath', False)
    # Processing the call keyword arguments (line 682)
    kwargs_189628 = {}
    # Getting the type of 'os' (line 682)
    os_189625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 26), 'os', False)
    # Obtaining the member 'walk' of a type (line 682)
    walk_189626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 682, 26), os_189625, 'walk')
    # Calling walk(args, kwargs) (line 682)
    walk_call_result_189629 = invoke(stypy.reporting.localization.Localization(__file__, 682, 26), walk_189626, *[datapath_189627], **kwargs_189628)
    
    # Testing the type of a for loop iterable (line 682)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 682, 4), walk_call_result_189629)
    # Getting the type of the for loop variable (line 682)
    for_loop_var_189630 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 682, 4), walk_call_result_189629)
    # Assigning a type to the variable 'root' (line 682)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 4), 'root', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 682, 4), for_loop_var_189630))
    # Assigning a type to the variable '_' (line 682)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 4), '_', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 682, 4), for_loop_var_189630))
    # Assigning a type to the variable 'files' (line 682)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 4), 'files', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 682, 4), for_loop_var_189630))
    # SSA begins for a for statement (line 682)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    unicode_189631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 11), 'unicode', u'Matplotlib.nib')
    # Getting the type of 'files' (line 685)
    files_189632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 31), 'files')
    # Applying the binary operator 'in' (line 685)
    result_contains_189633 = python_operator(stypy.reporting.localization.Localization(__file__, 685, 11), 'in', unicode_189631, files_189632)
    
    # Testing the type of an if condition (line 685)
    if_condition_189634 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 685, 8), result_contains_189633)
    # Assigning a type to the variable 'if_condition_189634' (line 685)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 685, 8), 'if_condition_189634', if_condition_189634)
    # SSA begins for if statement (line 685)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to remove(...): (line 686)
    # Processing the call arguments (line 686)
    unicode_189637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 686, 25), 'unicode', u'Matplotlib.nib')
    # Processing the call keyword arguments (line 686)
    kwargs_189638 = {}
    # Getting the type of 'files' (line 686)
    files_189635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 12), 'files', False)
    # Obtaining the member 'remove' of a type (line 686)
    remove_189636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 686, 12), files_189635, 'remove')
    # Calling remove(args, kwargs) (line 686)
    remove_call_result_189639 = invoke(stypy.reporting.localization.Localization(__file__, 686, 12), remove_189636, *[unicode_189637], **kwargs_189638)
    
    # SSA join for if statement (line 685)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a ListComp to a Name (line 687):
    
    # Assigning a ListComp to a Name (line 687):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'files' (line 687)
    files_189647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 62), 'files')
    comprehension_189648 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 17), files_189647)
    # Assigning a type to the variable 'filename' (line 687)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 687, 17), 'filename', comprehension_189648)
    
    # Call to join(...): (line 687)
    # Processing the call arguments (line 687)
    # Getting the type of 'root' (line 687)
    root_189643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 30), 'root', False)
    # Getting the type of 'filename' (line 687)
    filename_189644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 36), 'filename', False)
    # Processing the call keyword arguments (line 687)
    kwargs_189645 = {}
    # Getting the type of 'os' (line 687)
    os_189640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 17), 'os', False)
    # Obtaining the member 'path' of a type (line 687)
    path_189641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 17), os_189640, 'path')
    # Obtaining the member 'join' of a type (line 687)
    join_189642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 17), path_189641, 'join')
    # Calling join(args, kwargs) (line 687)
    join_call_result_189646 = invoke(stypy.reporting.localization.Localization(__file__, 687, 17), join_189642, *[root_189643, filename_189644], **kwargs_189645)
    
    list_189649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 17), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 17), list_189649, join_call_result_189646)
    # Assigning a type to the variable 'files' (line 687)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 687, 8), 'files', list_189649)
    
    # Assigning a Call to a Name (line 688):
    
    # Assigning a Call to a Name (line 688):
    
    # Call to replace(...): (line 688)
    # Processing the call arguments (line 688)
    # Getting the type of 'tail' (line 688)
    tail_189652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 28), 'tail', False)
    unicode_189653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 688, 34), 'unicode', u'mpl-data')
    # Processing the call keyword arguments (line 688)
    kwargs_189654 = {}
    # Getting the type of 'root' (line 688)
    root_189650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 15), 'root', False)
    # Obtaining the member 'replace' of a type (line 688)
    replace_189651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 15), root_189650, 'replace')
    # Calling replace(args, kwargs) (line 688)
    replace_call_result_189655 = invoke(stypy.reporting.localization.Localization(__file__, 688, 15), replace_189651, *[tail_189652, unicode_189653], **kwargs_189654)
    
    # Assigning a type to the variable 'root' (line 688)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 688, 8), 'root', replace_call_result_189655)
    
    # Assigning a Subscript to a Name (line 689):
    
    # Assigning a Subscript to a Name (line 689):
    
    # Obtaining the type of the subscript
    
    # Call to index(...): (line 689)
    # Processing the call arguments (line 689)
    unicode_189658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 689, 31), 'unicode', u'mpl-data')
    # Processing the call keyword arguments (line 689)
    kwargs_189659 = {}
    # Getting the type of 'root' (line 689)
    root_189656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 20), 'root', False)
    # Obtaining the member 'index' of a type (line 689)
    index_189657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 20), root_189656, 'index')
    # Calling index(args, kwargs) (line 689)
    index_call_result_189660 = invoke(stypy.reporting.localization.Localization(__file__, 689, 20), index_189657, *[unicode_189658], **kwargs_189659)
    
    slice_189661 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 689, 15), index_call_result_189660, None, None)
    # Getting the type of 'root' (line 689)
    root_189662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 15), 'root')
    # Obtaining the member '__getitem__' of a type (line 689)
    getitem___189663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 15), root_189662, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 689)
    subscript_call_result_189664 = invoke(stypy.reporting.localization.Localization(__file__, 689, 15), getitem___189663, slice_189661)
    
    # Assigning a type to the variable 'root' (line 689)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 689, 8), 'root', subscript_call_result_189664)
    
    # Assigning a Name to a Subscript (line 690):
    
    # Assigning a Name to a Subscript (line 690):
    # Getting the type of 'files' (line 690)
    files_189665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 18), 'files')
    # Getting the type of 'd' (line 690)
    d_189666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 8), 'd')
    # Getting the type of 'root' (line 690)
    root_189667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 10), 'root')
    # Storing an element on a container (line 690)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 690, 8), d_189666, (root_189667, files_189665))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to list(...): (line 691)
    # Processing the call arguments (line 691)
    
    # Call to items(...): (line 691)
    # Processing the call keyword arguments (line 691)
    kwargs_189671 = {}
    # Getting the type of 'd' (line 691)
    d_189669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 16), 'd', False)
    # Obtaining the member 'items' of a type (line 691)
    items_189670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 691, 16), d_189669, 'items')
    # Calling items(args, kwargs) (line 691)
    items_call_result_189672 = invoke(stypy.reporting.localization.Localization(__file__, 691, 16), items_189670, *[], **kwargs_189671)
    
    # Processing the call keyword arguments (line 691)
    kwargs_189673 = {}
    # Getting the type of 'list' (line 691)
    list_189668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 11), 'list', False)
    # Calling list(args, kwargs) (line 691)
    list_call_result_189674 = invoke(stypy.reporting.localization.Localization(__file__, 691, 11), list_189668, *[items_call_result_189672], **kwargs_189673)
    
    # Assigning a type to the variable 'stypy_return_type' (line 691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 691, 4), 'stypy_return_type', list_call_result_189674)
    
    # ################# End of 'get_py2exe_datafiles(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_py2exe_datafiles' in the type store
    # Getting the type of 'stypy_return_type' (line 678)
    stypy_return_type_189675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189675)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_py2exe_datafiles'
    return stypy_return_type_189675

# Assigning a type to the variable 'get_py2exe_datafiles' (line 678)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 678, 0), 'get_py2exe_datafiles', get_py2exe_datafiles)

@norecursion
def matplotlib_fname(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'matplotlib_fname'
    module_type_store = module_type_store.open_function_context('matplotlib_fname', 694, 0, False)
    
    # Passed parameters checking function
    matplotlib_fname.stypy_localization = localization
    matplotlib_fname.stypy_type_of_self = None
    matplotlib_fname.stypy_type_store = module_type_store
    matplotlib_fname.stypy_function_name = 'matplotlib_fname'
    matplotlib_fname.stypy_param_names_list = []
    matplotlib_fname.stypy_varargs_param_name = None
    matplotlib_fname.stypy_kwargs_param_name = None
    matplotlib_fname.stypy_call_defaults = defaults
    matplotlib_fname.stypy_call_varargs = varargs
    matplotlib_fname.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'matplotlib_fname', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'matplotlib_fname', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'matplotlib_fname(...)' code ##################

    unicode_189676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, (-1)), 'unicode', u'\n    Get the location of the config file.\n\n    The file location is determined in the following order\n\n    - `$PWD/matplotlibrc`\n\n    - `$MATPLOTLIBRC` if it is a file\n\n    - `$MATPLOTLIBRC/matplotlibrc`\n\n    - `$MPLCONFIGDIR/matplotlibrc`\n\n    - On Linux,\n\n          - `$XDG_CONFIG_HOME/matplotlib/matplotlibrc` (if\n            $XDG_CONFIG_HOME is defined)\n\n          - or `$HOME/.config/matplotlib/matplotlibrc` (if\n            $XDG_CONFIG_HOME is not defined)\n\n    - On other platforms,\n\n         - `$HOME/.matplotlib/matplotlibrc` if `$HOME` is defined.\n\n    - Lastly, it looks in `$MATPLOTLIBDATA/matplotlibrc` for a\n      system-defined copy.\n    ')

    @norecursion
    def gen_candidates(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'gen_candidates'
        module_type_store = module_type_store.open_function_context('gen_candidates', 724, 4, False)
        
        # Passed parameters checking function
        gen_candidates.stypy_localization = localization
        gen_candidates.stypy_type_of_self = None
        gen_candidates.stypy_type_store = module_type_store
        gen_candidates.stypy_function_name = 'gen_candidates'
        gen_candidates.stypy_param_names_list = []
        gen_candidates.stypy_varargs_param_name = None
        gen_candidates.stypy_kwargs_param_name = None
        gen_candidates.stypy_call_defaults = defaults
        gen_candidates.stypy_call_varargs = varargs
        gen_candidates.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'gen_candidates', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'gen_candidates', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'gen_candidates(...)' code ##################

        # Creating a generator
        
        # Call to join(...): (line 725)
        # Processing the call arguments (line 725)
        
        # Call to getcwd(...): (line 725)
        # Processing the call keyword arguments (line 725)
        kwargs_189683 = {}
        # Getting the type of 'six' (line 725)
        six_189680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 27), 'six', False)
        # Obtaining the member 'moves' of a type (line 725)
        moves_189681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 27), six_189680, 'moves')
        # Obtaining the member 'getcwd' of a type (line 725)
        getcwd_189682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 27), moves_189681, 'getcwd')
        # Calling getcwd(args, kwargs) (line 725)
        getcwd_call_result_189684 = invoke(stypy.reporting.localization.Localization(__file__, 725, 27), getcwd_189682, *[], **kwargs_189683)
        
        unicode_189685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, 47), 'unicode', u'matplotlibrc')
        # Processing the call keyword arguments (line 725)
        kwargs_189686 = {}
        # Getting the type of 'os' (line 725)
        os_189677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 14), 'os', False)
        # Obtaining the member 'path' of a type (line 725)
        path_189678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 14), os_189677, 'path')
        # Obtaining the member 'join' of a type (line 725)
        join_189679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 14), path_189678, 'join')
        # Calling join(args, kwargs) (line 725)
        join_call_result_189687 = invoke(stypy.reporting.localization.Localization(__file__, 725, 14), join_189679, *[getcwd_call_result_189684, unicode_189685], **kwargs_189686)
        
        GeneratorType_189688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, 8), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 725, 8), GeneratorType_189688, join_call_result_189687)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 8), 'stypy_return_type', GeneratorType_189688)
        
        
        # SSA begins for try-except statement (line 726)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Subscript to a Name (line 727):
        
        # Assigning a Subscript to a Name (line 727):
        
        # Obtaining the type of the subscript
        unicode_189689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 38), 'unicode', u'MATPLOTLIBRC')
        # Getting the type of 'os' (line 727)
        os_189690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 27), 'os')
        # Obtaining the member 'environ' of a type (line 727)
        environ_189691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 27), os_189690, 'environ')
        # Obtaining the member '__getitem__' of a type (line 727)
        getitem___189692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 27), environ_189691, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 727)
        subscript_call_result_189693 = invoke(stypy.reporting.localization.Localization(__file__, 727, 27), getitem___189692, unicode_189689)
        
        # Assigning a type to the variable 'matplotlibrc' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 12), 'matplotlibrc', subscript_call_result_189693)
        # SSA branch for the except part of a try statement (line 726)
        # SSA branch for the except 'KeyError' branch of a try statement (line 726)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the else branch of a try statement (line 726)
        module_type_store.open_ssa_branch('except else')
        # Creating a generator
        # Getting the type of 'matplotlibrc' (line 731)
        matplotlibrc_189694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 18), 'matplotlibrc')
        GeneratorType_189695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 12), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 731, 12), GeneratorType_189695, matplotlibrc_189694)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 12), 'stypy_return_type', GeneratorType_189695)
        # Creating a generator
        
        # Call to join(...): (line 732)
        # Processing the call arguments (line 732)
        # Getting the type of 'matplotlibrc' (line 732)
        matplotlibrc_189699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 31), 'matplotlibrc', False)
        unicode_189700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 732, 45), 'unicode', u'matplotlibrc')
        # Processing the call keyword arguments (line 732)
        kwargs_189701 = {}
        # Getting the type of 'os' (line 732)
        os_189696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 18), 'os', False)
        # Obtaining the member 'path' of a type (line 732)
        path_189697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 732, 18), os_189696, 'path')
        # Obtaining the member 'join' of a type (line 732)
        join_189698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 732, 18), path_189697, 'join')
        # Calling join(args, kwargs) (line 732)
        join_call_result_189702 = invoke(stypy.reporting.localization.Localization(__file__, 732, 18), join_189698, *[matplotlibrc_189699, unicode_189700], **kwargs_189701)
        
        GeneratorType_189703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 732, 12), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 732, 12), GeneratorType_189703, join_call_result_189702)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 12), 'stypy_return_type', GeneratorType_189703)
        # SSA join for try-except statement (line 726)
        module_type_store = module_type_store.join_ssa_context()
        
        # Creating a generator
        
        # Call to join(...): (line 733)
        # Processing the call arguments (line 733)
        
        # Call to _get_configdir(...): (line 733)
        # Processing the call keyword arguments (line 733)
        kwargs_189708 = {}
        # Getting the type of '_get_configdir' (line 733)
        _get_configdir_189707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 27), '_get_configdir', False)
        # Calling _get_configdir(args, kwargs) (line 733)
        _get_configdir_call_result_189709 = invoke(stypy.reporting.localization.Localization(__file__, 733, 27), _get_configdir_189707, *[], **kwargs_189708)
        
        unicode_189710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 733, 45), 'unicode', u'matplotlibrc')
        # Processing the call keyword arguments (line 733)
        kwargs_189711 = {}
        # Getting the type of 'os' (line 733)
        os_189704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 14), 'os', False)
        # Obtaining the member 'path' of a type (line 733)
        path_189705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 14), os_189704, 'path')
        # Obtaining the member 'join' of a type (line 733)
        join_189706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 14), path_189705, 'join')
        # Calling join(args, kwargs) (line 733)
        join_call_result_189712 = invoke(stypy.reporting.localization.Localization(__file__, 733, 14), join_189706, *[_get_configdir_call_result_189709, unicode_189710], **kwargs_189711)
        
        GeneratorType_189713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 733, 8), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 733, 8), GeneratorType_189713, join_call_result_189712)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 733, 8), 'stypy_return_type', GeneratorType_189713)
        # Creating a generator
        
        # Call to join(...): (line 734)
        # Processing the call arguments (line 734)
        
        # Call to get_data_path(...): (line 734)
        # Processing the call keyword arguments (line 734)
        kwargs_189718 = {}
        # Getting the type of 'get_data_path' (line 734)
        get_data_path_189717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 27), 'get_data_path', False)
        # Calling get_data_path(args, kwargs) (line 734)
        get_data_path_call_result_189719 = invoke(stypy.reporting.localization.Localization(__file__, 734, 27), get_data_path_189717, *[], **kwargs_189718)
        
        unicode_189720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 44), 'unicode', u'matplotlibrc')
        # Processing the call keyword arguments (line 734)
        kwargs_189721 = {}
        # Getting the type of 'os' (line 734)
        os_189714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 14), 'os', False)
        # Obtaining the member 'path' of a type (line 734)
        path_189715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 14), os_189714, 'path')
        # Obtaining the member 'join' of a type (line 734)
        join_189716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 14), path_189715, 'join')
        # Calling join(args, kwargs) (line 734)
        join_call_result_189722 = invoke(stypy.reporting.localization.Localization(__file__, 734, 14), join_189716, *[get_data_path_call_result_189719, unicode_189720], **kwargs_189721)
        
        GeneratorType_189723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 8), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 734, 8), GeneratorType_189723, join_call_result_189722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'stypy_return_type', GeneratorType_189723)
        
        # ################# End of 'gen_candidates(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'gen_candidates' in the type store
        # Getting the type of 'stypy_return_type' (line 724)
        stypy_return_type_189724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_189724)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'gen_candidates'
        return stypy_return_type_189724

    # Assigning a type to the variable 'gen_candidates' (line 724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 724, 4), 'gen_candidates', gen_candidates)
    
    
    # Call to gen_candidates(...): (line 736)
    # Processing the call keyword arguments (line 736)
    kwargs_189726 = {}
    # Getting the type of 'gen_candidates' (line 736)
    gen_candidates_189725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 17), 'gen_candidates', False)
    # Calling gen_candidates(args, kwargs) (line 736)
    gen_candidates_call_result_189727 = invoke(stypy.reporting.localization.Localization(__file__, 736, 17), gen_candidates_189725, *[], **kwargs_189726)
    
    # Testing the type of a for loop iterable (line 736)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 736, 4), gen_candidates_call_result_189727)
    # Getting the type of the for loop variable (line 736)
    for_loop_var_189728 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 736, 4), gen_candidates_call_result_189727)
    # Assigning a type to the variable 'fname' (line 736)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 4), 'fname', for_loop_var_189728)
    # SSA begins for a for statement (line 736)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to isfile(...): (line 737)
    # Processing the call arguments (line 737)
    # Getting the type of 'fname' (line 737)
    fname_189732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 26), 'fname', False)
    # Processing the call keyword arguments (line 737)
    kwargs_189733 = {}
    # Getting the type of 'os' (line 737)
    os_189729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 737)
    path_189730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 11), os_189729, 'path')
    # Obtaining the member 'isfile' of a type (line 737)
    isfile_189731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 11), path_189730, 'isfile')
    # Calling isfile(args, kwargs) (line 737)
    isfile_call_result_189734 = invoke(stypy.reporting.localization.Localization(__file__, 737, 11), isfile_189731, *[fname_189732], **kwargs_189733)
    
    # Testing the type of an if condition (line 737)
    if_condition_189735 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 737, 8), isfile_call_result_189734)
    # Assigning a type to the variable 'if_condition_189735' (line 737)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 8), 'if_condition_189735', if_condition_189735)
    # SSA begins for if statement (line 737)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 737)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'fname' (line 741)
    fname_189736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 11), 'fname')
    # Assigning a type to the variable 'stypy_return_type' (line 741)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 4), 'stypy_return_type', fname_189736)
    
    # ################# End of 'matplotlib_fname(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'matplotlib_fname' in the type store
    # Getting the type of 'stypy_return_type' (line 694)
    stypy_return_type_189737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189737)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'matplotlib_fname'
    return stypy_return_type_189737

# Assigning a type to the variable 'matplotlib_fname' (line 694)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 694, 0), 'matplotlib_fname', matplotlib_fname)

# Assigning a Dict to a Name (line 747):

# Assigning a Dict to a Name (line 747):

# Obtaining an instance of the builtin type 'dict' (line 747)
dict_189738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 747, 18), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 747)
# Adding element type (key, value) (line 747)
unicode_189739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 748, 4), 'unicode', u'text.fontstyle')

# Obtaining an instance of the builtin type 'tuple' (line 748)
tuple_189740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 748, 25), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 748)
# Adding element type (line 748)
unicode_189741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 748, 25), 'unicode', u'font.style')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 748, 25), tuple_189740, unicode_189741)
# Adding element type (line 748)

@norecursion
def _stypy_temp_lambda_76(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_76'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_76', 748, 39, True)
    # Passed parameters checking function
    _stypy_temp_lambda_76.stypy_localization = localization
    _stypy_temp_lambda_76.stypy_type_of_self = None
    _stypy_temp_lambda_76.stypy_type_store = module_type_store
    _stypy_temp_lambda_76.stypy_function_name = '_stypy_temp_lambda_76'
    _stypy_temp_lambda_76.stypy_param_names_list = ['x']
    _stypy_temp_lambda_76.stypy_varargs_param_name = None
    _stypy_temp_lambda_76.stypy_kwargs_param_name = None
    _stypy_temp_lambda_76.stypy_call_defaults = defaults
    _stypy_temp_lambda_76.stypy_call_varargs = varargs
    _stypy_temp_lambda_76.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_76', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_76', ['x'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'x' (line 748)
    x_189742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 49), 'x')
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 748)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 39), 'stypy_return_type', x_189742)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_76' in the type store
    # Getting the type of 'stypy_return_type' (line 748)
    stypy_return_type_189743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 39), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189743)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_76'
    return stypy_return_type_189743

# Assigning a type to the variable '_stypy_temp_lambda_76' (line 748)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 39), '_stypy_temp_lambda_76', _stypy_temp_lambda_76)
# Getting the type of '_stypy_temp_lambda_76' (line 748)
_stypy_temp_lambda_76_189744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 39), '_stypy_temp_lambda_76')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 748, 25), tuple_189740, _stypy_temp_lambda_76_189744)
# Adding element type (line 748)
# Getting the type of 'None' (line 748)
None_189745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 52), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 748, 25), tuple_189740, None_189745)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 747, 18), dict_189738, (unicode_189739, tuple_189740))
# Adding element type (key, value) (line 747)
unicode_189746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 749, 4), 'unicode', u'text.fontangle')

# Obtaining an instance of the builtin type 'tuple' (line 749)
tuple_189747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 749, 25), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 749)
# Adding element type (line 749)
unicode_189748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 749, 25), 'unicode', u'font.style')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 749, 25), tuple_189747, unicode_189748)
# Adding element type (line 749)

@norecursion
def _stypy_temp_lambda_77(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_77'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_77', 749, 39, True)
    # Passed parameters checking function
    _stypy_temp_lambda_77.stypy_localization = localization
    _stypy_temp_lambda_77.stypy_type_of_self = None
    _stypy_temp_lambda_77.stypy_type_store = module_type_store
    _stypy_temp_lambda_77.stypy_function_name = '_stypy_temp_lambda_77'
    _stypy_temp_lambda_77.stypy_param_names_list = ['x']
    _stypy_temp_lambda_77.stypy_varargs_param_name = None
    _stypy_temp_lambda_77.stypy_kwargs_param_name = None
    _stypy_temp_lambda_77.stypy_call_defaults = defaults
    _stypy_temp_lambda_77.stypy_call_varargs = varargs
    _stypy_temp_lambda_77.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_77', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_77', ['x'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'x' (line 749)
    x_189749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 49), 'x')
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 749)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 749, 39), 'stypy_return_type', x_189749)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_77' in the type store
    # Getting the type of 'stypy_return_type' (line 749)
    stypy_return_type_189750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 39), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189750)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_77'
    return stypy_return_type_189750

# Assigning a type to the variable '_stypy_temp_lambda_77' (line 749)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 749, 39), '_stypy_temp_lambda_77', _stypy_temp_lambda_77)
# Getting the type of '_stypy_temp_lambda_77' (line 749)
_stypy_temp_lambda_77_189751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 39), '_stypy_temp_lambda_77')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 749, 25), tuple_189747, _stypy_temp_lambda_77_189751)
# Adding element type (line 749)
# Getting the type of 'None' (line 749)
None_189752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 52), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 749, 25), tuple_189747, None_189752)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 747, 18), dict_189738, (unicode_189746, tuple_189747))
# Adding element type (key, value) (line 747)
unicode_189753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 750, 4), 'unicode', u'text.fontvariant')

# Obtaining an instance of the builtin type 'tuple' (line 750)
tuple_189754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 750, 25), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 750)
# Adding element type (line 750)
unicode_189755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 750, 25), 'unicode', u'font.variant')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 750, 25), tuple_189754, unicode_189755)
# Adding element type (line 750)

@norecursion
def _stypy_temp_lambda_78(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_78'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_78', 750, 41, True)
    # Passed parameters checking function
    _stypy_temp_lambda_78.stypy_localization = localization
    _stypy_temp_lambda_78.stypy_type_of_self = None
    _stypy_temp_lambda_78.stypy_type_store = module_type_store
    _stypy_temp_lambda_78.stypy_function_name = '_stypy_temp_lambda_78'
    _stypy_temp_lambda_78.stypy_param_names_list = ['x']
    _stypy_temp_lambda_78.stypy_varargs_param_name = None
    _stypy_temp_lambda_78.stypy_kwargs_param_name = None
    _stypy_temp_lambda_78.stypy_call_defaults = defaults
    _stypy_temp_lambda_78.stypy_call_varargs = varargs
    _stypy_temp_lambda_78.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_78', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_78', ['x'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'x' (line 750)
    x_189756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 51), 'x')
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 41), 'stypy_return_type', x_189756)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_78' in the type store
    # Getting the type of 'stypy_return_type' (line 750)
    stypy_return_type_189757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 41), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189757)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_78'
    return stypy_return_type_189757

# Assigning a type to the variable '_stypy_temp_lambda_78' (line 750)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 41), '_stypy_temp_lambda_78', _stypy_temp_lambda_78)
# Getting the type of '_stypy_temp_lambda_78' (line 750)
_stypy_temp_lambda_78_189758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 41), '_stypy_temp_lambda_78')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 750, 25), tuple_189754, _stypy_temp_lambda_78_189758)
# Adding element type (line 750)
# Getting the type of 'None' (line 750)
None_189759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 54), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 750, 25), tuple_189754, None_189759)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 747, 18), dict_189738, (unicode_189753, tuple_189754))
# Adding element type (key, value) (line 747)
unicode_189760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 4), 'unicode', u'text.fontweight')

# Obtaining an instance of the builtin type 'tuple' (line 751)
tuple_189761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 25), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 751)
# Adding element type (line 751)
unicode_189762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 25), 'unicode', u'font.weight')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 751, 25), tuple_189761, unicode_189762)
# Adding element type (line 751)

@norecursion
def _stypy_temp_lambda_79(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_79'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_79', 751, 40, True)
    # Passed parameters checking function
    _stypy_temp_lambda_79.stypy_localization = localization
    _stypy_temp_lambda_79.stypy_type_of_self = None
    _stypy_temp_lambda_79.stypy_type_store = module_type_store
    _stypy_temp_lambda_79.stypy_function_name = '_stypy_temp_lambda_79'
    _stypy_temp_lambda_79.stypy_param_names_list = ['x']
    _stypy_temp_lambda_79.stypy_varargs_param_name = None
    _stypy_temp_lambda_79.stypy_kwargs_param_name = None
    _stypy_temp_lambda_79.stypy_call_defaults = defaults
    _stypy_temp_lambda_79.stypy_call_varargs = varargs
    _stypy_temp_lambda_79.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_79', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_79', ['x'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'x' (line 751)
    x_189763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 50), 'x')
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 751)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 40), 'stypy_return_type', x_189763)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_79' in the type store
    # Getting the type of 'stypy_return_type' (line 751)
    stypy_return_type_189764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 40), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189764)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_79'
    return stypy_return_type_189764

# Assigning a type to the variable '_stypy_temp_lambda_79' (line 751)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 40), '_stypy_temp_lambda_79', _stypy_temp_lambda_79)
# Getting the type of '_stypy_temp_lambda_79' (line 751)
_stypy_temp_lambda_79_189765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 40), '_stypy_temp_lambda_79')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 751, 25), tuple_189761, _stypy_temp_lambda_79_189765)
# Adding element type (line 751)
# Getting the type of 'None' (line 751)
None_189766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 53), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 751, 25), tuple_189761, None_189766)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 747, 18), dict_189738, (unicode_189760, tuple_189761))
# Adding element type (key, value) (line 747)
unicode_189767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 4), 'unicode', u'text.fontsize')

# Obtaining an instance of the builtin type 'tuple' (line 752)
tuple_189768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 25), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 752)
# Adding element type (line 752)
unicode_189769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 25), 'unicode', u'font.size')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 752, 25), tuple_189768, unicode_189769)
# Adding element type (line 752)

@norecursion
def _stypy_temp_lambda_80(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_80'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_80', 752, 38, True)
    # Passed parameters checking function
    _stypy_temp_lambda_80.stypy_localization = localization
    _stypy_temp_lambda_80.stypy_type_of_self = None
    _stypy_temp_lambda_80.stypy_type_store = module_type_store
    _stypy_temp_lambda_80.stypy_function_name = '_stypy_temp_lambda_80'
    _stypy_temp_lambda_80.stypy_param_names_list = ['x']
    _stypy_temp_lambda_80.stypy_varargs_param_name = None
    _stypy_temp_lambda_80.stypy_kwargs_param_name = None
    _stypy_temp_lambda_80.stypy_call_defaults = defaults
    _stypy_temp_lambda_80.stypy_call_varargs = varargs
    _stypy_temp_lambda_80.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_80', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_80', ['x'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'x' (line 752)
    x_189770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 48), 'x')
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 752)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 752, 38), 'stypy_return_type', x_189770)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_80' in the type store
    # Getting the type of 'stypy_return_type' (line 752)
    stypy_return_type_189771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 38), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189771)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_80'
    return stypy_return_type_189771

# Assigning a type to the variable '_stypy_temp_lambda_80' (line 752)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 752, 38), '_stypy_temp_lambda_80', _stypy_temp_lambda_80)
# Getting the type of '_stypy_temp_lambda_80' (line 752)
_stypy_temp_lambda_80_189772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 38), '_stypy_temp_lambda_80')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 752, 25), tuple_189768, _stypy_temp_lambda_80_189772)
# Adding element type (line 752)
# Getting the type of 'None' (line 752)
None_189773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 51), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 752, 25), tuple_189768, None_189773)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 747, 18), dict_189738, (unicode_189767, tuple_189768))
# Adding element type (key, value) (line 747)
unicode_189774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 753, 4), 'unicode', u'tick.size')

# Obtaining an instance of the builtin type 'tuple' (line 753)
tuple_189775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 753, 25), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 753)
# Adding element type (line 753)
unicode_189776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 753, 25), 'unicode', u'tick.major.size')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 753, 25), tuple_189775, unicode_189776)
# Adding element type (line 753)

@norecursion
def _stypy_temp_lambda_81(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_81'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_81', 753, 44, True)
    # Passed parameters checking function
    _stypy_temp_lambda_81.stypy_localization = localization
    _stypy_temp_lambda_81.stypy_type_of_self = None
    _stypy_temp_lambda_81.stypy_type_store = module_type_store
    _stypy_temp_lambda_81.stypy_function_name = '_stypy_temp_lambda_81'
    _stypy_temp_lambda_81.stypy_param_names_list = ['x']
    _stypy_temp_lambda_81.stypy_varargs_param_name = None
    _stypy_temp_lambda_81.stypy_kwargs_param_name = None
    _stypy_temp_lambda_81.stypy_call_defaults = defaults
    _stypy_temp_lambda_81.stypy_call_varargs = varargs
    _stypy_temp_lambda_81.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_81', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_81', ['x'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'x' (line 753)
    x_189777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 54), 'x')
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 753)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 44), 'stypy_return_type', x_189777)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_81' in the type store
    # Getting the type of 'stypy_return_type' (line 753)
    stypy_return_type_189778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 44), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189778)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_81'
    return stypy_return_type_189778

# Assigning a type to the variable '_stypy_temp_lambda_81' (line 753)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 44), '_stypy_temp_lambda_81', _stypy_temp_lambda_81)
# Getting the type of '_stypy_temp_lambda_81' (line 753)
_stypy_temp_lambda_81_189779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 44), '_stypy_temp_lambda_81')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 753, 25), tuple_189775, _stypy_temp_lambda_81_189779)
# Adding element type (line 753)
# Getting the type of 'None' (line 753)
None_189780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 57), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 753, 25), tuple_189775, None_189780)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 747, 18), dict_189738, (unicode_189774, tuple_189775))
# Adding element type (key, value) (line 747)
unicode_189781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 754, 4), 'unicode', u'svg.embed_char_paths')

# Obtaining an instance of the builtin type 'tuple' (line 754)
tuple_189782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 754, 29), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 754)
# Adding element type (line 754)
unicode_189783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 754, 29), 'unicode', u'svg.fonttype')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 754, 29), tuple_189782, unicode_189783)
# Adding element type (line 754)

@norecursion
def _stypy_temp_lambda_82(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_82'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_82', 755, 29, True)
    # Passed parameters checking function
    _stypy_temp_lambda_82.stypy_localization = localization
    _stypy_temp_lambda_82.stypy_type_of_self = None
    _stypy_temp_lambda_82.stypy_type_store = module_type_store
    _stypy_temp_lambda_82.stypy_function_name = '_stypy_temp_lambda_82'
    _stypy_temp_lambda_82.stypy_param_names_list = ['x']
    _stypy_temp_lambda_82.stypy_varargs_param_name = None
    _stypy_temp_lambda_82.stypy_kwargs_param_name = None
    _stypy_temp_lambda_82.stypy_call_defaults = defaults
    _stypy_temp_lambda_82.stypy_call_varargs = varargs
    _stypy_temp_lambda_82.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_82', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_82', ['x'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    # Getting the type of 'x' (line 755)
    x_189784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 49), 'x')
    # Testing the type of an if expression (line 755)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 755, 39), x_189784)
    # SSA begins for if expression (line 755)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    unicode_189785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 755, 39), 'unicode', u'path')
    # SSA branch for the else part of an if expression (line 755)
    module_type_store.open_ssa_branch('if expression else')
    unicode_189786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 755, 56), 'unicode', u'none')
    # SSA join for if expression (line 755)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_189787 = union_type.UnionType.add(unicode_189785, unicode_189786)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 29), 'stypy_return_type', if_exp_189787)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_82' in the type store
    # Getting the type of 'stypy_return_type' (line 755)
    stypy_return_type_189788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 29), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189788)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_82'
    return stypy_return_type_189788

# Assigning a type to the variable '_stypy_temp_lambda_82' (line 755)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 29), '_stypy_temp_lambda_82', _stypy_temp_lambda_82)
# Getting the type of '_stypy_temp_lambda_82' (line 755)
_stypy_temp_lambda_82_189789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 29), '_stypy_temp_lambda_82')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 754, 29), tuple_189782, _stypy_temp_lambda_82_189789)
# Adding element type (line 754)
# Getting the type of 'None' (line 755)
None_189790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 64), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 754, 29), tuple_189782, None_189790)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 747, 18), dict_189738, (unicode_189781, tuple_189782))
# Adding element type (key, value) (line 747)
unicode_189791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 4), 'unicode', u'axes.color_cycle')

# Obtaining an instance of the builtin type 'tuple' (line 756)
tuple_189792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 25), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 756)
# Adding element type (line 756)
unicode_189793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 25), 'unicode', u'axes.prop_cycle')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 756, 25), tuple_189792, unicode_189793)
# Adding element type (line 756)

@norecursion
def _stypy_temp_lambda_83(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_83'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_83', 756, 44, True)
    # Passed parameters checking function
    _stypy_temp_lambda_83.stypy_localization = localization
    _stypy_temp_lambda_83.stypy_type_of_self = None
    _stypy_temp_lambda_83.stypy_type_store = module_type_store
    _stypy_temp_lambda_83.stypy_function_name = '_stypy_temp_lambda_83'
    _stypy_temp_lambda_83.stypy_param_names_list = ['x']
    _stypy_temp_lambda_83.stypy_varargs_param_name = None
    _stypy_temp_lambda_83.stypy_kwargs_param_name = None
    _stypy_temp_lambda_83.stypy_call_defaults = defaults
    _stypy_temp_lambda_83.stypy_call_varargs = varargs
    _stypy_temp_lambda_83.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_83', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_83', ['x'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    # Call to cycler(...): (line 756)
    # Processing the call arguments (line 756)
    unicode_189795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 61), 'unicode', u'color')
    # Getting the type of 'x' (line 756)
    x_189796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 70), 'x', False)
    # Processing the call keyword arguments (line 756)
    kwargs_189797 = {}
    # Getting the type of 'cycler' (line 756)
    cycler_189794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 54), 'cycler', False)
    # Calling cycler(args, kwargs) (line 756)
    cycler_call_result_189798 = invoke(stypy.reporting.localization.Localization(__file__, 756, 54), cycler_189794, *[unicode_189795, x_189796], **kwargs_189797)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 44), 'stypy_return_type', cycler_call_result_189798)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_83' in the type store
    # Getting the type of 'stypy_return_type' (line 756)
    stypy_return_type_189799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 44), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189799)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_83'
    return stypy_return_type_189799

# Assigning a type to the variable '_stypy_temp_lambda_83' (line 756)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 44), '_stypy_temp_lambda_83', _stypy_temp_lambda_83)
# Getting the type of '_stypy_temp_lambda_83' (line 756)
_stypy_temp_lambda_83_189800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 44), '_stypy_temp_lambda_83')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 756, 25), tuple_189792, _stypy_temp_lambda_83_189800)
# Adding element type (line 756)

@norecursion
def _stypy_temp_lambda_84(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_84'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_84', 757, 25, True)
    # Passed parameters checking function
    _stypy_temp_lambda_84.stypy_localization = localization
    _stypy_temp_lambda_84.stypy_type_of_self = None
    _stypy_temp_lambda_84.stypy_type_store = module_type_store
    _stypy_temp_lambda_84.stypy_function_name = '_stypy_temp_lambda_84'
    _stypy_temp_lambda_84.stypy_param_names_list = ['x']
    _stypy_temp_lambda_84.stypy_varargs_param_name = None
    _stypy_temp_lambda_84.stypy_kwargs_param_name = None
    _stypy_temp_lambda_84.stypy_call_defaults = defaults
    _stypy_temp_lambda_84.stypy_call_varargs = varargs
    _stypy_temp_lambda_84.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_84', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_84', ['x'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'x' (line 757)
    x_189807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 66), 'x')
    comprehension_189808 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 757, 36), x_189807)
    # Assigning a type to the variable 'c' (line 757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 36), 'c', comprehension_189808)
    
    # Call to get(...): (line 757)
    # Processing the call arguments (line 757)
    unicode_189803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 757, 42), 'unicode', u'color')
    # Getting the type of 'None' (line 757)
    None_189804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 51), 'None', False)
    # Processing the call keyword arguments (line 757)
    kwargs_189805 = {}
    # Getting the type of 'c' (line 757)
    c_189801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 36), 'c', False)
    # Obtaining the member 'get' of a type (line 757)
    get_189802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 36), c_189801, 'get')
    # Calling get(args, kwargs) (line 757)
    get_call_result_189806 = invoke(stypy.reporting.localization.Localization(__file__, 757, 36), get_189802, *[unicode_189803, None_189804], **kwargs_189805)
    
    list_189809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 757, 36), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 757, 36), list_189809, get_call_result_189806)
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 25), 'stypy_return_type', list_189809)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_84' in the type store
    # Getting the type of 'stypy_return_type' (line 757)
    stypy_return_type_189810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 25), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_189810)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_84'
    return stypy_return_type_189810

# Assigning a type to the variable '_stypy_temp_lambda_84' (line 757)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 25), '_stypy_temp_lambda_84', _stypy_temp_lambda_84)
# Getting the type of '_stypy_temp_lambda_84' (line 757)
_stypy_temp_lambda_84_189811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 25), '_stypy_temp_lambda_84')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 756, 25), tuple_189792, _stypy_temp_lambda_84_189811)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 747, 18), dict_189738, (unicode_189791, tuple_189792))
# Adding element type (key, value) (line 747)
unicode_189812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 4), 'unicode', u'svg.image_noscale')

# Obtaining an instance of the builtin type 'tuple' (line 758)
tuple_189813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 26), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 758)
# Adding element type (line 758)
unicode_189814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 26), 'unicode', u'image.interpolation')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 758, 26), tuple_189813, unicode_189814)
# Adding element type (line 758)
# Getting the type of 'None' (line 758)
None_189815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 49), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 758, 26), tuple_189813, None_189815)
# Adding element type (line 758)
# Getting the type of 'None' (line 758)
None_189816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 55), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 758, 26), tuple_189813, None_189816)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 747, 18), dict_189738, (unicode_189812, tuple_189813))

# Assigning a type to the variable '_deprecated_map' (line 747)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 747, 0), '_deprecated_map', dict_189738)

# Assigning a Dict to a Name (line 761):

# Assigning a Dict to a Name (line 761):

# Obtaining an instance of the builtin type 'dict' (line 761)
dict_189817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 761, 25), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 761)

# Assigning a type to the variable '_deprecated_ignore_map' (line 761)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 0), '_deprecated_ignore_map', dict_189817)

# Assigning a Set to a Name (line 763):

# Assigning a Set to a Name (line 763):

# Obtaining an instance of the builtin type 'set' (line 763)
set_189818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 16), 'set')
# Adding type elements to the builtin type 'set' instance (line 763)
# Adding element type (line 763)
unicode_189819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 17), 'unicode', u'text.dvipnghack')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 763, 16), set_189818, unicode_189819)
# Adding element type (line 763)
unicode_189820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 36), 'unicode', u'legend.isaxes')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 763, 16), set_189818, unicode_189820)

# Assigning a type to the variable '_obsolete_set' (line 763)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 763, 0), '_obsolete_set', set_189818)

# Assigning a Set to a Name (line 766):

# Assigning a Set to a Name (line 766):

# Obtaining an instance of the builtin type 'set' (line 766)
set_189821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 18), 'set')
# Adding type elements to the builtin type 'set' instance (line 766)
# Adding element type (line 766)
unicode_189822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 19), 'unicode', u'axes.hold')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 766, 18), set_189821, unicode_189822)

# Assigning a type to the variable '_deprecated_set' (line 766)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 766, 0), '_deprecated_set', set_189821)

# Assigning a Call to a Name (line 768):

# Assigning a Call to a Name (line 768):

# Call to set(...): (line 768)
# Processing the call arguments (line 768)

# Call to chain(...): (line 768)
# Processing the call arguments (line 768)
# Getting the type of '_deprecated_ignore_map' (line 769)
_deprecated_ignore_map_189826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 4), '_deprecated_ignore_map', False)
# Getting the type of '_deprecated_map' (line 769)
_deprecated_map_189827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 28), '_deprecated_map', False)
# Getting the type of '_obsolete_set' (line 769)
_obsolete_set_189828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 45), '_obsolete_set', False)
# Processing the call keyword arguments (line 768)
kwargs_189829 = {}
# Getting the type of 'itertools' (line 768)
itertools_189824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 22), 'itertools', False)
# Obtaining the member 'chain' of a type (line 768)
chain_189825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 22), itertools_189824, 'chain')
# Calling chain(args, kwargs) (line 768)
chain_call_result_189830 = invoke(stypy.reporting.localization.Localization(__file__, 768, 22), chain_189825, *[_deprecated_ignore_map_189826, _deprecated_map_189827, _obsolete_set_189828], **kwargs_189829)

# Processing the call keyword arguments (line 768)
kwargs_189831 = {}
# Getting the type of 'set' (line 768)
set_189823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 18), 'set', False)
# Calling set(args, kwargs) (line 768)
set_call_result_189832 = invoke(stypy.reporting.localization.Localization(__file__, 768, 18), set_189823, *[chain_call_result_189830], **kwargs_189831)

# Assigning a type to the variable '_all_deprecated' (line 768)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 0), '_all_deprecated', set_call_result_189832)
# Declaration of the 'RcParams' class
# Getting the type of 'MutableMapping' (line 772)
MutableMapping_189833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 15), 'MutableMapping')
# Getting the type of 'dict' (line 772)
dict_189834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 31), 'dict')

class RcParams(MutableMapping_189833, dict_189834, ):
    unicode_189835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 779, (-1)), 'unicode', u'\n    A dictionary object including validation\n\n    validating functions are defined and associated with rc parameters in\n    :mod:`matplotlib.rcsetup`\n    ')
    
    # Assigning a Call to a Name (line 781):
    
    # Assigning a Str to a Name (line 784):
    
    # Assigning a Str to a Name (line 785):
    
    # Assigning a Str to a Name (line 787):
    
    # Assigning a Str to a Name (line 788):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 792, 4, False)
        # Assigning a type to the variable 'self' (line 793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 793, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RcParams.__init__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to update(...): (line 793)
        # Getting the type of 'args' (line 793)
        args_189838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 21), 'args', False)
        # Processing the call keyword arguments (line 793)
        # Getting the type of 'kwargs' (line 793)
        kwargs_189839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 29), 'kwargs', False)
        kwargs_189840 = {'kwargs_189839': kwargs_189839}
        # Getting the type of 'self' (line 793)
        self_189836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 8), 'self', False)
        # Obtaining the member 'update' of a type (line 793)
        update_189837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 8), self_189836, 'update')
        # Calling update(args, kwargs) (line 793)
        update_call_result_189841 = invoke(stypy.reporting.localization.Localization(__file__, 793, 8), update_189837, *[args_189838], **kwargs_189840)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __setitem__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setitem__'
        module_type_store = module_type_store.open_function_context('__setitem__', 795, 4, False)
        # Assigning a type to the variable 'self' (line 796)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RcParams.__setitem__.__dict__.__setitem__('stypy_localization', localization)
        RcParams.__setitem__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RcParams.__setitem__.__dict__.__setitem__('stypy_type_store', module_type_store)
        RcParams.__setitem__.__dict__.__setitem__('stypy_function_name', 'RcParams.__setitem__')
        RcParams.__setitem__.__dict__.__setitem__('stypy_param_names_list', ['key', 'val'])
        RcParams.__setitem__.__dict__.__setitem__('stypy_varargs_param_name', None)
        RcParams.__setitem__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RcParams.__setitem__.__dict__.__setitem__('stypy_call_defaults', defaults)
        RcParams.__setitem__.__dict__.__setitem__('stypy_call_varargs', varargs)
        RcParams.__setitem__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RcParams.__setitem__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RcParams.__setitem__', ['key', 'val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setitem__', localization, ['key', 'val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setitem__(...)' code ##################

        
        
        # SSA begins for try-except statement (line 796)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        
        # Getting the type of 'key' (line 797)
        key_189842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 15), 'key')
        # Getting the type of '_deprecated_map' (line 797)
        _deprecated_map_189843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 22), '_deprecated_map')
        # Applying the binary operator 'in' (line 797)
        result_contains_189844 = python_operator(stypy.reporting.localization.Localization(__file__, 797, 15), 'in', key_189842, _deprecated_map_189843)
        
        # Testing the type of an if condition (line 797)
        if_condition_189845 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 797, 12), result_contains_189844)
        # Assigning a type to the variable 'if_condition_189845' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 12), 'if_condition_189845', if_condition_189845)
        # SSA begins for if statement (line 797)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Tuple (line 798):
        
        # Assigning a Subscript to a Name (line 798):
        
        # Obtaining the type of the subscript
        int_189846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 16), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'key' (line 798)
        key_189847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 64), 'key')
        # Getting the type of '_deprecated_map' (line 798)
        _deprecated_map_189848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 48), '_deprecated_map')
        # Obtaining the member '__getitem__' of a type (line 798)
        getitem___189849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 48), _deprecated_map_189848, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 798)
        subscript_call_result_189850 = invoke(stypy.reporting.localization.Localization(__file__, 798, 48), getitem___189849, key_189847)
        
        # Obtaining the member '__getitem__' of a type (line 798)
        getitem___189851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 16), subscript_call_result_189850, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 798)
        subscript_call_result_189852 = invoke(stypy.reporting.localization.Localization(__file__, 798, 16), getitem___189851, int_189846)
        
        # Assigning a type to the variable 'tuple_var_assignment_188207' (line 798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 16), 'tuple_var_assignment_188207', subscript_call_result_189852)
        
        # Assigning a Subscript to a Name (line 798):
        
        # Obtaining the type of the subscript
        int_189853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 16), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'key' (line 798)
        key_189854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 64), 'key')
        # Getting the type of '_deprecated_map' (line 798)
        _deprecated_map_189855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 48), '_deprecated_map')
        # Obtaining the member '__getitem__' of a type (line 798)
        getitem___189856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 48), _deprecated_map_189855, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 798)
        subscript_call_result_189857 = invoke(stypy.reporting.localization.Localization(__file__, 798, 48), getitem___189856, key_189854)
        
        # Obtaining the member '__getitem__' of a type (line 798)
        getitem___189858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 16), subscript_call_result_189857, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 798)
        subscript_call_result_189859 = invoke(stypy.reporting.localization.Localization(__file__, 798, 16), getitem___189858, int_189853)
        
        # Assigning a type to the variable 'tuple_var_assignment_188208' (line 798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 16), 'tuple_var_assignment_188208', subscript_call_result_189859)
        
        # Assigning a Subscript to a Name (line 798):
        
        # Obtaining the type of the subscript
        int_189860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 16), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'key' (line 798)
        key_189861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 64), 'key')
        # Getting the type of '_deprecated_map' (line 798)
        _deprecated_map_189862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 48), '_deprecated_map')
        # Obtaining the member '__getitem__' of a type (line 798)
        getitem___189863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 48), _deprecated_map_189862, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 798)
        subscript_call_result_189864 = invoke(stypy.reporting.localization.Localization(__file__, 798, 48), getitem___189863, key_189861)
        
        # Obtaining the member '__getitem__' of a type (line 798)
        getitem___189865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 16), subscript_call_result_189864, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 798)
        subscript_call_result_189866 = invoke(stypy.reporting.localization.Localization(__file__, 798, 16), getitem___189865, int_189860)
        
        # Assigning a type to the variable 'tuple_var_assignment_188209' (line 798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 16), 'tuple_var_assignment_188209', subscript_call_result_189866)
        
        # Assigning a Name to a Name (line 798):
        # Getting the type of 'tuple_var_assignment_188207' (line 798)
        tuple_var_assignment_188207_189867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 16), 'tuple_var_assignment_188207')
        # Assigning a type to the variable 'alt_key' (line 798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 16), 'alt_key', tuple_var_assignment_188207_189867)
        
        # Assigning a Name to a Name (line 798):
        # Getting the type of 'tuple_var_assignment_188208' (line 798)
        tuple_var_assignment_188208_189868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 16), 'tuple_var_assignment_188208')
        # Assigning a type to the variable 'alt_val' (line 798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 25), 'alt_val', tuple_var_assignment_188208_189868)
        
        # Assigning a Name to a Name (line 798):
        # Getting the type of 'tuple_var_assignment_188209' (line 798)
        tuple_var_assignment_188209_189869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 16), 'tuple_var_assignment_188209')
        # Assigning a type to the variable 'inverse_alt' (line 798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 34), 'inverse_alt', tuple_var_assignment_188209_189869)
        
        # Call to warn(...): (line 799)
        # Processing the call arguments (line 799)
        # Getting the type of 'self' (line 799)
        self_189872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 30), 'self', False)
        # Obtaining the member 'msg_depr' of a type (line 799)
        msg_depr_189873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 30), self_189872, 'msg_depr')
        
        # Obtaining an instance of the builtin type 'tuple' (line 799)
        tuple_189874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, 47), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 799)
        # Adding element type (line 799)
        # Getting the type of 'key' (line 799)
        key_189875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 47), 'key', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 799, 47), tuple_189874, key_189875)
        # Adding element type (line 799)
        # Getting the type of 'alt_key' (line 799)
        alt_key_189876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 52), 'alt_key', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 799, 47), tuple_189874, alt_key_189876)
        
        # Applying the binary operator '%' (line 799)
        result_mod_189877 = python_operator(stypy.reporting.localization.Localization(__file__, 799, 30), '%', msg_depr_189873, tuple_189874)
        
        # Getting the type of 'mplDeprecation' (line 800)
        mplDeprecation_189878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 30), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 799)
        kwargs_189879 = {}
        # Getting the type of 'warnings' (line 799)
        warnings_189870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 799)
        warn_189871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 16), warnings_189870, 'warn')
        # Calling warn(args, kwargs) (line 799)
        warn_call_result_189880 = invoke(stypy.reporting.localization.Localization(__file__, 799, 16), warn_189871, *[result_mod_189877, mplDeprecation_189878], **kwargs_189879)
        
        
        # Assigning a Name to a Name (line 801):
        
        # Assigning a Name to a Name (line 801):
        # Getting the type of 'alt_key' (line 801)
        alt_key_189881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 22), 'alt_key')
        # Assigning a type to the variable 'key' (line 801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 801, 16), 'key', alt_key_189881)
        
        # Assigning a Call to a Name (line 802):
        
        # Assigning a Call to a Name (line 802):
        
        # Call to alt_val(...): (line 802)
        # Processing the call arguments (line 802)
        # Getting the type of 'val' (line 802)
        val_189883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 30), 'val', False)
        # Processing the call keyword arguments (line 802)
        kwargs_189884 = {}
        # Getting the type of 'alt_val' (line 802)
        alt_val_189882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 22), 'alt_val', False)
        # Calling alt_val(args, kwargs) (line 802)
        alt_val_call_result_189885 = invoke(stypy.reporting.localization.Localization(__file__, 802, 22), alt_val_189882, *[val_189883], **kwargs_189884)
        
        # Assigning a type to the variable 'val' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 16), 'val', alt_val_call_result_189885)
        # SSA branch for the else part of an if statement (line 797)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'key' (line 803)
        key_189886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 17), 'key')
        # Getting the type of '_deprecated_set' (line 803)
        _deprecated_set_189887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 24), '_deprecated_set')
        # Applying the binary operator 'in' (line 803)
        result_contains_189888 = python_operator(stypy.reporting.localization.Localization(__file__, 803, 17), 'in', key_189886, _deprecated_set_189887)
        
        
        # Getting the type of 'val' (line 803)
        val_189889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 44), 'val')
        # Getting the type of 'None' (line 803)
        None_189890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 55), 'None')
        # Applying the binary operator 'isnot' (line 803)
        result_is_not_189891 = python_operator(stypy.reporting.localization.Localization(__file__, 803, 44), 'isnot', val_189889, None_189890)
        
        # Applying the binary operator 'and' (line 803)
        result_and_keyword_189892 = python_operator(stypy.reporting.localization.Localization(__file__, 803, 17), 'and', result_contains_189888, result_is_not_189891)
        
        # Testing the type of an if condition (line 803)
        if_condition_189893 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 803, 17), result_and_keyword_189892)
        # Assigning a type to the variable 'if_condition_189893' (line 803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 17), 'if_condition_189893', if_condition_189893)
        # SSA begins for if statement (line 803)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 804)
        # Processing the call arguments (line 804)
        # Getting the type of 'self' (line 804)
        self_189896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 30), 'self', False)
        # Obtaining the member 'msg_depr_set' of a type (line 804)
        msg_depr_set_189897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 30), self_189896, 'msg_depr_set')
        # Getting the type of 'key' (line 804)
        key_189898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 50), 'key', False)
        # Applying the binary operator '%' (line 804)
        result_mod_189899 = python_operator(stypy.reporting.localization.Localization(__file__, 804, 30), '%', msg_depr_set_189897, key_189898)
        
        # Getting the type of 'mplDeprecation' (line 805)
        mplDeprecation_189900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 30), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 804)
        kwargs_189901 = {}
        # Getting the type of 'warnings' (line 804)
        warnings_189894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 804)
        warn_189895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 16), warnings_189894, 'warn')
        # Calling warn(args, kwargs) (line 804)
        warn_call_result_189902 = invoke(stypy.reporting.localization.Localization(__file__, 804, 16), warn_189895, *[result_mod_189899, mplDeprecation_189900], **kwargs_189901)
        
        # SSA branch for the else part of an if statement (line 803)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'key' (line 806)
        key_189903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 17), 'key')
        # Getting the type of '_deprecated_ignore_map' (line 806)
        _deprecated_ignore_map_189904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 24), '_deprecated_ignore_map')
        # Applying the binary operator 'in' (line 806)
        result_contains_189905 = python_operator(stypy.reporting.localization.Localization(__file__, 806, 17), 'in', key_189903, _deprecated_ignore_map_189904)
        
        # Testing the type of an if condition (line 806)
        if_condition_189906 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 806, 17), result_contains_189905)
        # Assigning a type to the variable 'if_condition_189906' (line 806)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 17), 'if_condition_189906', if_condition_189906)
        # SSA begins for if statement (line 806)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 807):
        
        # Assigning a Subscript to a Name (line 807):
        
        # Obtaining the type of the subscript
        # Getting the type of 'key' (line 807)
        key_189907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 45), 'key')
        # Getting the type of '_deprecated_ignore_map' (line 807)
        _deprecated_ignore_map_189908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 22), '_deprecated_ignore_map')
        # Obtaining the member '__getitem__' of a type (line 807)
        getitem___189909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 22), _deprecated_ignore_map_189908, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 807)
        subscript_call_result_189910 = invoke(stypy.reporting.localization.Localization(__file__, 807, 22), getitem___189909, key_189907)
        
        # Assigning a type to the variable 'alt' (line 807)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 807, 16), 'alt', subscript_call_result_189910)
        
        # Call to warn(...): (line 808)
        # Processing the call arguments (line 808)
        # Getting the type of 'self' (line 808)
        self_189913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 30), 'self', False)
        # Obtaining the member 'msg_depr_ignore' of a type (line 808)
        msg_depr_ignore_189914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 30), self_189913, 'msg_depr_ignore')
        
        # Obtaining an instance of the builtin type 'tuple' (line 808)
        tuple_189915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 54), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 808)
        # Adding element type (line 808)
        # Getting the type of 'key' (line 808)
        key_189916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 54), 'key', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 808, 54), tuple_189915, key_189916)
        # Adding element type (line 808)
        # Getting the type of 'alt' (line 808)
        alt_189917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 59), 'alt', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 808, 54), tuple_189915, alt_189917)
        
        # Applying the binary operator '%' (line 808)
        result_mod_189918 = python_operator(stypy.reporting.localization.Localization(__file__, 808, 30), '%', msg_depr_ignore_189914, tuple_189915)
        
        # Getting the type of 'mplDeprecation' (line 809)
        mplDeprecation_189919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 30), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 808)
        kwargs_189920 = {}
        # Getting the type of 'warnings' (line 808)
        warnings_189911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 808)
        warn_189912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 16), warnings_189911, 'warn')
        # Calling warn(args, kwargs) (line 808)
        warn_call_result_189921 = invoke(stypy.reporting.localization.Localization(__file__, 808, 16), warn_189912, *[result_mod_189918, mplDeprecation_189919], **kwargs_189920)
        
        # Assigning a type to the variable 'stypy_return_type' (line 810)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 810, 16), 'stypy_return_type', types.NoneType)
        # SSA branch for the else part of an if statement (line 806)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'key' (line 811)
        key_189922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 17), 'key')
        # Getting the type of '_obsolete_set' (line 811)
        _obsolete_set_189923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 24), '_obsolete_set')
        # Applying the binary operator 'in' (line 811)
        result_contains_189924 = python_operator(stypy.reporting.localization.Localization(__file__, 811, 17), 'in', key_189922, _obsolete_set_189923)
        
        # Testing the type of an if condition (line 811)
        if_condition_189925 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 811, 17), result_contains_189924)
        # Assigning a type to the variable 'if_condition_189925' (line 811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 17), 'if_condition_189925', if_condition_189925)
        # SSA begins for if statement (line 811)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 812)
        # Processing the call arguments (line 812)
        # Getting the type of 'self' (line 812)
        self_189928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 30), 'self', False)
        # Obtaining the member 'msg_obsolete' of a type (line 812)
        msg_obsolete_189929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 30), self_189928, 'msg_obsolete')
        
        # Obtaining an instance of the builtin type 'tuple' (line 812)
        tuple_189930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 51), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 812)
        # Adding element type (line 812)
        # Getting the type of 'key' (line 812)
        key_189931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 51), 'key', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 812, 51), tuple_189930, key_189931)
        
        # Applying the binary operator '%' (line 812)
        result_mod_189932 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 30), '%', msg_obsolete_189929, tuple_189930)
        
        # Getting the type of 'mplDeprecation' (line 813)
        mplDeprecation_189933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 30), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 812)
        kwargs_189934 = {}
        # Getting the type of 'warnings' (line 812)
        warnings_189926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 812)
        warn_189927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 16), warnings_189926, 'warn')
        # Calling warn(args, kwargs) (line 812)
        warn_call_result_189935 = invoke(stypy.reporting.localization.Localization(__file__, 812, 16), warn_189927, *[result_mod_189932, mplDeprecation_189933], **kwargs_189934)
        
        # Assigning a type to the variable 'stypy_return_type' (line 814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 16), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 811)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 806)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 803)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 797)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 815)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 816):
        
        # Assigning a Call to a Name (line 816):
        
        # Call to (...): (line 816)
        # Processing the call arguments (line 816)
        # Getting the type of 'val' (line 816)
        val_189941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 42), 'val', False)
        # Processing the call keyword arguments (line 816)
        kwargs_189942 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'key' (line 816)
        key_189936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 37), 'key', False)
        # Getting the type of 'self' (line 816)
        self_189937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 23), 'self', False)
        # Obtaining the member 'validate' of a type (line 816)
        validate_189938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 816, 23), self_189937, 'validate')
        # Obtaining the member '__getitem__' of a type (line 816)
        getitem___189939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 816, 23), validate_189938, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 816)
        subscript_call_result_189940 = invoke(stypy.reporting.localization.Localization(__file__, 816, 23), getitem___189939, key_189936)
        
        # Calling (args, kwargs) (line 816)
        _call_result_189943 = invoke(stypy.reporting.localization.Localization(__file__, 816, 23), subscript_call_result_189940, *[val_189941], **kwargs_189942)
        
        # Assigning a type to the variable 'cval' (line 816)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 816, 16), 'cval', _call_result_189943)
        # SSA branch for the except part of a try statement (line 815)
        # SSA branch for the except 'ValueError' branch of a try statement (line 815)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'ValueError' (line 817)
        ValueError_189944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 19), 'ValueError')
        # Assigning a type to the variable 've' (line 817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 12), 've', ValueError_189944)
        
        # Call to ValueError(...): (line 818)
        # Processing the call arguments (line 818)
        unicode_189946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 33), 'unicode', u'Key %s: %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 818)
        tuple_189947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 49), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 818)
        # Adding element type (line 818)
        # Getting the type of 'key' (line 818)
        key_189948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 49), 'key', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 818, 49), tuple_189947, key_189948)
        # Adding element type (line 818)
        
        # Call to str(...): (line 818)
        # Processing the call arguments (line 818)
        # Getting the type of 've' (line 818)
        ve_189950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 58), 've', False)
        # Processing the call keyword arguments (line 818)
        kwargs_189951 = {}
        # Getting the type of 'str' (line 818)
        str_189949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 54), 'str', False)
        # Calling str(args, kwargs) (line 818)
        str_call_result_189952 = invoke(stypy.reporting.localization.Localization(__file__, 818, 54), str_189949, *[ve_189950], **kwargs_189951)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 818, 49), tuple_189947, str_call_result_189952)
        
        # Applying the binary operator '%' (line 818)
        result_mod_189953 = python_operator(stypy.reporting.localization.Localization(__file__, 818, 33), '%', unicode_189946, tuple_189947)
        
        # Processing the call keyword arguments (line 818)
        kwargs_189954 = {}
        # Getting the type of 'ValueError' (line 818)
        ValueError_189945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 818)
        ValueError_call_result_189955 = invoke(stypy.reporting.localization.Localization(__file__, 818, 22), ValueError_189945, *[result_mod_189953], **kwargs_189954)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 818, 16), ValueError_call_result_189955, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 815)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __setitem__(...): (line 819)
        # Processing the call arguments (line 819)
        # Getting the type of 'self' (line 819)
        self_189958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 29), 'self', False)
        # Getting the type of 'key' (line 819)
        key_189959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 35), 'key', False)
        # Getting the type of 'cval' (line 819)
        cval_189960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 40), 'cval', False)
        # Processing the call keyword arguments (line 819)
        kwargs_189961 = {}
        # Getting the type of 'dict' (line 819)
        dict_189956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 12), 'dict', False)
        # Obtaining the member '__setitem__' of a type (line 819)
        setitem___189957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 12), dict_189956, '__setitem__')
        # Calling __setitem__(args, kwargs) (line 819)
        setitem___call_result_189962 = invoke(stypy.reporting.localization.Localization(__file__, 819, 12), setitem___189957, *[self_189958, key_189959, cval_189960], **kwargs_189961)
        
        # SSA branch for the except part of a try statement (line 796)
        # SSA branch for the except 'KeyError' branch of a try statement (line 796)
        module_type_store.open_ssa_branch('except')
        
        # Call to KeyError(...): (line 821)
        # Processing the call arguments (line 821)
        unicode_189964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 16), 'unicode', u'%s is not a valid rc parameter. See rcParams.keys() for a list of valid parameters.')
        
        # Obtaining an instance of the builtin type 'tuple' (line 823)
        tuple_189965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, 47), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 823)
        # Adding element type (line 823)
        # Getting the type of 'key' (line 823)
        key_189966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 47), 'key', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 823, 47), tuple_189965, key_189966)
        
        # Applying the binary operator '%' (line 822)
        result_mod_189967 = python_operator(stypy.reporting.localization.Localization(__file__, 822, 16), '%', unicode_189964, tuple_189965)
        
        # Processing the call keyword arguments (line 821)
        kwargs_189968 = {}
        # Getting the type of 'KeyError' (line 821)
        KeyError_189963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 18), 'KeyError', False)
        # Calling KeyError(args, kwargs) (line 821)
        KeyError_call_result_189969 = invoke(stypy.reporting.localization.Localization(__file__, 821, 18), KeyError_189963, *[result_mod_189967], **kwargs_189968)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 821, 12), KeyError_call_result_189969, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 796)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__setitem__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setitem__' in the type store
        # Getting the type of 'stypy_return_type' (line 795)
        stypy_return_type_189970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_189970)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setitem__'
        return stypy_return_type_189970


    @norecursion
    def __getitem__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getitem__'
        module_type_store = module_type_store.open_function_context('__getitem__', 825, 4, False)
        # Assigning a type to the variable 'self' (line 826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RcParams.__getitem__.__dict__.__setitem__('stypy_localization', localization)
        RcParams.__getitem__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RcParams.__getitem__.__dict__.__setitem__('stypy_type_store', module_type_store)
        RcParams.__getitem__.__dict__.__setitem__('stypy_function_name', 'RcParams.__getitem__')
        RcParams.__getitem__.__dict__.__setitem__('stypy_param_names_list', ['key'])
        RcParams.__getitem__.__dict__.__setitem__('stypy_varargs_param_name', None)
        RcParams.__getitem__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RcParams.__getitem__.__dict__.__setitem__('stypy_call_defaults', defaults)
        RcParams.__getitem__.__dict__.__setitem__('stypy_call_varargs', varargs)
        RcParams.__getitem__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RcParams.__getitem__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RcParams.__getitem__', ['key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getitem__', localization, ['key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getitem__(...)' code ##################

        
        # Assigning a Name to a Name (line 826):
        
        # Assigning a Name to a Name (line 826):
        # Getting the type of 'None' (line 826)
        None_189971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 22), 'None')
        # Assigning a type to the variable 'inverse_alt' (line 826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), 'inverse_alt', None_189971)
        
        
        # Getting the type of 'key' (line 827)
        key_189972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 11), 'key')
        # Getting the type of '_deprecated_map' (line 827)
        _deprecated_map_189973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 18), '_deprecated_map')
        # Applying the binary operator 'in' (line 827)
        result_contains_189974 = python_operator(stypy.reporting.localization.Localization(__file__, 827, 11), 'in', key_189972, _deprecated_map_189973)
        
        # Testing the type of an if condition (line 827)
        if_condition_189975 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 827, 8), result_contains_189974)
        # Assigning a type to the variable 'if_condition_189975' (line 827)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 827, 8), 'if_condition_189975', if_condition_189975)
        # SSA begins for if statement (line 827)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Tuple (line 828):
        
        # Assigning a Subscript to a Name (line 828):
        
        # Obtaining the type of the subscript
        int_189976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 12), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'key' (line 828)
        key_189977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 60), 'key')
        # Getting the type of '_deprecated_map' (line 828)
        _deprecated_map_189978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 44), '_deprecated_map')
        # Obtaining the member '__getitem__' of a type (line 828)
        getitem___189979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 44), _deprecated_map_189978, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 828)
        subscript_call_result_189980 = invoke(stypy.reporting.localization.Localization(__file__, 828, 44), getitem___189979, key_189977)
        
        # Obtaining the member '__getitem__' of a type (line 828)
        getitem___189981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 12), subscript_call_result_189980, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 828)
        subscript_call_result_189982 = invoke(stypy.reporting.localization.Localization(__file__, 828, 12), getitem___189981, int_189976)
        
        # Assigning a type to the variable 'tuple_var_assignment_188210' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 12), 'tuple_var_assignment_188210', subscript_call_result_189982)
        
        # Assigning a Subscript to a Name (line 828):
        
        # Obtaining the type of the subscript
        int_189983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 12), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'key' (line 828)
        key_189984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 60), 'key')
        # Getting the type of '_deprecated_map' (line 828)
        _deprecated_map_189985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 44), '_deprecated_map')
        # Obtaining the member '__getitem__' of a type (line 828)
        getitem___189986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 44), _deprecated_map_189985, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 828)
        subscript_call_result_189987 = invoke(stypy.reporting.localization.Localization(__file__, 828, 44), getitem___189986, key_189984)
        
        # Obtaining the member '__getitem__' of a type (line 828)
        getitem___189988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 12), subscript_call_result_189987, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 828)
        subscript_call_result_189989 = invoke(stypy.reporting.localization.Localization(__file__, 828, 12), getitem___189988, int_189983)
        
        # Assigning a type to the variable 'tuple_var_assignment_188211' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 12), 'tuple_var_assignment_188211', subscript_call_result_189989)
        
        # Assigning a Subscript to a Name (line 828):
        
        # Obtaining the type of the subscript
        int_189990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 12), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'key' (line 828)
        key_189991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 60), 'key')
        # Getting the type of '_deprecated_map' (line 828)
        _deprecated_map_189992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 44), '_deprecated_map')
        # Obtaining the member '__getitem__' of a type (line 828)
        getitem___189993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 44), _deprecated_map_189992, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 828)
        subscript_call_result_189994 = invoke(stypy.reporting.localization.Localization(__file__, 828, 44), getitem___189993, key_189991)
        
        # Obtaining the member '__getitem__' of a type (line 828)
        getitem___189995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 12), subscript_call_result_189994, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 828)
        subscript_call_result_189996 = invoke(stypy.reporting.localization.Localization(__file__, 828, 12), getitem___189995, int_189990)
        
        # Assigning a type to the variable 'tuple_var_assignment_188212' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 12), 'tuple_var_assignment_188212', subscript_call_result_189996)
        
        # Assigning a Name to a Name (line 828):
        # Getting the type of 'tuple_var_assignment_188210' (line 828)
        tuple_var_assignment_188210_189997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 12), 'tuple_var_assignment_188210')
        # Assigning a type to the variable 'alt_key' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 12), 'alt_key', tuple_var_assignment_188210_189997)
        
        # Assigning a Name to a Name (line 828):
        # Getting the type of 'tuple_var_assignment_188211' (line 828)
        tuple_var_assignment_188211_189998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 12), 'tuple_var_assignment_188211')
        # Assigning a type to the variable 'alt_val' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 21), 'alt_val', tuple_var_assignment_188211_189998)
        
        # Assigning a Name to a Name (line 828):
        # Getting the type of 'tuple_var_assignment_188212' (line 828)
        tuple_var_assignment_188212_189999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 12), 'tuple_var_assignment_188212')
        # Assigning a type to the variable 'inverse_alt' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 30), 'inverse_alt', tuple_var_assignment_188212_189999)
        
        # Call to warn(...): (line 829)
        # Processing the call arguments (line 829)
        # Getting the type of 'self' (line 829)
        self_190002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 26), 'self', False)
        # Obtaining the member 'msg_depr' of a type (line 829)
        msg_depr_190003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 26), self_190002, 'msg_depr')
        
        # Obtaining an instance of the builtin type 'tuple' (line 829)
        tuple_190004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 43), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 829)
        # Adding element type (line 829)
        # Getting the type of 'key' (line 829)
        key_190005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 43), 'key', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 829, 43), tuple_190004, key_190005)
        # Adding element type (line 829)
        # Getting the type of 'alt_key' (line 829)
        alt_key_190006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 48), 'alt_key', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 829, 43), tuple_190004, alt_key_190006)
        
        # Applying the binary operator '%' (line 829)
        result_mod_190007 = python_operator(stypy.reporting.localization.Localization(__file__, 829, 26), '%', msg_depr_190003, tuple_190004)
        
        # Getting the type of 'mplDeprecation' (line 830)
        mplDeprecation_190008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 26), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 829)
        kwargs_190009 = {}
        # Getting the type of 'warnings' (line 829)
        warnings_190000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 829)
        warn_190001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 12), warnings_190000, 'warn')
        # Calling warn(args, kwargs) (line 829)
        warn_call_result_190010 = invoke(stypy.reporting.localization.Localization(__file__, 829, 12), warn_190001, *[result_mod_190007, mplDeprecation_190008], **kwargs_190009)
        
        
        # Assigning a Name to a Name (line 831):
        
        # Assigning a Name to a Name (line 831):
        # Getting the type of 'alt_key' (line 831)
        alt_key_190011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 18), 'alt_key')
        # Assigning a type to the variable 'key' (line 831)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 831, 12), 'key', alt_key_190011)
        # SSA branch for the else part of an if statement (line 827)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'key' (line 833)
        key_190012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 13), 'key')
        # Getting the type of '_deprecated_ignore_map' (line 833)
        _deprecated_ignore_map_190013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 20), '_deprecated_ignore_map')
        # Applying the binary operator 'in' (line 833)
        result_contains_190014 = python_operator(stypy.reporting.localization.Localization(__file__, 833, 13), 'in', key_190012, _deprecated_ignore_map_190013)
        
        # Testing the type of an if condition (line 833)
        if_condition_190015 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 833, 13), result_contains_190014)
        # Assigning a type to the variable 'if_condition_190015' (line 833)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 833, 13), 'if_condition_190015', if_condition_190015)
        # SSA begins for if statement (line 833)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 834):
        
        # Assigning a Subscript to a Name (line 834):
        
        # Obtaining the type of the subscript
        # Getting the type of 'key' (line 834)
        key_190016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 41), 'key')
        # Getting the type of '_deprecated_ignore_map' (line 834)
        _deprecated_ignore_map_190017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 18), '_deprecated_ignore_map')
        # Obtaining the member '__getitem__' of a type (line 834)
        getitem___190018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 18), _deprecated_ignore_map_190017, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 834)
        subscript_call_result_190019 = invoke(stypy.reporting.localization.Localization(__file__, 834, 18), getitem___190018, key_190016)
        
        # Assigning a type to the variable 'alt' (line 834)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 834, 12), 'alt', subscript_call_result_190019)
        
        # Call to warn(...): (line 835)
        # Processing the call arguments (line 835)
        # Getting the type of 'self' (line 835)
        self_190022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 26), 'self', False)
        # Obtaining the member 'msg_depr_ignore' of a type (line 835)
        msg_depr_ignore_190023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 26), self_190022, 'msg_depr_ignore')
        
        # Obtaining an instance of the builtin type 'tuple' (line 835)
        tuple_190024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 835, 50), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 835)
        # Adding element type (line 835)
        # Getting the type of 'key' (line 835)
        key_190025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 50), 'key', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 835, 50), tuple_190024, key_190025)
        # Adding element type (line 835)
        # Getting the type of 'alt' (line 835)
        alt_190026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 55), 'alt', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 835, 50), tuple_190024, alt_190026)
        
        # Applying the binary operator '%' (line 835)
        result_mod_190027 = python_operator(stypy.reporting.localization.Localization(__file__, 835, 26), '%', msg_depr_ignore_190023, tuple_190024)
        
        # Getting the type of 'mplDeprecation' (line 836)
        mplDeprecation_190028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 26), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 835)
        kwargs_190029 = {}
        # Getting the type of 'warnings' (line 835)
        warnings_190020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 835)
        warn_190021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 12), warnings_190020, 'warn')
        # Calling warn(args, kwargs) (line 835)
        warn_call_result_190030 = invoke(stypy.reporting.localization.Localization(__file__, 835, 12), warn_190021, *[result_mod_190027, mplDeprecation_190028], **kwargs_190029)
        
        
        # Assigning a Name to a Name (line 837):
        
        # Assigning a Name to a Name (line 837):
        # Getting the type of 'alt' (line 837)
        alt_190031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 18), 'alt')
        # Assigning a type to the variable 'key' (line 837)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 837, 12), 'key', alt_190031)
        # SSA branch for the else part of an if statement (line 833)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'key' (line 839)
        key_190032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 13), 'key')
        # Getting the type of '_obsolete_set' (line 839)
        _obsolete_set_190033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 20), '_obsolete_set')
        # Applying the binary operator 'in' (line 839)
        result_contains_190034 = python_operator(stypy.reporting.localization.Localization(__file__, 839, 13), 'in', key_190032, _obsolete_set_190033)
        
        # Testing the type of an if condition (line 839)
        if_condition_190035 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 839, 13), result_contains_190034)
        # Assigning a type to the variable 'if_condition_190035' (line 839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 13), 'if_condition_190035', if_condition_190035)
        # SSA begins for if statement (line 839)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 840)
        # Processing the call arguments (line 840)
        # Getting the type of 'self' (line 840)
        self_190038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 26), 'self', False)
        # Obtaining the member 'msg_obsolete' of a type (line 840)
        msg_obsolete_190039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 840, 26), self_190038, 'msg_obsolete')
        
        # Obtaining an instance of the builtin type 'tuple' (line 840)
        tuple_190040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 47), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 840)
        # Adding element type (line 840)
        # Getting the type of 'key' (line 840)
        key_190041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 47), 'key', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 840, 47), tuple_190040, key_190041)
        
        # Applying the binary operator '%' (line 840)
        result_mod_190042 = python_operator(stypy.reporting.localization.Localization(__file__, 840, 26), '%', msg_obsolete_190039, tuple_190040)
        
        # Getting the type of 'mplDeprecation' (line 841)
        mplDeprecation_190043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 26), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 840)
        kwargs_190044 = {}
        # Getting the type of 'warnings' (line 840)
        warnings_190036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 840)
        warn_190037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 840, 12), warnings_190036, 'warn')
        # Calling warn(args, kwargs) (line 840)
        warn_call_result_190045 = invoke(stypy.reporting.localization.Localization(__file__, 840, 12), warn_190037, *[result_mod_190042, mplDeprecation_190043], **kwargs_190044)
        
        # Getting the type of 'None' (line 842)
        None_190046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 842)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 842, 12), 'stypy_return_type', None_190046)
        # SSA join for if statement (line 839)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 833)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 827)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 844):
        
        # Assigning a Call to a Name (line 844):
        
        # Call to __getitem__(...): (line 844)
        # Processing the call arguments (line 844)
        # Getting the type of 'self' (line 844)
        self_190049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 31), 'self', False)
        # Getting the type of 'key' (line 844)
        key_190050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 37), 'key', False)
        # Processing the call keyword arguments (line 844)
        kwargs_190051 = {}
        # Getting the type of 'dict' (line 844)
        dict_190047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 14), 'dict', False)
        # Obtaining the member '__getitem__' of a type (line 844)
        getitem___190048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 844, 14), dict_190047, '__getitem__')
        # Calling __getitem__(args, kwargs) (line 844)
        getitem___call_result_190052 = invoke(stypy.reporting.localization.Localization(__file__, 844, 14), getitem___190048, *[self_190049, key_190050], **kwargs_190051)
        
        # Assigning a type to the variable 'val' (line 844)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 844, 8), 'val', getitem___call_result_190052)
        
        # Type idiom detected: calculating its left and rigth part (line 845)
        # Getting the type of 'inverse_alt' (line 845)
        inverse_alt_190053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 8), 'inverse_alt')
        # Getting the type of 'None' (line 845)
        None_190054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 30), 'None')
        
        (may_be_190055, more_types_in_union_190056) = may_not_be_none(inverse_alt_190053, None_190054)

        if may_be_190055:

            if more_types_in_union_190056:
                # Runtime conditional SSA (line 845)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to inverse_alt(...): (line 846)
            # Processing the call arguments (line 846)
            # Getting the type of 'val' (line 846)
            val_190058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 31), 'val', False)
            # Processing the call keyword arguments (line 846)
            kwargs_190059 = {}
            # Getting the type of 'inverse_alt' (line 846)
            inverse_alt_190057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 19), 'inverse_alt', False)
            # Calling inverse_alt(args, kwargs) (line 846)
            inverse_alt_call_result_190060 = invoke(stypy.reporting.localization.Localization(__file__, 846, 19), inverse_alt_190057, *[val_190058], **kwargs_190059)
            
            # Assigning a type to the variable 'stypy_return_type' (line 846)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 846, 12), 'stypy_return_type', inverse_alt_call_result_190060)

            if more_types_in_union_190056:
                # Runtime conditional SSA for else branch (line 845)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_190055) or more_types_in_union_190056):
            # Getting the type of 'val' (line 848)
            val_190061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 19), 'val')
            # Assigning a type to the variable 'stypy_return_type' (line 848)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 848, 12), 'stypy_return_type', val_190061)

            if (may_be_190055 and more_types_in_union_190056):
                # SSA join for if statement (line 845)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '__getitem__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getitem__' in the type store
        # Getting the type of 'stypy_return_type' (line 825)
        stypy_return_type_190062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_190062)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getitem__'
        return stypy_return_type_190062


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 850, 4, False)
        # Assigning a type to the variable 'self' (line 851)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 851, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RcParams.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        RcParams.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RcParams.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        RcParams.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'RcParams.stypy__repr__')
        RcParams.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        RcParams.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        RcParams.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RcParams.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        RcParams.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        RcParams.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RcParams.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RcParams.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 851, 8))
        
        # 'import pprint' statement (line 851)
        import pprint

        import_module(stypy.reporting.localization.Localization(__file__, 851, 8), 'pprint', pprint, module_type_store)
        
        
        # Assigning a Attribute to a Name (line 852):
        
        # Assigning a Attribute to a Name (line 852):
        # Getting the type of 'self' (line 852)
        self_190063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 21), 'self')
        # Obtaining the member '__class__' of a type (line 852)
        class___190064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 21), self_190063, '__class__')
        # Obtaining the member '__name__' of a type (line 852)
        name___190065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 21), class___190064, '__name__')
        # Assigning a type to the variable 'class_name' (line 852)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 852, 8), 'class_name', name___190065)
        
        # Assigning a BinOp to a Name (line 853):
        
        # Assigning a BinOp to a Name (line 853):
        
        # Call to len(...): (line 853)
        # Processing the call arguments (line 853)
        # Getting the type of 'class_name' (line 853)
        class_name_190067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 21), 'class_name', False)
        # Processing the call keyword arguments (line 853)
        kwargs_190068 = {}
        # Getting the type of 'len' (line 853)
        len_190066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 17), 'len', False)
        # Calling len(args, kwargs) (line 853)
        len_call_result_190069 = invoke(stypy.reporting.localization.Localization(__file__, 853, 17), len_190066, *[class_name_190067], **kwargs_190068)
        
        int_190070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 853, 35), 'int')
        # Applying the binary operator '+' (line 853)
        result_add_190071 = python_operator(stypy.reporting.localization.Localization(__file__, 853, 17), '+', len_call_result_190069, int_190070)
        
        # Assigning a type to the variable 'indent' (line 853)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 853, 8), 'indent', result_add_190071)
        
        # Assigning a Call to a Name (line 854):
        
        # Assigning a Call to a Name (line 854):
        
        # Call to split(...): (line 854)
        # Processing the call arguments (line 854)
        unicode_190087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 855, 61), 'unicode', u'\n')
        # Processing the call keyword arguments (line 854)
        kwargs_190088 = {}
        
        # Call to pformat(...): (line 854)
        # Processing the call arguments (line 854)
        
        # Call to dict(...): (line 854)
        # Processing the call arguments (line 854)
        # Getting the type of 'self' (line 854)
        self_190075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 41), 'self', False)
        # Processing the call keyword arguments (line 854)
        kwargs_190076 = {}
        # Getting the type of 'dict' (line 854)
        dict_190074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 36), 'dict', False)
        # Calling dict(args, kwargs) (line 854)
        dict_call_result_190077 = invoke(stypy.reporting.localization.Localization(__file__, 854, 36), dict_190074, *[self_190075], **kwargs_190076)
        
        # Processing the call keyword arguments (line 854)
        int_190078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 854, 55), 'int')
        keyword_190079 = int_190078
        int_190080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 855, 42), 'int')
        # Getting the type of 'indent' (line 855)
        indent_190081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 47), 'indent', False)
        # Applying the binary operator '-' (line 855)
        result_sub_190082 = python_operator(stypy.reporting.localization.Localization(__file__, 855, 42), '-', int_190080, indent_190081)
        
        keyword_190083 = result_sub_190082
        kwargs_190084 = {'width': keyword_190083, 'indent': keyword_190079}
        # Getting the type of 'pprint' (line 854)
        pprint_190072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 21), 'pprint', False)
        # Obtaining the member 'pformat' of a type (line 854)
        pformat_190073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 854, 21), pprint_190072, 'pformat')
        # Calling pformat(args, kwargs) (line 854)
        pformat_call_result_190085 = invoke(stypy.reporting.localization.Localization(__file__, 854, 21), pformat_190073, *[dict_call_result_190077], **kwargs_190084)
        
        # Obtaining the member 'split' of a type (line 854)
        split_190086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 854, 21), pformat_call_result_190085, 'split')
        # Calling split(args, kwargs) (line 854)
        split_call_result_190089 = invoke(stypy.reporting.localization.Localization(__file__, 854, 21), split_190086, *[unicode_190087], **kwargs_190088)
        
        # Assigning a type to the variable 'repr_split' (line 854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 8), 'repr_split', split_call_result_190089)
        
        # Assigning a Call to a Name (line 856):
        
        # Assigning a Call to a Name (line 856):
        
        # Call to join(...): (line 856)
        # Processing the call arguments (line 856)
        # Getting the type of 'repr_split' (line 856)
        repr_split_190096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 51), 'repr_split', False)
        # Processing the call keyword arguments (line 856)
        kwargs_190097 = {}
        unicode_190090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 856, 25), 'unicode', u'\n')
        unicode_190091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 856, 32), 'unicode', u' ')
        # Getting the type of 'indent' (line 856)
        indent_190092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 38), 'indent', False)
        # Applying the binary operator '*' (line 856)
        result_mul_190093 = python_operator(stypy.reporting.localization.Localization(__file__, 856, 32), '*', unicode_190091, indent_190092)
        
        # Applying the binary operator '+' (line 856)
        result_add_190094 = python_operator(stypy.reporting.localization.Localization(__file__, 856, 25), '+', unicode_190090, result_mul_190093)
        
        # Obtaining the member 'join' of a type (line 856)
        join_190095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 856, 25), result_add_190094, 'join')
        # Calling join(args, kwargs) (line 856)
        join_call_result_190098 = invoke(stypy.reporting.localization.Localization(__file__, 856, 25), join_190095, *[repr_split_190096], **kwargs_190097)
        
        # Assigning a type to the variable 'repr_indented' (line 856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 856, 8), 'repr_indented', join_call_result_190098)
        
        # Call to format(...): (line 857)
        # Processing the call arguments (line 857)
        # Getting the type of 'class_name' (line 857)
        class_name_190101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 33), 'class_name', False)
        # Getting the type of 'repr_indented' (line 857)
        repr_indented_190102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 45), 'repr_indented', False)
        # Processing the call keyword arguments (line 857)
        kwargs_190103 = {}
        unicode_190099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 857, 15), 'unicode', u'{0}({1})')
        # Obtaining the member 'format' of a type (line 857)
        format_190100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 857, 15), unicode_190099, 'format')
        # Calling format(args, kwargs) (line 857)
        format_call_result_190104 = invoke(stypy.reporting.localization.Localization(__file__, 857, 15), format_190100, *[class_name_190101, repr_indented_190102], **kwargs_190103)
        
        # Assigning a type to the variable 'stypy_return_type' (line 857)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 857, 8), 'stypy_return_type', format_call_result_190104)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 850)
        stypy_return_type_190105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_190105)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_190105


    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 859, 4, False)
        # Assigning a type to the variable 'self' (line 860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 860, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RcParams.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        RcParams.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RcParams.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        RcParams.stypy__str__.__dict__.__setitem__('stypy_function_name', 'RcParams.stypy__str__')
        RcParams.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        RcParams.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        RcParams.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RcParams.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        RcParams.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        RcParams.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RcParams.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RcParams.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        
        # Call to join(...): (line 860)
        # Processing the call arguments (line 860)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 860, 25, True)
        # Calculating comprehension expression
        
        # Call to sorted(...): (line 861)
        # Processing the call arguments (line 861)
        
        # Call to items(...): (line 861)
        # Processing the call keyword arguments (line 861)
        kwargs_190117 = {}
        # Getting the type of 'self' (line 861)
        self_190115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 44), 'self', False)
        # Obtaining the member 'items' of a type (line 861)
        items_190116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 44), self_190115, 'items')
        # Calling items(args, kwargs) (line 861)
        items_call_result_190118 = invoke(stypy.reporting.localization.Localization(__file__, 861, 44), items_190116, *[], **kwargs_190117)
        
        # Processing the call keyword arguments (line 861)
        kwargs_190119 = {}
        # Getting the type of 'sorted' (line 861)
        sorted_190114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 37), 'sorted', False)
        # Calling sorted(args, kwargs) (line 861)
        sorted_call_result_190120 = invoke(stypy.reporting.localization.Localization(__file__, 861, 37), sorted_190114, *[items_call_result_190118], **kwargs_190119)
        
        comprehension_190121 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 860, 25), sorted_call_result_190120)
        # Assigning a type to the variable 'k' (line 860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 860, 25), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 860, 25), comprehension_190121))
        # Assigning a type to the variable 'v' (line 860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 860, 25), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 860, 25), comprehension_190121))
        
        # Call to format(...): (line 860)
        # Processing the call arguments (line 860)
        # Getting the type of 'k' (line 860)
        k_190110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 43), 'k', False)
        # Getting the type of 'v' (line 860)
        v_190111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 46), 'v', False)
        # Processing the call keyword arguments (line 860)
        kwargs_190112 = {}
        unicode_190108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 860, 25), 'unicode', u'{0}: {1}')
        # Obtaining the member 'format' of a type (line 860)
        format_190109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 860, 25), unicode_190108, 'format')
        # Calling format(args, kwargs) (line 860)
        format_call_result_190113 = invoke(stypy.reporting.localization.Localization(__file__, 860, 25), format_190109, *[k_190110, v_190111], **kwargs_190112)
        
        list_190122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 860, 25), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 860, 25), list_190122, format_call_result_190113)
        # Processing the call keyword arguments (line 860)
        kwargs_190123 = {}
        unicode_190106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 860, 15), 'unicode', u'\n')
        # Obtaining the member 'join' of a type (line 860)
        join_190107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 860, 15), unicode_190106, 'join')
        # Calling join(args, kwargs) (line 860)
        join_call_result_190124 = invoke(stypy.reporting.localization.Localization(__file__, 860, 15), join_190107, *[list_190122], **kwargs_190123)
        
        # Assigning a type to the variable 'stypy_return_type' (line 860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 860, 8), 'stypy_return_type', join_call_result_190124)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 859)
        stypy_return_type_190125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_190125)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_190125


    @norecursion
    def __iter__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__iter__'
        module_type_store = module_type_store.open_function_context('__iter__', 863, 4, False)
        # Assigning a type to the variable 'self' (line 864)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 864, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RcParams.__iter__.__dict__.__setitem__('stypy_localization', localization)
        RcParams.__iter__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RcParams.__iter__.__dict__.__setitem__('stypy_type_store', module_type_store)
        RcParams.__iter__.__dict__.__setitem__('stypy_function_name', 'RcParams.__iter__')
        RcParams.__iter__.__dict__.__setitem__('stypy_param_names_list', [])
        RcParams.__iter__.__dict__.__setitem__('stypy_varargs_param_name', None)
        RcParams.__iter__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RcParams.__iter__.__dict__.__setitem__('stypy_call_defaults', defaults)
        RcParams.__iter__.__dict__.__setitem__('stypy_call_varargs', varargs)
        RcParams.__iter__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RcParams.__iter__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RcParams.__iter__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__iter__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__iter__(...)' code ##################

        unicode_190126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 866, (-1)), 'unicode', u'\n        Yield sorted list of keys.\n        ')
        
        
        # Call to sorted(...): (line 867)
        # Processing the call arguments (line 867)
        
        # Call to __iter__(...): (line 867)
        # Processing the call arguments (line 867)
        # Getting the type of 'self' (line 867)
        self_190130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 38), 'self', False)
        # Processing the call keyword arguments (line 867)
        kwargs_190131 = {}
        # Getting the type of 'dict' (line 867)
        dict_190128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 24), 'dict', False)
        # Obtaining the member '__iter__' of a type (line 867)
        iter___190129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 24), dict_190128, '__iter__')
        # Calling __iter__(args, kwargs) (line 867)
        iter___call_result_190132 = invoke(stypy.reporting.localization.Localization(__file__, 867, 24), iter___190129, *[self_190130], **kwargs_190131)
        
        # Processing the call keyword arguments (line 867)
        kwargs_190133 = {}
        # Getting the type of 'sorted' (line 867)
        sorted_190127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 17), 'sorted', False)
        # Calling sorted(args, kwargs) (line 867)
        sorted_call_result_190134 = invoke(stypy.reporting.localization.Localization(__file__, 867, 17), sorted_190127, *[iter___call_result_190132], **kwargs_190133)
        
        # Testing the type of a for loop iterable (line 867)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 867, 8), sorted_call_result_190134)
        # Getting the type of the for loop variable (line 867)
        for_loop_var_190135 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 867, 8), sorted_call_result_190134)
        # Assigning a type to the variable 'k' (line 867)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 867, 8), 'k', for_loop_var_190135)
        # SSA begins for a for statement (line 867)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        # Creating a generator
        # Getting the type of 'k' (line 868)
        k_190136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 18), 'k')
        GeneratorType_190137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 868, 12), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 868, 12), GeneratorType_190137, k_190136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 868, 12), 'stypy_return_type', GeneratorType_190137)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__iter__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__iter__' in the type store
        # Getting the type of 'stypy_return_type' (line 863)
        stypy_return_type_190138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_190138)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__iter__'
        return stypy_return_type_190138


    @norecursion
    def find_all(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'find_all'
        module_type_store = module_type_store.open_function_context('find_all', 870, 4, False)
        # Assigning a type to the variable 'self' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RcParams.find_all.__dict__.__setitem__('stypy_localization', localization)
        RcParams.find_all.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RcParams.find_all.__dict__.__setitem__('stypy_type_store', module_type_store)
        RcParams.find_all.__dict__.__setitem__('stypy_function_name', 'RcParams.find_all')
        RcParams.find_all.__dict__.__setitem__('stypy_param_names_list', ['pattern'])
        RcParams.find_all.__dict__.__setitem__('stypy_varargs_param_name', None)
        RcParams.find_all.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RcParams.find_all.__dict__.__setitem__('stypy_call_defaults', defaults)
        RcParams.find_all.__dict__.__setitem__('stypy_call_varargs', varargs)
        RcParams.find_all.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RcParams.find_all.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RcParams.find_all', ['pattern'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'find_all', localization, ['pattern'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'find_all(...)' code ##################

        unicode_190139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 880, (-1)), 'unicode', u'\n        Return the subset of this RcParams dictionary whose keys match,\n        using :func:`re.search`, the given ``pattern``.\n\n        .. note::\n\n            Changes to the returned dictionary are *not* propagated to\n            the parent RcParams dictionary.\n\n        ')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 881, 8))
        
        # 'import re' statement (line 881)
        import re

        import_module(stypy.reporting.localization.Localization(__file__, 881, 8), 're', re, module_type_store)
        
        
        # Assigning a Call to a Name (line 882):
        
        # Assigning a Call to a Name (line 882):
        
        # Call to compile(...): (line 882)
        # Processing the call arguments (line 882)
        # Getting the type of 'pattern' (line 882)
        pattern_190142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 32), 'pattern', False)
        # Processing the call keyword arguments (line 882)
        kwargs_190143 = {}
        # Getting the type of 're' (line 882)
        re_190140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 21), 're', False)
        # Obtaining the member 'compile' of a type (line 882)
        compile_190141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 21), re_190140, 'compile')
        # Calling compile(args, kwargs) (line 882)
        compile_call_result_190144 = invoke(stypy.reporting.localization.Localization(__file__, 882, 21), compile_190141, *[pattern_190142], **kwargs_190143)
        
        # Assigning a type to the variable 'pattern_re' (line 882)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 8), 'pattern_re', compile_call_result_190144)
        
        # Call to RcParams(...): (line 883)
        # Processing the call arguments (line 883)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 883, 24, True)
        # Calculating comprehension expression
        
        # Call to items(...): (line 884)
        # Processing the call keyword arguments (line 884)
        kwargs_190156 = {}
        # Getting the type of 'self' (line 884)
        self_190154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 42), 'self', False)
        # Obtaining the member 'items' of a type (line 884)
        items_190155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 42), self_190154, 'items')
        # Calling items(args, kwargs) (line 884)
        items_call_result_190157 = invoke(stypy.reporting.localization.Localization(__file__, 884, 42), items_190155, *[], **kwargs_190156)
        
        comprehension_190158 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 883, 24), items_call_result_190157)
        # Assigning a type to the variable 'key' (line 883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 24), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 883, 24), comprehension_190158))
        # Assigning a type to the variable 'value' (line 883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 24), 'value', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 883, 24), comprehension_190158))
        
        # Call to search(...): (line 885)
        # Processing the call arguments (line 885)
        # Getting the type of 'key' (line 885)
        key_190151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 45), 'key', False)
        # Processing the call keyword arguments (line 885)
        kwargs_190152 = {}
        # Getting the type of 'pattern_re' (line 885)
        pattern_re_190149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 27), 'pattern_re', False)
        # Obtaining the member 'search' of a type (line 885)
        search_190150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 27), pattern_re_190149, 'search')
        # Calling search(args, kwargs) (line 885)
        search_call_result_190153 = invoke(stypy.reporting.localization.Localization(__file__, 885, 27), search_190150, *[key_190151], **kwargs_190152)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 883)
        tuple_190146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 883, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 883)
        # Adding element type (line 883)
        # Getting the type of 'key' (line 883)
        key_190147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 25), 'key', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 883, 25), tuple_190146, key_190147)
        # Adding element type (line 883)
        # Getting the type of 'value' (line 883)
        value_190148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 30), 'value', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 883, 25), tuple_190146, value_190148)
        
        list_190159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 883, 24), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 883, 24), list_190159, tuple_190146)
        # Processing the call keyword arguments (line 883)
        kwargs_190160 = {}
        # Getting the type of 'RcParams' (line 883)
        RcParams_190145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 15), 'RcParams', False)
        # Calling RcParams(args, kwargs) (line 883)
        RcParams_call_result_190161 = invoke(stypy.reporting.localization.Localization(__file__, 883, 15), RcParams_190145, *[list_190159], **kwargs_190160)
        
        # Assigning a type to the variable 'stypy_return_type' (line 883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 8), 'stypy_return_type', RcParams_call_result_190161)
        
        # ################# End of 'find_all(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'find_all' in the type store
        # Getting the type of 'stypy_return_type' (line 870)
        stypy_return_type_190162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_190162)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'find_all'
        return stypy_return_type_190162


# Assigning a type to the variable 'RcParams' (line 772)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 772, 0), 'RcParams', RcParams)

# Assigning a Call to a Name (line 781):

# Call to dict(...): (line 781)
# Processing the call arguments (line 781)
# Calculating generator expression
module_type_store = module_type_store.open_function_context('list comprehension expression', 781, 20, True)
# Calculating comprehension expression

# Call to iteritems(...): (line 782)
# Processing the call arguments (line 782)
# Getting the type of 'defaultParams' (line 782)
defaultParams_190172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 34), 'defaultParams', False)
# Processing the call keyword arguments (line 782)
kwargs_190173 = {}
# Getting the type of 'six' (line 782)
six_190170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 20), 'six', False)
# Obtaining the member 'iteritems' of a type (line 782)
iteritems_190171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 20), six_190170, 'iteritems')
# Calling iteritems(args, kwargs) (line 782)
iteritems_call_result_190174 = invoke(stypy.reporting.localization.Localization(__file__, 782, 20), iteritems_190171, *[defaultParams_190172], **kwargs_190173)

comprehension_190175 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 781, 20), iteritems_call_result_190174)
# Assigning a type to the variable 'key' (line 781)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 20), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 781, 20), comprehension_190175))
# Assigning a type to the variable 'tuple_190176' (line 781)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 20), 'tuple_190176', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 781, 20), comprehension_190175))

# Obtaining an instance of the builtin type 'tuple' (line 781)
tuple_190176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 781, 47), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 781)
# Adding element type (line 781)default
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 781, 47), tuple_190176, )
# Adding element type (line 781)converter
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 781, 47), tuple_190176, )

# Assigning a type to the variable 'key' (line 781)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 20), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 781, 20), comprehension_190175))
# Assigning a type to the variable 'tuple_190176' (line 781)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 20), 'tuple_190176', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 781, 20), comprehension_190175))

# Getting the type of 'key' (line 783)
key_190167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 23), 'key', False)
# Getting the type of '_all_deprecated' (line 783)
_all_deprecated_190168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 34), '_all_deprecated', False)
# Applying the binary operator 'notin' (line 783)
result_contains_190169 = python_operator(stypy.reporting.localization.Localization(__file__, 783, 23), 'notin', key_190167, _all_deprecated_190168)


# Obtaining an instance of the builtin type 'tuple' (line 781)
tuple_190164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 781, 21), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 781)
# Adding element type (line 781)
# Getting the type of 'key' (line 781)
key_190165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 21), 'key', False)
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 781, 21), tuple_190164, key_190165)
# Adding element type (line 781)
# Getting the type of 'converter' (line 781)
converter_190166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 26), 'converter', False)
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 781, 21), tuple_190164, converter_190166)

list_190177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 781, 20), 'list')
# Destroy the current context
module_type_store = module_type_store.close_function_context()
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 781, 20), list_190177, tuple_190164)
# Processing the call keyword arguments (line 781)
kwargs_190178 = {}
# Getting the type of 'dict' (line 781)
dict_190163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 15), 'dict', False)
# Calling dict(args, kwargs) (line 781)
dict_call_result_190179 = invoke(stypy.reporting.localization.Localization(__file__, 781, 15), dict_190163, *[list_190177], **kwargs_190178)

# Getting the type of 'RcParams'
RcParams_190180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RcParams')
# Setting the type of the member 'validate' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RcParams_190180, 'validate', dict_call_result_190179)

# Assigning a Str to a Name (line 784):
unicode_190181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 784, 15), 'unicode', u'%s is deprecated and replaced with %s; please use the latter.')
# Getting the type of 'RcParams'
RcParams_190182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RcParams')
# Setting the type of the member 'msg_depr' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RcParams_190182, 'msg_depr', unicode_190181)

# Assigning a Str to a Name (line 785):
unicode_190183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 785, 20), 'unicode', u'%s is deprecated. Please remove it from your matplotlibrc and/or style files.')
# Getting the type of 'RcParams'
RcParams_190184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RcParams')
# Setting the type of the member 'msg_depr_set' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RcParams_190184, 'msg_depr_set', unicode_190183)

# Assigning a Str to a Name (line 787):
unicode_190185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 787, 22), 'unicode', u'%s is deprecated and ignored. Use %s')
# Getting the type of 'RcParams'
RcParams_190186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RcParams')
# Setting the type of the member 'msg_depr_ignore' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RcParams_190186, 'msg_depr_ignore', unicode_190185)

# Assigning a Str to a Name (line 788):
unicode_190187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 788, 20), 'unicode', u'%s is obsolete. Please remove it from your matplotlibrc and/or style files.')
# Getting the type of 'RcParams'
RcParams_190188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'RcParams')
# Setting the type of the member 'msg_obsolete' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), RcParams_190188, 'msg_obsolete', unicode_190187)

@norecursion
def rc_params(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 888)
    False_190189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 28), 'False')
    defaults = [False_190189]
    # Create a new context for function 'rc_params'
    module_type_store = module_type_store.open_function_context('rc_params', 888, 0, False)
    
    # Passed parameters checking function
    rc_params.stypy_localization = localization
    rc_params.stypy_type_of_self = None
    rc_params.stypy_type_store = module_type_store
    rc_params.stypy_function_name = 'rc_params'
    rc_params.stypy_param_names_list = ['fail_on_error']
    rc_params.stypy_varargs_param_name = None
    rc_params.stypy_kwargs_param_name = None
    rc_params.stypy_call_defaults = defaults
    rc_params.stypy_call_varargs = varargs
    rc_params.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rc_params', ['fail_on_error'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rc_params', localization, ['fail_on_error'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rc_params(...)' code ##################

    unicode_190190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 891, (-1)), 'unicode', u'Return a :class:`matplotlib.RcParams` instance from the\n    default matplotlib rc file.\n    ')
    
    # Assigning a Call to a Name (line 892):
    
    # Assigning a Call to a Name (line 892):
    
    # Call to matplotlib_fname(...): (line 892)
    # Processing the call keyword arguments (line 892)
    kwargs_190192 = {}
    # Getting the type of 'matplotlib_fname' (line 892)
    matplotlib_fname_190191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 12), 'matplotlib_fname', False)
    # Calling matplotlib_fname(args, kwargs) (line 892)
    matplotlib_fname_call_result_190193 = invoke(stypy.reporting.localization.Localization(__file__, 892, 12), matplotlib_fname_190191, *[], **kwargs_190192)
    
    # Assigning a type to the variable 'fname' (line 892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 4), 'fname', matplotlib_fname_call_result_190193)
    
    
    
    # Call to exists(...): (line 893)
    # Processing the call arguments (line 893)
    # Getting the type of 'fname' (line 893)
    fname_190197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 26), 'fname', False)
    # Processing the call keyword arguments (line 893)
    kwargs_190198 = {}
    # Getting the type of 'os' (line 893)
    os_190194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 893)
    path_190195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 11), os_190194, 'path')
    # Obtaining the member 'exists' of a type (line 893)
    exists_190196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 11), path_190195, 'exists')
    # Calling exists(args, kwargs) (line 893)
    exists_call_result_190199 = invoke(stypy.reporting.localization.Localization(__file__, 893, 11), exists_190196, *[fname_190197], **kwargs_190198)
    
    # Applying the 'not' unary operator (line 893)
    result_not__190200 = python_operator(stypy.reporting.localization.Localization(__file__, 893, 7), 'not', exists_call_result_190199)
    
    # Testing the type of an if condition (line 893)
    if_condition_190201 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 893, 4), result_not__190200)
    # Assigning a type to the variable 'if_condition_190201' (line 893)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 893, 4), 'if_condition_190201', if_condition_190201)
    # SSA begins for if statement (line 893)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 895):
    
    # Assigning a Str to a Name (line 895):
    unicode_190202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 895, 18), 'unicode', u'could not find rc file; returning defaults')
    # Assigning a type to the variable 'message' (line 895)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 8), 'message', unicode_190202)
    
    # Assigning a Call to a Name (line 896):
    
    # Assigning a Call to a Name (line 896):
    
    # Call to RcParams(...): (line 896)
    # Processing the call arguments (line 896)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to iteritems(...): (line 897)
    # Processing the call arguments (line 897)
    # Getting the type of 'defaultParams' (line 897)
    defaultParams_190212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 38), 'defaultParams', False)
    # Processing the call keyword arguments (line 897)
    kwargs_190213 = {}
    # Getting the type of 'six' (line 897)
    six_190210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 24), 'six', False)
    # Obtaining the member 'iteritems' of a type (line 897)
    iteritems_190211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 897, 24), six_190210, 'iteritems')
    # Calling iteritems(args, kwargs) (line 897)
    iteritems_call_result_190214 = invoke(stypy.reporting.localization.Localization(__file__, 897, 24), iteritems_190211, *[defaultParams_190212], **kwargs_190213)
    
    comprehension_190215 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 896, 24), iteritems_call_result_190214)
    # Assigning a type to the variable 'key' (line 896)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 24), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 896, 24), comprehension_190215))
    # Assigning a type to the variable 'tuple_190216' (line 896)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 24), 'tuple_190216', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 896, 24), comprehension_190215))
    
    # Obtaining an instance of the builtin type 'tuple' (line 896)
    tuple_190216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 49), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 896)
    # Adding element type (line 896)default
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 896, 49), tuple_190216, )
    # Adding element type (line 896)_
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 896, 49), tuple_190216, )
    
    # Assigning a type to the variable 'key' (line 896)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 24), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 896, 24), comprehension_190215))
    # Assigning a type to the variable 'tuple_190216' (line 896)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 24), 'tuple_190216', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 896, 24), comprehension_190215))
    
    # Getting the type of 'key' (line 898)
    key_190207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 27), 'key', False)
    # Getting the type of '_all_deprecated' (line 898)
    _all_deprecated_190208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 38), '_all_deprecated', False)
    # Applying the binary operator 'notin' (line 898)
    result_contains_190209 = python_operator(stypy.reporting.localization.Localization(__file__, 898, 27), 'notin', key_190207, _all_deprecated_190208)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 896)
    tuple_190204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 896)
    # Adding element type (line 896)
    # Getting the type of 'key' (line 896)
    key_190205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 25), 'key', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 896, 25), tuple_190204, key_190205)
    # Adding element type (line 896)
    # Getting the type of 'default' (line 896)
    default_190206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 30), 'default', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 896, 25), tuple_190204, default_190206)
    
    list_190217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 24), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 896, 24), list_190217, tuple_190204)
    # Processing the call keyword arguments (line 896)
    kwargs_190218 = {}
    # Getting the type of 'RcParams' (line 896)
    RcParams_190203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 14), 'RcParams', False)
    # Calling RcParams(args, kwargs) (line 896)
    RcParams_call_result_190219 = invoke(stypy.reporting.localization.Localization(__file__, 896, 14), RcParams_190203, *[list_190217], **kwargs_190218)
    
    # Assigning a type to the variable 'ret' (line 896)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 8), 'ret', RcParams_call_result_190219)
    
    # Call to warn(...): (line 899)
    # Processing the call arguments (line 899)
    # Getting the type of 'message' (line 899)
    message_190222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 22), 'message', False)
    # Processing the call keyword arguments (line 899)
    kwargs_190223 = {}
    # Getting the type of 'warnings' (line 899)
    warnings_190220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 899)
    warn_190221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 899, 8), warnings_190220, 'warn')
    # Calling warn(args, kwargs) (line 899)
    warn_call_result_190224 = invoke(stypy.reporting.localization.Localization(__file__, 899, 8), warn_190221, *[message_190222], **kwargs_190223)
    
    # Getting the type of 'ret' (line 900)
    ret_190225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 15), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 900)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 900, 8), 'stypy_return_type', ret_190225)
    # SSA join for if statement (line 893)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to rc_params_from_file(...): (line 902)
    # Processing the call arguments (line 902)
    # Getting the type of 'fname' (line 902)
    fname_190227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 31), 'fname', False)
    # Getting the type of 'fail_on_error' (line 902)
    fail_on_error_190228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 38), 'fail_on_error', False)
    # Processing the call keyword arguments (line 902)
    kwargs_190229 = {}
    # Getting the type of 'rc_params_from_file' (line 902)
    rc_params_from_file_190226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 11), 'rc_params_from_file', False)
    # Calling rc_params_from_file(args, kwargs) (line 902)
    rc_params_from_file_call_result_190230 = invoke(stypy.reporting.localization.Localization(__file__, 902, 11), rc_params_from_file_190226, *[fname_190227, fail_on_error_190228], **kwargs_190229)
    
    # Assigning a type to the variable 'stypy_return_type' (line 902)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 902, 4), 'stypy_return_type', rc_params_from_file_call_result_190230)
    
    # ################# End of 'rc_params(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rc_params' in the type store
    # Getting the type of 'stypy_return_type' (line 888)
    stypy_return_type_190231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_190231)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rc_params'
    return stypy_return_type_190231

# Assigning a type to the variable 'rc_params' (line 888)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 888, 0), 'rc_params', rc_params)

# Assigning a Call to a Name (line 905):

# Assigning a Call to a Name (line 905):

# Call to compile(...): (line 905)
# Processing the call arguments (line 905)
unicode_190234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 905, 23), 'unicode', u'http://|https://|ftp://|file://|file:\\\\')
# Processing the call keyword arguments (line 905)
kwargs_190235 = {}
# Getting the type of 're' (line 905)
re_190232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 12), 're', False)
# Obtaining the member 'compile' of a type (line 905)
compile_190233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 12), re_190232, 'compile')
# Calling compile(args, kwargs) (line 905)
compile_call_result_190236 = invoke(stypy.reporting.localization.Localization(__file__, 905, 12), compile_190233, *[unicode_190234], **kwargs_190235)

# Assigning a type to the variable 'URL_REGEX' (line 905)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 0), 'URL_REGEX', compile_call_result_190236)

@norecursion
def is_url(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_url'
    module_type_store = module_type_store.open_function_context('is_url', 908, 0, False)
    
    # Passed parameters checking function
    is_url.stypy_localization = localization
    is_url.stypy_type_of_self = None
    is_url.stypy_type_store = module_type_store
    is_url.stypy_function_name = 'is_url'
    is_url.stypy_param_names_list = ['filename']
    is_url.stypy_varargs_param_name = None
    is_url.stypy_kwargs_param_name = None
    is_url.stypy_call_defaults = defaults
    is_url.stypy_call_varargs = varargs
    is_url.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_url', ['filename'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_url', localization, ['filename'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_url(...)' code ##################

    unicode_190237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 909, 4), 'unicode', u'Return True if string is an http, ftp, or file URL path.')
    
    
    # Call to match(...): (line 910)
    # Processing the call arguments (line 910)
    # Getting the type of 'filename' (line 910)
    filename_190240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 27), 'filename', False)
    # Processing the call keyword arguments (line 910)
    kwargs_190241 = {}
    # Getting the type of 'URL_REGEX' (line 910)
    URL_REGEX_190238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 11), 'URL_REGEX', False)
    # Obtaining the member 'match' of a type (line 910)
    match_190239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 910, 11), URL_REGEX_190238, 'match')
    # Calling match(args, kwargs) (line 910)
    match_call_result_190242 = invoke(stypy.reporting.localization.Localization(__file__, 910, 11), match_190239, *[filename_190240], **kwargs_190241)
    
    # Getting the type of 'None' (line 910)
    None_190243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 44), 'None')
    # Applying the binary operator 'isnot' (line 910)
    result_is_not_190244 = python_operator(stypy.reporting.localization.Localization(__file__, 910, 11), 'isnot', match_call_result_190242, None_190243)
    
    # Assigning a type to the variable 'stypy_return_type' (line 910)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 4), 'stypy_return_type', result_is_not_190244)
    
    # ################# End of 'is_url(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_url' in the type store
    # Getting the type of 'stypy_return_type' (line 908)
    stypy_return_type_190245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_190245)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_url'
    return stypy_return_type_190245

# Assigning a type to the variable 'is_url' (line 908)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 0), 'is_url', is_url)

@norecursion
def _url_lines(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_url_lines'
    module_type_store = module_type_store.open_function_context('_url_lines', 913, 0, False)
    
    # Passed parameters checking function
    _url_lines.stypy_localization = localization
    _url_lines.stypy_type_of_self = None
    _url_lines.stypy_type_store = module_type_store
    _url_lines.stypy_function_name = '_url_lines'
    _url_lines.stypy_param_names_list = ['f']
    _url_lines.stypy_varargs_param_name = None
    _url_lines.stypy_kwargs_param_name = None
    _url_lines.stypy_call_defaults = defaults
    _url_lines.stypy_call_varargs = varargs
    _url_lines.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_url_lines', ['f'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_url_lines', localization, ['f'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_url_lines(...)' code ##################

    
    # Getting the type of 'f' (line 915)
    f_190246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 16), 'f')
    # Testing the type of a for loop iterable (line 915)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 915, 4), f_190246)
    # Getting the type of the for loop variable (line 915)
    for_loop_var_190247 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 915, 4), f_190246)
    # Assigning a type to the variable 'line' (line 915)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 4), 'line', for_loop_var_190247)
    # SSA begins for a for statement (line 915)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    # Creating a generator
    
    # Call to decode(...): (line 916)
    # Processing the call arguments (line 916)
    unicode_190250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, 26), 'unicode', u'utf8')
    # Processing the call keyword arguments (line 916)
    kwargs_190251 = {}
    # Getting the type of 'line' (line 916)
    line_190248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 14), 'line', False)
    # Obtaining the member 'decode' of a type (line 916)
    decode_190249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 916, 14), line_190248, 'decode')
    # Calling decode(args, kwargs) (line 916)
    decode_call_result_190252 = invoke(stypy.reporting.localization.Localization(__file__, 916, 14), decode_190249, *[unicode_190250], **kwargs_190251)
    
    GeneratorType_190253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, 8), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 916, 8), GeneratorType_190253, decode_call_result_190252)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 916, 8), 'stypy_return_type', GeneratorType_190253)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_url_lines(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_url_lines' in the type store
    # Getting the type of 'stypy_return_type' (line 913)
    stypy_return_type_190254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_190254)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_url_lines'
    return stypy_return_type_190254

# Assigning a type to the variable '_url_lines' (line 913)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 913, 0), '_url_lines', _url_lines)

@norecursion
def _open_file_or_url(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_open_file_or_url'
    module_type_store = module_type_store.open_function_context('_open_file_or_url', 919, 0, False)
    
    # Passed parameters checking function
    _open_file_or_url.stypy_localization = localization
    _open_file_or_url.stypy_type_of_self = None
    _open_file_or_url.stypy_type_store = module_type_store
    _open_file_or_url.stypy_function_name = '_open_file_or_url'
    _open_file_or_url.stypy_param_names_list = ['fname']
    _open_file_or_url.stypy_varargs_param_name = None
    _open_file_or_url.stypy_kwargs_param_name = None
    _open_file_or_url.stypy_call_defaults = defaults
    _open_file_or_url.stypy_call_varargs = varargs
    _open_file_or_url.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_open_file_or_url', ['fname'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_open_file_or_url', localization, ['fname'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_open_file_or_url(...)' code ##################

    
    
    # Call to is_url(...): (line 921)
    # Processing the call arguments (line 921)
    # Getting the type of 'fname' (line 921)
    fname_190256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 14), 'fname', False)
    # Processing the call keyword arguments (line 921)
    kwargs_190257 = {}
    # Getting the type of 'is_url' (line 921)
    is_url_190255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 7), 'is_url', False)
    # Calling is_url(args, kwargs) (line 921)
    is_url_call_result_190258 = invoke(stypy.reporting.localization.Localization(__file__, 921, 7), is_url_190255, *[fname_190256], **kwargs_190257)
    
    # Testing the type of an if condition (line 921)
    if_condition_190259 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 921, 4), is_url_call_result_190258)
    # Assigning a type to the variable 'if_condition_190259' (line 921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 921, 4), 'if_condition_190259', if_condition_190259)
    # SSA begins for if statement (line 921)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 922):
    
    # Assigning a Call to a Name (line 922):
    
    # Call to urlopen(...): (line 922)
    # Processing the call arguments (line 922)
    # Getting the type of 'fname' (line 922)
    fname_190261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 20), 'fname', False)
    # Processing the call keyword arguments (line 922)
    kwargs_190262 = {}
    # Getting the type of 'urlopen' (line 922)
    urlopen_190260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 12), 'urlopen', False)
    # Calling urlopen(args, kwargs) (line 922)
    urlopen_call_result_190263 = invoke(stypy.reporting.localization.Localization(__file__, 922, 12), urlopen_190260, *[fname_190261], **kwargs_190262)
    
    # Assigning a type to the variable 'f' (line 922)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 922, 8), 'f', urlopen_call_result_190263)
    # Creating a generator
    
    # Call to _url_lines(...): (line 923)
    # Processing the call arguments (line 923)
    # Getting the type of 'f' (line 923)
    f_190265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 25), 'f', False)
    # Processing the call keyword arguments (line 923)
    kwargs_190266 = {}
    # Getting the type of '_url_lines' (line 923)
    _url_lines_190264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 14), '_url_lines', False)
    # Calling _url_lines(args, kwargs) (line 923)
    _url_lines_call_result_190267 = invoke(stypy.reporting.localization.Localization(__file__, 923, 14), _url_lines_190264, *[f_190265], **kwargs_190266)
    
    GeneratorType_190268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 923, 8), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 923, 8), GeneratorType_190268, _url_lines_call_result_190267)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 923, 8), 'stypy_return_type', GeneratorType_190268)
    
    # Call to close(...): (line 924)
    # Processing the call keyword arguments (line 924)
    kwargs_190271 = {}
    # Getting the type of 'f' (line 924)
    f_190269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'f', False)
    # Obtaining the member 'close' of a type (line 924)
    close_190270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 8), f_190269, 'close')
    # Calling close(args, kwargs) (line 924)
    close_call_result_190272 = invoke(stypy.reporting.localization.Localization(__file__, 924, 8), close_190270, *[], **kwargs_190271)
    
    # SSA branch for the else part of an if statement (line 921)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 926):
    
    # Assigning a Call to a Name (line 926):
    
    # Call to expanduser(...): (line 926)
    # Processing the call arguments (line 926)
    # Getting the type of 'fname' (line 926)
    fname_190276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 35), 'fname', False)
    # Processing the call keyword arguments (line 926)
    kwargs_190277 = {}
    # Getting the type of 'os' (line 926)
    os_190273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 16), 'os', False)
    # Obtaining the member 'path' of a type (line 926)
    path_190274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 926, 16), os_190273, 'path')
    # Obtaining the member 'expanduser' of a type (line 926)
    expanduser_190275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 926, 16), path_190274, 'expanduser')
    # Calling expanduser(args, kwargs) (line 926)
    expanduser_call_result_190278 = invoke(stypy.reporting.localization.Localization(__file__, 926, 16), expanduser_190275, *[fname_190276], **kwargs_190277)
    
    # Assigning a type to the variable 'fname' (line 926)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 926, 8), 'fname', expanduser_call_result_190278)
    
    # Assigning a Call to a Name (line 927):
    
    # Assigning a Call to a Name (line 927):
    
    # Call to getpreferredencoding(...): (line 927)
    # Processing the call keyword arguments (line 927)
    # Getting the type of 'False' (line 927)
    False_190281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 60), 'False', False)
    keyword_190282 = False_190281
    kwargs_190283 = {'do_setlocale': keyword_190282}
    # Getting the type of 'locale' (line 927)
    locale_190279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 19), 'locale', False)
    # Obtaining the member 'getpreferredencoding' of a type (line 927)
    getpreferredencoding_190280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 927, 19), locale_190279, 'getpreferredencoding')
    # Calling getpreferredencoding(args, kwargs) (line 927)
    getpreferredencoding_call_result_190284 = invoke(stypy.reporting.localization.Localization(__file__, 927, 19), getpreferredencoding_190280, *[], **kwargs_190283)
    
    # Assigning a type to the variable 'encoding' (line 927)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 927, 8), 'encoding', getpreferredencoding_call_result_190284)
    
    # Type idiom detected: calculating its left and rigth part (line 928)
    # Getting the type of 'encoding' (line 928)
    encoding_190285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 11), 'encoding')
    # Getting the type of 'None' (line 928)
    None_190286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 23), 'None')
    
    (may_be_190287, more_types_in_union_190288) = may_be_none(encoding_190285, None_190286)

    if may_be_190287:

        if more_types_in_union_190288:
            # Runtime conditional SSA (line 928)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Str to a Name (line 929):
        
        # Assigning a Str to a Name (line 929):
        unicode_190289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 929, 23), 'unicode', u'utf-8')
        # Assigning a type to the variable 'encoding' (line 929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 12), 'encoding', unicode_190289)

        if more_types_in_union_190288:
            # SSA join for if statement (line 928)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to open(...): (line 930)
    # Processing the call arguments (line 930)
    # Getting the type of 'fname' (line 930)
    fname_190292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 21), 'fname', False)
    # Processing the call keyword arguments (line 930)
    # Getting the type of 'encoding' (line 930)
    encoding_190293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 37), 'encoding', False)
    keyword_190294 = encoding_190293
    kwargs_190295 = {'encoding': keyword_190294}
    # Getting the type of 'io' (line 930)
    io_190290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 13), 'io', False)
    # Obtaining the member 'open' of a type (line 930)
    open_190291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 930, 13), io_190290, 'open')
    # Calling open(args, kwargs) (line 930)
    open_call_result_190296 = invoke(stypy.reporting.localization.Localization(__file__, 930, 13), open_190291, *[fname_190292], **kwargs_190295)
    
    with_190297 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 930, 13), open_call_result_190296, 'with parameter', '__enter__', '__exit__')

    if with_190297:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 930)
        enter___190298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 930, 13), open_call_result_190296, '__enter__')
        with_enter_190299 = invoke(stypy.reporting.localization.Localization(__file__, 930, 13), enter___190298)
        # Assigning a type to the variable 'f' (line 930)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 13), 'f', with_enter_190299)
        # Creating a generator
        # Getting the type of 'f' (line 931)
        f_190300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 18), 'f')
        GeneratorType_190301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 931, 12), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 931, 12), GeneratorType_190301, f_190300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 12), 'stypy_return_type', GeneratorType_190301)
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 930)
        exit___190302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 930, 13), open_call_result_190296, '__exit__')
        with_exit_190303 = invoke(stypy.reporting.localization.Localization(__file__, 930, 13), exit___190302, None, None, None)

    # SSA join for if statement (line 921)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_open_file_or_url(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_open_file_or_url' in the type store
    # Getting the type of 'stypy_return_type' (line 919)
    stypy_return_type_190304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_190304)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_open_file_or_url'
    return stypy_return_type_190304

# Assigning a type to the variable '_open_file_or_url' (line 919)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 0), '_open_file_or_url', _open_file_or_url)

# Assigning a Str to a Name (line 934):

# Assigning a Str to a Name (line 934):
unicode_190305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 934, 21), 'unicode', u'line #%d\n\t"%s"\n\tin file "%s"')
# Assigning a type to the variable '_error_details_fmt' (line 934)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 0), '_error_details_fmt', unicode_190305)

@norecursion
def _rc_params_in_file(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 937)
    False_190306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 44), 'False')
    defaults = [False_190306]
    # Create a new context for function '_rc_params_in_file'
    module_type_store = module_type_store.open_function_context('_rc_params_in_file', 937, 0, False)
    
    # Passed parameters checking function
    _rc_params_in_file.stypy_localization = localization
    _rc_params_in_file.stypy_type_of_self = None
    _rc_params_in_file.stypy_type_store = module_type_store
    _rc_params_in_file.stypy_function_name = '_rc_params_in_file'
    _rc_params_in_file.stypy_param_names_list = ['fname', 'fail_on_error']
    _rc_params_in_file.stypy_varargs_param_name = None
    _rc_params_in_file.stypy_kwargs_param_name = None
    _rc_params_in_file.stypy_call_defaults = defaults
    _rc_params_in_file.stypy_call_varargs = varargs
    _rc_params_in_file.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_rc_params_in_file', ['fname', 'fail_on_error'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_rc_params_in_file', localization, ['fname', 'fail_on_error'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_rc_params_in_file(...)' code ##################

    unicode_190307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, (-1)), 'unicode', u'Return :class:`matplotlib.RcParams` from the contents of the given file.\n\n    Unlike `rc_params_from_file`, the configuration class only contains the\n    parameters specified in the file (i.e. default values are not filled in).\n    ')
    
    # Assigning a Num to a Name (line 943):
    
    # Assigning a Num to a Name (line 943):
    int_190308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 10), 'int')
    # Assigning a type to the variable 'cnt' (line 943)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 4), 'cnt', int_190308)
    
    # Assigning a Dict to a Name (line 944):
    
    # Assigning a Dict to a Name (line 944):
    
    # Obtaining an instance of the builtin type 'dict' (line 944)
    dict_190309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 944, 14), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 944)
    
    # Assigning a type to the variable 'rc_temp' (line 944)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 4), 'rc_temp', dict_190309)
    
    # Call to _open_file_or_url(...): (line 945)
    # Processing the call arguments (line 945)
    # Getting the type of 'fname' (line 945)
    fname_190311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 27), 'fname', False)
    # Processing the call keyword arguments (line 945)
    kwargs_190312 = {}
    # Getting the type of '_open_file_or_url' (line 945)
    _open_file_or_url_190310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 9), '_open_file_or_url', False)
    # Calling _open_file_or_url(args, kwargs) (line 945)
    _open_file_or_url_call_result_190313 = invoke(stypy.reporting.localization.Localization(__file__, 945, 9), _open_file_or_url_190310, *[fname_190311], **kwargs_190312)
    
    with_190314 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 945, 9), _open_file_or_url_call_result_190313, 'with parameter', '__enter__', '__exit__')

    if with_190314:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 945)
        enter___190315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 9), _open_file_or_url_call_result_190313, '__enter__')
        with_enter_190316 = invoke(stypy.reporting.localization.Localization(__file__, 945, 9), enter___190315)
        # Assigning a type to the variable 'fd' (line 945)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 9), 'fd', with_enter_190316)
        
        
        # SSA begins for try-except statement (line 946)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Getting the type of 'fd' (line 947)
        fd_190317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 24), 'fd')
        # Testing the type of a for loop iterable (line 947)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 947, 12), fd_190317)
        # Getting the type of the for loop variable (line 947)
        for_loop_var_190318 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 947, 12), fd_190317)
        # Assigning a type to the variable 'line' (line 947)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 947, 12), 'line', for_loop_var_190318)
        # SSA begins for a for statement (line 947)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'cnt' (line 948)
        cnt_190319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 16), 'cnt')
        int_190320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 23), 'int')
        # Applying the binary operator '+=' (line 948)
        result_iadd_190321 = python_operator(stypy.reporting.localization.Localization(__file__, 948, 16), '+=', cnt_190319, int_190320)
        # Assigning a type to the variable 'cnt' (line 948)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 948, 16), 'cnt', result_iadd_190321)
        
        
        # Assigning a Call to a Name (line 949):
        
        # Assigning a Call to a Name (line 949):
        
        # Call to strip(...): (line 949)
        # Processing the call keyword arguments (line 949)
        kwargs_190332 = {}
        
        # Obtaining the type of the subscript
        int_190322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 50), 'int')
        
        # Call to split(...): (line 949)
        # Processing the call arguments (line 949)
        unicode_190325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 42), 'unicode', u'#')
        int_190326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 47), 'int')
        # Processing the call keyword arguments (line 949)
        kwargs_190327 = {}
        # Getting the type of 'line' (line 949)
        line_190323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 31), 'line', False)
        # Obtaining the member 'split' of a type (line 949)
        split_190324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 31), line_190323, 'split')
        # Calling split(args, kwargs) (line 949)
        split_call_result_190328 = invoke(stypy.reporting.localization.Localization(__file__, 949, 31), split_190324, *[unicode_190325, int_190326], **kwargs_190327)
        
        # Obtaining the member '__getitem__' of a type (line 949)
        getitem___190329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 31), split_call_result_190328, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 949)
        subscript_call_result_190330 = invoke(stypy.reporting.localization.Localization(__file__, 949, 31), getitem___190329, int_190322)
        
        # Obtaining the member 'strip' of a type (line 949)
        strip_190331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 31), subscript_call_result_190330, 'strip')
        # Calling strip(args, kwargs) (line 949)
        strip_call_result_190333 = invoke(stypy.reporting.localization.Localization(__file__, 949, 31), strip_190331, *[], **kwargs_190332)
        
        # Assigning a type to the variable 'strippedline' (line 949)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 949, 16), 'strippedline', strip_call_result_190333)
        
        
        # Getting the type of 'strippedline' (line 950)
        strippedline_190334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 23), 'strippedline')
        # Applying the 'not' unary operator (line 950)
        result_not__190335 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 19), 'not', strippedline_190334)
        
        # Testing the type of an if condition (line 950)
        if_condition_190336 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 950, 16), result_not__190335)
        # Assigning a type to the variable 'if_condition_190336' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 16), 'if_condition_190336', if_condition_190336)
        # SSA begins for if statement (line 950)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 950)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 952):
        
        # Assigning a Call to a Name (line 952):
        
        # Call to split(...): (line 952)
        # Processing the call arguments (line 952)
        unicode_190339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 41), 'unicode', u':')
        int_190340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 46), 'int')
        # Processing the call keyword arguments (line 952)
        kwargs_190341 = {}
        # Getting the type of 'strippedline' (line 952)
        strippedline_190337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 22), 'strippedline', False)
        # Obtaining the member 'split' of a type (line 952)
        split_190338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 22), strippedline_190337, 'split')
        # Calling split(args, kwargs) (line 952)
        split_call_result_190342 = invoke(stypy.reporting.localization.Localization(__file__, 952, 22), split_190338, *[unicode_190339, int_190340], **kwargs_190341)
        
        # Assigning a type to the variable 'tup' (line 952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 16), 'tup', split_call_result_190342)
        
        
        
        # Call to len(...): (line 953)
        # Processing the call arguments (line 953)
        # Getting the type of 'tup' (line 953)
        tup_190344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 23), 'tup', False)
        # Processing the call keyword arguments (line 953)
        kwargs_190345 = {}
        # Getting the type of 'len' (line 953)
        len_190343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 19), 'len', False)
        # Calling len(args, kwargs) (line 953)
        len_call_result_190346 = invoke(stypy.reporting.localization.Localization(__file__, 953, 19), len_190343, *[tup_190344], **kwargs_190345)
        
        int_190347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 953, 31), 'int')
        # Applying the binary operator '!=' (line 953)
        result_ne_190348 = python_operator(stypy.reporting.localization.Localization(__file__, 953, 19), '!=', len_call_result_190346, int_190347)
        
        # Testing the type of an if condition (line 953)
        if_condition_190349 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 953, 16), result_ne_190348)
        # Assigning a type to the variable 'if_condition_190349' (line 953)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 16), 'if_condition_190349', if_condition_190349)
        # SSA begins for if statement (line 953)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 954):
        
        # Assigning a BinOp to a Name (line 954):
        # Getting the type of '_error_details_fmt' (line 954)
        _error_details_fmt_190350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 36), '_error_details_fmt')
        
        # Obtaining an instance of the builtin type 'tuple' (line 954)
        tuple_190351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 58), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 954)
        # Adding element type (line 954)
        # Getting the type of 'cnt' (line 954)
        cnt_190352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 58), 'cnt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 954, 58), tuple_190351, cnt_190352)
        # Adding element type (line 954)
        # Getting the type of 'line' (line 954)
        line_190353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 63), 'line')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 954, 58), tuple_190351, line_190353)
        # Adding element type (line 954)
        # Getting the type of 'fname' (line 954)
        fname_190354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 69), 'fname')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 954, 58), tuple_190351, fname_190354)
        
        # Applying the binary operator '%' (line 954)
        result_mod_190355 = python_operator(stypy.reporting.localization.Localization(__file__, 954, 36), '%', _error_details_fmt_190350, tuple_190351)
        
        # Assigning a type to the variable 'error_details' (line 954)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 954, 20), 'error_details', result_mod_190355)
        
        # Call to warn(...): (line 955)
        # Processing the call arguments (line 955)
        unicode_190358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 955, 34), 'unicode', u'Illegal %s')
        # Getting the type of 'error_details' (line 955)
        error_details_190359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 49), 'error_details', False)
        # Applying the binary operator '%' (line 955)
        result_mod_190360 = python_operator(stypy.reporting.localization.Localization(__file__, 955, 34), '%', unicode_190358, error_details_190359)
        
        # Processing the call keyword arguments (line 955)
        kwargs_190361 = {}
        # Getting the type of 'warnings' (line 955)
        warnings_190356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 20), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 955)
        warn_190357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 20), warnings_190356, 'warn')
        # Calling warn(args, kwargs) (line 955)
        warn_call_result_190362 = invoke(stypy.reporting.localization.Localization(__file__, 955, 20), warn_190357, *[result_mod_190360], **kwargs_190361)
        
        # SSA join for if statement (line 953)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Tuple (line 957):
        
        # Assigning a Subscript to a Name (line 957):
        
        # Obtaining the type of the subscript
        int_190363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 16), 'int')
        # Getting the type of 'tup' (line 957)
        tup_190364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 27), 'tup')
        # Obtaining the member '__getitem__' of a type (line 957)
        getitem___190365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 16), tup_190364, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 957)
        subscript_call_result_190366 = invoke(stypy.reporting.localization.Localization(__file__, 957, 16), getitem___190365, int_190363)
        
        # Assigning a type to the variable 'tuple_var_assignment_188213' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 16), 'tuple_var_assignment_188213', subscript_call_result_190366)
        
        # Assigning a Subscript to a Name (line 957):
        
        # Obtaining the type of the subscript
        int_190367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 16), 'int')
        # Getting the type of 'tup' (line 957)
        tup_190368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 27), 'tup')
        # Obtaining the member '__getitem__' of a type (line 957)
        getitem___190369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 16), tup_190368, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 957)
        subscript_call_result_190370 = invoke(stypy.reporting.localization.Localization(__file__, 957, 16), getitem___190369, int_190367)
        
        # Assigning a type to the variable 'tuple_var_assignment_188214' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 16), 'tuple_var_assignment_188214', subscript_call_result_190370)
        
        # Assigning a Name to a Name (line 957):
        # Getting the type of 'tuple_var_assignment_188213' (line 957)
        tuple_var_assignment_188213_190371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 16), 'tuple_var_assignment_188213')
        # Assigning a type to the variable 'key' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 16), 'key', tuple_var_assignment_188213_190371)
        
        # Assigning a Name to a Name (line 957):
        # Getting the type of 'tuple_var_assignment_188214' (line 957)
        tuple_var_assignment_188214_190372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 16), 'tuple_var_assignment_188214')
        # Assigning a type to the variable 'val' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 21), 'val', tuple_var_assignment_188214_190372)
        
        # Assigning a Call to a Name (line 958):
        
        # Assigning a Call to a Name (line 958):
        
        # Call to strip(...): (line 958)
        # Processing the call keyword arguments (line 958)
        kwargs_190375 = {}
        # Getting the type of 'key' (line 958)
        key_190373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 22), 'key', False)
        # Obtaining the member 'strip' of a type (line 958)
        strip_190374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 22), key_190373, 'strip')
        # Calling strip(args, kwargs) (line 958)
        strip_call_result_190376 = invoke(stypy.reporting.localization.Localization(__file__, 958, 22), strip_190374, *[], **kwargs_190375)
        
        # Assigning a type to the variable 'key' (line 958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 16), 'key', strip_call_result_190376)
        
        # Assigning a Call to a Name (line 959):
        
        # Assigning a Call to a Name (line 959):
        
        # Call to strip(...): (line 959)
        # Processing the call keyword arguments (line 959)
        kwargs_190379 = {}
        # Getting the type of 'val' (line 959)
        val_190377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 22), 'val', False)
        # Obtaining the member 'strip' of a type (line 959)
        strip_190378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 22), val_190377, 'strip')
        # Calling strip(args, kwargs) (line 959)
        strip_call_result_190380 = invoke(stypy.reporting.localization.Localization(__file__, 959, 22), strip_190378, *[], **kwargs_190379)
        
        # Assigning a type to the variable 'val' (line 959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 16), 'val', strip_call_result_190380)
        
        
        # Getting the type of 'key' (line 960)
        key_190381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 19), 'key')
        # Getting the type of 'rc_temp' (line 960)
        rc_temp_190382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 26), 'rc_temp')
        # Applying the binary operator 'in' (line 960)
        result_contains_190383 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 19), 'in', key_190381, rc_temp_190382)
        
        # Testing the type of an if condition (line 960)
        if_condition_190384 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 960, 16), result_contains_190383)
        # Assigning a type to the variable 'if_condition_190384' (line 960)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 960, 16), 'if_condition_190384', if_condition_190384)
        # SSA begins for if statement (line 960)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 961)
        # Processing the call arguments (line 961)
        unicode_190387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 961, 34), 'unicode', u'Duplicate key in file "%s", line #%d')
        
        # Obtaining an instance of the builtin type 'tuple' (line 962)
        tuple_190388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 962)
        # Adding element type (line 962)
        # Getting the type of 'fname' (line 962)
        fname_190389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 35), 'fname', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 962, 35), tuple_190388, fname_190389)
        # Adding element type (line 962)
        # Getting the type of 'cnt' (line 962)
        cnt_190390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 42), 'cnt', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 962, 35), tuple_190388, cnt_190390)
        
        # Applying the binary operator '%' (line 961)
        result_mod_190391 = python_operator(stypy.reporting.localization.Localization(__file__, 961, 34), '%', unicode_190387, tuple_190388)
        
        # Processing the call keyword arguments (line 961)
        kwargs_190392 = {}
        # Getting the type of 'warnings' (line 961)
        warnings_190385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 20), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 961)
        warn_190386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 961, 20), warnings_190385, 'warn')
        # Calling warn(args, kwargs) (line 961)
        warn_call_result_190393 = invoke(stypy.reporting.localization.Localization(__file__, 961, 20), warn_190386, *[result_mod_190391], **kwargs_190392)
        
        # SSA join for if statement (line 960)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Subscript (line 963):
        
        # Assigning a Tuple to a Subscript (line 963):
        
        # Obtaining an instance of the builtin type 'tuple' (line 963)
        tuple_190394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 963)
        # Adding element type (line 963)
        # Getting the type of 'val' (line 963)
        val_190395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 32), 'val')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 963, 32), tuple_190394, val_190395)
        # Adding element type (line 963)
        # Getting the type of 'line' (line 963)
        line_190396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 37), 'line')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 963, 32), tuple_190394, line_190396)
        # Adding element type (line 963)
        # Getting the type of 'cnt' (line 963)
        cnt_190397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 43), 'cnt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 963, 32), tuple_190394, cnt_190397)
        
        # Getting the type of 'rc_temp' (line 963)
        rc_temp_190398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 16), 'rc_temp')
        # Getting the type of 'key' (line 963)
        key_190399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 24), 'key')
        # Storing an element on a container (line 963)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 963, 16), rc_temp_190398, (key_190399, tuple_190394))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 946)
        # SSA branch for the except 'UnicodeDecodeError' branch of a try statement (line 946)
        module_type_store.open_ssa_branch('except')
        
        # Call to warn(...): (line 965)
        # Processing the call arguments (line 965)
        unicode_190402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 966, 17), 'unicode', u'Cannot decode configuration file %s with encoding %s, check LANG and LC_* variables')
        
        # Obtaining an instance of the builtin type 'tuple' (line 968)
        tuple_190403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 968, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 968)
        # Adding element type (line 968)
        # Getting the type of 'fname' (line 968)
        fname_190404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 19), 'fname', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 968, 19), tuple_190403, fname_190404)
        # Adding element type (line 968)
        
        # Evaluating a boolean operation
        
        # Call to getpreferredencoding(...): (line 968)
        # Processing the call keyword arguments (line 968)
        # Getting the type of 'False' (line 968)
        False_190407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 67), 'False', False)
        keyword_190408 = False_190407
        kwargs_190409 = {'do_setlocale': keyword_190408}
        # Getting the type of 'locale' (line 968)
        locale_190405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 26), 'locale', False)
        # Obtaining the member 'getpreferredencoding' of a type (line 968)
        getpreferredencoding_190406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 26), locale_190405, 'getpreferredencoding')
        # Calling getpreferredencoding(args, kwargs) (line 968)
        getpreferredencoding_call_result_190410 = invoke(stypy.reporting.localization.Localization(__file__, 968, 26), getpreferredencoding_190406, *[], **kwargs_190409)
        
        unicode_190411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 969, 19), 'unicode', u'utf-8 (default)')
        # Applying the binary operator 'or' (line 968)
        result_or_keyword_190412 = python_operator(stypy.reporting.localization.Localization(__file__, 968, 26), 'or', getpreferredencoding_call_result_190410, unicode_190411)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 968, 19), tuple_190403, result_or_keyword_190412)
        
        # Applying the binary operator '%' (line 966)
        result_mod_190413 = python_operator(stypy.reporting.localization.Localization(__file__, 966, 16), '%', unicode_190402, tuple_190403)
        
        # Processing the call keyword arguments (line 965)
        kwargs_190414 = {}
        # Getting the type of 'warnings' (line 965)
        warnings_190400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 965)
        warn_190401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 12), warnings_190400, 'warn')
        # Calling warn(args, kwargs) (line 965)
        warn_call_result_190415 = invoke(stypy.reporting.localization.Localization(__file__, 965, 12), warn_190401, *[result_mod_190413], **kwargs_190414)
        
        # SSA join for try-except statement (line 946)
        module_type_store = module_type_store.join_ssa_context()
        
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 945)
        exit___190416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 9), _open_file_or_url_call_result_190313, '__exit__')
        with_exit_190417 = invoke(stypy.reporting.localization.Localization(__file__, 945, 9), exit___190416, None, None, None)

    
    # Assigning a Call to a Name (line 972):
    
    # Assigning a Call to a Name (line 972):
    
    # Call to RcParams(...): (line 972)
    # Processing the call keyword arguments (line 972)
    kwargs_190419 = {}
    # Getting the type of 'RcParams' (line 972)
    RcParams_190418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 13), 'RcParams', False)
    # Calling RcParams(args, kwargs) (line 972)
    RcParams_call_result_190420 = invoke(stypy.reporting.localization.Localization(__file__, 972, 13), RcParams_190418, *[], **kwargs_190419)
    
    # Assigning a type to the variable 'config' (line 972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 972, 4), 'config', RcParams_call_result_190420)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 974)
    tuple_190421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 974, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 974)
    # Adding element type (line 974)
    unicode_190422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 974, 16), 'unicode', u'verbose.level')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 974, 16), tuple_190421, unicode_190422)
    # Adding element type (line 974)
    unicode_190423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 974, 33), 'unicode', u'verbose.fileo')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 974, 16), tuple_190421, unicode_190423)
    
    # Testing the type of a for loop iterable (line 974)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 974, 4), tuple_190421)
    # Getting the type of the for loop variable (line 974)
    for_loop_var_190424 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 974, 4), tuple_190421)
    # Assigning a type to the variable 'key' (line 974)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 974, 4), 'key', for_loop_var_190424)
    # SSA begins for a for statement (line 974)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'key' (line 975)
    key_190425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 11), 'key')
    # Getting the type of 'rc_temp' (line 975)
    rc_temp_190426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 18), 'rc_temp')
    # Applying the binary operator 'in' (line 975)
    result_contains_190427 = python_operator(stypy.reporting.localization.Localization(__file__, 975, 11), 'in', key_190425, rc_temp_190426)
    
    # Testing the type of an if condition (line 975)
    if_condition_190428 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 975, 8), result_contains_190427)
    # Assigning a type to the variable 'if_condition_190428' (line 975)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 975, 8), 'if_condition_190428', if_condition_190428)
    # SSA begins for if statement (line 975)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 976):
    
    # Assigning a Call to a Name:
    
    # Call to pop(...): (line 976)
    # Processing the call arguments (line 976)
    # Getting the type of 'key' (line 976)
    key_190431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 41), 'key', False)
    # Processing the call keyword arguments (line 976)
    kwargs_190432 = {}
    # Getting the type of 'rc_temp' (line 976)
    rc_temp_190429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 29), 'rc_temp', False)
    # Obtaining the member 'pop' of a type (line 976)
    pop_190430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 29), rc_temp_190429, 'pop')
    # Calling pop(args, kwargs) (line 976)
    pop_call_result_190433 = invoke(stypy.reporting.localization.Localization(__file__, 976, 29), pop_190430, *[key_190431], **kwargs_190432)
    
    # Assigning a type to the variable 'call_assignment_188215' (line 976)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 12), 'call_assignment_188215', pop_call_result_190433)
    
    # Assigning a Call to a Name (line 976):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_190436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 976, 12), 'int')
    # Processing the call keyword arguments
    kwargs_190437 = {}
    # Getting the type of 'call_assignment_188215' (line 976)
    call_assignment_188215_190434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 12), 'call_assignment_188215', False)
    # Obtaining the member '__getitem__' of a type (line 976)
    getitem___190435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 12), call_assignment_188215_190434, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_190438 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___190435, *[int_190436], **kwargs_190437)
    
    # Assigning a type to the variable 'call_assignment_188216' (line 976)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 12), 'call_assignment_188216', getitem___call_result_190438)
    
    # Assigning a Name to a Name (line 976):
    # Getting the type of 'call_assignment_188216' (line 976)
    call_assignment_188216_190439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 12), 'call_assignment_188216')
    # Assigning a type to the variable 'val' (line 976)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 12), 'val', call_assignment_188216_190439)
    
    # Assigning a Call to a Name (line 976):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_190442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 976, 12), 'int')
    # Processing the call keyword arguments
    kwargs_190443 = {}
    # Getting the type of 'call_assignment_188215' (line 976)
    call_assignment_188215_190440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 12), 'call_assignment_188215', False)
    # Obtaining the member '__getitem__' of a type (line 976)
    getitem___190441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 12), call_assignment_188215_190440, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_190444 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___190441, *[int_190442], **kwargs_190443)
    
    # Assigning a type to the variable 'call_assignment_188217' (line 976)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 12), 'call_assignment_188217', getitem___call_result_190444)
    
    # Assigning a Name to a Name (line 976):
    # Getting the type of 'call_assignment_188217' (line 976)
    call_assignment_188217_190445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 12), 'call_assignment_188217')
    # Assigning a type to the variable 'line' (line 976)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 17), 'line', call_assignment_188217_190445)
    
    # Assigning a Call to a Name (line 976):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_190448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 976, 12), 'int')
    # Processing the call keyword arguments
    kwargs_190449 = {}
    # Getting the type of 'call_assignment_188215' (line 976)
    call_assignment_188215_190446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 12), 'call_assignment_188215', False)
    # Obtaining the member '__getitem__' of a type (line 976)
    getitem___190447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 12), call_assignment_188215_190446, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_190450 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___190447, *[int_190448], **kwargs_190449)
    
    # Assigning a type to the variable 'call_assignment_188218' (line 976)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 12), 'call_assignment_188218', getitem___call_result_190450)
    
    # Assigning a Name to a Name (line 976):
    # Getting the type of 'call_assignment_188218' (line 976)
    call_assignment_188218_190451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 12), 'call_assignment_188218')
    # Assigning a type to the variable 'cnt' (line 976)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 23), 'cnt', call_assignment_188218_190451)
    
    # Getting the type of 'fail_on_error' (line 977)
    fail_on_error_190452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 15), 'fail_on_error')
    # Testing the type of an if condition (line 977)
    if_condition_190453 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 977, 12), fail_on_error_190452)
    # Assigning a type to the variable 'if_condition_190453' (line 977)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 12), 'if_condition_190453', if_condition_190453)
    # SSA begins for if statement (line 977)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 978):
    
    # Assigning a Name to a Subscript (line 978):
    # Getting the type of 'val' (line 978)
    val_190454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 30), 'val')
    # Getting the type of 'config' (line 978)
    config_190455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 16), 'config')
    # Getting the type of 'key' (line 978)
    key_190456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 23), 'key')
    # Storing an element on a container (line 978)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 978, 16), config_190455, (key_190456, val_190454))
    # SSA branch for the else part of an if statement (line 977)
    module_type_store.open_ssa_branch('else')
    
    
    # SSA begins for try-except statement (line 980)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Name to a Subscript (line 981):
    
    # Assigning a Name to a Subscript (line 981):
    # Getting the type of 'val' (line 981)
    val_190457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 34), 'val')
    # Getting the type of 'config' (line 981)
    config_190458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 20), 'config')
    # Getting the type of 'key' (line 981)
    key_190459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 27), 'key')
    # Storing an element on a container (line 981)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 981, 20), config_190458, (key_190459, val_190457))
    # SSA branch for the except part of a try statement (line 980)
    # SSA branch for the except 'Exception' branch of a try statement (line 980)
    # Storing handler type
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'Exception' (line 982)
    Exception_190460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 23), 'Exception')
    # Assigning a type to the variable 'msg' (line 982)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 16), 'msg', Exception_190460)
    
    # Assigning a BinOp to a Name (line 983):
    
    # Assigning a BinOp to a Name (line 983):
    # Getting the type of '_error_details_fmt' (line 983)
    _error_details_fmt_190461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 36), '_error_details_fmt')
    
    # Obtaining an instance of the builtin type 'tuple' (line 983)
    tuple_190462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 983, 58), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 983)
    # Adding element type (line 983)
    # Getting the type of 'cnt' (line 983)
    cnt_190463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 58), 'cnt')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 983, 58), tuple_190462, cnt_190463)
    # Adding element type (line 983)
    # Getting the type of 'line' (line 983)
    line_190464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 63), 'line')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 983, 58), tuple_190462, line_190464)
    # Adding element type (line 983)
    # Getting the type of 'fname' (line 983)
    fname_190465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 69), 'fname')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 983, 58), tuple_190462, fname_190465)
    
    # Applying the binary operator '%' (line 983)
    result_mod_190466 = python_operator(stypy.reporting.localization.Localization(__file__, 983, 36), '%', _error_details_fmt_190461, tuple_190462)
    
    # Assigning a type to the variable 'error_details' (line 983)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 983, 20), 'error_details', result_mod_190466)
    
    # Call to warn(...): (line 984)
    # Processing the call arguments (line 984)
    unicode_190469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 984, 34), 'unicode', u'Bad val "%s" on %s\n\t%s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 985)
    tuple_190470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 985, 35), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 985)
    # Adding element type (line 985)
    # Getting the type of 'val' (line 985)
    val_190471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 35), 'val', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 985, 35), tuple_190470, val_190471)
    # Adding element type (line 985)
    # Getting the type of 'error_details' (line 985)
    error_details_190472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 40), 'error_details', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 985, 35), tuple_190470, error_details_190472)
    # Adding element type (line 985)
    # Getting the type of 'msg' (line 985)
    msg_190473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 55), 'msg', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 985, 35), tuple_190470, msg_190473)
    
    # Applying the binary operator '%' (line 984)
    result_mod_190474 = python_operator(stypy.reporting.localization.Localization(__file__, 984, 34), '%', unicode_190469, tuple_190470)
    
    # Processing the call keyword arguments (line 984)
    kwargs_190475 = {}
    # Getting the type of 'warnings' (line 984)
    warnings_190467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 20), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 984)
    warn_190468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 984, 20), warnings_190467, 'warn')
    # Calling warn(args, kwargs) (line 984)
    warn_call_result_190476 = invoke(stypy.reporting.localization.Localization(__file__, 984, 20), warn_190468, *[result_mod_190474], **kwargs_190475)
    
    # SSA join for try-except statement (line 980)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 977)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 975)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to iteritems(...): (line 987)
    # Processing the call arguments (line 987)
    # Getting the type of 'rc_temp' (line 987)
    rc_temp_190479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 47), 'rc_temp', False)
    # Processing the call keyword arguments (line 987)
    kwargs_190480 = {}
    # Getting the type of 'six' (line 987)
    six_190477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 33), 'six', False)
    # Obtaining the member 'iteritems' of a type (line 987)
    iteritems_190478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 33), six_190477, 'iteritems')
    # Calling iteritems(args, kwargs) (line 987)
    iteritems_call_result_190481 = invoke(stypy.reporting.localization.Localization(__file__, 987, 33), iteritems_190478, *[rc_temp_190479], **kwargs_190480)
    
    # Testing the type of a for loop iterable (line 987)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 987, 4), iteritems_call_result_190481)
    # Getting the type of the for loop variable (line 987)
    for_loop_var_190482 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 987, 4), iteritems_call_result_190481)
    # Assigning a type to the variable 'key' (line 987)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 4), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 987, 4), for_loop_var_190482))
    # Assigning a type to the variable 'val' (line 987)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 4), 'val', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 987, 4), for_loop_var_190482))
    # Assigning a type to the variable 'line' (line 987)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 4), 'line', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 987, 4), for_loop_var_190482))
    # Assigning a type to the variable 'cnt' (line 987)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 4), 'cnt', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 987, 4), for_loop_var_190482))
    # SSA begins for a for statement (line 987)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'key' (line 988)
    key_190483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 11), 'key')
    # Getting the type of 'defaultParams' (line 988)
    defaultParams_190484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 18), 'defaultParams')
    # Applying the binary operator 'in' (line 988)
    result_contains_190485 = python_operator(stypy.reporting.localization.Localization(__file__, 988, 11), 'in', key_190483, defaultParams_190484)
    
    # Testing the type of an if condition (line 988)
    if_condition_190486 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 988, 8), result_contains_190485)
    # Assigning a type to the variable 'if_condition_190486' (line 988)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 988, 8), 'if_condition_190486', if_condition_190486)
    # SSA begins for if statement (line 988)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'fail_on_error' (line 989)
    fail_on_error_190487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 15), 'fail_on_error')
    # Testing the type of an if condition (line 989)
    if_condition_190488 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 989, 12), fail_on_error_190487)
    # Assigning a type to the variable 'if_condition_190488' (line 989)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 989, 12), 'if_condition_190488', if_condition_190488)
    # SSA begins for if statement (line 989)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 990):
    
    # Assigning a Name to a Subscript (line 990):
    # Getting the type of 'val' (line 990)
    val_190489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 30), 'val')
    # Getting the type of 'config' (line 990)
    config_190490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 16), 'config')
    # Getting the type of 'key' (line 990)
    key_190491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 23), 'key')
    # Storing an element on a container (line 990)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 990, 16), config_190490, (key_190491, val_190489))
    # SSA branch for the else part of an if statement (line 989)
    module_type_store.open_ssa_branch('else')
    
    
    # SSA begins for try-except statement (line 992)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Name to a Subscript (line 993):
    
    # Assigning a Name to a Subscript (line 993):
    # Getting the type of 'val' (line 993)
    val_190492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 34), 'val')
    # Getting the type of 'config' (line 993)
    config_190493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 20), 'config')
    # Getting the type of 'key' (line 993)
    key_190494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 27), 'key')
    # Storing an element on a container (line 993)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 993, 20), config_190493, (key_190494, val_190492))
    # SSA branch for the except part of a try statement (line 992)
    # SSA branch for the except 'Exception' branch of a try statement (line 992)
    # Storing handler type
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'Exception' (line 994)
    Exception_190495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 23), 'Exception')
    # Assigning a type to the variable 'msg' (line 994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 16), 'msg', Exception_190495)
    
    # Assigning a BinOp to a Name (line 995):
    
    # Assigning a BinOp to a Name (line 995):
    # Getting the type of '_error_details_fmt' (line 995)
    _error_details_fmt_190496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 36), '_error_details_fmt')
    
    # Obtaining an instance of the builtin type 'tuple' (line 995)
    tuple_190497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 995, 58), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 995)
    # Adding element type (line 995)
    # Getting the type of 'cnt' (line 995)
    cnt_190498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 58), 'cnt')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 995, 58), tuple_190497, cnt_190498)
    # Adding element type (line 995)
    # Getting the type of 'line' (line 995)
    line_190499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 63), 'line')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 995, 58), tuple_190497, line_190499)
    # Adding element type (line 995)
    # Getting the type of 'fname' (line 995)
    fname_190500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 69), 'fname')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 995, 58), tuple_190497, fname_190500)
    
    # Applying the binary operator '%' (line 995)
    result_mod_190501 = python_operator(stypy.reporting.localization.Localization(__file__, 995, 36), '%', _error_details_fmt_190496, tuple_190497)
    
    # Assigning a type to the variable 'error_details' (line 995)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 20), 'error_details', result_mod_190501)
    
    # Call to warn(...): (line 996)
    # Processing the call arguments (line 996)
    unicode_190504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 996, 34), 'unicode', u'Bad val "%s" on %s\n\t%s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 997)
    tuple_190505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 997, 35), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 997)
    # Adding element type (line 997)
    # Getting the type of 'val' (line 997)
    val_190506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 35), 'val', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 997, 35), tuple_190505, val_190506)
    # Adding element type (line 997)
    # Getting the type of 'error_details' (line 997)
    error_details_190507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 40), 'error_details', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 997, 35), tuple_190505, error_details_190507)
    # Adding element type (line 997)
    # Getting the type of 'msg' (line 997)
    msg_190508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 55), 'msg', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 997, 35), tuple_190505, msg_190508)
    
    # Applying the binary operator '%' (line 996)
    result_mod_190509 = python_operator(stypy.reporting.localization.Localization(__file__, 996, 34), '%', unicode_190504, tuple_190505)
    
    # Processing the call keyword arguments (line 996)
    kwargs_190510 = {}
    # Getting the type of 'warnings' (line 996)
    warnings_190502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 20), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 996)
    warn_190503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 20), warnings_190502, 'warn')
    # Calling warn(args, kwargs) (line 996)
    warn_call_result_190511 = invoke(stypy.reporting.localization.Localization(__file__, 996, 20), warn_190503, *[result_mod_190509], **kwargs_190510)
    
    # SSA join for try-except statement (line 992)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 989)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 988)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'key' (line 998)
    key_190512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 13), 'key')
    # Getting the type of '_deprecated_ignore_map' (line 998)
    _deprecated_ignore_map_190513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 20), '_deprecated_ignore_map')
    # Applying the binary operator 'in' (line 998)
    result_contains_190514 = python_operator(stypy.reporting.localization.Localization(__file__, 998, 13), 'in', key_190512, _deprecated_ignore_map_190513)
    
    # Testing the type of an if condition (line 998)
    if_condition_190515 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 998, 13), result_contains_190514)
    # Assigning a type to the variable 'if_condition_190515' (line 998)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 998, 13), 'if_condition_190515', if_condition_190515)
    # SSA begins for if statement (line 998)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 999)
    # Processing the call arguments (line 999)
    unicode_190518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 999, 26), 'unicode', u'%s is deprecated. Update your matplotlibrc to use %s instead.')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1000)
    tuple_190519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1000, 43), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1000)
    # Adding element type (line 1000)
    # Getting the type of 'key' (line 1000)
    key_190520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 43), 'key', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1000, 43), tuple_190519, key_190520)
    # Adding element type (line 1000)
    
    # Obtaining the type of the subscript
    # Getting the type of 'key' (line 1000)
    key_190521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 71), 'key', False)
    # Getting the type of '_deprecated_ignore_map' (line 1000)
    _deprecated_ignore_map_190522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 48), '_deprecated_ignore_map', False)
    # Obtaining the member '__getitem__' of a type (line 1000)
    getitem___190523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 48), _deprecated_ignore_map_190522, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1000)
    subscript_call_result_190524 = invoke(stypy.reporting.localization.Localization(__file__, 1000, 48), getitem___190523, key_190521)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1000, 43), tuple_190519, subscript_call_result_190524)
    
    # Applying the binary operator '%' (line 999)
    result_mod_190525 = python_operator(stypy.reporting.localization.Localization(__file__, 999, 26), '%', unicode_190518, tuple_190519)
    
    # Getting the type of 'mplDeprecation' (line 1001)
    mplDeprecation_190526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 26), 'mplDeprecation', False)
    # Processing the call keyword arguments (line 999)
    kwargs_190527 = {}
    # Getting the type of 'warnings' (line 999)
    warnings_190516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 12), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 999)
    warn_190517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 999, 12), warnings_190516, 'warn')
    # Calling warn(args, kwargs) (line 999)
    warn_call_result_190528 = invoke(stypy.reporting.localization.Localization(__file__, 999, 12), warn_190517, *[result_mod_190525, mplDeprecation_190526], **kwargs_190527)
    
    # SSA branch for the else part of an if statement (line 998)
    module_type_store.open_ssa_branch('else')
    
    # Call to print(...): (line 1004)
    # Processing the call arguments (line 1004)
    unicode_190530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1009, (-1)), 'unicode', u'\nBad key "%s" on line %d in\n%s.\nYou probably need to get an updated matplotlibrc file from\nhttp://github.com/matplotlib/matplotlib/blob/master/matplotlibrc.template\nor from the matplotlib source distribution')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1009)
    tuple_190531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1009, 49), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1009)
    # Adding element type (line 1009)
    # Getting the type of 'key' (line 1009)
    key_190532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 49), 'key', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1009, 49), tuple_190531, key_190532)
    # Adding element type (line 1009)
    # Getting the type of 'cnt' (line 1009)
    cnt_190533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 54), 'cnt', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1009, 49), tuple_190531, cnt_190533)
    # Adding element type (line 1009)
    # Getting the type of 'fname' (line 1009)
    fname_190534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 59), 'fname', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1009, 49), tuple_190531, fname_190534)
    
    # Applying the binary operator '%' (line 1009)
    result_mod_190535 = python_operator(stypy.reporting.localization.Localization(__file__, 1009, (-1)), '%', unicode_190530, tuple_190531)
    
    # Processing the call keyword arguments (line 1004)
    # Getting the type of 'sys' (line 1010)
    sys_190536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 23), 'sys', False)
    # Obtaining the member 'stderr' of a type (line 1010)
    stderr_190537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1010, 23), sys_190536, 'stderr')
    keyword_190538 = stderr_190537
    kwargs_190539 = {'file': keyword_190538}
    # Getting the type of 'print' (line 1004)
    print_190529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 12), 'print', False)
    # Calling print(args, kwargs) (line 1004)
    print_call_result_190540 = invoke(stypy.reporting.localization.Localization(__file__, 1004, 12), print_190529, *[result_mod_190535], **kwargs_190539)
    
    # SSA join for if statement (line 998)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 988)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'config' (line 1012)
    config_190541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 11), 'config')
    # Assigning a type to the variable 'stypy_return_type' (line 1012)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1012, 4), 'stypy_return_type', config_190541)
    
    # ################# End of '_rc_params_in_file(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_rc_params_in_file' in the type store
    # Getting the type of 'stypy_return_type' (line 937)
    stypy_return_type_190542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_190542)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_rc_params_in_file'
    return stypy_return_type_190542

# Assigning a type to the variable '_rc_params_in_file' (line 937)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 0), '_rc_params_in_file', _rc_params_in_file)

@norecursion
def rc_params_from_file(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1015)
    False_190543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 45), 'False')
    # Getting the type of 'True' (line 1015)
    True_190544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 73), 'True')
    defaults = [False_190543, True_190544]
    # Create a new context for function 'rc_params_from_file'
    module_type_store = module_type_store.open_function_context('rc_params_from_file', 1015, 0, False)
    
    # Passed parameters checking function
    rc_params_from_file.stypy_localization = localization
    rc_params_from_file.stypy_type_of_self = None
    rc_params_from_file.stypy_type_store = module_type_store
    rc_params_from_file.stypy_function_name = 'rc_params_from_file'
    rc_params_from_file.stypy_param_names_list = ['fname', 'fail_on_error', 'use_default_template']
    rc_params_from_file.stypy_varargs_param_name = None
    rc_params_from_file.stypy_kwargs_param_name = None
    rc_params_from_file.stypy_call_defaults = defaults
    rc_params_from_file.stypy_call_varargs = varargs
    rc_params_from_file.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rc_params_from_file', ['fname', 'fail_on_error', 'use_default_template'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rc_params_from_file', localization, ['fname', 'fail_on_error', 'use_default_template'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rc_params_from_file(...)' code ##################

    unicode_190545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, (-1)), 'unicode', u'Return :class:`matplotlib.RcParams` from the contents of the given file.\n\n    Parameters\n    ----------\n    fname : str\n        Name of file parsed for matplotlib settings.\n    fail_on_error : bool\n        If True, raise an error when the parser fails to convert a parameter.\n    use_default_template : bool\n        If True, initialize with default parameters before updating with those\n        in the given file. If False, the configuration class only contains the\n        parameters specified in the file. (Useful for updating dicts.)\n    ')
    
    # Assigning a Call to a Name (line 1029):
    
    # Assigning a Call to a Name (line 1029):
    
    # Call to _rc_params_in_file(...): (line 1029)
    # Processing the call arguments (line 1029)
    # Getting the type of 'fname' (line 1029)
    fname_190547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 42), 'fname', False)
    # Getting the type of 'fail_on_error' (line 1029)
    fail_on_error_190548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 49), 'fail_on_error', False)
    # Processing the call keyword arguments (line 1029)
    kwargs_190549 = {}
    # Getting the type of '_rc_params_in_file' (line 1029)
    _rc_params_in_file_190546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 23), '_rc_params_in_file', False)
    # Calling _rc_params_in_file(args, kwargs) (line 1029)
    _rc_params_in_file_call_result_190550 = invoke(stypy.reporting.localization.Localization(__file__, 1029, 23), _rc_params_in_file_190546, *[fname_190547, fail_on_error_190548], **kwargs_190549)
    
    # Assigning a type to the variable 'config_from_file' (line 1029)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1029, 4), 'config_from_file', _rc_params_in_file_call_result_190550)
    
    
    # Getting the type of 'use_default_template' (line 1031)
    use_default_template_190551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 11), 'use_default_template')
    # Applying the 'not' unary operator (line 1031)
    result_not__190552 = python_operator(stypy.reporting.localization.Localization(__file__, 1031, 7), 'not', use_default_template_190551)
    
    # Testing the type of an if condition (line 1031)
    if_condition_190553 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1031, 4), result_not__190552)
    # Assigning a type to the variable 'if_condition_190553' (line 1031)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1031, 4), 'if_condition_190553', if_condition_190553)
    # SSA begins for if statement (line 1031)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'config_from_file' (line 1032)
    config_from_file_190554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 15), 'config_from_file')
    # Assigning a type to the variable 'stypy_return_type' (line 1032)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1032, 8), 'stypy_return_type', config_from_file_190554)
    # SSA join for if statement (line 1031)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1034):
    
    # Assigning a Call to a Name (line 1034):
    
    # Call to iteritems(...): (line 1034)
    # Processing the call arguments (line 1034)
    # Getting the type of 'defaultParams' (line 1034)
    defaultParams_190557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 32), 'defaultParams', False)
    # Processing the call keyword arguments (line 1034)
    kwargs_190558 = {}
    # Getting the type of 'six' (line 1034)
    six_190555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 18), 'six', False)
    # Obtaining the member 'iteritems' of a type (line 1034)
    iteritems_190556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 18), six_190555, 'iteritems')
    # Calling iteritems(args, kwargs) (line 1034)
    iteritems_call_result_190559 = invoke(stypy.reporting.localization.Localization(__file__, 1034, 18), iteritems_190556, *[defaultParams_190557], **kwargs_190558)
    
    # Assigning a type to the variable 'iter_params' (line 1034)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1034, 4), 'iter_params', iteritems_call_result_190559)
    
    # Assigning a Call to a Name (line 1035):
    
    # Assigning a Call to a Name (line 1035):
    
    # Call to RcParams(...): (line 1035)
    # Processing the call arguments (line 1035)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'iter_params' (line 1035)
    iter_params_190567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 63), 'iter_params', False)
    comprehension_190568 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1035, 23), iter_params_190567)
    # Assigning a type to the variable 'key' (line 1035)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1035, 23), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1035, 23), comprehension_190568))
    # Assigning a type to the variable 'tuple_190569' (line 1035)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1035, 23), 'tuple_190569', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1035, 23), comprehension_190568))
    
    # Obtaining an instance of the builtin type 'tuple' (line 1035)
    tuple_190569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1035, 48), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1035)
    # Adding element type (line 1035)default
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1035, 48), tuple_190569, )
    # Adding element type (line 1035)_
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1035, 48), tuple_190569, )
    
    # Assigning a type to the variable 'key' (line 1035)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1035, 23), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1035, 23), comprehension_190568))
    # Assigning a type to the variable 'tuple_190569' (line 1035)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1035, 23), 'tuple_190569', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1035, 23), comprehension_190568))
    
    # Getting the type of 'key' (line 1036)
    key_190564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 41), 'key', False)
    # Getting the type of '_all_deprecated' (line 1036)
    _all_deprecated_190565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 52), '_all_deprecated', False)
    # Applying the binary operator 'notin' (line 1036)
    result_contains_190566 = python_operator(stypy.reporting.localization.Localization(__file__, 1036, 41), 'notin', key_190564, _all_deprecated_190565)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1035)
    tuple_190561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1035, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1035)
    # Adding element type (line 1035)
    # Getting the type of 'key' (line 1035)
    key_190562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 24), 'key', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1035, 24), tuple_190561, key_190562)
    # Adding element type (line 1035)
    # Getting the type of 'default' (line 1035)
    default_190563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 29), 'default', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1035, 24), tuple_190561, default_190563)
    
    list_190570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1035, 23), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1035, 23), list_190570, tuple_190561)
    # Processing the call keyword arguments (line 1035)
    kwargs_190571 = {}
    # Getting the type of 'RcParams' (line 1035)
    RcParams_190560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 13), 'RcParams', False)
    # Calling RcParams(args, kwargs) (line 1035)
    RcParams_call_result_190572 = invoke(stypy.reporting.localization.Localization(__file__, 1035, 13), RcParams_190560, *[list_190570], **kwargs_190571)
    
    # Assigning a type to the variable 'config' (line 1035)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1035, 4), 'config', RcParams_call_result_190572)
    
    # Call to update(...): (line 1037)
    # Processing the call arguments (line 1037)
    # Getting the type of 'config_from_file' (line 1037)
    config_from_file_190575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 18), 'config_from_file', False)
    # Processing the call keyword arguments (line 1037)
    kwargs_190576 = {}
    # Getting the type of 'config' (line 1037)
    config_190573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 4), 'config', False)
    # Obtaining the member 'update' of a type (line 1037)
    update_190574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 4), config_190573, 'update')
    # Calling update(args, kwargs) (line 1037)
    update_call_result_190577 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 4), update_190574, *[config_from_file_190575], **kwargs_190576)
    
    
    # Call to set_level(...): (line 1039)
    # Processing the call arguments (line 1039)
    
    # Obtaining the type of the subscript
    unicode_190580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 29), 'unicode', u'verbose.level')
    # Getting the type of 'config' (line 1039)
    config_190581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 22), 'config', False)
    # Obtaining the member '__getitem__' of a type (line 1039)
    getitem___190582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 22), config_190581, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1039)
    subscript_call_result_190583 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 22), getitem___190582, unicode_190580)
    
    # Processing the call keyword arguments (line 1039)
    kwargs_190584 = {}
    # Getting the type of 'verbose' (line 1039)
    verbose_190578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 4), 'verbose', False)
    # Obtaining the member 'set_level' of a type (line 1039)
    set_level_190579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 4), verbose_190578, 'set_level')
    # Calling set_level(args, kwargs) (line 1039)
    set_level_call_result_190585 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 4), set_level_190579, *[subscript_call_result_190583], **kwargs_190584)
    
    
    # Call to set_fileo(...): (line 1040)
    # Processing the call arguments (line 1040)
    
    # Obtaining the type of the subscript
    unicode_190588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 29), 'unicode', u'verbose.fileo')
    # Getting the type of 'config' (line 1040)
    config_190589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 22), 'config', False)
    # Obtaining the member '__getitem__' of a type (line 1040)
    getitem___190590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 22), config_190589, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1040)
    subscript_call_result_190591 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 22), getitem___190590, unicode_190588)
    
    # Processing the call keyword arguments (line 1040)
    kwargs_190592 = {}
    # Getting the type of 'verbose' (line 1040)
    verbose_190586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 4), 'verbose', False)
    # Obtaining the member 'set_fileo' of a type (line 1040)
    set_fileo_190587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 4), verbose_190586, 'set_fileo')
    # Calling set_fileo(args, kwargs) (line 1040)
    set_fileo_call_result_190593 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 4), set_fileo_190587, *[subscript_call_result_190591], **kwargs_190592)
    
    
    # Type idiom detected: calculating its left and rigth part (line 1042)
    
    # Obtaining the type of the subscript
    unicode_190594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 14), 'unicode', u'datapath')
    # Getting the type of 'config' (line 1042)
    config_190595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 7), 'config')
    # Obtaining the member '__getitem__' of a type (line 1042)
    getitem___190596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 7), config_190595, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1042)
    subscript_call_result_190597 = invoke(stypy.reporting.localization.Localization(__file__, 1042, 7), getitem___190596, unicode_190594)
    
    # Getting the type of 'None' (line 1042)
    None_190598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 29), 'None')
    
    (may_be_190599, more_types_in_union_190600) = may_be_none(subscript_call_result_190597, None_190598)

    if may_be_190599:

        if more_types_in_union_190600:
            # Runtime conditional SSA (line 1042)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Subscript (line 1043):
        
        # Assigning a Call to a Subscript (line 1043):
        
        # Call to get_data_path(...): (line 1043)
        # Processing the call keyword arguments (line 1043)
        kwargs_190602 = {}
        # Getting the type of 'get_data_path' (line 1043)
        get_data_path_190601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 29), 'get_data_path', False)
        # Calling get_data_path(args, kwargs) (line 1043)
        get_data_path_call_result_190603 = invoke(stypy.reporting.localization.Localization(__file__, 1043, 29), get_data_path_190601, *[], **kwargs_190602)
        
        # Getting the type of 'config' (line 1043)
        config_190604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 8), 'config')
        unicode_190605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 15), 'unicode', u'datapath')
        # Storing an element on a container (line 1043)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 8), config_190604, (unicode_190605, get_data_path_call_result_190603))

        if more_types_in_union_190600:
            # SSA join for if statement (line 1042)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Call to join(...): (line 1045)
    # Processing the call arguments (line 1045)
    
    # Obtaining the type of the subscript
    unicode_190608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 22), 'unicode', u'text.latex.preamble')
    # Getting the type of 'config' (line 1045)
    config_190609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 15), 'config', False)
    # Obtaining the member '__getitem__' of a type (line 1045)
    getitem___190610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 15), config_190609, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1045)
    subscript_call_result_190611 = invoke(stypy.reporting.localization.Localization(__file__, 1045, 15), getitem___190610, unicode_190608)
    
    # Processing the call keyword arguments (line 1045)
    kwargs_190612 = {}
    unicode_190606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 7), 'unicode', u'')
    # Obtaining the member 'join' of a type (line 1045)
    join_190607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 7), unicode_190606, 'join')
    # Calling join(args, kwargs) (line 1045)
    join_call_result_190613 = invoke(stypy.reporting.localization.Localization(__file__, 1045, 7), join_190607, *[subscript_call_result_190611], **kwargs_190612)
    
    # Testing the type of an if condition (line 1045)
    if_condition_190614 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1045, 4), join_call_result_190613)
    # Assigning a type to the variable 'if_condition_190614' (line 1045)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1045, 4), 'if_condition_190614', if_condition_190614)
    # SSA begins for if statement (line 1045)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to report(...): (line 1046)
    # Processing the call arguments (line 1046)
    unicode_190617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, (-1)), 'unicode', u'\n*****************************************************************\nYou have the following UNSUPPORTED LaTeX preamble customizations:\n%s\nPlease do not ask for support with these customizations active.\n*****************************************************************\n')
    
    # Call to join(...): (line 1052)
    # Processing the call arguments (line 1052)
    
    # Obtaining the type of the subscript
    unicode_190620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 23), 'unicode', u'text.latex.preamble')
    # Getting the type of 'config' (line 1052)
    config_190621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 16), 'config', False)
    # Obtaining the member '__getitem__' of a type (line 1052)
    getitem___190622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 16), config_190621, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1052)
    subscript_call_result_190623 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 16), getitem___190622, unicode_190620)
    
    # Processing the call keyword arguments (line 1052)
    kwargs_190624 = {}
    unicode_190618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 6), 'unicode', u'\n')
    # Obtaining the member 'join' of a type (line 1052)
    join_190619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 6), unicode_190618, 'join')
    # Calling join(args, kwargs) (line 1052)
    join_call_result_190625 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 6), join_190619, *[subscript_call_result_190623], **kwargs_190624)
    
    # Applying the binary operator '%' (line 1052)
    result_mod_190626 = python_operator(stypy.reporting.localization.Localization(__file__, 1052, (-1)), '%', unicode_190617, join_call_result_190625)
    
    unicode_190627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 48), 'unicode', u'helpful')
    # Processing the call keyword arguments (line 1046)
    kwargs_190628 = {}
    # Getting the type of 'verbose' (line 1046)
    verbose_190615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 8), 'verbose', False)
    # Obtaining the member 'report' of a type (line 1046)
    report_190616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 8), verbose_190615, 'report')
    # Calling report(args, kwargs) (line 1046)
    report_call_result_190629 = invoke(stypy.reporting.localization.Localization(__file__, 1046, 8), report_190616, *[result_mod_190626, unicode_190627], **kwargs_190628)
    
    # SSA join for if statement (line 1045)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to report(...): (line 1054)
    # Processing the call arguments (line 1054)
    unicode_190632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1054, 19), 'unicode', u'loaded rc file %s')
    # Getting the type of 'fname' (line 1054)
    fname_190633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 41), 'fname', False)
    # Applying the binary operator '%' (line 1054)
    result_mod_190634 = python_operator(stypy.reporting.localization.Localization(__file__, 1054, 19), '%', unicode_190632, fname_190633)
    
    # Processing the call keyword arguments (line 1054)
    kwargs_190635 = {}
    # Getting the type of 'verbose' (line 1054)
    verbose_190630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 4), 'verbose', False)
    # Obtaining the member 'report' of a type (line 1054)
    report_190631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 4), verbose_190630, 'report')
    # Calling report(args, kwargs) (line 1054)
    report_call_result_190636 = invoke(stypy.reporting.localization.Localization(__file__, 1054, 4), report_190631, *[result_mod_190634], **kwargs_190635)
    
    # Getting the type of 'config' (line 1056)
    config_190637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 11), 'config')
    # Assigning a type to the variable 'stypy_return_type' (line 1056)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1056, 4), 'stypy_return_type', config_190637)
    
    # ################# End of 'rc_params_from_file(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rc_params_from_file' in the type store
    # Getting the type of 'stypy_return_type' (line 1015)
    stypy_return_type_190638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_190638)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rc_params_from_file'
    return stypy_return_type_190638

# Assigning a type to the variable 'rc_params_from_file' (line 1015)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1015, 0), 'rc_params_from_file', rc_params_from_file)

# Assigning a Call to a Name (line 1060):

# Assigning a Call to a Name (line 1060):

# Call to rc_params(...): (line 1060)
# Processing the call keyword arguments (line 1060)
kwargs_190640 = {}
# Getting the type of 'rc_params' (line 1060)
rc_params_190639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 11), 'rc_params', False)
# Calling rc_params(args, kwargs) (line 1060)
rc_params_call_result_190641 = invoke(stypy.reporting.localization.Localization(__file__, 1060, 11), rc_params_190639, *[], **kwargs_190640)

# Assigning a type to the variable 'rcParams' (line 1060)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1060, 0), 'rcParams', rc_params_call_result_190641)


# Obtaining the type of the subscript
unicode_190642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1062, 12), 'unicode', u'examples.directory')
# Getting the type of 'rcParams' (line 1062)
rcParams_190643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 3), 'rcParams')
# Obtaining the member '__getitem__' of a type (line 1062)
getitem___190644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 3), rcParams_190643, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 1062)
subscript_call_result_190645 = invoke(stypy.reporting.localization.Localization(__file__, 1062, 3), getitem___190644, unicode_190642)

# Testing the type of an if condition (line 1062)
if_condition_190646 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1062, 0), subscript_call_result_190645)
# Assigning a type to the variable 'if_condition_190646' (line 1062)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1062, 0), 'if_condition_190646', if_condition_190646)
# SSA begins for if statement (line 1062)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')



# Call to isabs(...): (line 1067)
# Processing the call arguments (line 1067)

# Obtaining the type of the subscript
unicode_190650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 34), 'unicode', u'examples.directory')
# Getting the type of 'rcParams' (line 1067)
rcParams_190651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 25), 'rcParams', False)
# Obtaining the member '__getitem__' of a type (line 1067)
getitem___190652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 25), rcParams_190651, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 1067)
subscript_call_result_190653 = invoke(stypy.reporting.localization.Localization(__file__, 1067, 25), getitem___190652, unicode_190650)

# Processing the call keyword arguments (line 1067)
kwargs_190654 = {}
# Getting the type of 'os' (line 1067)
os_190647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 11), 'os', False)
# Obtaining the member 'path' of a type (line 1067)
path_190648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 11), os_190647, 'path')
# Obtaining the member 'isabs' of a type (line 1067)
isabs_190649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 11), path_190648, 'isabs')
# Calling isabs(args, kwargs) (line 1067)
isabs_call_result_190655 = invoke(stypy.reporting.localization.Localization(__file__, 1067, 11), isabs_190649, *[subscript_call_result_190653], **kwargs_190654)

# Applying the 'not' unary operator (line 1067)
result_not__190656 = python_operator(stypy.reporting.localization.Localization(__file__, 1067, 7), 'not', isabs_call_result_190655)

# Testing the type of an if condition (line 1067)
if_condition_190657 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1067, 4), result_not__190656)
# Assigning a type to the variable 'if_condition_190657' (line 1067)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1067, 4), 'if_condition_190657', if_condition_190657)
# SSA begins for if statement (line 1067)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Call to a Tuple (line 1068):

# Assigning a Call to a Name:

# Call to split(...): (line 1068)
# Processing the call arguments (line 1068)

# Call to matplotlib_fname(...): (line 1068)
# Processing the call keyword arguments (line 1068)
kwargs_190662 = {}
# Getting the type of 'matplotlib_fname' (line 1068)
matplotlib_fname_190661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 41), 'matplotlib_fname', False)
# Calling matplotlib_fname(args, kwargs) (line 1068)
matplotlib_fname_call_result_190663 = invoke(stypy.reporting.localization.Localization(__file__, 1068, 41), matplotlib_fname_190661, *[], **kwargs_190662)

# Processing the call keyword arguments (line 1068)
kwargs_190664 = {}
# Getting the type of 'os' (line 1068)
os_190658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 27), 'os', False)
# Obtaining the member 'path' of a type (line 1068)
path_190659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1068, 27), os_190658, 'path')
# Obtaining the member 'split' of a type (line 1068)
split_190660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1068, 27), path_190659, 'split')
# Calling split(args, kwargs) (line 1068)
split_call_result_190665 = invoke(stypy.reporting.localization.Localization(__file__, 1068, 27), split_190660, *[matplotlib_fname_call_result_190663], **kwargs_190664)

# Assigning a type to the variable 'call_assignment_188219' (line 1068)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1068, 8), 'call_assignment_188219', split_call_result_190665)

# Assigning a Call to a Name (line 1068):

# Call to __getitem__(...):
# Processing the call arguments
int_190668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1068, 8), 'int')
# Processing the call keyword arguments
kwargs_190669 = {}
# Getting the type of 'call_assignment_188219' (line 1068)
call_assignment_188219_190666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 8), 'call_assignment_188219', False)
# Obtaining the member '__getitem__' of a type (line 1068)
getitem___190667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1068, 8), call_assignment_188219_190666, '__getitem__')
# Calling __getitem__(args, kwargs)
getitem___call_result_190670 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___190667, *[int_190668], **kwargs_190669)

# Assigning a type to the variable 'call_assignment_188220' (line 1068)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1068, 8), 'call_assignment_188220', getitem___call_result_190670)

# Assigning a Name to a Name (line 1068):
# Getting the type of 'call_assignment_188220' (line 1068)
call_assignment_188220_190671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 8), 'call_assignment_188220')
# Assigning a type to the variable '_basedir' (line 1068)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1068, 8), '_basedir', call_assignment_188220_190671)

# Assigning a Call to a Name (line 1068):

# Call to __getitem__(...):
# Processing the call arguments
int_190674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1068, 8), 'int')
# Processing the call keyword arguments
kwargs_190675 = {}
# Getting the type of 'call_assignment_188219' (line 1068)
call_assignment_188219_190672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 8), 'call_assignment_188219', False)
# Obtaining the member '__getitem__' of a type (line 1068)
getitem___190673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1068, 8), call_assignment_188219_190672, '__getitem__')
# Calling __getitem__(args, kwargs)
getitem___call_result_190676 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___190673, *[int_190674], **kwargs_190675)

# Assigning a type to the variable 'call_assignment_188221' (line 1068)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1068, 8), 'call_assignment_188221', getitem___call_result_190676)

# Assigning a Name to a Name (line 1068):
# Getting the type of 'call_assignment_188221' (line 1068)
call_assignment_188221_190677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 8), 'call_assignment_188221')
# Assigning a type to the variable '_fname' (line 1068)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1068, 18), '_fname', call_assignment_188221_190677)

# Assigning a Call to a Name (line 1072):

# Assigning a Call to a Name (line 1072):

# Call to realpath(...): (line 1072)
# Processing the call arguments (line 1072)
# Getting the type of '_basedir' (line 1072)
_basedir_190681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 36), '_basedir', False)
# Processing the call keyword arguments (line 1072)
kwargs_190682 = {}
# Getting the type of 'os' (line 1072)
os_190678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 19), 'os', False)
# Obtaining the member 'path' of a type (line 1072)
path_190679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1072, 19), os_190678, 'path')
# Obtaining the member 'realpath' of a type (line 1072)
realpath_190680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1072, 19), path_190679, 'realpath')
# Calling realpath(args, kwargs) (line 1072)
realpath_call_result_190683 = invoke(stypy.reporting.localization.Localization(__file__, 1072, 19), realpath_190680, *[_basedir_190681], **kwargs_190682)

# Assigning a type to the variable '_basedir' (line 1072)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1072, 8), '_basedir', realpath_call_result_190683)

# Assigning a Call to a Name (line 1073):

# Assigning a Call to a Name (line 1073):

# Call to join(...): (line 1073)
# Processing the call arguments (line 1073)
# Getting the type of '_basedir' (line 1073)
_basedir_190687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 33), '_basedir', False)

# Obtaining the type of the subscript
unicode_190688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1073, 52), 'unicode', u'examples.directory')
# Getting the type of 'rcParams' (line 1073)
rcParams_190689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 43), 'rcParams', False)
# Obtaining the member '__getitem__' of a type (line 1073)
getitem___190690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1073, 43), rcParams_190689, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 1073)
subscript_call_result_190691 = invoke(stypy.reporting.localization.Localization(__file__, 1073, 43), getitem___190690, unicode_190688)

# Processing the call keyword arguments (line 1073)
kwargs_190692 = {}
# Getting the type of 'os' (line 1073)
os_190684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 20), 'os', False)
# Obtaining the member 'path' of a type (line 1073)
path_190685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1073, 20), os_190684, 'path')
# Obtaining the member 'join' of a type (line 1073)
join_190686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1073, 20), path_190685, 'join')
# Calling join(args, kwargs) (line 1073)
join_call_result_190693 = invoke(stypy.reporting.localization.Localization(__file__, 1073, 20), join_190686, *[_basedir_190687, subscript_call_result_190691], **kwargs_190692)

# Assigning a type to the variable '_fullpath' (line 1073)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1073, 8), '_fullpath', join_call_result_190693)

# Assigning a Name to a Subscript (line 1074):

# Assigning a Name to a Subscript (line 1074):
# Getting the type of '_fullpath' (line 1074)
_fullpath_190694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 41), '_fullpath')
# Getting the type of 'rcParams' (line 1074)
rcParams_190695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'rcParams')
unicode_190696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1074, 17), 'unicode', u'examples.directory')
# Storing an element on a container (line 1074)
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1074, 8), rcParams_190695, (unicode_190696, _fullpath_190694))
# SSA join for if statement (line 1067)
module_type_store = module_type_store.join_ssa_context()

# SSA join for if statement (line 1062)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Call to a Name (line 1076):

# Assigning a Call to a Name (line 1076):

# Call to copy(...): (line 1076)
# Processing the call keyword arguments (line 1076)
kwargs_190699 = {}
# Getting the type of 'rcParams' (line 1076)
rcParams_190697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 15), 'rcParams', False)
# Obtaining the member 'copy' of a type (line 1076)
copy_190698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 15), rcParams_190697, 'copy')
# Calling copy(args, kwargs) (line 1076)
copy_call_result_190700 = invoke(stypy.reporting.localization.Localization(__file__, 1076, 15), copy_190698, *[], **kwargs_190699)

# Assigning a type to the variable 'rcParamsOrig' (line 1076)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1076, 0), 'rcParamsOrig', copy_call_result_190700)

# Assigning a Call to a Name (line 1078):

# Assigning a Call to a Name (line 1078):

# Call to RcParams(...): (line 1078)
# Processing the call arguments (line 1078)
# Calculating list comprehension
# Calculating comprehension expression

# Call to iteritems(...): (line 1079)
# Processing the call arguments (line 1079)
# Getting the type of 'defaultParams' (line 1079)
defaultParams_190710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 42), 'defaultParams', False)
# Processing the call keyword arguments (line 1079)
kwargs_190711 = {}
# Getting the type of 'six' (line 1079)
six_190708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 28), 'six', False)
# Obtaining the member 'iteritems' of a type (line 1079)
iteritems_190709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1079, 28), six_190708, 'iteritems')
# Calling iteritems(args, kwargs) (line 1079)
iteritems_call_result_190712 = invoke(stypy.reporting.localization.Localization(__file__, 1079, 28), iteritems_190709, *[defaultParams_190710], **kwargs_190711)

comprehension_190713 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1078, 28), iteritems_call_result_190712)
# Assigning a type to the variable 'key' (line 1078)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1078, 28), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1078, 28), comprehension_190713))
# Assigning a type to the variable 'tuple_190714' (line 1078)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1078, 28), 'tuple_190714', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1078, 28), comprehension_190713))

# Obtaining an instance of the builtin type 'tuple' (line 1078)
tuple_190714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1078, 53), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 1078)
# Adding element type (line 1078)default
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1078, 53), tuple_190714, )
# Adding element type (line 1078)converter
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1078, 53), tuple_190714, )

# Assigning a type to the variable 'key' (line 1078)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1078, 28), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1078, 28), comprehension_190713))
# Assigning a type to the variable 'tuple_190714' (line 1078)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1078, 28), 'tuple_190714', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1078, 28), comprehension_190713))

# Getting the type of 'key' (line 1080)
key_190705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 31), 'key', False)
# Getting the type of '_all_deprecated' (line 1080)
_all_deprecated_190706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 42), '_all_deprecated', False)
# Applying the binary operator 'notin' (line 1080)
result_contains_190707 = python_operator(stypy.reporting.localization.Localization(__file__, 1080, 31), 'notin', key_190705, _all_deprecated_190706)


# Obtaining an instance of the builtin type 'tuple' (line 1078)
tuple_190702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1078, 29), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 1078)
# Adding element type (line 1078)
# Getting the type of 'key' (line 1078)
key_190703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 29), 'key', False)
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1078, 29), tuple_190702, key_190703)
# Adding element type (line 1078)
# Getting the type of 'default' (line 1078)
default_190704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 34), 'default', False)
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1078, 29), tuple_190702, default_190704)

list_190715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1078, 28), 'list')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1078, 28), list_190715, tuple_190702)
# Processing the call keyword arguments (line 1078)
kwargs_190716 = {}
# Getting the type of 'RcParams' (line 1078)
RcParams_190701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 18), 'RcParams', False)
# Calling RcParams(args, kwargs) (line 1078)
RcParams_call_result_190717 = invoke(stypy.reporting.localization.Localization(__file__, 1078, 18), RcParams_190701, *[list_190715], **kwargs_190716)

# Assigning a type to the variable 'rcParamsDefault' (line 1078)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1078, 0), 'rcParamsDefault', RcParams_call_result_190717)

# Assigning a Call to a Subscript (line 1082):

# Assigning a Call to a Subscript (line 1082):

# Call to checkdep_ps_distiller(...): (line 1082)
# Processing the call arguments (line 1082)

# Obtaining the type of the subscript
unicode_190719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1083, 31), 'unicode', u'ps.usedistiller')
# Getting the type of 'rcParams' (line 1083)
rcParams_190720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 22), 'rcParams', False)
# Obtaining the member '__getitem__' of a type (line 1083)
getitem___190721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1083, 22), rcParams_190720, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 1083)
subscript_call_result_190722 = invoke(stypy.reporting.localization.Localization(__file__, 1083, 22), getitem___190721, unicode_190719)

# Processing the call keyword arguments (line 1082)
kwargs_190723 = {}
# Getting the type of 'checkdep_ps_distiller' (line 1082)
checkdep_ps_distiller_190718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 30), 'checkdep_ps_distiller', False)
# Calling checkdep_ps_distiller(args, kwargs) (line 1082)
checkdep_ps_distiller_call_result_190724 = invoke(stypy.reporting.localization.Localization(__file__, 1082, 30), checkdep_ps_distiller_190718, *[subscript_call_result_190722], **kwargs_190723)

# Getting the type of 'rcParams' (line 1082)
rcParams_190725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 0), 'rcParams')
unicode_190726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 9), 'unicode', u'ps.usedistiller')
# Storing an element on a container (line 1082)
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1082, 0), rcParams_190725, (unicode_190726, checkdep_ps_distiller_call_result_190724))

# Assigning a Call to a Subscript (line 1085):

# Assigning a Call to a Subscript (line 1085):

# Call to checkdep_usetex(...): (line 1085)
# Processing the call arguments (line 1085)

# Obtaining the type of the subscript
unicode_190728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1085, 51), 'unicode', u'text.usetex')
# Getting the type of 'rcParams' (line 1085)
rcParams_190729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 42), 'rcParams', False)
# Obtaining the member '__getitem__' of a type (line 1085)
getitem___190730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1085, 42), rcParams_190729, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 1085)
subscript_call_result_190731 = invoke(stypy.reporting.localization.Localization(__file__, 1085, 42), getitem___190730, unicode_190728)

# Processing the call keyword arguments (line 1085)
kwargs_190732 = {}
# Getting the type of 'checkdep_usetex' (line 1085)
checkdep_usetex_190727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 26), 'checkdep_usetex', False)
# Calling checkdep_usetex(args, kwargs) (line 1085)
checkdep_usetex_call_result_190733 = invoke(stypy.reporting.localization.Localization(__file__, 1085, 26), checkdep_usetex_190727, *[subscript_call_result_190731], **kwargs_190732)

# Getting the type of 'rcParams' (line 1085)
rcParams_190734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 0), 'rcParams')
unicode_190735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1085, 9), 'unicode', u'text.usetex')
# Storing an element on a container (line 1085)
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1085, 0), rcParams_190734, (unicode_190735, checkdep_usetex_call_result_190733))


# Obtaining the type of the subscript
unicode_190736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 12), 'unicode', u'axes.formatter.use_locale')
# Getting the type of 'rcParams' (line 1087)
rcParams_190737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 3), 'rcParams')
# Obtaining the member '__getitem__' of a type (line 1087)
getitem___190738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 3), rcParams_190737, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 1087)
subscript_call_result_190739 = invoke(stypy.reporting.localization.Localization(__file__, 1087, 3), getitem___190738, unicode_190736)

# Testing the type of an if condition (line 1087)
if_condition_190740 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1087, 0), subscript_call_result_190739)
# Assigning a type to the variable 'if_condition_190740' (line 1087)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1087, 0), 'if_condition_190740', if_condition_190740)
# SSA begins for if statement (line 1087)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Call to setlocale(...): (line 1088)
# Processing the call arguments (line 1088)
# Getting the type of 'locale' (line 1088)
locale_190743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 21), 'locale', False)
# Obtaining the member 'LC_ALL' of a type (line 1088)
LC_ALL_190744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 21), locale_190743, 'LC_ALL')
unicode_190745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 36), 'unicode', u'')
# Processing the call keyword arguments (line 1088)
kwargs_190746 = {}
# Getting the type of 'locale' (line 1088)
locale_190741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 4), 'locale', False)
# Obtaining the member 'setlocale' of a type (line 1088)
setlocale_190742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 4), locale_190741, 'setlocale')
# Calling setlocale(args, kwargs) (line 1088)
setlocale_call_result_190747 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 4), setlocale_190742, *[LC_ALL_190744, unicode_190745], **kwargs_190746)

# SSA join for if statement (line 1087)
module_type_store = module_type_store.join_ssa_context()


@norecursion
def rc(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rc'
    module_type_store = module_type_store.open_function_context('rc', 1091, 0, False)
    
    # Passed parameters checking function
    rc.stypy_localization = localization
    rc.stypy_type_of_self = None
    rc.stypy_type_store = module_type_store
    rc.stypy_function_name = 'rc'
    rc.stypy_param_names_list = ['group']
    rc.stypy_varargs_param_name = None
    rc.stypy_kwargs_param_name = 'kwargs'
    rc.stypy_call_defaults = defaults
    rc.stypy_call_varargs = varargs
    rc.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rc', ['group'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rc', localization, ['group'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rc(...)' code ##################

    unicode_190748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1139, (-1)), 'unicode', u"\n    Set the current rc params.  Group is the grouping for the rc, e.g.,\n    for ``lines.linewidth`` the group is ``lines``, for\n    ``axes.facecolor``, the group is ``axes``, and so on.  Group may\n    also be a list or tuple of group names, e.g., (*xtick*, *ytick*).\n    *kwargs* is a dictionary attribute name/value pairs, e.g.,::\n\n      rc('lines', linewidth=2, color='r')\n\n    sets the current rc params and is equivalent to::\n\n      rcParams['lines.linewidth'] = 2\n      rcParams['lines.color'] = 'r'\n\n    The following aliases are available to save typing for interactive\n    users:\n\n    =====   =================\n    Alias   Property\n    =====   =================\n    'lw'    'linewidth'\n    'ls'    'linestyle'\n    'c'     'color'\n    'fc'    'facecolor'\n    'ec'    'edgecolor'\n    'mew'   'markeredgewidth'\n    'aa'    'antialiased'\n    =====   =================\n\n    Thus you could abbreviate the above rc command as::\n\n          rc('lines', lw=2, c='r')\n\n\n    Note you can use python's kwargs dictionary facility to store\n    dictionaries of default parameters.  e.g., you can customize the\n    font rc as follows::\n\n      font = {'family' : 'monospace',\n              'weight' : 'bold',\n              'size'   : 'larger'}\n\n      rc('font', **font)  # pass in the font dict as kwargs\n\n    This enables you to easily switch between several configurations.  Use\n    ``matplotlib.style.use('default')`` or :func:`~matplotlib.rcdefaults` to\n    restore the default rc params after changes.\n    ")
    
    # Assigning a Dict to a Name (line 1141):
    
    # Assigning a Dict to a Name (line 1141):
    
    # Obtaining an instance of the builtin type 'dict' (line 1141)
    dict_190749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1141, 14), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1141)
    # Adding element type (key, value) (line 1141)
    unicode_190750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1142, 8), 'unicode', u'lw')
    unicode_190751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1142, 15), 'unicode', u'linewidth')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1141, 14), dict_190749, (unicode_190750, unicode_190751))
    # Adding element type (key, value) (line 1141)
    unicode_190752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1143, 8), 'unicode', u'ls')
    unicode_190753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1143, 15), 'unicode', u'linestyle')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1141, 14), dict_190749, (unicode_190752, unicode_190753))
    # Adding element type (key, value) (line 1141)
    unicode_190754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1144, 8), 'unicode', u'c')
    unicode_190755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1144, 15), 'unicode', u'color')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1141, 14), dict_190749, (unicode_190754, unicode_190755))
    # Adding element type (key, value) (line 1141)
    unicode_190756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1145, 8), 'unicode', u'fc')
    unicode_190757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1145, 15), 'unicode', u'facecolor')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1141, 14), dict_190749, (unicode_190756, unicode_190757))
    # Adding element type (key, value) (line 1141)
    unicode_190758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1146, 8), 'unicode', u'ec')
    unicode_190759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1146, 15), 'unicode', u'edgecolor')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1141, 14), dict_190749, (unicode_190758, unicode_190759))
    # Adding element type (key, value) (line 1141)
    unicode_190760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 8), 'unicode', u'mew')
    unicode_190761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 15), 'unicode', u'markeredgewidth')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1141, 14), dict_190749, (unicode_190760, unicode_190761))
    # Adding element type (key, value) (line 1141)
    unicode_190762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1148, 8), 'unicode', u'aa')
    unicode_190763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1148, 15), 'unicode', u'antialiased')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1141, 14), dict_190749, (unicode_190762, unicode_190763))
    
    # Assigning a type to the variable 'aliases' (line 1141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 4), 'aliases', dict_190749)
    
    
    # Call to isinstance(...): (line 1151)
    # Processing the call arguments (line 1151)
    # Getting the type of 'group' (line 1151)
    group_190765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 18), 'group', False)
    # Getting the type of 'six' (line 1151)
    six_190766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 25), 'six', False)
    # Obtaining the member 'string_types' of a type (line 1151)
    string_types_190767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1151, 25), six_190766, 'string_types')
    # Processing the call keyword arguments (line 1151)
    kwargs_190768 = {}
    # Getting the type of 'isinstance' (line 1151)
    isinstance_190764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1151)
    isinstance_call_result_190769 = invoke(stypy.reporting.localization.Localization(__file__, 1151, 7), isinstance_190764, *[group_190765, string_types_190767], **kwargs_190768)
    
    # Testing the type of an if condition (line 1151)
    if_condition_190770 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1151, 4), isinstance_call_result_190769)
    # Assigning a type to the variable 'if_condition_190770' (line 1151)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1151, 4), 'if_condition_190770', if_condition_190770)
    # SSA begins for if statement (line 1151)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 1152):
    
    # Assigning a Tuple to a Name (line 1152):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1152)
    tuple_190771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1152, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1152)
    # Adding element type (line 1152)
    # Getting the type of 'group' (line 1152)
    group_190772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 17), 'group')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1152, 17), tuple_190771, group_190772)
    
    # Assigning a type to the variable 'group' (line 1152)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1152, 8), 'group', tuple_190771)
    # SSA join for if statement (line 1151)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'group' (line 1153)
    group_190773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 13), 'group')
    # Testing the type of a for loop iterable (line 1153)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1153, 4), group_190773)
    # Getting the type of the for loop variable (line 1153)
    for_loop_var_190774 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1153, 4), group_190773)
    # Assigning a type to the variable 'g' (line 1153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 4), 'g', for_loop_var_190774)
    # SSA begins for a for statement (line 1153)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to iteritems(...): (line 1154)
    # Processing the call arguments (line 1154)
    # Getting the type of 'kwargs' (line 1154)
    kwargs_190777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 34), 'kwargs', False)
    # Processing the call keyword arguments (line 1154)
    kwargs_190778 = {}
    # Getting the type of 'six' (line 1154)
    six_190775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 20), 'six', False)
    # Obtaining the member 'iteritems' of a type (line 1154)
    iteritems_190776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1154, 20), six_190775, 'iteritems')
    # Calling iteritems(args, kwargs) (line 1154)
    iteritems_call_result_190779 = invoke(stypy.reporting.localization.Localization(__file__, 1154, 20), iteritems_190776, *[kwargs_190777], **kwargs_190778)
    
    # Testing the type of a for loop iterable (line 1154)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1154, 8), iteritems_call_result_190779)
    # Getting the type of the for loop variable (line 1154)
    for_loop_var_190780 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1154, 8), iteritems_call_result_190779)
    # Assigning a type to the variable 'k' (line 1154)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1154, 8), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1154, 8), for_loop_var_190780))
    # Assigning a type to the variable 'v' (line 1154)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1154, 8), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1154, 8), for_loop_var_190780))
    # SSA begins for a for statement (line 1154)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BoolOp to a Name (line 1155):
    
    # Assigning a BoolOp to a Name (line 1155):
    
    # Evaluating a boolean operation
    
    # Call to get(...): (line 1155)
    # Processing the call arguments (line 1155)
    # Getting the type of 'k' (line 1155)
    k_190783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 31), 'k', False)
    # Processing the call keyword arguments (line 1155)
    kwargs_190784 = {}
    # Getting the type of 'aliases' (line 1155)
    aliases_190781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 19), 'aliases', False)
    # Obtaining the member 'get' of a type (line 1155)
    get_190782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1155, 19), aliases_190781, 'get')
    # Calling get(args, kwargs) (line 1155)
    get_call_result_190785 = invoke(stypy.reporting.localization.Localization(__file__, 1155, 19), get_190782, *[k_190783], **kwargs_190784)
    
    # Getting the type of 'k' (line 1155)
    k_190786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 37), 'k')
    # Applying the binary operator 'or' (line 1155)
    result_or_keyword_190787 = python_operator(stypy.reporting.localization.Localization(__file__, 1155, 19), 'or', get_call_result_190785, k_190786)
    
    # Assigning a type to the variable 'name' (line 1155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 12), 'name', result_or_keyword_190787)
    
    # Assigning a BinOp to a Name (line 1156):
    
    # Assigning a BinOp to a Name (line 1156):
    unicode_190788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1156, 18), 'unicode', u'%s.%s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1156)
    tuple_190789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1156, 29), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1156)
    # Adding element type (line 1156)
    # Getting the type of 'g' (line 1156)
    g_190790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 29), 'g')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1156, 29), tuple_190789, g_190790)
    # Adding element type (line 1156)
    # Getting the type of 'name' (line 1156)
    name_190791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 32), 'name')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1156, 29), tuple_190789, name_190791)
    
    # Applying the binary operator '%' (line 1156)
    result_mod_190792 = python_operator(stypy.reporting.localization.Localization(__file__, 1156, 18), '%', unicode_190788, tuple_190789)
    
    # Assigning a type to the variable 'key' (line 1156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1156, 12), 'key', result_mod_190792)
    
    
    # SSA begins for try-except statement (line 1157)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Name to a Subscript (line 1158):
    
    # Assigning a Name to a Subscript (line 1158):
    # Getting the type of 'v' (line 1158)
    v_190793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 32), 'v')
    # Getting the type of 'rcParams' (line 1158)
    rcParams_190794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 16), 'rcParams')
    # Getting the type of 'key' (line 1158)
    key_190795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 25), 'key')
    # Storing an element on a container (line 1158)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1158, 16), rcParams_190794, (key_190795, v_190793))
    # SSA branch for the except part of a try statement (line 1157)
    # SSA branch for the except 'KeyError' branch of a try statement (line 1157)
    module_type_store.open_ssa_branch('except')
    
    # Call to KeyError(...): (line 1160)
    # Processing the call arguments (line 1160)
    unicode_190797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1160, 32), 'unicode', u'Unrecognized key "%s" for group "%s" and name "%s"')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1161)
    tuple_190798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1161, 48), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1161)
    # Adding element type (line 1161)
    # Getting the type of 'key' (line 1161)
    key_190799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 48), 'key', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1161, 48), tuple_190798, key_190799)
    # Adding element type (line 1161)
    # Getting the type of 'g' (line 1161)
    g_190800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 53), 'g', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1161, 48), tuple_190798, g_190800)
    # Adding element type (line 1161)
    # Getting the type of 'name' (line 1161)
    name_190801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 56), 'name', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1161, 48), tuple_190798, name_190801)
    
    # Applying the binary operator '%' (line 1160)
    result_mod_190802 = python_operator(stypy.reporting.localization.Localization(__file__, 1160, 31), '%', unicode_190797, tuple_190798)
    
    # Processing the call keyword arguments (line 1160)
    kwargs_190803 = {}
    # Getting the type of 'KeyError' (line 1160)
    KeyError_190796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 22), 'KeyError', False)
    # Calling KeyError(args, kwargs) (line 1160)
    KeyError_call_result_190804 = invoke(stypy.reporting.localization.Localization(__file__, 1160, 22), KeyError_190796, *[result_mod_190802], **kwargs_190803)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1160, 16), KeyError_call_result_190804, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 1157)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'rc(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rc' in the type store
    # Getting the type of 'stypy_return_type' (line 1091)
    stypy_return_type_190805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_190805)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rc'
    return stypy_return_type_190805

# Assigning a type to the variable 'rc' (line 1091)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 0), 'rc', rc)

@norecursion
def rcdefaults(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rcdefaults'
    module_type_store = module_type_store.open_function_context('rcdefaults', 1164, 0, False)
    
    # Passed parameters checking function
    rcdefaults.stypy_localization = localization
    rcdefaults.stypy_type_of_self = None
    rcdefaults.stypy_type_store = module_type_store
    rcdefaults.stypy_function_name = 'rcdefaults'
    rcdefaults.stypy_param_names_list = []
    rcdefaults.stypy_varargs_param_name = None
    rcdefaults.stypy_kwargs_param_name = None
    rcdefaults.stypy_call_defaults = defaults
    rcdefaults.stypy_call_varargs = varargs
    rcdefaults.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rcdefaults', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rcdefaults', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rcdefaults(...)' code ##################

    unicode_190806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1174, (-1)), 'unicode', u"Restore the rc params from Matplotlib's internal defaults.\n\n    See Also\n    --------\n    rc_file_defaults :\n        Restore the rc params from the rc file originally loaded by Matplotlib.\n    matplotlib.style.use :\n        Use a specific style file.  Call ``style.use('default')`` to restore\n        the default style.\n    ")
    
    # Call to clear(...): (line 1175)
    # Processing the call keyword arguments (line 1175)
    kwargs_190809 = {}
    # Getting the type of 'rcParams' (line 1175)
    rcParams_190807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 4), 'rcParams', False)
    # Obtaining the member 'clear' of a type (line 1175)
    clear_190808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 4), rcParams_190807, 'clear')
    # Calling clear(args, kwargs) (line 1175)
    clear_call_result_190810 = invoke(stypy.reporting.localization.Localization(__file__, 1175, 4), clear_190808, *[], **kwargs_190809)
    
    
    # Call to update(...): (line 1176)
    # Processing the call arguments (line 1176)
    # Getting the type of 'rcParamsDefault' (line 1176)
    rcParamsDefault_190813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 20), 'rcParamsDefault', False)
    # Processing the call keyword arguments (line 1176)
    kwargs_190814 = {}
    # Getting the type of 'rcParams' (line 1176)
    rcParams_190811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 4), 'rcParams', False)
    # Obtaining the member 'update' of a type (line 1176)
    update_190812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 4), rcParams_190811, 'update')
    # Calling update(args, kwargs) (line 1176)
    update_call_result_190815 = invoke(stypy.reporting.localization.Localization(__file__, 1176, 4), update_190812, *[rcParamsDefault_190813], **kwargs_190814)
    
    
    # ################# End of 'rcdefaults(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rcdefaults' in the type store
    # Getting the type of 'stypy_return_type' (line 1164)
    stypy_return_type_190816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_190816)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rcdefaults'
    return stypy_return_type_190816

# Assigning a type to the variable 'rcdefaults' (line 1164)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1164, 0), 'rcdefaults', rcdefaults)

@norecursion
def rc_file_defaults(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rc_file_defaults'
    module_type_store = module_type_store.open_function_context('rc_file_defaults', 1179, 0, False)
    
    # Passed parameters checking function
    rc_file_defaults.stypy_localization = localization
    rc_file_defaults.stypy_type_of_self = None
    rc_file_defaults.stypy_type_store = module_type_store
    rc_file_defaults.stypy_function_name = 'rc_file_defaults'
    rc_file_defaults.stypy_param_names_list = []
    rc_file_defaults.stypy_varargs_param_name = None
    rc_file_defaults.stypy_kwargs_param_name = None
    rc_file_defaults.stypy_call_defaults = defaults
    rc_file_defaults.stypy_call_varargs = varargs
    rc_file_defaults.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rc_file_defaults', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rc_file_defaults', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rc_file_defaults(...)' code ##################

    unicode_190817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1181, (-1)), 'unicode', u'Restore the rc params from the original rc file loaded by Matplotlib.\n    ')
    
    # Call to update(...): (line 1182)
    # Processing the call arguments (line 1182)
    # Getting the type of 'rcParamsOrig' (line 1182)
    rcParamsOrig_190820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 20), 'rcParamsOrig', False)
    # Processing the call keyword arguments (line 1182)
    kwargs_190821 = {}
    # Getting the type of 'rcParams' (line 1182)
    rcParams_190818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 4), 'rcParams', False)
    # Obtaining the member 'update' of a type (line 1182)
    update_190819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1182, 4), rcParams_190818, 'update')
    # Calling update(args, kwargs) (line 1182)
    update_call_result_190822 = invoke(stypy.reporting.localization.Localization(__file__, 1182, 4), update_190819, *[rcParamsOrig_190820], **kwargs_190821)
    
    
    # ################# End of 'rc_file_defaults(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rc_file_defaults' in the type store
    # Getting the type of 'stypy_return_type' (line 1179)
    stypy_return_type_190823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_190823)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rc_file_defaults'
    return stypy_return_type_190823

# Assigning a type to the variable 'rc_file_defaults' (line 1179)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 0), 'rc_file_defaults', rc_file_defaults)

@norecursion
def rc_file(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rc_file'
    module_type_store = module_type_store.open_function_context('rc_file', 1185, 0, False)
    
    # Passed parameters checking function
    rc_file.stypy_localization = localization
    rc_file.stypy_type_of_self = None
    rc_file.stypy_type_store = module_type_store
    rc_file.stypy_function_name = 'rc_file'
    rc_file.stypy_param_names_list = ['fname']
    rc_file.stypy_varargs_param_name = None
    rc_file.stypy_kwargs_param_name = None
    rc_file.stypy_call_defaults = defaults
    rc_file.stypy_call_varargs = varargs
    rc_file.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rc_file', ['fname'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rc_file', localization, ['fname'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rc_file(...)' code ##################

    unicode_190824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1188, (-1)), 'unicode', u'\n    Update rc params from file.\n    ')
    
    # Call to update(...): (line 1189)
    # Processing the call arguments (line 1189)
    
    # Call to rc_params_from_file(...): (line 1189)
    # Processing the call arguments (line 1189)
    # Getting the type of 'fname' (line 1189)
    fname_190828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 40), 'fname', False)
    # Processing the call keyword arguments (line 1189)
    kwargs_190829 = {}
    # Getting the type of 'rc_params_from_file' (line 1189)
    rc_params_from_file_190827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 20), 'rc_params_from_file', False)
    # Calling rc_params_from_file(args, kwargs) (line 1189)
    rc_params_from_file_call_result_190830 = invoke(stypy.reporting.localization.Localization(__file__, 1189, 20), rc_params_from_file_190827, *[fname_190828], **kwargs_190829)
    
    # Processing the call keyword arguments (line 1189)
    kwargs_190831 = {}
    # Getting the type of 'rcParams' (line 1189)
    rcParams_190825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 4), 'rcParams', False)
    # Obtaining the member 'update' of a type (line 1189)
    update_190826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 4), rcParams_190825, 'update')
    # Calling update(args, kwargs) (line 1189)
    update_call_result_190832 = invoke(stypy.reporting.localization.Localization(__file__, 1189, 4), update_190826, *[rc_params_from_file_call_result_190830], **kwargs_190831)
    
    
    # ################# End of 'rc_file(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rc_file' in the type store
    # Getting the type of 'stypy_return_type' (line 1185)
    stypy_return_type_190833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_190833)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rc_file'
    return stypy_return_type_190833

# Assigning a type to the variable 'rc_file' (line 1185)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1185, 0), 'rc_file', rc_file)

@norecursion
def rc_context(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1193)
    None_190834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 18), 'None')
    # Getting the type of 'None' (line 1193)
    None_190835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 30), 'None')
    defaults = [None_190834, None_190835]
    # Create a new context for function 'rc_context'
    module_type_store = module_type_store.open_function_context('rc_context', 1192, 0, False)
    
    # Passed parameters checking function
    rc_context.stypy_localization = localization
    rc_context.stypy_type_of_self = None
    rc_context.stypy_type_store = module_type_store
    rc_context.stypy_function_name = 'rc_context'
    rc_context.stypy_param_names_list = ['rc', 'fname']
    rc_context.stypy_varargs_param_name = None
    rc_context.stypy_kwargs_param_name = None
    rc_context.stypy_call_defaults = defaults
    rc_context.stypy_call_varargs = varargs
    rc_context.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rc_context', ['rc', 'fname'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rc_context', localization, ['rc', 'fname'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rc_context(...)' code ##################

    unicode_190836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1224, (-1)), 'unicode', u"\n    Return a context manager for managing rc settings.\n\n    This allows one to do::\n\n        with mpl.rc_context(fname='screen.rc'):\n            plt.plot(x, a)\n            with mpl.rc_context(fname='print.rc'):\n                plt.plot(x, b)\n            plt.plot(x, c)\n\n    The 'a' vs 'x' and 'c' vs 'x' plots would have settings from\n    'screen.rc', while the 'b' vs 'x' plot would have settings from\n    'print.rc'.\n\n    A dictionary can also be passed to the context manager::\n\n        with mpl.rc_context(rc={'text.usetex': True}, fname='screen.rc'):\n            plt.plot(x, a)\n\n    The 'rc' dictionary takes precedence over the settings loaded from\n    'fname'.  Passing a dictionary only is also valid. For example a\n    common usage is::\n\n        with mpl.rc_context(rc={'interactive': False}):\n            fig, ax = plt.subplots()\n            ax.plot(range(3), range(3))\n            fig.savefig('A.png', format='png')\n            plt.close(fig)\n\n    ")
    
    # Assigning a Call to a Name (line 1226):
    
    # Assigning a Call to a Name (line 1226):
    
    # Call to copy(...): (line 1226)
    # Processing the call keyword arguments (line 1226)
    kwargs_190839 = {}
    # Getting the type of 'rcParams' (line 1226)
    rcParams_190837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 11), 'rcParams', False)
    # Obtaining the member 'copy' of a type (line 1226)
    copy_190838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 11), rcParams_190837, 'copy')
    # Calling copy(args, kwargs) (line 1226)
    copy_call_result_190840 = invoke(stypy.reporting.localization.Localization(__file__, 1226, 11), copy_190838, *[], **kwargs_190839)
    
    # Assigning a type to the variable 'orig' (line 1226)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1226, 4), 'orig', copy_call_result_190840)
    
    # Try-finally block (line 1227)
    
    # Getting the type of 'fname' (line 1228)
    fname_190841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 11), 'fname')
    # Testing the type of an if condition (line 1228)
    if_condition_190842 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1228, 8), fname_190841)
    # Assigning a type to the variable 'if_condition_190842' (line 1228)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1228, 8), 'if_condition_190842', if_condition_190842)
    # SSA begins for if statement (line 1228)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to rc_file(...): (line 1229)
    # Processing the call arguments (line 1229)
    # Getting the type of 'fname' (line 1229)
    fname_190844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 20), 'fname', False)
    # Processing the call keyword arguments (line 1229)
    kwargs_190845 = {}
    # Getting the type of 'rc_file' (line 1229)
    rc_file_190843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 12), 'rc_file', False)
    # Calling rc_file(args, kwargs) (line 1229)
    rc_file_call_result_190846 = invoke(stypy.reporting.localization.Localization(__file__, 1229, 12), rc_file_190843, *[fname_190844], **kwargs_190845)
    
    # SSA join for if statement (line 1228)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'rc' (line 1230)
    rc_190847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 11), 'rc')
    # Testing the type of an if condition (line 1230)
    if_condition_190848 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1230, 8), rc_190847)
    # Assigning a type to the variable 'if_condition_190848' (line 1230)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1230, 8), 'if_condition_190848', if_condition_190848)
    # SSA begins for if statement (line 1230)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to update(...): (line 1231)
    # Processing the call arguments (line 1231)
    # Getting the type of 'rc' (line 1231)
    rc_190851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 28), 'rc', False)
    # Processing the call keyword arguments (line 1231)
    kwargs_190852 = {}
    # Getting the type of 'rcParams' (line 1231)
    rcParams_190849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 12), 'rcParams', False)
    # Obtaining the member 'update' of a type (line 1231)
    update_190850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1231, 12), rcParams_190849, 'update')
    # Calling update(args, kwargs) (line 1231)
    update_call_result_190853 = invoke(stypy.reporting.localization.Localization(__file__, 1231, 12), update_190850, *[rc_190851], **kwargs_190852)
    
    # SSA join for if statement (line 1230)
    module_type_store = module_type_store.join_ssa_context()
    
    # Creating a generator
    GeneratorType_190854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 8), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1232, 8), GeneratorType_190854, None)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1232, 8), 'stypy_return_type', GeneratorType_190854)
    
    # finally branch of the try-finally block (line 1227)
    
    # Call to update(...): (line 1235)
    # Processing the call arguments (line 1235)
    # Getting the type of 'rcParams' (line 1235)
    rcParams_190857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 20), 'rcParams', False)
    # Getting the type of 'orig' (line 1235)
    orig_190858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 30), 'orig', False)
    # Processing the call keyword arguments (line 1235)
    kwargs_190859 = {}
    # Getting the type of 'dict' (line 1235)
    dict_190855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 8), 'dict', False)
    # Obtaining the member 'update' of a type (line 1235)
    update_190856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1235, 8), dict_190855, 'update')
    # Calling update(args, kwargs) (line 1235)
    update_call_result_190860 = invoke(stypy.reporting.localization.Localization(__file__, 1235, 8), update_190856, *[rcParams_190857, orig_190858], **kwargs_190859)
    
    
    
    # ################# End of 'rc_context(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rc_context' in the type store
    # Getting the type of 'stypy_return_type' (line 1192)
    stypy_return_type_190861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_190861)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rc_context'
    return stypy_return_type_190861

# Assigning a type to the variable 'rc_context' (line 1192)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1192, 0), 'rc_context', rc_context)

# Assigning a Str to a Name (line 1238):

# Assigning a Str to a Name (line 1238):
unicode_190862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1245, (-1)), 'unicode', u'\nThis call to matplotlib.use() has no effect because the backend has already\nbeen chosen; matplotlib.use() must be called *before* pylab, matplotlib.pyplot,\nor matplotlib.backends is imported for the first time.\n\nThe backend was *originally* set to {backend!r} by the following code:\n{tb}\n')
# Assigning a type to the variable '_use_error_msg' (line 1238)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 0), '_use_error_msg', unicode_190862)

@norecursion
def use(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 1248)
    True_190863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 18), 'True')
    # Getting the type of 'False' (line 1248)
    False_190864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 30), 'False')
    defaults = [True_190863, False_190864]
    # Create a new context for function 'use'
    module_type_store = module_type_store.open_function_context('use', 1248, 0, False)
    
    # Passed parameters checking function
    use.stypy_localization = localization
    use.stypy_type_of_self = None
    use.stypy_type_store = module_type_store
    use.stypy_function_name = 'use'
    use.stypy_param_names_list = ['arg', 'warn', 'force']
    use.stypy_varargs_param_name = None
    use.stypy_kwargs_param_name = None
    use.stypy_call_defaults = defaults
    use.stypy_call_varargs = varargs
    use.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'use', ['arg', 'warn', 'force'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'use', localization, ['arg', 'warn', 'force'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'use(...)' code ##################

    unicode_190865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1272, (-1)), 'unicode', u'\n    Set the matplotlib backend to one of the known backends.\n\n    The argument is case-insensitive. *warn* specifies whether a\n    warning should be issued if a backend has already been set up.\n    *force* is an **experimental** flag that tells matplotlib to\n    attempt to initialize a new backend by reloading the backend\n    module.\n\n    .. note::\n\n        This function must be called *before* importing pyplot for\n        the first time; or, if you are not using pyplot, it must be called\n        before importing matplotlib.backends.  If warn is True, a warning\n        is issued if you try and call this after pylab or pyplot have been\n        loaded.  In certain black magic use cases, e.g.\n        :func:`pyplot.switch_backend`, we are doing the reloading necessary to\n        make the backend switch work (in some cases, e.g., pure image\n        backends) so one can set warn=False to suppress the warnings.\n\n    To find out which backend is currently set, see\n    :func:`matplotlib.get_backend`.\n\n    ')
    
    
    # Call to startswith(...): (line 1274)
    # Processing the call arguments (line 1274)
    unicode_190868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1274, 22), 'unicode', u'module://')
    # Processing the call keyword arguments (line 1274)
    kwargs_190869 = {}
    # Getting the type of 'arg' (line 1274)
    arg_190866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 7), 'arg', False)
    # Obtaining the member 'startswith' of a type (line 1274)
    startswith_190867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1274, 7), arg_190866, 'startswith')
    # Calling startswith(args, kwargs) (line 1274)
    startswith_call_result_190870 = invoke(stypy.reporting.localization.Localization(__file__, 1274, 7), startswith_190867, *[unicode_190868], **kwargs_190869)
    
    # Testing the type of an if condition (line 1274)
    if_condition_190871 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1274, 4), startswith_call_result_190870)
    # Assigning a type to the variable 'if_condition_190871' (line 1274)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1274, 4), 'if_condition_190871', if_condition_190871)
    # SSA begins for if statement (line 1274)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 1275):
    
    # Assigning a Name to a Name (line 1275):
    # Getting the type of 'arg' (line 1275)
    arg_190872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 15), 'arg')
    # Assigning a type to the variable 'name' (line 1275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1275, 8), 'name', arg_190872)
    # SSA branch for the else part of an if statement (line 1274)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1278):
    
    # Assigning a Call to a Name (line 1278):
    
    # Call to lower(...): (line 1278)
    # Processing the call keyword arguments (line 1278)
    kwargs_190875 = {}
    # Getting the type of 'arg' (line 1278)
    arg_190873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 14), 'arg', False)
    # Obtaining the member 'lower' of a type (line 1278)
    lower_190874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1278, 14), arg_190873, 'lower')
    # Calling lower(args, kwargs) (line 1278)
    lower_call_result_190876 = invoke(stypy.reporting.localization.Localization(__file__, 1278, 14), lower_190874, *[], **kwargs_190875)
    
    # Assigning a type to the variable 'arg' (line 1278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1278, 8), 'arg', lower_call_result_190876)
    
    # Assigning a Call to a Name (line 1279):
    
    # Assigning a Call to a Name (line 1279):
    
    # Call to validate_backend(...): (line 1279)
    # Processing the call arguments (line 1279)
    # Getting the type of 'arg' (line 1279)
    arg_190878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 32), 'arg', False)
    # Processing the call keyword arguments (line 1279)
    kwargs_190879 = {}
    # Getting the type of 'validate_backend' (line 1279)
    validate_backend_190877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 15), 'validate_backend', False)
    # Calling validate_backend(args, kwargs) (line 1279)
    validate_backend_call_result_190880 = invoke(stypy.reporting.localization.Localization(__file__, 1279, 15), validate_backend_190877, *[arg_190878], **kwargs_190879)
    
    # Assigning a type to the variable 'name' (line 1279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1279, 8), 'name', validate_backend_call_result_190880)
    # SSA join for if statement (line 1274)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    unicode_190881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1282, 7), 'unicode', u'matplotlib.backends')
    # Getting the type of 'sys' (line 1282)
    sys_190882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 32), 'sys')
    # Obtaining the member 'modules' of a type (line 1282)
    modules_190883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1282, 32), sys_190882, 'modules')
    # Applying the binary operator 'in' (line 1282)
    result_contains_190884 = python_operator(stypy.reporting.localization.Localization(__file__, 1282, 7), 'in', unicode_190881, modules_190883)
    
    # Testing the type of an if condition (line 1282)
    if_condition_190885 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1282, 4), result_contains_190884)
    # Assigning a type to the variable 'if_condition_190885' (line 1282)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1282, 4), 'if_condition_190885', if_condition_190885)
    # SSA begins for if statement (line 1282)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    unicode_190886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1284, 21), 'unicode', u'backend')
    # Getting the type of 'rcParams' (line 1284)
    rcParams_190887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 12), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 1284)
    getitem___190888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 12), rcParams_190887, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1284)
    subscript_call_result_190889 = invoke(stypy.reporting.localization.Localization(__file__, 1284, 12), getitem___190888, unicode_190886)
    
    # Getting the type of 'name' (line 1284)
    name_190890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 35), 'name')
    # Applying the binary operator '!=' (line 1284)
    result_ne_190891 = python_operator(stypy.reporting.localization.Localization(__file__, 1284, 12), '!=', subscript_call_result_190889, name_190890)
    
    # Getting the type of 'warn' (line 1284)
    warn_190892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 45), 'warn')
    # Applying the binary operator 'and' (line 1284)
    result_and_keyword_190893 = python_operator(stypy.reporting.localization.Localization(__file__, 1284, 11), 'and', result_ne_190891, warn_190892)
    
    # Testing the type of an if condition (line 1284)
    if_condition_190894 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1284, 8), result_and_keyword_190893)
    # Assigning a type to the variable 'if_condition_190894' (line 1284)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1284, 8), 'if_condition_190894', if_condition_190894)
    # SSA begins for if statement (line 1284)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1285, 12))
    
    # 'import matplotlib.backends' statement (line 1285)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_190895 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1285, 12), 'matplotlib.backends')

    if (type(import_190895) is not StypyTypeError):

        if (import_190895 != 'pyd_module'):
            __import__(import_190895)
            sys_modules_190896 = sys.modules[import_190895]
            import_module(stypy.reporting.localization.Localization(__file__, 1285, 12), 'matplotlib.backends', sys_modules_190896.module_type_store, module_type_store)
        else:
            import matplotlib.backends

            import_module(stypy.reporting.localization.Localization(__file__, 1285, 12), 'matplotlib.backends', matplotlib.backends, module_type_store)

    else:
        # Assigning a type to the variable 'matplotlib.backends' (line 1285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1285, 12), 'matplotlib.backends', import_190895)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    # Call to warn(...): (line 1286)
    # Processing the call arguments (line 1286)
    
    # Call to format(...): (line 1287)
    # Processing the call keyword arguments (line 1287)
    
    # Obtaining the type of the subscript
    unicode_190901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1288, 37), 'unicode', u'backend')
    # Getting the type of 'rcParams' (line 1288)
    rcParams_190902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 28), 'rcParams', False)
    # Obtaining the member '__getitem__' of a type (line 1288)
    getitem___190903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1288, 28), rcParams_190902, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1288)
    subscript_call_result_190904 = invoke(stypy.reporting.localization.Localization(__file__, 1288, 28), getitem___190903, unicode_190901)
    
    keyword_190905 = subscript_call_result_190904
    # Getting the type of 'matplotlib' (line 1289)
    matplotlib_190906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 23), 'matplotlib', False)
    # Obtaining the member 'backends' of a type (line 1289)
    backends_190907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1289, 23), matplotlib_190906, 'backends')
    # Obtaining the member '_backend_loading_tb' of a type (line 1289)
    _backend_loading_tb_190908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1289, 23), backends_190907, '_backend_loading_tb')
    keyword_190909 = _backend_loading_tb_190908
    kwargs_190910 = {'tb': keyword_190909, 'backend': keyword_190905}
    # Getting the type of '_use_error_msg' (line 1287)
    _use_error_msg_190899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 16), '_use_error_msg', False)
    # Obtaining the member 'format' of a type (line 1287)
    format_190900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1287, 16), _use_error_msg_190899, 'format')
    # Calling format(args, kwargs) (line 1287)
    format_call_result_190911 = invoke(stypy.reporting.localization.Localization(__file__, 1287, 16), format_190900, *[], **kwargs_190910)
    
    # Processing the call keyword arguments (line 1286)
    int_190912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1290, 27), 'int')
    keyword_190913 = int_190912
    kwargs_190914 = {'stacklevel': keyword_190913}
    # Getting the type of 'warnings' (line 1286)
    warnings_190897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 12), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1286)
    warn_190898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1286, 12), warnings_190897, 'warn')
    # Calling warn(args, kwargs) (line 1286)
    warn_call_result_190915 = invoke(stypy.reporting.localization.Localization(__file__, 1286, 12), warn_190898, *[format_call_result_190911], **kwargs_190914)
    
    # SSA join for if statement (line 1284)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'force' (line 1293)
    force_190916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 15), 'force')
    # Applying the 'not' unary operator (line 1293)
    result_not__190917 = python_operator(stypy.reporting.localization.Localization(__file__, 1293, 11), 'not', force_190916)
    
    # Testing the type of an if condition (line 1293)
    if_condition_190918 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1293, 8), result_not__190917)
    # Assigning a type to the variable 'if_condition_190918' (line 1293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1293, 8), 'if_condition_190918', if_condition_190918)
    # SSA begins for if statement (line 1293)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Assigning a type to the variable 'stypy_return_type' (line 1294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1294, 12), 'stypy_return_type', types.NoneType)
    # SSA join for if statement (line 1293)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 1295):
    
    # Assigning a Name to a Name (line 1295):
    # Getting the type of 'True' (line 1295)
    True_190919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 22), 'True')
    # Assigning a type to the variable 'need_reload' (line 1295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1295, 8), 'need_reload', True_190919)
    # SSA branch for the else part of an if statement (line 1282)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1297):
    
    # Assigning a Name to a Name (line 1297):
    # Getting the type of 'False' (line 1297)
    False_190920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 22), 'False')
    # Assigning a type to the variable 'need_reload' (line 1297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 8), 'need_reload', False_190920)
    # SSA join for if statement (line 1282)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Subscript (line 1300):
    
    # Assigning a Name to a Subscript (line 1300):
    # Getting the type of 'name' (line 1300)
    name_190921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 26), 'name')
    # Getting the type of 'rcParams' (line 1300)
    rcParams_190922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 4), 'rcParams')
    unicode_190923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1300, 13), 'unicode', u'backend')
    # Storing an element on a container (line 1300)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1300, 4), rcParams_190922, (unicode_190923, name_190921))
    
    # Getting the type of 'need_reload' (line 1304)
    need_reload_190924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 7), 'need_reload')
    # Testing the type of an if condition (line 1304)
    if_condition_190925 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1304, 4), need_reload_190924)
    # Assigning a type to the variable 'if_condition_190925' (line 1304)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 4), 'if_condition_190925', if_condition_190925)
    # SSA begins for if statement (line 1304)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to reload(...): (line 1305)
    # Processing the call arguments (line 1305)
    
    # Obtaining the type of the subscript
    unicode_190927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1305, 27), 'unicode', u'matplotlib.backends')
    # Getting the type of 'sys' (line 1305)
    sys_190928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 15), 'sys', False)
    # Obtaining the member 'modules' of a type (line 1305)
    modules_190929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 15), sys_190928, 'modules')
    # Obtaining the member '__getitem__' of a type (line 1305)
    getitem___190930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 15), modules_190929, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1305)
    subscript_call_result_190931 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 15), getitem___190930, unicode_190927)
    
    # Processing the call keyword arguments (line 1305)
    kwargs_190932 = {}
    # Getting the type of 'reload' (line 1305)
    reload_190926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 8), 'reload', False)
    # Calling reload(args, kwargs) (line 1305)
    reload_call_result_190933 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 8), reload_190926, *[subscript_call_result_190931], **kwargs_190932)
    
    # SSA join for if statement (line 1304)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'use(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'use' in the type store
    # Getting the type of 'stypy_return_type' (line 1248)
    stypy_return_type_190934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_190934)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'use'
    return stypy_return_type_190934

# Assigning a type to the variable 'use' (line 1248)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1248, 0), 'use', use)


# SSA begins for try-except statement (line 1308)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')

# Call to use(...): (line 1309)
# Processing the call arguments (line 1309)

# Obtaining the type of the subscript
unicode_190936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 19), 'unicode', u'MPLBACKEND')
# Getting the type of 'os' (line 1309)
os_190937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 8), 'os', False)
# Obtaining the member 'environ' of a type (line 1309)
environ_190938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1309, 8), os_190937, 'environ')
# Obtaining the member '__getitem__' of a type (line 1309)
getitem___190939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1309, 8), environ_190938, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 1309)
subscript_call_result_190940 = invoke(stypy.reporting.localization.Localization(__file__, 1309, 8), getitem___190939, unicode_190936)

# Processing the call keyword arguments (line 1309)
kwargs_190941 = {}
# Getting the type of 'use' (line 1309)
use_190935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 4), 'use', False)
# Calling use(args, kwargs) (line 1309)
use_call_result_190942 = invoke(stypy.reporting.localization.Localization(__file__, 1309, 4), use_190935, *[subscript_call_result_190940], **kwargs_190941)

# SSA branch for the except part of a try statement (line 1308)
# SSA branch for the except 'KeyError' branch of a try statement (line 1308)
module_type_store.open_ssa_branch('except')
pass
# SSA join for try-except statement (line 1308)
module_type_store = module_type_store.join_ssa_context()


@norecursion
def get_backend(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_backend'
    module_type_store = module_type_store.open_function_context('get_backend', 1314, 0, False)
    
    # Passed parameters checking function
    get_backend.stypy_localization = localization
    get_backend.stypy_type_of_self = None
    get_backend.stypy_type_store = module_type_store
    get_backend.stypy_function_name = 'get_backend'
    get_backend.stypy_param_names_list = []
    get_backend.stypy_varargs_param_name = None
    get_backend.stypy_kwargs_param_name = None
    get_backend.stypy_call_defaults = defaults
    get_backend.stypy_call_varargs = varargs
    get_backend.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_backend', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_backend', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_backend(...)' code ##################

    unicode_190943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1315, 4), 'unicode', u'Return the name of the current backend.')
    
    # Obtaining the type of the subscript
    unicode_190944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1316, 20), 'unicode', u'backend')
    # Getting the type of 'rcParams' (line 1316)
    rcParams_190945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 11), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 1316)
    getitem___190946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 11), rcParams_190945, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1316)
    subscript_call_result_190947 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 11), getitem___190946, unicode_190944)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1316)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1316, 4), 'stypy_return_type', subscript_call_result_190947)
    
    # ################# End of 'get_backend(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_backend' in the type store
    # Getting the type of 'stypy_return_type' (line 1314)
    stypy_return_type_190948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_190948)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_backend'
    return stypy_return_type_190948

# Assigning a type to the variable 'get_backend' (line 1314)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1314, 0), 'get_backend', get_backend)

@norecursion
def interactive(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'interactive'
    module_type_store = module_type_store.open_function_context('interactive', 1319, 0, False)
    
    # Passed parameters checking function
    interactive.stypy_localization = localization
    interactive.stypy_type_of_self = None
    interactive.stypy_type_store = module_type_store
    interactive.stypy_function_name = 'interactive'
    interactive.stypy_param_names_list = ['b']
    interactive.stypy_varargs_param_name = None
    interactive.stypy_kwargs_param_name = None
    interactive.stypy_call_defaults = defaults
    interactive.stypy_call_varargs = varargs
    interactive.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'interactive', ['b'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'interactive', localization, ['b'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'interactive(...)' code ##################

    unicode_190949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1324, (-1)), 'unicode', u'\n    Set interactive mode to boolean b.\n\n    If b is True, then draw after every plotting command, e.g., after xlabel\n    ')
    
    # Assigning a Name to a Subscript (line 1325):
    
    # Assigning a Name to a Subscript (line 1325):
    # Getting the type of 'b' (line 1325)
    b_190950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 30), 'b')
    # Getting the type of 'rcParams' (line 1325)
    rcParams_190951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 4), 'rcParams')
    unicode_190952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1325, 13), 'unicode', u'interactive')
    # Storing an element on a container (line 1325)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1325, 4), rcParams_190951, (unicode_190952, b_190950))
    
    # ################# End of 'interactive(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'interactive' in the type store
    # Getting the type of 'stypy_return_type' (line 1319)
    stypy_return_type_190953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_190953)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'interactive'
    return stypy_return_type_190953

# Assigning a type to the variable 'interactive' (line 1319)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1319, 0), 'interactive', interactive)

@norecursion
def is_interactive(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_interactive'
    module_type_store = module_type_store.open_function_context('is_interactive', 1328, 0, False)
    
    # Passed parameters checking function
    is_interactive.stypy_localization = localization
    is_interactive.stypy_type_of_self = None
    is_interactive.stypy_type_store = module_type_store
    is_interactive.stypy_function_name = 'is_interactive'
    is_interactive.stypy_param_names_list = []
    is_interactive.stypy_varargs_param_name = None
    is_interactive.stypy_kwargs_param_name = None
    is_interactive.stypy_call_defaults = defaults
    is_interactive.stypy_call_varargs = varargs
    is_interactive.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_interactive', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_interactive', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_interactive(...)' code ##################

    unicode_190954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1329, 4), 'unicode', u'Return true if plot mode is interactive')
    
    # Obtaining the type of the subscript
    unicode_190955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1330, 20), 'unicode', u'interactive')
    # Getting the type of 'rcParams' (line 1330)
    rcParams_190956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 11), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 1330)
    getitem___190957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1330, 11), rcParams_190956, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1330)
    subscript_call_result_190958 = invoke(stypy.reporting.localization.Localization(__file__, 1330, 11), getitem___190957, unicode_190955)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1330)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1330, 4), 'stypy_return_type', subscript_call_result_190958)
    
    # ################# End of 'is_interactive(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_interactive' in the type store
    # Getting the type of 'stypy_return_type' (line 1328)
    stypy_return_type_190959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_190959)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_interactive'
    return stypy_return_type_190959

# Assigning a type to the variable 'is_interactive' (line 1328)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1328, 0), 'is_interactive', is_interactive)

@norecursion
def tk_window_focus(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'tk_window_focus'
    module_type_store = module_type_store.open_function_context('tk_window_focus', 1333, 0, False)
    
    # Passed parameters checking function
    tk_window_focus.stypy_localization = localization
    tk_window_focus.stypy_type_of_self = None
    tk_window_focus.stypy_type_store = module_type_store
    tk_window_focus.stypy_function_name = 'tk_window_focus'
    tk_window_focus.stypy_param_names_list = []
    tk_window_focus.stypy_varargs_param_name = None
    tk_window_focus.stypy_kwargs_param_name = None
    tk_window_focus.stypy_call_defaults = defaults
    tk_window_focus.stypy_call_varargs = varargs
    tk_window_focus.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tk_window_focus', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tk_window_focus', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tk_window_focus(...)' code ##################

    unicode_190960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1336, (-1)), 'unicode', u'Return true if focus maintenance under TkAgg on win32 is on.\n     This currently works only for python.exe and IPython.exe.\n     Both IDLE and Pythonwin.exe fail badly when tk_window_focus is on.')
    
    
    
    # Obtaining the type of the subscript
    unicode_190961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1337, 16), 'unicode', u'backend')
    # Getting the type of 'rcParams' (line 1337)
    rcParams_190962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 7), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 1337)
    getitem___190963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1337, 7), rcParams_190962, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1337)
    subscript_call_result_190964 = invoke(stypy.reporting.localization.Localization(__file__, 1337, 7), getitem___190963, unicode_190961)
    
    unicode_190965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1337, 30), 'unicode', u'TkAgg')
    # Applying the binary operator '!=' (line 1337)
    result_ne_190966 = python_operator(stypy.reporting.localization.Localization(__file__, 1337, 7), '!=', subscript_call_result_190964, unicode_190965)
    
    # Testing the type of an if condition (line 1337)
    if_condition_190967 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1337, 4), result_ne_190966)
    # Assigning a type to the variable 'if_condition_190967' (line 1337)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 4), 'if_condition_190967', if_condition_190967)
    # SSA begins for if statement (line 1337)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 1338)
    False_190968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 1338)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1338, 8), 'stypy_return_type', False_190968)
    # SSA join for if statement (line 1337)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining the type of the subscript
    unicode_190969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1339, 20), 'unicode', u'tk.window_focus')
    # Getting the type of 'rcParams' (line 1339)
    rcParams_190970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 11), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 1339)
    getitem___190971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1339, 11), rcParams_190970, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1339)
    subscript_call_result_190972 = invoke(stypy.reporting.localization.Localization(__file__, 1339, 11), getitem___190971, unicode_190969)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1339)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1339, 4), 'stypy_return_type', subscript_call_result_190972)
    
    # ################# End of 'tk_window_focus(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tk_window_focus' in the type store
    # Getting the type of 'stypy_return_type' (line 1333)
    stypy_return_type_190973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_190973)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tk_window_focus'
    return stypy_return_type_190973

# Assigning a type to the variable 'tk_window_focus' (line 1333)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1333, 0), 'tk_window_focus', tk_window_focus)

# Assigning a List to a Name (line 1342):

# Assigning a List to a Name (line 1342):

# Obtaining an instance of the builtin type 'list' (line 1342)
list_190974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1342, 23), 'list')
# Adding type elements to the builtin type 'list' instance (line 1342)
# Adding element type (line 1342)
unicode_190975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1343, 4), 'unicode', u'matplotlib.tests')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1342, 23), list_190974, unicode_190975)
# Adding element type (line 1342)
unicode_190976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1344, 4), 'unicode', u'matplotlib.sphinxext.tests')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1342, 23), list_190974, unicode_190976)
# Adding element type (line 1342)
unicode_190977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1345, 4), 'unicode', u'mpl_toolkits.tests')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1342, 23), list_190974, unicode_190977)

# Assigning a type to the variable 'default_test_modules' (line 1342)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1342, 0), 'default_test_modules', list_190974)

@norecursion
def _init_tests(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_init_tests'
    module_type_store = module_type_store.open_function_context('_init_tests', 1349, 0, False)
    
    # Passed parameters checking function
    _init_tests.stypy_localization = localization
    _init_tests.stypy_type_of_self = None
    _init_tests.stypy_type_store = module_type_store
    _init_tests.stypy_function_name = '_init_tests'
    _init_tests.stypy_param_names_list = []
    _init_tests.stypy_varargs_param_name = None
    _init_tests.stypy_kwargs_param_name = None
    _init_tests.stypy_call_defaults = defaults
    _init_tests.stypy_call_varargs = varargs
    _init_tests.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_init_tests', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_init_tests', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_init_tests(...)' code ##################

    
    
    # SSA begins for try-except statement (line 1350)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1351, 8))
    
    # 'import faulthandler' statement (line 1351)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_190978 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1351, 8), 'faulthandler')

    if (type(import_190978) is not StypyTypeError):

        if (import_190978 != 'pyd_module'):
            __import__(import_190978)
            sys_modules_190979 = sys.modules[import_190978]
            import_module(stypy.reporting.localization.Localization(__file__, 1351, 8), 'faulthandler', sys_modules_190979.module_type_store, module_type_store)
        else:
            import faulthandler

            import_module(stypy.reporting.localization.Localization(__file__, 1351, 8), 'faulthandler', faulthandler, module_type_store)

    else:
        # Assigning a type to the variable 'faulthandler' (line 1351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1351, 8), 'faulthandler', import_190978)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    # SSA branch for the except part of a try statement (line 1350)
    # SSA branch for the except 'ImportError' branch of a try statement (line 1350)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA branch for the else branch of a try statement (line 1350)
    module_type_store.open_ssa_branch('except else')
    
    # Call to enable(...): (line 1355)
    # Processing the call keyword arguments (line 1355)
    kwargs_190982 = {}
    # Getting the type of 'faulthandler' (line 1355)
    faulthandler_190980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 8), 'faulthandler', False)
    # Obtaining the member 'enable' of a type (line 1355)
    enable_190981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1355, 8), faulthandler_190980, 'enable')
    # Calling enable(args, kwargs) (line 1355)
    enable_call_result_190983 = invoke(stypy.reporting.localization.Localization(__file__, 1355, 8), enable_190981, *[], **kwargs_190982)
    
    # SSA join for try-except statement (line 1350)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Str to a Name (line 1359):
    
    # Assigning a Str to a Name (line 1359):
    unicode_190984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1359, 29), 'unicode', u'2.6.1')
    # Assigning a type to the variable 'LOCAL_FREETYPE_VERSION' (line 1359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1359, 4), 'LOCAL_FREETYPE_VERSION', unicode_190984)
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1361, 4))
    
    # 'from matplotlib import ft2font' statement (line 1361)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_190985 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1361, 4), 'matplotlib')

    if (type(import_190985) is not StypyTypeError):

        if (import_190985 != 'pyd_module'):
            __import__(import_190985)
            sys_modules_190986 = sys.modules[import_190985]
            import_from_module(stypy.reporting.localization.Localization(__file__, 1361, 4), 'matplotlib', sys_modules_190986.module_type_store, module_type_store, ['ft2font'])
            nest_module(stypy.reporting.localization.Localization(__file__, 1361, 4), __file__, sys_modules_190986, sys_modules_190986.module_type_store, module_type_store)
        else:
            from matplotlib import ft2font

            import_from_module(stypy.reporting.localization.Localization(__file__, 1361, 4), 'matplotlib', None, module_type_store, ['ft2font'], [ft2font])

    else:
        # Assigning a type to the variable 'matplotlib' (line 1361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 4), 'matplotlib', import_190985)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'ft2font' (line 1362)
    ft2font_190987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'ft2font')
    # Obtaining the member '__freetype_version__' of a type (line 1362)
    freetype_version___190988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 8), ft2font_190987, '__freetype_version__')
    # Getting the type of 'LOCAL_FREETYPE_VERSION' (line 1362)
    LOCAL_FREETYPE_VERSION_190989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 40), 'LOCAL_FREETYPE_VERSION')
    # Applying the binary operator '!=' (line 1362)
    result_ne_190990 = python_operator(stypy.reporting.localization.Localization(__file__, 1362, 8), '!=', freetype_version___190988, LOCAL_FREETYPE_VERSION_190989)
    
    
    # Getting the type of 'ft2font' (line 1363)
    ft2font_190991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 8), 'ft2font')
    # Obtaining the member '__freetype_build_type__' of a type (line 1363)
    freetype_build_type___190992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1363, 8), ft2font_190991, '__freetype_build_type__')
    unicode_190993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1363, 43), 'unicode', u'local')
    # Applying the binary operator '!=' (line 1363)
    result_ne_190994 = python_operator(stypy.reporting.localization.Localization(__file__, 1363, 8), '!=', freetype_build_type___190992, unicode_190993)
    
    # Applying the binary operator 'or' (line 1362)
    result_or_keyword_190995 = python_operator(stypy.reporting.localization.Localization(__file__, 1362, 8), 'or', result_ne_190990, result_ne_190994)
    
    # Testing the type of an if condition (line 1362)
    if_condition_190996 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1362, 4), result_or_keyword_190995)
    # Assigning a type to the variable 'if_condition_190996' (line 1362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 4), 'if_condition_190996', if_condition_190996)
    # SSA begins for if statement (line 1362)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 1364)
    # Processing the call arguments (line 1364)
    
    # Call to format(...): (line 1365)
    # Processing the call arguments (line 1365)
    # Getting the type of 'LOCAL_FREETYPE_VERSION' (line 1371)
    LOCAL_FREETYPE_VERSION_191001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 16), 'LOCAL_FREETYPE_VERSION', False)
    # Getting the type of 'ft2font' (line 1372)
    ft2font_191002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 16), 'ft2font', False)
    # Obtaining the member '__freetype_version__' of a type (line 1372)
    freetype_version___191003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1372, 16), ft2font_191002, '__freetype_version__')
    
    
    # Getting the type of 'ft2font' (line 1373)
    ft2font_191004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 22), 'ft2font', False)
    # Obtaining the member '__freetype_build_type__' of a type (line 1373)
    freetype_build_type___191005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1373, 22), ft2font_191004, '__freetype_build_type__')
    unicode_191006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1373, 57), 'unicode', u'local')
    # Applying the binary operator '==' (line 1373)
    result_eq_191007 = python_operator(stypy.reporting.localization.Localization(__file__, 1373, 22), '==', freetype_build_type___191005, unicode_191006)
    
    # Testing the type of an if expression (line 1373)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1373, 16), result_eq_191007)
    # SSA begins for if expression (line 1373)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    unicode_191008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1373, 16), 'unicode', u'')
    # SSA branch for the else part of an if expression (line 1373)
    module_type_store.open_ssa_branch('if expression else')
    unicode_191009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1373, 70), 'unicode', u'not ')
    # SSA join for if expression (line 1373)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_191010 = union_type.UnionType.add(unicode_191008, unicode_191009)
    
    # Processing the call keyword arguments (line 1365)
    kwargs_191011 = {}
    unicode_190999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1365, 12), 'unicode', u'Matplotlib is not built with the correct FreeType version to run tests.  Set local_freetype=True in setup.cfg and rebuild. Expect many image comparison failures below. Expected freetype version {0}. Found freetype version {1}. Freetype build type is {2}local')
    # Obtaining the member 'format' of a type (line 1365)
    format_191000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1365, 12), unicode_190999, 'format')
    # Calling format(args, kwargs) (line 1365)
    format_call_result_191012 = invoke(stypy.reporting.localization.Localization(__file__, 1365, 12), format_191000, *[LOCAL_FREETYPE_VERSION_191001, freetype_version___191003, if_exp_191010], **kwargs_191011)
    
    # Processing the call keyword arguments (line 1364)
    kwargs_191013 = {}
    # Getting the type of 'warnings' (line 1364)
    warnings_190997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1364)
    warn_190998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1364, 8), warnings_190997, 'warn')
    # Calling warn(args, kwargs) (line 1364)
    warn_call_result_191014 = invoke(stypy.reporting.localization.Localization(__file__, 1364, 8), warn_190998, *[format_call_result_191012], **kwargs_191013)
    
    # SSA join for if statement (line 1362)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 1377)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1378, 8))
    
    # 'import pytest' statement (line 1378)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_191015 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1378, 8), 'pytest')

    if (type(import_191015) is not StypyTypeError):

        if (import_191015 != 'pyd_module'):
            __import__(import_191015)
            sys_modules_191016 = sys.modules[import_191015]
            import_module(stypy.reporting.localization.Localization(__file__, 1378, 8), 'pytest', sys_modules_191016.module_type_store, module_type_store)
        else:
            import pytest

            import_module(stypy.reporting.localization.Localization(__file__, 1378, 8), 'pytest', pytest, module_type_store)

    else:
        # Assigning a type to the variable 'pytest' (line 1378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1378, 8), 'pytest', import_191015)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    
    # SSA begins for try-except statement (line 1379)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1380, 12))
    
    # 'from unittest import mock' statement (line 1380)
    try:
        from unittest import mock

    except:
        mock = UndefinedType
    import_from_module(stypy.reporting.localization.Localization(__file__, 1380, 12), 'unittest', None, module_type_store, ['mock'], [mock])
    
    # SSA branch for the except part of a try statement (line 1379)
    # SSA branch for the except 'ImportError' branch of a try statement (line 1379)
    module_type_store.open_ssa_branch('except')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1382, 12))
    
    # 'import mock' statement (line 1382)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_191017 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1382, 12), 'mock')

    if (type(import_191017) is not StypyTypeError):

        if (import_191017 != 'pyd_module'):
            __import__(import_191017)
            sys_modules_191018 = sys.modules[import_191017]
            import_module(stypy.reporting.localization.Localization(__file__, 1382, 12), 'mock', sys_modules_191018.module_type_store, module_type_store)
        else:
            import mock

            import_module(stypy.reporting.localization.Localization(__file__, 1382, 12), 'mock', mock, module_type_store)

    else:
        # Assigning a type to the variable 'mock' (line 1382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 12), 'mock', import_191017)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    # SSA join for try-except statement (line 1379)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 1377)
    # SSA branch for the except 'ImportError' branch of a try statement (line 1377)
    module_type_store.open_ssa_branch('except')
    
    # Call to print(...): (line 1384)
    # Processing the call arguments (line 1384)
    unicode_191020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1384, 14), 'unicode', u'matplotlib.test requires pytest and mock to run.')
    # Processing the call keyword arguments (line 1384)
    kwargs_191021 = {}
    # Getting the type of 'print' (line 1384)
    print_191019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 8), 'print', False)
    # Calling print(args, kwargs) (line 1384)
    print_call_result_191022 = invoke(stypy.reporting.localization.Localization(__file__, 1384, 8), print_191019, *[unicode_191020], **kwargs_191021)
    
    # SSA join for try-except statement (line 1377)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_init_tests(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_init_tests' in the type store
    # Getting the type of 'stypy_return_type' (line 1349)
    stypy_return_type_191023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_191023)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_init_tests'
    return stypy_return_type_191023

# Assigning a type to the variable '_init_tests' (line 1349)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1349, 0), '_init_tests', _init_tests)

@norecursion
def test(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1388)
    None_191024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 19), 'None')
    # Getting the type of 'False' (line 1388)
    False_191025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 34), 'False')
    # Getting the type of 'True' (line 1388)
    True_191026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 61), 'True')
    int_191027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1389, 24), 'int')
    defaults = [None_191024, False_191025, True_191026, int_191027]
    # Create a new context for function 'test'
    module_type_store = module_type_store.open_function_context('test', 1388, 0, False)
    
    # Passed parameters checking function
    test.stypy_localization = localization
    test.stypy_type_of_self = None
    test.stypy_type_store = module_type_store
    test.stypy_function_name = 'test'
    test.stypy_param_names_list = ['verbosity', 'coverage', 'switch_backend_warn', 'recursionlimit']
    test.stypy_varargs_param_name = None
    test.stypy_kwargs_param_name = 'kwargs'
    test.stypy_call_defaults = defaults
    test.stypy_call_varargs = varargs
    test.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'test', ['verbosity', 'coverage', 'switch_backend_warn', 'recursionlimit'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'test', localization, ['verbosity', 'coverage', 'switch_backend_warn', 'recursionlimit'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'test(...)' code ##################

    unicode_191028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, 4), 'unicode', u'run the matplotlib test suite')
    
    # Call to _init_tests(...): (line 1391)
    # Processing the call keyword arguments (line 1391)
    kwargs_191030 = {}
    # Getting the type of '_init_tests' (line 1391)
    _init_tests_191029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 4), '_init_tests', False)
    # Calling _init_tests(args, kwargs) (line 1391)
    _init_tests_call_result_191031 = invoke(stypy.reporting.localization.Localization(__file__, 1391, 4), _init_tests_191029, *[], **kwargs_191030)
    
    
    
    
    # Call to isdir(...): (line 1392)
    # Processing the call arguments (line 1392)
    
    # Call to join(...): (line 1392)
    # Processing the call arguments (line 1392)
    
    # Call to dirname(...): (line 1392)
    # Processing the call arguments (line 1392)
    # Getting the type of '__file__' (line 1392)
    file___191041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 54), '__file__', False)
    # Processing the call keyword arguments (line 1392)
    kwargs_191042 = {}
    # Getting the type of 'os' (line 1392)
    os_191038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 38), 'os', False)
    # Obtaining the member 'path' of a type (line 1392)
    path_191039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1392, 38), os_191038, 'path')
    # Obtaining the member 'dirname' of a type (line 1392)
    dirname_191040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1392, 38), path_191039, 'dirname')
    # Calling dirname(args, kwargs) (line 1392)
    dirname_call_result_191043 = invoke(stypy.reporting.localization.Localization(__file__, 1392, 38), dirname_191040, *[file___191041], **kwargs_191042)
    
    unicode_191044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 65), 'unicode', u'tests')
    # Processing the call keyword arguments (line 1392)
    kwargs_191045 = {}
    # Getting the type of 'os' (line 1392)
    os_191035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 25), 'os', False)
    # Obtaining the member 'path' of a type (line 1392)
    path_191036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1392, 25), os_191035, 'path')
    # Obtaining the member 'join' of a type (line 1392)
    join_191037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1392, 25), path_191036, 'join')
    # Calling join(args, kwargs) (line 1392)
    join_call_result_191046 = invoke(stypy.reporting.localization.Localization(__file__, 1392, 25), join_191037, *[dirname_call_result_191043, unicode_191044], **kwargs_191045)
    
    # Processing the call keyword arguments (line 1392)
    kwargs_191047 = {}
    # Getting the type of 'os' (line 1392)
    os_191032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 1392)
    path_191033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1392, 11), os_191032, 'path')
    # Obtaining the member 'isdir' of a type (line 1392)
    isdir_191034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1392, 11), path_191033, 'isdir')
    # Calling isdir(args, kwargs) (line 1392)
    isdir_call_result_191048 = invoke(stypy.reporting.localization.Localization(__file__, 1392, 11), isdir_191034, *[join_call_result_191046], **kwargs_191047)
    
    # Applying the 'not' unary operator (line 1392)
    result_not__191049 = python_operator(stypy.reporting.localization.Localization(__file__, 1392, 7), 'not', isdir_call_result_191048)
    
    # Testing the type of an if condition (line 1392)
    if_condition_191050 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1392, 4), result_not__191049)
    # Assigning a type to the variable 'if_condition_191050' (line 1392)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 4), 'if_condition_191050', if_condition_191050)
    # SSA begins for if statement (line 1392)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ImportError(...): (line 1393)
    # Processing the call arguments (line 1393)
    unicode_191052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1393, 26), 'unicode', u'Matplotlib test data is not installed')
    # Processing the call keyword arguments (line 1393)
    kwargs_191053 = {}
    # Getting the type of 'ImportError' (line 1393)
    ImportError_191051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 14), 'ImportError', False)
    # Calling ImportError(args, kwargs) (line 1393)
    ImportError_call_result_191054 = invoke(stypy.reporting.localization.Localization(__file__, 1393, 14), ImportError_191051, *[unicode_191052], **kwargs_191053)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1393, 8), ImportError_call_result_191054, 'raise parameter', BaseException)
    # SSA join for if statement (line 1392)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1395):
    
    # Assigning a Call to a Name (line 1395):
    
    # Call to get_backend(...): (line 1395)
    # Processing the call keyword arguments (line 1395)
    kwargs_191056 = {}
    # Getting the type of 'get_backend' (line 1395)
    get_backend_191055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 18), 'get_backend', False)
    # Calling get_backend(args, kwargs) (line 1395)
    get_backend_call_result_191057 = invoke(stypy.reporting.localization.Localization(__file__, 1395, 18), get_backend_191055, *[], **kwargs_191056)
    
    # Assigning a type to the variable 'old_backend' (line 1395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1395, 4), 'old_backend', get_backend_call_result_191057)
    
    # Assigning a Call to a Name (line 1396):
    
    # Assigning a Call to a Name (line 1396):
    
    # Call to getrecursionlimit(...): (line 1396)
    # Processing the call keyword arguments (line 1396)
    kwargs_191060 = {}
    # Getting the type of 'sys' (line 1396)
    sys_191058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 25), 'sys', False)
    # Obtaining the member 'getrecursionlimit' of a type (line 1396)
    getrecursionlimit_191059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1396, 25), sys_191058, 'getrecursionlimit')
    # Calling getrecursionlimit(args, kwargs) (line 1396)
    getrecursionlimit_call_result_191061 = invoke(stypy.reporting.localization.Localization(__file__, 1396, 25), getrecursionlimit_191059, *[], **kwargs_191060)
    
    # Assigning a type to the variable 'old_recursionlimit' (line 1396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1396, 4), 'old_recursionlimit', getrecursionlimit_call_result_191061)
    
    # Try-finally block (line 1397)
    
    # Call to use(...): (line 1398)
    # Processing the call arguments (line 1398)
    unicode_191063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1398, 12), 'unicode', u'agg')
    # Processing the call keyword arguments (line 1398)
    kwargs_191064 = {}
    # Getting the type of 'use' (line 1398)
    use_191062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 8), 'use', False)
    # Calling use(args, kwargs) (line 1398)
    use_call_result_191065 = invoke(stypy.reporting.localization.Localization(__file__, 1398, 8), use_191062, *[unicode_191063], **kwargs_191064)
    
    
    # Getting the type of 'recursionlimit' (line 1399)
    recursionlimit_191066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 11), 'recursionlimit')
    # Testing the type of an if condition (line 1399)
    if_condition_191067 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1399, 8), recursionlimit_191066)
    # Assigning a type to the variable 'if_condition_191067' (line 1399)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1399, 8), 'if_condition_191067', if_condition_191067)
    # SSA begins for if statement (line 1399)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to setrecursionlimit(...): (line 1400)
    # Processing the call arguments (line 1400)
    # Getting the type of 'recursionlimit' (line 1400)
    recursionlimit_191070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 34), 'recursionlimit', False)
    # Processing the call keyword arguments (line 1400)
    kwargs_191071 = {}
    # Getting the type of 'sys' (line 1400)
    sys_191068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 12), 'sys', False)
    # Obtaining the member 'setrecursionlimit' of a type (line 1400)
    setrecursionlimit_191069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 12), sys_191068, 'setrecursionlimit')
    # Calling setrecursionlimit(args, kwargs) (line 1400)
    setrecursionlimit_call_result_191072 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 12), setrecursionlimit_191069, *[recursionlimit_191070], **kwargs_191071)
    
    # SSA join for if statement (line 1399)
    module_type_store = module_type_store.join_ssa_context()
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1401, 8))
    
    # 'import pytest' statement (line 1401)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_191073 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1401, 8), 'pytest')

    if (type(import_191073) is not StypyTypeError):

        if (import_191073 != 'pyd_module'):
            __import__(import_191073)
            sys_modules_191074 = sys.modules[import_191073]
            import_module(stypy.reporting.localization.Localization(__file__, 1401, 8), 'pytest', sys_modules_191074.module_type_store, module_type_store)
        else:
            import pytest

            import_module(stypy.reporting.localization.Localization(__file__, 1401, 8), 'pytest', pytest, module_type_store)

    else:
        # Assigning a type to the variable 'pytest' (line 1401)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1401, 8), 'pytest', import_191073)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    # Assigning a Call to a Name (line 1403):
    
    # Assigning a Call to a Name (line 1403):
    
    # Call to pop(...): (line 1403)
    # Processing the call arguments (line 1403)
    unicode_191077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1403, 26), 'unicode', u'argv')
    
    # Obtaining an instance of the builtin type 'list' (line 1403)
    list_191078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1403, 34), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1403)
    
    # Processing the call keyword arguments (line 1403)
    kwargs_191079 = {}
    # Getting the type of 'kwargs' (line 1403)
    kwargs_191075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 15), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 1403)
    pop_191076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1403, 15), kwargs_191075, 'pop')
    # Calling pop(args, kwargs) (line 1403)
    pop_call_result_191080 = invoke(stypy.reporting.localization.Localization(__file__, 1403, 15), pop_191076, *[unicode_191077, list_191078], **kwargs_191079)
    
    # Assigning a type to the variable 'args' (line 1403)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1403, 8), 'args', pop_call_result_191080)
    
    # Assigning a Name to a Name (line 1404):
    
    # Assigning a Name to a Name (line 1404):
    # Getting the type of 'True' (line 1404)
    True_191081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 34), 'True')
    # Assigning a type to the variable 'provide_default_modules' (line 1404)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1404, 8), 'provide_default_modules', True_191081)
    
    # Assigning a Name to a Name (line 1405):
    
    # Assigning a Name to a Name (line 1405):
    # Getting the type of 'True' (line 1405)
    True_191082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 21), 'True')
    # Assigning a type to the variable 'use_pyargs' (line 1405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1405, 8), 'use_pyargs', True_191082)
    
    # Getting the type of 'args' (line 1406)
    args_191083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 19), 'args')
    # Testing the type of a for loop iterable (line 1406)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1406, 8), args_191083)
    # Getting the type of the for loop variable (line 1406)
    for_loop_var_191084 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1406, 8), args_191083)
    # Assigning a type to the variable 'arg' (line 1406)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1406, 8), 'arg', for_loop_var_191084)
    # SSA begins for a for statement (line 1406)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to any(...): (line 1407)
    # Processing the call arguments (line 1407)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 1407, 19, True)
    # Calculating comprehension expression
    # Getting the type of 'default_test_modules' (line 1408)
    default_test_modules_191091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 38), 'default_test_modules', False)
    comprehension_191092 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1407, 19), default_test_modules_191091)
    # Assigning a type to the variable 'module_path' (line 1407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1407, 19), 'module_path', comprehension_191092)
    
    # Call to startswith(...): (line 1407)
    # Processing the call arguments (line 1407)
    # Getting the type of 'module_path' (line 1407)
    module_path_191088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 34), 'module_path', False)
    # Processing the call keyword arguments (line 1407)
    kwargs_191089 = {}
    # Getting the type of 'arg' (line 1407)
    arg_191086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 19), 'arg', False)
    # Obtaining the member 'startswith' of a type (line 1407)
    startswith_191087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 19), arg_191086, 'startswith')
    # Calling startswith(args, kwargs) (line 1407)
    startswith_call_result_191090 = invoke(stypy.reporting.localization.Localization(__file__, 1407, 19), startswith_191087, *[module_path_191088], **kwargs_191089)
    
    list_191093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1407, 19), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1407, 19), list_191093, startswith_call_result_191090)
    # Processing the call keyword arguments (line 1407)
    kwargs_191094 = {}
    # Getting the type of 'any' (line 1407)
    any_191085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 15), 'any', False)
    # Calling any(args, kwargs) (line 1407)
    any_call_result_191095 = invoke(stypy.reporting.localization.Localization(__file__, 1407, 15), any_191085, *[list_191093], **kwargs_191094)
    
    # Testing the type of an if condition (line 1407)
    if_condition_191096 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1407, 12), any_call_result_191095)
    # Assigning a type to the variable 'if_condition_191096' (line 1407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1407, 12), 'if_condition_191096', if_condition_191096)
    # SSA begins for if statement (line 1407)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 1409):
    
    # Assigning a Name to a Name (line 1409):
    # Getting the type of 'False' (line 1409)
    False_191097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 42), 'False')
    # Assigning a type to the variable 'provide_default_modules' (line 1409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1409, 16), 'provide_default_modules', False_191097)
    # SSA join for if statement (line 1407)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to exists(...): (line 1411)
    # Processing the call arguments (line 1411)
    # Getting the type of 'arg' (line 1411)
    arg_191101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 30), 'arg', False)
    # Processing the call keyword arguments (line 1411)
    kwargs_191102 = {}
    # Getting the type of 'os' (line 1411)
    os_191098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 15), 'os', False)
    # Obtaining the member 'path' of a type (line 1411)
    path_191099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 15), os_191098, 'path')
    # Obtaining the member 'exists' of a type (line 1411)
    exists_191100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 15), path_191099, 'exists')
    # Calling exists(args, kwargs) (line 1411)
    exists_call_result_191103 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 15), exists_191100, *[arg_191101], **kwargs_191102)
    
    # Testing the type of an if condition (line 1411)
    if_condition_191104 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1411, 12), exists_call_result_191103)
    # Assigning a type to the variable 'if_condition_191104' (line 1411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1411, 12), 'if_condition_191104', if_condition_191104)
    # SSA begins for if statement (line 1411)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 1412):
    
    # Assigning a Name to a Name (line 1412):
    # Getting the type of 'False' (line 1412)
    False_191105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 42), 'False')
    # Assigning a type to the variable 'provide_default_modules' (line 1412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1412, 16), 'provide_default_modules', False_191105)
    
    # Assigning a Name to a Name (line 1413):
    
    # Assigning a Name to a Name (line 1413):
    # Getting the type of 'False' (line 1413)
    False_191106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 29), 'False')
    # Assigning a type to the variable 'use_pyargs' (line 1413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 16), 'use_pyargs', False_191106)
    # SSA join for if statement (line 1411)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'use_pyargs' (line 1415)
    use_pyargs_191107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 11), 'use_pyargs')
    # Testing the type of an if condition (line 1415)
    if_condition_191108 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1415, 8), use_pyargs_191107)
    # Assigning a type to the variable 'if_condition_191108' (line 1415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1415, 8), 'if_condition_191108', if_condition_191108)
    # SSA begins for if statement (line 1415)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'args' (line 1416)
    args_191109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 12), 'args')
    
    # Obtaining an instance of the builtin type 'list' (line 1416)
    list_191110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1416, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1416)
    # Adding element type (line 1416)
    unicode_191111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1416, 21), 'unicode', u'--pyargs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1416, 20), list_191110, unicode_191111)
    
    # Applying the binary operator '+=' (line 1416)
    result_iadd_191112 = python_operator(stypy.reporting.localization.Localization(__file__, 1416, 12), '+=', args_191109, list_191110)
    # Assigning a type to the variable 'args' (line 1416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 12), 'args', result_iadd_191112)
    
    # SSA join for if statement (line 1415)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'provide_default_modules' (line 1417)
    provide_default_modules_191113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 11), 'provide_default_modules')
    # Testing the type of an if condition (line 1417)
    if_condition_191114 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1417, 8), provide_default_modules_191113)
    # Assigning a type to the variable 'if_condition_191114' (line 1417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 8), 'if_condition_191114', if_condition_191114)
    # SSA begins for if statement (line 1417)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'args' (line 1418)
    args_191115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 12), 'args')
    # Getting the type of 'default_test_modules' (line 1418)
    default_test_modules_191116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 20), 'default_test_modules')
    # Applying the binary operator '+=' (line 1418)
    result_iadd_191117 = python_operator(stypy.reporting.localization.Localization(__file__, 1418, 12), '+=', args_191115, default_test_modules_191116)
    # Assigning a type to the variable 'args' (line 1418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1418, 12), 'args', result_iadd_191117)
    
    # SSA join for if statement (line 1417)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'coverage' (line 1420)
    coverage_191118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 11), 'coverage')
    # Testing the type of an if condition (line 1420)
    if_condition_191119 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1420, 8), coverage_191118)
    # Assigning a type to the variable 'if_condition_191119' (line 1420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1420, 8), 'if_condition_191119', if_condition_191119)
    # SSA begins for if statement (line 1420)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'args' (line 1421)
    args_191120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 12), 'args')
    
    # Obtaining an instance of the builtin type 'list' (line 1421)
    list_191121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1421, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1421)
    # Adding element type (line 1421)
    unicode_191122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1421, 21), 'unicode', u'--cov')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1421, 20), list_191121, unicode_191122)
    
    # Applying the binary operator '+=' (line 1421)
    result_iadd_191123 = python_operator(stypy.reporting.localization.Localization(__file__, 1421, 12), '+=', args_191120, list_191121)
    # Assigning a type to the variable 'args' (line 1421)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1421, 12), 'args', result_iadd_191123)
    
    # SSA join for if statement (line 1420)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'verbosity' (line 1423)
    verbosity_191124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 11), 'verbosity')
    # Testing the type of an if condition (line 1423)
    if_condition_191125 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1423, 8), verbosity_191124)
    # Assigning a type to the variable 'if_condition_191125' (line 1423)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1423, 8), 'if_condition_191125', if_condition_191125)
    # SSA begins for if statement (line 1423)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'args' (line 1424)
    args_191126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 12), 'args')
    
    # Obtaining an instance of the builtin type 'list' (line 1424)
    list_191127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1424, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1424)
    # Adding element type (line 1424)
    unicode_191128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1424, 21), 'unicode', u'-')
    unicode_191129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1424, 27), 'unicode', u'v')
    # Getting the type of 'verbosity' (line 1424)
    verbosity_191130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 33), 'verbosity')
    # Applying the binary operator '*' (line 1424)
    result_mul_191131 = python_operator(stypy.reporting.localization.Localization(__file__, 1424, 27), '*', unicode_191129, verbosity_191130)
    
    # Applying the binary operator '+' (line 1424)
    result_add_191132 = python_operator(stypy.reporting.localization.Localization(__file__, 1424, 21), '+', unicode_191128, result_mul_191131)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1424, 20), list_191127, result_add_191132)
    
    # Applying the binary operator '+=' (line 1424)
    result_iadd_191133 = python_operator(stypy.reporting.localization.Localization(__file__, 1424, 12), '+=', args_191126, list_191127)
    # Assigning a type to the variable 'args' (line 1424)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1424, 12), 'args', result_iadd_191133)
    
    # SSA join for if statement (line 1423)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1426):
    
    # Assigning a Call to a Name (line 1426):
    
    # Call to main(...): (line 1426)
    # Processing the call arguments (line 1426)
    # Getting the type of 'args' (line 1426)
    args_191136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 30), 'args', False)
    # Processing the call keyword arguments (line 1426)
    # Getting the type of 'kwargs' (line 1426)
    kwargs_191137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 38), 'kwargs', False)
    kwargs_191138 = {'kwargs_191137': kwargs_191137}
    # Getting the type of 'pytest' (line 1426)
    pytest_191134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 18), 'pytest', False)
    # Obtaining the member 'main' of a type (line 1426)
    main_191135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 18), pytest_191134, 'main')
    # Calling main(args, kwargs) (line 1426)
    main_call_result_191139 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 18), main_191135, *[args_191136], **kwargs_191138)
    
    # Assigning a type to the variable 'retcode' (line 1426)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 8), 'retcode', main_call_result_191139)
    
    # finally branch of the try-finally block (line 1397)
    
    
    
    # Call to lower(...): (line 1428)
    # Processing the call keyword arguments (line 1428)
    kwargs_191142 = {}
    # Getting the type of 'old_backend' (line 1428)
    old_backend_191140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 11), 'old_backend', False)
    # Obtaining the member 'lower' of a type (line 1428)
    lower_191141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1428, 11), old_backend_191140, 'lower')
    # Calling lower(args, kwargs) (line 1428)
    lower_call_result_191143 = invoke(stypy.reporting.localization.Localization(__file__, 1428, 11), lower_191141, *[], **kwargs_191142)
    
    unicode_191144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1428, 34), 'unicode', u'agg')
    # Applying the binary operator '!=' (line 1428)
    result_ne_191145 = python_operator(stypy.reporting.localization.Localization(__file__, 1428, 11), '!=', lower_call_result_191143, unicode_191144)
    
    # Testing the type of an if condition (line 1428)
    if_condition_191146 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1428, 8), result_ne_191145)
    # Assigning a type to the variable 'if_condition_191146' (line 1428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1428, 8), 'if_condition_191146', if_condition_191146)
    # SSA begins for if statement (line 1428)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to use(...): (line 1429)
    # Processing the call arguments (line 1429)
    # Getting the type of 'old_backend' (line 1429)
    old_backend_191148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 16), 'old_backend', False)
    # Processing the call keyword arguments (line 1429)
    # Getting the type of 'switch_backend_warn' (line 1429)
    switch_backend_warn_191149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 34), 'switch_backend_warn', False)
    keyword_191150 = switch_backend_warn_191149
    kwargs_191151 = {'warn': keyword_191150}
    # Getting the type of 'use' (line 1429)
    use_191147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 12), 'use', False)
    # Calling use(args, kwargs) (line 1429)
    use_call_result_191152 = invoke(stypy.reporting.localization.Localization(__file__, 1429, 12), use_191147, *[old_backend_191148], **kwargs_191151)
    
    # SSA join for if statement (line 1428)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'recursionlimit' (line 1430)
    recursionlimit_191153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 11), 'recursionlimit')
    # Testing the type of an if condition (line 1430)
    if_condition_191154 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1430, 8), recursionlimit_191153)
    # Assigning a type to the variable 'if_condition_191154' (line 1430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1430, 8), 'if_condition_191154', if_condition_191154)
    # SSA begins for if statement (line 1430)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to setrecursionlimit(...): (line 1431)
    # Processing the call arguments (line 1431)
    # Getting the type of 'old_recursionlimit' (line 1431)
    old_recursionlimit_191157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 34), 'old_recursionlimit', False)
    # Processing the call keyword arguments (line 1431)
    kwargs_191158 = {}
    # Getting the type of 'sys' (line 1431)
    sys_191155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 12), 'sys', False)
    # Obtaining the member 'setrecursionlimit' of a type (line 1431)
    setrecursionlimit_191156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 12), sys_191155, 'setrecursionlimit')
    # Calling setrecursionlimit(args, kwargs) (line 1431)
    setrecursionlimit_call_result_191159 = invoke(stypy.reporting.localization.Localization(__file__, 1431, 12), setrecursionlimit_191156, *[old_recursionlimit_191157], **kwargs_191158)
    
    # SSA join for if statement (line 1430)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'retcode' (line 1433)
    retcode_191160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 11), 'retcode')
    # Assigning a type to the variable 'stypy_return_type' (line 1433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1433, 4), 'stypy_return_type', retcode_191160)
    
    # ################# End of 'test(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'test' in the type store
    # Getting the type of 'stypy_return_type' (line 1388)
    stypy_return_type_191161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_191161)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'test'
    return stypy_return_type_191161

# Assigning a type to the variable 'test' (line 1388)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1388, 0), 'test', test)

# Assigning a Name to a Attribute (line 1436):

# Assigning a Name to a Attribute (line 1436):
# Getting the type of 'False' (line 1436)
False_191162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 16), 'False')
# Getting the type of 'test' (line 1436)
test_191163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 0), 'test')
# Setting the type of the member '__test__' of a type (line 1436)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1436, 0), test_191163, '__test__', False_191162)

@norecursion
def _replacer(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_replacer'
    module_type_store = module_type_store.open_function_context('_replacer', 1439, 0, False)
    
    # Passed parameters checking function
    _replacer.stypy_localization = localization
    _replacer.stypy_type_of_self = None
    _replacer.stypy_type_store = module_type_store
    _replacer.stypy_function_name = '_replacer'
    _replacer.stypy_param_names_list = ['data', 'key']
    _replacer.stypy_varargs_param_name = None
    _replacer.stypy_kwargs_param_name = None
    _replacer.stypy_call_defaults = defaults
    _replacer.stypy_call_varargs = varargs
    _replacer.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_replacer', ['data', 'key'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_replacer', localization, ['data', 'key'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_replacer(...)' code ##################

    unicode_191164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1442, (-1)), 'unicode', u'Either returns data[key] or passes data back. Also\n    converts input data to a sequence as needed.\n    ')
    
    
    
    # Call to isinstance(...): (line 1444)
    # Processing the call arguments (line 1444)
    # Getting the type of 'key' (line 1444)
    key_191166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 22), 'key', False)
    # Getting the type of 'six' (line 1444)
    six_191167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 27), 'six', False)
    # Obtaining the member 'string_types' of a type (line 1444)
    string_types_191168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 27), six_191167, 'string_types')
    # Processing the call keyword arguments (line 1444)
    kwargs_191169 = {}
    # Getting the type of 'isinstance' (line 1444)
    isinstance_191165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1444)
    isinstance_call_result_191170 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 11), isinstance_191165, *[key_191166, string_types_191168], **kwargs_191169)
    
    # Applying the 'not' unary operator (line 1444)
    result_not__191171 = python_operator(stypy.reporting.localization.Localization(__file__, 1444, 7), 'not', isinstance_call_result_191170)
    
    # Testing the type of an if condition (line 1444)
    if_condition_191172 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1444, 4), result_not__191171)
    # Assigning a type to the variable 'if_condition_191172' (line 1444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 4), 'if_condition_191172', if_condition_191172)
    # SSA begins for if statement (line 1444)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'key' (line 1445)
    key_191173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 16), 'key')
    # Assigning a type to the variable 'stypy_return_type' (line 1445)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1445, 8), 'stypy_return_type', key_191173)
    # SSA join for if statement (line 1444)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 1447)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to sanitize_sequence(...): (line 1448)
    # Processing the call arguments (line 1448)
    
    # Obtaining the type of the subscript
    # Getting the type of 'key' (line 1448)
    key_191175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 38), 'key', False)
    # Getting the type of 'data' (line 1448)
    data_191176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 33), 'data', False)
    # Obtaining the member '__getitem__' of a type (line 1448)
    getitem___191177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1448, 33), data_191176, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1448)
    subscript_call_result_191178 = invoke(stypy.reporting.localization.Localization(__file__, 1448, 33), getitem___191177, key_191175)
    
    # Processing the call keyword arguments (line 1448)
    kwargs_191179 = {}
    # Getting the type of 'sanitize_sequence' (line 1448)
    sanitize_sequence_191174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 15), 'sanitize_sequence', False)
    # Calling sanitize_sequence(args, kwargs) (line 1448)
    sanitize_sequence_call_result_191180 = invoke(stypy.reporting.localization.Localization(__file__, 1448, 15), sanitize_sequence_191174, *[subscript_call_result_191178], **kwargs_191179)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1448)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1448, 8), 'stypy_return_type', sanitize_sequence_call_result_191180)
    # SSA branch for the except part of a try statement (line 1447)
    # SSA branch for the except 'KeyError' branch of a try statement (line 1447)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'key' (line 1451)
    key_191181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 15), 'key')
    # Assigning a type to the variable 'stypy_return_type' (line 1451)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1451, 8), 'stypy_return_type', key_191181)
    # SSA join for try-except statement (line 1447)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_replacer(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_replacer' in the type store
    # Getting the type of 'stypy_return_type' (line 1439)
    stypy_return_type_191182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_191182)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_replacer'
    return stypy_return_type_191182

# Assigning a type to the variable '_replacer' (line 1439)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1439, 0), '_replacer', _replacer)

# Assigning a Str to a Name (line 1454):

# Assigning a Str to a Name (line 1454):
unicode_191183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1462, (-1)), 'unicode', u'\n\n.. note::\n    In addition to the above described arguments, this function can take a\n    **data** keyword argument. If such a **data** argument is given, the\n    following arguments are replaced by **data[<arg>]**:\n\n    {replaced}\n')
# Assigning a type to the variable '_DATA_DOC_APPENDIX' (line 1454)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1454, 0), '_DATA_DOC_APPENDIX', unicode_191183)

@norecursion
def _preprocess_data(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1465)
    None_191184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 35), 'None')
    # Getting the type of 'False' (line 1465)
    False_191185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 58), 'False')
    # Getting the type of 'None' (line 1466)
    None_191186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 33), 'None')
    # Getting the type of 'None' (line 1466)
    None_191187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 66), 'None')
    defaults = [None_191184, False_191185, None_191186, None_191187]
    # Create a new context for function '_preprocess_data'
    module_type_store = module_type_store.open_function_context('_preprocess_data', 1465, 0, False)
    
    # Passed parameters checking function
    _preprocess_data.stypy_localization = localization
    _preprocess_data.stypy_type_of_self = None
    _preprocess_data.stypy_type_store = module_type_store
    _preprocess_data.stypy_function_name = '_preprocess_data'
    _preprocess_data.stypy_param_names_list = ['replace_names', 'replace_all_args', 'label_namer', 'positional_parameter_names']
    _preprocess_data.stypy_varargs_param_name = None
    _preprocess_data.stypy_kwargs_param_name = None
    _preprocess_data.stypy_call_defaults = defaults
    _preprocess_data.stypy_call_varargs = varargs
    _preprocess_data.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_preprocess_data', ['replace_names', 'replace_all_args', 'label_namer', 'positional_parameter_names'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_preprocess_data', localization, ['replace_names', 'replace_all_args', 'label_namer', 'positional_parameter_names'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_preprocess_data(...)' code ##################

    unicode_191188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1501, (-1)), 'unicode', u"\n    A decorator to add a 'data' kwarg to any a function.  The signature\n    of the input function must include the ax argument at the first position ::\n\n       def foo(ax, *args, **kwargs)\n\n    so this is suitable for use with Axes methods.\n\n    Parameters\n    ----------\n    replace_names : list of strings, optional, default: None\n        The list of parameter names which arguments should be replaced by\n        `data[name]`. If None, all arguments are replaced if they are\n        included in `data`.\n    replace_all_args : bool, default: False\n        If True, all arguments in *args get replaced, even if they are not\n        in replace_names.\n    label_namer : string, optional, default: None\n        The name of the parameter which argument should be used as label, if\n        label is not set. If None, the label keyword argument is not set.\n    positional_parameter_names : list of strings or callable, optional\n        The full list of positional parameter names (excluding an explicit\n        `ax`/'self' argument at the first place and including all possible\n        positional parameter in `*args`), in the right order. Can also include\n        all other keyword parameter. Only needed if the wrapped function does\n        contain `*args` and (replace_names is not None or replace_all_args is\n        False). If it is a callable, it will be called with the actual\n        tuple of *args and the data and should return a list like\n        above.\n        NOTE: callables should only be used when the names and order of *args\n        can only be determined at runtime. Please use list of names\n        when the order and names of *args is clear before runtime!\n\n    .. note:: decorator also converts MappingView input data to list.\n    ")
    
    # Type idiom detected: calculating its left and rigth part (line 1502)
    # Getting the type of 'replace_names' (line 1502)
    replace_names_191189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 4), 'replace_names')
    # Getting the type of 'None' (line 1502)
    None_191190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 28), 'None')
    
    (may_be_191191, more_types_in_union_191192) = may_not_be_none(replace_names_191189, None_191190)

    if may_be_191191:

        if more_types_in_union_191192:
            # Runtime conditional SSA (line 1502)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1503):
        
        # Assigning a Call to a Name (line 1503):
        
        # Call to set(...): (line 1503)
        # Processing the call arguments (line 1503)
        # Getting the type of 'replace_names' (line 1503)
        replace_names_191194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 28), 'replace_names', False)
        # Processing the call keyword arguments (line 1503)
        kwargs_191195 = {}
        # Getting the type of 'set' (line 1503)
        set_191193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 24), 'set', False)
        # Calling set(args, kwargs) (line 1503)
        set_call_result_191196 = invoke(stypy.reporting.localization.Localization(__file__, 1503, 24), set_191193, *[replace_names_191194], **kwargs_191195)
        
        # Assigning a type to the variable 'replace_names' (line 1503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1503, 8), 'replace_names', set_call_result_191196)

        if more_types_in_union_191192:
            # SSA join for if statement (line 1502)
            module_type_store = module_type_store.join_ssa_context()


    

    @norecursion
    def param(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'param'
        module_type_store = module_type_store.open_function_context('param', 1505, 4, False)
        
        # Passed parameters checking function
        param.stypy_localization = localization
        param.stypy_type_of_self = None
        param.stypy_type_store = module_type_store
        param.stypy_function_name = 'param'
        param.stypy_param_names_list = ['func']
        param.stypy_varargs_param_name = None
        param.stypy_kwargs_param_name = None
        param.stypy_call_defaults = defaults
        param.stypy_call_varargs = varargs
        param.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'param', ['func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'param', localization, ['func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'param(...)' code ##################

        
        # Assigning a Name to a Name (line 1506):
        
        # Assigning a Name to a Name (line 1506):
        # Getting the type of 'None' (line 1506)
        None_191197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 18), 'None')
        # Assigning a type to the variable 'new_sig' (line 1506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1506, 8), 'new_sig', None_191197)
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Attribute to a Name (line 1508):
        # Getting the type of 'six' (line 1508)
        six_191198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 52), 'six')
        # Obtaining the member 'PY3' of a type (line 1508)
        PY3_191199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1508, 52), six_191198, 'PY3')
        # Assigning a type to the variable 'python_has_wrapped' (line 1508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1508, 31), 'python_has_wrapped', PY3_191199)
        
        # Assigning a Name to a Name (line 1508):
        # Getting the type of 'python_has_wrapped' (line 1508)
        python_has_wrapped_191200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 31), 'python_has_wrapped')
        # Assigning a type to the variable 'python_has_signature' (line 1508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1508, 8), 'python_has_signature', python_has_wrapped_191200)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'python_has_signature' (line 1512)
        python_has_signature_191201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 15), 'python_has_signature')
        # Applying the 'not' unary operator (line 1512)
        result_not__191202 = python_operator(stypy.reporting.localization.Localization(__file__, 1512, 11), 'not', python_has_signature_191201)
        
        
        unicode_191203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1512, 40), 'unicode', u'IPython')
        # Getting the type of 'sys' (line 1512)
        sys_191204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 53), 'sys')
        # Obtaining the member 'modules' of a type (line 1512)
        modules_191205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1512, 53), sys_191204, 'modules')
        # Applying the binary operator 'in' (line 1512)
        result_contains_191206 = python_operator(stypy.reporting.localization.Localization(__file__, 1512, 40), 'in', unicode_191203, modules_191205)
        
        # Applying the binary operator 'and' (line 1512)
        result_and_keyword_191207 = python_operator(stypy.reporting.localization.Localization(__file__, 1512, 11), 'and', result_not__191202, result_contains_191206)
        
        # Testing the type of an if condition (line 1512)
        if_condition_191208 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1512, 8), result_and_keyword_191207)
        # Assigning a type to the variable 'if_condition_191208' (line 1512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1512, 8), 'if_condition_191208', if_condition_191208)
        # SSA begins for if statement (line 1512)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 1513)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1514, 16))
        
        # 'import IPython.utils.signatures' statement (line 1514)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_191209 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1514, 16), 'IPython.utils.signatures')

        if (type(import_191209) is not StypyTypeError):

            if (import_191209 != 'pyd_module'):
                __import__(import_191209)
                sys_modules_191210 = sys.modules[import_191209]
                import_module(stypy.reporting.localization.Localization(__file__, 1514, 16), 'IPython.utils.signatures', sys_modules_191210.module_type_store, module_type_store)
            else:
                import IPython.utils.signatures

                import_module(stypy.reporting.localization.Localization(__file__, 1514, 16), 'IPython.utils.signatures', IPython.utils.signatures, module_type_store)

        else:
            # Assigning a type to the variable 'IPython.utils.signatures' (line 1514)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1514, 16), 'IPython.utils.signatures', import_191209)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Assigning a Attribute to a Name (line 1515):
        
        # Assigning a Attribute to a Name (line 1515):
        # Getting the type of 'IPython' (line 1515)
        IPython_191211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 28), 'IPython')
        # Obtaining the member 'utils' of a type (line 1515)
        utils_191212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1515, 28), IPython_191211, 'utils')
        # Obtaining the member 'signatures' of a type (line 1515)
        signatures_191213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1515, 28), utils_191212, 'signatures')
        # Obtaining the member 'signature' of a type (line 1515)
        signature_191214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1515, 28), signatures_191213, 'signature')
        # Assigning a type to the variable 'signature' (line 1515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1515, 16), 'signature', signature_191214)
        
        # Assigning a Attribute to a Name (line 1516):
        
        # Assigning a Attribute to a Name (line 1516):
        # Getting the type of 'IPython' (line 1516)
        IPython_191215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 28), 'IPython')
        # Obtaining the member 'utils' of a type (line 1516)
        utils_191216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1516, 28), IPython_191215, 'utils')
        # Obtaining the member 'signatures' of a type (line 1516)
        signatures_191217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1516, 28), utils_191216, 'signatures')
        # Obtaining the member 'Parameter' of a type (line 1516)
        Parameter_191218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1516, 28), signatures_191217, 'Parameter')
        # Assigning a type to the variable 'Parameter' (line 1516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1516, 16), 'Parameter', Parameter_191218)
        # SSA branch for the except part of a try statement (line 1513)
        # SSA branch for the except 'ImportError' branch of a try statement (line 1513)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the else branch of a try statement (line 1513)
        module_type_store.open_ssa_branch('except else')
        
        # Assigning a Name to a Name (line 1520):
        
        # Assigning a Name to a Name (line 1520):
        # Getting the type of 'True' (line 1520)
        True_191219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 39), 'True')
        # Assigning a type to the variable 'python_has_signature' (line 1520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1520, 16), 'python_has_signature', True_191219)
        # SSA join for try-except statement (line 1513)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1512)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'python_has_signature' (line 1522)
        python_has_signature_191220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 15), 'python_has_signature')
        # Testing the type of an if condition (line 1522)
        if_condition_191221 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1522, 12), python_has_signature_191220)
        # Assigning a type to the variable 'if_condition_191221' (line 1522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1522, 12), 'if_condition_191221', if_condition_191221)
        # SSA begins for if statement (line 1522)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1523):
        
        # Assigning a Attribute to a Name (line 1523):
        # Getting the type of 'inspect' (line 1523)
        inspect_191222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 28), 'inspect')
        # Obtaining the member 'signature' of a type (line 1523)
        signature_191223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1523, 28), inspect_191222, 'signature')
        # Assigning a type to the variable 'signature' (line 1523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1523, 16), 'signature', signature_191223)
        
        # Assigning a Attribute to a Name (line 1524):
        
        # Assigning a Attribute to a Name (line 1524):
        # Getting the type of 'inspect' (line 1524)
        inspect_191224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 28), 'inspect')
        # Obtaining the member 'Parameter' of a type (line 1524)
        Parameter_191225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1524, 28), inspect_191224, 'Parameter')
        # Assigning a type to the variable 'Parameter' (line 1524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1524, 16), 'Parameter', Parameter_191225)
        # SSA join for if statement (line 1522)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1512)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'python_has_signature' (line 1526)
        python_has_signature_191226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 15), 'python_has_signature')
        # Applying the 'not' unary operator (line 1526)
        result_not__191227 = python_operator(stypy.reporting.localization.Localization(__file__, 1526, 11), 'not', python_has_signature_191226)
        
        # Testing the type of an if condition (line 1526)
        if_condition_191228 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1526, 8), result_not__191227)
        # Assigning a type to the variable 'if_condition_191228' (line 1526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1526, 8), 'if_condition_191228', if_condition_191228)
        # SSA begins for if statement (line 1526)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1527):
        
        # Assigning a Call to a Name (line 1527):
        
        # Call to getargspec(...): (line 1527)
        # Processing the call arguments (line 1527)
        # Getting the type of 'func' (line 1527)
        func_191231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 42), 'func', False)
        # Processing the call keyword arguments (line 1527)
        kwargs_191232 = {}
        # Getting the type of 'inspect' (line 1527)
        inspect_191229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 23), 'inspect', False)
        # Obtaining the member 'getargspec' of a type (line 1527)
        getargspec_191230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 23), inspect_191229, 'getargspec')
        # Calling getargspec(args, kwargs) (line 1527)
        getargspec_call_result_191233 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 23), getargspec_191230, *[func_191231], **kwargs_191232)
        
        # Assigning a type to the variable 'arg_spec' (line 1527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'arg_spec', getargspec_call_result_191233)
        
        # Assigning a Attribute to a Name (line 1528):
        
        # Assigning a Attribute to a Name (line 1528):
        # Getting the type of 'arg_spec' (line 1528)
        arg_spec_191234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 25), 'arg_spec')
        # Obtaining the member 'args' of a type (line 1528)
        args_191235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 25), arg_spec_191234, 'args')
        # Assigning a type to the variable '_arg_names' (line 1528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1528, 12), '_arg_names', args_191235)
        
        # Assigning a Compare to a Name (line 1529):
        
        # Assigning a Compare to a Name (line 1529):
        
        # Getting the type of 'arg_spec' (line 1529)
        arg_spec_191236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 27), 'arg_spec')
        # Obtaining the member 'varargs' of a type (line 1529)
        varargs_191237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 27), arg_spec_191236, 'varargs')
        # Getting the type of 'None' (line 1529)
        None_191238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 51), 'None')
        # Applying the binary operator 'isnot' (line 1529)
        result_is_not_191239 = python_operator(stypy.reporting.localization.Localization(__file__, 1529, 27), 'isnot', varargs_191237, None_191238)
        
        # Assigning a type to the variable '_has_varargs' (line 1529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 12), '_has_varargs', result_is_not_191239)
        
        # Assigning a Compare to a Name (line 1530):
        
        # Assigning a Compare to a Name (line 1530):
        
        # Getting the type of 'arg_spec' (line 1530)
        arg_spec_191240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 29), 'arg_spec')
        # Obtaining the member 'keywords' of a type (line 1530)
        keywords_191241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1530, 29), arg_spec_191240, 'keywords')
        # Getting the type of 'None' (line 1530)
        None_191242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 54), 'None')
        # Applying the binary operator 'isnot' (line 1530)
        result_is_not_191243 = python_operator(stypy.reporting.localization.Localization(__file__, 1530, 29), 'isnot', keywords_191241, None_191242)
        
        # Assigning a type to the variable '_has_varkwargs' (line 1530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1530, 12), '_has_varkwargs', result_is_not_191243)
        # SSA branch for the else part of an if statement (line 1526)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1532):
        
        # Assigning a Call to a Name (line 1532):
        
        # Call to signature(...): (line 1532)
        # Processing the call arguments (line 1532)
        # Getting the type of 'func' (line 1532)
        func_191245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 28), 'func', False)
        # Processing the call keyword arguments (line 1532)
        kwargs_191246 = {}
        # Getting the type of 'signature' (line 1532)
        signature_191244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 18), 'signature', False)
        # Calling signature(args, kwargs) (line 1532)
        signature_call_result_191247 = invoke(stypy.reporting.localization.Localization(__file__, 1532, 18), signature_191244, *[func_191245], **kwargs_191246)
        
        # Assigning a type to the variable 'sig' (line 1532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 12), 'sig', signature_call_result_191247)
        
        # Assigning a Name to a Name (line 1533):
        
        # Assigning a Name to a Name (line 1533):
        # Getting the type of 'False' (line 1533)
        False_191248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 27), 'False')
        # Assigning a type to the variable '_has_varargs' (line 1533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 12), '_has_varargs', False_191248)
        
        # Assigning a Name to a Name (line 1534):
        
        # Assigning a Name to a Name (line 1534):
        # Getting the type of 'False' (line 1534)
        False_191249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 29), 'False')
        # Assigning a type to the variable '_has_varkwargs' (line 1534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1534, 12), '_has_varkwargs', False_191249)
        
        # Assigning a List to a Name (line 1535):
        
        # Assigning a List to a Name (line 1535):
        
        # Obtaining an instance of the builtin type 'list' (line 1535)
        list_191250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1535, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1535)
        
        # Assigning a type to the variable '_arg_names' (line 1535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 12), '_arg_names', list_191250)
        
        # Assigning a Call to a Name (line 1536):
        
        # Assigning a Call to a Name (line 1536):
        
        # Call to list(...): (line 1536)
        # Processing the call arguments (line 1536)
        
        # Call to values(...): (line 1536)
        # Processing the call keyword arguments (line 1536)
        kwargs_191255 = {}
        # Getting the type of 'sig' (line 1536)
        sig_191252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 26), 'sig', False)
        # Obtaining the member 'parameters' of a type (line 1536)
        parameters_191253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1536, 26), sig_191252, 'parameters')
        # Obtaining the member 'values' of a type (line 1536)
        values_191254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1536, 26), parameters_191253, 'values')
        # Calling values(args, kwargs) (line 1536)
        values_call_result_191256 = invoke(stypy.reporting.localization.Localization(__file__, 1536, 26), values_191254, *[], **kwargs_191255)
        
        # Processing the call keyword arguments (line 1536)
        kwargs_191257 = {}
        # Getting the type of 'list' (line 1536)
        list_191251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 21), 'list', False)
        # Calling list(args, kwargs) (line 1536)
        list_call_result_191258 = invoke(stypy.reporting.localization.Localization(__file__, 1536, 21), list_191251, *[values_call_result_191256], **kwargs_191257)
        
        # Assigning a type to the variable 'params' (line 1536)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1536, 12), 'params', list_call_result_191258)
        
        # Getting the type of 'params' (line 1537)
        params_191259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 21), 'params')
        # Testing the type of a for loop iterable (line 1537)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1537, 12), params_191259)
        # Getting the type of the for loop variable (line 1537)
        for_loop_var_191260 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1537, 12), params_191259)
        # Assigning a type to the variable 'p' (line 1537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 12), 'p', for_loop_var_191260)
        # SSA begins for a for statement (line 1537)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'p' (line 1538)
        p_191261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 19), 'p')
        # Obtaining the member 'kind' of a type (line 1538)
        kind_191262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 19), p_191261, 'kind')
        # Getting the type of 'Parameter' (line 1538)
        Parameter_191263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 29), 'Parameter')
        # Obtaining the member 'VAR_POSITIONAL' of a type (line 1538)
        VAR_POSITIONAL_191264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 29), Parameter_191263, 'VAR_POSITIONAL')
        # Applying the binary operator 'is' (line 1538)
        result_is__191265 = python_operator(stypy.reporting.localization.Localization(__file__, 1538, 19), 'is', kind_191262, VAR_POSITIONAL_191264)
        
        # Testing the type of an if condition (line 1538)
        if_condition_191266 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1538, 16), result_is__191265)
        # Assigning a type to the variable 'if_condition_191266' (line 1538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 16), 'if_condition_191266', if_condition_191266)
        # SSA begins for if statement (line 1538)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1539):
        
        # Assigning a Name to a Name (line 1539):
        # Getting the type of 'True' (line 1539)
        True_191267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 35), 'True')
        # Assigning a type to the variable '_has_varargs' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 20), '_has_varargs', True_191267)
        # SSA branch for the else part of an if statement (line 1538)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'p' (line 1540)
        p_191268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 21), 'p')
        # Obtaining the member 'kind' of a type (line 1540)
        kind_191269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1540, 21), p_191268, 'kind')
        # Getting the type of 'Parameter' (line 1540)
        Parameter_191270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 31), 'Parameter')
        # Obtaining the member 'VAR_KEYWORD' of a type (line 1540)
        VAR_KEYWORD_191271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1540, 31), Parameter_191270, 'VAR_KEYWORD')
        # Applying the binary operator 'is' (line 1540)
        result_is__191272 = python_operator(stypy.reporting.localization.Localization(__file__, 1540, 21), 'is', kind_191269, VAR_KEYWORD_191271)
        
        # Testing the type of an if condition (line 1540)
        if_condition_191273 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1540, 21), result_is__191272)
        # Assigning a type to the variable 'if_condition_191273' (line 1540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 21), 'if_condition_191273', if_condition_191273)
        # SSA begins for if statement (line 1540)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1541):
        
        # Assigning a Name to a Name (line 1541):
        # Getting the type of 'True' (line 1541)
        True_191274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 37), 'True')
        # Assigning a type to the variable '_has_varkwargs' (line 1541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1541, 20), '_has_varkwargs', True_191274)
        # SSA branch for the else part of an if statement (line 1540)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 1543)
        # Processing the call arguments (line 1543)
        # Getting the type of 'p' (line 1543)
        p_191277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 38), 'p', False)
        # Obtaining the member 'name' of a type (line 1543)
        name_191278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 38), p_191277, 'name')
        # Processing the call keyword arguments (line 1543)
        kwargs_191279 = {}
        # Getting the type of '_arg_names' (line 1543)
        _arg_names_191275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 20), '_arg_names', False)
        # Obtaining the member 'append' of a type (line 1543)
        append_191276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 20), _arg_names_191275, 'append')
        # Calling append(args, kwargs) (line 1543)
        append_call_result_191280 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 20), append_191276, *[name_191278], **kwargs_191279)
        
        # SSA join for if statement (line 1540)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1538)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1544):
        
        # Assigning a Call to a Name (line 1544):
        
        # Call to Parameter(...): (line 1544)
        # Processing the call arguments (line 1544)
        unicode_191282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1544, 35), 'unicode', u'data')
        # Getting the type of 'Parameter' (line 1545)
        Parameter_191283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 35), 'Parameter', False)
        # Obtaining the member 'KEYWORD_ONLY' of a type (line 1545)
        KEYWORD_ONLY_191284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1545, 35), Parameter_191283, 'KEYWORD_ONLY')
        # Processing the call keyword arguments (line 1544)
        # Getting the type of 'None' (line 1546)
        None_191285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 43), 'None', False)
        keyword_191286 = None_191285
        kwargs_191287 = {'default': keyword_191286}
        # Getting the type of 'Parameter' (line 1544)
        Parameter_191281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 25), 'Parameter', False)
        # Calling Parameter(args, kwargs) (line 1544)
        Parameter_call_result_191288 = invoke(stypy.reporting.localization.Localization(__file__, 1544, 25), Parameter_191281, *[unicode_191282, KEYWORD_ONLY_191284], **kwargs_191287)
        
        # Assigning a type to the variable 'data_param' (line 1544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1544, 12), 'data_param', Parameter_call_result_191288)
        
        # Getting the type of '_has_varkwargs' (line 1547)
        _has_varkwargs_191289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 15), '_has_varkwargs')
        # Testing the type of an if condition (line 1547)
        if_condition_191290 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1547, 12), _has_varkwargs_191289)
        # Assigning a type to the variable 'if_condition_191290' (line 1547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1547, 12), 'if_condition_191290', if_condition_191290)
        # SSA begins for if statement (line 1547)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to insert(...): (line 1548)
        # Processing the call arguments (line 1548)
        int_191293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1548, 30), 'int')
        # Getting the type of 'data_param' (line 1548)
        data_param_191294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 34), 'data_param', False)
        # Processing the call keyword arguments (line 1548)
        kwargs_191295 = {}
        # Getting the type of 'params' (line 1548)
        params_191291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 16), 'params', False)
        # Obtaining the member 'insert' of a type (line 1548)
        insert_191292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1548, 16), params_191291, 'insert')
        # Calling insert(args, kwargs) (line 1548)
        insert_call_result_191296 = invoke(stypy.reporting.localization.Localization(__file__, 1548, 16), insert_191292, *[int_191293, data_param_191294], **kwargs_191295)
        
        # SSA branch for the else part of an if statement (line 1547)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 1550)
        # Processing the call arguments (line 1550)
        # Getting the type of 'data_param' (line 1550)
        data_param_191299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 30), 'data_param', False)
        # Processing the call keyword arguments (line 1550)
        kwargs_191300 = {}
        # Getting the type of 'params' (line 1550)
        params_191297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 16), 'params', False)
        # Obtaining the member 'append' of a type (line 1550)
        append_191298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1550, 16), params_191297, 'append')
        # Calling append(args, kwargs) (line 1550)
        append_call_result_191301 = invoke(stypy.reporting.localization.Localization(__file__, 1550, 16), append_191298, *[data_param_191299], **kwargs_191300)
        
        # SSA join for if statement (line 1547)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1551):
        
        # Assigning a Call to a Name (line 1551):
        
        # Call to replace(...): (line 1551)
        # Processing the call keyword arguments (line 1551)
        # Getting the type of 'params' (line 1551)
        params_191304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 45), 'params', False)
        keyword_191305 = params_191304
        kwargs_191306 = {'parameters': keyword_191305}
        # Getting the type of 'sig' (line 1551)
        sig_191302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 22), 'sig', False)
        # Obtaining the member 'replace' of a type (line 1551)
        replace_191303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 22), sig_191302, 'replace')
        # Calling replace(args, kwargs) (line 1551)
        replace_call_result_191307 = invoke(stypy.reporting.localization.Localization(__file__, 1551, 22), replace_191303, *[], **kwargs_191306)
        
        # Assigning a type to the variable 'new_sig' (line 1551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1551, 12), 'new_sig', replace_call_result_191307)
        # SSA join for if statement (line 1526)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 1553):
        
        # Assigning a Name to a Name (line 1553):
        # Getting the type of 'False' (line 1553)
        False_191308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 31), 'False')
        # Assigning a type to the variable 'arg_names_at_runtime' (line 1553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1553, 8), 'arg_names_at_runtime', False_191308)
        
        
        # Getting the type of '_has_varargs' (line 1558)
        _has_varargs_191309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 15), '_has_varargs')
        # Applying the 'not' unary operator (line 1558)
        result_not__191310 = python_operator(stypy.reporting.localization.Localization(__file__, 1558, 11), 'not', _has_varargs_191309)
        
        # Testing the type of an if condition (line 1558)
        if_condition_191311 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1558, 8), result_not__191310)
        # Assigning a type to the variable 'if_condition_191311' (line 1558)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1558, 8), 'if_condition_191311', if_condition_191311)
        # SSA begins for if statement (line 1558)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1561):
        
        # Assigning a Subscript to a Name (line 1561):
        
        # Obtaining the type of the subscript
        int_191312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1561, 35), 'int')
        slice_191313 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1561, 24), int_191312, None, None)
        # Getting the type of '_arg_names' (line 1561)
        _arg_names_191314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 24), '_arg_names')
        # Obtaining the member '__getitem__' of a type (line 1561)
        getitem___191315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1561, 24), _arg_names_191314, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1561)
        subscript_call_result_191316 = invoke(stypy.reporting.localization.Localization(__file__, 1561, 24), getitem___191315, slice_191313)
        
        # Assigning a type to the variable 'arg_names' (line 1561)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1561, 12), 'arg_names', subscript_call_result_191316)
        # SSA branch for the else part of an if statement (line 1558)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 1565)
        # Getting the type of 'replace_names' (line 1565)
        replace_names_191317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 15), 'replace_names')
        # Getting the type of 'None' (line 1565)
        None_191318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 32), 'None')
        
        (may_be_191319, more_types_in_union_191320) = may_be_none(replace_names_191317, None_191318)

        if may_be_191319:

            if more_types_in_union_191320:
                # Runtime conditional SSA (line 1565)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 1567):
            
            # Assigning a Name to a Name (line 1567):
            # Getting the type of 'None' (line 1567)
            None_191321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 28), 'None')
            # Assigning a type to the variable 'arg_names' (line 1567)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1567, 16), 'arg_names', None_191321)

            if more_types_in_union_191320:
                # Runtime conditional SSA for else branch (line 1565)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_191319) or more_types_in_union_191320):
            
            
            
            # Call to len(...): (line 1568)
            # Processing the call arguments (line 1568)
            # Getting the type of 'replace_names' (line 1568)
            replace_names_191323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 21), 'replace_names', False)
            # Processing the call keyword arguments (line 1568)
            kwargs_191324 = {}
            # Getting the type of 'len' (line 1568)
            len_191322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 17), 'len', False)
            # Calling len(args, kwargs) (line 1568)
            len_call_result_191325 = invoke(stypy.reporting.localization.Localization(__file__, 1568, 17), len_191322, *[replace_names_191323], **kwargs_191324)
            
            int_191326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1568, 39), 'int')
            # Applying the binary operator '==' (line 1568)
            result_eq_191327 = python_operator(stypy.reporting.localization.Localization(__file__, 1568, 17), '==', len_call_result_191325, int_191326)
            
            # Testing the type of an if condition (line 1568)
            if_condition_191328 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1568, 17), result_eq_191327)
            # Assigning a type to the variable 'if_condition_191328' (line 1568)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1568, 17), 'if_condition_191328', if_condition_191328)
            # SSA begins for if statement (line 1568)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a List to a Name (line 1570):
            
            # Assigning a List to a Name (line 1570):
            
            # Obtaining an instance of the builtin type 'list' (line 1570)
            list_191329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1570, 28), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1570)
            
            # Assigning a type to the variable 'arg_names' (line 1570)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1570, 16), 'arg_names', list_191329)
            # SSA branch for the else part of an if statement (line 1568)
            module_type_store.open_ssa_branch('else')
            
            
            # Evaluating a boolean operation
            
            
            # Call to len(...): (line 1571)
            # Processing the call arguments (line 1571)
            # Getting the type of '_arg_names' (line 1571)
            _arg_names_191331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 21), '_arg_names', False)
            # Processing the call keyword arguments (line 1571)
            kwargs_191332 = {}
            # Getting the type of 'len' (line 1571)
            len_191330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 17), 'len', False)
            # Calling len(args, kwargs) (line 1571)
            len_call_result_191333 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 17), len_191330, *[_arg_names_191331], **kwargs_191332)
            
            int_191334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 35), 'int')
            # Applying the binary operator '>' (line 1571)
            result_gt_191335 = python_operator(stypy.reporting.localization.Localization(__file__, 1571, 17), '>', len_call_result_191333, int_191334)
            
            
            # Getting the type of 'positional_parameter_names' (line 1571)
            positional_parameter_names_191336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 42), 'positional_parameter_names')
            # Getting the type of 'None' (line 1571)
            None_191337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 72), 'None')
            # Applying the binary operator 'is' (line 1571)
            result_is__191338 = python_operator(stypy.reporting.localization.Localization(__file__, 1571, 42), 'is', positional_parameter_names_191336, None_191337)
            
            # Applying the binary operator 'and' (line 1571)
            result_and_keyword_191339 = python_operator(stypy.reporting.localization.Localization(__file__, 1571, 17), 'and', result_gt_191335, result_is__191338)
            
            # Testing the type of an if condition (line 1571)
            if_condition_191340 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1571, 17), result_and_keyword_191339)
            # Assigning a type to the variable 'if_condition_191340' (line 1571)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 17), 'if_condition_191340', if_condition_191340)
            # SSA begins for if statement (line 1571)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            
            # Call to len(...): (line 1573)
            # Processing the call arguments (line 1573)
            # Getting the type of 'replace_names' (line 1573)
            replace_names_191342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 23), 'replace_names', False)
            
            # Call to set(...): (line 1573)
            # Processing the call arguments (line 1573)
            
            # Obtaining the type of the subscript
            int_191344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1573, 54), 'int')
            slice_191345 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1573, 43), int_191344, None, None)
            # Getting the type of '_arg_names' (line 1573)
            _arg_names_191346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 43), '_arg_names', False)
            # Obtaining the member '__getitem__' of a type (line 1573)
            getitem___191347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1573, 43), _arg_names_191346, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1573)
            subscript_call_result_191348 = invoke(stypy.reporting.localization.Localization(__file__, 1573, 43), getitem___191347, slice_191345)
            
            # Processing the call keyword arguments (line 1573)
            kwargs_191349 = {}
            # Getting the type of 'set' (line 1573)
            set_191343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 39), 'set', False)
            # Calling set(args, kwargs) (line 1573)
            set_call_result_191350 = invoke(stypy.reporting.localization.Localization(__file__, 1573, 39), set_191343, *[subscript_call_result_191348], **kwargs_191349)
            
            # Applying the binary operator '-' (line 1573)
            result_sub_191351 = python_operator(stypy.reporting.localization.Localization(__file__, 1573, 23), '-', replace_names_191342, set_call_result_191350)
            
            # Processing the call keyword arguments (line 1573)
            kwargs_191352 = {}
            # Getting the type of 'len' (line 1573)
            len_191341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 19), 'len', False)
            # Calling len(args, kwargs) (line 1573)
            len_call_result_191353 = invoke(stypy.reporting.localization.Localization(__file__, 1573, 19), len_191341, *[result_sub_191351], **kwargs_191352)
            
            int_191354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1573, 63), 'int')
            # Applying the binary operator '==' (line 1573)
            result_eq_191355 = python_operator(stypy.reporting.localization.Localization(__file__, 1573, 19), '==', len_call_result_191353, int_191354)
            
            # Testing the type of an if condition (line 1573)
            if_condition_191356 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1573, 16), result_eq_191355)
            # Assigning a type to the variable 'if_condition_191356' (line 1573)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1573, 16), 'if_condition_191356', if_condition_191356)
            # SSA begins for if statement (line 1573)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 1575):
            
            # Assigning a Subscript to a Name (line 1575):
            
            # Obtaining the type of the subscript
            int_191357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1575, 43), 'int')
            slice_191358 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1575, 32), int_191357, None, None)
            # Getting the type of '_arg_names' (line 1575)
            _arg_names_191359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 32), '_arg_names')
            # Obtaining the member '__getitem__' of a type (line 1575)
            getitem___191360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1575, 32), _arg_names_191359, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1575)
            subscript_call_result_191361 = invoke(stypy.reporting.localization.Localization(__file__, 1575, 32), getitem___191360, slice_191358)
            
            # Assigning a type to the variable 'arg_names' (line 1575)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1575, 20), 'arg_names', subscript_call_result_191361)
            # SSA branch for the else part of an if statement (line 1573)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Str to a Name (line 1577):
            
            # Assigning a Str to a Name (line 1577):
            unicode_191362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1577, 27), 'unicode', u"Got unknown 'replace_names' and wrapped function '%s' uses '*args', need 'positional_parameter_names'!")
            # Assigning a type to the variable 'msg' (line 1577)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1577, 20), 'msg', unicode_191362)
            
            # Call to AssertionError(...): (line 1580)
            # Processing the call arguments (line 1580)
            # Getting the type of 'msg' (line 1580)
            msg_191364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 41), 'msg', False)
            # Getting the type of 'func' (line 1580)
            func_191365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 47), 'func', False)
            # Obtaining the member '__name__' of a type (line 1580)
            name___191366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1580, 47), func_191365, '__name__')
            # Applying the binary operator '%' (line 1580)
            result_mod_191367 = python_operator(stypy.reporting.localization.Localization(__file__, 1580, 41), '%', msg_191364, name___191366)
            
            # Processing the call keyword arguments (line 1580)
            kwargs_191368 = {}
            # Getting the type of 'AssertionError' (line 1580)
            AssertionError_191363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 26), 'AssertionError', False)
            # Calling AssertionError(args, kwargs) (line 1580)
            AssertionError_call_result_191369 = invoke(stypy.reporting.localization.Localization(__file__, 1580, 26), AssertionError_191363, *[result_mod_191367], **kwargs_191368)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1580, 20), AssertionError_call_result_191369, 'raise parameter', BaseException)
            # SSA join for if statement (line 1573)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 1571)
            module_type_store.open_ssa_branch('else')
            
            # Type idiom detected: calculating its left and rigth part (line 1582)
            # Getting the type of 'positional_parameter_names' (line 1582)
            positional_parameter_names_191370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 16), 'positional_parameter_names')
            # Getting the type of 'None' (line 1582)
            None_191371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 53), 'None')
            
            (may_be_191372, more_types_in_union_191373) = may_not_be_none(positional_parameter_names_191370, None_191371)

            if may_be_191372:

                if more_types_in_union_191373:
                    # Runtime conditional SSA (line 1582)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                
                # Call to callable(...): (line 1583)
                # Processing the call arguments (line 1583)
                # Getting the type of 'positional_parameter_names' (line 1583)
                positional_parameter_names_191375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 32), 'positional_parameter_names', False)
                # Processing the call keyword arguments (line 1583)
                kwargs_191376 = {}
                # Getting the type of 'callable' (line 1583)
                callable_191374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 23), 'callable', False)
                # Calling callable(args, kwargs) (line 1583)
                callable_call_result_191377 = invoke(stypy.reporting.localization.Localization(__file__, 1583, 23), callable_191374, *[positional_parameter_names_191375], **kwargs_191376)
                
                # Testing the type of an if condition (line 1583)
                if_condition_191378 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1583, 20), callable_call_result_191377)
                # Assigning a type to the variable 'if_condition_191378' (line 1583)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 20), 'if_condition_191378', if_condition_191378)
                # SSA begins for if statement (line 1583)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Name to a Name (line 1585):
                
                # Assigning a Name to a Name (line 1585):
                # Getting the type of 'True' (line 1585)
                True_191379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 47), 'True')
                # Assigning a type to the variable 'arg_names_at_runtime' (line 1585)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1585, 24), 'arg_names_at_runtime', True_191379)
                
                # Assigning a List to a Name (line 1587):
                
                # Assigning a List to a Name (line 1587):
                
                # Obtaining an instance of the builtin type 'list' (line 1587)
                list_191380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1587, 36), 'list')
                # Adding type elements to the builtin type 'list' instance (line 1587)
                
                # Assigning a type to the variable 'arg_names' (line 1587)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1587, 24), 'arg_names', list_191380)
                # SSA branch for the else part of an if statement (line 1583)
                module_type_store.open_ssa_branch('else')
                
                # Assigning a Name to a Name (line 1589):
                
                # Assigning a Name to a Name (line 1589):
                # Getting the type of 'positional_parameter_names' (line 1589)
                positional_parameter_names_191381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 36), 'positional_parameter_names')
                # Assigning a type to the variable 'arg_names' (line 1589)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1589, 24), 'arg_names', positional_parameter_names_191381)
                # SSA join for if statement (line 1583)
                module_type_store = module_type_store.join_ssa_context()
                

                if more_types_in_union_191373:
                    # Runtime conditional SSA for else branch (line 1582)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_191372) or more_types_in_union_191373):
                
                # Getting the type of 'replace_all_args' (line 1591)
                replace_all_args_191382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 23), 'replace_all_args')
                # Testing the type of an if condition (line 1591)
                if_condition_191383 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1591, 20), replace_all_args_191382)
                # Assigning a type to the variable 'if_condition_191383' (line 1591)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1591, 20), 'if_condition_191383', if_condition_191383)
                # SSA begins for if statement (line 1591)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a List to a Name (line 1592):
                
                # Assigning a List to a Name (line 1592):
                
                # Obtaining an instance of the builtin type 'list' (line 1592)
                list_191384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1592, 36), 'list')
                # Adding type elements to the builtin type 'list' instance (line 1592)
                
                # Assigning a type to the variable 'arg_names' (line 1592)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1592, 24), 'arg_names', list_191384)
                # SSA branch for the else part of an if statement (line 1591)
                module_type_store.open_ssa_branch('else')
                
                # Assigning a Str to a Name (line 1594):
                
                # Assigning a Str to a Name (line 1594):
                unicode_191385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1594, 31), 'unicode', u"Got 'replace_names' and wrapped function '%s' uses *args, need 'positional_parameter_names' or 'replace_all_args'!")
                # Assigning a type to the variable 'msg' (line 1594)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1594, 24), 'msg', unicode_191385)
                
                # Call to AssertionError(...): (line 1598)
                # Processing the call arguments (line 1598)
                # Getting the type of 'msg' (line 1598)
                msg_191387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 45), 'msg', False)
                # Getting the type of 'func' (line 1598)
                func_191388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 51), 'func', False)
                # Obtaining the member '__name__' of a type (line 1598)
                name___191389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1598, 51), func_191388, '__name__')
                # Applying the binary operator '%' (line 1598)
                result_mod_191390 = python_operator(stypy.reporting.localization.Localization(__file__, 1598, 45), '%', msg_191387, name___191389)
                
                # Processing the call keyword arguments (line 1598)
                kwargs_191391 = {}
                # Getting the type of 'AssertionError' (line 1598)
                AssertionError_191386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 30), 'AssertionError', False)
                # Calling AssertionError(args, kwargs) (line 1598)
                AssertionError_call_result_191392 = invoke(stypy.reporting.localization.Localization(__file__, 1598, 30), AssertionError_191386, *[result_mod_191390], **kwargs_191391)
                
                ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1598, 24), AssertionError_call_result_191392, 'raise parameter', BaseException)
                # SSA join for if statement (line 1591)
                module_type_store = module_type_store.join_ssa_context()
                

                if (may_be_191372 and more_types_in_union_191373):
                    # SSA join for if statement (line 1582)
                    module_type_store = module_type_store.join_ssa_context()


            
            # SSA join for if statement (line 1571)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1568)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_191319 and more_types_in_union_191320):
                # SSA join for if statement (line 1565)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 1558)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Name (line 1602):
        
        # Assigning a Num to a Name (line 1602):
        int_191393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1602, 20), 'int')
        # Assigning a type to the variable 'label_pos' (line 1602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1602, 8), 'label_pos', int_191393)
        
        # Assigning a Num to a Name (line 1603):
        
        # Assigning a Num to a Name (line 1603):
        int_191394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1603, 26), 'int')
        # Assigning a type to the variable 'label_namer_pos' (line 1603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1603, 8), 'label_namer_pos', int_191394)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'label_namer' (line 1604)
        label_namer_191395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 12), 'label_namer')
        # Getting the type of 'arg_names' (line 1605)
        arg_names_191396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 16), 'arg_names')
        # Applying the binary operator 'and' (line 1604)
        result_and_keyword_191397 = python_operator(stypy.reporting.localization.Localization(__file__, 1604, 12), 'and', label_namer_191395, arg_names_191396)
        
        # Getting the type of 'label_namer' (line 1606)
        label_namer_191398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 17), 'label_namer')
        # Getting the type of 'arg_names' (line 1606)
        arg_names_191399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 32), 'arg_names')
        # Applying the binary operator 'in' (line 1606)
        result_contains_191400 = python_operator(stypy.reporting.localization.Localization(__file__, 1606, 17), 'in', label_namer_191398, arg_names_191399)
        
        # Applying the binary operator 'and' (line 1604)
        result_and_keyword_191401 = python_operator(stypy.reporting.localization.Localization(__file__, 1604, 12), 'and', result_and_keyword_191397, result_contains_191400)
        
        # Testing the type of an if condition (line 1604)
        if_condition_191402 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1604, 8), result_and_keyword_191401)
        # Assigning a type to the variable 'if_condition_191402' (line 1604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1604, 8), 'if_condition_191402', if_condition_191402)
        # SSA begins for if statement (line 1604)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1607):
        
        # Assigning a Call to a Name (line 1607):
        
        # Call to index(...): (line 1607)
        # Processing the call arguments (line 1607)
        # Getting the type of 'label_namer' (line 1607)
        label_namer_191405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 46), 'label_namer', False)
        # Processing the call keyword arguments (line 1607)
        kwargs_191406 = {}
        # Getting the type of 'arg_names' (line 1607)
        arg_names_191403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 30), 'arg_names', False)
        # Obtaining the member 'index' of a type (line 1607)
        index_191404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1607, 30), arg_names_191403, 'index')
        # Calling index(args, kwargs) (line 1607)
        index_call_result_191407 = invoke(stypy.reporting.localization.Localization(__file__, 1607, 30), index_191404, *[label_namer_191405], **kwargs_191406)
        
        # Assigning a type to the variable 'label_namer_pos' (line 1607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1607, 12), 'label_namer_pos', index_call_result_191407)
        
        
        unicode_191408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1608, 15), 'unicode', u'label')
        # Getting the type of 'arg_names' (line 1608)
        arg_names_191409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1608, 26), 'arg_names')
        # Applying the binary operator 'in' (line 1608)
        result_contains_191410 = python_operator(stypy.reporting.localization.Localization(__file__, 1608, 15), 'in', unicode_191408, arg_names_191409)
        
        # Testing the type of an if condition (line 1608)
        if_condition_191411 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1608, 12), result_contains_191410)
        # Assigning a type to the variable 'if_condition_191411' (line 1608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1608, 12), 'if_condition_191411', if_condition_191411)
        # SSA begins for if statement (line 1608)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1609):
        
        # Assigning a Call to a Name (line 1609):
        
        # Call to index(...): (line 1609)
        # Processing the call arguments (line 1609)
        unicode_191414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1609, 44), 'unicode', u'label')
        # Processing the call keyword arguments (line 1609)
        kwargs_191415 = {}
        # Getting the type of 'arg_names' (line 1609)
        arg_names_191412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 28), 'arg_names', False)
        # Obtaining the member 'index' of a type (line 1609)
        index_191413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1609, 28), arg_names_191412, 'index')
        # Calling index(args, kwargs) (line 1609)
        index_call_result_191416 = invoke(stypy.reporting.localization.Localization(__file__, 1609, 28), index_191413, *[unicode_191414], **kwargs_191415)
        
        # Assigning a type to the variable 'label_pos' (line 1609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1609, 16), 'label_pos', index_call_result_191416)
        # SSA join for if statement (line 1608)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1604)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'label_namer' (line 1615)
        label_namer_191417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 11), 'label_namer')
        
        # Getting the type of 'arg_names_at_runtime' (line 1615)
        arg_names_at_runtime_191418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 31), 'arg_names_at_runtime')
        # Applying the 'not' unary operator (line 1615)
        result_not__191419 = python_operator(stypy.reporting.localization.Localization(__file__, 1615, 27), 'not', arg_names_at_runtime_191418)
        
        # Applying the binary operator 'and' (line 1615)
        result_and_keyword_191420 = python_operator(stypy.reporting.localization.Localization(__file__, 1615, 11), 'and', label_namer_191417, result_not__191419)
        
        # Getting the type of '_has_varkwargs' (line 1615)
        _has_varkwargs_191421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 60), '_has_varkwargs')
        # Applying the 'not' unary operator (line 1615)
        result_not__191422 = python_operator(stypy.reporting.localization.Localization(__file__, 1615, 56), 'not', _has_varkwargs_191421)
        
        # Applying the binary operator 'and' (line 1615)
        result_and_keyword_191423 = python_operator(stypy.reporting.localization.Localization(__file__, 1615, 11), 'and', result_and_keyword_191420, result_not__191422)
        
        # Testing the type of an if condition (line 1615)
        if_condition_191424 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1615, 8), result_and_keyword_191423)
        # Assigning a type to the variable 'if_condition_191424' (line 1615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1615, 8), 'if_condition_191424', if_condition_191424)
        # SSA begins for if statement (line 1615)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'arg_names' (line 1616)
        arg_names_191425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 19), 'arg_names')
        # Applying the 'not' unary operator (line 1616)
        result_not__191426 = python_operator(stypy.reporting.localization.Localization(__file__, 1616, 15), 'not', arg_names_191425)
        
        # Testing the type of an if condition (line 1616)
        if_condition_191427 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1616, 12), result_not__191426)
        # Assigning a type to the variable 'if_condition_191427' (line 1616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1616, 12), 'if_condition_191427', if_condition_191427)
        # SSA begins for if statement (line 1616)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1617):
        
        # Assigning a Str to a Name (line 1617):
        unicode_191428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1617, 23), 'unicode', u"label_namer '%s' can't be found as the parameter without 'positional_parameter_names'.")
        # Assigning a type to the variable 'msg' (line 1617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1617, 16), 'msg', unicode_191428)
        
        # Call to AssertionError(...): (line 1619)
        # Processing the call arguments (line 1619)
        # Getting the type of 'msg' (line 1619)
        msg_191430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 37), 'msg', False)
        # Getting the type of 'label_namer' (line 1619)
        label_namer_191431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 43), 'label_namer', False)
        # Applying the binary operator '%' (line 1619)
        result_mod_191432 = python_operator(stypy.reporting.localization.Localization(__file__, 1619, 37), '%', msg_191430, label_namer_191431)
        
        # Processing the call keyword arguments (line 1619)
        kwargs_191433 = {}
        # Getting the type of 'AssertionError' (line 1619)
        AssertionError_191429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 22), 'AssertionError', False)
        # Calling AssertionError(args, kwargs) (line 1619)
        AssertionError_call_result_191434 = invoke(stypy.reporting.localization.Localization(__file__, 1619, 22), AssertionError_191429, *[result_mod_191432], **kwargs_191433)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1619, 16), AssertionError_call_result_191434, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 1616)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'label_namer' (line 1620)
        label_namer_191435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 17), 'label_namer')
        # Getting the type of 'arg_names' (line 1620)
        arg_names_191436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 36), 'arg_names')
        # Applying the binary operator 'notin' (line 1620)
        result_contains_191437 = python_operator(stypy.reporting.localization.Localization(__file__, 1620, 17), 'notin', label_namer_191435, arg_names_191436)
        
        # Testing the type of an if condition (line 1620)
        if_condition_191438 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1620, 17), result_contains_191437)
        # Assigning a type to the variable 'if_condition_191438' (line 1620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1620, 17), 'if_condition_191438', if_condition_191438)
        # SSA begins for if statement (line 1620)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1621):
        
        # Assigning a Str to a Name (line 1621):
        unicode_191439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1621, 23), 'unicode', u"label_namer '%s' can't be found in the parameter names (known argnames: %s).")
        # Assigning a type to the variable 'msg' (line 1621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1621, 16), 'msg', unicode_191439)
        
        # Call to AssertionError(...): (line 1623)
        # Processing the call arguments (line 1623)
        # Getting the type of 'msg' (line 1623)
        msg_191441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 37), 'msg', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1623)
        tuple_191442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1623, 44), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1623)
        # Adding element type (line 1623)
        # Getting the type of 'label_namer' (line 1623)
        label_namer_191443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 44), 'label_namer', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1623, 44), tuple_191442, label_namer_191443)
        # Adding element type (line 1623)
        # Getting the type of 'arg_names' (line 1623)
        arg_names_191444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 57), 'arg_names', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1623, 44), tuple_191442, arg_names_191444)
        
        # Applying the binary operator '%' (line 1623)
        result_mod_191445 = python_operator(stypy.reporting.localization.Localization(__file__, 1623, 37), '%', msg_191441, tuple_191442)
        
        # Processing the call keyword arguments (line 1623)
        kwargs_191446 = {}
        # Getting the type of 'AssertionError' (line 1623)
        AssertionError_191440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 22), 'AssertionError', False)
        # Calling AssertionError(args, kwargs) (line 1623)
        AssertionError_call_result_191447 = invoke(stypy.reporting.localization.Localization(__file__, 1623, 22), AssertionError_191440, *[result_mod_191445], **kwargs_191446)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1623, 16), AssertionError_call_result_191447, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 1620)
        module_type_store.open_ssa_branch('else')
        pass
        # SSA join for if statement (line 1620)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1616)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1615)
        module_type_store = module_type_store.join_ssa_context()
        

        @norecursion
        def inner(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'inner'
            module_type_store = module_type_store.open_function_context('inner', 1628, 8, False)
            
            # Passed parameters checking function
            inner.stypy_localization = localization
            inner.stypy_type_of_self = None
            inner.stypy_type_store = module_type_store
            inner.stypy_function_name = 'inner'
            inner.stypy_param_names_list = ['ax']
            inner.stypy_varargs_param_name = 'args'
            inner.stypy_kwargs_param_name = 'kwargs'
            inner.stypy_call_defaults = defaults
            inner.stypy_call_varargs = varargs
            inner.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'inner', ['ax'], 'args', 'kwargs', defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'inner', localization, ['ax'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'inner(...)' code ##################

            
            # Assigning a Name to a Name (line 1634):
            
            # Assigning a Name to a Name (line 1634):
            # Getting the type of 'label_pos' (line 1634)
            label_pos_191448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 25), 'label_pos')
            # Assigning a type to the variable '_label_pos' (line 1634)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1634, 12), '_label_pos', label_pos_191448)
            
            # Assigning a Name to a Name (line 1635):
            
            # Assigning a Name to a Name (line 1635):
            # Getting the type of 'label_namer_pos' (line 1635)
            label_namer_pos_191449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 31), 'label_namer_pos')
            # Assigning a type to the variable '_label_namer_pos' (line 1635)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1635, 12), '_label_namer_pos', label_namer_pos_191449)
            
            # Assigning a Name to a Name (line 1636):
            
            # Assigning a Name to a Name (line 1636):
            # Getting the type of 'arg_names' (line 1636)
            arg_names_191450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 25), 'arg_names')
            # Assigning a type to the variable '_arg_names' (line 1636)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1636, 12), '_arg_names', arg_names_191450)
            
            # Assigning a Name to a Name (line 1638):
            
            # Assigning a Name to a Name (line 1638):
            # Getting the type of 'None' (line 1638)
            None_191451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 20), 'None')
            # Assigning a type to the variable 'label' (line 1638)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1638, 12), 'label', None_191451)
            
            # Assigning a Call to a Name (line 1640):
            
            # Assigning a Call to a Name (line 1640):
            
            # Call to pop(...): (line 1640)
            # Processing the call arguments (line 1640)
            unicode_191454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1640, 30), 'unicode', u'data')
            # Getting the type of 'None' (line 1640)
            None_191455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 38), 'None', False)
            # Processing the call keyword arguments (line 1640)
            kwargs_191456 = {}
            # Getting the type of 'kwargs' (line 1640)
            kwargs_191452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 19), 'kwargs', False)
            # Obtaining the member 'pop' of a type (line 1640)
            pop_191453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1640, 19), kwargs_191452, 'pop')
            # Calling pop(args, kwargs) (line 1640)
            pop_call_result_191457 = invoke(stypy.reporting.localization.Localization(__file__, 1640, 19), pop_191453, *[unicode_191454, None_191455], **kwargs_191456)
            
            # Assigning a type to the variable 'data' (line 1640)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1640, 12), 'data', pop_call_result_191457)
            
            # Type idiom detected: calculating its left and rigth part (line 1642)
            # Getting the type of 'data' (line 1642)
            data_191458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 15), 'data')
            # Getting the type of 'None' (line 1642)
            None_191459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 23), 'None')
            
            (may_be_191460, more_types_in_union_191461) = may_be_none(data_191458, None_191459)

            if may_be_191460:

                if more_types_in_union_191461:
                    # Runtime conditional SSA (line 1642)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a Call to a Name (line 1643):
                
                # Assigning a Call to a Name (line 1643):
                
                # Call to tuple(...): (line 1643)
                # Processing the call arguments (line 1643)
                # Calculating generator expression
                module_type_store = module_type_store.open_function_context('list comprehension expression', 1643, 29, True)
                # Calculating comprehension expression
                # Getting the type of 'args' (line 1643)
                args_191467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 59), 'args', False)
                comprehension_191468 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1643, 29), args_191467)
                # Assigning a type to the variable 'a' (line 1643)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1643, 29), 'a', comprehension_191468)
                
                # Call to sanitize_sequence(...): (line 1643)
                # Processing the call arguments (line 1643)
                # Getting the type of 'a' (line 1643)
                a_191464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 47), 'a', False)
                # Processing the call keyword arguments (line 1643)
                kwargs_191465 = {}
                # Getting the type of 'sanitize_sequence' (line 1643)
                sanitize_sequence_191463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 29), 'sanitize_sequence', False)
                # Calling sanitize_sequence(args, kwargs) (line 1643)
                sanitize_sequence_call_result_191466 = invoke(stypy.reporting.localization.Localization(__file__, 1643, 29), sanitize_sequence_191463, *[a_191464], **kwargs_191465)
                
                list_191469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1643, 29), 'list')
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1643, 29), list_191469, sanitize_sequence_call_result_191466)
                # Processing the call keyword arguments (line 1643)
                kwargs_191470 = {}
                # Getting the type of 'tuple' (line 1643)
                tuple_191462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 23), 'tuple', False)
                # Calling tuple(args, kwargs) (line 1643)
                tuple_call_result_191471 = invoke(stypy.reporting.localization.Localization(__file__, 1643, 23), tuple_191462, *[list_191469], **kwargs_191470)
                
                # Assigning a type to the variable 'args' (line 1643)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1643, 16), 'args', tuple_call_result_191471)

                if more_types_in_union_191461:
                    # Runtime conditional SSA for else branch (line 1642)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_191460) or more_types_in_union_191461):
                
                # Getting the type of 'arg_names_at_runtime' (line 1645)
                arg_names_at_runtime_191472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 19), 'arg_names_at_runtime')
                # Testing the type of an if condition (line 1645)
                if_condition_191473 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1645, 16), arg_names_at_runtime_191472)
                # Assigning a type to the variable 'if_condition_191473' (line 1645)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 16), 'if_condition_191473', if_condition_191473)
                # SSA begins for if statement (line 1645)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Call to a Name (line 1648):
                
                # Assigning a Call to a Name (line 1648):
                
                # Call to positional_parameter_names(...): (line 1648)
                # Processing the call arguments (line 1648)
                # Getting the type of 'args' (line 1648)
                args_191475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 60), 'args', False)
                # Getting the type of 'data' (line 1648)
                data_191476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 66), 'data', False)
                # Processing the call keyword arguments (line 1648)
                kwargs_191477 = {}
                # Getting the type of 'positional_parameter_names' (line 1648)
                positional_parameter_names_191474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 33), 'positional_parameter_names', False)
                # Calling positional_parameter_names(args, kwargs) (line 1648)
                positional_parameter_names_call_result_191478 = invoke(stypy.reporting.localization.Localization(__file__, 1648, 33), positional_parameter_names_191474, *[args_191475, data_191476], **kwargs_191477)
                
                # Assigning a type to the variable '_arg_names' (line 1648)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 20), '_arg_names', positional_parameter_names_call_result_191478)
                
                
                # Evaluating a boolean operation
                # Getting the type of 'label_namer' (line 1649)
                label_namer_191479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 24), 'label_namer')
                # Getting the type of '_arg_names' (line 1650)
                _arg_names_191480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 28), '_arg_names')
                # Applying the binary operator 'and' (line 1649)
                result_and_keyword_191481 = python_operator(stypy.reporting.localization.Localization(__file__, 1649, 24), 'and', label_namer_191479, _arg_names_191480)
                
                # Getting the type of 'label_namer' (line 1651)
                label_namer_191482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 29), 'label_namer')
                # Getting the type of '_arg_names' (line 1651)
                _arg_names_191483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 44), '_arg_names')
                # Applying the binary operator 'in' (line 1651)
                result_contains_191484 = python_operator(stypy.reporting.localization.Localization(__file__, 1651, 29), 'in', label_namer_191482, _arg_names_191483)
                
                # Applying the binary operator 'and' (line 1649)
                result_and_keyword_191485 = python_operator(stypy.reporting.localization.Localization(__file__, 1649, 24), 'and', result_and_keyword_191481, result_contains_191484)
                
                # Testing the type of an if condition (line 1649)
                if_condition_191486 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1649, 20), result_and_keyword_191485)
                # Assigning a type to the variable 'if_condition_191486' (line 1649)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1649, 20), 'if_condition_191486', if_condition_191486)
                # SSA begins for if statement (line 1649)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Call to a Name (line 1652):
                
                # Assigning a Call to a Name (line 1652):
                
                # Call to index(...): (line 1652)
                # Processing the call arguments (line 1652)
                # Getting the type of 'label_namer' (line 1652)
                label_namer_191489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 60), 'label_namer', False)
                # Processing the call keyword arguments (line 1652)
                kwargs_191490 = {}
                # Getting the type of '_arg_names' (line 1652)
                _arg_names_191487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 43), '_arg_names', False)
                # Obtaining the member 'index' of a type (line 1652)
                index_191488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 43), _arg_names_191487, 'index')
                # Calling index(args, kwargs) (line 1652)
                index_call_result_191491 = invoke(stypy.reporting.localization.Localization(__file__, 1652, 43), index_191488, *[label_namer_191489], **kwargs_191490)
                
                # Assigning a type to the variable '_label_namer_pos' (line 1652)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1652, 24), '_label_namer_pos', index_call_result_191491)
                
                
                unicode_191492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1653, 27), 'unicode', u'label')
                # Getting the type of '_arg_names' (line 1653)
                _arg_names_191493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 38), '_arg_names')
                # Applying the binary operator 'in' (line 1653)
                result_contains_191494 = python_operator(stypy.reporting.localization.Localization(__file__, 1653, 27), 'in', unicode_191492, _arg_names_191493)
                
                # Testing the type of an if condition (line 1653)
                if_condition_191495 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1653, 24), result_contains_191494)
                # Assigning a type to the variable 'if_condition_191495' (line 1653)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1653, 24), 'if_condition_191495', if_condition_191495)
                # SSA begins for if statement (line 1653)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Call to a Name (line 1654):
                
                # Assigning a Call to a Name (line 1654):
                
                # Call to index(...): (line 1654)
                # Processing the call arguments (line 1654)
                unicode_191498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1654, 57), 'unicode', u'label')
                # Processing the call keyword arguments (line 1654)
                kwargs_191499 = {}
                # Getting the type of 'arg_names' (line 1654)
                arg_names_191496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 41), 'arg_names', False)
                # Obtaining the member 'index' of a type (line 1654)
                index_191497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 41), arg_names_191496, 'index')
                # Calling index(args, kwargs) (line 1654)
                index_call_result_191500 = invoke(stypy.reporting.localization.Localization(__file__, 1654, 41), index_191497, *[unicode_191498], **kwargs_191499)
                
                # Assigning a type to the variable '_label_pos' (line 1654)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1654, 28), '_label_pos', index_call_result_191500)
                # SSA join for if statement (line 1653)
                module_type_store = module_type_store.join_ssa_context()
                
                # SSA join for if statement (line 1649)
                module_type_store = module_type_store.join_ssa_context()
                
                # SSA join for if statement (line 1645)
                module_type_store = module_type_store.join_ssa_context()
                
                
                
                # Getting the type of '_label_namer_pos' (line 1658)
                _label_namer_pos_191501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 19), '_label_namer_pos')
                
                # Call to len(...): (line 1658)
                # Processing the call arguments (line 1658)
                # Getting the type of 'args' (line 1658)
                args_191503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 42), 'args', False)
                # Processing the call keyword arguments (line 1658)
                kwargs_191504 = {}
                # Getting the type of 'len' (line 1658)
                len_191502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 38), 'len', False)
                # Calling len(args, kwargs) (line 1658)
                len_call_result_191505 = invoke(stypy.reporting.localization.Localization(__file__, 1658, 38), len_191502, *[args_191503], **kwargs_191504)
                
                # Applying the binary operator '<' (line 1658)
                result_lt_191506 = python_operator(stypy.reporting.localization.Localization(__file__, 1658, 19), '<', _label_namer_pos_191501, len_call_result_191505)
                
                # Testing the type of an if condition (line 1658)
                if_condition_191507 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1658, 16), result_lt_191506)
                # Assigning a type to the variable 'if_condition_191507' (line 1658)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1658, 16), 'if_condition_191507', if_condition_191507)
                # SSA begins for if statement (line 1658)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Subscript to a Name (line 1659):
                
                # Assigning a Subscript to a Name (line 1659):
                
                # Obtaining the type of the subscript
                # Getting the type of '_label_namer_pos' (line 1659)
                _label_namer_pos_191508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 33), '_label_namer_pos')
                # Getting the type of 'args' (line 1659)
                args_191509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 28), 'args')
                # Obtaining the member '__getitem__' of a type (line 1659)
                getitem___191510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1659, 28), args_191509, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1659)
                subscript_call_result_191511 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 28), getitem___191510, _label_namer_pos_191508)
                
                # Assigning a type to the variable 'label' (line 1659)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 20), 'label', subscript_call_result_191511)
                # SSA branch for the else part of an if statement (line 1658)
                module_type_store.open_ssa_branch('else')
                
                # Assigning a Call to a Name (line 1661):
                
                # Assigning a Call to a Name (line 1661):
                
                # Call to get(...): (line 1661)
                # Processing the call arguments (line 1661)
                # Getting the type of 'label_namer' (line 1661)
                label_namer_191514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 39), 'label_namer', False)
                # Getting the type of 'None' (line 1661)
                None_191515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 52), 'None', False)
                # Processing the call keyword arguments (line 1661)
                kwargs_191516 = {}
                # Getting the type of 'kwargs' (line 1661)
                kwargs_191512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 28), 'kwargs', False)
                # Obtaining the member 'get' of a type (line 1661)
                get_191513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1661, 28), kwargs_191512, 'get')
                # Calling get(args, kwargs) (line 1661)
                get_call_result_191517 = invoke(stypy.reporting.localization.Localization(__file__, 1661, 28), get_191513, *[label_namer_191514, None_191515], **kwargs_191516)
                
                # Assigning a type to the variable 'label' (line 1661)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1661, 20), 'label', get_call_result_191517)
                # SSA join for if statement (line 1658)
                module_type_store = module_type_store.join_ssa_context()
                
                
                
                
                # Call to isinstance(...): (line 1663)
                # Processing the call arguments (line 1663)
                # Getting the type of 'label' (line 1663)
                label_191519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 34), 'label', False)
                # Getting the type of 'six' (line 1663)
                six_191520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 41), 'six', False)
                # Obtaining the member 'string_types' of a type (line 1663)
                string_types_191521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1663, 41), six_191520, 'string_types')
                # Processing the call keyword arguments (line 1663)
                kwargs_191522 = {}
                # Getting the type of 'isinstance' (line 1663)
                isinstance_191518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 23), 'isinstance', False)
                # Calling isinstance(args, kwargs) (line 1663)
                isinstance_call_result_191523 = invoke(stypy.reporting.localization.Localization(__file__, 1663, 23), isinstance_191518, *[label_191519, string_types_191521], **kwargs_191522)
                
                # Applying the 'not' unary operator (line 1663)
                result_not__191524 = python_operator(stypy.reporting.localization.Localization(__file__, 1663, 19), 'not', isinstance_call_result_191523)
                
                # Testing the type of an if condition (line 1663)
                if_condition_191525 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1663, 16), result_not__191524)
                # Assigning a type to the variable 'if_condition_191525' (line 1663)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1663, 16), 'if_condition_191525', if_condition_191525)
                # SSA begins for if statement (line 1663)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Name to a Name (line 1664):
                
                # Assigning a Name to a Name (line 1664):
                # Getting the type of 'None' (line 1664)
                None_191526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 28), 'None')
                # Assigning a type to the variable 'label' (line 1664)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1664, 20), 'label', None_191526)
                # SSA join for if statement (line 1663)
                module_type_store = module_type_store.join_ssa_context()
                
                
                
                # Evaluating a boolean operation
                
                # Getting the type of 'replace_names' (line 1666)
                replace_names_191527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 20), 'replace_names')
                # Getting the type of 'None' (line 1666)
                None_191528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 37), 'None')
                # Applying the binary operator 'is' (line 1666)
                result_is__191529 = python_operator(stypy.reporting.localization.Localization(__file__, 1666, 20), 'is', replace_names_191527, None_191528)
                
                
                # Getting the type of 'replace_all_args' (line 1666)
                replace_all_args_191530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 47), 'replace_all_args')
                # Getting the type of 'True' (line 1666)
                True_191531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 67), 'True')
                # Applying the binary operator 'is' (line 1666)
                result_is__191532 = python_operator(stypy.reporting.localization.Localization(__file__, 1666, 47), 'is', replace_all_args_191530, True_191531)
                
                # Applying the binary operator 'or' (line 1666)
                result_or_keyword_191533 = python_operator(stypy.reporting.localization.Localization(__file__, 1666, 19), 'or', result_is__191529, result_is__191532)
                
                # Testing the type of an if condition (line 1666)
                if_condition_191534 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1666, 16), result_or_keyword_191533)
                # Assigning a type to the variable 'if_condition_191534' (line 1666)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1666, 16), 'if_condition_191534', if_condition_191534)
                # SSA begins for if statement (line 1666)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Call to a Name (line 1668):
                
                # Assigning a Call to a Name (line 1668):
                
                # Call to tuple(...): (line 1668)
                # Processing the call arguments (line 1668)
                # Calculating generator expression
                module_type_store = module_type_store.open_function_context('list comprehension expression', 1668, 33, True)
                # Calculating comprehension expression
                
                # Call to enumerate(...): (line 1669)
                # Processing the call arguments (line 1669)
                # Getting the type of 'args' (line 1669)
                args_191542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 51), 'args', False)
                # Processing the call keyword arguments (line 1669)
                kwargs_191543 = {}
                # Getting the type of 'enumerate' (line 1669)
                enumerate_191541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 41), 'enumerate', False)
                # Calling enumerate(args, kwargs) (line 1669)
                enumerate_call_result_191544 = invoke(stypy.reporting.localization.Localization(__file__, 1669, 41), enumerate_191541, *[args_191542], **kwargs_191543)
                
                comprehension_191545 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1668, 33), enumerate_call_result_191544)
                # Assigning a type to the variable 'j' (line 1668)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 33), 'j', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1668, 33), comprehension_191545))
                # Assigning a type to the variable 'a' (line 1668)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 33), 'a', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1668, 33), comprehension_191545))
                
                # Call to _replacer(...): (line 1668)
                # Processing the call arguments (line 1668)
                # Getting the type of 'data' (line 1668)
                data_191537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 43), 'data', False)
                # Getting the type of 'a' (line 1668)
                a_191538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 49), 'a', False)
                # Processing the call keyword arguments (line 1668)
                kwargs_191539 = {}
                # Getting the type of '_replacer' (line 1668)
                _replacer_191536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 33), '_replacer', False)
                # Calling _replacer(args, kwargs) (line 1668)
                _replacer_call_result_191540 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 33), _replacer_191536, *[data_191537, a_191538], **kwargs_191539)
                
                list_191546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1668, 33), 'list')
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1668, 33), list_191546, _replacer_call_result_191540)
                # Processing the call keyword arguments (line 1668)
                kwargs_191547 = {}
                # Getting the type of 'tuple' (line 1668)
                tuple_191535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 27), 'tuple', False)
                # Calling tuple(args, kwargs) (line 1668)
                tuple_call_result_191548 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 27), tuple_191535, *[list_191546], **kwargs_191547)
                
                # Assigning a type to the variable 'args' (line 1668)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 20), 'args', tuple_call_result_191548)
                # SSA branch for the else part of an if statement (line 1666)
                module_type_store.open_ssa_branch('else')
                
                
                
                # Call to len(...): (line 1673)
                # Processing the call arguments (line 1673)
                # Getting the type of '_arg_names' (line 1673)
                _arg_names_191550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 27), '_arg_names', False)
                # Processing the call keyword arguments (line 1673)
                kwargs_191551 = {}
                # Getting the type of 'len' (line 1673)
                len_191549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 23), 'len', False)
                # Calling len(args, kwargs) (line 1673)
                len_call_result_191552 = invoke(stypy.reporting.localization.Localization(__file__, 1673, 23), len_191549, *[_arg_names_191550], **kwargs_191551)
                
                
                # Call to len(...): (line 1673)
                # Processing the call arguments (line 1673)
                # Getting the type of 'args' (line 1673)
                args_191554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 45), 'args', False)
                # Processing the call keyword arguments (line 1673)
                kwargs_191555 = {}
                # Getting the type of 'len' (line 1673)
                len_191553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 41), 'len', False)
                # Calling len(args, kwargs) (line 1673)
                len_call_result_191556 = invoke(stypy.reporting.localization.Localization(__file__, 1673, 41), len_191553, *[args_191554], **kwargs_191555)
                
                # Applying the binary operator '<' (line 1673)
                result_lt_191557 = python_operator(stypy.reporting.localization.Localization(__file__, 1673, 23), '<', len_call_result_191552, len_call_result_191556)
                
                # Testing the type of an if condition (line 1673)
                if_condition_191558 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1673, 20), result_lt_191557)
                # Assigning a type to the variable 'if_condition_191558' (line 1673)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1673, 20), 'if_condition_191558', if_condition_191558)
                # SSA begins for if statement (line 1673)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Call to RuntimeError(...): (line 1674)
                # Processing the call arguments (line 1674)
                unicode_191560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1675, 28), 'unicode', u'Got more args than function expects')
                # Processing the call keyword arguments (line 1674)
                kwargs_191561 = {}
                # Getting the type of 'RuntimeError' (line 1674)
                RuntimeError_191559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 30), 'RuntimeError', False)
                # Calling RuntimeError(args, kwargs) (line 1674)
                RuntimeError_call_result_191562 = invoke(stypy.reporting.localization.Localization(__file__, 1674, 30), RuntimeError_191559, *[unicode_191560], **kwargs_191561)
                
                ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1674, 24), RuntimeError_call_result_191562, 'raise parameter', BaseException)
                # SSA join for if statement (line 1673)
                module_type_store = module_type_store.join_ssa_context()
                
                
                # Assigning a Call to a Name (line 1676):
                
                # Assigning a Call to a Name (line 1676):
                
                # Call to tuple(...): (line 1676)
                # Processing the call arguments (line 1676)
                # Calculating generator expression
                module_type_store = module_type_store.open_function_context('list comprehension expression', 1676, 33, True)
                # Calculating comprehension expression
                
                # Call to enumerate(...): (line 1678)
                # Processing the call arguments (line 1678)
                # Getting the type of 'args' (line 1678)
                args_191578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 55), 'args', False)
                # Processing the call keyword arguments (line 1678)
                kwargs_191579 = {}
                # Getting the type of 'enumerate' (line 1678)
                enumerate_191577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 45), 'enumerate', False)
                # Calling enumerate(args, kwargs) (line 1678)
                enumerate_call_result_191580 = invoke(stypy.reporting.localization.Localization(__file__, 1678, 45), enumerate_191577, *[args_191578], **kwargs_191579)
                
                comprehension_191581 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1676, 33), enumerate_call_result_191580)
                # Assigning a type to the variable 'j' (line 1676)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1676, 33), 'j', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1676, 33), comprehension_191581))
                # Assigning a type to the variable 'a' (line 1676)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1676, 33), 'a', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1676, 33), comprehension_191581))
                
                
                
                # Obtaining the type of the subscript
                # Getting the type of 'j' (line 1677)
                j_191564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 47), 'j', False)
                # Getting the type of '_arg_names' (line 1677)
                _arg_names_191565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 36), '_arg_names', False)
                # Obtaining the member '__getitem__' of a type (line 1677)
                getitem___191566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 36), _arg_names_191565, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1677)
                subscript_call_result_191567 = invoke(stypy.reporting.localization.Localization(__file__, 1677, 36), getitem___191566, j_191564)
                
                # Getting the type of 'replace_names' (line 1677)
                replace_names_191568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 53), 'replace_names', False)
                # Applying the binary operator 'in' (line 1677)
                result_contains_191569 = python_operator(stypy.reporting.localization.Localization(__file__, 1677, 36), 'in', subscript_call_result_191567, replace_names_191568)
                
                # Testing the type of an if expression (line 1676)
                is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1676, 33), result_contains_191569)
                # SSA begins for if expression (line 1676)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
                
                # Call to _replacer(...): (line 1676)
                # Processing the call arguments (line 1676)
                # Getting the type of 'data' (line 1676)
                data_191571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 43), 'data', False)
                # Getting the type of 'a' (line 1676)
                a_191572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 49), 'a', False)
                # Processing the call keyword arguments (line 1676)
                kwargs_191573 = {}
                # Getting the type of '_replacer' (line 1676)
                _replacer_191570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 33), '_replacer', False)
                # Calling _replacer(args, kwargs) (line 1676)
                _replacer_call_result_191574 = invoke(stypy.reporting.localization.Localization(__file__, 1676, 33), _replacer_191570, *[data_191571, a_191572], **kwargs_191573)
                
                # SSA branch for the else part of an if expression (line 1676)
                module_type_store.open_ssa_branch('if expression else')
                # Getting the type of 'a' (line 1677)
                a_191575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 72), 'a', False)
                # SSA join for if expression (line 1676)
                module_type_store = module_type_store.join_ssa_context()
                if_exp_191576 = union_type.UnionType.add(_replacer_call_result_191574, a_191575)
                
                list_191582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1676, 33), 'list')
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1676, 33), list_191582, if_exp_191576)
                # Processing the call keyword arguments (line 1676)
                kwargs_191583 = {}
                # Getting the type of 'tuple' (line 1676)
                tuple_191563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 27), 'tuple', False)
                # Calling tuple(args, kwargs) (line 1676)
                tuple_call_result_191584 = invoke(stypy.reporting.localization.Localization(__file__, 1676, 27), tuple_191563, *[list_191582], **kwargs_191583)
                
                # Assigning a type to the variable 'args' (line 1676)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1676, 20), 'args', tuple_call_result_191584)
                # SSA join for if statement (line 1666)
                module_type_store = module_type_store.join_ssa_context()
                
                
                # Type idiom detected: calculating its left and rigth part (line 1680)
                # Getting the type of 'replace_names' (line 1680)
                replace_names_191585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 19), 'replace_names')
                # Getting the type of 'None' (line 1680)
                None_191586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 36), 'None')
                
                (may_be_191587, more_types_in_union_191588) = may_be_none(replace_names_191585, None_191586)

                if may_be_191587:

                    if more_types_in_union_191588:
                        # Runtime conditional SSA (line 1680)
                        module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                    else:
                        module_type_store = module_type_store

                    
                    # Assigning a Call to a Name (line 1682):
                    
                    # Assigning a Call to a Name (line 1682):
                    
                    # Call to dict(...): (line 1682)
                    # Processing the call arguments (line 1682)
                    # Calculating generator expression
                    module_type_store = module_type_store.open_function_context('list comprehension expression', 1682, 34, True)
                    # Calculating comprehension expression
                    
                    # Call to iteritems(...): (line 1683)
                    # Processing the call arguments (line 1683)
                    # Getting the type of 'kwargs' (line 1683)
                    kwargs_191599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 60), 'kwargs', False)
                    # Processing the call keyword arguments (line 1683)
                    kwargs_191600 = {}
                    # Getting the type of 'six' (line 1683)
                    six_191597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 46), 'six', False)
                    # Obtaining the member 'iteritems' of a type (line 1683)
                    iteritems_191598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1683, 46), six_191597, 'iteritems')
                    # Calling iteritems(args, kwargs) (line 1683)
                    iteritems_call_result_191601 = invoke(stypy.reporting.localization.Localization(__file__, 1683, 46), iteritems_191598, *[kwargs_191599], **kwargs_191600)
                    
                    comprehension_191602 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1682, 34), iteritems_call_result_191601)
                    # Assigning a type to the variable 'k' (line 1682)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1682, 34), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1682, 34), comprehension_191602))
                    # Assigning a type to the variable 'v' (line 1682)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1682, 34), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1682, 34), comprehension_191602))
                    
                    # Obtaining an instance of the builtin type 'tuple' (line 1682)
                    tuple_191590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1682, 35), 'tuple')
                    # Adding type elements to the builtin type 'tuple' instance (line 1682)
                    # Adding element type (line 1682)
                    # Getting the type of 'k' (line 1682)
                    k_191591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 35), 'k', False)
                    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1682, 35), tuple_191590, k_191591)
                    # Adding element type (line 1682)
                    
                    # Call to _replacer(...): (line 1682)
                    # Processing the call arguments (line 1682)
                    # Getting the type of 'data' (line 1682)
                    data_191593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 48), 'data', False)
                    # Getting the type of 'v' (line 1682)
                    v_191594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 54), 'v', False)
                    # Processing the call keyword arguments (line 1682)
                    kwargs_191595 = {}
                    # Getting the type of '_replacer' (line 1682)
                    _replacer_191592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 38), '_replacer', False)
                    # Calling _replacer(args, kwargs) (line 1682)
                    _replacer_call_result_191596 = invoke(stypy.reporting.localization.Localization(__file__, 1682, 38), _replacer_191592, *[data_191593, v_191594], **kwargs_191595)
                    
                    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1682, 35), tuple_191590, _replacer_call_result_191596)
                    
                    list_191603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1682, 34), 'list')
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1682, 34), list_191603, tuple_191590)
                    # Processing the call keyword arguments (line 1682)
                    kwargs_191604 = {}
                    # Getting the type of 'dict' (line 1682)
                    dict_191589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 29), 'dict', False)
                    # Calling dict(args, kwargs) (line 1682)
                    dict_call_result_191605 = invoke(stypy.reporting.localization.Localization(__file__, 1682, 29), dict_191589, *[list_191603], **kwargs_191604)
                    
                    # Assigning a type to the variable 'kwargs' (line 1682)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1682, 20), 'kwargs', dict_call_result_191605)

                    if more_types_in_union_191588:
                        # Runtime conditional SSA for else branch (line 1680)
                        module_type_store.open_ssa_branch('idiom else')



                if ((not may_be_191587) or more_types_in_union_191588):
                    
                    # Assigning a Call to a Name (line 1686):
                    
                    # Assigning a Call to a Name (line 1686):
                    
                    # Call to dict(...): (line 1686)
                    # Processing the call arguments (line 1686)
                    # Calculating generator expression
                    module_type_store = module_type_store.open_function_context('list comprehension expression', 1686, 34, True)
                    # Calculating comprehension expression
                    
                    # Call to iteritems(...): (line 1688)
                    # Processing the call arguments (line 1688)
                    # Getting the type of 'kwargs' (line 1688)
                    kwargs_191621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 60), 'kwargs', False)
                    # Processing the call keyword arguments (line 1688)
                    kwargs_191622 = {}
                    # Getting the type of 'six' (line 1688)
                    six_191619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 46), 'six', False)
                    # Obtaining the member 'iteritems' of a type (line 1688)
                    iteritems_191620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1688, 46), six_191619, 'iteritems')
                    # Calling iteritems(args, kwargs) (line 1688)
                    iteritems_call_result_191623 = invoke(stypy.reporting.localization.Localization(__file__, 1688, 46), iteritems_191620, *[kwargs_191621], **kwargs_191622)
                    
                    comprehension_191624 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1686, 34), iteritems_call_result_191623)
                    # Assigning a type to the variable 'k' (line 1686)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 34), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1686, 34), comprehension_191624))
                    # Assigning a type to the variable 'v' (line 1686)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 34), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1686, 34), comprehension_191624))
                    
                    # Obtaining an instance of the builtin type 'tuple' (line 1686)
                    tuple_191607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1686, 35), 'tuple')
                    # Adding type elements to the builtin type 'tuple' instance (line 1686)
                    # Adding element type (line 1686)
                    # Getting the type of 'k' (line 1686)
                    k_191608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 35), 'k', False)
                    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1686, 35), tuple_191607, k_191608)
                    # Adding element type (line 1686)
                    
                    
                    # Getting the type of 'k' (line 1687)
                    k_191609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 38), 'k', False)
                    # Getting the type of 'replace_names' (line 1687)
                    replace_names_191610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 43), 'replace_names', False)
                    # Applying the binary operator 'in' (line 1687)
                    result_contains_191611 = python_operator(stypy.reporting.localization.Localization(__file__, 1687, 38), 'in', k_191609, replace_names_191610)
                    
                    # Testing the type of an if expression (line 1686)
                    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1686, 38), result_contains_191611)
                    # SSA begins for if expression (line 1686)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
                    
                    # Call to _replacer(...): (line 1686)
                    # Processing the call arguments (line 1686)
                    # Getting the type of 'data' (line 1686)
                    data_191613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 48), 'data', False)
                    # Getting the type of 'v' (line 1686)
                    v_191614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 54), 'v', False)
                    # Processing the call keyword arguments (line 1686)
                    kwargs_191615 = {}
                    # Getting the type of '_replacer' (line 1686)
                    _replacer_191612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 38), '_replacer', False)
                    # Calling _replacer(args, kwargs) (line 1686)
                    _replacer_call_result_191616 = invoke(stypy.reporting.localization.Localization(__file__, 1686, 38), _replacer_191612, *[data_191613, v_191614], **kwargs_191615)
                    
                    # SSA branch for the else part of an if expression (line 1686)
                    module_type_store.open_ssa_branch('if expression else')
                    # Getting the type of 'v' (line 1687)
                    v_191617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 62), 'v', False)
                    # SSA join for if expression (line 1686)
                    module_type_store = module_type_store.join_ssa_context()
                    if_exp_191618 = union_type.UnionType.add(_replacer_call_result_191616, v_191617)
                    
                    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1686, 35), tuple_191607, if_exp_191618)
                    
                    list_191625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1686, 34), 'list')
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1686, 34), list_191625, tuple_191607)
                    # Processing the call keyword arguments (line 1686)
                    kwargs_191626 = {}
                    # Getting the type of 'dict' (line 1686)
                    dict_191606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 29), 'dict', False)
                    # Calling dict(args, kwargs) (line 1686)
                    dict_call_result_191627 = invoke(stypy.reporting.localization.Localization(__file__, 1686, 29), dict_191606, *[list_191625], **kwargs_191626)
                    
                    # Assigning a type to the variable 'kwargs' (line 1686)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 20), 'kwargs', dict_call_result_191627)

                    if (may_be_191587 and more_types_in_union_191588):
                        # SSA join for if statement (line 1680)
                        module_type_store = module_type_store.join_ssa_context()


                

                if (may_be_191460 and more_types_in_union_191461):
                    # SSA join for if statement (line 1642)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Assigning a BoolOp to a Name (line 1693):
            
            # Assigning a BoolOp to a Name (line 1693):
            
            # Evaluating a boolean operation
            
            
            # Call to len(...): (line 1694)
            # Processing the call arguments (line 1694)
            # Getting the type of 'args' (line 1694)
            args_191629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 21), 'args', False)
            # Processing the call keyword arguments (line 1694)
            kwargs_191630 = {}
            # Getting the type of 'len' (line 1694)
            len_191628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 17), 'len', False)
            # Calling len(args, kwargs) (line 1694)
            len_call_result_191631 = invoke(stypy.reporting.localization.Localization(__file__, 1694, 17), len_191628, *[args_191629], **kwargs_191630)
            
            # Getting the type of '_label_pos' (line 1694)
            _label_pos_191632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 30), '_label_pos')
            # Applying the binary operator '>=' (line 1694)
            result_ge_191633 = python_operator(stypy.reporting.localization.Localization(__file__, 1694, 17), '>=', len_call_result_191631, _label_pos_191632)
            
            
            unicode_191634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1695, 17), 'unicode', u'label')
            # Getting the type of 'kwargs' (line 1695)
            kwargs_191635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 28), 'kwargs')
            # Applying the binary operator 'in' (line 1695)
            result_contains_191636 = python_operator(stypy.reporting.localization.Localization(__file__, 1695, 17), 'in', unicode_191634, kwargs_191635)
            
            # Applying the binary operator 'or' (line 1694)
            result_or_keyword_191637 = python_operator(stypy.reporting.localization.Localization(__file__, 1694, 16), 'or', result_ge_191633, result_contains_191636)
            
            # Assigning a type to the variable 'user_supplied_label' (line 1693)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1693, 12), 'user_supplied_label', result_or_keyword_191637)
            
            
            # Evaluating a boolean operation
            # Getting the type of 'label_namer' (line 1697)
            label_namer_191638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 16), 'label_namer')
            
            # Getting the type of 'user_supplied_label' (line 1697)
            user_supplied_label_191639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 36), 'user_supplied_label')
            # Applying the 'not' unary operator (line 1697)
            result_not__191640 = python_operator(stypy.reporting.localization.Localization(__file__, 1697, 32), 'not', user_supplied_label_191639)
            
            # Applying the binary operator 'and' (line 1697)
            result_and_keyword_191641 = python_operator(stypy.reporting.localization.Localization(__file__, 1697, 16), 'and', label_namer_191638, result_not__191640)
            
            # Testing the type of an if condition (line 1697)
            if_condition_191642 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1697, 12), result_and_keyword_191641)
            # Assigning a type to the variable 'if_condition_191642' (line 1697)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1697, 12), 'if_condition_191642', if_condition_191642)
            # SSA begins for if statement (line 1697)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            # Getting the type of '_label_namer_pos' (line 1698)
            _label_namer_pos_191643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 19), '_label_namer_pos')
            
            # Call to len(...): (line 1698)
            # Processing the call arguments (line 1698)
            # Getting the type of 'args' (line 1698)
            args_191645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 42), 'args', False)
            # Processing the call keyword arguments (line 1698)
            kwargs_191646 = {}
            # Getting the type of 'len' (line 1698)
            len_191644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 38), 'len', False)
            # Calling len(args, kwargs) (line 1698)
            len_call_result_191647 = invoke(stypy.reporting.localization.Localization(__file__, 1698, 38), len_191644, *[args_191645], **kwargs_191646)
            
            # Applying the binary operator '<' (line 1698)
            result_lt_191648 = python_operator(stypy.reporting.localization.Localization(__file__, 1698, 19), '<', _label_namer_pos_191643, len_call_result_191647)
            
            # Testing the type of an if condition (line 1698)
            if_condition_191649 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1698, 16), result_lt_191648)
            # Assigning a type to the variable 'if_condition_191649' (line 1698)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1698, 16), 'if_condition_191649', if_condition_191649)
            # SSA begins for if statement (line 1698)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Subscript (line 1699):
            
            # Assigning a Call to a Subscript (line 1699):
            
            # Call to get_label(...): (line 1699)
            # Processing the call arguments (line 1699)
            
            # Obtaining the type of the subscript
            # Getting the type of '_label_namer_pos' (line 1699)
            _label_namer_pos_191651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 53), '_label_namer_pos', False)
            # Getting the type of 'args' (line 1699)
            args_191652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 48), 'args', False)
            # Obtaining the member '__getitem__' of a type (line 1699)
            getitem___191653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1699, 48), args_191652, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1699)
            subscript_call_result_191654 = invoke(stypy.reporting.localization.Localization(__file__, 1699, 48), getitem___191653, _label_namer_pos_191651)
            
            # Getting the type of 'label' (line 1699)
            label_191655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 72), 'label', False)
            # Processing the call keyword arguments (line 1699)
            kwargs_191656 = {}
            # Getting the type of 'get_label' (line 1699)
            get_label_191650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 38), 'get_label', False)
            # Calling get_label(args, kwargs) (line 1699)
            get_label_call_result_191657 = invoke(stypy.reporting.localization.Localization(__file__, 1699, 38), get_label_191650, *[subscript_call_result_191654, label_191655], **kwargs_191656)
            
            # Getting the type of 'kwargs' (line 1699)
            kwargs_191658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 20), 'kwargs')
            unicode_191659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1699, 27), 'unicode', u'label')
            # Storing an element on a container (line 1699)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1699, 20), kwargs_191658, (unicode_191659, get_label_call_result_191657))
            # SSA branch for the else part of an if statement (line 1698)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'label_namer' (line 1700)
            label_namer_191660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 21), 'label_namer')
            # Getting the type of 'kwargs' (line 1700)
            kwargs_191661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 36), 'kwargs')
            # Applying the binary operator 'in' (line 1700)
            result_contains_191662 = python_operator(stypy.reporting.localization.Localization(__file__, 1700, 21), 'in', label_namer_191660, kwargs_191661)
            
            # Testing the type of an if condition (line 1700)
            if_condition_191663 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1700, 21), result_contains_191662)
            # Assigning a type to the variable 'if_condition_191663' (line 1700)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1700, 21), 'if_condition_191663', if_condition_191663)
            # SSA begins for if statement (line 1700)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Subscript (line 1701):
            
            # Assigning a Call to a Subscript (line 1701):
            
            # Call to get_label(...): (line 1701)
            # Processing the call arguments (line 1701)
            
            # Obtaining the type of the subscript
            # Getting the type of 'label_namer' (line 1701)
            label_namer_191665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 55), 'label_namer', False)
            # Getting the type of 'kwargs' (line 1701)
            kwargs_191666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 48), 'kwargs', False)
            # Obtaining the member '__getitem__' of a type (line 1701)
            getitem___191667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1701, 48), kwargs_191666, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1701)
            subscript_call_result_191668 = invoke(stypy.reporting.localization.Localization(__file__, 1701, 48), getitem___191667, label_namer_191665)
            
            # Getting the type of 'label' (line 1701)
            label_191669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 69), 'label', False)
            # Processing the call keyword arguments (line 1701)
            kwargs_191670 = {}
            # Getting the type of 'get_label' (line 1701)
            get_label_191664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 38), 'get_label', False)
            # Calling get_label(args, kwargs) (line 1701)
            get_label_call_result_191671 = invoke(stypy.reporting.localization.Localization(__file__, 1701, 38), get_label_191664, *[subscript_call_result_191668, label_191669], **kwargs_191670)
            
            # Getting the type of 'kwargs' (line 1701)
            kwargs_191672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 20), 'kwargs')
            unicode_191673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1701, 27), 'unicode', u'label')
            # Storing an element on a container (line 1701)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1701, 20), kwargs_191672, (unicode_191673, get_label_call_result_191671))
            # SSA branch for the else part of an if statement (line 1700)
            module_type_store.open_ssa_branch('else')
            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1703, 20))
            
            # 'import warnings' statement (line 1703)
            import warnings

            import_module(stypy.reporting.localization.Localization(__file__, 1703, 20), 'warnings', warnings, module_type_store)
            
            
            # Assigning a Str to a Name (line 1704):
            
            # Assigning a Str to a Name (line 1704):
            unicode_191674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 27), 'unicode', u"Tried to set a label via parameter '%s' in func '%s' but couldn't find such an argument. \n(This is a programming error, please report to the matplotlib list!)")
            # Assigning a type to the variable 'msg' (line 1704)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1704, 20), 'msg', unicode_191674)
            
            # Call to warn(...): (line 1708)
            # Processing the call arguments (line 1708)
            # Getting the type of 'msg' (line 1708)
            msg_191677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 34), 'msg', False)
            
            # Obtaining an instance of the builtin type 'tuple' (line 1708)
            tuple_191678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1708, 41), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1708)
            # Adding element type (line 1708)
            # Getting the type of 'label_namer' (line 1708)
            label_namer_191679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 41), 'label_namer', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 41), tuple_191678, label_namer_191679)
            # Adding element type (line 1708)
            # Getting the type of 'func' (line 1708)
            func_191680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 54), 'func', False)
            # Obtaining the member '__name__' of a type (line 1708)
            name___191681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1708, 54), func_191680, '__name__')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1708, 41), tuple_191678, name___191681)
            
            # Applying the binary operator '%' (line 1708)
            result_mod_191682 = python_operator(stypy.reporting.localization.Localization(__file__, 1708, 34), '%', msg_191677, tuple_191678)
            
            # Getting the type of 'RuntimeWarning' (line 1709)
            RuntimeWarning_191683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 34), 'RuntimeWarning', False)
            # Processing the call keyword arguments (line 1708)
            int_191684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1709, 61), 'int')
            keyword_191685 = int_191684
            kwargs_191686 = {'stacklevel': keyword_191685}
            # Getting the type of 'warnings' (line 1708)
            warnings_191675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 20), 'warnings', False)
            # Obtaining the member 'warn' of a type (line 1708)
            warn_191676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1708, 20), warnings_191675, 'warn')
            # Calling warn(args, kwargs) (line 1708)
            warn_call_result_191687 = invoke(stypy.reporting.localization.Localization(__file__, 1708, 20), warn_191676, *[result_mod_191682, RuntimeWarning_191683], **kwargs_191686)
            
            # SSA join for if statement (line 1700)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1698)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1697)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to func(...): (line 1710)
            # Processing the call arguments (line 1710)
            # Getting the type of 'ax' (line 1710)
            ax_191689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 24), 'ax', False)
            # Getting the type of 'args' (line 1710)
            args_191690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 29), 'args', False)
            # Processing the call keyword arguments (line 1710)
            # Getting the type of 'kwargs' (line 1710)
            kwargs_191691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 37), 'kwargs', False)
            kwargs_191692 = {'kwargs_191691': kwargs_191691}
            # Getting the type of 'func' (line 1710)
            func_191688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 19), 'func', False)
            # Calling func(args, kwargs) (line 1710)
            func_call_result_191693 = invoke(stypy.reporting.localization.Localization(__file__, 1710, 19), func_191688, *[ax_191689, args_191690], **kwargs_191692)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1710)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1710, 12), 'stypy_return_type', func_call_result_191693)
            
            # ################# End of 'inner(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'inner' in the type store
            # Getting the type of 'stypy_return_type' (line 1628)
            stypy_return_type_191694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_191694)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'inner'
            return stypy_return_type_191694

        # Assigning a type to the variable 'inner' (line 1628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 8), 'inner', inner)
        
        # Assigning a Attribute to a Name (line 1711):
        
        # Assigning a Attribute to a Name (line 1711):
        # Getting the type of 'inner' (line 1711)
        inner_191695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 18), 'inner')
        # Obtaining the member '__doc__' of a type (line 1711)
        doc___191696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1711, 18), inner_191695, '__doc__')
        # Assigning a type to the variable 'pre_doc' (line 1711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1711, 8), 'pre_doc', doc___191696)
        
        # Type idiom detected: calculating its left and rigth part (line 1712)
        # Getting the type of 'pre_doc' (line 1712)
        pre_doc_191697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 11), 'pre_doc')
        # Getting the type of 'None' (line 1712)
        None_191698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 22), 'None')
        
        (may_be_191699, more_types_in_union_191700) = may_be_none(pre_doc_191697, None_191698)

        if may_be_191699:

            if more_types_in_union_191700:
                # Runtime conditional SSA (line 1712)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Name (line 1713):
            
            # Assigning a Str to a Name (line 1713):
            unicode_191701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1713, 22), 'unicode', u'')
            # Assigning a type to the variable 'pre_doc' (line 1713)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1713, 12), 'pre_doc', unicode_191701)

            if more_types_in_union_191700:
                # Runtime conditional SSA for else branch (line 1712)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_191699) or more_types_in_union_191700):
            
            # Assigning a Call to a Name (line 1715):
            
            # Assigning a Call to a Name (line 1715):
            
            # Call to dedent(...): (line 1715)
            # Processing the call arguments (line 1715)
            # Getting the type of 'pre_doc' (line 1715)
            pre_doc_191703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 29), 'pre_doc', False)
            # Processing the call keyword arguments (line 1715)
            kwargs_191704 = {}
            # Getting the type of 'dedent' (line 1715)
            dedent_191702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 22), 'dedent', False)
            # Calling dedent(args, kwargs) (line 1715)
            dedent_call_result_191705 = invoke(stypy.reporting.localization.Localization(__file__, 1715, 22), dedent_191702, *[pre_doc_191703], **kwargs_191704)
            
            # Assigning a type to the variable 'pre_doc' (line 1715)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1715, 12), 'pre_doc', dedent_call_result_191705)

            if (may_be_191699 and more_types_in_union_191700):
                # SSA join for if statement (line 1712)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Str to a Name (line 1716):
        
        # Assigning a Str to a Name (line 1716):
        unicode_191706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1716, 16), 'unicode', u'')
        # Assigning a type to the variable '_repl' (line 1716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1716, 8), '_repl', unicode_191706)
        
        # Type idiom detected: calculating its left and rigth part (line 1717)
        # Getting the type of 'replace_names' (line 1717)
        replace_names_191707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 11), 'replace_names')
        # Getting the type of 'None' (line 1717)
        None_191708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 28), 'None')
        
        (may_be_191709, more_types_in_union_191710) = may_be_none(replace_names_191707, None_191708)

        if may_be_191709:

            if more_types_in_union_191710:
                # Runtime conditional SSA (line 1717)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Name (line 1718):
            
            # Assigning a Str to a Name (line 1718):
            unicode_191711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1718, 20), 'unicode', u'* All positional and all keyword arguments.')
            # Assigning a type to the variable '_repl' (line 1718)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1718, 12), '_repl', unicode_191711)

            if more_types_in_union_191710:
                # Runtime conditional SSA for else branch (line 1717)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_191709) or more_types_in_union_191710):
            
            
            
            # Call to len(...): (line 1720)
            # Processing the call arguments (line 1720)
            # Getting the type of 'replace_names' (line 1720)
            replace_names_191713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 19), 'replace_names', False)
            # Processing the call keyword arguments (line 1720)
            kwargs_191714 = {}
            # Getting the type of 'len' (line 1720)
            len_191712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 15), 'len', False)
            # Calling len(args, kwargs) (line 1720)
            len_call_result_191715 = invoke(stypy.reporting.localization.Localization(__file__, 1720, 15), len_191712, *[replace_names_191713], **kwargs_191714)
            
            int_191716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1720, 37), 'int')
            # Applying the binary operator '!=' (line 1720)
            result_ne_191717 = python_operator(stypy.reporting.localization.Localization(__file__, 1720, 15), '!=', len_call_result_191715, int_191716)
            
            # Testing the type of an if condition (line 1720)
            if_condition_191718 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1720, 12), result_ne_191717)
            # Assigning a type to the variable 'if_condition_191718' (line 1720)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1720, 12), 'if_condition_191718', if_condition_191718)
            # SSA begins for if statement (line 1720)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Str to a Name (line 1721):
            
            # Assigning a Str to a Name (line 1721):
            unicode_191719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1721, 24), 'unicode', u"* All arguments with the following names: '{names}'.")
            # Assigning a type to the variable '_repl' (line 1721)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1721, 16), '_repl', unicode_191719)
            # SSA join for if statement (line 1720)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'replace_all_args' (line 1722)
            replace_all_args_191720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 15), 'replace_all_args')
            # Testing the type of an if condition (line 1722)
            if_condition_191721 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1722, 12), replace_all_args_191720)
            # Assigning a type to the variable 'if_condition_191721' (line 1722)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1722, 12), 'if_condition_191721', if_condition_191721)
            # SSA begins for if statement (line 1722)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Getting the type of '_repl' (line 1723)
            _repl_191722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 16), '_repl')
            unicode_191723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1723, 25), 'unicode', u'\n    * All positional arguments.')
            # Applying the binary operator '+=' (line 1723)
            result_iadd_191724 = python_operator(stypy.reporting.localization.Localization(__file__, 1723, 16), '+=', _repl_191722, unicode_191723)
            # Assigning a type to the variable '_repl' (line 1723)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1723, 16), '_repl', result_iadd_191724)
            
            # SSA join for if statement (line 1722)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 1724):
            
            # Assigning a Call to a Name (line 1724):
            
            # Call to format(...): (line 1724)
            # Processing the call keyword arguments (line 1724)
            
            # Call to join(...): (line 1724)
            # Processing the call arguments (line 1724)
            
            # Call to sorted(...): (line 1724)
            # Processing the call arguments (line 1724)
            # Getting the type of 'replace_names' (line 1724)
            replace_names_191730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 58), 'replace_names', False)
            # Processing the call keyword arguments (line 1724)
            kwargs_191731 = {}
            # Getting the type of 'sorted' (line 1724)
            sorted_191729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 51), 'sorted', False)
            # Calling sorted(args, kwargs) (line 1724)
            sorted_call_result_191732 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 51), sorted_191729, *[replace_names_191730], **kwargs_191731)
            
            # Processing the call keyword arguments (line 1724)
            kwargs_191733 = {}
            unicode_191727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1724, 39), 'unicode', u"', '")
            # Obtaining the member 'join' of a type (line 1724)
            join_191728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1724, 39), unicode_191727, 'join')
            # Calling join(args, kwargs) (line 1724)
            join_call_result_191734 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 39), join_191728, *[sorted_call_result_191732], **kwargs_191733)
            
            keyword_191735 = join_call_result_191734
            kwargs_191736 = {'names': keyword_191735}
            # Getting the type of '_repl' (line 1724)
            _repl_191725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 20), '_repl', False)
            # Obtaining the member 'format' of a type (line 1724)
            format_191726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1724, 20), _repl_191725, 'format')
            # Calling format(args, kwargs) (line 1724)
            format_call_result_191737 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 20), format_191726, *[], **kwargs_191736)
            
            # Assigning a type to the variable '_repl' (line 1724)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1724, 12), '_repl', format_call_result_191737)

            if (may_be_191709 and more_types_in_union_191710):
                # SSA join for if statement (line 1717)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a BinOp to a Attribute (line 1725):
        
        # Assigning a BinOp to a Attribute (line 1725):
        # Getting the type of 'pre_doc' (line 1725)
        pre_doc_191738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 25), 'pre_doc')
        
        # Call to format(...): (line 1726)
        # Processing the call keyword arguments (line 1726)
        # Getting the type of '_repl' (line 1726)
        _repl_191741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 60), '_repl', False)
        keyword_191742 = _repl_191741
        kwargs_191743 = {'replaced': keyword_191742}
        # Getting the type of '_DATA_DOC_APPENDIX' (line 1726)
        _DATA_DOC_APPENDIX_191739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 25), '_DATA_DOC_APPENDIX', False)
        # Obtaining the member 'format' of a type (line 1726)
        format_191740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1726, 25), _DATA_DOC_APPENDIX_191739, 'format')
        # Calling format(args, kwargs) (line 1726)
        format_call_result_191744 = invoke(stypy.reporting.localization.Localization(__file__, 1726, 25), format_191740, *[], **kwargs_191743)
        
        # Applying the binary operator '+' (line 1725)
        result_add_191745 = python_operator(stypy.reporting.localization.Localization(__file__, 1725, 25), '+', pre_doc_191738, format_call_result_191744)
        
        # Getting the type of 'inner' (line 1725)
        inner_191746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 8), 'inner')
        # Setting the type of the member '__doc__' of a type (line 1725)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1725, 8), inner_191746, '__doc__', result_add_191745)
        
        
        # Getting the type of 'python_has_wrapped' (line 1727)
        python_has_wrapped_191747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 15), 'python_has_wrapped')
        # Applying the 'not' unary operator (line 1727)
        result_not__191748 = python_operator(stypy.reporting.localization.Localization(__file__, 1727, 11), 'not', python_has_wrapped_191747)
        
        # Testing the type of an if condition (line 1727)
        if_condition_191749 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1727, 8), result_not__191748)
        # Assigning a type to the variable 'if_condition_191749' (line 1727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1727, 8), 'if_condition_191749', if_condition_191749)
        # SSA begins for if statement (line 1727)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1728):
        
        # Assigning a Name to a Attribute (line 1728):
        # Getting the type of 'func' (line 1728)
        func_191750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 32), 'func')
        # Getting the type of 'inner' (line 1728)
        inner_191751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 12), 'inner')
        # Setting the type of the member '__wrapped__' of a type (line 1728)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1728, 12), inner_191751, '__wrapped__', func_191750)
        # SSA join for if statement (line 1727)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1729)
        # Getting the type of 'new_sig' (line 1729)
        new_sig_191752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 8), 'new_sig')
        # Getting the type of 'None' (line 1729)
        None_191753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 26), 'None')
        
        (may_be_191754, more_types_in_union_191755) = may_not_be_none(new_sig_191752, None_191753)

        if may_be_191754:

            if more_types_in_union_191755:
                # Runtime conditional SSA (line 1729)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 1730):
            
            # Assigning a Name to a Attribute (line 1730):
            # Getting the type of 'new_sig' (line 1730)
            new_sig_191756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 34), 'new_sig')
            # Getting the type of 'inner' (line 1730)
            inner_191757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 12), 'inner')
            # Setting the type of the member '__signature__' of a type (line 1730)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1730, 12), inner_191757, '__signature__', new_sig_191756)

            if more_types_in_union_191755:
                # SSA join for if statement (line 1729)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'inner' (line 1731)
        inner_191758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 15), 'inner')
        # Assigning a type to the variable 'stypy_return_type' (line 1731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1731, 8), 'stypy_return_type', inner_191758)
        
        # ################# End of 'param(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'param' in the type store
        # Getting the type of 'stypy_return_type' (line 1505)
        stypy_return_type_191759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_191759)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'param'
        return stypy_return_type_191759

    # Assigning a type to the variable 'param' (line 1505)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1505, 4), 'param', param)
    # Getting the type of 'param' (line 1732)
    param_191760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 11), 'param')
    # Assigning a type to the variable 'stypy_return_type' (line 1732)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1732, 4), 'stypy_return_type', param_191760)
    
    # ################# End of '_preprocess_data(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_preprocess_data' in the type store
    # Getting the type of 'stypy_return_type' (line 1465)
    stypy_return_type_191761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_191761)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_preprocess_data'
    return stypy_return_type_191761

# Assigning a type to the variable '_preprocess_data' (line 1465)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1465, 0), '_preprocess_data', _preprocess_data)

# Call to report(...): (line 1735)
# Processing the call arguments (line 1735)
unicode_191764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1735, 15), 'unicode', u'matplotlib version %s')
# Getting the type of '__version__' (line 1735)
version___191765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 41), '__version__', False)
# Applying the binary operator '%' (line 1735)
result_mod_191766 = python_operator(stypy.reporting.localization.Localization(__file__, 1735, 15), '%', unicode_191764, version___191765)

# Processing the call keyword arguments (line 1735)
kwargs_191767 = {}
# Getting the type of 'verbose' (line 1735)
verbose_191762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 0), 'verbose', False)
# Obtaining the member 'report' of a type (line 1735)
report_191763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1735, 0), verbose_191762, 'report')
# Calling report(args, kwargs) (line 1735)
report_call_result_191768 = invoke(stypy.reporting.localization.Localization(__file__, 1735, 0), report_191763, *[result_mod_191766], **kwargs_191767)


# Call to report(...): (line 1736)
# Processing the call arguments (line 1736)
unicode_191771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1736, 15), 'unicode', u'verbose.level %s')
# Getting the type of 'verbose' (line 1736)
verbose_191772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 36), 'verbose', False)
# Obtaining the member 'level' of a type (line 1736)
level_191773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 36), verbose_191772, 'level')
# Applying the binary operator '%' (line 1736)
result_mod_191774 = python_operator(stypy.reporting.localization.Localization(__file__, 1736, 15), '%', unicode_191771, level_191773)

# Processing the call keyword arguments (line 1736)
kwargs_191775 = {}
# Getting the type of 'verbose' (line 1736)
verbose_191769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 0), 'verbose', False)
# Obtaining the member 'report' of a type (line 1736)
report_191770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 0), verbose_191769, 'report')
# Calling report(args, kwargs) (line 1736)
report_call_result_191776 = invoke(stypy.reporting.localization.Localization(__file__, 1736, 0), report_191770, *[result_mod_191774], **kwargs_191775)


# Call to report(...): (line 1737)
# Processing the call arguments (line 1737)
unicode_191779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1737, 15), 'unicode', u'interactive is %s')

# Call to is_interactive(...): (line 1737)
# Processing the call keyword arguments (line 1737)
kwargs_191781 = {}
# Getting the type of 'is_interactive' (line 1737)
is_interactive_191780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 37), 'is_interactive', False)
# Calling is_interactive(args, kwargs) (line 1737)
is_interactive_call_result_191782 = invoke(stypy.reporting.localization.Localization(__file__, 1737, 37), is_interactive_191780, *[], **kwargs_191781)

# Applying the binary operator '%' (line 1737)
result_mod_191783 = python_operator(stypy.reporting.localization.Localization(__file__, 1737, 15), '%', unicode_191779, is_interactive_call_result_191782)

# Processing the call keyword arguments (line 1737)
kwargs_191784 = {}
# Getting the type of 'verbose' (line 1737)
verbose_191777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 0), 'verbose', False)
# Obtaining the member 'report' of a type (line 1737)
report_191778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1737, 0), verbose_191777, 'report')
# Calling report(args, kwargs) (line 1737)
report_call_result_191785 = invoke(stypy.reporting.localization.Localization(__file__, 1737, 0), report_191778, *[result_mod_191783], **kwargs_191784)


# Call to report(...): (line 1738)
# Processing the call arguments (line 1738)
unicode_191788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1738, 15), 'unicode', u'platform is %s')
# Getting the type of 'sys' (line 1738)
sys_191789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 34), 'sys', False)
# Obtaining the member 'platform' of a type (line 1738)
platform_191790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1738, 34), sys_191789, 'platform')
# Applying the binary operator '%' (line 1738)
result_mod_191791 = python_operator(stypy.reporting.localization.Localization(__file__, 1738, 15), '%', unicode_191788, platform_191790)

# Processing the call keyword arguments (line 1738)
kwargs_191792 = {}
# Getting the type of 'verbose' (line 1738)
verbose_191786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 0), 'verbose', False)
# Obtaining the member 'report' of a type (line 1738)
report_191787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1738, 0), verbose_191786, 'report')
# Calling report(args, kwargs) (line 1738)
report_call_result_191793 = invoke(stypy.reporting.localization.Localization(__file__, 1738, 0), report_191787, *[result_mod_191791], **kwargs_191792)


# Call to report(...): (line 1739)
# Processing the call arguments (line 1739)
unicode_191796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1739, 15), 'unicode', u'loaded modules: %s')

# Call to list(...): (line 1739)
# Processing the call arguments (line 1739)
# Getting the type of 'sys' (line 1739)
sys_191798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 43), 'sys', False)
# Obtaining the member 'modules' of a type (line 1739)
modules_191799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1739, 43), sys_191798, 'modules')
# Processing the call keyword arguments (line 1739)
kwargs_191800 = {}
# Getting the type of 'list' (line 1739)
list_191797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 38), 'list', False)
# Calling list(args, kwargs) (line 1739)
list_call_result_191801 = invoke(stypy.reporting.localization.Localization(__file__, 1739, 38), list_191797, *[modules_191799], **kwargs_191800)

# Applying the binary operator '%' (line 1739)
result_mod_191802 = python_operator(stypy.reporting.localization.Localization(__file__, 1739, 15), '%', unicode_191796, list_call_result_191801)

unicode_191803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1739, 57), 'unicode', u'debug')
# Processing the call keyword arguments (line 1739)
kwargs_191804 = {}
# Getting the type of 'verbose' (line 1739)
verbose_191794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 0), 'verbose', False)
# Obtaining the member 'report' of a type (line 1739)
report_191795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1739, 0), verbose_191794, 'report')
# Calling report(args, kwargs) (line 1739)
report_call_result_191805 = invoke(stypy.reporting.localization.Localization(__file__, 1739, 0), report_191795, *[result_mod_191802, unicode_191803], **kwargs_191804)


# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
